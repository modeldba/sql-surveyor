// Generated from MySQLParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var MySQLParserListener = require('./MySQLParserListener').MySQLParserListener;
var MySQLParserVisitor = require('./MySQLParserVisitor').MySQLParserVisitor;

/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

var MySQLBaseRecognizer = require('./MySQLBaseRecognizer').MySQLBaseRecognizer;

var grammarFileName = "MySQLParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0311\u20a8\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t",
    "\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004",
    "\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t",
    "\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004",
    "\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t",
    "\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004",
    "\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t",
    "\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004",
    "\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t",
    "\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004",
    "\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t",
    "\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0004",
    "\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004\u0169\t",
    "\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t\u016c\u0004",
    "\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004\u0170\t",
    "\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t\u0173\u0004",
    "\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004\u0177\t",
    "\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t\u017a\u0004",
    "\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004\u017e\t",
    "\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t\u0181\u0004",
    "\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004\u0185\t",
    "\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t\u0188\u0004",
    "\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004\u018c\t",
    "\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t\u018f\u0004",
    "\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004\u0193\t",
    "\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0004\u0196\t\u0196\u0004",
    "\u0197\t\u0197\u0004\u0198\t\u0198\u0004\u0199\t\u0199\u0004\u019a\t",
    "\u019a\u0004\u019b\t\u019b\u0004\u019c\t\u019c\u0004\u019d\t\u019d\u0004",
    "\u019e\t\u019e\u0004\u019f\t\u019f\u0004\u01a0\t\u01a0\u0004\u01a1\t",
    "\u01a1\u0004\u01a2\t\u01a2\u0004\u01a3\t\u01a3\u0004\u01a4\t\u01a4\u0004",
    "\u01a5\t\u01a5\u0004\u01a6\t\u01a6\u0004\u01a7\t\u01a7\u0004\u01a8\t",
    "\u01a8\u0004\u01a9\t\u01a9\u0004\u01aa\t\u01aa\u0004\u01ab\t\u01ab\u0004",
    "\u01ac\t\u01ac\u0004\u01ad\t\u01ad\u0004\u01ae\t\u01ae\u0004\u01af\t",
    "\u01af\u0004\u01b0\t\u01b0\u0004\u01b1\t\u01b1\u0004\u01b2\t\u01b2\u0004",
    "\u01b3\t\u01b3\u0004\u01b4\t\u01b4\u0004\u01b5\t\u01b5\u0004\u01b6\t",
    "\u01b6\u0004\u01b7\t\u01b7\u0004\u01b8\t\u01b8\u0004\u01b9\t\u01b9\u0004",
    "\u01ba\t\u01ba\u0004\u01bb\t\u01bb\u0004\u01bc\t\u01bc\u0004\u01bd\t",
    "\u01bd\u0004\u01be\t\u01be\u0004\u01bf\t\u01bf\u0004\u01c0\t\u01c0\u0004",
    "\u01c1\t\u01c1\u0004\u01c2\t\u01c2\u0004\u01c3\t\u01c3\u0004\u01c4\t",
    "\u01c4\u0004\u01c5\t\u01c5\u0004\u01c6\t\u01c6\u0004\u01c7\t\u01c7\u0004",
    "\u01c8\t\u01c8\u0004\u01c9\t\u01c9\u0004\u01ca\t\u01ca\u0004\u01cb\t",
    "\u01cb\u0004\u01cc\t\u01cc\u0004\u01cd\t\u01cd\u0004\u01ce\t\u01ce\u0004",
    "\u01cf\t\u01cf\u0004\u01d0\t\u01d0\u0004\u01d1\t\u01d1\u0004\u01d2\t",
    "\u01d2\u0004\u01d3\t\u01d3\u0004\u01d4\t\u01d4\u0004\u01d5\t\u01d5\u0004",
    "\u01d6\t\u01d6\u0004\u01d7\t\u01d7\u0004\u01d8\t\u01d8\u0004\u01d9\t",
    "\u01d9\u0004\u01da\t\u01da\u0004\u01db\t\u01db\u0004\u01dc\t\u01dc\u0004",
    "\u01dd\t\u01dd\u0004\u01de\t\u01de\u0004\u01df\t\u01df\u0004\u01e0\t",
    "\u01e0\u0004\u01e1\t\u01e1\u0004\u01e2\t\u01e2\u0004\u01e3\t\u01e3\u0004",
    "\u01e4\t\u01e4\u0004\u01e5\t\u01e5\u0004\u01e6\t\u01e6\u0004\u01e7\t",
    "\u01e7\u0004\u01e8\t\u01e8\u0004\u01e9\t\u01e9\u0004\u01ea\t\u01ea\u0004",
    "\u01eb\t\u01eb\u0004\u01ec\t\u01ec\u0004\u01ed\t\u01ed\u0004\u01ee\t",
    "\u01ee\u0004\u01ef\t\u01ef\u0004\u01f0\t\u01f0\u0004\u01f1\t\u01f1\u0004",
    "\u01f2\t\u01f2\u0004\u01f3\t\u01f3\u0004\u01f4\t\u01f4\u0004\u01f5\t",
    "\u01f5\u0004\u01f6\t\u01f6\u0004\u01f7\t\u01f7\u0004\u01f8\t\u01f8\u0004",
    "\u01f9\t\u01f9\u0004\u01fa\t\u01fa\u0004\u01fb\t\u01fb\u0004\u01fc\t",
    "\u01fc\u0004\u01fd\t\u01fd\u0004\u01fe\t\u01fe\u0004\u01ff\t\u01ff\u0004",
    "\u0200\t\u0200\u0004\u0201\t\u0201\u0004\u0202\t\u0202\u0004\u0203\t",
    "\u0203\u0004\u0204\t\u0204\u0004\u0205\t\u0205\u0004\u0206\t\u0206\u0004",
    "\u0207\t\u0207\u0004\u0208\t\u0208\u0004\u0209\t\u0209\u0004\u020a\t",
    "\u020a\u0004\u020b\t\u020b\u0004\u020c\t\u020c\u0004\u020d\t\u020d\u0004",
    "\u020e\t\u020e\u0004\u020f\t\u020f\u0004\u0210\t\u0210\u0004\u0211\t",
    "\u0211\u0004\u0212\t\u0212\u0004\u0213\t\u0213\u0004\u0214\t\u0214\u0004",
    "\u0215\t\u0215\u0004\u0216\t\u0216\u0004\u0217\t\u0217\u0004\u0218\t",
    "\u0218\u0004\u0219\t\u0219\u0004\u021a\t\u021a\u0004\u021b\t\u021b\u0004",
    "\u021c\t\u021c\u0004\u021d\t\u021d\u0004\u021e\t\u021e\u0004\u021f\t",
    "\u021f\u0004\u0220\t\u0220\u0004\u0221\t\u0221\u0004\u0222\t\u0222\u0004",
    "\u0223\t\u0223\u0004\u0224\t\u0224\u0004\u0225\t\u0225\u0004\u0226\t",
    "\u0226\u0004\u0227\t\u0227\u0004\u0228\t\u0228\u0004\u0229\t\u0229\u0004",
    "\u022a\t\u022a\u0004\u022b\t\u022b\u0004\u022c\t\u022c\u0004\u022d\t",
    "\u022d\u0004\u022e\t\u022e\u0004\u022f\t\u022f\u0004\u0230\t\u0230\u0004",
    "\u0231\t\u0231\u0004\u0232\t\u0232\u0004\u0233\t\u0233\u0004\u0234\t",
    "\u0234\u0004\u0235\t\u0235\u0004\u0236\t\u0236\u0004\u0237\t\u0237\u0004",
    "\u0238\t\u0238\u0004\u0239\t\u0239\u0004\u023a\t\u023a\u0004\u023b\t",
    "\u023b\u0004\u023c\t\u023c\u0004\u023d\t\u023d\u0004\u023e\t\u023e\u0004",
    "\u023f\t\u023f\u0004\u0240\t\u0240\u0004\u0241\t\u0241\u0004\u0242\t",
    "\u0242\u0004\u0243\t\u0243\u0004\u0244\t\u0244\u0004\u0245\t\u0245\u0004",
    "\u0246\t\u0246\u0004\u0247\t\u0247\u0004\u0248\t\u0248\u0004\u0249\t",
    "\u0249\u0004\u024a\t\u024a\u0004\u024b\t\u024b\u0004\u024c\t\u024c\u0004",
    "\u024d\t\u024d\u0004\u024e\t\u024e\u0004\u024f\t\u024f\u0004\u0250\t",
    "\u0250\u0004\u0251\t\u0251\u0004\u0252\t\u0252\u0004\u0253\t\u0253\u0004",
    "\u0254\t\u0254\u0004\u0255\t\u0255\u0004\u0256\t\u0256\u0004\u0257\t",
    "\u0257\u0004\u0258\t\u0258\u0004\u0259\t\u0259\u0004\u025a\t\u025a\u0004",
    "\u025b\t\u025b\u0004\u025c\t\u025c\u0004\u025d\t\u025d\u0004\u025e\t",
    "\u025e\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u04c0\n\u0002",
    "\u0003\u0002\u0003\u0002\u0005\u0002\u04c4\n\u0002\u0003\u0002\u0005",
    "\u0002\u04c7\n\u0002\u0005\u0002\u04c9\n\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u04ed\n\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u04f5",
    "\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u04fa\n\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u050a\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0006\u0005\u050f\n\u0005\r\u0005\u000e\u0005\u0510",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0518\n\u0005\u0003\u0006\u0005\u0006\u051b\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0522\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0527\n\u0006\u0003",
    "\u0006\u0005\u0006\u052a\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u052f\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u0535\n\u0006\u0005\u0006\u0537\n\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u053b\n\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u053f\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0548\n\u0007\u0003",
    "\b\u0003\b\u0005\b\u054c\n\b\u0003\b\u0007\b\u054f\n\b\f\b\u000e\b\u0552",
    "\u000b\b\u0003\t\u0003\t\u0003\t\u0005\t\u0557\n\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\u000b\u0005\u000b\u055e\n\u000b\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u0562\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u0567\n\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u056c\n\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0573\n\f\u0003\f\u0005\f",
    "\u0576\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u057c\n\r\u0003\r",
    "\u0005\r\u057f\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0584",
    "\n\u000e\f\u000e\u000e\u000e\u0587\u000b\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0590\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0595",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u059a\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u05a2\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u05a8\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u05ac\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u05b1",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u05b8\n\u0010\f\u0010\u000e\u0010\u05bb\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u05c0\n\u0010\u0003\u0010",
    "\u0003\u0010\u0007\u0010\u05c4\n\u0010\f\u0010\u000e\u0010\u05c7\u000b",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u05cc\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u05d6\n\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u05dc\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u05e5\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u05f3\n\u0010\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u05f7\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u05fd\n\u0011\u0007\u0011\u05ff\n\u0011",
    "\f\u0011\u000e\u0011\u0602\u000b\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0607\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u060b\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0610",
    "\n\u0013\u0003\u0013\u0005\u0013\u0613\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0619\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u061f\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0625\n\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u0629\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u062e\n\u0013\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u0632\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0636\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u063e\n\u0013\u0005\u0013\u0640\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0647\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u064f\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0657\n\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u065b\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0672\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0682\n\u0013\u0003\u0013\u0005\u0013\u0685\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u068e\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0693\n\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u0699\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
    "\u069e\n\u0016\u0007\u0016\u06a0\n\u0016\f\u0016\u000e\u0016\u06a3\u000b",
    "\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u06a7\n\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u06ab\n\u0017\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u06af\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u06b3\n\u0018",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u06b7\n\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u06bb\n\u0019\u0005\u0019\u06bd\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u06c8\n\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u06cd\n\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u06d3\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u06db",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u06e4\n\u001e\u0003\u001e\u0007",
    "\u001e\u06e7\n\u001e\f\u001e\u000e\u001e\u06ea\u000b\u001e\u0005\u001e",
    "\u06ec\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u06f1",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u06f8\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0700\n\u001f\u0003 \u0003",
    " \u0005 \u0704\n \u0003 \u0007 \u0707\n \f \u000e \u070a\u000b \u0003",
    "!\u0003!\u0003\"\u0003\"\u0005\"\u0710\n\"\u0003\"\u0007\"\u0713\n\"",
    "\f\"\u000e\"\u0716\u000b\"\u0003#\u0003#\u0005#\u071a\n#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0005#\u0722\n#\u0003$\u0003$\u0005$\u0726",
    "\n$\u0003$\u0003$\u0003$\u0005$\u072b\n$\u0003%\u0005%\u072e\n%\u0003",
    "%\u0005%\u0731\n%\u0003%\u0005%\u0734\n%\u0003%\u0003%\u0003%\u0003",
    "%\u0003&\u0005&\u073b\n&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0005",
    "\'\u0742\n\'\u0003(\u0003(\u0005(\u0746\n(\u0003(\u0003(\u0003(\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u075e",
    "\n)\u0003*\u0003*\u0005*\u0762\n*\u0003*\u0003*\u0007*\u0766\n*\f*\u000e",
    "*\u0769\u000b*\u0003+\u0003+\u0003+\u0003+\u0005+\u076f\n+\u0003,\u0005",
    ",\u0772\n,\u0003,\u0003,\u0005,\u0776\n,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u077d\n,\u0003,\u0005,\u0780\n,\u0003,\u0005,\u0783",
    "\n,\u0003,\u0005,\u0786\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u078f\n,\u0003-\u0003-\u0003-\u0007-\u0794\n-\f-\u000e",
    "-\u0797\u000b-\u0003.\u0003.\u0005.\u079b\n.\u0003/\u0005/\u079e\n/",
    "\u0003/\u0005/\u07a1\n/\u0003/\u0003/\u00030\u00030\u00050\u07a7\n0",
    "\u00031\u00031\u00031\u00031\u00051\u07ad\n1\u00031\u00051\u07b0\n1",
    "\u00031\u00031\u00032\u00052\u07b5\n2\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00072\u07bd\n2\f2\u000e2\u07c0\u000b2\u00052\u07c2\n2\u0003",
    "2\u00032\u00072\u07c6\n2\f2\u000e2\u07c9\u000b2\u00032\u00032\u0003",
    "3\u00053\u07ce\n3\u00033\u00033\u00033\u00033\u00033\u00033\u00073\u07d6",
    "\n3\f3\u000e3\u07d9\u000b3\u00053\u07db\n3\u00033\u00033\u00033\u0003",
    "3\u00073\u07e1\n3\f3\u000e3\u07e4\u000b3\u00033\u00033\u00034\u0005",
    "4\u07e9\n4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00035\u0003",
    "5\u00055\u07f4\n5\u00035\u00055\u07f7\n5\u00036\u00066\u07fa\n6\r6\u000e",
    "6\u07fb\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u080f",
    "\n7\u00038\u00058\u0812\n8\u00038\u00058\u0815\n8\u00038\u00038\u0003",
    "8\u00038\u00058\u081b\n8\u00038\u00058\u081e\n8\u00058\u0820\n8\u0003",
    "8\u00038\u00078\u0824\n8\f8\u000e8\u0827\u000b8\u00038\u00038\u0003",
    "8\u00038\u00038\u00078\u082e\n8\f8\u000e8\u0831\u000b8\u00038\u0003",
    "8\u00038\u00038\u00038\u00078\u0838\n8\f8\u000e8\u083b\u000b8\u0005",
    "8\u083d\n8\u00038\u00058\u0840\n8\u00039\u00039\u00039\u00059\u0845",
    "\n9\u00039\u00039\u00039\u00039\u00059\u084b\n9\u0003:\u0003:\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u0858",
    "\n;\u0003<\u0003<\u0005<\u085c\n<\u0003<\u0007<\u085f\n<\f<\u000e<\u0862",
    "\u000b<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u086a\n=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0007?\u0879\n?\f?\u000e?\u087c\u000b?\u0003?\u0003",
    "?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u088e\n@\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0005A\u0897\nA\u0003A\u0005A\u089a\nA\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u08a2\nB\u0003C\u0003C\u0003",
    "C\u0005C\u08a7\nC\u0003C\u0003C\u0005C\u08ab\nC\u0003D\u0003D\u0003",
    "D\u0003E\u0003E\u0005E\u08b2\nE\u0003E\u0007E\u08b5\nE\fE\u000eE\u08b8",
    "\u000bE\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u08c6\nF\u0003G\u0003G\u0005G\u08ca\n",
    "G\u0003G\u0003G\u0003H\u0003H\u0005H\u08d0\nH\u0003H\u0003H\u0003I\u0003",
    "I\u0005I\u08d6\nI\u0003I\u0003I\u0003J\u0003J\u0005J\u08dc\nJ\u0003",
    "J\u0003J\u0003K\u0003K\u0005K\u08e2\nK\u0003K\u0003K\u0003L\u0003L\u0005",
    "L\u08e8\nL\u0003L\u0003L\u0003M\u0005M\u08ed\nM\u0003M\u0003M\u0005",
    "M\u08f1\nM\u0003M\u0003M\u0003N\u0003N\u0003O\u0003O\u0005O\u08f9\n",
    "O\u0003O\u0003O\u0003P\u0003P\u0005P\u08ff\nP\u0003P\u0003P\u0003Q\u0003",
    "Q\u0005Q\u0905\nQ\u0003Q\u0003Q\u0003R\u0005R\u090a\nR\u0003R\u0005",
    "R\u090d\nR\u0003R\u0005R\u0910\nR\u0003R\u0003R\u0003R\u0003R\u0003",
    "S\u0003S\u0003S\u0005S\u0919\nS\u0003S\u0005S\u091c\nS\u0003T\u0003",
    "T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003V\u0005V\u0927\nV\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005",
    "V\u0933\nV\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003X\u0005X\u093c",
    "\nX\u0003X\u0003X\u0005X\u0940\nX\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0005X\u0949\nX\u0003X\u0005X\u094c\nX\u0003X\u0003",
    "X\u0003X\u0003X\u0005X\u0952\nX\u0005X\u0954\nX\u0003X\u0003X\u0005",
    "X\u0958\nX\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0005Y\u095f\nY\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u096a",
    "\nZ\fZ\u000eZ\u096d\u000bZ\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0973",
    "\nZ\u0003Z\u0003Z\u0007Z\u0977\nZ\fZ\u000eZ\u097a\u000bZ\u0005Z\u097c",
    "\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u098d\n[\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u09a1",
    "\n\\\u0003]\u0003]\u0005]\u09a5\n]\u0003]\u0003]\u0003^\u0003^\u0005",
    "^\u09ab\n^\u0003^\u0003^\u0003_\u0003_\u0005_\u09b1\n_\u0003_\u0003",
    "_\u0003`\u0003`\u0005`\u09b7\n`\u0003`\u0003`\u0003a\u0005a\u09bc\n",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u09c3\na\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0005b\u09ca\nb\u0003b\u0007b\u09cd\nb\fb\u000eb\u09d0",
    "\u000bb\u0005b\u09d2\nb\u0003c\u0003c\u0005c\u09d6\nc\u0003d\u0003d",
    "\u0005d\u09da\nd\u0003d\u0003d\u0003e\u0005e\u09df\ne\u0003e\u0003e",
    "\u0005e\u09e3\ne\u0003e\u0003e\u0005e\u09e7\ne\u0003f\u0003f\u0003f",
    "\u0003f\u0005f\u09ed\nf\u0003f\u0007f\u09f0\nf\ff\u000ef\u09f3\u000b",
    "f\u0005f\u09f5\nf\u0003g\u0003g\u0005g\u09f9\ng\u0003g\u0003g\u0003",
    "h\u0003h\u0005h\u09ff\nh\u0003h\u0003h\u0005h\u0a03\nh\u0003i\u0003",
    "i\u0005i\u0a07\ni\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0005j\u0a0f",
    "\nj\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0005k\u0a17\nk\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0007l\u0a1e\nl\fl\u000el\u0a21\u000b",
    "l\u0003m\u0003m\u0003m\u0003m\u0003n\u0003n\u0005n\u0a29\nn\u0003n\u0003",
    "n\u0003o\u0003o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0005",
    "p\u0a36\np\u0003p\u0005p\u0a39\np\u0003q\u0003q\u0005q\u0a3d\nq\u0003",
    "q\u0003q\u0007q\u0a41\nq\fq\u000eq\u0a44\u000bq\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0005q\u0a4b\nq\u0003q\u0003q\u0003q\u0005q\u0a50\n",
    "q\u0003q\u0005q\u0a53\nq\u0003q\u0005q\u0a56\nq\u0003q\u0005q\u0a59",
    "\nq\u0003q\u0005q\u0a5c\nq\u0005q\u0a5e\nq\u0003q\u0003q\u0003q\u0003",
    "q\u0005q\u0a64\nq\u0005q\u0a66\nq\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u0a75",
    "\nt\u0003u\u0003u\u0003u\u0003u\u0005u\u0a7b\nu\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0005u\u0a82\nu\u0003u\u0005u\u0a85\nu\u0005u\u0a87",
    "\nu\u0005u\u0a89\nu\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0005v\u0a93\nv\u0005v\u0a95\nv\u0003w\u0003w\u0005w\u0a99",
    "\nw\u0003w\u0005w\u0a9c\nw\u0003w\u0005w\u0a9f\nw\u0003w\u0003w\u0005",
    "w\u0aa3\nw\u0003w\u0003w\u0003w\u0005w\u0aa8\nw\u0003w\u0003w\u0003",
    "w\u0003w\u0005w\u0aae\nw\u0003w\u0005w\u0ab1\nw\u0003w\u0005w\u0ab4",
    "\nw\u0003x\u0003x\u0003y\u0003y\u0005y\u0aba\ny\u0003y\u0005y\u0abd",
    "\ny\u0003y\u0003y\u0003z\u0003z\u0003z\u0007z\u0ac4\nz\fz\u000ez\u0ac7",
    "\u000bz\u0003{\u0003{\u0003{\u0003|\u0003|\u0003|\u0005|\u0acf\n|\u0003",
    "|\u0003|\u0005|\u0ad3\n|\u0003}\u0003}\u0005}\u0ad7\n}\u0003}\u0003",
    "}\u0003}\u0003}\u0005}\u0add\n}\u0003}\u0007}\u0ae0\n}\f}\u000e}\u0ae3",
    "\u000b}\u0003~\u0003~\u0005~\u0ae7\n~\u0003~\u0003~\u0003~\u0005~\u0aec",
    "\n~\u0007~\u0aee\n~\f~\u000e~\u0af1\u000b~\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0005\u007f\u0af6\n\u007f\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0005\u0081\u0b01\n\u0081\u0003\u0081\u0005\u0081\u0b04\n\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0b09\n\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0b0f\n\u0081\u0003",
    "\u0081\u0005\u0081\u0b12\n\u0081\u0003\u0081\u0005\u0081\u0b15\n\u0081",
    "\u0003\u0081\u0005\u0081\u0b18\n\u0081\u0003\u0081\u0005\u0081\u0b1b",
    "\n\u0081\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084",
    "\u0003\u0084\u0005\u0084\u0b29\n\u0084\u0003\u0084\u0005\u0084\u0b2c",
    "\n\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u0b30\n\u0084\u0003\u0085",
    "\u0003\u0085\u0005\u0085\u0b34\n\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0086\u0003\u0086\u0005\u0086\u0b3a\n\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0086\u0005\u0086\u0b3f\n\u0086\u0007\u0086\u0b41\n\u0086\f\u0086",
    "\u000e\u0086\u0b44\u000b\u0086\u0003\u0087\u0003\u0087\u0005\u0087\u0b48",
    "\n\u0087\u0003\u0087\u0005\u0087\u0b4b\n\u0087\u0003\u0087\u0003\u0087",
    "\u0005\u0087\u0b4f\n\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0005\u0087\u0b55\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0005\u0088\u0b5a\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0b63\n\u0089",
    "\u0003\u008a\u0003\u008a\u0005\u008a\u0b67\n\u008a\u0003\u008a\u0003",
    "\u008a\u0005\u008a\u0b6b\n\u008a\u0003\u008a\u0005\u008a\u0b6e\n\u008a",
    "\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u0b73\n\u008a\u0003",
    "\u008a\u0005\u008a\u0b76\n\u008a\u0005\u008a\u0b78\n\u008a\u0003\u008a",
    "\u0003\u008a\u0005\u008a\u0b7c\n\u008a\u0003\u008a\u0005\u008a\u0b7f",
    "\n\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a",
    "\u0b85\n\u008a\u0005\u008a\u0b87\n\u008a\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0b8e\n\u008b\u0003\u008b",
    "\u0003\u008b\u0005\u008b\u0b92\n\u008b\u0005\u008b\u0b94\n\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0b99\n\u008b\u0003\u008b",
    "\u0003\u008b\u0005\u008b\u0b9d\n\u008b\u0007\u008b\u0b9f\n\u008b\f\u008b",
    "\u000e\u008b\u0ba2\u000b\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0005",
    "\u008c\u0ba7\n\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d",
    "\u0007\u008d\u0bad\n\u008d\f\u008d\u000e\u008d\u0bb0\u000b\u008d\u0003",
    "\u008d\u0003\u008d\u0005\u008d\u0bb4\n\u008d\u0003\u008d\u0005\u008d",
    "\u0bb7\n\u008d\u0003\u008d\u0005\u008d\u0bba\n\u008d\u0003\u008d\u0005",
    "\u008d\u0bbd\n\u008d\u0003\u008d\u0005\u008d\u0bc0\n\u008d\u0003\u008d",
    "\u0003\u008d\u0005\u008d\u0bc4\n\u008d\u0003\u008e\u0003\u008e\u0003",
    "\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u0bd3",
    "\n\u0092\u0003\u0093\u0003\u0093\u0005\u0093\u0bd7\n\u0093\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0bdd\n\u0094\u0003",
    "\u0094\u0005\u0094\u0be0\n\u0094\u0003\u0094\u0005\u0094\u0be3\n\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0be9\n",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0bee\n\u0094",
    "\u0007\u0094\u0bf0\n\u0094\f\u0094\u000e\u0094\u0bf3\u000b\u0094\u0005",
    "\u0094\u0bf5\n\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0005\u0095\u0bfd\n\u0095\u0005\u0095\u0bff",
    "\n\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0007\u0097\u0c0a\n",
    "\u0097\f\u0097\u000e\u0097\u0c0d\u000b\u0097\u0003\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u009a\u0005\u009a\u0c18\n\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u0c1d\n\u009a\u0003\u009a\u0005\u009a\u0c20\n\u009a",
    "\u0003\u009a\u0005\u009a\u0c23\n\u009a\u0003\u009b\u0003\u009b\u0003",
    "\u009b\u0005\u009b\u0c28\n\u009b\u0003\u009c\u0003\u009c\u0003\u009d",
    "\u0003\u009d\u0005\u009d\u0c2e\n\u009d\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005",
    "\u009e\u0c3e\n\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0c52\n\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005",
    "\u00a1\u0c5b\n\u00a1\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0c5f\n\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0c64\n\u00a2\f\u00a2",
    "\u000e\u00a2\u0c67\u000b\u00a2\u0003\u00a3\u0003\u00a3\u0005\u00a3\u0c6b",
    "\n\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0005\u00a4\u0c74\n\u00a4\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5\u0c7b\n\u00a5",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0c86\n\u00a8\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0007\u00a9\u0c8b\n\u00a9\f\u00a9\u000e",
    "\u00a9\u0c8e\u000b\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0c98\n",
    "\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005",
    "\u00ab\u0c9f\n\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0ca3\n\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0ca9\n",
    "\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0cae\n\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0cb3\n\u00ad\u0003",
    "\u00ae\u0003\u00ae\u0005\u00ae\u0cb7\n\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0007\u00ae\u0cbb\n\u00ae\f\u00ae\u000e\u00ae\u0cbe\u000b\u00ae\u0003",
    "\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u0cc3\n\u00af\u0005\u00af",
    "\u0cc5\n\u00af\u0003\u00b0\u0005\u00b0\u0cc8\n\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0005\u00b0\u0ccc\n\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2",
    "\u0cd6\n\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0cdb",
    "\n\u00b2\u0003\u00b2\u0007\u00b2\u0cde\n\u00b2\f\u00b2\u000e\u00b2\u0ce1",
    "\u000b\u00b2\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0ce5\n\u00b3\f\u00b3",
    "\u000e\u00b3\u0ce8\u000b\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u0cf0\n\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4",
    "\u0cf8\n\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u0cfd",
    "\n\u00b4\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0d01\n\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0d07\n\u00b5\u0003",
    "\u00b5\u0005\u00b5\u0d0a\n\u00b5\u0003\u00b6\u0005\u00b6\u0d0d\n\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0d11\n\u00b6\u0003\u00b7\u0003",
    "\u00b7\u0005\u00b7\u0d15\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8",
    "\u0d1f\n\u00b8\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0d23\n\u00b9\u0003",
    "\u00b9\u0005\u00b9\u0d26\n\u00b9\u0003\u00b9\u0005\u00b9\u0d29\n\u00b9",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0d2e\n\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0d34\n\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0d38\n\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0d3e\n\u00bb\u0003\u00bb",
    "\u0005\u00bb\u0d41\n\u00bb\u0005\u00bb\u0d43\n\u00bb\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0005\u00bc\u0d48\n\u00bc\u0003\u00bc\u0003\u00bc",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0d54\n\u00bd\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0007\u00be\u0d5b\n\u00be",
    "\f\u00be\u000e\u00be\u0d5e\u000b\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0005\u00bf\u0d6a\n\u00bf\u0003\u00bf\u0005\u00bf",
    "\u0d6d\n\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0d72",
    "\n\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0005\u00bf\u0d79\n\u00bf\u0003\u00c0\u0003\u00c0\u0005\u00c0\u0d7d",
    "\n\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0\u0d81\n\u00c0\u0005\u00c0",
    "\u0d83\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0005\u00c3\u0d91\n\u00c3\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0d98\n\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u0d9f",
    "\n\u00c6\f\u00c6\u000e\u00c6\u0da2\u000b\u00c6\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u0da7\n\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0db0",
    "\n\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0db4\n\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u0db8\n\u00c7\u0003\u00c8\u0003\u00c8\u0003",
    "\u00c9\u0003\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005",
    "\u00ca\u0dc2\n\u00ca\u0005\u00ca\u0dc4\n\u00ca\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u0dcc\n",
    "\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0007\u00cc\u0dd1\n\u00cc",
    "\f\u00cc\u000e\u00cc\u0dd4\u000b\u00cc\u0003\u00cd\u0003\u00cd\u0005",
    "\u00cd\u0dd8\n\u00cd\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0ddc\n\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0de0\n\u00ce\u0003\u00ce\u0005",
    "\u00ce\u0de3\n\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0005\u00ce\u0de9\n\u00ce\u0003\u00ce\u0005\u00ce\u0dec\n\u00ce\u0003",
    "\u00ce\u0005\u00ce\u0def\n\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0005\u00cf\u0df5\n\u00cf\u0003\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0007\u00d0\u0dfa\n\u00d0\f\u00d0\u000e\u00d0\u0dfd\u000b\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0e01\n\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0005\u00d0\u0e05\n\u00d0\u0003\u00d0\u0005\u00d0\u0e08\n\u00d0",
    "\u0003\u00d0\u0005\u00d0\u0e0b\n\u00d0\u0003\u00d0\u0005\u00d0\u0e0e",
    "\n\u00d0\u0005\u00d0\u0e10\n\u00d0\u0003\u00d1\u0003\u00d1\u0005\u00d1",
    "\u0e14\n\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0005\u00d2\u0e1c\n\u00d2\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0005\u00d3\u0e22\n\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0005\u00d3\u0e26\n\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0005\u00d3\u0e2b\n\u00d3\u0003\u00d3\u0005\u00d3\u0e2e\n\u00d3\u0003",
    "\u00d3\u0005\u00d3\u0e31\n\u00d3\u0003\u00d3\u0005\u00d3\u0e34\n\u00d3",
    "\u0005\u00d3\u0e36\n\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005",
    "\u00d3\u0e3b\n\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0007\u00d4\u0e42\n\u00d4\f\u00d4\u000e\u00d4\u0e45\u000b",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0e51",
    "\n\u00d4\u0005\u00d4\u0e53\n\u00d4\u0003\u00d5\u0003\u00d5\u0005\u00d5",
    "\u0e57\n\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0005",
    "\u00d6\u0e5d\n\u00d6\u0003\u00d6\u0005\u00d6\u0e60\n\u00d6\u0003\u00d6",
    "\u0005\u00d6\u0e63\n\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0005\u00d7\u0e69\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0e70\n\u00d7\u0005\u00d7\u0e72",
    "\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0005\u00d7\u0e7a\n\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0005\u00d7\u0e80\n\u00d7\u0003\u00d8\u0003\u00d8",
    "\u0003\u00d8\u0005\u00d8\u0e85\n\u00d8\u0003\u00d8\u0005\u00d8\u0e88",
    "\n\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0005\u00d9\u0e8f\n\u00d9\u0005\u00d9\u0e91\n\u00d9\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0005",
    "\u00da\u0e9a\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0003\u00da\u0007\u00da\u0ea1\n\u00da\f\u00da\u000e\u00da\u0ea4\u000b",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0005\u00da\u0eac\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u0eb4\n\u00da\u0003",
    "\u00db\u0003\u00db\u0005\u00db\u0eb8\n\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0005\u00db\u0ebf\n\u00db\u0003",
    "\u00db\u0005\u00db\u0ec2\n\u00db\u0005\u00db\u0ec4\n\u00db\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc",
    "\u0ecc\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0005",
    "\u00dd\u0ed2\n\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u0edc\n",
    "\u00de\u0003\u00df\u0003\u00df\u0003\u00df\u0007\u00df\u0ee1\n\u00df",
    "\f\u00df\u000e\u00df\u0ee4\u000b\u00df\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0f3b",
    "\n\u00e0\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0f3f\n\u00e1\u0003\u00e2",
    "\u0003\u00e2\u0005\u00e2\u0f43\n\u00e2\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u0f51\n\u00e3",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0007\u00e4\u0f57\n",
    "\u00e4\f\u00e4\u000e\u00e4\u0f5a\u000b\u00e4\u0005\u00e4\u0f5c\n\u00e4",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e5\u0007\u00e5\u0f66\n\u00e5\f\u00e5\u000e\u00e5",
    "\u0f69\u000b\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0f6d\n\u00e5",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0f73\n",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005",
    "\u00e6\u0f7a\n\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0005\u00e6\u0f81\n\u00e6\u0003\u00e6\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0f88\n\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0f8f\n",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005",
    "\u00e6\u0f96\n\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0005\u00e6\u0f9d\n\u00e6\u0003\u00e6\u0005\u00e6\u0fa0",
    "\n\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0007\u00e7\u0fa5\n\u00e7",
    "\f\u00e7\u000e\u00e7\u0fa8\u000b\u00e7\u0003\u00e8\u0003\u00e8\u0003",
    "\u00e8\u0007\u00e8\u0fad\n\u00e8\f\u00e8\u000e\u00e8\u0fb0\u000b\u00e8",
    "\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0007\u00e9\u0fb5\n\u00e9\f\u00e9",
    "\u000e\u00e9\u0fb8\u000b\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0007\u00eb\u0fbf\n\u00eb\f\u00eb\u000e\u00eb\u0fc2",
    "\u000b\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0fc7\n",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0fcb\n\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0005\u00ec\u0fcf\n\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0005\u00ec\u0fd4\n\u00ec\u0003\u00ec\u0005\u00ec\u0fd7\n\u00ec",
    "\u0005\u00ec\u0fd9\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0fe2\n\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0007\u00ed\u0fe6\n\u00ed\f\u00ed\u000e\u00ed",
    "\u0fe9\u000b\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005",
    "\u00ee\u0fef\n\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee",
    "\u0ff4\n\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0ff9",
    "\n\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0ffe\n\u00ee",
    "\u0003\u00ee\u0005\u00ee\u1001\n\u00ee\u0003\u00ef\u0003\u00ef\u0003",
    "\u00ef\u0007\u00ef\u1006\n\u00ef\f\u00ef\u000e\u00ef\u1009\u000b\u00ef",
    "\u0003\u00f0\u0003\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f2",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u1015\n",
    "\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u101b",
    "\n\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3",
    "\u1021\n\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0007\u00f4\u1026",
    "\n\u00f4\f\u00f4\u000e\u00f4\u1029\u000b\u00f4\u0003\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u1030\n\u00f5\u0003",
    "\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u1036\n\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u1042\n",
    "\u00f5\u0005\u00f5\u1044\n\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0005\u00f6\u104a\n\u00f6\u0003\u00f6\u0003\u00f6\u0005",
    "\u00f6\u104e\n\u00f6\u0005\u00f6\u1050\n\u00f6\u0003\u00f7\u0003\u00f7",
    "\u0005\u00f7\u1054\n\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0005\u00f8\u1061\n\u00f8\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0005\u00f9\u1067\n\u00f9\u0003\u00f9\u0003",
    "\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005\u00fa\u106f",
    "\n\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005\u00fa\u107a\n",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0005\u00fa\u107e\n\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005\u00fa\u108b\n",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005",
    "\u00fa\u1092\n\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0005\u00fa\u1098\n\u00fa\u0005\u00fa\u109a\n\u00fa\u0003\u00fb\u0003",
    "\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0005\u00fc\u10a4\n\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fc\u0003\u00fd\u0003\u00fd\u0005\u00fd\u10ac\n\u00fd\u0003",
    "\u00fd\u0005\u00fd\u10af\n\u00fd\u0003\u00fd\u0007\u00fd\u10b2\n\u00fd",
    "\f\u00fd\u000e\u00fd\u10b5\u000b\u00fd\u0003\u00fd\u0005\u00fd\u10b8",
    "\n\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0005\u00fe",
    "\u10be\n\u00fe\u0003\u00fe\u0005\u00fe\u10c1\n\u00fe\u0003\u00ff\u0003",
    "\u00ff\u0003\u00ff\u0005\u00ff\u10c6\n\u00ff\u0003\u0100\u0003\u0100",
    "\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100",
    "\u0003\u0100\u0006\u0100\u10d1\n\u0100\r\u0100\u000e\u0100\u10d2\u0003",
    "\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003",
    "\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0005\u0101\u10df\n\u0101",
    "\u0003\u0101\u0003\u0101\u0003\u0101\u0005\u0101\u10e4\n\u0101\u0003",
    "\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0005",
    "\u0101\u10ec\n\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101",
    "\u0005\u0101\u10f2\n\u0101\u0005\u0101\u10f4\n\u0101\u0005\u0101\u10f6",
    "\n\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102",
    "\u10fc\n\u0102\u0003\u0102\u0003\u0102\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0005",
    "\u0103\u1108\n\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0005\u0103",
    "\u110d\n\u0103\u0005\u0103\u110f\n\u0103\u0003\u0103\u0003\u0103\u0005",
    "\u0103\u1113\n\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103",
    "\u0005\u0103\u1119\n\u0103\u0003\u0103\u0005\u0103\u111c\n\u0103\u0003",
    "\u0103\u0005\u0103\u111f\n\u0103\u0003\u0103\u0003\u0103\u0003\u0103",
    "\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0005\u0103",
    "\u1129\n\u0103\u0005\u0103\u112b\n\u0103\u0003\u0104\u0003\u0104\u0003",
    "\u0104\u0003\u0104\u0005\u0104\u1131\n\u0104\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0006\u0105\u1136\n\u0105\r\u0105\u000e\u0105\u1137\u0003",
    "\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u113e\n\u0105",
    "\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0005\u0107\u1148\n\u0107\u0003\u0107\u0003",
    "\u0107\u0005\u0107\u114c\n\u0107\u0003\u0108\u0003\u0108\u0003\u0108",
    "\u0005\u0108\u1151\n\u0108\u0003\u0109\u0003\u0109\u0003\u0109\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0007\u010a\u1160\n\u010a",
    "\f\u010a\u000e\u010a\u1163\u000b\u010a\u0003\u010b\u0003\u010b\u0003",
    "\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003",
    "\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0005\u010b\u1172",
    "\n\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0005\u010b\u1177\n\u010b",
    "\u0003\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003\u010b",
    "\u0005\u010b\u117f\n\u010b\u0003\u010b\u0003\u010b\u0003\u010b\u0003",
    "\u010b\u0003\u010b\u0003\u010b\u0005\u010b\u1187\n\u010b\u0003\u010c",
    "\u0003\u010c\u0003\u010c\u0005\u010c\u118c\n\u010c\u0003\u010c\u0003",
    "\u010c\u0003\u010c\u0003\u010c\u0005\u010c\u1192\n\u010c\u0003\u010c",
    "\u0005\u010c\u1195\n\u010c\u0005\u010c\u1197\n\u010c\u0003\u010d\u0003",
    "\u010d\u0003\u010e\u0003\u010e\u0003\u010e\u0007\u010e\u119e\n\u010e",
    "\f\u010e\u000e\u010e\u11a1\u000b\u010e\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0005\u010f\u11a6\n\u010f\u0003\u010f\u0003\u010f\u0003\u010f",
    "\u0003\u010f\u0005\u010f\u11ac\n\u010f\u0005\u010f\u11ae\n\u010f\u0003",
    "\u010f\u0003\u010f\u0005\u010f\u11b2\n\u010f\u0003\u010f\u0003\u010f",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f",
    "\u0003\u010f\u0005\u010f\u11bd\n\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0005",
    "\u010f\u11c7\n\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0005\u010f",
    "\u11cc\n\u010f\u0003\u0110\u0003\u0110\u0003\u0110\u0005\u0110\u11d1",
    "\n\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0005\u0110\u11d6\n\u0110",
    "\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110",
    "\u0005\u0110\u11de\n\u0110\u0003\u0111\u0003\u0111\u0005\u0111\u11e2",
    "\n\u0111\u0003\u0111\u0007\u0111\u11e5\n\u0111\f\u0111\u000e\u0111\u11e8",
    "\u000b\u0111\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0112",
    "\u0003\u0112\u0005\u0112\u11f0\n\u0112\u0003\u0113\u0003\u0113\u0003",
    "\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003",
    "\u0113\u0003\u0113\u0005\u0113\u11fc\n\u0113\u0003\u0114\u0003\u0114",
    "\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114",
    "\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0005\u0114\u120a\n",
    "\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003",
    "\u0114\u0003\u0114\u0005\u0114\u1213\n\u0114\u0005\u0114\u1215\n\u0114",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0007\u0115\u121a\n\u0115\f\u0115",
    "\u000e\u0115\u121d\u000b\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0003",
    "\u0116\u0005\u0116\u1223\n\u0116\u0003\u0117\u0003\u0117\u0005\u0117",
    "\u1227\n\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0005",
    "\u0117\u122d\n\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117",
    "\u0007\u0117\u1233\n\u0117\f\u0117\u000e\u0117\u1236\u000b\u0117\u0003",
    "\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0005\u0117\u123c\n\u0117",
    "\u0003\u0117\u0003\u0117\u0005\u0117\u1240\n\u0117\u0003\u0117\u0003",
    "\u0117\u0003\u0117\u0003\u0117\u0005\u0117\u1246\n\u0117\u0003\u0117",
    "\u0003\u0117\u0003\u0117\u0007\u0117\u124b\n\u0117\f\u0117\u000e\u0117",
    "\u124e\u000b\u0117\u0005\u0117\u1250\n\u0117\u0003\u0118\u0003\u0118",
    "\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0005\u0118",
    "\u1259\n\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0005",
    "\u0118\u125f\n\u0118\u0003\u0119\u0003\u0119\u0003\u0119\u0005\u0119",
    "\u1264\n\u0119\u0003\u011a\u0003\u011a\u0003\u011b\u0003\u011b\u0003",
    "\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003",
    "\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003",
    "\u011b\u0003\u011b\u0003\u011b\u0007\u011b\u1279\n\u011b\f\u011b\u000e",
    "\u011b\u127c\u000b\u011b\u0005\u011b\u127e\n\u011b\u0003\u011c\u0003",
    "\u011c\u0003\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0005\u011d\u128e\n\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0005\u011d\u1293\n\u011d\u0003\u011d\u0005\u011d\u1296\n\u011d\u0003",
    "\u011d\u0003\u011d\u0005\u011d\u129a\n\u011d\u0003\u011d\u0005\u011d",
    "\u129d\n\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0003\u011d\u0005\u011d\u12ab\n\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0005\u011d\u12b1\n\u011d\u0003\u011d\u0003",
    "\u011d\u0003\u011d\u0005\u011d\u12b6\n\u011d\u0003\u011d\u0005\u011d",
    "\u12b9\n\u011d\u0005\u011d\u12bb\n\u011d\u0003\u011e\u0003\u011e\u0005",
    "\u011e\u12bf\n\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0005\u011e",
    "\u12c4\n\u011e\u0005\u011e\u12c6\n\u011e\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u12d2\n\u0120\u0003\u0121\u0003\u0121",
    "\u0007\u0121\u12d6\n\u0121\f\u0121\u000e\u0121\u12d9\u000b\u0121\u0003",
    "\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003",
    "\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003",
    "\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003",
    "\u0122\u0005\u0122\u12ee\n\u0122\u0003\u0122\u0003\u0122\u0005\u0122",
    "\u12f2\n\u0122\u0005\u0122\u12f4\n\u0122\u0003\u0123\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0005\u0123\u12fc\n\u0123",
    "\u0003\u0124\u0003\u0124\u0005\u0124\u1300\n\u0124\u0003\u0124\u0003",
    "\u0124\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005",
    "\u0125\u1309\n\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126",
    "\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0005\u0127\u1313\n",
    "\u0127\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005",
    "\u0128\u131a\n\u0128\u0003\u0128\u0005\u0128\u131d\n\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u1321\n\u0128\u0003\u0128\u0005\u0128\u1324",
    "\n\u0128\u0003\u0128\u0005\u0128\u1327\n\u0128\u0003\u0128\u0003\u0128",
    "\u0005\u0128\u132b\n\u0128\u0003\u0128\u0005\u0128\u132e\n\u0128\u0003",
    "\u0128\u0003\u0128\u0005\u0128\u1332\n\u0128\u0003\u0128\u0005\u0128",
    "\u1335\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u133a",
    "\n\u0128\u0003\u0128\u0005\u0128\u133d\n\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u1342\n\u0128\u0003\u0128\u0005\u0128\u1345",
    "\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128",
    "\u134b\n\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u134f\n\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1355\n\u0128",
    "\u0003\u0128\u0005\u0128\u1358\n\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1361",
    "\n\u0128\u0005\u0128\u1363\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u1369\n\u0128\u0003\u0128\u0003\u0128\u0005",
    "\u0128\u136d\n\u0128\u0003\u0128\u0005\u0128\u1370\n\u0128\u0003\u0128",
    "\u0005\u0128\u1373\n\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1377",
    "\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128",
    "\u137d\n\u0128\u0003\u0128\u0005\u0128\u1380\n\u0128\u0003\u0128\u0005",
    "\u0128\u1383\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u138d\n",
    "\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1391\n\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0007\u0128\u1398\n",
    "\u0128\f\u0128\u000e\u0128\u139b\u000b\u0128\u0005\u0128\u139d\n\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u13a2\n\u0128\u0003",
    "\u0128\u0005\u0128\u13a5\n\u0128\u0003\u0128\u0005\u0128\u13a8\n\u0128",
    "\u0003\u0128\u0003\u0128\u0005\u0128\u13ac\n\u0128\u0003\u0128\u0005",
    "\u0128\u13af\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128",
    "\u13b4\n\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u13b8\n\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005",
    "\u0128\u13c0\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u13cd\n\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0005\u0128\u13df\n\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u13e4\n\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0005\u0128\u13e9\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u13f1\n\u0128\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u13f7\n\u0129",
    "\u0005\u0129\u13f9\n\u0129\u0003\u012a\u0003\u012a\u0005\u012a\u13fd",
    "\n\u012a\u0003\u012a\u0005\u012a\u1400\n\u012a\u0003\u012b\u0003\u012b",
    "\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012d\u0003\u012d\u0003\u012d",
    "\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0005\u012d\u140e\n",
    "\u012d\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0003\u012e\u0005\u012e\u1418\n\u012e\u0003\u012e",
    "\u0003\u012e\u0005\u012e\u141c\n\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0007\u012e\u1422\n\u012e\f\u012e\u000e\u012e\u1425",
    "\u000b\u012e\u0005\u012e\u1427\n\u012e\u0003\u012e\u0003\u012e\u0005",
    "\u012e\u142b\n\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e",
    "\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0005\u012e\u1435\n",
    "\u012e\u0003\u012f\u0003\u012f\u0005\u012f\u1439\n\u012f\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0007\u0130\u143e\n\u0130\f\u0130\u000e\u0130",
    "\u1441\u000b\u0130\u0003\u0131\u0003\u0131\u0005\u0131\u1445\n\u0131",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u144d\n\u0132\u0003\u0133\u0003\u0133\u0003\u0133\u0005",
    "\u0133\u1452\n\u0133\u0003\u0133\u0003\u0133\u0003\u0134\u0003\u0134",
    "\u0005\u0134\u1458\n\u0134\u0003\u0135\u0003\u0135\u0003\u0135\u0007",
    "\u0135\u145d\n\u0135\f\u0135\u000e\u0135\u1460\u000b\u0135\u0003\u0136",
    "\u0003\u0136\u0005\u0136\u1464\n\u0136\u0003\u0136\u0003\u0136\u0003",
    "\u0136\u0003\u0136\u0005\u0136\u146a\n\u0136\u0003\u0136\u0003\u0136",
    "\u0003\u0136\u0003\u0136\u0003\u0136\u0005\u0136\u1471\n\u0136\u0003",
    "\u0137\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003",
    "\u0138\u0003\u0138\u0005\u0138\u147b\n\u0138\u0005\u0138\u147d\n\u0138",
    "\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139",
    "\u0005\u0139\u1485\n\u0139\u0003\u013a\u0003\u013a\u0003\u013a\u0005",
    "\u013a\u148a\n\u013a\u0003\u013a\u0003\u013a\u0005\u013a\u148e\n\u013a",
    "\u0003\u013a\u0005\u013a\u1491\n\u013a\u0003\u013b\u0003\u013b\u0003",
    "\u013b\u0007\u013b\u1496\n\u013b\f\u013b\u000e\u013b\u1499\u000b\u013b",
    "\u0003\u013c\u0003\u013c\u0005\u013c\u149d\n\u013c\u0003\u013c\u0003",
    "\u013c\u0005\u013c\u14a1\n\u013c\u0003\u013d\u0003\u013d\u0003\u013d",
    "\u0003\u013d\u0003\u013d\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e",
    "\u0005\u013e\u14ac\n\u013e\u0003\u013f\u0003\u013f\u0003\u013f\u0003",
    "\u013f\u0003\u013f\u0003\u013f\u0005\u013f\u14b4\n\u013f\u0003\u013f",
    "\u0003\u013f\u0005\u013f\u14b8\n\u013f\u0003\u013f\u0005\u013f\u14bb",
    "\n\u013f\u0003\u013f\u0005\u013f\u14be\n\u013f\u0003\u0140\u0003\u0140",
    "\u0005\u0140\u14c2\n\u0140\u0003\u0140\u0003\u0140\u0005\u0140\u14c6",
    "\n\u0140\u0003\u0140\u0007\u0140\u14c9\n\u0140\f\u0140\u000e\u0140\u14cc",
    "\u000b\u0140\u0003\u0141\u0003\u0141\u0003\u0141\u0005\u0141\u14d1\n",
    "\u0141\u0003\u0142\u0003\u0142\u0005\u0142\u14d5\n\u0142\u0003\u0142",
    "\u0003\u0142\u0003\u0143\u0003\u0143\u0003\u0144\u0003\u0144\u0003\u0144",
    "\u0003\u0144\u0003\u0144\u0005\u0144\u14e0\n\u0144\u0003\u0144\u0005",
    "\u0144\u14e3\n\u0144\u0003\u0144\u0005\u0144\u14e6\n\u0144\u0003\u0144",
    "\u0005\u0144\u14e9\n\u0144\u0003\u0145\u0003\u0145\u0003\u0145\u0003",
    "\u0145\u0003\u0145\u0003\u0145\u0005\u0145\u14f1\n\u0145\u0003\u0146",
    "\u0003\u0146\u0005\u0146\u14f5\n\u0146\u0003\u0146\u0007\u0146\u14f8",
    "\n\u0146\f\u0146\u000e\u0146\u14fb\u000b\u0146\u0003\u0147\u0003\u0147",
    "\u0003\u0147\u0003\u0147\u0003\u0147\u0005\u0147\u1502\n\u0147\u0003",
    "\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0005",
    "\u0148\u150a\n\u0148\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149",
    "\u0005\u0149\u1510\n\u0149\u0003\u014a\u0003\u014a\u0003\u014a\u0003",
    "\u014a\u0003\u014a\u0003\u014a\u0003\u014a\u0003\u014a\u0003\u014a\u0003",
    "\u014a\u0003\u014a\u0005\u014a\u151d\n\u014a\u0003\u014a\u0003\u014a",
    "\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b",
    "\u0005\u014b\u1527\n\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003",
    "\u014b\u0005\u014b\u152d\n\u014b\u0003\u014c\u0003\u014c\u0003\u014c",
    "\u0003\u014d\u0003\u014d\u0003\u014d\u0003\u014e\u0003\u014e\u0003\u014f",
    "\u0003\u014f\u0003\u014f\u0003\u014f\u0005\u014f\u153b\n\u014f\u0003",
    "\u014f\u0005\u014f\u153e\n\u014f\u0003\u014f\u0003\u014f\u0005\u014f",
    "\u1542\n\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003",
    "\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0007\u014f\u154d",
    "\n\u014f\f\u014f\u000e\u014f\u1550\u000b\u014f\u0003\u0150\u0003\u0150",
    "\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0005\u0150\u1558\n",
    "\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003",
    "\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0007\u0150\u1564",
    "\n\u0150\f\u0150\u000e\u0150\u1567\u000b\u0150\u0003\u0151\u0003\u0151",
    "\u0003\u0152\u0003\u0152\u0005\u0152\u156d\n\u0152\u0003\u0152\u0003",
    "\u0152\u0003\u0152\u0003\u0152\u0005\u0152\u1573\n\u0152\u0003\u0152",
    "\u0003\u0152\u0003\u0152\u0003\u0152\u0005\u0152\u1579\n\u0152\u0003",
    "\u0153\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0153\u0005",
    "\u0153\u1581\n\u0153\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0153",
    "\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0153\u0005\u0153",
    "\u158c\n\u0153\u0003\u0153\u0003\u0153\u0005\u0153\u1590\n\u0153\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003",
    "\u0154\u0003\u0154\u0003\u0154\u0007\u0154\u15ad\n\u0154\f\u0154\u000e",
    "\u0154\u15b0\u000b\u0154\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155",
    "\u0005\u0155\u15b6\n\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005",
    "\u0155\u15c7\n\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155",
    "\u0003\u0155\u0005\u0155\u15ce\n\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u15dc\n\u0155",
    "\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155",
    "\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u15e8\n",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u15ee",
    "\n\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0006\u0155\u15f3\n\u0155",
    "\r\u0155\u000e\u0155\u15f4\u0003\u0155\u0005\u0155\u15f8\n\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0005\u0155\u161a\n\u0155\u0003\u0155\u0003\u0155",
    "\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0007\u0155\u1622\n",
    "\u0155\f\u0155\u000e\u0155\u1625\u000b\u0155\u0003\u0156\u0003\u0156",
    "\u0003\u0156\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157",
    "\u0003\u0157\u0005\u0157\u1630\n\u0157\u0003\u0158\u0003\u0158\u0003",
    "\u0158\u0005\u0158\u1635\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158",
    "\u0003\u0158\u0005\u0158\u163b\n\u0158\u0003\u0158\u0003\u0158\u0003",
    "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u1643\n\u0158",
    "\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u164a\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005",
    "\u0158\u1650\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u1655\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005",
    "\u0158\u165b\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u1660\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u1665",
    "\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u166b\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u1670",
    "\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u1676\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
    "\u0158\u0003\u0158\u0005\u0158\u167e\n\u0158\u0003\u0158\u0003\u0158",
    "\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u1686\n",
    "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
    "\u0158\u0005\u0158\u168e\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158",
    "\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u1696\n\u0158\u0003",
    "\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u169b\n\u0158\u0003\u0158",
    "\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u16a1\n\u0158\u0003",
    "\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u16a6\n\u0158\u0003\u0158",
    "\u0003\u0158\u0005\u0158\u16aa\n\u0158\u0003\u0158\u0003\u0158\u0005",
    "\u0158\u16ae\n\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158",
    "\u16b3\n\u0158\u0005\u0158\u16b5\n\u0158\u0003\u0159\u0003\u0159\u0003",
    "\u0159\u0003\u0159\u0003\u0159\u0003\u015a\u0003\u015a\u0003\u015a\u0003",
    "\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003",
    "\u015a\u0003\u015a\u0003\u015a\u0005\u015a\u16c8\n\u015a\u0003\u015a",
    "\u0003\u015a\u0005\u015a\u16cc\n\u015a\u0003\u015a\u0003\u015a\u0003",
    "\u015a\u0003\u015a\u0003\u015a\u0005\u015a\u16d3\n\u015a\u0003\u015a",
    "\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a",
    "\u0003\u015a\u0003\u015a\u0003\u015a\u0005\u015a\u16df\n\u015a\u0003",
    "\u015a\u0005\u015a\u16e2\n\u015a\u0003\u015a\u0003\u015a\u0005\u015a",
    "\u16e6\n\u015a\u0003\u015b\u0003\u015b\u0003\u015b\u0005\u015b\u16eb",
    "\n\u015b\u0003\u015c\u0003\u015c\u0003\u015c\u0005\u015c\u16f0\n\u015c",
    "\u0003\u015c\u0003\u015c\u0005\u015c\u16f4\n\u015c\u0003\u015d\u0003",
    "\u015d\u0003\u015d\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0003",
    "\u015e\u0005\u015e\u16fe\n\u015e\u0003\u015e\u0003\u015e\u0003\u015e",
    "\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e\u1707\n",
    "\u015e\u0005\u015e\u1709\n\u015e\u0003\u015f\u0005\u015f\u170c\n\u015f",
    "\u0003\u015f\u0003\u015f\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160",
    "\u0003\u0160\u0005\u0160\u1715\n\u0160\u0003\u0161\u0003\u0161\u0003",
    "\u0161\u0007\u0161\u171a\n\u0161\f\u0161\u000e\u0161\u171d\u000b\u0161",
    "\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162",
    "\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0005\u0162\u1729\n",
    "\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0005\u0162\u172e\n\u0162",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163",
    "\u1735\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005",
    "\u0163\u173b\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0006\u0163\u1753\n\u0163\r\u0163\u000e\u0163\u1754\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u1774\n\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0005\u0163\u1788\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0005\u0163\u178e\n\u0163\u0003\u0163\u0003\u0163\u0005\u0163",
    "\u1792\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u17ad\n\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u17b9\n\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u17c6",
    "\n\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u17ca\n\u0163\u0003\u0163",
    "\u0003\u0163\u0005\u0163\u17ce\n\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005",
    "\u0163\u17ea\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0005\u0163\u1822\n\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0005\u0163\u182c\n\u0163\u0003\u0163\u0003\u0163\u0005\u0163",
    "\u1830\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005",
    "\u0163\u183c\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163",
    "\u1841\n\u0163\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0005\u0164\u184e\n\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0005\u0164\u1862\n\u0164\u0003",
    "\u0165\u0003\u0165\u0005\u0165\u1866\n\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0167\u0003\u0167\u0003\u0167",
    "\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0007\u0167",
    "\u1875\n\u0167\f\u0167\u000e\u0167\u1878\u000b\u0167\u0005\u0167\u187a",
    "\n\u0167\u0003\u0168\u0003\u0168\u0003\u0168\u0005\u0168\u187f\n\u0168",
    "\u0003\u0168\u0005\u0168\u1882\n\u0168\u0003\u0169\u0003\u0169\u0003",
    "\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u188b",
    "\n\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u188f\n\u016a\u0003\u016a",
    "\u0003\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u1895\n\u016a\u0003",
    "\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u189b\n\u016a",
    "\u0003\u016a\u0003\u016a\u0005\u016a\u189f\n\u016a\u0003\u016a\u0003",
    "\u016a\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003",
    "\u016b\u0003\u016b\u0005\u016b\u18aa\n\u016b\u0003\u016b\u0003\u016b",
    "\u0003\u016b\u0003\u016b\u0005\u016b\u18b0\n\u016b\u0005\u016b\u18b2",
    "\n\u016b\u0003\u016b\u0003\u016b\u0003\u016c\u0003\u016c\u0003\u016c",
    "\u0005\u016c\u18b9\n\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0003",
    "\u016c\u0003\u016c\u0005\u016c\u18c0\n\u016c\u0003\u016c\u0003\u016c",
    "\u0005\u016c\u18c4\n\u016c\u0003\u016d\u0003\u016d\u0003\u016d\u0007",
    "\u016d\u18c9\n\u016d\f\u016d\u000e\u016d\u18cc\u000b\u016d\u0003\u016e",
    "\u0003\u016e\u0005\u016e\u18d0\n\u016e\u0003\u016f\u0003\u016f\u0003",
    "\u016f\u0005\u016f\u18d5\n\u016f\u0003\u016f\u0005\u016f\u18d8\n\u016f",
    "\u0003\u0170\u0003\u0170\u0003\u0170\u0005\u0170\u18dd\n\u0170\u0003",
    "\u0171\u0003\u0171\u0005\u0171\u18e1\n\u0171\u0003\u0171\u0003\u0171",
    "\u0005\u0171\u18e5\n\u0171\u0003\u0172\u0003\u0172\u0003\u0172\u0005",
    "\u0172\u18ea\n\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0005\u0172",
    "\u18ef\n\u0172\u0005\u0172\u18f1\n\u0172\u0003\u0172\u0003\u0172\u0005",
    "\u0172\u18f5\n\u0172\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0174",
    "\u0003\u0174\u0003\u0174\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0176",
    "\u0003\u0176\u0005\u0176\u1902\n\u0176\u0003\u0176\u0003\u0176\u0005",
    "\u0176\u1906\n\u0176\u0003\u0176\u0005\u0176\u1909\n\u0176\u0003\u0176",
    "\u0003\u0176\u0005\u0176\u190d\n\u0176\u0003\u0176\u0003\u0176\u0005",
    "\u0176\u1911\n\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u1915\n\u0176",
    "\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u191a\n\u0176\u0003",
    "\u0176\u0003\u0176\u0005\u0176\u191e\n\u0176\u0003\u0176\u0003\u0176",
    "\u0005\u0176\u1922\n\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u192b\n\u0176",
    "\u0005\u0176\u192d\n\u0176\u0003\u0177\u0003\u0177\u0003\u0177\u0007",
    "\u0177\u1932\n\u0177\f\u0177\u000e\u0177\u1935\u000b\u0177\u0003\u0178",
    "\u0003\u0178\u0003\u0178\u0005\u0178\u193a\n\u0178\u0003\u0179\u0003",
    "\u0179\u0003\u017a\u0003\u017a\u0003\u017b\u0003\u017b\u0005\u017b\u1942",
    "\n\u017b\u0003\u017c\u0003\u017c\u0003\u017d\u0003\u017d\u0003\u017d",
    "\u0003\u017d\u0003\u017e\u0003\u017e\u0003\u017e\u0003\u017e\u0003\u017f",
    "\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u0180\u0003\u0180\u0003\u0180",
    "\u0007\u0180\u1955\n\u0180\f\u0180\u000e\u0180\u1958\u000b\u0180\u0003",
    "\u0181\u0003\u0181\u0005\u0181\u195c\n\u0181\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0007\u0182\u1961\n\u0182\f\u0182\u000e\u0182\u1964\u000b",
    "\u0182\u0003\u0183\u0003\u0183\u0003\u0184\u0003\u0184\u0003\u0184\u0003",
    "\u0184\u0003\u0184\u0003\u0185\u0003\u0185\u0003\u0185\u0003\u0185\u0003",
    "\u0185\u0003\u0185\u0003\u0185\u0003\u0185\u0003\u0185\u0003\u0185\u0003",
    "\u0185\u0003\u0185\u0003\u0185\u0005\u0185\u197a\n\u0185\u0003\u0186",
    "\u0003\u0186\u0003\u0186\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187",
    "\u0003\u0187\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188",
    "\u0003\u0188\u0005\u0188\u198a\n\u0188\u0003\u0189\u0003\u0189\u0003",
    "\u0189\u0003\u018a\u0003\u018a\u0003\u018a\u0006\u018a\u1992\n\u018a",
    "\r\u018a\u000e\u018a\u1993\u0003\u018b\u0003\u018b\u0005\u018b\u1998",
    "\n\u018b\u0003\u018b\u0003\u018b\u0003\u018b\u0006\u018b\u199d\n\u018b",
    "\r\u018b\u000e\u018b\u199e\u0003\u018b\u0005\u018b\u19a2\n\u018b\u0003",
    "\u018b\u0003\u018b\u0003\u018b\u0003\u018c\u0003\u018c\u0003\u018c\u0003",
    "\u018d\u0003\u018d\u0003\u018d\u0005\u018d\u19ad\n\u018d\u0003\u018e",
    "\u0003\u018e\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u0190\u0003\u0190",
    "\u0005\u0190\u19b6\n\u0190\u0003\u0190\u0005\u0190\u19b9\n\u0190\u0003",
    "\u0190\u0003\u0190\u0003\u0191\u0003\u0191\u0003\u0191\u0005\u0191\u19c0",
    "\n\u0191\u0003\u0192\u0003\u0192\u0003\u0192\u0005\u0192\u19c5\n\u0192",
    "\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0194",
    "\u0003\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0003\u0194",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0196\u0003\u0196\u0003\u0196\u0006\u0196\u19dd\n",
    "\u0196\r\u0196\u000e\u0196\u19de\u0003\u0197\u0003\u0197\u0003\u0197",
    "\u0003\u0197\u0005\u0197\u19e5\n\u0197\u0003\u0198\u0003\u0198\u0003",
    "\u0198\u0003\u0198\u0005\u0198\u19eb\n\u0198\u0003\u0198\u0003\u0198",
    "\u0005\u0198\u19ef\n\u0198\u0003\u0199\u0003\u0199\u0003\u0199\u0003",
    "\u0199\u0003\u0199\u0003\u0199\u0003\u019a\u0003\u019a\u0005\u019a\u19f9",
    "\n\u019a\u0003\u019b\u0003\u019b\u0005\u019b\u19fd\n\u019b\u0003\u019b",
    "\u0003\u019b\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c",
    "\u0003\u019c\u0003\u019c\u0007\u019c\u1a08\n\u019c\f\u019c\u000e\u019c",
    "\u1a0b\u000b\u019c\u0003\u019c\u0003\u019c\u0003\u019d\u0003\u019d\u0003",
    "\u019d\u0003\u019d\u0003\u019d\u0003\u019d\u0003\u019d\u0005\u019d\u1a16",
    "\n\u019d\u0003\u019e\u0003\u019e\u0003\u019e\u0003\u019e\u0003\u019e",
    "\u0003\u019e\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u01a0\u0003\u01a0",
    "\u0003\u01a0\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0005\u01a1",
    "\u1a28\n\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0007",
    "\u01a1\u1a2e\n\u01a1\f\u01a1\u000e\u01a1\u1a31\u000b\u01a1\u0003\u01a1",
    "\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0007\u01a1\u1a38\n",
    "\u01a1\f\u01a1\u000e\u01a1\u1a3b\u000b\u01a1\u0005\u01a1\u1a3d\n\u01a1",
    "\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0005\u01a2\u1a42\n\u01a2\u0003",
    "\u01a3\u0003\u01a3\u0005\u01a3\u1a46\n\u01a3\u0003\u01a3\u0003\u01a3",
    "\u0003\u01a3\u0003\u01a4\u0003\u01a4\u0005\u01a4\u1a4d\n\u01a4\u0003",
    "\u01a4\u0003\u01a4\u0003\u01a4\u0005\u01a4\u1a52\n\u01a4\u0003\u01a5",
    "\u0003\u01a5\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0005\u01a6\u1a59\n",
    "\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0007\u01a6\u1a5f",
    "\n\u01a6\f\u01a6\u000e\u01a6\u1a62\u000b\u01a6\u0005\u01a6\u1a64\n\u01a6",
    "\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0005\u01a7\u1a69\n\u01a7\u0003",
    "\u01a7\u0005\u01a7\u1a6c\n\u01a7\u0003\u01a7\u0003\u01a7\u0003\u01a7",
    "\u0003\u01a7\u0007\u01a7\u1a72\n\u01a7\f\u01a7\u000e\u01a7\u1a75\u000b",
    "\u01a7\u0005\u01a7\u1a77\n\u01a7\u0003\u01a8\u0003\u01a8\u0003\u01a8",
    "\u0003\u01a8\u0003\u01a9\u0003\u01a9\u0003\u01a9\u0003\u01aa\u0003\u01aa",
    "\u0003\u01aa\u0003\u01ab\u0003\u01ab\u0005\u01ab\u1a85\n\u01ab\u0003",
    "\u01ab\u0005\u01ab\u1a88\n\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab",
    "\u0003\u01ab\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac",
    "\u0003\u01ac\u0003\u01ac\u0005\u01ac\u1a95\n\u01ac\u0003\u01ac\u0003",
    "\u01ac\u0005\u01ac\u1a99\n\u01ac\u0005\u01ac\u1a9b\n\u01ac\u0003\u01ad",
    "\u0003\u01ad\u0003\u01ad\u0005\u01ad\u1aa0\n\u01ad\u0003\u01ae\u0003",
    "\u01ae\u0003\u01ae\u0005\u01ae\u1aa5\n\u01ae\u0003\u01af\u0003\u01af",
    "\u0003\u01af\u0003\u01b0\u0005\u01b0\u1aab\n\u01b0\u0003\u01b0\u0003",
    "\u01b0\u0003\u01b1\u0003\u01b1\u0005\u01b1\u1ab1\n\u01b1\u0003\u01b1",
    "\u0003\u01b1\u0007\u01b1\u1ab5\n\u01b1\f\u01b1\u000e\u01b1\u1ab8\u000b",
    "\u01b1\u0003\u01b1\u0003\u01b1\u0005\u01b1\u1abc\n\u01b1\u0003\u01b1",
    "\u0005\u01b1\u1abf\n\u01b1\u0003\u01b1\u0003\u01b1\u0007\u01b1\u1ac3",
    "\n\u01b1\f\u01b1\u000e\u01b1\u1ac6\u000b\u01b1\u0003\u01b1\u0003\u01b1",
    "\u0005\u01b1\u1aca\n\u01b1\u0003\u01b1\u0005\u01b1\u1acd\n\u01b1\u0003",
    "\u01b1\u0003\u01b1\u0007\u01b1\u1ad1\n\u01b1\f\u01b1\u000e\u01b1\u1ad4",
    "\u000b\u01b1\u0003\u01b1\u0005\u01b1\u1ad7\n\u01b1\u0003\u01b1\u0003",
    "\u01b1\u0003\u01b1\u0003\u01b1\u0005\u01b1\u1add\n\u01b1\u0005\u01b1",
    "\u1adf\n\u01b1\u0003\u01b1\u0005\u01b1\u1ae2\n\u01b1\u0003\u01b1\u0003",
    "\u01b1\u0007\u01b1\u1ae6\n\u01b1\f\u01b1\u000e\u01b1\u1ae9\u000b\u01b1",
    "\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0005\u01b1\u1aee\n\u01b1\u0003",
    "\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0005",
    "\u01b1\u1af6\n\u01b1\u0005\u01b1\u1af8\n\u01b1\u0005\u01b1\u1afa\n\u01b1",
    "\u0003\u01b2\u0003\u01b2\u0005\u01b2\u1afe\n\u01b2\u0003\u01b3\u0003",
    "\u01b3\u0007\u01b3\u1b02\n\u01b3\f\u01b3\u000e\u01b3\u1b05\u000b\u01b3",
    "\u0003\u01b3\u0003\u01b3\u0005\u01b3\u1b09\n\u01b3\u0003\u01b3\u0003",
    "\u01b3\u0005\u01b3\u1b0d\n\u01b3\u0003\u01b3\u0003\u01b3\u0003\u01b3",
    "\u0005\u01b3\u1b12\n\u01b3\u0003\u01b3\u0003\u01b3\u0007\u01b3\u1b16",
    "\n\u01b3\f\u01b3\u000e\u01b3\u1b19\u000b\u01b3\u0003\u01b3\u0003\u01b3",
    "\u0007\u01b3\u1b1d\n\u01b3\f\u01b3\u000e\u01b3\u1b20\u000b\u01b3\u0005",
    "\u01b3\u1b22\n\u01b3\u0005\u01b3\u1b24\n\u01b3\u0003\u01b4\u0005\u01b4",
    "\u1b27\n\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003",
    "\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0005\u01b4\u1b31\n\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0005\u01b4\u1b35\n\u01b4\u0003\u01b4\u0003",
    "\u01b4\u0003\u01b4\u0003\u01b4\u0005\u01b4\u1b3b\n\u01b4\u0003\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0005\u01b4\u1b42\n",
    "\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0005\u01b4\u1b47\n\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4",
    "\u0005\u01b4\u1b55\n\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0005",
    "\u01b4\u1b5a\n\u01b4\u0003\u01b5\u0003\u01b5\u0003\u01b6\u0003\u01b6",
    "\u0003\u01b7\u0003\u01b7\u0005\u01b7\u1b62\n\u01b7\u0003\u01b7\u0003",
    "\u01b7\u0003\u01b7\u0005\u01b7\u1b67\n\u01b7\u0003\u01b7\u0003\u01b7",
    "\u0005\u01b7\u1b6b\n\u01b7\u0003\u01b7\u0005\u01b7\u1b6e\n\u01b7\u0003",
    "\u01b8\u0003\u01b8\u0003\u01b8\u0005\u01b8\u1b73\n\u01b8\u0003\u01b8",
    "\u0003\u01b8\u0005\u01b8\u1b77\n\u01b8\u0003\u01b8\u0003\u01b8\u0003",
    "\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0005\u01b8\u1b7f\n\u01b8",
    "\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8",
    "\u0005\u01b8\u1b87\n\u01b8\u0005\u01b8\u1b89\n\u01b8\u0003\u01b9\u0003",
    "\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0005\u01b9\u1b90\n\u01b9",
    "\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0007\u01ba\u1b96\n",
    "\u01ba\f\u01ba\u000e\u01ba\u1b99\u000b\u01ba\u0003\u01ba\u0003\u01ba",
    "\u0003\u01bb\u0003\u01bb\u0005\u01bb\u1b9f\n\u01bb\u0003\u01bb\u0005",
    "\u01bb\u1ba2\n\u01bb\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc",
    "\u0007\u01bc\u1ba8\n\u01bc\f\u01bc\u000e\u01bc\u1bab\u000b\u01bc\u0003",
    "\u01bc\u0003\u01bc\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005\u01bd\u1bb2",
    "\n\u01bd\u0005\u01bd\u1bb4\n\u01bd\u0003\u01be\u0003\u01be\u0003\u01be",
    "\u0003\u01be\u0005\u01be\u1bba\n\u01be\u0003\u01bf\u0003\u01bf\u0003",
    "\u01c0\u0003\u01c0\u0005\u01c0\u1bc0\n\u01c0\u0003\u01c1\u0003\u01c1",
    "\u0005\u01c1\u1bc4\n\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0003",
    "\u01c1\u0003\u01c1\u0005\u01c1\u1bcb\n\u01c1\u0003\u01c2\u0003\u01c2",
    "\u0003\u01c3\u0003\u01c3\u0003\u01c3\u0003\u01c4\u0003\u01c4\u0003\u01c4",
    "\u0003\u01c4\u0005\u01c4\u1bd6\n\u01c4\u0003\u01c5\u0003\u01c5\u0003",
    "\u01c6\u0003\u01c6\u0003\u01c6\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1bdf",
    "\n\u01c7\u0003\u01c7\u0005\u01c7\u1be2\n\u01c7\u0003\u01c7\u0003\u01c7",
    "\u0003\u01c7\u0005\u01c7\u1be7\n\u01c7\u0005\u01c7\u1be9\n\u01c7\u0003",
    "\u01c7\u0005\u01c7\u1bec\n\u01c7\u0003\u01c7\u0005\u01c7\u1bef\n\u01c7",
    "\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1bf3\n\u01c7\u0003\u01c7\u0005",
    "\u01c7\u1bf6\n\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1bfa\n\u01c7",
    "\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1bff\n\u01c7\u0003",
    "\u01c7\u0005\u01c7\u1c02\n\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7",
    "\u1c06\n\u01c7\u0003\u01c7\u0005\u01c7\u1c09\n\u01c7\u0003\u01c7\u0003",
    "\u01c7\u0005\u01c7\u1c0d\n\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7",
    "\u0005\u01c7\u1c12\n\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1c16",
    "\n\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7",
    "\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7",
    "\u1c22\n\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1c26\n\u01c7\u0003",
    "\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1c2c\n\u01c7",
    "\u0003\u01c7\u0005\u01c7\u1c2f\n\u01c7\u0003\u01c7\u0003\u01c7\u0003",
    "\u01c7\u0005\u01c7\u1c34\n\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7",
    "\u1c38\n\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1c3c\n\u01c7\u0003",
    "\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7\u1c41\n\u01c7\u0003\u01c7",
    "\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7",
    "\u0005\u01c7\u1c4a\n\u01c7\u0003\u01c7\u0005\u01c7\u1c4d\n\u01c7\u0003",
    "\u01c7\u0003\u01c7\u0005\u01c7\u1c51\n\u01c7\u0003\u01c7\u0003\u01c7",
    "\u0005\u01c7\u1c55\n\u01c7\u0003\u01c7\u0005\u01c7\u1c58\n\u01c7\u0003",
    "\u01c7\u0003\u01c7\u0005\u01c7\u1c5c\n\u01c7\u0003\u01c7\u0003\u01c7",
    "\u0005\u01c7\u1c60\n\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0005",
    "\u01c7\u1c65\n\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0005\u01c7",
    "\u1c6a\n\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c7\u0005",
    "\u01c7\u1c70\n\u01c7\u0003\u01c8\u0003\u01c8\u0003\u01c8\u0005\u01c8",
    "\u1c75\n\u01c8\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0005\u01c9\u1c7a",
    "\n\u01c9\u0005\u01c9\u1c7c\n\u01c9\u0003\u01ca\u0003\u01ca\u0003\u01ca",
    "\u0005\u01ca\u1c81\n\u01ca\u0003\u01ca\u0003\u01ca\u0003\u01cb\u0006",
    "\u01cb\u1c86\n\u01cb\r\u01cb\u000e\u01cb\u1c87\u0003\u01cc\u0003\u01cc",
    "\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0005\u01cc\u1c90\n",
    "\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0003\u01cc\u0005\u01cc\u1c96",
    "\n\u01cc\u0005\u01cc\u1c98\n\u01cc\u0003\u01cd\u0003\u01cd\u0005\u01cd",
    "\u1c9c\n\u01cd\u0003\u01cd\u0003\u01cd\u0005\u01cd\u1ca0\n\u01cd\u0003",
    "\u01ce\u0003\u01ce\u0005\u01ce\u1ca4\n\u01ce\u0003\u01ce\u0003\u01ce",
    "\u0005\u01ce\u1ca8\n\u01ce\u0003\u01cf\u0003\u01cf\u0003\u01cf\u0003",
    "\u01cf\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d1\u0003",
    "\u01d1\u0003\u01d1\u0003\u01d1\u0005\u01d1\u1cb6\n\u01d1\u0003\u01d2",
    "\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0005\u01d2\u1cbd\n",
    "\u01d2\u0003\u01d3\u0003\u01d3\u0005\u01d3\u1cc1\n\u01d3\u0003\u01d3",
    "\u0007\u01d3\u1cc4\n\u01d3\f\u01d3\u000e\u01d3\u1cc7\u000b\u01d3\u0003",
    "\u01d4\u0006\u01d4\u1cca\n\u01d4\r\u01d4\u000e\u01d4\u1ccb\u0003\u01d5",
    "\u0003\u01d5\u0005\u01d5\u1cd0\n\u01d5\u0003\u01d5\u0003\u01d5\u0003",
    "\u01d5\u0003\u01d5\u0005\u01d5\u1cd6\n\u01d5\u0003\u01d5\u0003\u01d5",
    "\u0005\u01d5\u1cda\n\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1cde",
    "\n\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1ce3\n\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1ce8\n\u01d5\u0003",
    "\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1ced\n\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1cf2\n\u01d5\u0003\u01d5\u0003",
    "\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1cf8\n\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1cfe\n\u01d5\u0003",
    "\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1d03\n\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1d08\n\u01d5\u0003\u01d5\u0003",
    "\u01d5\u0003\u01d5\u0005\u01d5\u1d0d\n\u01d5\u0003\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0005\u01d5\u1d12\n\u01d5\u0003\u01d5\u0003\u01d5\u0003",
    "\u01d5\u0005\u01d5\u1d17\n\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5",
    "\u0005\u01d5\u1d1c\n\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005",
    "\u01d5\u1d21\n\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1d2b\n",
    "\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1d31",
    "\n\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5",
    "\u1d37\n\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005",
    "\u01d5\u1d3d\n\u01d5\u0003\u01d5\u0005\u01d5\u1d40\n\u01d5\u0003\u01d5",
    "\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1d47\n",
    "\u01d5\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u1d4c\n\u01d5",
    "\u0003\u01d5\u0005\u01d5\u1d4f\n\u01d5\u0003\u01d6\u0003\u01d6\u0005",
    "\u01d6\u1d53\n\u01d6\u0003\u01d7\u0005\u01d7\u1d56\n\u01d7\u0003\u01d7",
    "\u0003\u01d7\u0005\u01d7\u1d5a\n\u01d7\u0003\u01d7\u0003\u01d7\u0003",
    "\u01d8\u0005\u01d8\u1d5f\n\u01d8\u0003\u01d8\u0003\u01d8\u0005\u01d8",
    "\u1d63\n\u01d8\u0003\u01d8\u0003\u01d8\u0003\u01d9\u0005\u01d9\u1d68",
    "\n\u01d9\u0003\u01d9\u0003\u01d9\u0005\u01d9\u1d6c\n\u01d9\u0003\u01d9",
    "\u0003\u01d9\u0003\u01da\u0003\u01da\u0003\u01da\u0003\u01da\u0003\u01da",
    "\u0005\u01da\u1d75\n\u01da\u0003\u01da\u0005\u01da\u1d78\n\u01da\u0003",
    "\u01da\u0005\u01da\u1d7b\n\u01da\u0003\u01db\u0005\u01db\u1d7e\n\u01db",
    "\u0003\u01db\u0003\u01db\u0005\u01db\u1d82\n\u01db\u0003\u01db\u0003",
    "\u01db\u0005\u01db\u1d86\n\u01db\u0003\u01db\u0003\u01db\u0005\u01db",
    "\u1d8a\n\u01db\u0003\u01db\u0003\u01db\u0003\u01db\u0003\u01db\u0003",
    "\u01db\u0003\u01db\u0003\u01db\u0003\u01db\u0003\u01db\u0003\u01db\u0003",
    "\u01db\u0003\u01db\u0003\u01db\u0005\u01db\u1d99\n\u01db\u0003\u01db",
    "\u0005\u01db\u1d9c\n\u01db\u0005\u01db\u1d9e\n\u01db\u0003\u01dc\u0003",
    "\u01dc\u0003\u01dc\u0005\u01dc\u1da3\n\u01dc\u0003\u01dc\u0003\u01dc",
    "\u0003\u01dc\u0003\u01dc\u0003\u01dc\u0003\u01dc\u0003\u01dc\u0005\u01dc",
    "\u1dac\n\u01dc\u0003\u01dc\u0005\u01dc\u1daf\n\u01dc\u0003\u01dc\u0003",
    "\u01dc\u0005\u01dc\u1db3\n\u01dc\u0003\u01dd\u0003\u01dd\u0003\u01dd",
    "\u0003\u01dd\u0003\u01dd\u0003\u01de\u0003\u01de\u0003\u01de\u0003\u01de",
    "\u0007\u01de\u1dbe\n\u01de\f\u01de\u000e\u01de\u1dc1\u000b\u01de\u0003",
    "\u01de\u0003\u01de\u0003\u01df\u0003\u01df\u0003\u01df\u0003\u01df\u0003",
    "\u01df\u0003\u01df\u0003\u01df\u0005\u01df\u1dcc\n\u01df\u0003\u01df",
    "\u0003\u01df\u0003\u01df\u0005\u01df\u1dd1\n\u01df\u0003\u01df\u0007",
    "\u01df\u1dd4\n\u01df\f\u01df\u000e\u01df\u1dd7\u000b\u01df\u0003\u01df",
    "\u0003\u01df\u0003\u01df\u0003\u01df\u0007\u01df\u1ddd\n\u01df\f\u01df",
    "\u000e\u01df\u1de0\u000b\u01df\u0003\u01df\u0003\u01df\u0005\u01df\u1de4",
    "\n\u01df\u0003\u01e0\u0003\u01e0\u0003\u01e0\u0003\u01e0\u0003\u01e0",
    "\u0007\u01e0\u1deb\n\u01e0\f\u01e0\u000e\u01e0\u1dee\u000b\u01e0\u0003",
    "\u01e0\u0003\u01e0\u0005\u01e0\u1df2\n\u01e0\u0003\u01e1\u0003\u01e1",
    "\u0005\u01e1\u1df6\n\u01e1\u0003\u01e1\u0003\u01e1\u0005\u01e1\u1dfa",
    "\n\u01e1\u0003\u01e1\u0003\u01e1\u0005\u01e1\u1dfe\n\u01e1\u0003\u01e1",
    "\u0003\u01e1\u0003\u01e1\u0005\u01e1\u1e03\n\u01e1\u0003\u01e1\u0003",
    "\u01e1\u0003\u01e1\u0005\u01e1\u1e08\n\u01e1\u0003\u01e1\u0003\u01e1",
    "\u0003\u01e1\u0003\u01e1\u0005\u01e1\u1e0e\n\u01e1\u0003\u01e1\u0003",
    "\u01e1\u0003\u01e1\u0005\u01e1\u1e13\n\u01e1\u0003\u01e1\u0005\u01e1",
    "\u1e16\n\u01e1\u0003\u01e2\u0003\u01e2\u0003\u01e2\u0007\u01e2\u1e1b",
    "\n\u01e2\f\u01e2\u000e\u01e2\u1e1e\u000b\u01e2\u0003\u01e3\u0003\u01e3",
    "\u0003\u01e3\u0003\u01e3\u0007\u01e3\u1e24\n\u01e3\f\u01e3\u000e\u01e3",
    "\u1e27\u000b\u01e3\u0003\u01e3\u0003\u01e3\u0003\u01e4\u0003\u01e4\u0005",
    "\u01e4\u1e2d\n\u01e4\u0003\u01e5\u0003\u01e5\u0003\u01e5\u0003\u01e5",
    "\u0003\u01e6\u0003\u01e6\u0003\u01e6\u0003\u01e7\u0003\u01e7\u0003\u01e7",
    "\u0003\u01e7\u0003\u01e8\u0005\u01e8\u1e3b\n\u01e8\u0003\u01e8\u0003",
    "\u01e8\u0003\u01e9\u0003\u01e9\u0003\u01e9\u0003\u01ea\u0003\u01ea\u0003",
    "\u01ea\u0003\u01eb\u0003\u01eb\u0005\u01eb\u1e47\n\u01eb\u0003\u01ec",
    "\u0003\u01ec\u0003\u01ec\u0003\u01ec\u0003\u01ec\u0003\u01ec\u0003\u01ed",
    "\u0003\u01ed\u0003\u01ed\u0007\u01ed\u1e52\n\u01ed\f\u01ed\u000e\u01ed",
    "\u1e55\u000b\u01ed\u0003\u01ee\u0003\u01ee\u0003\u01ee\u0007\u01ee\u1e5a",
    "\n\u01ee\f\u01ee\u000e\u01ee\u1e5d\u000b\u01ee\u0003\u01ef\u0003\u01ef",
    "\u0003\u01ef\u0003\u01ef\u0005\u01ef\u1e63\n\u01ef\u0003\u01f0\u0003",
    "\u01f0\u0003\u01f0\u0003\u01f1\u0003\u01f1\u0006\u01f1\u1e6a\n\u01f1",
    "\r\u01f1\u000e\u01f1\u1e6b\u0003\u01f2\u0003\u01f2\u0003\u01f2\u0003",
    "\u01f2\u0005\u01f2\u1e72\n\u01f2\u0003\u01f2\u0003\u01f2\u0003\u01f2",
    "\u0003\u01f2\u0003\u01f2\u0003\u01f2\u0005\u01f2\u1e7a\n\u01f2\u0003",
    "\u01f3\u0003\u01f3\u0006\u01f3\u1e7e\n\u01f3\r\u01f3\u000e\u01f3\u1e7f",
    "\u0003\u01f4\u0003\u01f4\u0003\u01f4\u0003\u01f4\u0003\u01f5\u0003\u01f5",
    "\u0003\u01f5\u0007\u01f5\u1e89\n\u01f5\f\u01f5\u000e\u01f5\u1e8c\u000b",
    "\u01f5\u0003\u01f6\u0003\u01f6\u0003\u01f6\u0007\u01f6\u1e91\n\u01f6",
    "\f\u01f6\u000e\u01f6\u1e94\u000b\u01f6\u0003\u01f7\u0003\u01f7\u0003",
    "\u01f7\u0007\u01f7\u1e99\n\u01f7\f\u01f7\u000e\u01f7\u1e9c\u000b\u01f7",
    "\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0005\u01f8",
    "\u1ea3\n\u01f8\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0003",
    "\u01f8\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0005\u01f8\u1ead\n\u01f8",
    "\u0003\u01f8\u0003\u01f8\u0003\u01f8\u0005\u01f8\u1eb2\n\u01f8\u0003",
    "\u01f8\u0003\u01f8\u0003\u01f8\u0005\u01f8\u1eb7\n\u01f8\u0005\u01f8",
    "\u1eb9\n\u01f8\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0005",
    "\u01f9\u1ebf\n\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9",
    "\u0005\u01f9\u1ec5\n\u01f9\u0003\u01f9\u0005\u01f9\u1ec8\n\u01f9\u0003",
    "\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0003\u01f9\u0005\u01f9\u1ecf",
    "\n\u01f9\u0005\u01f9\u1ed1\n\u01f9\u0005\u01f9\u1ed3\n\u01f9\u0003\u01f9",
    "\u0005\u01f9\u1ed6\n\u01f9\u0005\u01f9\u1ed8\n\u01f9\u0003\u01fa\u0003",
    "\u01fa\u0003\u01fa\u0003\u01fa\u0003\u01fb\u0003\u01fb\u0003\u01fb\u0003",
    "\u01fb\u0003\u01fc\u0003\u01fc\u0003\u01fc\u0003\u01fd\u0003\u01fd\u0003",
    "\u01fd\u0003\u01fd\u0005\u01fd\u1ee9\n\u01fd\u0003\u01fe\u0003\u01fe",
    "\u0003\u01fe\u0005\u01fe\u1eee\n\u01fe\u0005\u01fe\u1ef0\n\u01fe\u0003",
    "\u01ff\u0003\u01ff\u0003\u01ff\u0003\u0200\u0003\u0200\u0005\u0200\u1ef7",
    "\n\u0200\u0003\u0201\u0003\u0201\u0003\u0202\u0003\u0202\u0003\u0203",
    "\u0003\u0203\u0003\u0203\u0003\u0203\u0003\u0204\u0003\u0204\u0003\u0204",
    "\u0005\u0204\u1f04\n\u0204\u0005\u0204\u1f06\n\u0204\u0003\u0205\u0003",
    "\u0205\u0003\u0205\u0003\u0205\u0005\u0205\u1f0c\n\u0205\u0003\u0206",
    "\u0003\u0206\u0003\u0207\u0003\u0207\u0003\u0207\u0003\u0207\u0007\u0207",
    "\u1f14\n\u0207\f\u0207\u000e\u0207\u1f17\u000b\u0207\u0003\u0207\u0003",
    "\u0207\u0003\u0208\u0003\u0208\u0003\u0209\u0003\u0209\u0005\u0209\u1f1f",
    "\n\u0209\u0003\u020a\u0003\u020a\u0003\u020b\u0003\u020b\u0003\u020c",
    "\u0003\u020c\u0003\u020c\u0003\u020c\u0003\u020c\u0005\u020c\u1f2a\n",
    "\u020c\u0003\u020c\u0003\u020c\u0003\u020d\u0003\u020d\u0003\u020e\u0003",
    "\u020e\u0003\u020f\u0003\u020f\u0003\u0210\u0003\u0210\u0003\u0211\u0003",
    "\u0211\u0003\u0212\u0003\u0212\u0003\u0213\u0003\u0213\u0003\u0214\u0003",
    "\u0214\u0003\u0215\u0003\u0215\u0005\u0215\u1f40\n\u0215\u0003\u0216",
    "\u0003\u0216\u0005\u0216\u1f44\n\u0216\u0003\u0217\u0003\u0217\u0003",
    "\u0218\u0003\u0218\u0003\u0219\u0003\u0219\u0003\u021a\u0003\u021a\u0003",
    "\u021b\u0003\u021b\u0003\u021c\u0003\u021c\u0003\u021d\u0003\u021d\u0003",
    "\u021e\u0003\u021e\u0003\u021f\u0003\u021f\u0003\u0220\u0003\u0220\u0003",
    "\u0221\u0003\u0221\u0005\u0221\u1f5c\n\u0221\u0003\u0222\u0003\u0222",
    "\u0003\u0222\u0003\u0223\u0003\u0223\u0003\u0223\u0003\u0223\u0003\u0223",
    "\u0003\u0223\u0005\u0223\u1f67\n\u0223\u0005\u0223\u1f69\n\u0223\u0003",
    "\u0224\u0003\u0224\u0005\u0224\u1f6d\n\u0224\u0003\u0225\u0003\u0225",
    "\u0003\u0225\u0007\u0225\u1f72\n\u0225\f\u0225\u000e\u0225\u1f75\u000b",
    "\u0225\u0003\u0226\u0003\u0226\u0003\u0226\u0007\u0226\u1f7a\n\u0226",
    "\f\u0226\u000e\u0226\u1f7d\u000b\u0226\u0003\u0227\u0003\u0227\u0003",
    "\u0228\u0003\u0228\u0005\u0228\u1f83\n\u0228\u0003\u0229\u0003\u0229",
    "\u0003\u022a\u0003\u022a\u0005\u022a\u1f89\n\u022a\u0003\u022b\u0003",
    "\u022b\u0003\u022c\u0003\u022c\u0003\u022d\u0003\u022d\u0003\u022e\u0003",
    "\u022e\u0003\u022f\u0003\u022f\u0003\u0230\u0003\u0230\u0003\u0230\u0005",
    "\u0230\u1f98\n\u0230\u0003\u0231\u0003\u0231\u0005\u0231\u1f9c\n\u0231",
    "\u0003\u0232\u0003\u0232\u0003\u0232\u0007\u0232\u1fa1\n\u0232\f\u0232",
    "\u000e\u0232\u1fa4\u000b\u0232\u0003\u0233\u0003\u0233\u0003\u0233\u0003",
    "\u0233\u0003\u0234\u0003\u0234\u0005\u0234\u1fac\n\u0234\u0003\u0235",
    "\u0003\u0235\u0003\u0235\u0005\u0235\u1fb1\n\u0235\u0005\u0235\u1fb3",
    "\n\u0235\u0003\u0235\u0003\u0235\u0003\u0235\u0003\u0235\u0005\u0235",
    "\u1fb9\n\u0235\u0003\u0236\u0003\u0236\u0003\u0236\u0003\u0237\u0003",
    "\u0237\u0003\u0238\u0003\u0238\u0003\u0239\u0003\u0239\u0003\u023a\u0003",
    "\u023a\u0003\u023a\u0003\u023a\u0003\u023a\u0005\u023a\u1fc9\n\u023a",
    "\u0003\u023b\u0003\u023b\u0003\u023b\u0003\u023b\u0003\u023b\u0003\u023b",
    "\u0005\u023b\u1fd1\n\u023b\u0003\u023b\u0005\u023b\u1fd4\n\u023b\u0003",
    "\u023c\u0003\u023c\u0003\u023c\u0003\u023c\u0003\u023c\u0005\u023c\u1fdb",
    "\n\u023c\u0003\u023d\u0003\u023d\u0003\u023d\u0003\u023d\u0007\u023d",
    "\u1fe1\n\u023d\f\u023d\u000e\u023d\u1fe4\u000b\u023d\u0003\u023d\u0003",
    "\u023d\u0003\u023e\u0003\u023e\u0003\u023e\u0005\u023e\u1feb\n\u023e",
    "\u0003\u023f\u0003\u023f\u0003\u023f\u0005\u023f\u1ff0\n\u023f\u0003",
    "\u0240\u0003\u0240\u0003\u0240\u0005\u0240\u1ff5\n\u0240\u0003\u0241",
    "\u0005\u0241\u1ff8\n\u0241\u0003\u0241\u0003\u0241\u0005\u0241\u1ffc",
    "\n\u0241\u0003\u0241\u0007\u0241\u1fff\n\u0241\f\u0241\u000e\u0241\u2002",
    "\u000b\u0241\u0003\u0242\u0003\u0242\u0003\u0243\u0003\u0243\u0003\u0243",
    "\u0007\u0243\u2009\n\u0243\f\u0243\u000e\u0243\u200c\u000b\u0243\u0003",
    "\u0244\u0003\u0244\u0003\u0245\u0003\u0245\u0003\u0246\u0003\u0246\u0003",
    "\u0247\u0003\u0247\u0003\u0247\u0003\u0247\u0003\u0247\u0003\u0247\u0005",
    "\u0247\u201a\n\u0247\u0003\u0248\u0003\u0248\u0005\u0248\u201e\n\u0248",
    "\u0003\u0249\u0003\u0249\u0003\u024a\u0003\u024a\u0003\u024a\u0003\u024a",
    "\u0003\u024a\u0003\u024a\u0003\u024b\u0003\u024b\u0005\u024b\u202a\n",
    "\u024b\u0003\u024c\u0003\u024c\u0005\u024c\u202e\n\u024c\u0003\u024d",
    "\u0003\u024d\u0005\u024d\u2032\n\u024d\u0003\u024e\u0003\u024e\u0005",
    "\u024e\u2036\n\u024e\u0003\u024f\u0003\u024f\u0003\u024f\u0003\u0250",
    "\u0003\u0250\u0003\u0251\u0003\u0251\u0003\u0252\u0003\u0252\u0003\u0252",
    "\u0003\u0252\u0003\u0252\u0003\u0252\u0005\u0252\u2045\n\u0252\u0003",
    "\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0003",
    "\u0253\u0003\u0253\u0003\u0253\u0003\u0253\u0005\u0253\u2051\n\u0253",
    "\u0003\u0254\u0003\u0254\u0003\u0254\u0003\u0254\u0003\u0254\u0003\u0254",
    "\u0003\u0254\u0003\u0254\u0005\u0254\u205b\n\u0254\u0003\u0254\u0003",
    "\u0254\u0003\u0254\u0003\u0254\u0003\u0254\u0005\u0254\u2062\n\u0254",
    "\u0005\u0254\u2064\n\u0254\u0003\u0255\u0003\u0255\u0003\u0256\u0003",
    "\u0256\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0003",
    "\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0005",
    "\u0257\u2075\n\u0257\u0003\u0257\u0003\u0257\u0003\u0257\u0005\u0257",
    "\u207a\n\u0257\u0005\u0257\u207c\n\u0257\u0003\u0258\u0003\u0258\u0003",
    "\u0259\u0003\u0259\u0003\u025a\u0003\u025a\u0003\u025a\u0005\u025a\u2085",
    "\n\u025a\u0003\u025a\u0003\u025a\u0003\u025a\u0005\u025a\u208a\n\u025a",
    "\u0005\u025a\u208c\n\u025a\u0003\u025b\u0003\u025b\u0003\u025b\u0003",
    "\u025b\u0005\u025b\u2092\n\u025b\u0003\u025c\u0003\u025c\u0003\u025d",
    "\u0003\u025d\u0003\u025d\u0003\u025d\u0003\u025d\u0005\u025d\u209b\n",
    "\u025d\u0003\u025e\u0003\u025e\u0003\u025e\u0003\u025e\u0003\u025e\u0003",
    "\u025e\u0003\u025e\u0003\u025e\u0003\u025e\u0005\u025e\u20a6\n\u025e",
    "\u0003\u025e\u0002\u0007\u0114\u029c\u029e\u02a6\u02a8\u025f\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114",
    "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c",
    "\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144",
    "\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c",
    "\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174",
    "\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c",
    "\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4",
    "\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc",
    "\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4",
    "\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec",
    "\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204",
    "\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c",
    "\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234",
    "\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c",
    "\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264",
    "\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c",
    "\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294",
    "\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac",
    "\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4",
    "\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc",
    "\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4",
    "\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c",
    "\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324",
    "\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c",
    "\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354",
    "\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c",
    "\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384",
    "\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c",
    "\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4",
    "\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc",
    "\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4",
    "\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc",
    "\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414",
    "\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c",
    "\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444",
    "\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c",
    "\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474",
    "\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c",
    "\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4",
    "\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u0002",
    "\u0092\u0003\u0002\u02f2\u02f3\u0004\u0002\u01b1\u01b1\u028f\u028f\u0004",
    "\u0002\u01c0\u01c0\u0263\u0263\u0003\u0002\u02ac\u02ad\u0004\u0002\u01ac",
    "\u01ac\u01e9\u01e9\u0004\u0002\u010f\u010f\u0259\u0259\u0003\u0002\u02f4",
    "\u02f5\u0004\u0002OO\u00b6\u00b6\u0004\u0002\u020a\u020a\u0260\u0260",
    "\u0006\u0002\u014b\u014b\u01de\u01de\u0213\u0213\u025a\u025a\u0004\u0002",
    "uu\u00a3\u00a3\u0004\u0002\u0113\u0113\u016a\u016a\u0004\u0002\u0112",
    "\u0112\u0169\u0169\u0004\u0002\u00ef\u00ef\u0174\u0174\u0005\u0002\u00d9",
    "\u00d9\u015a\u015a\u0168\u0168\u0004\u0002==\u01b4\u01b4\u0005\u0002",
    "\u01e2\u01e2\u0210\u0210\u0299\u0299\u0004\u0002\u0015\u0015$$\u0004",
    "\u0002\u0156\u0156\u0289\u0289\u0005\u0002\u010e\u010e\u020a\u020a\u022c",
    "\u022c\u0004\u0002\u0096\u0096\u00ed\u00ed\u0006\u0002\u0096\u0096\u00b0",
    "\u00b0\u00ed\u00ed\u0105\u0105\u0004\u0002\u0181\u0181\u0184\u0187\u0005",
    "\u0002\u01e1\u01e1\u0205\u0205\u022c\u022c\u0004\u0002\u0172\u0172\u02a1",
    "\u02a1\u0004\u0002cc\u022c\u022c\u0004\u0002oo\u017a\u017a\u0004\u0002",
    "\u012c\u012c\u0223\u0223\u0004\u0002\u01e1\u01e1\u022c\u022c\b\u0002",
    "\u0141\u0141\u01ad\u01ad\u01e6\u01e6\u0205\u0205\u0277\u0279\u0282\u0282",
    "\u0004\u0002\u00f4\u00f4\u0198\u0198\u0004\u0002\u017e\u0180\u01a6\u01a6",
    "\u0005\u0002\u012c\u012c\u0256\u0256\u02cb\u02cb\u0004\u0002\u01b2\u01b2",
    "\u01e3\u01e3\u0004\u0002\u021f\u021f\u0266\u0266\u0004\u0002\u01ce\u01ce",
    "\u020d\u020d\u0004\u0002\u01ad\u01ad\u01e6\u01e6\u0004\u0002\u01fa\u01fa",
    "\u020a\u020a\u0004\u0002\u020b\u020b\u021b\u021b\u0004\u0002\u0247\u0247",
    "\u02ae\u02ae\u0004\u0002\u0007\u000722\u0004\u0002\u0125\u0125\u0219",
    "\u0219\u0004\u0002\u00bb\u00bb\u01b7\u01b7\u0004\u0002\u013d\u013d\u013f",
    "\u013f\u0004\u0002\u0119\u0119\u0143\u0143\u0003\u000223\u0004\u0002",
    "\u0010\u0010\u01e9\u01e9\u0005\u0002\u00f1\u00f1\u0178\u0178\u027b\u027b",
    "\u0004\u0002\u0226\u0226\u0297\u0297\u0004\u0002\u01e0\u01e0\u02ef\u02ef",
    "\u0005\u0002\u0166\u0166\u0254\u0254\u0289\u0289\u0006\u0002\u0210\u0210",
    "\u025b\u025b\u0268\u0268\u0299\u0299\u000f\u0002\u0013\u0013::\u0087",
    "\u0087\u0093\u0093\u0107\u0107\u010b\u010b\u011a\u011a\u0151\u0151\u01e2",
    "\u01e2\u01e9\u01e9\u020b\u020b\u0291\u0291\u029a\u029a\u0006\u0002\u012b",
    "\u012b\u0158\u0158\u016e\u016e\u0171\u0171\u0004\u0002//UU\u0004\u0002",
    "\u01cd\u01cd\u01e9\u01e9\u0004\u0002\u00f1\u00f1\u01e0\u01e0\u0004\u0002",
    "\u008c\u008c\u010e\u010e\u0007\u0002RR\u008c\u008c\u008f\u008f\u00d7",
    "\u00d7\u010e\u010e\u0005\u0002\u008c\u008c\u010e\u010e\u016f\u016f\u0004",
    "\u0002]]\u0167\u0167\u0006\u0002\u01ad\u01ad\u01b7\u01b7\u01e0\u01e0",
    "\u0245\u0245\u0004\u0002\u012f\u012f\u02e6\u02e6\u0005\u0002\u00b9\u00b9",
    "\u00e5\u00e5\u0149\u0149\u0004\u0002\u01fd\u01fd\u0214\u0214\u0004\u0002",
    "II\u0116\u0116\u0005\u0002\u00a5\u00a5\u020b\u020b\u021a\u021a\u0004",
    "\u0002\u0085\u0085\u0173\u0173\u0004\u0002\u0149\u0149\u0170\u0170\b",
    "\u0002kk\u00aa\u00aa\u00d8\u00d8\u013c\u013c\u0153\u0153\u01ad\u01ad",
    "\u0004\u0002dd\u010d\u010d\u0007\u0002ww\u009f\u009f\u0106\u0106\u0149",
    "\u0149\u016d\u016d\u0007\u0002\u0082\u0082\u0084\u0084\u0098\u0098\u0139",
    "\u0139\u01b7\u01b7\u0004\u0002\u016e\u016e\u02e6\u02e6\u0004\u0002z",
    "z\u0091\u0091\u0004\u0002\u01e3\u01e4\u01f5\u01f5\u0005\u0002\u016b",
    "\u016b\u01f7\u01f7\u0293\u0293\u0004\u0002\u0192\u0192\u01b0\u01b0\u0004",
    "\u0002\u0195\u0195\u024d\u024d\u0004\u0002BB\u01ad\u01ad\u0004\u0002",
    "\u0181\u0181\u0183\u0188\u0005\u0002\u018b\u018d\u01e7\u01e7\u023a\u023a",
    "\u0003\u0002\u0189\u018a\u0003\u0002\u0190\u0191\u0004\u0002\u0189\u018a",
    "\u018f\u018f\u0003\u0002\u01b9\u01bb\u0006\u0002\u02c6\u02c7\u02d4\u02d4",
    "\u02d6\u02d6\u02d8\u02d8\u0004\u0002\u02cc\u02cc\u02ce\u02ce\u0004\u0002",
    "\u02c9\u02c9\u02cd\u02cd\u0004\u0002\u0096\u0096\u00b0\u00b0\u0004\u0002",
    "\u020a\u020a\u02d7\u02d7\u0004\u0002<<\u014d\u014d\u0003\u0002\u01d7",
    "\u01d8\u0003\u0002\u0160\u0161\u0005\u0002qr\u015f\u015f\u0162\u0162",
    "\u0004\u0002\u017c\u017c\u023f\u023f\u0004\u0002\u017c\u017c\u018e\u018e",
    "\u0007\u0002\u01d9\u01dc\u0206\u0208\u0236\u0237\u0267\u0267\u02b0\u02b0",
    "\u000b\u0002ss\u00a0\u00a0\u00db\u00db\u00dd\u00dd\u00e1\u00e1\u010c",
    "\u010c\u0133\u0133\u0175\u0175\u017b\u017b\u0005\u0002\u01ca\u01ca\u01f3",
    "\u01f3\u0294\u0294\u0004\u0002\u00f2\u00f2\u012d\u012d\f\u0002PPVVZ",
    "Zfhnn\u00da\u00da\u00e6\u00e6\u0132\u0132\u014c\u014c\u0155\u0155\u0004",
    "\u0002\u0281\u0281\u02a8\u02a8\u0005\u0002\u007f\u007f\u0097\u0097\u01e0",
    "\u01e0\u0005\u0002||\u00d8\u00d8\u01e0\u01e0\u0005\u0002\u0092\u0092",
    "\u00fa\u00fa\u0137\u0137\u0005\u0002NN\u009e\u009e\u0130\u0130\u0003",
    "\u0002\u02b5\u02b6\u0004\u0002\u0164\u0164\u029c\u029c\u0007\u0002\u01b6",
    "\u01b6\u0213\u0213\u0233\u0233\u0271\u0271\u028d\u028d\u0006\u0002\u0097",
    "\u0097\u01de\u01de\u01f9\u01f9\u0243\u0243\u0003\u0002LM\u0004\u0002",
    "\u0227\u0227\u0232\u0232\u0006\u0002\u0099\u009a\u00b4\u00b4\u00e2\u00e4",
    "\u0102\u0103\u0005\u0002..\u0298\u0298\u02b1\u02b1\u0003\u0002\u0146",
    "\u0148\u0004\u0002\u000b\u000b\u0157\u0157\b\u0002^^``\u007f\u007f\u0097",
    "\u0097\u0114\u0114\u01e0\u01e0\u0005\u0002\u001d\u001d\u0096\u0096\u00b0",
    "\u00b0\u0004\u0002||\u00d8\u00d8\u0004\u0002\u00b5\u00b5\u0256\u0256",
    "\u0004\u0002\u00ba\u00ba\u00de\u00de\u0004\u0002oo\u020b\u020b\u0005",
    "\u0002\u020e\u020e\u0214\u0214\u0250\u0250\u0004\u0002\u027c\u027c\u028a",
    "\u028a\u0004\u0002\u0244\u0244\u0246\u0246\u0004\u0002\u00b6\u00b6\u0241",
    "\u0241\u0004\u0002\u0306\u0306\u0308\u0308\u0005\u0002\u017e\u0180\u01a7",
    "\u01a7\u01a9\u01aa\u0004\u0002\u017e\u0180\u01a7\u01a7\u0004\u0002\u017e",
    "\u0180\u01a9\u01aa\u0003\u0002\u01a7\u01a8\u0004\u0002\u01f7\u01f7\u0293",
    "\u0293\u0004\u0002\u01a5\u01a5\u0242\u0242\u0003\u0002\u0181\u0182\u0007",
    "\u0002\u009d\u009d\u00b6\u00b6\u0136\u0136\u02b2\u02b2\u02c1\u02c1\u0005",
    "\u0002\u0013\u0013::\u02ea\u02ea\u0010\u0002\u0004\u0004\u0007\u000b",
    "\r\u0012\u0014\u0015\u0018\u0019\u001b\u001d$%\'(*+./2699\u00a4\u00a4",
    "\u02c5\u02c5\u000b\u0002\u0087\u0087\u0093\u0093\u00f1\u00f1\u0107\u0107",
    "\u010b\u010b\u011a\u011a\u011d\u011d\u0151\u0151\u02e5\u02e5=\u0002",
    "\u0003\u0003\u0005\u0006\f\f\u0016\u0017\u001a\u001a\u001e!##&&)),-",
    "0178;@BCEikkmvx\u0086\u0088\u0092\u0094\u009c\u009e\u00a3\u00a5\u00a7",
    "\u00a9\u00b5\u00b7\u00d2\u00d4\u00f0\u00f2\u00f4\u00f7\u0106\u0108\u010a",
    "\u010c\u0112\u0114\u0119\u011b\u011c\u011e\u012b\u012d\u012e\u0130\u0135",
    "\u0137\u013f\u0141\u0150\u0152\u0164\u0167\u017b\u01f1\u01f1\u01f4\u01f4",
    "\u0247\u0247\u02a0\u02a0\u02ad\u02ad\u02b3\u02b6\u02b8\u02b8\u02bd\u02bf",
    "\u02c2\u02c3\u02c8\u02c8\u02ca\u02ca\u02d1\u02d2\u02d5\u02d5\u02d7\u02d7",
    "\u02d9\u02da\u02de\u02e4\u02e7\u02e9\u02eb\u02f5\u02f7\u02fa\u02fc\u02fc",
    "\u02ff\u0302\b\u0002\u0003\u0012\u00149\u02b3\u02b3\u02b5\u02b6\u02c5",
    "\u02c5\u02f0\u02f3\"\u0002;@Bkm\u0086\u0088\u0092\u0094\u00a3\u00a5",
    "\u00a7\u00a9\u00f0\u00f2\u00f5\u00f7\u0106\u0108\u010a\u010c\u0119\u011b",
    "\u011c\u011e\u012b\u012d\u012e\u0130\u0165\u0167\u017b\u01af\u01af\u02b8",
    "\u02b8\u02bd\u02bf\u02c2\u02c4\u02c8\u02c8\u02ca\u02ca\u02d1\u02d2\u02d5",
    "\u02d5\u02d7\u02d7\u02d9\u02da\u02de\u02e4\u02e7\u02e8\u02ec\u02ed\u02ef",
    "\u02ef\u02f4\u02f5\u02f7\u02f8\u0007\u0002ll\u00a4\u00a4\u012c\u012c",
    "\u012f\u012f\u0166\u0166\b\u0002\u0151\u0151\u01f1\u01f1\u01f4\u01f4",
    "\u0247\u0247\u02a0\u02a0\u02ad\u02ad\u0002\u24ff\u0002\u04c8\u0003\u0002",
    "\u0002\u0002\u0004\u04ec\u0003\u0002\u0002\u0002\u0006\u04ee\u0003\u0002",
    "\u0002\u0002\b\u050b\u0003\u0002\u0002\u0002\n\u051a\u0003\u0002\u0002",
    "\u0002\f\u0540\u0003\u0002\u0002\u0002\u000e\u0549\u0003\u0002\u0002",
    "\u0002\u0010\u0556\u0003\u0002\u0002\u0002\u0012\u0558\u0003\u0002\u0002",
    "\u0002\u0014\u055d\u0003\u0002\u0002\u0002\u0016\u0575\u0003\u0002\u0002",
    "\u0002\u0018\u057e\u0003\u0002\u0002\u0002\u001a\u0580\u0003\u0002\u0002",
    "\u0002\u001c\u058f\u0003\u0002\u0002\u0002\u001e\u05f2\u0003\u0002\u0002",
    "\u0002 \u05f6\u0003\u0002\u0002\u0002\"\u0606\u0003\u0002\u0002\u0002",
    "$\u068d\u0003\u0002\u0002\u0002&\u0692\u0003\u0002\u0002\u0002(\u0694",
    "\u0003\u0002\u0002\u0002*\u0696\u0003\u0002\u0002\u0002,\u06a4\u0003",
    "\u0002\u0002\u0002.\u06ac\u0003\u0002\u0002\u00020\u06bc\u0003\u0002",
    "\u0002\u00022\u06be\u0003\u0002\u0002\u00024\u06c2\u0003\u0002\u0002",
    "\u00026\u06c7\u0003\u0002\u0002\u00028\u06c9\u0003\u0002\u0002\u0002",
    ":\u06d4\u0003\u0002\u0002\u0002<\u06f9\u0003\u0002\u0002\u0002>\u0701",
    "\u0003\u0002\u0002\u0002@\u070b\u0003\u0002\u0002\u0002B\u070d\u0003",
    "\u0002\u0002\u0002D\u0721\u0003\u0002\u0002\u0002F\u072a\u0003\u0002",
    "\u0002\u0002H\u072d\u0003\u0002\u0002\u0002J\u073a\u0003\u0002\u0002",
    "\u0002L\u073f\u0003\u0002\u0002\u0002N\u0743\u0003\u0002\u0002\u0002",
    "P\u074a\u0003\u0002\u0002\u0002R\u075f\u0003\u0002\u0002\u0002T\u076e",
    "\u0003\u0002\u0002\u0002V\u0771\u0003\u0002\u0002\u0002X\u0790\u0003",
    "\u0002\u0002\u0002Z\u079a\u0003\u0002\u0002\u0002\\\u079d\u0003\u0002",
    "\u0002\u0002^\u07a6\u0003\u0002\u0002\u0002`\u07a8\u0003\u0002\u0002",
    "\u0002b\u07b4\u0003\u0002\u0002\u0002d\u07cd\u0003\u0002\u0002\u0002",
    "f\u07e8\u0003\u0002\u0002\u0002h\u07f6\u0003\u0002\u0002\u0002j\u07f9",
    "\u0003\u0002\u0002\u0002l\u080e\u0003\u0002\u0002\u0002n\u0811\u0003",
    "\u0002\u0002\u0002p\u084a\u0003\u0002\u0002\u0002r\u084c\u0003\u0002",
    "\u0002\u0002t\u0850\u0003\u0002\u0002\u0002v\u0859\u0003\u0002\u0002",
    "\u0002x\u0869\u0003\u0002\u0002\u0002z\u086b\u0003\u0002\u0002\u0002",
    "|\u0873\u0003\u0002\u0002\u0002~\u088d\u0003\u0002\u0002\u0002\u0080",
    "\u088f\u0003\u0002\u0002\u0002\u0082\u089b\u0003\u0002\u0002\u0002\u0084",
    "\u08aa\u0003\u0002\u0002\u0002\u0086\u08ac\u0003\u0002\u0002\u0002\u0088",
    "\u08af\u0003\u0002\u0002\u0002\u008a\u08c5\u0003\u0002\u0002\u0002\u008c",
    "\u08c7\u0003\u0002\u0002\u0002\u008e\u08cd\u0003\u0002\u0002\u0002\u0090",
    "\u08d3\u0003\u0002\u0002\u0002\u0092\u08d9\u0003\u0002\u0002\u0002\u0094",
    "\u08df\u0003\u0002\u0002\u0002\u0096\u08e5\u0003\u0002\u0002\u0002\u0098",
    "\u08ec\u0003\u0002\u0002\u0002\u009a\u08f4\u0003\u0002\u0002\u0002\u009c",
    "\u08f6\u0003\u0002\u0002\u0002\u009e\u08fc\u0003\u0002\u0002\u0002\u00a0",
    "\u0902\u0003\u0002\u0002\u0002\u00a2\u0909\u0003\u0002\u0002\u0002\u00a4",
    "\u091b\u0003\u0002\u0002\u0002\u00a6\u091d\u0003\u0002\u0002\u0002\u00a8",
    "\u0921\u0003\u0002\u0002\u0002\u00aa\u0926\u0003\u0002\u0002\u0002\u00ac",
    "\u0936\u0003\u0002\u0002\u0002\u00ae\u093b\u0003\u0002\u0002\u0002\u00b0",
    "\u095c\u0003\u0002\u0002\u0002\u00b2\u097b\u0003\u0002\u0002\u0002\u00b4",
    "\u098c\u0003\u0002\u0002\u0002\u00b6\u098e\u0003\u0002\u0002\u0002\u00b8",
    "\u09a2\u0003\u0002\u0002\u0002\u00ba\u09a8\u0003\u0002\u0002\u0002\u00bc",
    "\u09ae\u0003\u0002\u0002\u0002\u00be\u09b4\u0003\u0002\u0002\u0002\u00c0",
    "\u09bb\u0003\u0002\u0002\u0002\u00c2\u09c4\u0003\u0002\u0002\u0002\u00c4",
    "\u09d5\u0003\u0002\u0002\u0002\u00c6\u09d7\u0003\u0002\u0002\u0002\u00c8",
    "\u09de\u0003\u0002\u0002\u0002\u00ca\u09e8\u0003\u0002\u0002\u0002\u00cc",
    "\u09f6\u0003\u0002\u0002\u0002\u00ce\u09fc\u0003\u0002\u0002\u0002\u00d0",
    "\u0a04\u0003\u0002\u0002\u0002\u00d2\u0a0a\u0003\u0002\u0002\u0002\u00d4",
    "\u0a12\u0003\u0002\u0002\u0002\u00d6\u0a18\u0003\u0002\u0002\u0002\u00d8",
    "\u0a22\u0003\u0002\u0002\u0002\u00da\u0a26\u0003\u0002\u0002\u0002\u00dc",
    "\u0a2c\u0003\u0002\u0002\u0002\u00de\u0a31\u0003\u0002\u0002\u0002\u00e0",
    "\u0a3c\u0003\u0002\u0002\u0002\u00e2\u0a67\u0003\u0002\u0002\u0002\u00e4",
    "\u0a6d\u0003\u0002\u0002\u0002\u00e6\u0a6f\u0003\u0002\u0002\u0002\u00e8",
    "\u0a76\u0003\u0002\u0002\u0002\u00ea\u0a94\u0003\u0002\u0002\u0002\u00ec",
    "\u0a96\u0003\u0002\u0002\u0002\u00ee\u0ab5\u0003\u0002\u0002\u0002\u00f0",
    "\u0abc\u0003\u0002\u0002\u0002\u00f2\u0ac0\u0003\u0002\u0002\u0002\u00f4",
    "\u0ac8\u0003\u0002\u0002\u0002\u00f6\u0ad2\u0003\u0002\u0002\u0002\u00f8",
    "\u0ad4\u0003\u0002\u0002\u0002\u00fa\u0ae6\u0003\u0002\u0002\u0002\u00fc",
    "\u0af2\u0003\u0002\u0002\u0002\u00fe\u0af7\u0003\u0002\u0002\u0002\u0100",
    "\u0afd\u0003\u0002\u0002\u0002\u0102\u0b1e\u0003\u0002\u0002\u0002\u0104",
    "\u0b20\u0003\u0002\u0002\u0002\u0106\u0b28\u0003\u0002\u0002\u0002\u0108",
    "\u0b31\u0003\u0002\u0002\u0002\u010a\u0b39\u0003\u0002\u0002\u0002\u010c",
    "\u0b45\u0003\u0002\u0002\u0002\u010e\u0b59\u0003\u0002\u0002\u0002\u0110",
    "\u0b62\u0003\u0002\u0002\u0002\u0112\u0b86\u0003\u0002\u0002\u0002\u0114",
    "\u0b93\u0003\u0002\u0002\u0002\u0116\u0ba3\u0003\u0002\u0002\u0002\u0118",
    "\u0baa\u0003\u0002\u0002\u0002\u011a\u0bc5\u0003\u0002\u0002\u0002\u011c",
    "\u0bc7\u0003\u0002\u0002\u0002\u011e\u0bc9\u0003\u0002\u0002\u0002\u0120",
    "\u0bcc\u0003\u0002\u0002\u0002\u0122\u0bcf\u0003\u0002\u0002\u0002\u0124",
    "\u0bd6\u0003\u0002\u0002\u0002\u0126\u0bd8\u0003\u0002\u0002\u0002\u0128",
    "\u0bf6\u0003\u0002\u0002\u0002\u012a\u0c02\u0003\u0002\u0002\u0002\u012c",
    "\u0c05\u0003\u0002\u0002\u0002\u012e\u0c0e\u0003\u0002\u0002\u0002\u0130",
    "\u0c12\u0003\u0002\u0002\u0002\u0132\u0c17\u0003\u0002\u0002\u0002\u0134",
    "\u0c24\u0003\u0002\u0002\u0002\u0136\u0c29\u0003\u0002\u0002\u0002\u0138",
    "\u0c2d\u0003\u0002\u0002\u0002\u013a\u0c3d\u0003\u0002\u0002\u0002\u013c",
    "\u0c3f\u0003\u0002\u0002\u0002\u013e\u0c51\u0003\u0002\u0002\u0002\u0140",
    "\u0c53\u0003\u0002\u0002\u0002\u0142\u0c5c\u0003\u0002\u0002\u0002\u0144",
    "\u0c68\u0003\u0002\u0002\u0002\u0146\u0c6f\u0003\u0002\u0002\u0002\u0148",
    "\u0c7a\u0003\u0002\u0002\u0002\u014a\u0c7c\u0003\u0002\u0002\u0002\u014c",
    "\u0c80\u0003\u0002\u0002\u0002\u014e\u0c82\u0003\u0002\u0002\u0002\u0150",
    "\u0c87\u0003\u0002\u0002\u0002\u0152\u0c97\u0003\u0002\u0002\u0002\u0154",
    "\u0ca8\u0003\u0002\u0002\u0002\u0156\u0cad\u0003\u0002\u0002\u0002\u0158",
    "\u0cb2\u0003\u0002\u0002\u0002\u015a\u0cb6\u0003\u0002\u0002\u0002\u015c",
    "\u0cc4\u0003\u0002\u0002\u0002\u015e\u0cc7\u0003\u0002\u0002\u0002\u0160",
    "\u0ccd\u0003\u0002\u0002\u0002\u0162\u0cda\u0003\u0002\u0002\u0002\u0164",
    "\u0ce2\u0003\u0002\u0002\u0002\u0166\u0cfc\u0003\u0002\u0002\u0002\u0168",
    "\u0d09\u0003\u0002\u0002\u0002\u016a\u0d10\u0003\u0002\u0002\u0002\u016c",
    "\u0d12\u0003\u0002\u0002\u0002\u016e\u0d1e\u0003\u0002\u0002\u0002\u0170",
    "\u0d20\u0003\u0002\u0002\u0002\u0172\u0d2a\u0003\u0002\u0002\u0002\u0174",
    "\u0d42\u0003\u0002\u0002\u0002\u0176\u0d44\u0003\u0002\u0002\u0002\u0178",
    "\u0d4b\u0003\u0002\u0002\u0002\u017a\u0d55\u0003\u0002\u0002\u0002\u017c",
    "\u0d78\u0003\u0002\u0002\u0002\u017e\u0d82\u0003\u0002\u0002\u0002\u0180",
    "\u0d84\u0003\u0002\u0002\u0002\u0182\u0d88\u0003\u0002\u0002\u0002\u0184",
    "\u0d90\u0003\u0002\u0002\u0002\u0186\u0d92\u0003\u0002\u0002\u0002\u0188",
    "\u0d97\u0003\u0002\u0002\u0002\u018a\u0d9b\u0003\u0002\u0002\u0002\u018c",
    "\u0db7\u0003\u0002\u0002\u0002\u018e\u0db9\u0003\u0002\u0002\u0002\u0190",
    "\u0dbb\u0003\u0002\u0002\u0002\u0192\u0dc3\u0003\u0002\u0002\u0002\u0194",
    "\u0dc5\u0003\u0002\u0002\u0002\u0196\u0dcd\u0003\u0002\u0002\u0002\u0198",
    "\u0dd7\u0003\u0002\u0002\u0002\u019a\u0ddb\u0003\u0002\u0002\u0002\u019c",
    "\u0df4\u0003\u0002\u0002\u0002\u019e\u0e0f\u0003\u0002\u0002\u0002\u01a0",
    "\u0e11\u0003\u0002\u0002\u0002\u01a2\u0e1b\u0003\u0002\u0002\u0002\u01a4",
    "\u0e3a\u0003\u0002\u0002\u0002\u01a6\u0e52\u0003\u0002\u0002\u0002\u01a8",
    "\u0e54\u0003\u0002\u0002\u0002\u01aa\u0e62\u0003\u0002\u0002\u0002\u01ac",
    "\u0e64\u0003\u0002\u0002\u0002\u01ae\u0e87\u0003\u0002\u0002\u0002\u01b0",
    "\u0e89\u0003\u0002\u0002\u0002\u01b2\u0eb3\u0003\u0002\u0002\u0002\u01b4",
    "\u0ec3\u0003\u0002\u0002\u0002\u01b6\u0ec5\u0003\u0002\u0002\u0002\u01b8",
    "\u0ecd\u0003\u0002\u0002\u0002\u01ba\u0ed6\u0003\u0002\u0002\u0002\u01bc",
    "\u0edd\u0003\u0002\u0002\u0002\u01be\u0f3a\u0003\u0002\u0002\u0002\u01c0",
    "\u0f3e\u0003\u0002\u0002\u0002\u01c2\u0f42\u0003\u0002\u0002\u0002\u01c4",
    "\u0f50\u0003\u0002\u0002\u0002\u01c6\u0f52\u0003\u0002\u0002\u0002\u01c8",
    "\u0f5f\u0003\u0002\u0002\u0002\u01ca\u0f9f\u0003\u0002\u0002\u0002\u01cc",
    "\u0fa1\u0003\u0002\u0002\u0002\u01ce\u0fa9\u0003\u0002\u0002\u0002\u01d0",
    "\u0fb1\u0003\u0002\u0002\u0002\u01d2\u0fb9\u0003\u0002\u0002\u0002\u01d4",
    "\u0fbb\u0003\u0002\u0002\u0002\u01d6\u0fd8\u0003\u0002\u0002\u0002\u01d8",
    "\u0fe1\u0003\u0002\u0002\u0002\u01da\u1000\u0003\u0002\u0002\u0002\u01dc",
    "\u1002\u0003\u0002\u0002\u0002\u01de\u100a\u0003\u0002\u0002\u0002\u01e0",
    "\u100c\u0003\u0002\u0002\u0002\u01e2\u101a\u0003\u0002\u0002\u0002\u01e4",
    "\u101c\u0003\u0002\u0002\u0002\u01e6\u1022\u0003\u0002\u0002\u0002\u01e8",
    "\u102a\u0003\u0002\u0002\u0002\u01ea\u104f\u0003\u0002\u0002\u0002\u01ec",
    "\u1051\u0003\u0002\u0002\u0002\u01ee\u1060\u0003\u0002\u0002\u0002\u01f0",
    "\u1062\u0003\u0002\u0002\u0002\u01f2\u1099\u0003\u0002\u0002\u0002\u01f4",
    "\u109b\u0003\u0002\u0002\u0002\u01f6\u109e\u0003\u0002\u0002\u0002\u01f8",
    "\u10b7\u0003\u0002\u0002\u0002\u01fa\u10c0\u0003\u0002\u0002\u0002\u01fc",
    "\u10c2\u0003\u0002\u0002\u0002\u01fe\u10c7\u0003\u0002\u0002\u0002\u0200",
    "\u10f5\u0003\u0002\u0002\u0002\u0202\u10f7\u0003\u0002\u0002\u0002\u0204",
    "\u10ff\u0003\u0002\u0002\u0002\u0206\u1130\u0003\u0002\u0002\u0002\u0208",
    "\u113d\u0003\u0002\u0002\u0002\u020a\u113f\u0003\u0002\u0002\u0002\u020c",
    "\u1142\u0003\u0002\u0002\u0002\u020e\u114d\u0003\u0002\u0002\u0002\u0210",
    "\u1152\u0003\u0002\u0002\u0002\u0212\u1155\u0003\u0002\u0002\u0002\u0214",
    "\u1164\u0003\u0002\u0002\u0002\u0216\u1196\u0003\u0002\u0002\u0002\u0218",
    "\u1198\u0003\u0002\u0002\u0002\u021a\u119a\u0003\u0002\u0002\u0002\u021c",
    "\u11cb\u0003\u0002\u0002\u0002\u021e\u11dd\u0003\u0002\u0002\u0002\u0220",
    "\u11df\u0003\u0002\u0002\u0002\u0222\u11ef\u0003\u0002\u0002\u0002\u0224",
    "\u11fb\u0003\u0002\u0002\u0002\u0226\u1214\u0003\u0002\u0002\u0002\u0228",
    "\u1216\u0003\u0002\u0002\u0002\u022a\u121e\u0003\u0002\u0002\u0002\u022c",
    "\u124f\u0003\u0002\u0002\u0002\u022e\u125e\u0003\u0002\u0002\u0002\u0230",
    "\u1263\u0003\u0002\u0002\u0002\u0232\u1265\u0003\u0002\u0002\u0002\u0234",
    "\u127d\u0003\u0002\u0002\u0002\u0236\u127f\u0003\u0002\u0002\u0002\u0238",
    "\u12ba\u0003\u0002\u0002\u0002\u023a\u12c5\u0003\u0002\u0002\u0002\u023c",
    "\u12c7\u0003\u0002\u0002\u0002\u023e\u12ca\u0003\u0002\u0002\u0002\u0240",
    "\u12d7\u0003\u0002\u0002\u0002\u0242\u12f3\u0003\u0002\u0002\u0002\u0244",
    "\u12fb\u0003\u0002\u0002\u0002\u0246\u12fd\u0003\u0002\u0002\u0002\u0248",
    "\u1308\u0003\u0002\u0002\u0002\u024a\u130a\u0003\u0002\u0002\u0002\u024c",
    "\u1312\u0003\u0002\u0002\u0002\u024e\u1314\u0003\u0002\u0002\u0002\u0250",
    "\u13f8\u0003\u0002\u0002\u0002\u0252\u13ff\u0003\u0002\u0002\u0002\u0254",
    "\u1401\u0003\u0002\u0002\u0002\u0256\u1403\u0003\u0002\u0002\u0002\u0258",
    "\u140d\u0003\u0002\u0002\u0002\u025a\u1434\u0003\u0002\u0002\u0002\u025c",
    "\u1438\u0003\u0002\u0002\u0002\u025e\u143a\u0003\u0002\u0002\u0002\u0260",
    "\u1442\u0003\u0002\u0002\u0002\u0262\u1446\u0003\u0002\u0002\u0002\u0264",
    "\u144e\u0003\u0002\u0002\u0002\u0266\u1457\u0003\u0002\u0002\u0002\u0268",
    "\u1459\u0003\u0002\u0002\u0002\u026a\u1470\u0003\u0002\u0002\u0002\u026c",
    "\u1472\u0003\u0002\u0002\u0002\u026e\u1474\u0003\u0002\u0002\u0002\u0270",
    "\u1484\u0003\u0002\u0002\u0002\u0272\u1490\u0003\u0002\u0002\u0002\u0274",
    "\u1492\u0003\u0002\u0002\u0002\u0276\u149a\u0003\u0002\u0002\u0002\u0278",
    "\u14a2\u0003\u0002\u0002\u0002\u027a\u14ab\u0003\u0002\u0002\u0002\u027c",
    "\u14ad\u0003\u0002\u0002\u0002\u027e\u14bf\u0003\u0002\u0002\u0002\u0280",
    "\u14cd\u0003\u0002\u0002\u0002\u0282\u14d2\u0003\u0002\u0002\u0002\u0284",
    "\u14d8\u0003\u0002\u0002\u0002\u0286\u14da\u0003\u0002\u0002\u0002\u0288",
    "\u14ea\u0003\u0002\u0002\u0002\u028a\u14f2\u0003\u0002\u0002\u0002\u028c",
    "\u14fc\u0003\u0002\u0002\u0002\u028e\u1509\u0003\u0002\u0002\u0002\u0290",
    "\u150b\u0003\u0002\u0002\u0002\u0292\u1511\u0003\u0002\u0002\u0002\u0294",
    "\u152c\u0003\u0002\u0002\u0002\u0296\u152e\u0003\u0002\u0002\u0002\u0298",
    "\u1531\u0003\u0002\u0002\u0002\u029a\u1534\u0003\u0002\u0002\u0002\u029c",
    "\u1541\u0003\u0002\u0002\u0002\u029e\u1551\u0003\u0002\u0002\u0002\u02a0",
    "\u1568\u0003\u0002\u0002\u0002\u02a2\u156a\u0003\u0002\u0002\u0002\u02a4",
    "\u158f\u0003\u0002\u0002\u0002\u02a6\u1591\u0003\u0002\u0002\u0002\u02a8",
    "\u1619\u0003\u0002\u0002\u0002\u02aa\u1626\u0003\u0002\u0002\u0002\u02ac",
    "\u162f\u0003\u0002\u0002\u0002\u02ae\u16b4\u0003\u0002\u0002\u0002\u02b0",
    "\u16b6\u0003\u0002\u0002\u0002\u02b2\u16e5\u0003\u0002\u0002\u0002\u02b4",
    "\u16e7\u0003\u0002\u0002\u0002\u02b6\u16ec\u0003\u0002\u0002\u0002\u02b8",
    "\u16f5\u0003\u0002\u0002\u0002\u02ba\u1708\u0003\u0002\u0002\u0002\u02bc",
    "\u170b\u0003\u0002\u0002\u0002\u02be\u1714\u0003\u0002\u0002\u0002\u02c0",
    "\u1716\u0003\u0002\u0002\u0002\u02c2\u172d\u0003\u0002\u0002\u0002\u02c4",
    "\u1840\u0003\u0002\u0002\u0002\u02c6\u1861\u0003\u0002\u0002\u0002\u02c8",
    "\u1863\u0003\u0002\u0002\u0002\u02ca\u1869\u0003\u0002\u0002\u0002\u02cc",
    "\u186c\u0003\u0002\u0002\u0002\u02ce\u187b\u0003\u0002\u0002\u0002\u02d0",
    "\u1883\u0003\u0002\u0002\u0002\u02d2\u1885\u0003\u0002\u0002\u0002\u02d4",
    "\u18a2\u0003\u0002\u0002\u0002\u02d6\u18c3\u0003\u0002\u0002\u0002\u02d8",
    "\u18c5\u0003\u0002\u0002\u0002\u02da\u18cd\u0003\u0002\u0002\u0002\u02dc",
    "\u18d7\u0003\u0002\u0002\u0002\u02de\u18dc\u0003\u0002\u0002\u0002\u02e0",
    "\u18de\u0003\u0002\u0002\u0002\u02e2\u18f4\u0003\u0002\u0002\u0002\u02e4",
    "\u18f6\u0003\u0002\u0002\u0002\u02e6\u18f9\u0003\u0002\u0002\u0002\u02e8",
    "\u18fc\u0003\u0002\u0002\u0002\u02ea\u192c\u0003\u0002\u0002\u0002\u02ec",
    "\u192e\u0003\u0002\u0002\u0002\u02ee\u1939\u0003\u0002\u0002\u0002\u02f0",
    "\u193b\u0003\u0002\u0002\u0002\u02f2\u193d\u0003\u0002\u0002\u0002\u02f4",
    "\u1941\u0003\u0002\u0002\u0002\u02f6\u1943\u0003\u0002\u0002\u0002\u02f8",
    "\u1945\u0003\u0002\u0002\u0002\u02fa\u1949\u0003\u0002\u0002\u0002\u02fc",
    "\u194d\u0003\u0002\u0002\u0002\u02fe\u1951\u0003\u0002\u0002\u0002\u0300",
    "\u1959\u0003\u0002\u0002\u0002\u0302\u195d\u0003\u0002\u0002\u0002\u0304",
    "\u1965\u0003\u0002\u0002\u0002\u0306\u1967\u0003\u0002\u0002\u0002\u0308",
    "\u1979\u0003\u0002\u0002\u0002\u030a\u197b\u0003\u0002\u0002\u0002\u030c",
    "\u197e\u0003\u0002\u0002\u0002\u030e\u1983\u0003\u0002\u0002\u0002\u0310",
    "\u198b\u0003\u0002\u0002\u0002\u0312\u1991\u0003\u0002\u0002\u0002\u0314",
    "\u1995\u0003\u0002\u0002\u0002\u0316\u19a6\u0003\u0002\u0002\u0002\u0318",
    "\u19a9\u0003\u0002\u0002\u0002\u031a\u19ae\u0003\u0002\u0002\u0002\u031c",
    "\u19b0\u0003\u0002\u0002\u0002\u031e\u19b3\u0003\u0002\u0002\u0002\u0320",
    "\u19bc\u0003\u0002\u0002\u0002\u0322\u19c4\u0003\u0002\u0002\u0002\u0324",
    "\u19c6\u0003\u0002\u0002\u0002\u0326\u19cb\u0003\u0002\u0002\u0002\u0328",
    "\u19d2\u0003\u0002\u0002\u0002\u032a\u19dc\u0003\u0002\u0002\u0002\u032c",
    "\u19e4\u0003\u0002\u0002\u0002\u032e\u19e6\u0003\u0002\u0002\u0002\u0330",
    "\u19f0\u0003\u0002\u0002\u0002\u0332\u19f8\u0003\u0002\u0002\u0002\u0334",
    "\u19fa\u0003\u0002\u0002\u0002\u0336\u1a00\u0003\u0002\u0002\u0002\u0338",
    "\u1a15\u0003\u0002\u0002\u0002\u033a\u1a17\u0003\u0002\u0002\u0002\u033c",
    "\u1a1d\u0003\u0002\u0002\u0002\u033e\u1a20\u0003\u0002\u0002\u0002\u0340",
    "\u1a23\u0003\u0002\u0002\u0002\u0342\u1a41\u0003\u0002\u0002\u0002\u0344",
    "\u1a45\u0003\u0002\u0002\u0002\u0346\u1a4c\u0003\u0002\u0002\u0002\u0348",
    "\u1a53\u0003\u0002\u0002\u0002\u034a\u1a55\u0003\u0002\u0002\u0002\u034c",
    "\u1a65\u0003\u0002\u0002\u0002\u034e\u1a78\u0003\u0002\u0002\u0002\u0350",
    "\u1a7c\u0003\u0002\u0002\u0002\u0352\u1a7f\u0003\u0002\u0002\u0002\u0354",
    "\u1a82\u0003\u0002\u0002\u0002\u0356\u1a9a\u0003\u0002\u0002\u0002\u0358",
    "\u1a9c\u0003\u0002\u0002\u0002\u035a\u1aa4\u0003\u0002\u0002\u0002\u035c",
    "\u1aa6\u0003\u0002\u0002\u0002\u035e\u1aaa\u0003\u0002\u0002\u0002\u0360",
    "\u1af9\u0003\u0002\u0002\u0002\u0362\u1afb\u0003\u0002\u0002\u0002\u0364",
    "\u1aff\u0003\u0002\u0002\u0002\u0366\u1b59\u0003\u0002\u0002\u0002\u0368",
    "\u1b5b\u0003\u0002\u0002\u0002\u036a\u1b5d\u0003\u0002\u0002\u0002\u036c",
    "\u1b6d\u0003\u0002\u0002\u0002\u036e\u1b6f\u0003\u0002\u0002\u0002\u0370",
    "\u1b8f\u0003\u0002\u0002\u0002\u0372\u1b91\u0003\u0002\u0002\u0002\u0374",
    "\u1b9c\u0003\u0002\u0002\u0002\u0376\u1ba3\u0003\u0002\u0002\u0002\u0378",
    "\u1bb3\u0003\u0002\u0002\u0002\u037a\u1bb9\u0003\u0002\u0002\u0002\u037c",
    "\u1bbb\u0003\u0002\u0002\u0002\u037e\u1bbf\u0003\u0002\u0002\u0002\u0380",
    "\u1bca\u0003\u0002\u0002\u0002\u0382\u1bcc\u0003\u0002\u0002\u0002\u0384",
    "\u1bce\u0003\u0002\u0002\u0002\u0386\u1bd5\u0003\u0002\u0002\u0002\u0388",
    "\u1bd7\u0003\u0002\u0002\u0002\u038a\u1bd9\u0003\u0002\u0002\u0002\u038c",
    "\u1c6f\u0003\u0002\u0002\u0002\u038e\u1c74\u0003\u0002\u0002\u0002\u0390",
    "\u1c7b\u0003\u0002\u0002\u0002\u0392\u1c7d\u0003\u0002\u0002\u0002\u0394",
    "\u1c85\u0003\u0002\u0002\u0002\u0396\u1c97\u0003\u0002\u0002\u0002\u0398",
    "\u1c9f\u0003\u0002\u0002\u0002\u039a\u1ca7\u0003\u0002\u0002\u0002\u039c",
    "\u1ca9\u0003\u0002\u0002\u0002\u039e\u1cad\u0003\u0002\u0002\u0002\u03a0",
    "\u1cb5\u0003\u0002\u0002\u0002\u03a2\u1cbc\u0003\u0002\u0002\u0002\u03a4",
    "\u1cbe\u0003\u0002\u0002\u0002\u03a6\u1cc9\u0003\u0002\u0002\u0002\u03a8",
    "\u1d4e\u0003\u0002\u0002\u0002\u03aa\u1d52\u0003\u0002\u0002\u0002\u03ac",
    "\u1d55\u0003\u0002\u0002\u0002\u03ae\u1d5e\u0003\u0002\u0002\u0002\u03b0",
    "\u1d67\u0003\u0002\u0002\u0002\u03b2\u1d6f\u0003\u0002\u0002\u0002\u03b4",
    "\u1d9d\u0003\u0002\u0002\u0002\u03b6\u1d9f\u0003\u0002\u0002\u0002\u03b8",
    "\u1db4\u0003\u0002\u0002\u0002\u03ba\u1db9\u0003\u0002\u0002\u0002\u03bc",
    "\u1dc4\u0003\u0002\u0002\u0002\u03be\u1df1\u0003\u0002\u0002\u0002\u03c0",
    "\u1e15\u0003\u0002\u0002\u0002\u03c2\u1e17\u0003\u0002\u0002\u0002\u03c4",
    "\u1e1f\u0003\u0002\u0002\u0002\u03c6\u1e2c\u0003\u0002\u0002\u0002\u03c8",
    "\u1e2e\u0003\u0002\u0002\u0002\u03ca\u1e32\u0003\u0002\u0002\u0002\u03cc",
    "\u1e35\u0003\u0002\u0002\u0002\u03ce\u1e3a\u0003\u0002\u0002\u0002\u03d0",
    "\u1e3e\u0003\u0002\u0002\u0002\u03d2\u1e41\u0003\u0002\u0002\u0002\u03d4",
    "\u1e44\u0003\u0002\u0002\u0002\u03d6\u1e48\u0003\u0002\u0002\u0002\u03d8",
    "\u1e4e\u0003\u0002\u0002\u0002\u03da\u1e56\u0003\u0002\u0002\u0002\u03dc",
    "\u1e5e\u0003\u0002\u0002\u0002\u03de\u1e64\u0003\u0002\u0002\u0002\u03e0",
    "\u1e67\u0003\u0002\u0002\u0002\u03e2\u1e79\u0003\u0002\u0002\u0002\u03e4",
    "\u1e7b\u0003\u0002\u0002\u0002\u03e6\u1e81\u0003\u0002\u0002\u0002\u03e8",
    "\u1e85\u0003\u0002\u0002\u0002\u03ea\u1e8d\u0003\u0002\u0002\u0002\u03ec",
    "\u1e95\u0003\u0002\u0002\u0002\u03ee\u1e9d\u0003\u0002\u0002\u0002\u03f0",
    "\u1eba\u0003\u0002\u0002\u0002\u03f2\u1ed9\u0003\u0002\u0002\u0002\u03f4",
    "\u1edd\u0003\u0002\u0002\u0002\u03f6\u1ee1\u0003\u0002\u0002\u0002\u03f8",
    "\u1ee4\u0003\u0002\u0002\u0002\u03fa\u1eef\u0003\u0002\u0002\u0002\u03fc",
    "\u1ef1\u0003\u0002\u0002\u0002\u03fe\u1ef6\u0003\u0002\u0002\u0002\u0400",
    "\u1ef8\u0003\u0002\u0002\u0002\u0402\u1efa\u0003\u0002\u0002\u0002\u0404",
    "\u1efc\u0003\u0002\u0002\u0002\u0406\u1f05\u0003\u0002\u0002\u0002\u0408",
    "\u1f0b\u0003\u0002\u0002\u0002\u040a\u1f0d\u0003\u0002\u0002\u0002\u040c",
    "\u1f0f\u0003\u0002\u0002\u0002\u040e\u1f1a\u0003\u0002\u0002\u0002\u0410",
    "\u1f1e\u0003\u0002\u0002\u0002\u0412\u1f20\u0003\u0002\u0002\u0002\u0414",
    "\u1f22\u0003\u0002\u0002\u0002\u0416\u1f24\u0003\u0002\u0002\u0002\u0418",
    "\u1f2d\u0003\u0002\u0002\u0002\u041a\u1f2f\u0003\u0002\u0002\u0002\u041c",
    "\u1f31\u0003\u0002\u0002\u0002\u041e\u1f33\u0003\u0002\u0002\u0002\u0420",
    "\u1f35\u0003\u0002\u0002\u0002\u0422\u1f37\u0003\u0002\u0002\u0002\u0424",
    "\u1f39\u0003\u0002\u0002\u0002\u0426\u1f3b\u0003\u0002\u0002\u0002\u0428",
    "\u1f3f\u0003\u0002\u0002\u0002\u042a\u1f43\u0003\u0002\u0002\u0002\u042c",
    "\u1f45\u0003\u0002\u0002\u0002\u042e\u1f47\u0003\u0002\u0002\u0002\u0430",
    "\u1f49\u0003\u0002\u0002\u0002\u0432\u1f4b\u0003\u0002\u0002\u0002\u0434",
    "\u1f4d\u0003\u0002\u0002\u0002\u0436\u1f4f\u0003\u0002\u0002\u0002\u0438",
    "\u1f51\u0003\u0002\u0002\u0002\u043a\u1f53\u0003\u0002\u0002\u0002\u043c",
    "\u1f55\u0003\u0002\u0002\u0002\u043e\u1f57\u0003\u0002\u0002\u0002\u0440",
    "\u1f5b\u0003\u0002\u0002\u0002\u0442\u1f5d\u0003\u0002\u0002\u0002\u0444",
    "\u1f60\u0003\u0002\u0002\u0002\u0446\u1f6c\u0003\u0002\u0002\u0002\u0448",
    "\u1f6e\u0003\u0002\u0002\u0002\u044a\u1f76\u0003\u0002\u0002\u0002\u044c",
    "\u1f7e\u0003\u0002\u0002\u0002\u044e\u1f82\u0003\u0002\u0002\u0002\u0450",
    "\u1f84\u0003\u0002\u0002\u0002\u0452\u1f88\u0003\u0002\u0002\u0002\u0454",
    "\u1f8a\u0003\u0002\u0002\u0002\u0456\u1f8c\u0003\u0002\u0002\u0002\u0458",
    "\u1f8e\u0003\u0002\u0002\u0002\u045a\u1f90\u0003\u0002\u0002\u0002\u045c",
    "\u1f92\u0003\u0002\u0002\u0002\u045e\u1f97\u0003\u0002\u0002\u0002\u0460",
    "\u1f9b\u0003\u0002\u0002\u0002\u0462\u1f9d\u0003\u0002\u0002\u0002\u0464",
    "\u1fa5\u0003\u0002\u0002\u0002\u0466\u1fa9\u0003\u0002\u0002\u0002\u0468",
    "\u1fb8\u0003\u0002\u0002\u0002\u046a\u1fba\u0003\u0002\u0002\u0002\u046c",
    "\u1fbd\u0003\u0002\u0002\u0002\u046e\u1fbf\u0003\u0002\u0002\u0002\u0470",
    "\u1fc1\u0003\u0002\u0002\u0002\u0472\u1fc8\u0003\u0002\u0002\u0002\u0474",
    "\u1fd3\u0003\u0002\u0002\u0002\u0476\u1fda\u0003\u0002\u0002\u0002\u0478",
    "\u1fdc\u0003\u0002\u0002\u0002\u047a\u1fea\u0003\u0002\u0002\u0002\u047c",
    "\u1fef\u0003\u0002\u0002\u0002\u047e\u1ff4\u0003\u0002\u0002\u0002\u0480",
    "\u1ffb\u0003\u0002\u0002\u0002\u0482\u2003\u0003\u0002\u0002\u0002\u0484",
    "\u2005\u0003\u0002\u0002\u0002\u0486\u200d\u0003\u0002\u0002\u0002\u0488",
    "\u200f\u0003\u0002\u0002\u0002\u048a\u2011\u0003\u0002\u0002\u0002\u048c",
    "\u2019\u0003\u0002\u0002\u0002\u048e\u201d\u0003\u0002\u0002\u0002\u0490",
    "\u201f\u0003\u0002\u0002\u0002\u0492\u2021\u0003\u0002\u0002\u0002\u0494",
    "\u2029\u0003\u0002\u0002\u0002\u0496\u202d\u0003\u0002\u0002\u0002\u0498",
    "\u2031\u0003\u0002\u0002\u0002\u049a\u2035\u0003\u0002\u0002\u0002\u049c",
    "\u2037\u0003\u0002\u0002\u0002\u049e\u203a\u0003\u0002\u0002\u0002\u04a0",
    "\u203c\u0003\u0002\u0002\u0002\u04a2\u2044\u0003\u0002\u0002\u0002\u04a4",
    "\u2050\u0003\u0002\u0002\u0002\u04a6\u2063\u0003\u0002\u0002\u0002\u04a8",
    "\u2065\u0003\u0002\u0002\u0002\u04aa\u2067\u0003\u0002\u0002\u0002\u04ac",
    "\u207b\u0003\u0002\u0002\u0002\u04ae\u207d\u0003\u0002\u0002\u0002\u04b0",
    "\u207f\u0003\u0002\u0002\u0002\u04b2\u208b\u0003\u0002\u0002\u0002\u04b4",
    "\u2091\u0003\u0002\u0002\u0002\u04b6\u2093\u0003\u0002\u0002\u0002\u04b8",
    "\u209a\u0003\u0002\u0002\u0002\u04ba\u20a5\u0003\u0002\u0002\u0002\u04bc",
    "\u04c9\u0007\u0002\u0002\u0003\u04bd\u04c0\u0005\u0004\u0003\u0002\u04be",
    "\u04c0\u0005\u01a0\u00d1\u0002\u04bf\u04bd\u0003\u0002\u0002\u0002\u04bf",
    "\u04be\u0003\u0002\u0002\u0002\u04c0\u04c6\u0003\u0002\u0002\u0002\u04c1",
    "\u04c3\u0007\u0199\u0002\u0002\u04c2\u04c4\u0007\u0002\u0002\u0003\u04c3",
    "\u04c2\u0003\u0002\u0002\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002\u04c4",
    "\u04c7\u0003\u0002\u0002\u0002\u04c5\u04c7\u0007\u0002\u0002\u0003\u04c6",
    "\u04c1\u0003\u0002\u0002\u0002\u04c6\u04c5\u0003\u0002\u0002\u0002\u04c7",
    "\u04c9\u0003\u0002\u0002\u0002\u04c8\u04bc\u0003\u0002\u0002\u0002\u04c8",
    "\u04bf\u0003\u0002\u0002\u0002\u04c9\u0003\u0003\u0002\u0002\u0002\u04ca",
    "\u04ed\u0005\u0006\u0004\u0002\u04cb\u04ed\u0005P)\u0002\u04cc\u04ed",
    "\u0005\u00b6\\\u0002\u04cd\u04ed\u0005\u00d6l\u0002\u04ce\u04ed\u0005",
    "\u00dan\u0002\u04cf\u04d0\u0006\u0003\u0002\u0002\u04d0\u04ed\u0005",
    "\u00dco\u0002\u04d1\u04ed\u0005\u00dep\u0002\u04d2\u04ed\u0005\u00e0",
    "q\u0002\u04d3\u04ed\u0005\u00e6t\u0002\u04d4\u04ed\u0005\u00e8u\u0002",
    "\u04d5\u04ed\u0005\u00ecw\u0002\u04d6\u04ed\u0005\u0100\u0081\u0002",
    "\u04d7\u04ed\u0005\u010c\u0087\u0002\u04d8\u04ed\u0005\u010e\u0088\u0002",
    "\u04d9\u04ed\u0005\u019a\u00ce\u0002\u04da\u04ed\u0005\u019c\u00cf\u0002",
    "\u04db\u04ed\u0005\u01b2\u00da\u0002\u04dc\u04ed\u0005\u01e2\u00f2\u0002",
    "\u04dd\u04de\u0006\u0003\u0003\u0002\u04de\u04ed\u0005\u01e8\u00f5\u0002",
    "\u04df\u04ed\u0005\u01ee\u00f8\u0002\u04e0\u04ed\u0005\u022c\u0117\u0002",
    "\u04e1\u04ed\u0005\u0234\u011b\u0002\u04e2\u04ed\u0005\u0236\u011c\u0002",
    "\u04e3\u04ed\u0005\u024e\u0128\u0002\u04e4\u04e5\u0006\u0003\u0004\u0002",
    "\u04e5\u04ed\u0005\u027a\u013e\u0002\u04e6\u04ed\u0005\u025a\u012e\u0002",
    "\u04e7\u04ed\u0005\u028e\u0148\u0002\u04e8\u04e9\u0006\u0003\u0005\u0002",
    "\u04e9\u04ed\u0005\u0340\u01a1\u0002\u04ea\u04ed\u0005\u034a\u01a6\u0002",
    "\u04eb\u04ed\u0005\u034c\u01a7\u0002\u04ec\u04ca\u0003\u0002\u0002\u0002",
    "\u04ec\u04cb\u0003\u0002\u0002\u0002\u04ec\u04cc\u0003\u0002\u0002\u0002",
    "\u04ec\u04cd\u0003\u0002\u0002\u0002\u04ec\u04ce\u0003\u0002\u0002\u0002",
    "\u04ec\u04cf\u0003\u0002\u0002\u0002\u04ec\u04d1\u0003\u0002\u0002\u0002",
    "\u04ec\u04d2\u0003\u0002\u0002\u0002\u04ec\u04d3\u0003\u0002\u0002\u0002",
    "\u04ec\u04d4\u0003\u0002\u0002\u0002\u04ec\u04d5\u0003\u0002\u0002\u0002",
    "\u04ec\u04d6\u0003\u0002\u0002\u0002\u04ec\u04d7\u0003\u0002\u0002\u0002",
    "\u04ec\u04d8\u0003\u0002\u0002\u0002\u04ec\u04d9\u0003\u0002\u0002\u0002",
    "\u04ec\u04da\u0003\u0002\u0002\u0002\u04ec\u04db\u0003\u0002\u0002\u0002",
    "\u04ec\u04dc\u0003\u0002\u0002\u0002\u04ec\u04dd\u0003\u0002\u0002\u0002",
    "\u04ec\u04df\u0003\u0002\u0002\u0002\u04ec\u04e0\u0003\u0002\u0002\u0002",
    "\u04ec\u04e1\u0003\u0002\u0002\u0002\u04ec\u04e2\u0003\u0002\u0002\u0002",
    "\u04ec\u04e3\u0003\u0002\u0002\u0002\u04ec\u04e4\u0003\u0002\u0002\u0002",
    "\u04ec\u04e6\u0003\u0002\u0002\u0002\u04ec\u04e7\u0003\u0002\u0002\u0002",
    "\u04ec\u04e8\u0003\u0002\u0002\u0002\u04ec\u04ea\u0003\u0002\u0002\u0002",
    "\u04ec\u04eb\u0003\u0002\u0002\u0002\u04ed\u0005\u0003\u0002\u0002\u0002",
    "\u04ee\u0509\u0007\u01ae\u0002\u0002\u04ef\u050a\u0005\u0014\u000b\u0002",
    "\u04f0\u050a\u0005\b\u0005\u0002\u04f1\u04f2\u0007\u0254\u0002\u0002",
    "\u04f2\u04f4\u0005\u041e\u0210\u0002\u04f3\u04f5\u0005j6\u0002\u04f4",
    "\u04f3\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002\u04f5",
    "\u050a\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007\u0166\u0002\u0002\u04f7",
    "\u04f9\u0005\u0422\u0212\u0002\u04f8\u04fa\u0005j6\u0002\u04f9\u04f8",
    "\u0003\u0002\u0002\u0002\u04f9\u04fa\u0003\u0002\u0002\u0002\u04fa\u050a",
    "\u0003\u0002\u0002\u0002\u04fb\u050a\u0005H%\u0002\u04fc\u050a\u0005",
    "\n\u0006\u0002\u04fd\u050a\u0005:\u001e\u0002\u04fe\u04ff\u0006\u0004",
    "\u0006\u0002\u04ff\u050a\u0005<\u001f\u0002\u0500\u050a\u0005\f\u0007",
    "\u0002\u0501\u050a\u0005\u0012\n\u0002\u0502\u0503\u0006\u0004\u0007",
    "\u0002\u0503\u0504\u0007\u00a7\u0002\u0002\u0504\u0505\u0007\u012a\u0002",
    "\u0002\u0505\u0506\u0005\u0494\u024b\u0002\u0506\u0507\u0007\u00bb\u0002",
    "\u0002\u0507\u0508\u0007\u021b\u0002\u0002\u0508\u050a\u0003\u0002\u0002",
    "\u0002\u0509\u04ef\u0003\u0002\u0002\u0002\u0509\u04f0\u0003\u0002\u0002",
    "\u0002\u0509\u04f1\u0003\u0002\u0002\u0002\u0509\u04f6\u0003\u0002\u0002",
    "\u0002\u0509\u04fb\u0003\u0002\u0002\u0002\u0509\u04fc\u0003\u0002\u0002",
    "\u0002\u0509\u04fd\u0003\u0002\u0002\u0002\u0509\u04fe\u0003\u0002\u0002",
    "\u0002\u0509\u0500\u0003\u0002\u0002\u0002\u0509\u0501\u0003\u0002\u0002",
    "\u0002\u0509\u0502\u0003\u0002\u0002\u0002\u050a\u0007\u0003\u0002\u0002",
    "\u0002\u050b\u050c\u0007\u01d5\u0002\u0002\u050c\u0517\u0005\u041a\u020e",
    "\u0002\u050d\u050f\u0005T+\u0002\u050e\u050d\u0003\u0002\u0002\u0002",
    "\u050f\u0510\u0003\u0002\u0002\u0002\u0510\u050e\u0003\u0002\u0002\u0002",
    "\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0518\u0003\u0002\u0002\u0002",
    "\u0512\u0513\u0006\u0005\b\u0002\u0513\u0514\u00077\u0002\u0002\u0514",
    "\u0515\u0007o\u0002\u0002\u0515\u0516\u0007y\u0002\u0002\u0516\u0518",
    "\u0007\u00e7\u0002\u0002\u0517\u050e\u0003\u0002\u0002\u0002\u0517\u0512",
    "\u0003\u0002\u0002\u0002\u0518\t\u0003\u0002\u0002\u0002\u0519\u051b",
    "\u0005\u03c8\u01e5\u0002\u051a\u0519\u0003\u0002\u0002\u0002\u051a\u051b",
    "\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c\u051d",
    "\u0007\u0087\u0002\u0002\u051d\u0521\u0005\u0436\u021c\u0002\u051e\u051f",
    "\u0007\u0245\u0002\u0002\u051f\u0520\u0007\u0131\u0002\u0002\u0520\u0522",
    "\u0005\u0356\u01ac\u0002\u0521\u051e\u0003\u0002\u0002\u0002\u0521\u0522",
    "\u0003\u0002\u0002\u0002\u0522\u0529\u0003\u0002\u0002\u0002\u0523\u0524",
    "\u0007\u0245\u0002\u0002\u0524\u0526\u0007_\u0002\u0002\u0525\u0527",
    "\u0007\u023f\u0002\u0002\u0526\u0525\u0003\u0002\u0002\u0002\u0526\u0527",
    "\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528\u052a",
    "\u0007\u0104\u0002\u0002\u0529\u0523\u0003\u0002\u0002\u0002\u0529\u052a",
    "\u0003\u0002\u0002\u0002\u052a\u052e\u0003\u0002\u0002\u0002\u052b\u052c",
    "\u0007\u025e\u0002\u0002\u052c\u052d\u0007\u028f\u0002\u0002\u052d\u052f",
    "\u0005\u0460\u0231\u0002\u052e\u052b\u0003\u0002\u0002\u0002\u052e\u052f",
    "\u0003\u0002\u0002\u0002\u052f\u0536\u0003\u0002\u0002\u0002\u0530\u0537",
    "\u0007\u0091\u0002\u0002\u0531\u0534\u0007z\u0002\u0002\u0532\u0533",
    "\u0007\u0245\u0002\u0002\u0533\u0535\u0007/\u0002\u0002\u0534\u0532",
    "\u0003\u0002\u0002\u0002\u0534\u0535\u0003\u0002\u0002\u0002\u0535\u0537",
    "\u0003\u0002\u0002\u0002\u0536\u0530\u0003\u0002\u0002\u0002\u0536\u0531",
    "\u0003\u0002\u0002\u0002\u0536\u0537\u0003\u0002\u0002\u0002\u0537\u053a",
    "\u0003\u0002\u0002\u0002\u0538\u0539\u0007\r\u0002\u0002\u0539\u053b",
    "\u0005\u0480\u0241\u0002\u053a\u0538\u0003\u0002\u0002\u0002\u053a\u053b",
    "\u0003\u0002\u0002\u0002\u053b\u053e\u0003\u0002\u0002\u0002\u053c\u053d",
    "\u0007\u0011\u0002\u0002\u053d\u053f\u0005\u0308\u0185\u0002\u053e\u053c",
    "\u0003\u0002\u0002\u0002\u053e\u053f\u0003\u0002\u0002\u0002\u053f\u000b",
    "\u0003\u0002\u0002\u0002\u0540\u0541\u0007\u00b8\u0002\u0002\u0541\u0542",
    "\u0007\u0202\u0002\u0002\u0542\u0543\u0005\u0432\u021a\u0002\u0543\u0544",
    "\u0007\u01ac\u0002\u0002\u0544\u0545\u0007\u016a\u0002\u0002\u0545\u0547",
    "\u0005\u0480\u0241\u0002\u0546\u0548\u0005\u000e\b\u0002\u0547\u0546",
    "\u0003\u0002\u0002\u0002\u0547\u0548\u0003\u0002\u0002\u0002\u0548\r",
    "\u0003\u0002\u0002\u0002\u0549\u0550\u0005\u0010\t\u0002\u054a\u054c",
    "\u0007\u0198\u0002\u0002\u054b\u054a\u0003\u0002\u0002\u0002\u054b\u054c",
    "\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002\u0002\u0002\u054d\u054f",
    "\u0005\u0010\t\u0002\u054e\u054b\u0003\u0002\u0002\u0002\u054f\u0552",
    "\u0003\u0002\u0002\u0002\u0550\u054e\u0003\u0002\u0002\u0002\u0550\u0551",
    "\u0003\u0002\u0002\u0002\u0551\u000f\u0003\u0002\u0002\u0002\u0552\u0550",
    "\u0003\u0002\u0002\u0002\u0553\u0557\u0005\u008cG\u0002\u0554\u0557",
    "\u0005\u0098M\u0002\u0555\u0557\u0005\u009aN\u0002\u0556\u0553\u0003",
    "\u0002\u0002\u0002\u0556\u0554\u0003\u0002\u0002\u0002\u0556\u0555\u0003",
    "\u0002\u0002\u0002\u0557\u0011\u0003\u0002\u0002\u0002\u0558\u0559\u0007",
    "-\u0002\u0002\u0559\u055a\u0005\u043c\u021f\u0002\u055a\u055b\u0005",
    "|?\u0002\u055b\u0013\u0003\u0002\u0002\u0002\u055c\u055e\u0005\u0400",
    "\u0201\u0002\u055d\u055c\u0003\u0002\u0002\u0002\u055d\u055e\u0003\u0002",
    "\u0002\u0002\u055e\u0561\u0003\u0002\u0002\u0002\u055f\u0560\u0006\u000b",
    "\t\u0002\u0560\u0562\u0007\u020a\u0002\u0002\u0561\u055f\u0003\u0002",
    "\u0002\u0002\u0561\u0562\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002",
    "\u0002\u0002\u0563\u0564\u0007\u0289\u0002\u0002\u0564\u0566\u0005\u0446",
    "\u0224\u0002\u0565\u0567\u0005\u0016\f\u0002\u0566\u0565\u0003\u0002",
    "\u0002\u0002\u0566\u0567\u0003\u0002\u0002\u0002\u0567\u0015\u0003\u0002",
    "\u0002\u0002\u0568\u056b\u0005\u0018\r\u0002\u0569\u056c\u0005\u03b2",
    "\u01da\u0002\u056a\u056c\u00054\u001b\u0002\u056b\u0569\u0003\u0002",
    "\u0002\u0002\u056b\u056a\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002",
    "\u0002\u0002\u056c\u0576\u0003\u0002\u0002\u0002\u056d\u0576\u0005\u03b2",
    "\u01da\u0002\u056e\u0576\u00054\u001b\u0002\u056f\u0570\u0005\u001a",
    "\u000e\u0002\u0570\u0571\u0007\u0198\u0002\u0002\u0571\u0573\u0003\u0002",
    "\u0002\u0002\u0572\u056f\u0003\u0002\u0002\u0002\u0572\u0573\u0003\u0002",
    "\u0002\u0002\u0573\u0574\u0003\u0002\u0002\u0002\u0574\u0576\u0005\u001c",
    "\u000f\u0002\u0575\u0568\u0003\u0002\u0002\u0002\u0575\u056d\u0003\u0002",
    "\u0002\u0002\u0575\u056e\u0003\u0002\u0002\u0002\u0575\u0572\u0003\u0002",
    "\u0002\u0002\u0576\u0017\u0003\u0002\u0002\u0002\u0577\u057f\u0005\u001a",
    "\u000e\u0002\u0578\u0579\u0005\u001a\u000e\u0002\u0579\u057a\u0007\u0198",
    "\u0002\u0002\u057a\u057c\u0003\u0002\u0002\u0002\u057b\u0578\u0003\u0002",
    "\u0002\u0002\u057b\u057c\u0003\u0002\u0002\u0002\u057c\u057d\u0003\u0002",
    "\u0002\u0002\u057d\u057f\u0005 \u0011\u0002\u057e\u0577\u0003\u0002",
    "\u0002\u0002\u057e\u057b\u0003\u0002\u0002\u0002\u057f\u0019\u0003\u0002",
    "\u0002\u0002\u0580\u0585\u0005\"\u0012\u0002\u0581\u0582\u0007\u0198",
    "\u0002\u0002\u0582\u0584\u0005\"\u0012\u0002\u0583\u0581\u0003\u0002",
    "\u0002\u0002\u0584\u0587\u0003\u0002\u0002\u0002\u0585\u0583\u0003\u0002",
    "\u0002\u0002\u0585\u0586\u0003\u0002\u0002\u0002\u0586\u001b\u0003\u0002",
    "\u0002\u0002\u0587\u0585\u0003\u0002\u0002\u0002\u0588\u0589\u0007{",
    "\u0002\u0002\u0589\u0590\u0007\u0158\u0002\u0002\u058a\u058b\u0007\u00a4",
    "\u0002\u0002\u058b\u0590\u0007\u0158\u0002\u0002\u058c\u0590\u0005\u001e",
    "\u0010\u0002\u058d\u058e\u0006\u000f\n\u0002\u058e\u0590\t\u0002\u0002",
    "\u0002\u058f\u0588\u0003\u0002\u0002\u0002\u058f\u058a\u0003\u0002\u0002",
    "\u0002\u058f\u058c\u0003\u0002\u0002\u0002\u058f\u058d\u0003\u0002\u0002",
    "\u0002\u0590\u001d\u0003\u0002\u0002\u0002\u0591\u0592\u0007\u01ac\u0002",
    "\u0002\u0592\u0594\u0007\"\u0002\u0002\u0593\u0595\u0005\u0402\u0202",
    "\u0002\u0594\u0593\u0003\u0002\u0002\u0002\u0594\u0595\u0003\u0002\u0002",
    "\u0002\u0595\u0599\u0003\u0002\u0002\u0002\u0596\u059a\u0005\u03ba\u01de",
    "\u0002\u0597\u0598\u0007\u00fc\u0002\u0002\u0598\u059a\u0005\u046e\u0238",
    "\u0002\u0599\u0596\u0003\u0002\u0002\u0002\u0599\u0597\u0003\u0002\u0002",
    "\u0002\u059a\u05f3\u0003\u0002\u0002\u0002\u059b\u059c\u0007\u01e9\u0002",
    "\u0002\u059c\u059d\u0007\"\u0002\u0002\u059d\u05f3\u0005\u0462\u0232",
    "\u0002\u059e\u059f\u0007\u0110\u0002\u0002\u059f\u05a1\u0007\"\u0002",
    "\u0002\u05a0\u05a2\u0005\u0402\u0202\u0002\u05a1\u05a0\u0003\u0002\u0002",
    "\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a3\u0003\u0002\u0002",
    "\u0002\u05a3\u05f3\u00056\u001c\u0002\u05a4\u05a5\u0007\u0248\u0002",
    "\u0002\u05a5\u05a7\u0007\"\u0002\u0002\u05a6\u05a8\u0005\u0402\u0202",
    "\u0002\u05a7\u05a6\u0003\u0002\u0002\u0002\u05a7\u05a8\u0003\u0002\u0002",
    "\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9\u05ab\u00056\u001c",
    "\u0002\u05aa\u05ac\u0005\u0402\u0202\u0002\u05ab\u05aa\u0003\u0002\u0002",
    "\u0002\u05ab\u05ac\u0003\u0002\u0002\u0002\u05ac\u05f3\u0003\u0002\u0002",
    "\u0002\u05ad\u05ae\u0007A\u0002\u0002\u05ae\u05b0\u0007\"\u0002\u0002",
    "\u05af\u05b1\u0005\u0402\u0202\u0002\u05b0\u05af\u0003\u0002\u0002\u0002",
    "\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b2\u0003\u0002\u0002\u0002",
    "\u05b2\u05f3\u00056\u001c\u0002\u05b3\u05b4\u0007\u01c5\u0002\u0002",
    "\u05b4\u05b5\u0007\"\u0002\u0002\u05b5\u05b9\u00056\u001c\u0002\u05b6",
    "\u05b8\u0005\u0230\u0119\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b8",
    "\u05bb\u0003\u0002\u0002\u0002\u05b9\u05b7\u0003\u0002\u0002\u0002\u05b9",
    "\u05ba\u0003\u0002\u0002\u0002\u05ba\u05f3\u0003\u0002\u0002\u0002\u05bb",
    "\u05b9\u0003\u0002\u0002\u0002\u05bc\u05bd\u0007\'\u0002\u0002\u05bd",
    "\u05bf\u0007\"\u0002\u0002\u05be\u05c0\u0005\u0402\u0202\u0002\u05bf",
    "\u05be\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003\u0002\u0002\u0002\u05c0",
    "\u05c1\u0003\u0002\u0002\u0002\u05c1\u05c5\u00056\u001c\u0002\u05c2",
    "\u05c4\u0005\u0232\u011a\u0002\u05c3\u05c2\u0003\u0002\u0002\u0002\u05c4",
    "\u05c7\u0003\u0002\u0002\u0002\u05c5\u05c3\u0003\u0002\u0002\u0002\u05c5",
    "\u05c6\u0003\u0002\u0002\u0002\u05c6\u05f3\u0003\u0002\u0002\u0002\u05c7",
    "\u05c5\u0003\u0002\u0002\u0002\u05c8\u05c9\u0007W\u0002\u0002\u05c9",
    "\u05cb\u0007\"\u0002\u0002\u05ca\u05cc\u0005\u0402\u0202\u0002\u05cb",
    "\u05ca\u0003\u0002\u0002\u0002\u05cb\u05cc\u0003\u0002\u0002\u0002\u05cc",
    "\u05cd\u0003\u0002\u0002\u0002\u05cd\u05f3\u0005\u046e\u0238\u0002\u05ce",
    "\u05cf\u00074\u0002\u0002\u05cf\u05d0\u0007\"\u0002\u0002\u05d0\u05f3",
    "\u00056\u001c\u0002\u05d1\u05f3\u00058\u001d\u0002\u05d2\u05d3\u0007",
    "\u011b\u0002\u0002\u05d3\u05d5\u0007\"\u0002\u0002\u05d4\u05d6\u0005",
    "\u0402\u0202\u0002\u05d5\u05d4\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003",
    "\u0002\u0002\u0002\u05d6\u05db\u0003\u0002\u0002\u0002\u05d7\u05d8\u0005",
    "\u0462\u0232\u0002\u05d8\u05d9\u0007\u0212\u0002\u0002\u05d9\u05da\u0005",
    "\u03ba\u01de\u0002\u05da\u05dc\u0003\u0002\u0002\u0002\u05db\u05d7\u0003",
    "\u0002\u0002\u0002\u05db\u05dc\u0003\u0002\u0002\u0002\u05dc\u05f3\u0003",
    "\u0002\u0002\u0002\u05dd\u05de\u0007\u01f1\u0002\u0002\u05de\u05df\u0007",
    "\"\u0002\u0002\u05df\u05e0\u0005\u0460\u0231\u0002\u05e0\u05e1\u0007",
    "\u02ac\u0002\u0002\u05e1\u05e2\u0007\u0289\u0002\u0002\u05e2\u05e4\u0005",
    "\u0446\u0224\u0002\u05e3\u05e5\u00052\u001a\u0002\u05e4\u05e3\u0003",
    "\u0002\u0002\u0002\u05e4\u05e5\u0003\u0002\u0002\u0002\u05e5\u05f3\u0003",
    "\u0002\u0002\u0002\u05e6\u05e7\u0006\u0010\u000b\u0002\u05e7\u05e8\u0007",
    "{\u0002\u0002\u05e8\u05e9\u0007\"\u0002\u0002\u05e9\u05ea\u00056\u001c",
    "\u0002\u05ea\u05eb\u0007\u0158\u0002\u0002\u05eb\u05f3\u0003\u0002\u0002",
    "\u0002\u05ec\u05ed\u0006\u0010\f\u0002\u05ed\u05ee\u0007\u00a4\u0002",
    "\u0002\u05ee\u05ef\u0007\"\u0002\u0002\u05ef\u05f0\u00056\u001c\u0002",
    "\u05f0\u05f1\u0007\u0158\u0002\u0002\u05f1\u05f3\u0003\u0002\u0002\u0002",
    "\u05f2\u0591\u0003\u0002\u0002\u0002\u05f2\u059b\u0003\u0002\u0002\u0002",
    "\u05f2\u059e\u0003\u0002\u0002\u0002\u05f2\u05a4\u0003\u0002\u0002\u0002",
    "\u05f2\u05ad\u0003\u0002\u0002\u0002\u05f2\u05b3\u0003\u0002\u0002\u0002",
    "\u05f2\u05bc\u0003\u0002\u0002\u0002\u05f2\u05c8\u0003\u0002\u0002\u0002",
    "\u05f2\u05ce\u0003\u0002\u0002\u0002\u05f2\u05d1\u0003\u0002\u0002\u0002",
    "\u05f2\u05d2\u0003\u0002\u0002\u0002\u05f2\u05dd\u0003\u0002\u0002\u0002",
    "\u05f2\u05e6\u0003\u0002\u0002\u0002\u05f2\u05ec\u0003\u0002\u0002\u0002",
    "\u05f3\u001f\u0003\u0002\u0002\u0002\u05f4\u05f7\u0005$\u0013\u0002",
    "\u05f5\u05f7\u0005\u03a6\u01d4\u0002\u05f6\u05f4\u0003\u0002\u0002\u0002",
    "\u05f6\u05f5\u0003\u0002\u0002\u0002\u05f7\u0600\u0003\u0002\u0002\u0002",
    "\u05f8\u05fc\u0007\u0198\u0002\u0002\u05f9\u05fd\u0005$\u0013\u0002",
    "\u05fa\u05fd\u0005\"\u0012\u0002\u05fb\u05fd\u0005\u03a6\u01d4\u0002",
    "\u05fc\u05f9\u0003\u0002\u0002\u0002\u05fc\u05fa\u0003\u0002\u0002\u0002",
    "\u05fc\u05fb\u0003\u0002\u0002\u0002\u05fd\u05ff\u0003\u0002\u0002\u0002",
    "\u05fe\u05f8\u0003\u0002\u0002\u0002\u05ff\u0602\u0003\u0002\u0002\u0002",
    "\u0600\u05fe\u0003\u0002\u0002\u0002\u0600\u0601\u0003\u0002\u0002\u0002",
    "\u0601!\u0003\u0002\u0002\u0002\u0602\u0600\u0003\u0002\u0002\u0002",
    "\u0603\u0607\u0005,\u0017\u0002\u0604\u0607\u0005.\u0018\u0002\u0605",
    "\u0607\u00052\u001a\u0002\u0606\u0603\u0003\u0002\u0002\u0002\u0606",
    "\u0604\u0003\u0002\u0002\u0002\u0606\u0605\u0003\u0002\u0002\u0002\u0607",
    "#\u0003\u0002\u0002\u0002\u0608\u060a\u0007\u01ac\u0002\u0002\u0609",
    "\u060b\u0007\u01c7\u0002\u0002\u060a\u0609\u0003\u0002\u0002\u0002\u060a",
    "\u060b\u0003\u0002\u0002\u0002\u060b\u0618\u0003\u0002\u0002\u0002\u060c",
    "\u060d\u0005\u0460\u0231\u0002\u060d\u060f\u0005\u0364\u01b3\u0002\u060e",
    "\u0610\u0005\u035a\u01ae\u0002\u060f\u060e\u0003\u0002\u0002\u0002\u060f",
    "\u0610\u0003\u0002\u0002\u0002\u0610\u0612\u0003\u0002\u0002\u0002\u0611",
    "\u0613\u0005&\u0014\u0002\u0612\u0611\u0003\u0002\u0002\u0002\u0612",
    "\u0613\u0003\u0002\u0002\u0002\u0613\u0619\u0003\u0002\u0002\u0002\u0614",
    "\u0615\u0007\u019b\u0002\u0002\u0615\u0616\u0005X-\u0002\u0616\u0617",
    "\u0007\u019c\u0002\u0002\u0617\u0619\u0003\u0002\u0002\u0002\u0618\u060c",
    "\u0003\u0002\u0002\u0002\u0618\u0614\u0003\u0002\u0002\u0002\u0619\u068e",
    "\u0003\u0002\u0002\u0002\u061a\u061b\u0007\u01ac\u0002\u0002\u061b\u068e",
    "\u0005\u0360\u01b1\u0002\u061c\u061e\u0007\u01c3\u0002\u0002\u061d\u061f",
    "\u0007\u01c7\u0002\u0002\u061e\u061d\u0003\u0002\u0002\u0002\u061e\u061f",
    "\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002\u0620\u0621",
    "\u0005\u040a\u0206\u0002\u0621\u0622\u0005\u0460\u0231\u0002\u0622\u0624",
    "\u0005\u0364\u01b3\u0002\u0623\u0625\u0005&\u0014\u0002\u0624\u0623",
    "\u0003\u0002\u0002\u0002\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u068e",
    "\u0003\u0002\u0002\u0002\u0626\u0628\u0007\u00df\u0002\u0002\u0627\u0629",
    "\u0007\u01c7\u0002\u0002\u0628\u0627\u0003\u0002\u0002\u0002\u0628\u0629",
    "\u0003\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u062b",
    "\u0005\u040a\u0206\u0002\u062b\u062d\u0005\u0364\u01b3\u0002\u062c\u062e",
    "\u0005&\u0014\u0002\u062d\u062c\u0003\u0002\u0002\u0002\u062d\u062e",
    "\u0003\u0002\u0002\u0002\u062e\u068e\u0003\u0002\u0002\u0002\u062f\u0646",
    "\u0007\u01e9\u0002\u0002\u0630\u0632\u0007\u01c7\u0002\u0002\u0631\u0630",
    "\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632\u0633",
    "\u0003\u0002\u0002\u0002\u0633\u0635\u0005\u040a\u0206\u0002\u0634\u0636",
    "\u0005(\u0015\u0002\u0635\u0634\u0003\u0002\u0002\u0002\u0635\u0636",
    "\u0003\u0002\u0002\u0002\u0636\u0647\u0003\u0002\u0002\u0002\u0637\u0638",
    "\u0007\u01fb\u0002\u0002\u0638\u063f\u0007\u021b\u0002\u0002\u0639\u063a",
    "\u0006\u0013\r\u0002\u063a\u0640\u0005\u040a\u0206\u0002\u063b\u063d",
    "\u0006\u0013\u000e\u0002\u063c\u063e\u0005\u040a\u0206\u0002\u063d\u063c",
    "\u0003\u0002\u0002\u0002\u063d\u063e\u0003\u0002\u0002\u0002\u063e\u0640",
    "\u0003\u0002\u0002\u0002\u063f\u0639\u0003\u0002\u0002\u0002\u063f\u063b",
    "\u0003\u0002\u0002\u0002\u0640\u0647\u0003\u0002\u0002\u0002\u0641\u0642",
    "\u0007\u0253\u0002\u0002\u0642\u0647\u0007\u021b\u0002\u0002\u0643\u0644",
    "\u0005\u0190\u00c9\u0002\u0644\u0645\u0005\u0414\u020b\u0002\u0645\u0647",
    "\u0003\u0002\u0002\u0002\u0646\u0631\u0003\u0002\u0002\u0002\u0646\u0637",
    "\u0003\u0002\u0002\u0002\u0646\u0641\u0003\u0002\u0002\u0002\u0646\u0643",
    "\u0003\u0002\u0002\u0002\u0647\u068e\u0003\u0002\u0002\u0002\u0648\u0649",
    "\u0007z\u0002\u0002\u0649\u068e\u0007\u021a\u0002\u0002\u064a\u064b",
    "\u0007\u0091\u0002\u0002\u064b\u068e\u0007\u021a\u0002\u0002\u064c\u064e",
    "\u0007\u01ae\u0002\u0002\u064d\u064f\u0007\u01c7\u0002\u0002\u064e\u064d",
    "\u0003\u0002\u0002\u0002\u064e\u064f\u0003\u0002\u0002\u0002\u064f\u0650",
    "\u0003\u0002\u0002\u0002\u0650\u065a\u0005\u040a\u0206\u0002\u0651\u0652",
    "\u0007\u026d\u0002\u0002\u0652\u0656\u0007\u01e0\u0002\u0002\u0653\u0654",
    "\u0006\u0013\u000f\u0002\u0654\u0657\u0005\u02fa\u017e\u0002\u0655\u0657",
    "\u0005\u0476\u023c\u0002\u0656\u0653\u0003\u0002\u0002\u0002\u0656\u0655",
    "\u0003\u0002\u0002\u0002\u0657\u065b\u0003\u0002\u0002\u0002\u0658\u0659",
    "\u0007\u01e9\u0002\u0002\u0659\u065b\u0007\u01e0\u0002\u0002\u065a\u0651",
    "\u0003\u0002\u0002\u0002\u065a\u0658\u0003\u0002\u0002\u0002\u065b\u068e",
    "\u0003\u0002\u0002\u0002\u065c\u065d\u0006\u0013\u0010\u0002\u065d\u065e",
    "\u0007\u01ae\u0002\u0002\u065e\u065f\u0007\u020b\u0002\u0002\u065f\u0660",
    "\u0005\u0414\u020b\u0002\u0660\u0661\u0005\u0382\u01c2\u0002\u0661\u068e",
    "\u0003\u0002\u0002\u0002\u0662\u0663\u0006\u0013\u0011\u0002\u0663\u0664",
    "\u0007\u01ae\u0002\u0002\u0664\u0665\u0007\u01c5\u0002\u0002\u0665\u0666",
    "\u0005\u0460\u0231\u0002\u0666\u0667\u0005\u035e\u01b0\u0002\u0667\u068e",
    "\u0003\u0002\u0002\u0002\u0668\u0669\u0006\u0013\u0012\u0002\u0669\u066a",
    "\u0007\u025e\u0002\u0002\u066a\u066b\u0007\u01c7\u0002\u0002\u066b\u066c",
    "\u0005\u040a\u0206\u0002\u066c\u066d\u0007\u028f\u0002\u0002\u066d\u066e",
    "\u0005\u0460\u0231\u0002\u066e\u068e\u0003\u0002\u0002\u0002\u066f\u0671",
    "\u0007\u025e\u0002\u0002\u0670\u0672\t\u0003\u0002\u0002\u0671\u0670",
    "\u0003\u0002\u0002\u0002\u0671\u0672\u0003\u0002\u0002\u0002\u0672\u0673",
    "\u0003\u0002\u0002\u0002\u0673\u068e\u0005\u0440\u0221\u0002\u0674\u0675",
    "\u0006\u0013\u0013\u0002\u0675\u0676\u0007\u025e\u0002\u0002\u0676\u0677",
    "\u0005\u0190\u00c9\u0002\u0677\u0678\u0005\u0414\u020b\u0002\u0678\u0679",
    "\u0007\u028f\u0002\u0002\u0679\u067a\u0005\u0412\u020a\u0002\u067a\u068e",
    "\u0003\u0002\u0002\u0002\u067b\u067c\u0007\u01cb\u0002\u0002\u067c\u067d",
    "\u0007\u028f\u0002\u0002\u067d\u0681\u0005\u02ee\u0178\u0002\u067e\u067f",
    "\u0006\u0013\u0014\u0002\u067f\u0682\u0007\u01e0\u0002\u0002\u0680\u0682",
    "\u0005\u03a0\u01d1\u0002\u0681\u067e\u0003\u0002\u0002\u0002\u0681\u0680",
    "\u0003\u0002\u0002\u0002\u0682\u0684\u0003\u0002\u0002\u0002\u0683\u0685",
    "\u0005\u03d2\u01ea\u0002\u0684\u0683\u0003\u0002\u0002\u0002\u0684\u0685",
    "\u0003\u0002\u0002\u0002\u0685\u068e\u0003\u0002\u0002\u0002\u0686\u068e",
    "\u0007\u01fa\u0002\u0002\u0687\u0688\u0007\u024c\u0002\u0002\u0688\u0689",
    "\u0007\u01be\u0002\u0002\u0689\u068e\u0005*\u0016\u0002\u068a\u068b",
    "\u0006\u0013\u0015\u0002\u068b\u068c\u00077\u0002\u0002\u068c\u068e",
    "\u0007\u00fb\u0002\u0002\u068d\u0608\u0003\u0002\u0002\u0002\u068d\u061a",
    "\u0003\u0002\u0002\u0002\u068d\u061c\u0003\u0002\u0002\u0002\u068d\u0626",
    "\u0003\u0002\u0002\u0002\u068d\u062f\u0003\u0002\u0002\u0002\u068d\u0648",
    "\u0003\u0002\u0002\u0002\u068d\u064a\u0003\u0002\u0002\u0002\u068d\u064c",
    "\u0003\u0002\u0002\u0002\u068d\u065c\u0003\u0002\u0002\u0002\u068d\u0662",
    "\u0003\u0002\u0002\u0002\u068d\u0668\u0003\u0002\u0002\u0002\u068d\u066f",
    "\u0003\u0002\u0002\u0002\u068d\u0674\u0003\u0002\u0002\u0002\u068d\u067b",
    "\u0003\u0002\u0002\u0002\u068d\u0686\u0003\u0002\u0002\u0002\u068d\u0687",
    "\u0003\u0002\u0002\u0002\u068d\u068a\u0003\u0002\u0002\u0002\u068e%",
    "\u0003\u0002\u0002\u0002\u068f\u0690\u0007=\u0002\u0002\u0690\u0693",
    "\u0005\u0460\u0231\u0002\u0691\u0693\u0007\u0096\u0002\u0002\u0692\u068f",
    "\u0003\u0002\u0002\u0002\u0692\u0691\u0003\u0002\u0002\u0002\u0693\'",
    "\u0003\u0002\u0002\u0002\u0694\u0695\t\u0004\u0002\u0002\u0695)\u0003",
    "\u0002\u0002\u0002\u0696\u0698\u0005\u0460\u0231\u0002\u0697\u0699\u0005",
    "\u014c\u00a7\u0002\u0698\u0697\u0003\u0002\u0002\u0002\u0698\u0699\u0003",
    "\u0002\u0002\u0002\u0699\u06a1\u0003\u0002\u0002\u0002\u069a\u069b\u0007",
    "\u0198\u0002\u0002\u069b\u069d\u0005\u0460\u0231\u0002\u069c\u069e\u0005",
    "\u014c\u00a7\u0002\u069d\u069c\u0003\u0002\u0002\u0002\u069d\u069e\u0003",
    "\u0002\u0002\u0002\u069e\u06a0\u0003\u0002\u0002\u0002\u069f\u069a\u0003",
    "\u0002\u0002\u0002\u06a0\u06a3\u0003\u0002\u0002\u0002\u06a1\u069f\u0003",
    "\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002\u0002\u06a2+\u0003",
    "\u0002\u0002\u0002\u06a3\u06a1\u0003\u0002\u0002\u0002\u06a4\u06a6\u0007",
    "@\u0002\u0002\u06a5\u06a7\u0007\u0181\u0002\u0002\u06a6\u06a5\u0003",
    "\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7\u06aa\u0003",
    "\u0002\u0002\u0002\u06a8\u06ab\u0007\u01e0\u0002\u0002\u06a9\u06ab\u0005",
    "\u0460\u0231\u0002\u06aa\u06a8\u0003\u0002\u0002\u0002\u06aa\u06a9\u0003",
    "\u0002\u0002\u0002\u06ab-\u0003\u0002\u0002\u0002\u06ac\u06ae\u0007",
    "\u0226\u0002\u0002\u06ad\u06af\u0007\u0181\u0002\u0002\u06ae\u06ad\u0003",
    "\u0002\u0002\u0002\u06ae\u06af\u0003\u0002\u0002\u0002\u06af\u06b2\u0003",
    "\u0002\u0002\u0002\u06b0\u06b3\u0007\u01e0\u0002\u0002\u06b1\u06b3\u0005",
    "\u0460\u0231\u0002\u06b2\u06b0\u0003\u0002\u0002\u0002\u06b2\u06b1\u0003",
    "\u0002\u0002\u0002\u06b3/\u0003\u0002\u0002\u0002\u06b4\u06b6\u0005",
    ",\u0017\u0002\u06b5\u06b7\u0005.\u0018\u0002\u06b6\u06b5\u0003\u0002",
    "\u0002\u0002\u06b6\u06b7\u0003\u0002\u0002\u0002\u06b7\u06bd\u0003\u0002",
    "\u0002\u0002\u06b8\u06ba\u0005.\u0018\u0002\u06b9\u06bb\u0005,\u0017",
    "\u0002\u06ba\u06b9\u0003\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002",
    "\u0002\u06bb\u06bd\u0003\u0002\u0002\u0002\u06bc\u06b4\u0003\u0002\u0002",
    "\u0002\u06bc\u06b8\u0003\u0002\u0002\u0002\u06bd1\u0003\u0002\u0002",
    "\u0002\u06be\u06bf\u0006\u001a\u0016\u0002\u06bf\u06c0\t\u0005\u0002",
    "\u0002\u06c0\u06c1\u0007\u02a0\u0002\u0002\u06c13\u0003\u0002\u0002",
    "\u0002\u06c2\u06c3\u0007&\u0002\u0002\u06c3\u06c4\u0007\u00fb\u0002",
    "\u0002\u06c45\u0003\u0002\u0002\u0002\u06c5\u06c8\u0007\u01ad\u0002",
    "\u0002\u06c6\u06c8\u0005\u0462\u0232\u0002\u06c7\u06c5\u0003\u0002\u0002",
    "\u0002\u06c7\u06c6\u0003\u0002\u0002\u0002\u06c87\u0003\u0002\u0002",
    "\u0002\u06c9\u06ca\u0007\u011b\u0002\u0002\u06ca\u06cc\u0007\"\u0002",
    "\u0002\u06cb\u06cd\u0005\u0402\u0202\u0002\u06cc\u06cb\u0003\u0002\u0002",
    "\u0002\u06cc\u06cd\u0003\u0002\u0002\u0002\u06cd\u06d2\u0003\u0002\u0002",
    "\u0002\u06ce\u06cf\u0005\u0462\u0232\u0002\u06cf\u06d0\u0007\u0212\u0002",
    "\u0002\u06d0\u06d1\u0005\u03ba\u01de\u0002\u06d1\u06d3\u0003\u0002\u0002",
    "\u0002\u06d2\u06ce\u0003\u0002\u0002\u0002\u06d2\u06d3\u0003\u0002\u0002",
    "\u0002\u06d39\u0003\u0002\u0002\u0002\u06d4\u06d5\u0007\u0158\u0002",
    "\u0002\u06d5\u06f7\u0005\u042e\u0218\u0002\u06d6\u06d7\t\u0006\u0002",
    "\u0002\u06d7\u06d8\u0007p\u0002\u0002\u06d8\u06da\u0005\u0480\u0241",
    "\u0002\u06d9\u06db\u0005B\"\u0002\u06da\u06d9\u0003\u0002\u0002\u0002",
    "\u06da\u06db\u0003\u0002\u0002\u0002\u06db\u06f8\u0003\u0002\u0002\u0002",
    "\u06dc\u06f0\u0006\u001e\u0017\u0002\u06dd\u06f1\u0003\u0002\u0002\u0002",
    "\u06de\u06df\u0007\u01c3\u0002\u0002\u06df\u06e0\u0007p\u0002\u0002",
    "\u06e0\u06eb\u0005\u0480\u0241\u0002\u06e1\u06e8\u0005F$\u0002\u06e2",
    "\u06e4\u0007\u0198\u0002\u0002\u06e3\u06e2\u0003\u0002\u0002\u0002\u06e3",
    "\u06e4\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5",
    "\u06e7\u0005F$\u0002\u06e6\u06e3\u0003\u0002\u0002\u0002\u06e7\u06ea",
    "\u0003\u0002\u0002\u0002\u06e8\u06e6\u0003\u0002\u0002\u0002\u06e8\u06e9",
    "\u0003\u0002\u0002\u0002\u06e9\u06ec\u0003\u0002\u0002\u0002\u06ea\u06e8",
    "\u0003\u0002\u0002\u0002\u06eb\u06e1\u0003\u0002\u0002\u0002\u06eb\u06ec",
    "\u0003\u0002\u0002\u0002\u06ec\u06f1\u0003\u0002\u0002\u0002\u06ed\u06f1",
    "\t\u0007\u0002\u0002\u06ee\u06ef\u0007\u023f\u0002\u0002\u06ef\u06f1",
    "\u0007\u01ab\u0002\u0002\u06f0\u06dd\u0003\u0002\u0002\u0002\u06f0\u06de",
    "\u0003\u0002\u0002\u0002\u06f0\u06ed\u0003\u0002\u0002\u0002\u06f0\u06ee",
    "\u0003\u0002\u0002\u0002\u06f1\u06f8\u0003\u0002\u0002\u0002\u06f2\u06f3",
    "\u0007\u025e\u0002\u0002\u06f3\u06f4\u0007\u028f\u0002\u0002\u06f4\u06f8",
    "\u0005\u0460\u0231\u0002\u06f5\u06f6\u0006\u001e\u0018\u0002\u06f6\u06f8",
    "\u0005B\"\u0002\u06f7\u06d6\u0003\u0002\u0002\u0002\u06f7\u06dc\u0003",
    "\u0002\u0002\u0002\u06f7\u06f2\u0003\u0002\u0002\u0002\u06f7\u06f5\u0003",
    "\u0002\u0002\u0002\u06f8;\u0003\u0002\u0002\u0002\u06f9\u06fa\u0007",
    "\u0294\u0002\u0002\u06fa\u06fb\u0007\u0158\u0002\u0002\u06fb\u06fc\u0005",
    "\u042e\u0218\u0002\u06fc\u06fd\u0007\u026d\u0002\u0002\u06fd\u06ff\t",
    "\b\u0002\u0002\u06fe\u0700\u0005> \u0002\u06ff\u06fe\u0003\u0002\u0002",
    "\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700=\u0003\u0002\u0002",
    "\u0002\u0701\u0708\u0005@!\u0002\u0702\u0704\u0007\u0198\u0002\u0002",
    "\u0703\u0702\u0003\u0002\u0002\u0002\u0703\u0704\u0003\u0002\u0002\u0002",
    "\u0704\u0705\u0003\u0002\u0002\u0002\u0705\u0707\u0005@!\u0002\u0706",
    "\u0703\u0003\u0002\u0002\u0002\u0707\u070a\u0003\u0002\u0002\u0002\u0708",
    "\u0706\u0003\u0002\u0002\u0002\u0708\u0709\u0003\u0002\u0002\u0002\u0709",
    "?\u0003\u0002\u0002\u0002\u070a\u0708\u0003\u0002\u0002\u0002\u070b",
    "\u070c\u0005\u0098M\u0002\u070cA\u0003\u0002\u0002\u0002\u070d\u0714",
    "\u0005D#\u0002\u070e\u0710\u0007\u0198\u0002\u0002\u070f\u070e\u0003",
    "\u0002\u0002\u0002\u070f\u0710\u0003\u0002\u0002\u0002\u0710\u0711\u0003",
    "\u0002\u0002\u0002\u0711\u0713\u0005D#\u0002\u0712\u070f\u0003\u0002",
    "\u0002\u0002\u0713\u0716\u0003\u0002\u0002\u0002\u0714\u0712\u0003\u0002",
    "\u0002\u0002\u0714\u0715\u0003\u0002\u0002\u0002\u0715C\u0003\u0002",
    "\u0002\u0002\u0716\u0714\u0003\u0002\u0002\u0002\u0717\u0719\u0007\u00a6",
    "\u0002\u0002\u0718\u071a\u0007\u0181\u0002\u0002\u0719\u0718\u0003\u0002",
    "\u0002\u0002\u0719\u071a\u0003\u0002\u0002\u0002\u071a\u071b\u0003\u0002",
    "\u0002\u0002\u071b\u0722\u0005\u049a\u024e\u0002\u071c\u0722\u0005\u0090",
    "I\u0002\u071d\u0722\u0005\u0092J\u0002\u071e\u0722\u0005\u0098M\u0002",
    "\u071f\u0722\u0005\u009aN\u0002\u0720\u0722\u0005\u00a0Q\u0002\u0721",
    "\u0717\u0003\u0002\u0002\u0002\u0721\u071c\u0003\u0002\u0002\u0002\u0721",
    "\u071d\u0003\u0002\u0002\u0002\u0721\u071e\u0003\u0002\u0002\u0002\u0721",
    "\u071f\u0003\u0002\u0002\u0002\u0721\u0720\u0003\u0002\u0002\u0002\u0722",
    "E\u0003\u0002\u0002\u0002\u0723\u0725\u0007\u00a6\u0002\u0002\u0724",
    "\u0726\u0007\u0181\u0002\u0002\u0725\u0724\u0003\u0002\u0002\u0002\u0725",
    "\u0726\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002\u0002\u0727",
    "\u072b\u0005\u049a\u024e\u0002\u0728\u072b\u0005\u0090I\u0002\u0729",
    "\u072b\u0005\u0092J\u0002\u072a\u0723\u0003\u0002\u0002\u0002\u072a",
    "\u0728\u0003\u0002\u0002\u0002\u072a\u0729\u0003\u0002\u0002\u0002\u072b",
    "G\u0003\u0002\u0002\u0002\u072c\u072e\u0005\u00a6T\u0002\u072d\u072c",
    "\u0003\u0002\u0002\u0002\u072d\u072e\u0003\u0002\u0002\u0002\u072e\u0730",
    "\u0003\u0002\u0002\u0002\u072f\u0731\u0005\u03c8\u01e5\u0002\u0730\u072f",
    "\u0003\u0002\u0002\u0002\u0730\u0731\u0003\u0002\u0002\u0002\u0731\u0733",
    "\u0003\u0002\u0002\u0002\u0732\u0734\u0005\u00a8U\u0002\u0733\u0732",
    "\u0003\u0002\u0002\u0002\u0733\u0734\u0003\u0002\u0002\u0002\u0734\u0735",
    "\u0003\u0002\u0002\u0002\u0735\u0736\u0007\u0171\u0002\u0002\u0736\u0737",
    "\u0005\u042a\u0216\u0002\u0737\u0738\u0005J&\u0002\u0738I\u0003\u0002",
    "\u0002\u0002\u0739\u073b\u0005\u040c\u0207\u0002\u073a\u0739\u0003\u0002",
    "\u0002\u0002\u073a\u073b\u0003\u0002\u0002\u0002\u073b\u073c\u0003\u0002",
    "\u0002\u0002\u073c\u073d\u0007\u01b1\u0002\u0002\u073d\u073e\u0005L",
    "\'\u0002\u073eK\u0003\u0002\u0002\u0002\u073f\u0741\u0005^0\u0002\u0740",
    "\u0742\u0005N(\u0002\u0741\u0740\u0003\u0002\u0002\u0002\u0741\u0742",
    "\u0003\u0002\u0002\u0002\u0742M\u0003\u0002\u0002\u0002\u0743\u0745",
    "\u0007\u02ac\u0002\u0002\u0744\u0746\t\t\u0002\u0002\u0745\u0744\u0003",
    "\u0002\u0002\u0002\u0745\u0746\u0003\u0002\u0002\u0002\u0746\u0747\u0003",
    "\u0002\u0002\u0002\u0747\u0748\u0007\u01c5\u0002\u0002\u0748\u0749\u0007",
    "\u024a\u0002\u0002\u0749O\u0003\u0002\u0002\u0002\u074a\u075d\u0007",
    "\u01cd\u0002\u0002\u074b\u075e\u0005R*\u0002\u074c\u075e\u0005V,\u0002",
    "\u074d\u075e\u0005d3\u0002\u074e\u075e\u0005b2\u0002\u074f\u075e\u0005",
    "f4\u0002\u0750\u075e\u0005t;\u0002\u0751\u075e\u0005\u00a2R\u0002\u0752",
    "\u075e\u0005\u00aaV\u0002\u0753\u075e\u0005n8\u0002\u0754\u075e\u0005",
    "z>\u0002\u0755\u075e\u0005\u0080A\u0002\u0756\u075e\u0005\u00aeX\u0002",
    "\u0757\u0758\u0006)\u0019\u0002\u0758\u075e\u0005\u00b0Y\u0002\u0759",
    "\u075a\u0006)\u001a\u0002\u075a\u075e\u0005\u00b2Z\u0002\u075b\u075c",
    "\u0006)\u001b\u0002\u075c\u075e\u0005\u0082B\u0002\u075d\u074b\u0003",
    "\u0002\u0002\u0002\u075d\u074c\u0003\u0002\u0002\u0002\u075d\u074d\u0003",
    "\u0002\u0002\u0002\u075d\u074e\u0003\u0002\u0002\u0002\u075d\u074f\u0003",
    "\u0002\u0002\u0002\u075d\u0750\u0003\u0002\u0002\u0002\u075d\u0751\u0003",
    "\u0002\u0002\u0002\u075d\u0752\u0003\u0002\u0002\u0002\u075d\u0753\u0003",
    "\u0002\u0002\u0002\u075d\u0754\u0003\u0002\u0002\u0002\u075d\u0755\u0003",
    "\u0002\u0002\u0002\u075d\u0756\u0003\u0002\u0002\u0002\u075d\u0757\u0003",
    "\u0002\u0002\u0002\u075d\u0759\u0003\u0002\u0002\u0002\u075d\u075b\u0003",
    "\u0002\u0002\u0002\u075eQ\u0003\u0002\u0002\u0002\u075f\u0761\u0007",
    "\u01d5\u0002\u0002\u0760\u0762\u0005\u03cc\u01e7\u0002\u0761\u0760\u0003",
    "\u0002\u0002\u0002\u0761\u0762\u0003\u0002\u0002\u0002\u0762\u0763\u0003",
    "\u0002\u0002\u0002\u0763\u0767\u0005\u0418\u020d\u0002\u0764\u0766\u0005",
    "T+\u0002\u0765\u0764\u0003\u0002\u0002\u0002\u0766\u0769\u0003\u0002",
    "\u0002\u0002\u0767\u0765\u0003\u0002\u0002\u0002\u0767\u0768\u0003\u0002",
    "\u0002\u0002\u0768S\u0003\u0002\u0002\u0002\u0769\u0767\u0003\u0002",
    "\u0002\u0002\u076a\u076f\u0005\u03b0\u01d9\u0002\u076b\u076f\u0005\u03ac",
    "\u01d7\u0002\u076c\u076d\u0006+\u001c\u0002\u076d\u076f\u0005\u03ae",
    "\u01d8\u0002\u076e\u076a\u0003\u0002\u0002\u0002\u076e\u076b\u0003\u0002",
    "\u0002\u0002\u076e\u076c\u0003\u0002\u0002\u0002\u076fU\u0003\u0002",
    "\u0002\u0002\u0770\u0772\u0007\u0159\u0002\u0002\u0771\u0770\u0003\u0002",
    "\u0002\u0002\u0771\u0772\u0003\u0002\u0002\u0002\u0772\u0773\u0003\u0002",
    "\u0002\u0002\u0773\u0775\u0007\u0289\u0002\u0002\u0774\u0776\u0005\u03cc",
    "\u01e7\u0002\u0775\u0774\u0003\u0002\u0002\u0002\u0775\u0776\u0003\u0002",
    "\u0002\u0002\u0776\u0777\u0003\u0002\u0002\u0002\u0777\u078e\u0005\u0440",
    "\u0221\u0002\u0778\u0779\u0007\u019b\u0002\u0002\u0779\u077a\u0005X",
    "-\u0002\u077a\u077b\u0007\u019c\u0002\u0002\u077b\u077d\u0003\u0002",
    "\u0002\u0002\u077c\u0778\u0003\u0002\u0002\u0002\u077c\u077d\u0003\u0002",
    "\u0002\u0002\u077d\u077f\u0003\u0002\u0002\u0002\u077e\u0780\u0005\u03a4",
    "\u01d3\u0002\u077f\u077e\u0003\u0002\u0002\u0002\u077f\u0780\u0003\u0002",
    "\u0002\u0002\u0780\u0782\u0003\u0002\u0002\u0002\u0781\u0783\u0005\u03b2",
    "\u01da\u0002\u0782\u0781\u0003\u0002\u0002\u0002\u0782\u0783\u0003\u0002",
    "\u0002\u0002\u0783\u0785\u0003\u0002\u0002\u0002\u0784\u0786\u0005\\",
    "/\u0002\u0785\u0784\u0003\u0002\u0002\u0002\u0785\u0786\u0003\u0002",
    "\u0002\u0002\u0786\u078f\u0003\u0002\u0002\u0002\u0787\u0788\u0007\u0220",
    "\u0002\u0002\u0788\u078f\u0005\u0446\u0224\u0002\u0789\u078a\u0007\u019b",
    "\u0002\u0002\u078a\u078b\u0007\u0220\u0002\u0002\u078b\u078c\u0005\u0446",
    "\u0224\u0002\u078c\u078d\u0007\u019c\u0002\u0002\u078d\u078f\u0003\u0002",
    "\u0002\u0002\u078e\u077c\u0003\u0002\u0002\u0002\u078e\u0787\u0003\u0002",
    "\u0002\u0002\u078e\u0789\u0003\u0002\u0002\u0002\u078fW\u0003\u0002",
    "\u0002\u0002\u0790\u0795\u0005Z.\u0002\u0791\u0792\u0007\u0198\u0002",
    "\u0002\u0792\u0794\u0005Z.\u0002\u0793\u0791\u0003\u0002\u0002\u0002",
    "\u0794\u0797\u0003\u0002\u0002\u0002\u0795\u0793\u0003\u0002\u0002\u0002",
    "\u0795\u0796\u0003\u0002\u0002\u0002\u0796Y\u0003\u0002\u0002\u0002",
    "\u0797\u0795\u0003\u0002\u0002\u0002\u0798\u079b\u0005\u0358\u01ad\u0002",
    "\u0799\u079b\u0005\u0360\u01b1\u0002\u079a\u0798\u0003\u0002\u0002\u0002",
    "\u079a\u0799\u0003\u0002\u0002\u0002\u079b[\u0003\u0002\u0002\u0002",
    "\u079c\u079e\t\n\u0002\u0002\u079d\u079c\u0003\u0002\u0002\u0002\u079d",
    "\u079e\u0003\u0002\u0002\u0002\u079e\u07a0\u0003\u0002\u0002\u0002\u079f",
    "\u07a1\u0007\u01b1\u0002\u0002\u07a0\u079f\u0003\u0002\u0002\u0002\u07a0",
    "\u07a1\u0003\u0002\u0002\u0002\u07a1\u07a2\u0003\u0002\u0002\u0002\u07a2",
    "\u07a3\u0005^0\u0002\u07a3]\u0003\u0002\u0002\u0002\u07a4\u07a7\u0005",
    "\u0112\u008a\u0002\u07a5\u07a7\u0005\u0116\u008c\u0002\u07a6\u07a4\u0003",
    "\u0002\u0002\u0002\u07a6\u07a5\u0003\u0002\u0002\u0002\u07a7_\u0003",
    "\u0002\u0002\u0002\u07a8\u07ac\u0007\u01cd\u0002\u0002\u07a9\u07ad\u0005",
    "b2\u0002\u07aa\u07ad\u0005d3\u0002\u07ab\u07ad\u0005f4\u0002\u07ac\u07a9",
    "\u0003\u0002\u0002\u0002\u07ac\u07aa\u0003\u0002\u0002\u0002\u07ac\u07ab",
    "\u0003\u0002\u0002\u0002\u07ad\u07af\u0003\u0002\u0002\u0002\u07ae\u07b0",
    "\u0007\u0199\u0002\u0002\u07af\u07ae\u0003\u0002\u0002\u0002\u07af\u07b0",
    "\u0003\u0002\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002\u0002\u07b1\u07b2",
    "\u0007\u0002\u0002\u0003\u07b2a\u0003\u0002\u0002\u0002\u07b3\u07b5",
    "\u0005\u03c8\u01e5\u0002\u07b4\u07b3\u0003\u0002\u0002\u0002\u07b4\u07b5",
    "\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002\u0002\u07b6\u07b7",
    "\u0007\u0254\u0002\u0002\u07b7\u07b8\u0005\u041c\u020f\u0002\u07b8\u07c1",
    "\u0007\u019b\u0002\u0002\u07b9\u07be\u0005\u03ce\u01e8\u0002\u07ba\u07bb",
    "\u0007\u0198\u0002\u0002\u07bb\u07bd\u0005\u03ce\u01e8\u0002\u07bc\u07ba",
    "\u0003\u0002\u0002\u0002\u07bd\u07c0\u0003\u0002\u0002\u0002\u07be\u07bc",
    "\u0003\u0002\u0002\u0002\u07be\u07bf\u0003\u0002\u0002\u0002\u07bf\u07c2",
    "\u0003\u0002\u0002\u0002\u07c0\u07be\u0003\u0002\u0002\u0002\u07c1\u07b9",
    "\u0003\u0002\u0002\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002\u07c2\u07c3",
    "\u0003\u0002\u0002\u0002\u07c3\u07c7\u0007\u019c\u0002\u0002\u07c4\u07c6",
    "\u0005h5\u0002\u07c5\u07c4\u0003\u0002\u0002\u0002\u07c6\u07c9\u0003",
    "\u0002\u0002\u0002\u07c7\u07c5\u0003\u0002\u0002\u0002\u07c7\u07c8\u0003",
    "\u0002\u0002\u0002\u07c8\u07ca\u0003\u0002\u0002\u0002\u07c9\u07c7\u0003",
    "\u0002\u0002\u0002\u07ca\u07cb\u0005\u0308\u0185\u0002\u07cbc\u0003",
    "\u0002\u0002\u0002\u07cc\u07ce\u0005\u03c8\u01e5\u0002\u07cd\u07cc\u0003",
    "\u0002\u0002\u0002\u07cd\u07ce\u0003\u0002\u0002\u0002\u07ce\u07cf\u0003",
    "\u0002\u0002\u0002\u07cf\u07d0\u0007\u0166\u0002\u0002\u07d0\u07d1\u0005",
    "\u0420\u0211\u0002\u07d1\u07da\u0007\u019b\u0002\u0002\u07d2\u07d7\u0005",
    "\u03d0\u01e9\u0002\u07d3\u07d4\u0007\u0198\u0002\u0002\u07d4\u07d6\u0005",
    "\u03d0\u01e9\u0002\u07d5\u07d3\u0003\u0002\u0002\u0002\u07d6\u07d9\u0003",
    "\u0002\u0002\u0002\u07d7\u07d5\u0003\u0002\u0002\u0002\u07d7\u07d8\u0003",
    "\u0002\u0002\u0002\u07d8\u07db\u0003\u0002\u0002\u0002\u07d9\u07d7\u0003",
    "\u0002\u0002\u0002\u07da\u07d2\u0003\u0002\u0002\u0002\u07da\u07db\u0003",
    "\u0002\u0002\u0002\u07db\u07dc\u0003\u0002\u0002\u0002\u07dc\u07dd\u0007",
    "\u019c\u0002\u0002\u07dd\u07de\u0007\u0127\u0002\u0002\u07de\u07e2\u0005",
    "\u03d4\u01eb\u0002\u07df\u07e1\u0005h5\u0002\u07e0\u07df\u0003\u0002",
    "\u0002\u0002\u07e1\u07e4\u0003\u0002\u0002\u0002\u07e2\u07e0\u0003\u0002",
    "\u0002\u0002\u07e2\u07e3\u0003\u0002\u0002\u0002\u07e3\u07e5\u0003\u0002",
    "\u0002\u0002\u07e4\u07e2\u0003\u0002\u0002\u0002\u07e5\u07e6\u0005\u0308",
    "\u0185\u0002\u07e6e\u0003\u0002\u0002\u0002\u07e7\u07e9\u0007?\u0002",
    "\u0002\u07e8\u07e7\u0003\u0002\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002",
    "\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002\u07ea\u07eb\u0007\u0166\u0002",
    "\u0002\u07eb\u07ec\u0005\u0438\u021d\u0002\u07ec\u07ed\u0007\u0127\u0002",
    "\u0002\u07ed\u07ee\t\u000b\u0002\u0002\u07ee\u07ef\u00071\u0002\u0002",
    "\u07ef\u07f0\u0005\u0480\u0241\u0002\u07f0g\u0003\u0002\u0002\u0002",
    "\u07f1\u07f7\u0005l7\u0002\u07f2\u07f4\u0007\u023f\u0002\u0002\u07f3",
    "\u07f2\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002\u0002\u07f4",
    "\u07f5\u0003\u0002\u0002\u0002\u07f5\u07f7\u0007\u01e5\u0002\u0002\u07f6",
    "\u07f1\u0003\u0002\u0002\u0002\u07f6\u07f3\u0003\u0002\u0002\u0002\u07f7",
    "i\u0003\u0002\u0002\u0002\u07f8\u07fa\u0005h5\u0002\u07f9\u07f8\u0003",
    "\u0002\u0002\u0002\u07fa\u07fb\u0003\u0002\u0002\u0002\u07fb\u07f9\u0003",
    "\u0002\u0002\u0002\u07fb\u07fc\u0003\u0002\u0002\u0002\u07fck\u0003",
    "\u0002\u0002\u0002\u07fd\u07fe\u0007\r\u0002\u0002\u07fe\u080f\u0005",
    "\u0480\u0241\u0002\u07ff\u0800\u0007\u001c\u0002\u0002\u0800\u080f\u0007",
    "\u027a\u0002\u0002\u0801\u0802\u0007\u001d\u0002\u0002\u0802\u080f\u0007",
    "\u027a\u0002\u0002\u0803\u0804\u0007\u000f\u0002\u0002\u0804\u080f\u0007",
    "\u027a\u0002\u0002\u0805\u0806\u0007\u0257\u0002\u0002\u0806\u0807\u0007",
    "\u027a\u0002\u0002\u0807\u080f\u0007o\u0002\u0002\u0808\u0809\u0007",
    "\u0239\u0002\u0002\u0809\u080a\u0007\u027a\u0002\u0002\u080a\u080f\u0007",
    "o\u0002\u0002\u080b\u080c\u0007\u027a\u0002\u0002\u080c\u080d\u0007",
    ",\u0002\u0002\u080d\u080f\t\f\u0002\u0002\u080e\u07fd\u0003\u0002\u0002",
    "\u0002\u080e\u07ff\u0003\u0002\u0002\u0002\u080e\u0801\u0003\u0002\u0002",
    "\u0002\u080e\u0803\u0003\u0002\u0002\u0002\u080e\u0805\u0003\u0002\u0002",
    "\u0002\u080e\u0808\u0003\u0002\u0002\u0002\u080e\u080b\u0003\u0002\u0002",
    "\u0002\u080fm\u0003\u0002\u0002\u0002\u0810\u0812\u0005\u0400\u0201",
    "\u0002\u0811\u0810\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002\u0002",
    "\u0002\u0812\u083c\u0003\u0002\u0002\u0002\u0813\u0815\u0007\u0296\u0002",
    "\u0002\u0814\u0813\u0003\u0002\u0002\u0002\u0814\u0815\u0003\u0002\u0002",
    "\u0002\u0815\u0816\u0003\u0002\u0002\u0002\u0816\u081f\u0007\u020b\u0002",
    "\u0002\u0817\u0818\u00068\u001d\u0002\u0818\u081a\u0005\u0412\u020a",
    "\u0002\u0819\u081b\u0005\u0384\u01c3\u0002\u081a\u0819\u0003\u0002\u0002",
    "\u0002\u081a\u081b\u0003\u0002\u0002\u0002\u081b\u0820\u0003\u0002\u0002",
    "\u0002\u081c\u081e\u0005p9\u0002\u081d\u081c\u0003\u0002\u0002\u0002",
    "\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u0820\u0003\u0002\u0002\u0002",
    "\u081f\u0817\u0003\u0002\u0002\u0002\u081f\u081d\u0003\u0002\u0002\u0002",
    "\u0820\u0821\u0003\u0002\u0002\u0002\u0821\u0825\u0005r:\u0002\u0822",
    "\u0824\u0005\u037e\u01c0\u0002\u0823\u0822\u0003\u0002\u0002\u0002\u0824",
    "\u0827\u0003\u0002\u0002\u0002\u0825\u0823\u0003\u0002\u0002\u0002\u0825",
    "\u0826\u0003\u0002\u0002\u0002\u0826\u083d\u0003\u0002\u0002\u0002\u0827",
    "\u0825\u0003\u0002\u0002\u0002\u0828\u0829\u0007\u01fe\u0002\u0002\u0829",
    "\u082a\u0007\u020b\u0002\u0002\u082a\u082b\u0005\u0412\u020a\u0002\u082b",
    "\u082f\u0005r:\u0002\u082c\u082e\u0005\u0386\u01c4\u0002\u082d\u082c",
    "\u0003\u0002\u0002\u0002\u082e\u0831\u0003\u0002\u0002\u0002\u082f\u082d",
    "\u0003\u0002\u0002\u0002\u082f\u0830\u0003\u0002\u0002\u0002\u0830\u083d",
    "\u0003\u0002\u0002\u0002\u0831\u082f\u0003\u0002\u0002\u0002\u0832\u0833",
    "\u0007\u0272\u0002\u0002\u0833\u0834\u0007\u020b\u0002\u0002\u0834\u0835",
    "\u0005\u0412\u020a\u0002\u0835\u0839\u0005r:\u0002\u0836\u0838\u0005",
    "\u0388\u01c5\u0002\u0837\u0836\u0003\u0002\u0002\u0002\u0838\u083b\u0003",
    "\u0002\u0002\u0002\u0839\u0837\u0003\u0002\u0002\u0002\u0839\u083a\u0003",
    "\u0002\u0002\u0002\u083a\u083d\u0003\u0002\u0002\u0002\u083b\u0839\u0003",
    "\u0002\u0002\u0002\u083c\u0814\u0003\u0002\u0002\u0002\u083c\u0828\u0003",
    "\u0002\u0002\u0002\u083c\u0832\u0003\u0002\u0002\u0002\u083d\u083f\u0003",
    "\u0002\u0002\u0002\u083e\u0840\u00050\u0019\u0002\u083f\u083e\u0003",
    "\u0002\u0002\u0002\u083f\u0840\u0003\u0002\u0002\u0002\u0840o\u0003",
    "\u0002\u0002\u0002\u0841\u0844\u0005\u0412\u020a\u0002\u0842\u0843\u0007",
    "\u029c\u0002\u0002\u0843\u0845\u0005\u037c\u01bf\u0002\u0844\u0842\u0003",
    "\u0002\u0002\u0002\u0844\u0845\u0003\u0002\u0002\u0002\u0845\u084b\u0003",
    "\u0002\u0002\u0002\u0846\u0847\u0005\u0412\u020a\u0002\u0847\u0848\u0007",
    "\u0164\u0002\u0002\u0848\u0849\u0005\u037c\u01bf\u0002\u0849\u084b\u0003",
    "\u0002\u0002\u0002\u084a\u0841\u0003\u0002\u0002\u0002\u084a\u0846\u0003",
    "\u0002\u0002\u0002\u084bq\u0003\u0002\u0002\u0002\u084c\u084d\u0007",
    "\u0245\u0002\u0002\u084d\u084e\u0005\u0446\u0224\u0002\u084e\u084f\u0005",
    "\u037a\u01be\u0002\u084fs\u0003\u0002\u0002\u0002\u0850\u0851\u0007",
    "\u00b8\u0002\u0002\u0851\u0852\u0007\u0202\u0002\u0002\u0852\u0853\u0005",
    "\u0430\u0219\u0002\u0853\u0854\u0007\u01ac\u0002\u0002\u0854\u0855\t",
    "\r\u0002\u0002\u0855\u0857\u0005\u0480\u0241\u0002\u0856\u0858\u0005",
    "v<\u0002\u0857\u0856\u0003\u0002\u0002\u0002\u0857\u0858\u0003\u0002",
    "\u0002\u0002\u0858u\u0003\u0002\u0002\u0002\u0859\u0860\u0005x=\u0002",
    "\u085a\u085c\u0007\u0198\u0002\u0002\u085b\u085a\u0003\u0002\u0002\u0002",
    "\u085b\u085c\u0003\u0002\u0002\u0002\u085c\u085d\u0003\u0002\u0002\u0002",
    "\u085d\u085f\u0005x=\u0002\u085e\u085b\u0003\u0002\u0002\u0002\u085f",
    "\u0862\u0003\u0002\u0002\u0002\u0860\u085e\u0003\u0002\u0002\u0002\u0860",
    "\u0861\u0003\u0002\u0002\u0002\u0861w\u0003\u0002\u0002\u0002\u0862",
    "\u0860\u0003\u0002\u0002\u0002\u0863\u086a\u0005\u008cG\u0002\u0864",
    "\u086a\u0005\u008eH\u0002\u0865\u086a\u0005\u0096L\u0002\u0866\u086a",
    "\u0005\u0098M\u0002\u0867\u086a\u0005\u009aN\u0002\u0868\u086a\u0005",
    "\u009cO\u0002\u0869\u0863\u0003\u0002\u0002\u0002\u0869\u0864\u0003",
    "\u0002\u0002\u0002\u0869\u0865\u0003\u0002\u0002\u0002\u0869\u0866\u0003",
    "\u0002\u0002\u0002\u0869\u0867\u0003\u0002\u0002\u0002\u0869\u0868\u0003",
    "\u0002\u0002\u0002\u086ay\u0003\u0002\u0002\u0002\u086b\u086c\u0007",
    "-\u0002\u0002\u086c\u086d\u0005\u043a\u021e\u0002\u086d\u086e\u0007",
    "\u01fb\u0002\u0002\u086e\u086f\u0007o\u0002\u0002\u086f\u0870\u0007",
    "8\u0002\u0002\u0870\u0871\u0005\u0494\u024b\u0002\u0871\u0872\u0005",
    "|?\u0002\u0872{\u0003\u0002\u0002\u0002\u0873\u0874\u0007\u001f\u0002",
    "\u0002\u0874\u0875\u0007\u019b\u0002\u0002\u0875\u087a\u0005~@\u0002",
    "\u0876\u0877\u0007\u0198\u0002\u0002\u0877\u0879\u0005~@\u0002\u0878",
    "\u0876\u0003\u0002\u0002\u0002\u0879\u087c\u0003\u0002\u0002\u0002\u087a",
    "\u0878\u0003\u0002\u0002\u0002\u087a\u087b\u0003\u0002\u0002\u0002\u087b",
    "\u087d\u0003\u0002\u0002\u0002\u087c\u087a\u0003\u0002\u0002\u0002\u087d",
    "\u087e\u0007\u019c\u0002\u0002\u087e}\u0003\u0002\u0002\u0002\u087f",
    "\u0880\u0007\u001a\u0002\u0002\u0880\u088e\u0005\u0480\u0241\u0002\u0881",
    "\u0882\u0007\u01d5\u0002\u0002\u0882\u088e\u0005\u0480\u0241\u0002\u0883",
    "\u0884\u0007\u016e\u0002\u0002\u0884\u088e\u0005\u0480\u0241\u0002\u0885",
    "\u0886\u0007\u00fd\u0002\u0002\u0886\u088e\u0005\u0480\u0241\u0002\u0887",
    "\u0888\u00070\u0002\u0002\u0888\u088e\u0005\u0480\u0241\u0002\u0889",
    "\u088a\u0007 \u0002\u0002\u088a\u088e\u0005\u0480\u0241\u0002\u088b",
    "\u088c\u0007#\u0002\u0002\u088c\u088e\u0005\u046c\u0237\u0002\u088d",
    "\u087f\u0003\u0002\u0002\u0002\u088d\u0881\u0003\u0002\u0002\u0002\u088d",
    "\u0883\u0003\u0002\u0002\u0002\u088d\u0885\u0003\u0002\u0002\u0002\u088d",
    "\u0887\u0003\u0002\u0002\u0002\u088d\u0889\u0003\u0002\u0002\u0002\u088d",
    "\u088b\u0003\u0002\u0002\u0002\u088e\u007f\u0003\u0002\u0002\u0002\u088f",
    "\u0890\u0007\u0158\u0002\u0002\u0890\u0891\u0005\u042c\u0217\u0002\u0891",
    "\u0896\u0005\u0084C\u0002\u0892\u0893\u0007\u029b\u0002\u0002\u0893",
    "\u0894\u0007\u00b8\u0002\u0002\u0894\u0895\u0007\u0202\u0002\u0002\u0895",
    "\u0897\u0005\u0432\u021a\u0002\u0896\u0892\u0003\u0002\u0002\u0002\u0896",
    "\u0897\u0003\u0002\u0002\u0002\u0897\u0899\u0003\u0002\u0002\u0002\u0898",
    "\u089a\u0005\u0088E\u0002\u0899\u0898\u0003\u0002\u0002\u0002\u0899",
    "\u089a\u0003\u0002\u0002\u0002\u089a\u0081\u0003\u0002\u0002\u0002\u089b",
    "\u089c\u0007\u0294\u0002\u0002\u089c\u089d\u0007\u0158\u0002\u0002\u089d",
    "\u089e\u0005\u042c\u0217\u0002\u089e\u089f\u0007\u01ac\u0002\u0002\u089f",
    "\u08a1\u0005\u0086D\u0002\u08a0\u08a2\u0005> \u0002\u08a1\u08a0\u0003",
    "\u0002\u0002\u0002\u08a1\u08a2\u0003\u0002\u0002\u0002\u08a2\u0083\u0003",
    "\u0002\u0002\u0002\u08a3\u08a6\u0006C\u001e\u0002\u08a4\u08a5\u0007",
    "\u01ac\u0002\u0002\u08a5\u08a7\u0005\u0086D\u0002\u08a6\u08a4\u0003",
    "\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08ab\u0003",
    "\u0002\u0002\u0002\u08a8\u08a9\u0007\u01ac\u0002\u0002\u08a9\u08ab\u0005",
    "\u0086D\u0002\u08aa\u08a3\u0003\u0002\u0002\u0002\u08aa\u08a8\u0003",
    "\u0002\u0002\u0002\u08ab\u0085\u0003\u0002\u0002\u0002\u08ac\u08ad\u0007",
    "p\u0002\u0002\u08ad\u08ae\u0005\u0480\u0241\u0002\u08ae\u0087\u0003",
    "\u0002\u0002\u0002\u08af\u08b6\u0005\u008aF\u0002\u08b0\u08b2\u0007",
    "\u0198\u0002\u0002\u08b1\u08b0\u0003\u0002\u0002\u0002\u08b1\u08b2\u0003",
    "\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002\u08b3\u08b5\u0005",
    "\u008aF\u0002\u08b4\u08b1\u0003\u0002\u0002\u0002\u08b5\u08b8\u0003",
    "\u0002\u0002\u0002\u08b6\u08b4\u0003\u0002\u0002\u0002\u08b6\u08b7\u0003",
    "\u0002\u0002\u0002\u08b7\u0089\u0003\u0002\u0002\u0002\u08b8\u08b6\u0003",
    "\u0002\u0002\u0002\u08b9\u08c6\u0005\u008cG\u0002\u08ba\u08c6\u0005",
    "\u0090I\u0002\u08bb\u08c6\u0005\u0092J\u0002\u08bc\u08c6\u0005\u0094",
    "K\u0002\u08bd\u08c6\u0005\u0096L\u0002\u08be\u08c6\u0005\u0098M\u0002",
    "\u08bf\u08c6\u0005\u009aN\u0002\u08c0\u08c6\u0005\u009cO\u0002\u08c1",
    "\u08c2\u0006F\u001f\u0002\u08c2\u08c6\u0005\u009eP\u0002\u08c3\u08c4",
    "\u0006F \u0002\u08c4\u08c6\u0005\u00a0Q\u0002\u08c5\u08b9\u0003\u0002",
    "\u0002\u0002\u08c5\u08ba\u0003\u0002\u0002\u0002\u08c5\u08bb\u0003\u0002",
    "\u0002\u0002\u08c5\u08bc\u0003\u0002\u0002\u0002\u08c5\u08bd\u0003\u0002",
    "\u0002\u0002\u08c5\u08be\u0003\u0002\u0002\u0002\u08c5\u08bf\u0003\u0002",
    "\u0002\u0002\u08c5\u08c0\u0003\u0002\u0002\u0002\u08c5\u08c1\u0003\u0002",
    "\u0002\u0002\u08c5\u08c3\u0003\u0002\u0002\u0002\u08c6\u008b\u0003\u0002",
    "\u0002\u0002\u08c7\u08c9\u0007\u00a6\u0002\u0002\u08c8\u08ca\u0007\u0181",
    "\u0002\u0002\u08c9\u08c8\u0003\u0002\u0002\u0002\u08c9\u08ca\u0003\u0002",
    "\u0002\u0002\u08ca\u08cb\u0003\u0002\u0002\u0002\u08cb\u08cc\u0005\u049a",
    "\u024e\u0002\u08cc\u008d\u0003\u0002\u0002\u0002\u08cd\u08cf\t\u000e",
    "\u0002\u0002\u08ce\u08d0\u0007\u0181\u0002\u0002\u08cf\u08ce\u0003\u0002",
    "\u0002\u0002\u08cf\u08d0\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003\u0002",
    "\u0002\u0002\u08d1\u08d2\u0005\u049a\u024e\u0002\u08d2\u008f\u0003\u0002",
    "\u0002\u0002\u08d3\u08d5\u0007F\u0002\u0002\u08d4\u08d6\u0007\u0181",
    "\u0002\u0002\u08d5\u08d4\u0003\u0002\u0002\u0002\u08d5\u08d6\u0003\u0002",
    "\u0002\u0002\u08d6\u08d7\u0003\u0002\u0002\u0002\u08d7\u08d8\u0005\u049a",
    "\u024e\u0002\u08d8\u0091\u0003\u0002\u0002\u0002\u08d9\u08db\u0007\u00d4",
    "\u0002\u0002\u08da\u08dc\u0007\u0181\u0002\u0002\u08db\u08da\u0003\u0002",
    "\u0002\u0002\u08db\u08dc\u0003\u0002\u0002\u0002\u08dc\u08dd\u0003\u0002",
    "\u0002\u0002\u08dd\u08de\u0005\u049a\u024e\u0002\u08de\u0093\u0003\u0002",
    "\u0002\u0002\u08df\u08e1\u0007\u008d\u0002\u0002\u08e0\u08e2\u0007\u0181",
    "\u0002\u0002\u08e1\u08e0\u0003\u0002\u0002\u0002\u08e1\u08e2\u0003\u0002",
    "\u0002\u0002\u08e2\u08e3\u0003\u0002\u0002\u0002\u08e3\u08e4\u0005\u049a",
    "\u024e\u0002\u08e4\u0095\u0003\u0002\u0002\u0002\u08e5\u08e7\u0007\u00f0",
    "\u0002\u0002\u08e6\u08e8\u0007\u0181\u0002\u0002\u08e7\u08e6\u0003\u0002",
    "\u0002\u0002\u08e7\u08e8\u0003\u0002\u0002\u0002\u08e8\u08e9\u0003\u0002",
    "\u0002\u0002\u08e9\u08ea\u0005\u046e\u0238\u0002\u08ea\u0097\u0003\u0002",
    "\u0002\u0002\u08eb\u08ed\u0007\u014a\u0002\u0002\u08ec\u08eb\u0003\u0002",
    "\u0002\u0002\u08ec\u08ed\u0003\u0002\u0002\u0002\u08ed\u08ee\u0003\u0002",
    "\u0002\u0002\u08ee\u08f0\u0007\u0082\u0002\u0002\u08ef\u08f1\u0007\u0181",
    "\u0002\u0002\u08f0\u08ef\u0003\u0002\u0002\u0002\u08f0\u08f1\u0003\u0002",
    "\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u08f3\u0005\u043e",
    "\u0220\u0002\u08f3\u0099\u0003\u0002\u0002\u0002\u08f4\u08f5\t\u000f",
    "\u0002\u0002\u08f5\u009b\u0003\u0002\u0002\u0002\u08f6\u08f8\u0007\r",
    "\u0002\u0002\u08f7\u08f9\u0007\u0181\u0002\u0002\u08f8\u08f7\u0003\u0002",
    "\u0002\u0002\u08f8\u08f9\u0003\u0002\u0002\u0002\u08f9\u08fa\u0003\u0002",
    "\u0002\u0002\u08fa\u08fb\u0005\u0480\u0241\u0002\u08fb\u009d\u0003\u0002",
    "\u0002\u0002\u08fc\u08fe\u0007\u0094\u0002\u0002\u08fd\u08ff\u0007\u0181",
    "\u0002\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002\u08fe\u08ff\u0003\u0002",
    "\u0002\u0002\u08ff\u0900\u0003\u0002\u0002\u0002\u0900\u0901\u0005\u049a",
    "\u024e\u0002\u0901\u009f\u0003\u0002\u0002\u0002\u0902\u0904\u0007b",
    "\u0002\u0002\u0903\u0905\u0007\u0181\u0002\u0002\u0904\u0903\u0003\u0002",
    "\u0002\u0002\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0906\u0003\u0002",
    "\u0002\u0002\u0906\u0907\u0005\u047a\u023e\u0002\u0907\u00a1\u0003\u0002",
    "\u0002\u0002\u0908\u090a\u0005\u00a4S\u0002\u0909\u0908\u0003\u0002",
    "\u0002\u0002\u0909\u090a\u0003\u0002\u0002\u0002\u090a\u090c\u0003\u0002",
    "\u0002\u0002\u090b\u090d\u0005\u03c8\u01e5\u0002\u090c\u090b\u0003\u0002",
    "\u0002\u0002\u090c\u090d\u0003\u0002\u0002\u0002\u090d\u090f\u0003\u0002",
    "\u0002\u0002\u090e\u0910\u0005\u00a8U\u0002\u090f\u090e\u0003\u0002",
    "\u0002\u0002\u090f\u0910\u0003\u0002\u0002\u0002\u0910\u0911\u0003\u0002",
    "\u0002\u0002\u0911\u0912\u0007\u0171\u0002\u0002\u0912\u0913\u0005\u0428",
    "\u0215\u0002\u0913\u0914\u0005J&\u0002\u0914\u00a3\u0003\u0002\u0002",
    "\u0002\u0915\u0916\u0007\u024d\u0002\u0002\u0916\u0918\u0007\u0260\u0002",
    "\u0002\u0917\u0919\u0005\u00a6T\u0002\u0918\u0917\u0003\u0002\u0002",
    "\u0002\u0918\u0919\u0003\u0002\u0002\u0002\u0919\u091c\u0003\u0002\u0002",
    "\u0002\u091a\u091c\u0005\u00a6T\u0002\u091b\u0915\u0003\u0002\u0002",
    "\u0002\u091b\u091a\u0003\u0002\u0002\u0002\u091c\u00a5\u0003\u0002\u0002",
    "\u0002\u091d\u091e\u0007@\u0002\u0002\u091e\u091f\u0007\u0181\u0002",
    "\u0002\u091f\u0920\t\u0010\u0002\u0002\u0920\u00a7\u0003\u0002\u0002",
    "\u0002\u0921\u0922\u0007\u027a\u0002\u0002\u0922\u0923\u0007,\u0002",
    "\u0002\u0923\u0924\t\f\u0002\u0002\u0924\u00a9\u0003\u0002\u0002\u0002",
    "\u0925\u0927\u0005\u03c8\u01e5\u0002\u0926\u0925\u0003\u0002\u0002\u0002",
    "\u0926\u0927\u0003\u0002\u0002\u0002\u0927\u0928\u0003\u0002\u0002\u0002",
    "\u0928\u0929\u0007\u0291\u0002\u0002\u0929\u092a\u0005\u0424\u0213\u0002",
    "\u092a\u092b\t\u0011\u0002\u0002\u092b\u092c\t\u0012\u0002\u0002\u092c",
    "\u092d\u0007\u0245\u0002\u0002\u092d\u092e\u0005\u0446\u0224\u0002\u092e",
    "\u092f\u0007\u01fc\u0002\u0002\u092f\u0930\u0007\u01eb\u0002\u0002\u0930",
    "\u0932\u0007\u012f\u0002\u0002\u0931\u0933\u0005\u00acW\u0002\u0932",
    "\u0931\u0003\u0002\u0002\u0002\u0932\u0933\u0003\u0002\u0002\u0002\u0933",
    "\u0934\u0003\u0002\u0002\u0002\u0934\u0935\u0005\u0308\u0185\u0002\u0935",
    "\u00ab\u0003\u0002\u0002\u0002\u0936\u0937\u0006W!\u0002\u0937\u0938",
    "\t\u0013\u0002\u0002\u0938\u0939\u0005\u0494\u024b\u0002\u0939\u00ad",
    "\u0003\u0002\u0002\u0002\u093a\u093c\u0005\u03c8\u01e5\u0002\u093b\u093a",
    "\u0003\u0002\u0002\u0002\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u093d",
    "\u0003\u0002\u0002\u0002\u093d\u093f\u0007\u0087\u0002\u0002\u093e\u0940",
    "\u0005\u03cc\u01e7\u0002\u093f\u093e\u0003\u0002\u0002\u0002\u093f\u0940",
    "\u0003\u0002\u0002\u0002\u0940\u0941\u0003\u0002\u0002\u0002\u0941\u0942",
    "\u0005\u0434\u021b\u0002\u0942\u0943\u0007\u0245\u0002\u0002\u0943\u0944",
    "\u0007\u0131\u0002\u0002\u0944\u094b\u0005\u0356\u01ac\u0002\u0945\u0946",
    "\u0007\u0245\u0002\u0002\u0946\u0948\u0007_\u0002\u0002\u0947\u0949",
    "\u0007\u023f\u0002\u0002\u0948\u0947\u0003\u0002\u0002\u0002\u0948\u0949",
    "\u0003\u0002\u0002\u0002\u0949\u094a\u0003\u0002\u0002\u0002\u094a\u094c",
    "\u0007\u0104\u0002\u0002\u094b\u0945\u0003\u0002\u0002\u0002\u094b\u094c",
    "\u0003\u0002\u0002\u0002\u094c\u0953\u0003\u0002\u0002\u0002\u094d\u0954",
    "\u0007\u0091\u0002\u0002\u094e\u0951\u0007z\u0002\u0002\u094f\u0950",
    "\u0007\u0245\u0002\u0002\u0950\u0952\u0007/\u0002\u0002\u0951\u094f",
    "\u0003\u0002\u0002\u0002\u0951\u0952\u0003\u0002\u0002\u0002\u0952\u0954",
    "\u0003\u0002\u0002\u0002\u0953\u094d\u0003\u0002\u0002\u0002\u0953\u094e",
    "\u0003\u0002\u0002\u0002\u0953\u0954\u0003\u0002\u0002\u0002\u0954\u0957",
    "\u0003\u0002\u0002\u0002\u0955\u0956\u0007\r\u0002\u0002\u0956\u0958",
    "\u0005\u0480\u0241\u0002\u0957\u0955\u0003\u0002\u0002\u0002\u0957\u0958",
    "\u0003\u0002\u0002\u0002\u0958\u0959\u0003\u0002\u0002\u0002\u0959\u095a",
    "\u0007\u0011\u0002\u0002\u095a\u095b\u0005\u0308\u0185\u0002\u095b\u00af",
    "\u0003\u0002\u0002\u0002\u095c\u095e\u0007\u02b3\u0002\u0002\u095d\u095f",
    "\u0005\u03cc\u01e7\u0002\u095e\u095d\u0003\u0002\u0002\u0002\u095e\u095f",
    "\u0003\u0002\u0002\u0002\u095f\u0960\u0003\u0002\u0002\u0002\u0960\u0961",
    "\u0005\u0228\u0115\u0002\u0961\u00b1\u0003\u0002\u0002\u0002\u0962\u0963",
    "\u0007\u024d\u0002\u0002\u0963\u0964\u0007\u0260\u0002\u0002\u0964\u0965",
    "\u0007\u0272\u0002\u0002\u0965\u0966\u0007\u02ee\u0002\u0002\u0966\u0967",
    "\u0007\u02e6\u0002\u0002\u0967\u096b\u0005\u0472\u023a\u0002\u0968\u096a",
    "\u0005\u00b4[\u0002\u0969\u0968\u0003\u0002\u0002\u0002\u096a\u096d",
    "\u0003\u0002\u0002\u0002\u096b\u0969\u0003\u0002\u0002\u0002\u096b\u096c",
    "\u0003\u0002\u0002\u0002\u096c\u097c\u0003\u0002\u0002\u0002\u096d\u096b",
    "\u0003\u0002\u0002\u0002\u096e\u096f\u0007\u0272\u0002\u0002\u096f\u0970",
    "\u0007\u02ee\u0002\u0002\u0970\u0972\u0007\u02e6\u0002\u0002\u0971\u0973",
    "\u0005\u03cc\u01e7\u0002\u0972\u0971\u0003\u0002\u0002\u0002\u0972\u0973",
    "\u0003\u0002\u0002\u0002\u0973\u0974\u0003\u0002\u0002\u0002\u0974\u0978",
    "\u0005\u0472\u023a\u0002\u0975\u0977\u0005\u00b4[\u0002\u0976\u0975",
    "\u0003\u0002\u0002\u0002\u0977\u097a\u0003\u0002\u0002\u0002\u0978\u0976",
    "\u0003\u0002\u0002\u0002\u0978\u0979\u0003\u0002\u0002\u0002\u0979\u097c",
    "\u0003\u0002\u0002\u0002\u097a\u0978\u0003\u0002\u0002\u0002\u097b\u0962",
    "\u0003\u0002\u0002\u0002\u097b\u096e\u0003\u0002\u0002\u0002\u097c\u00b3",
    "\u0003\u0002\u0002\u0002\u097d\u097e\u0007\u00e7\u0002\u0002\u097e\u097f",
    "\u0007\u015b\u0002\u0002\u097f\u098d\u0005\u0482\u0242\u0002\u0980\u0981",
    "\u0007\u02eb\u0002\u0002\u0981\u0982\u0007\u015b\u0002\u0002\u0982\u098d",
    "\u0005\u0482\u0242\u0002\u0983\u0984\u0007\u02ed\u0002\u0002\u0984\u0985",
    "\u0005\u0482\u0242\u0002\u0985\u0986\u0007\u00a1\u0002\u0002\u0986\u0987",
    "\u0007\u01be\u0002\u0002\u0987\u0988\u0005\u0472\u023a\u0002\u0988\u098d",
    "\u0003\u0002\u0002\u0002\u0989\u098a\u0007\u02ec\u0002\u0002\u098a\u098b",
    "\u0007\u015b\u0002\u0002\u098b\u098d\u0005\u0482\u0242\u0002\u098c\u097d",
    "\u0003\u0002\u0002\u0002\u098c\u0980\u0003\u0002\u0002\u0002\u098c\u0983",
    "\u0003\u0002\u0002\u0002\u098c\u0989\u0003\u0002\u0002\u0002\u098d\u00b5",
    "\u0003\u0002\u0002\u0002\u098e\u09a0\u0007\u01e9\u0002\u0002\u098f\u09a1",
    "\u0005\u00b8]\u0002\u0990\u09a1\u0005\u00ba^\u0002\u0991\u09a1\u0005",
    "\u00bc_\u0002\u0992\u09a1\u0005\u00be`\u0002\u0993\u09a1\u0005\u00c0",
    "a\u0002\u0994\u09a1\u0005\u00c2b\u0002\u0995\u09a1\u0005\u00c6d\u0002",
    "\u0996\u09a1\u0005\u00c8e\u0002\u0997\u09a1\u0005\u00caf\u0002\u0998",
    "\u09a1\u0005\u00ccg\u0002\u0999\u09a1\u0005\u00ceh\u0002\u099a\u099b",
    "\u0006\\\"\u0002\u099b\u09a1\u0005\u00d0i\u0002\u099c\u099d\u0006\\",
    "#\u0002\u099d\u09a1\u0005\u00d2j\u0002\u099e\u099f\u0006\\$\u0002\u099f",
    "\u09a1\u0005\u00d4k\u0002\u09a0\u098f\u0003\u0002\u0002\u0002\u09a0",
    "\u0990\u0003\u0002\u0002\u0002\u09a0\u0991\u0003\u0002\u0002\u0002\u09a0",
    "\u0992\u0003\u0002\u0002\u0002\u09a0\u0993\u0003\u0002\u0002\u0002\u09a0",
    "\u0994\u0003\u0002\u0002\u0002\u09a0\u0995\u0003\u0002\u0002\u0002\u09a0",
    "\u0996\u0003\u0002\u0002\u0002\u09a0\u0997\u0003\u0002\u0002\u0002\u09a0",
    "\u0998\u0003\u0002\u0002\u0002\u09a0\u0999\u0003\u0002\u0002\u0002\u09a0",
    "\u099a\u0003\u0002\u0002\u0002\u09a0\u099c\u0003\u0002\u0002\u0002\u09a0",
    "\u099e\u0003\u0002\u0002\u0002\u09a1\u00b7\u0003\u0002\u0002\u0002\u09a2",
    "\u09a4\u0007\u01d5\u0002\u0002\u09a3\u09a5\u0005\u03ca\u01e6\u0002\u09a4",
    "\u09a3\u0003\u0002\u0002\u0002\u09a4\u09a5\u0003\u0002\u0002\u0002\u09a5",
    "\u09a6\u0003\u0002\u0002\u0002\u09a6\u09a7\u0005\u041a\u020e\u0002\u09a7",
    "\u00b9\u0003\u0002\u0002\u0002\u09a8\u09aa\u0007\u0087\u0002\u0002\u09a9",
    "\u09ab\u0005\u03ca\u01e6\u0002\u09aa\u09a9\u0003\u0002\u0002\u0002\u09aa",
    "\u09ab\u0003\u0002\u0002\u0002\u09ab\u09ac\u0003\u0002\u0002\u0002\u09ac",
    "\u09ad\u0005\u0436\u021c\u0002\u09ad\u00bb\u0003\u0002\u0002\u0002\u09ae",
    "\u09b0\u0007\u0166\u0002\u0002\u09af\u09b1\u0005\u03ca\u01e6\u0002\u09b0",
    "\u09af\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003\u0002\u0002\u0002\u09b1",
    "\u09b2\u0003\u0002\u0002\u0002\u09b2\u09b3\u0005\u0422\u0212\u0002\u09b3",
    "\u00bd\u0003\u0002\u0002\u0002\u09b4\u09b6\u0007\u0254\u0002\u0002\u09b5",
    "\u09b7\u0005\u03ca\u01e6\u0002\u09b6\u09b5\u0003\u0002\u0002\u0002\u09b6",
    "\u09b7\u0003\u0002\u0002\u0002\u09b7\u09b8\u0003\u0002\u0002\u0002\u09b8",
    "\u09b9\u0005\u041e\u0210\u0002\u09b9\u00bf\u0003\u0002\u0002\u0002\u09ba",
    "\u09bc\u0005\u0400\u0201\u0002\u09bb\u09ba\u0003\u0002\u0002\u0002\u09bb",
    "\u09bc\u0003\u0002\u0002\u0002\u09bc\u09bd\u0003\u0002\u0002\u0002\u09bd",
    "\u09be\u0007\u020b\u0002\u0002\u09be\u09bf\u0005\u0414\u020b\u0002\u09bf",
    "\u09c0\u0007\u0245\u0002\u0002\u09c0\u09c2\u0005\u0446\u0224\u0002\u09c1",
    "\u09c3\u00050\u0019\u0002\u09c2\u09c1\u0003\u0002\u0002\u0002\u09c2",
    "\u09c3\u0003\u0002\u0002\u0002\u09c3\u00c1\u0003\u0002\u0002\u0002\u09c4",
    "\u09c5\u0007\u00b8\u0002\u0002\u09c5\u09c6\u0007\u0202\u0002\u0002\u09c6",
    "\u09d1\u0005\u0432\u021a\u0002\u09c7\u09ce\u0005\u00c4c\u0002\u09c8",
    "\u09ca\u0007\u0198\u0002\u0002\u09c9\u09c8\u0003\u0002\u0002\u0002\u09c9",
    "\u09ca\u0003\u0002\u0002\u0002\u09ca\u09cb\u0003\u0002\u0002\u0002\u09cb",
    "\u09cd\u0005\u00c4c\u0002\u09cc\u09c9\u0003\u0002\u0002\u0002\u09cd",
    "\u09d0\u0003\u0002\u0002\u0002\u09ce\u09cc\u0003\u0002\u0002\u0002\u09ce",
    "\u09cf\u0003\u0002\u0002\u0002\u09cf\u09d2\u0003\u0002\u0002\u0002\u09d0",
    "\u09ce\u0003\u0002\u0002\u0002\u09d1\u09c7\u0003\u0002\u0002\u0002\u09d1",
    "\u09d2\u0003\u0002\u0002\u0002\u09d2\u00c3\u0003\u0002\u0002\u0002\u09d3",
    "\u09d6\u0005\u009aN\u0002\u09d4\u09d6\u0005\u0098M\u0002\u09d5\u09d3",
    "\u0003\u0002\u0002\u0002\u09d5\u09d4\u0003\u0002\u0002\u0002\u09d6\u00c5",
    "\u0003\u0002\u0002\u0002\u09d7\u09d9\u0007-\u0002\u0002\u09d8\u09da",
    "\u0005\u03ca\u01e6\u0002\u09d9\u09d8\u0003\u0002\u0002\u0002\u09d9\u09da",
    "\u0003\u0002\u0002\u0002\u09da\u09db\u0003\u0002\u0002\u0002\u09db\u09dc",
    "\u0005\u043c\u021f\u0002\u09dc\u00c7\u0003\u0002\u0002\u0002\u09dd\u09df",
    "\u0007\u0159\u0002\u0002\u09de\u09dd\u0003\u0002\u0002\u0002\u09de\u09df",
    "\u0003\u0002\u0002\u0002\u09df\u09e0\u0003\u0002\u0002\u0002\u09e0\u09e2",
    "\t\u0014\u0002\u0002\u09e1\u09e3\u0005\u03ca\u01e6\u0002\u09e2\u09e1",
    "\u0003\u0002\u0002\u0002\u09e2\u09e3\u0003\u0002\u0002\u0002\u09e3\u09e4",
    "\u0003\u0002\u0002\u0002\u09e4\u09e6\u0005\u0448\u0225\u0002\u09e5\u09e7",
    "\t\u0004\u0002\u0002\u09e6\u09e5\u0003\u0002\u0002\u0002\u09e6\u09e7",
    "\u0003\u0002\u0002\u0002\u09e7\u00c9\u0003\u0002\u0002\u0002\u09e8\u09e9",
    "\u0007\u0158\u0002\u0002\u09e9\u09f4\u0005\u042e\u0218\u0002\u09ea\u09f1",
    "\u0005\u00c4c\u0002\u09eb\u09ed\u0007\u0198\u0002\u0002\u09ec\u09eb",
    "\u0003\u0002\u0002\u0002\u09ec\u09ed\u0003\u0002\u0002\u0002\u09ed\u09ee",
    "\u0003\u0002\u0002\u0002\u09ee\u09f0\u0005\u00c4c\u0002\u09ef\u09ec",
    "\u0003\u0002\u0002\u0002\u09f0\u09f3\u0003\u0002\u0002\u0002\u09f1\u09ef",
    "\u0003\u0002\u0002\u0002\u09f1\u09f2\u0003\u0002\u0002\u0002\u09f2\u09f5",
    "\u0003\u0002\u0002\u0002\u09f3\u09f1\u0003\u0002\u0002\u0002\u09f4\u09ea",
    "\u0003\u0002\u0002\u0002\u09f4\u09f5\u0003\u0002\u0002\u0002\u09f5\u00cb",
    "\u0003\u0002\u0002\u0002\u09f6\u09f8\u0007\u0291\u0002\u0002\u09f7\u09f9",
    "\u0005\u03ca\u01e6\u0002\u09f8\u09f7\u0003\u0002\u0002\u0002\u09f8\u09f9",
    "\u0003\u0002\u0002\u0002\u09f9\u09fa\u0003\u0002\u0002\u0002\u09fa\u09fb",
    "\u0005\u0426\u0214\u0002\u09fb\u00cd\u0003\u0002\u0002\u0002\u09fc\u09fe",
    "\u0007\u0171\u0002\u0002\u09fd\u09ff\u0005\u03ca\u01e6\u0002\u09fe\u09fd",
    "\u0003\u0002\u0002\u0002\u09fe\u09ff\u0003\u0002\u0002\u0002\u09ff\u0a00",
    "\u0003\u0002\u0002\u0002\u0a00\u0a02\u0005\u03d8\u01ed\u0002\u0a01\u0a03",
    "\t\u0004\u0002\u0002\u0a02\u0a01\u0003\u0002\u0002\u0002\u0a02\u0a03",
    "\u0003\u0002\u0002\u0002\u0a03\u00cf\u0003\u0002\u0002\u0002\u0a04\u0a06",
    "\u0007\u02b3\u0002\u0002\u0a05\u0a07\u0005\u03ca\u01e6\u0002\u0a06\u0a05",
    "\u0003\u0002\u0002\u0002\u0a06\u0a07\u0003\u0002\u0002\u0002\u0a07\u0a08",
    "\u0003\u0002\u0002\u0002\u0a08\u0a09\u0005\u0228\u0115\u0002\u0a09\u00d1",
    "\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0007\u0272\u0002\u0002\u0a0b\u0a0c",
    "\u0007\u02ee\u0002\u0002\u0a0c\u0a0e\u0007\u02e6\u0002\u0002\u0a0d\u0a0f",
    "\u0005\u03ca\u01e6\u0002\u0a0e\u0a0d\u0003\u0002\u0002\u0002\u0a0e\u0a0f",
    "\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0003\u0002\u0002\u0002\u0a10\u0a11",
    "\u0005\u0472\u023a\u0002\u0a11\u00d3\u0003\u0002\u0002\u0002\u0a12\u0a13",
    "\u0007\u0294\u0002\u0002\u0a13\u0a14\u0007\u0158\u0002\u0002\u0a14\u0a16",
    "\u0005\u042e\u0218\u0002\u0a15\u0a17\u0005> \u0002\u0a16\u0a15\u0003",
    "\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17\u00d5\u0003",
    "\u0002\u0002\u0002\u0a18\u0a19\u0007\u025e\u0002\u0002\u0a19\u0a1a\t",
    "\u0014\u0002\u0002\u0a1a\u0a1f\u0005\u00d8m\u0002\u0a1b\u0a1c\u0007",
    "\u0198\u0002\u0002\u0a1c\u0a1e\u0005\u00d8m\u0002\u0a1d\u0a1b\u0003",
    "\u0002\u0002\u0002\u0a1e\u0a21\u0003\u0002\u0002\u0002\u0a1f\u0a1d\u0003",
    "\u0002\u0002\u0002\u0a1f\u0a20\u0003\u0002\u0002\u0002\u0a20\u00d7\u0003",
    "\u0002\u0002\u0002\u0a21\u0a1f\u0003\u0002\u0002\u0002\u0a22\u0a23\u0005",
    "\u0446\u0224\u0002\u0a23\u0a24\u0007\u028f\u0002\u0002\u0a24\u0a25\u0005",
    "\u0440\u0221\u0002\u0a25\u00d9\u0003\u0002\u0002\u0002\u0a26\u0a28\u0007",
    "4\u0002\u0002\u0a27\u0a29\u0007\u0289\u0002\u0002\u0a28\u0a27\u0003",
    "\u0002\u0002\u0002\u0a28\u0a29\u0003\u0002\u0002\u0002\u0a29\u0a2a\u0003",
    "\u0002\u0002\u0002\u0a2a\u0a2b\u0005\u0446\u0224\u0002\u0a2b\u00db\u0003",
    "\u0002\u0002\u0002\u0a2c\u0a2d\u0007\u00a4\u0002\u0002\u0a2d\u0a2e\u0007",
    "\u0289\u0002\u0002\u0a2e\u0a2f\u0007\u01fd\u0002\u0002\u0a2f\u0a30\u0005",
    "\u0484\u0243\u0002\u0a30\u00dd\u0003\u0002\u0002\u0002\u0a31\u0a32\u0007",
    "\u01bf\u0002\u0002\u0a32\u0a38\u0005\u041e\u0210\u0002\u0a33\u0a35\u0007",
    "\u019b\u0002\u0002\u0a34\u0a36\u0005\u02ec\u0177\u0002\u0a35\u0a34\u0003",
    "\u0002\u0002\u0002\u0a35\u0a36\u0003\u0002\u0002\u0002\u0a36\u0a37\u0003",
    "\u0002\u0002\u0002\u0a37\u0a39\u0007\u019c\u0002\u0002\u0a38\u0a33\u0003",
    "\u0002\u0002\u0002\u0a38\u0a39\u0003\u0002\u0002\u0002\u0a39\u00df\u0003",
    "\u0002\u0002\u0002\u0a3a\u0a3b\u0006q%\u0002\u0a3b\u0a3d\u0005\u0142",
    "\u00a2\u0002\u0a3c\u0a3a\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0003\u0002",
    "\u0002\u0002\u0a3d\u0a3e\u0003\u0002\u0002\u0002\u0a3e\u0a42\u0007\u01e2",
    "\u0002\u0002\u0a3f\u0a41\u0005\u00e4s\u0002\u0a40\u0a3f\u0003\u0002",
    "\u0002\u0002\u0a41\u0a44\u0003\u0002\u0002\u0002\u0a42\u0a40\u0003\u0002",
    "\u0002\u0002\u0a42\u0a43\u0003\u0002\u0002\u0002\u0a43\u0a65\u0003\u0002",
    "\u0002\u0002\u0a44\u0a42\u0003\u0002\u0002\u0002\u0a45\u0a5d\u0007\u01fd",
    "\u0002\u0002\u0a46\u0a47\u0005\u044a\u0226\u0002\u0a47\u0a48\u0007\u029c",
    "\u0002\u0002\u0a48\u0a4a\u0005\u0150\u00a9\u0002\u0a49\u0a4b\u0005\u0160",
    "\u00b1\u0002\u0a4a\u0a49\u0003\u0002\u0002\u0002\u0a4a\u0a4b\u0003\u0002",
    "\u0002\u0002\u0a4b\u0a5e\u0003\u0002\u0002\u0002\u0a4c\u0a4f\u0005\u0446",
    "\u0224\u0002\u0a4d\u0a4e\u0006q&\u0002\u0a4e\u0a50\u0005\u0188\u00c5",
    "\u0002\u0a4f\u0a4d\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0003\u0002\u0002",
    "\u0002\u0a50\u0a52\u0003\u0002\u0002\u0002\u0a51\u0a53\u0005\u00e2r",
    "\u0002\u0a52\u0a51\u0003\u0002\u0002\u0002\u0a52\u0a53\u0003\u0002\u0002",
    "\u0002\u0a53\u0a55\u0003\u0002\u0002\u0002\u0a54\u0a56\u0005\u0160\u00b1",
    "\u0002\u0a55\u0a54\u0003\u0002\u0002\u0002\u0a55\u0a56\u0003\u0002\u0002",
    "\u0002\u0a56\u0a58\u0003\u0002\u0002\u0002\u0a57\u0a59\u0005\u014a\u00a6",
    "\u0002\u0a58\u0a57\u0003\u0002\u0002\u0002\u0a58\u0a59\u0003\u0002\u0002",
    "\u0002\u0a59\u0a5b\u0003\u0002\u0002\u0002\u0a5a\u0a5c\u0005\u0120\u0091",
    "\u0002\u0a5b\u0a5a\u0003\u0002\u0002\u0002\u0a5b\u0a5c\u0003\u0002\u0002",
    "\u0002\u0a5c\u0a5e\u0003\u0002\u0002\u0002\u0a5d\u0a46\u0003\u0002\u0002",
    "\u0002\u0a5d\u0a4c\u0003\u0002\u0002\u0002\u0a5e\u0a66\u0003\u0002\u0002",
    "\u0002\u0a5f\u0a60\u0005\u044a\u0226\u0002\u0a60\u0a61\u0007\u01fd\u0002",
    "\u0002\u0a61\u0a63\u0005\u0150\u00a9\u0002\u0a62\u0a64\u0005\u0160\u00b1",
    "\u0002\u0a63\u0a62\u0003\u0002\u0002\u0002\u0a63\u0a64\u0003\u0002\u0002",
    "\u0002\u0a64\u0a66\u0003\u0002\u0002\u0002\u0a65\u0a45\u0003\u0002\u0002",
    "\u0002\u0a65\u0a5f\u0003\u0002\u0002\u0002\u0a66\u00e1\u0003\u0002\u0002",
    "\u0002\u0a67\u0a68\u0006r\'\u0002\u0a68\u0a69\u0007\"\u0002\u0002\u0a69",
    "\u0a6a\u0007\u019b\u0002\u0002\u0a6a\u0a6b\u0005\u0462\u0232\u0002\u0a6b",
    "\u0a6c\u0007\u019c\u0002\u0002\u0a6c\u00e3\u0003\u0002\u0002\u0002\u0a6d",
    "\u0a6e\t\u0015\u0002\u0002\u0a6e\u00e5\u0003\u0002\u0002\u0002\u0a6f",
    "\u0a74\u0007\u0011\u0002\u0002\u0a70\u0a71\u0006t(\u0002\u0a71\u0a75",
    "\u0005\u02ec\u0177\u0002\u0a72\u0a73\u0006t)\u0002\u0a73\u0a75\u0005",
    "\u015a\u00ae\u0002\u0a74\u0a70\u0003\u0002\u0002\u0002\u0a74\u0a72\u0003",
    "\u0002\u0002\u0002\u0a75\u00e7\u0003\u0002\u0002\u0002\u0a76\u0a88\u0007",
    "\u0018\u0002\u0002\u0a77\u0a78\u0005\u0446\u0224\u0002\u0a78\u0a7a\u0007",
    "\u001e\u0002\u0002\u0a79\u0a7b\u0005\u0188\u00c5\u0002\u0a7a\u0a79\u0003",
    "\u0002\u0002\u0002\u0a7a\u0a7b\u0003\u0002\u0002\u0002\u0a7b\u0a89\u0003",
    "\u0002\u0002\u0002\u0a7c\u0a86\u0005\u0460\u0231\u0002\u0a7d\u0a87\u0007",
    "\f\u0002\u0002\u0a7e\u0a7f\u0007\u0258\u0002\u0002\u0a7f\u0a81\u0005",
    "\u00eav\u0002\u0a80\u0a82\u0005\u0160\u00b1\u0002\u0a81\u0a80\u0003",
    "\u0002\u0002\u0002\u0a81\u0a82\u0003\u0002\u0002\u0002\u0a82\u0a84\u0003",
    "\u0002\u0002\u0002\u0a83\u0a85\u0005\u011e\u0090\u0002\u0a84\u0a83\u0003",
    "\u0002\u0002\u0002\u0a84\u0a85\u0003\u0002\u0002\u0002\u0a85\u0a87\u0003",
    "\u0002\u0002\u0002\u0a86\u0a7d\u0003\u0002\u0002\u0002\u0a86\u0a7e\u0003",
    "\u0002\u0002\u0002\u0a87\u0a89\u0003\u0002\u0002\u0002\u0a88\u0a77\u0003",
    "\u0002\u0002\u0002\u0a88\u0a7c\u0003\u0002\u0002\u0002\u0a89\u00e9\u0003",
    "\u0002\u0002\u0002\u0a8a\u0a95\t\u0016\u0002\u0002\u0a8b\u0a92\u0005",
    "\u0460\u0231\u0002\u0a8c\u0a93\t\u0017\u0002\u0002\u0a8d\u0a8e\t\u0018",
    "\u0002\u0002\u0a8e\u0a8f\u0007\u019b\u0002\u0002\u0a8f\u0a90\u0005\u00fa",
    "~\u0002\u0a90\u0a91\u0007\u019c\u0002\u0002\u0a91\u0a93\u0003\u0002",
    "\u0002\u0002\u0a92\u0a8c\u0003\u0002\u0002\u0002\u0a92\u0a8d\u0003\u0002",
    "\u0002\u0002\u0a93\u0a95\u0003\u0002\u0002\u0002\u0a94\u0a8a\u0003\u0002",
    "\u0002\u0002\u0a94\u0a8b\u0003\u0002\u0002\u0002\u0a95\u00eb\u0003\u0002",
    "\u0002\u0002\u0a96\u0a98\u0007\u0210\u0002\u0002\u0a97\u0a99\u0005\u00ee",
    "x\u0002\u0a98\u0a97\u0003\u0002\u0002\u0002\u0a98\u0a99\u0003\u0002",
    "\u0002\u0002\u0a99\u0a9b\u0003\u0002\u0002\u0002\u0a9a\u0a9c\u0007\u020a",
    "\u0002\u0002\u0a9b\u0a9a\u0003\u0002\u0002\u0002\u0a9b\u0a9c\u0003\u0002",
    "\u0002\u0002\u0a9c\u0a9e\u0003\u0002\u0002\u0002\u0a9d\u0a9f\u0007\u0212",
    "\u0002\u0002\u0a9e\u0a9d\u0003\u0002\u0002\u0002\u0a9e\u0a9f\u0003\u0002",
    "\u0002\u0002\u0a9f\u0aa0\u0003\u0002\u0002\u0002\u0aa0\u0aa2\u0005\u0446",
    "\u0224\u0002\u0aa1\u0aa3\u0005\u0404\u0203\u0002\u0aa2\u0aa1\u0003\u0002",
    "\u0002\u0002\u0aa2\u0aa3\u0003\u0002\u0002\u0002\u0aa3\u0ab0\u0003\u0002",
    "\u0002\u0002\u0aa4\u0aa7\u0005\u00f0y\u0002\u0aa5\u0aa6\u0006w*\u0002",
    "\u0aa6\u0aa8\u0005\u00fc\u007f\u0002\u0aa7\u0aa5\u0003\u0002\u0002\u0002",
    "\u0aa7\u0aa8\u0003\u0002\u0002\u0002\u0aa8\u0ab1\u0003\u0002\u0002\u0002",
    "\u0aa9\u0aaa\u0007\u026d\u0002\u0002\u0aaa\u0aad\u0005\u03da\u01ee\u0002",
    "\u0aab\u0aac\u0006w+\u0002\u0aac\u0aae\u0005\u00fc\u007f\u0002\u0aad",
    "\u0aab\u0003\u0002\u0002\u0002\u0aad\u0aae\u0003\u0002\u0002\u0002\u0aae",
    "\u0ab1\u0003\u0002\u0002\u0002\u0aaf\u0ab1\u0005\u00f6|\u0002\u0ab0",
    "\u0aa4\u0003\u0002\u0002\u0002\u0ab0\u0aa9\u0003\u0002\u0002\u0002\u0ab0",
    "\u0aaf\u0003\u0002\u0002\u0002\u0ab1\u0ab3\u0003\u0002\u0002\u0002\u0ab2",
    "\u0ab4\u0005\u00fe\u0080\u0002\u0ab3\u0ab2\u0003\u0002\u0002\u0002\u0ab3",
    "\u0ab4\u0003\u0002\u0002\u0002\u0ab4\u00ed\u0003\u0002\u0002\u0002\u0ab5",
    "\u0ab6\t\u0019\u0002\u0002\u0ab6\u00ef\u0003\u0002\u0002\u0002\u0ab7",
    "\u0ab9\u0007\u019b\u0002\u0002\u0ab8\u0aba\u0005\u00f2z\u0002\u0ab9",
    "\u0ab8\u0003\u0002\u0002\u0002\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba",
    "\u0abb\u0003\u0002\u0002\u0002\u0abb\u0abd\u0007\u019c\u0002\u0002\u0abc",
    "\u0ab7\u0003\u0002\u0002\u0002\u0abc\u0abd\u0003\u0002\u0002\u0002\u0abd",
    "\u0abe\u0003\u0002\u0002\u0002\u0abe\u0abf\u0005\u00f4{\u0002\u0abf",
    "\u00f1\u0003\u0002\u0002\u0002\u0ac0\u0ac5\u0005\u0410\u0209\u0002\u0ac1",
    "\u0ac2\u0007\u0198\u0002\u0002\u0ac2\u0ac4\u0005\u0410\u0209\u0002\u0ac3",
    "\u0ac1\u0003\u0002\u0002\u0002\u0ac4\u0ac7\u0003\u0002\u0002\u0002\u0ac5",
    "\u0ac3\u0003\u0002\u0002\u0002\u0ac5\u0ac6\u0003\u0002\u0002\u0002\u0ac6",
    "\u00f3\u0003\u0002\u0002\u0002\u0ac7\u0ac5\u0003\u0002\u0002\u0002\u0ac8",
    "\u0ac9\t\u001a\u0002\u0002\u0ac9\u0aca\u0005\u00f8}\u0002\u0aca\u00f5",
    "\u0003\u0002\u0002\u0002\u0acb\u0ad3\u0005^0\u0002\u0acc\u0ace\u0007",
    "\u019b\u0002\u0002\u0acd\u0acf\u0005\u00f2z\u0002\u0ace\u0acd\u0003",
    "\u0002\u0002\u0002\u0ace\u0acf\u0003\u0002\u0002\u0002\u0acf\u0ad0\u0003",
    "\u0002\u0002\u0002\u0ad0\u0ad1\u0007\u019c\u0002\u0002\u0ad1\u0ad3\u0005",
    "^0\u0002\u0ad2\u0acb\u0003\u0002\u0002\u0002\u0ad2\u0acc\u0003\u0002",
    "\u0002\u0002\u0ad3\u00f7\u0003\u0002\u0002\u0002\u0ad4\u0ad6\u0007\u019b",
    "\u0002\u0002\u0ad5\u0ad7\u0005\u00fa~\u0002\u0ad6\u0ad5\u0003\u0002",
    "\u0002\u0002\u0ad6\u0ad7\u0003\u0002\u0002\u0002\u0ad7\u0ad8\u0003\u0002",
    "\u0002\u0002\u0ad8\u0ae1\u0007\u019c\u0002\u0002\u0ad9\u0ada\u0007\u0198",
    "\u0002\u0002\u0ada\u0adc\u0007\u019b\u0002\u0002\u0adb\u0add\u0005\u00fa",
    "~\u0002\u0adc\u0adb\u0003\u0002\u0002\u0002\u0adc\u0add\u0003\u0002",
    "\u0002\u0002\u0add\u0ade\u0003\u0002\u0002\u0002\u0ade\u0ae0\u0007\u019c",
    "\u0002\u0002\u0adf\u0ad9\u0003\u0002\u0002\u0002\u0ae0\u0ae3\u0003\u0002",
    "\u0002\u0002\u0ae1\u0adf\u0003\u0002\u0002\u0002\u0ae1\u0ae2\u0003\u0002",
    "\u0002\u0002\u0ae2\u00f9\u0003\u0002\u0002\u0002\u0ae3\u0ae1\u0003\u0002",
    "\u0002\u0002\u0ae4\u0ae7\u0005\u029c\u014f\u0002\u0ae5\u0ae7\u0007\u01e0",
    "\u0002\u0002\u0ae6\u0ae4\u0003\u0002\u0002\u0002\u0ae6\u0ae5\u0003\u0002",
    "\u0002\u0002\u0ae7\u0aef\u0003\u0002\u0002\u0002\u0ae8\u0aeb\u0007\u0198",
    "\u0002\u0002\u0ae9\u0aec\u0005\u029c\u014f\u0002\u0aea\u0aec\u0007\u01e0",
    "\u0002\u0002\u0aeb\u0ae9\u0003\u0002\u0002\u0002\u0aeb\u0aea\u0003\u0002",
    "\u0002\u0002\u0aec\u0aee\u0003\u0002\u0002\u0002\u0aed\u0ae8\u0003\u0002",
    "\u0002\u0002\u0aee\u0af1\u0003\u0002\u0002\u0002\u0aef\u0aed\u0003\u0002",
    "\u0002\u0002\u0aef\u0af0\u0003\u0002\u0002\u0002\u0af0\u00fb\u0003\u0002",
    "\u0002\u0002\u0af1\u0aef\u0003\u0002\u0002\u0002\u0af2\u0af3\u0007\u01b1",
    "\u0002\u0002\u0af3\u0af5\u0005\u0460\u0231\u0002\u0af4\u0af6\u0005\u040c",
    "\u0207\u0002\u0af5\u0af4\u0003\u0002\u0002\u0002\u0af5\u0af6\u0003\u0002",
    "\u0002\u0002\u0af6\u00fd\u0003\u0002\u0002\u0002\u0af7\u0af8\u0007\u0245",
    "\u0002\u0002\u0af8\u0af9\u0007~\u0002\u0002\u0af9\u0afa\u0007\u021b",
    "\u0002\u0002\u0afa\u0afb\u0007\u0299\u0002\u0002\u0afb\u0afc\u0005\u03da",
    "\u01ee\u0002\u0afc\u00ff\u0003\u0002\u0002\u0002\u0afd\u0afe\u0007\u0224",
    "\u0002\u0002\u0afe\u0b00\u0005\u0102\u0082\u0002\u0aff\u0b01\t\u001b",
    "\u0002\u0002\u0b00\u0aff\u0003\u0002\u0002\u0002\u0b00\u0b01\u0003\u0002",
    "\u0002\u0002\u0b01\u0b03\u0003\u0002\u0002\u0002\u0b02\u0b04\u0007\u00b6",
    "\u0002\u0002\u0b03\u0b02\u0003\u0002\u0002\u0002\u0b03\u0b04\u0003\u0002",
    "\u0002\u0002\u0b04\u0b05\u0003\u0002\u0002\u0002\u0b05\u0b06\u0007\u020c",
    "\u0002\u0002\u0b06\u0b08\u0005\u0480\u0241\u0002\u0b07\u0b09\t\n\u0002",
    "\u0002\u0b08\u0b07\u0003\u0002\u0002\u0002\u0b08\u0b09\u0003\u0002\u0002",
    "\u0002\u0b09\u0b0a\u0003\u0002\u0002\u0002\u0b0a\u0b0b\u0007\u0212\u0002",
    "\u0002\u0b0b\u0b0c\u0007\u0289\u0002\u0002\u0b0c\u0b0e\u0005\u0446\u0224",
    "\u0002\u0b0d\u0b0f\u0005\u0404\u0203\u0002\u0b0e\u0b0d\u0003\u0002\u0002",
    "\u0002\u0b0e\u0b0f\u0003\u0002\u0002\u0002\u0b0f\u0b11\u0003\u0002\u0002",
    "\u0002\u0b10\u0b12\u0005\u03de\u01f0\u0002\u0b11\u0b10\u0003\u0002\u0002",
    "\u0002\u0b11\u0b12\u0003\u0002\u0002\u0002\u0b12\u0b14\u0003\u0002\u0002",
    "\u0002\u0b13\u0b15\u0005\u0104\u0083\u0002\u0b14\u0b13\u0003\u0002\u0002",
    "\u0002\u0b14\u0b15\u0003\u0002\u0002\u0002\u0b15\u0b17\u0003\u0002\u0002",
    "\u0002\u0b16\u0b18\u0005\u03e0\u01f1\u0002\u0b17\u0b16\u0003\u0002\u0002",
    "\u0002\u0b17\u0b18\u0003\u0002\u0002\u0002\u0b18\u0b1a\u0003\u0002\u0002",
    "\u0002\u0b19\u0b1b\u0005\u03e4\u01f3\u0002\u0b1a\u0b19\u0003\u0002\u0002",
    "\u0002\u0b1a\u0b1b\u0003\u0002\u0002\u0002\u0b1b\u0b1c\u0003\u0002\u0002",
    "\u0002\u0b1c\u0b1d\u0005\u0106\u0084\u0002\u0b1d\u0101\u0003\u0002\u0002",
    "\u0002\u0b1e\u0b1f\t\u001c\u0002\u0002\u0b1f\u0103\u0003\u0002\u0002",
    "\u0002\u0b20\u0b21\u0007\u012c\u0002\u0002\u0b21\u0b22\u0007\u00a1\u0002",
    "\u0002\u0b22\u0b23\u0007\u01be\u0002\u0002\u0b23\u0b24\u0005\u047c\u023f",
    "\u0002\u0b24\u0105\u0003\u0002\u0002\u0002\u0b25\u0b26\u0007\u020a\u0002",
    "\u0002\u0b26\u0b27\u0007\u017e\u0002\u0002\u0b27\u0b29\t\u001d\u0002",
    "\u0002\u0b28\u0b25\u0003\u0002\u0002\u0002\u0b28\u0b29\u0003\u0002\u0002",
    "\u0002\u0b29\u0b2b\u0003\u0002\u0002\u0002\u0b2a\u0b2c\u0005\u0108\u0085",
    "\u0002\u0b2b\u0b2a\u0003\u0002\u0002\u0002\u0b2b\u0b2c\u0003\u0002\u0002",
    "\u0002\u0b2c\u0b2f\u0003\u0002\u0002\u0002\u0b2d\u0b2e\u0007\u026d\u0002",
    "\u0002\u0b2e\u0b30\u0005\u03da\u01ee\u0002\u0b2f\u0b2d\u0003\u0002\u0002",
    "\u0002\u0b2f\u0b30\u0003\u0002\u0002\u0002\u0b30\u0107\u0003\u0002\u0002",
    "\u0002\u0b31\u0b33\u0007\u019b\u0002\u0002\u0b32\u0b34\u0005\u010a\u0086",
    "\u0002\u0b33\u0b32\u0003\u0002\u0002\u0002\u0b33\u0b34\u0003\u0002\u0002",
    "\u0002\u0b34\u0b35\u0003\u0002\u0002\u0002\u0b35\u0b36\u0007\u019c\u0002",
    "\u0002\u0b36\u0109\u0003\u0002\u0002\u0002\u0b37\u0b3a\u0005\u040e\u0208",
    "\u0002\u0b38\u0b3a\u0005\u02de\u0170\u0002\u0b39\u0b37\u0003\u0002\u0002",
    "\u0002\u0b39\u0b38\u0003\u0002\u0002\u0002\u0b3a\u0b42\u0003\u0002\u0002",
    "\u0002\u0b3b\u0b3e\u0007\u0198\u0002\u0002\u0b3c\u0b3f\u0005\u040e\u0208",
    "\u0002\u0b3d\u0b3f\u0005\u02de\u0170\u0002\u0b3e\u0b3c\u0003\u0002\u0002",
    "\u0002\u0b3e\u0b3d\u0003\u0002\u0002\u0002\u0b3f\u0b41\u0003\u0002\u0002",
    "\u0002\u0b40\u0b3b\u0003\u0002\u0002\u0002\u0b41\u0b44\u0003\u0002\u0002",
    "\u0002\u0b42\u0b40\u0003\u0002\u0002\u0002\u0b42\u0b43\u0003\u0002\u0002",
    "\u0002\u0b43\u010b\u0003\u0002\u0002\u0002\u0b44\u0b42\u0003\u0002\u0002",
    "\u0002\u0b45\u0b47\u0007\u0260\u0002\u0002\u0b46\u0b48\t\u001e\u0002",
    "\u0002\u0b47\u0b46\u0003\u0002\u0002\u0002\u0b47\u0b48\u0003\u0002\u0002",
    "\u0002\u0b48\u0b4a\u0003\u0002\u0002\u0002\u0b49\u0b4b\u0007\u0212\u0002",
    "\u0002\u0b4a\u0b49\u0003\u0002\u0002\u0002\u0b4a\u0b4b\u0003\u0002\u0002",
    "\u0002\u0b4b\u0b4c\u0003\u0002\u0002\u0002\u0b4c\u0b4e\u0005\u0446\u0224",
    "\u0002\u0b4d\u0b4f\u0005\u0404\u0203\u0002\u0b4e\u0b4d\u0003\u0002\u0002",
    "\u0002\u0b4e\u0b4f\u0003\u0002\u0002\u0002\u0b4f\u0b54\u0003\u0002\u0002",
    "\u0002\u0b50\u0b55\u0005\u00f0y\u0002\u0b51\u0b52\u0007\u026d\u0002",
    "\u0002\u0b52\u0b55\u0005\u03da\u01ee\u0002\u0b53\u0b55\u0005\u00f6|",
    "\u0002\u0b54\u0b50\u0003\u0002\u0002\u0002\u0b54\u0b51\u0003\u0002\u0002",
    "\u0002\u0b54\u0b53\u0003\u0002\u0002\u0002\u0b55\u010d\u0003\u0002\u0002",
    "\u0002\u0b56\u0b5a\u0005\u0112\u008a\u0002\u0b57\u0b5a\u0005\u0116\u008c",
    "\u0002\u0b58\u0b5a\u0005\u0110\u0089\u0002\u0b59\u0b56\u0003\u0002\u0002",
    "\u0002\u0b59\u0b57\u0003\u0002\u0002\u0002\u0b59\u0b58\u0003\u0002\u0002",
    "\u0002\u0b5a\u010f\u0003\u0002\u0002\u0002\u0b5b\u0b5c\u0007\u019b\u0002",
    "\u0002\u0b5c\u0b5d\u0005\u0110\u0089\u0002\u0b5d\u0b5e\u0007\u019c\u0002",
    "\u0002\u0b5e\u0b63\u0003\u0002\u0002\u0002\u0b5f\u0b60\u0005\u0112\u008a",
    "\u0002\u0b60\u0b61\u0005\u0126\u0094\u0002\u0b61\u0b63\u0003\u0002\u0002",
    "\u0002\u0b62\u0b5b\u0003\u0002\u0002\u0002\u0b62\u0b5f\u0003\u0002\u0002",
    "\u0002\u0b63\u0111\u0003\u0002\u0002\u0002\u0b64\u0b65\u0006\u008a,",
    "\u0002\u0b65\u0b67\u0005\u0142\u00a2\u0002\u0b66\u0b64\u0003\u0002\u0002",
    "\u0002\u0b66\u0b67\u0003\u0002\u0002\u0002\u0b67\u0b77\u0003\u0002\u0002",
    "\u0002\u0b68\u0b6a\u0005\u0114\u008b\u0002\u0b69\u0b6b\u0005\u014a\u00a6",
    "\u0002\u0b6a\u0b69\u0003\u0002\u0002\u0002\u0b6a\u0b6b\u0003\u0002\u0002",
    "\u0002\u0b6b\u0b6d\u0003\u0002\u0002\u0002\u0b6c\u0b6e\u0005\u011e\u0090",
    "\u0002\u0b6d\u0b6c\u0003\u0002\u0002\u0002\u0b6d\u0b6e\u0003\u0002\u0002",
    "\u0002\u0b6e\u0b78\u0003\u0002\u0002\u0002\u0b6f\u0b75\u0005\u0116\u008c",
    "\u0002\u0b70\u0b72\u0005\u014a\u00a6\u0002\u0b71\u0b73\u0005\u011e\u0090",
    "\u0002\u0b72\u0b71\u0003\u0002\u0002\u0002\u0b72\u0b73\u0003\u0002\u0002",
    "\u0002\u0b73\u0b76\u0003\u0002\u0002\u0002\u0b74\u0b76\u0005\u011e\u0090",
    "\u0002\u0b75\u0b70\u0003\u0002\u0002\u0002\u0b75\u0b74\u0003\u0002\u0002",
    "\u0002\u0b76\u0b78\u0003\u0002\u0002\u0002\u0b77\u0b68\u0003\u0002\u0002",
    "\u0002\u0b77\u0b6f\u0003\u0002\u0002\u0002\u0b78\u0b7b\u0003\u0002\u0002",
    "\u0002\u0b79\u0b7a\u0006\u008a-\u0002\u0b7a\u0b7c\u0005\u0128\u0095",
    "\u0002\u0b7b\u0b79\u0003\u0002\u0002\u0002\u0b7b\u0b7c\u0003\u0002\u0002",
    "\u0002\u0b7c\u0b7e\u0003\u0002\u0002\u0002\u0b7d\u0b7f\u0005\u0154\u00ab",
    "\u0002\u0b7e\u0b7d\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0003\u0002\u0002",
    "\u0002\u0b7f\u0b87\u0003\u0002\u0002\u0002\u0b80\u0b81\u0006\u008a.",
    "\u0002\u0b81\u0b82\u0005\u0142\u00a2\u0002\u0b82\u0b84\u0005\u0116\u008c",
    "\u0002\u0b83\u0b85\u0005\u0154\u00ab\u0002\u0b84\u0b83\u0003\u0002\u0002",
    "\u0002\u0b84\u0b85\u0003\u0002\u0002\u0002\u0b85\u0b87\u0003\u0002\u0002",
    "\u0002\u0b86\u0b66\u0003\u0002\u0002\u0002\u0b86\u0b80\u0003\u0002\u0002",
    "\u0002\u0b87\u0113\u0003\u0002\u0002\u0002\u0b88\u0b89\b\u008b\u0001",
    "\u0002\u0b89\u0b94\u0005\u0118\u008d\u0002\u0b8a\u0b8b\u0005\u0116\u008c",
    "\u0002\u0b8b\u0b8d\u0007\u0295\u0002\u0002\u0b8c\u0b8e\u0005\u0186\u00c4",
    "\u0002\u0b8d\u0b8c\u0003\u0002\u0002\u0002\u0b8d\u0b8e\u0003\u0002\u0002",
    "\u0002\u0b8e\u0b91\u0003\u0002\u0002\u0002\u0b8f\u0b92\u0005\u0118\u008d",
    "\u0002\u0b90\u0b92\u0005\u0116\u008c\u0002\u0b91\u0b8f\u0003\u0002\u0002",
    "\u0002\u0b91\u0b90\u0003\u0002\u0002\u0002\u0b92\u0b94\u0003\u0002\u0002",
    "\u0002\u0b93\u0b88\u0003\u0002\u0002\u0002\u0b93\u0b8a\u0003\u0002\u0002",
    "\u0002\u0b94\u0ba0\u0003\u0002\u0002\u0002\u0b95\u0b96\f\u0004\u0002",
    "\u0002\u0b96\u0b98\u0007\u0295\u0002\u0002\u0b97\u0b99\u0005\u0186\u00c4",
    "\u0002\u0b98\u0b97\u0003\u0002\u0002\u0002\u0b98\u0b99\u0003\u0002\u0002",
    "\u0002\u0b99\u0b9c\u0003\u0002\u0002\u0002\u0b9a\u0b9d\u0005\u0118\u008d",
    "\u0002\u0b9b\u0b9d\u0005\u0116\u008c\u0002\u0b9c\u0b9a\u0003\u0002\u0002",
    "\u0002\u0b9c\u0b9b\u0003\u0002\u0002\u0002\u0b9d\u0b9f\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b95\u0003\u0002\u0002\u0002\u0b9f\u0ba2\u0003\u0002\u0002",
    "\u0002\u0ba0\u0b9e\u0003\u0002\u0002\u0002\u0ba0\u0ba1\u0003\u0002\u0002",
    "\u0002\u0ba1\u0115\u0003\u0002\u0002\u0002\u0ba2\u0ba0\u0003\u0002\u0002",
    "\u0002\u0ba3\u0ba6\u0007\u019b\u0002\u0002\u0ba4\u0ba7\u0005\u0116\u008c",
    "\u0002\u0ba5\u0ba7\u0005\u0112\u008a\u0002\u0ba6\u0ba4\u0003\u0002\u0002",
    "\u0002\u0ba6\u0ba5\u0003\u0002\u0002\u0002\u0ba7\u0ba8\u0003\u0002\u0002",
    "\u0002\u0ba8\u0ba9\u0007\u019c\u0002\u0002\u0ba9\u0117\u0003\u0002\u0002",
    "\u0002\u0baa\u0bae\u0007\u0268\u0002\u0002\u0bab\u0bad\u0005\u0152\u00aa",
    "\u0002\u0bac\u0bab\u0003\u0002\u0002\u0002\u0bad\u0bb0\u0003\u0002\u0002",
    "\u0002\u0bae\u0bac\u0003\u0002\u0002\u0002\u0bae\u0baf\u0003\u0002\u0002",
    "\u0002\u0baf\u0bb1\u0003\u0002\u0002\u0002\u0bb0\u0bae\u0003\u0002\u0002",
    "\u0002\u0bb1\u0bb3\u0005\u015a\u00ae\u0002\u0bb2\u0bb4\u0005\u0126\u0094",
    "\u0002\u0bb3\u0bb2\u0003\u0002\u0002\u0002\u0bb3\u0bb4\u0003\u0002\u0002",
    "\u0002\u0bb4\u0bb6\u0003\u0002\u0002\u0002\u0bb5\u0bb7\u0005\u014e\u00a8",
    "\u0002\u0bb6\u0bb5\u0003\u0002\u0002\u0002\u0bb6\u0bb7\u0003\u0002\u0002",
    "\u0002\u0bb7\u0bb9\u0003\u0002\u0002\u0002\u0bb8\u0bba\u0005\u0160\u00b1",
    "\u0002\u0bb9\u0bb8\u0003\u0002\u0002\u0002\u0bb9\u0bba\u0003\u0002\u0002",
    "\u0002\u0bba\u0bbc\u0003\u0002\u0002\u0002\u0bbb\u0bbd\u0005\u0146\u00a4",
    "\u0002\u0bbc\u0bbb\u0003\u0002\u0002\u0002\u0bbc\u0bbd\u0003\u0002\u0002",
    "\u0002\u0bbd\u0bbf\u0003\u0002\u0002\u0002\u0bbe\u0bc0\u0005\u012a\u0096",
    "\u0002\u0bbf\u0bbe\u0003\u0002\u0002\u0002\u0bbf\u0bc0\u0003\u0002\u0002",
    "\u0002\u0bc0\u0bc3\u0003\u0002\u0002\u0002\u0bc1\u0bc2\u0006\u008d0",
    "\u0002\u0bc2\u0bc4\u0005\u012c\u0097\u0002\u0bc3\u0bc1\u0003\u0002\u0002",
    "\u0002\u0bc3\u0bc4\u0003\u0002\u0002\u0002\u0bc4\u0119\u0003\u0002\u0002",
    "\u0002\u0bc5\u0bc6\u0005\u0116\u008c\u0002\u0bc6\u011b\u0003\u0002\u0002",
    "\u0002\u0bc7\u0bc8\t\u001f\u0002\u0002\u0bc8\u011d\u0003\u0002\u0002",
    "\u0002\u0bc9\u0bca\u0007\u0221\u0002\u0002\u0bca\u0bcb\u0005\u0122\u0092",
    "\u0002\u0bcb\u011f\u0003\u0002\u0002\u0002\u0bcc\u0bcd\u0007\u0221\u0002",
    "\u0002\u0bcd\u0bce\u0005\u0124\u0093\u0002\u0bce\u0121\u0003\u0002\u0002",
    "\u0002\u0bcf\u0bd2\u0005\u0124\u0093\u0002\u0bd0\u0bd1\t \u0002\u0002",
    "\u0bd1\u0bd3\u0005\u0124\u0093\u0002\u0bd2\u0bd0\u0003\u0002\u0002\u0002",
    "\u0bd2\u0bd3\u0003\u0002\u0002\u0002\u0bd3\u0123\u0003\u0002\u0002\u0002",
    "\u0bd4\u0bd7\u0005\u0460\u0231\u0002\u0bd5\u0bd7\t!\u0002\u0002\u0bd6",
    "\u0bd4\u0003\u0002\u0002\u0002\u0bd6\u0bd5\u0003\u0002\u0002\u0002\u0bd7",
    "\u0125\u0003\u0002\u0002\u0002\u0bd8\u0bf4\u0007\u0212\u0002\u0002\u0bd9",
    "\u0bda\u0007\u024f\u0002\u0002\u0bda\u0bdc\u0005\u047a\u023e\u0002\u0bdb",
    "\u0bdd\u0005\u03de\u01f0\u0002\u0bdc\u0bdb\u0003\u0002\u0002\u0002\u0bdc",
    "\u0bdd\u0003\u0002\u0002\u0002\u0bdd\u0bdf\u0003\u0002\u0002\u0002\u0bde",
    "\u0be0\u0005\u03e0\u01f1\u0002\u0bdf\u0bde\u0003\u0002\u0002\u0002\u0bdf",
    "\u0be0\u0003\u0002\u0002\u0002\u0be0\u0be2\u0003\u0002\u0002\u0002\u0be1",
    "\u0be3\u0005\u03e4\u01f3\u0002\u0be2\u0be1\u0003\u0002\u0002\u0002\u0be2",
    "\u0be3\u0003\u0002\u0002\u0002\u0be3\u0bf5\u0003\u0002\u0002\u0002\u0be4",
    "\u0be5\u0007}\u0002\u0002\u0be5\u0bf5\u0005\u047a\u023e\u0002\u0be6",
    "\u0be9\u0005\u0494\u024b\u0002\u0be7\u0be9\u0005\u02de\u0170\u0002\u0be8",
    "\u0be6\u0003\u0002\u0002\u0002\u0be8\u0be7\u0003\u0002\u0002\u0002\u0be9",
    "\u0bf1\u0003\u0002\u0002\u0002\u0bea\u0bed\u0007\u0198\u0002\u0002\u0beb",
    "\u0bee\u0005\u0494\u024b\u0002\u0bec\u0bee\u0005\u02de\u0170\u0002\u0bed",
    "\u0beb\u0003\u0002\u0002\u0002\u0bed\u0bec\u0003\u0002\u0002\u0002\u0bee",
    "\u0bf0\u0003\u0002\u0002\u0002\u0bef\u0bea\u0003\u0002\u0002\u0002\u0bf0",
    "\u0bf3\u0003\u0002\u0002\u0002\u0bf1\u0bef\u0003\u0002\u0002\u0002\u0bf1",
    "\u0bf2\u0003\u0002\u0002\u0002\u0bf2\u0bf5\u0003\u0002\u0002\u0002\u0bf3",
    "\u0bf1\u0003\u0002\u0002\u0002\u0bf4\u0bd9\u0003\u0002\u0002\u0002\u0bf4",
    "\u0be4\u0003\u0002\u0002\u0002\u0bf4\u0be8\u0003\u0002\u0002\u0002\u0bf5",
    "\u0127\u0003\u0002\u0002\u0002\u0bf6\u0bf7\u0007\u0254\u0002\u0002\u0bf7",
    "\u0bf8\u0007\u01af\u0002\u0002\u0bf8\u0bfe\u0007\u019b\u0002\u0002\u0bf9",
    "\u0bfc\u0007\u017e\u0002\u0002\u0bfa\u0bfb\u0007\u0198\u0002\u0002\u0bfb",
    "\u0bfd\u0007\u017e\u0002\u0002\u0bfc\u0bfa\u0003\u0002\u0002\u0002\u0bfc",
    "\u0bfd\u0003\u0002\u0002\u0002\u0bfd\u0bff\u0003\u0002\u0002\u0002\u0bfe",
    "\u0bf9\u0003\u0002\u0002\u0002\u0bfe\u0bff\u0003\u0002\u0002\u0002\u0bff",
    "\u0c00\u0003\u0002\u0002\u0002\u0c00\u0c01\u0007\u019c\u0002\u0002\u0c01",
    "\u0129\u0003\u0002\u0002\u0002\u0c02\u0c03\u0007\u0204\u0002\u0002\u0c03",
    "\u0c04\u0005\u029c\u014f\u0002\u0c04\u012b\u0003\u0002\u0002\u0002\u0c05",
    "\u0c06\u0007\u02db\u0002\u0002\u0c06\u0c0b\u0005\u012e\u0098\u0002\u0c07",
    "\u0c08\u0007\u0198\u0002\u0002\u0c08\u0c0a\u0005\u012e\u0098\u0002\u0c09",
    "\u0c07\u0003\u0002\u0002\u0002\u0c0a\u0c0d\u0003\u0002\u0002\u0002\u0c0b",
    "\u0c09\u0003\u0002\u0002\u0002\u0c0b\u0c0c\u0003\u0002\u0002\u0002\u0c0c",
    "\u012d\u0003\u0002\u0002\u0002\u0c0d\u0c0b\u0003\u0002\u0002\u0002\u0c0e",
    "\u0c0f\u0005\u045c\u022f\u0002\u0c0f\u0c10\u0007\u01b1\u0002\u0002\u0c10",
    "\u0c11\u0005\u0130\u0099\u0002\u0c11\u012f\u0003\u0002\u0002\u0002\u0c12",
    "\u0c13\u0007\u019b\u0002\u0002\u0c13\u0c14\u0005\u0132\u009a\u0002\u0c14",
    "\u0c15\u0007\u019c\u0002\u0002\u0c15\u0131\u0003\u0002\u0002\u0002\u0c16",
    "\u0c18\u0005\u045c\u022f\u0002\u0c17\u0c16\u0003\u0002\u0002\u0002\u0c17",
    "\u0c18\u0003\u0002\u0002\u0002\u0c18\u0c1c\u0003\u0002\u0002\u0002\u0c19",
    "\u0c1a\u0007\"\u0002\u0002\u0c1a\u0c1b\u0007\u01be\u0002\u0002\u0c1b",
    "\u0c1d\u0005\u02fe\u0180\u0002\u0c1c\u0c19\u0003\u0002\u0002\u0002\u0c1c",
    "\u0c1d\u0003\u0002\u0002\u0002\u0c1d\u0c1f\u0003\u0002\u0002\u0002\u0c1e",
    "\u0c20\u0005\u014a\u00a6\u0002\u0c1f\u0c1e\u0003\u0002\u0002\u0002\u0c1f",
    "\u0c20\u0003\u0002\u0002\u0002\u0c20\u0c22\u0003\u0002\u0002\u0002\u0c21",
    "\u0c23\u0005\u0134\u009b\u0002\u0c22\u0c21\u0003\u0002\u0002\u0002\u0c22",
    "\u0c23\u0003\u0002\u0002\u0002\u0c23\u0133\u0003\u0002\u0002\u0002\u0c24",
    "\u0c25\u0005\u0136\u009c\u0002\u0c25\u0c27\u0005\u0138\u009d\u0002\u0c26",
    "\u0c28\u0005\u0140\u00a1\u0002\u0c27\u0c26\u0003\u0002\u0002\u0002\u0c27",
    "\u0c28\u0003\u0002\u0002\u0002\u0c28\u0135\u0003\u0002\u0002\u0002\u0c29",
    "\u0c2a\t\"\u0002\u0002\u0c2a\u0137\u0003\u0002\u0002\u0002\u0c2b\u0c2e",
    "\u0005\u013a\u009e\u0002\u0c2c\u0c2e\u0005\u013c\u009f\u0002\u0c2d\u0c2b",
    "\u0003\u0002\u0002\u0002\u0c2d\u0c2c\u0003\u0002\u0002\u0002\u0c2e\u0139",
    "\u0003\u0002\u0002\u0002\u0c2f\u0c30\u0007\u02da\u0002\u0002\u0c30\u0c3e",
    "\u0007\u02d5\u0002\u0002\u0c31\u0c32\u0005\u0470\u0239\u0002\u0c32\u0c33",
    "\u0007\u02d5\u0002\u0002\u0c33\u0c3e\u0003\u0002\u0002\u0002\u0c34\u0c35",
    "\u0007\u01a6\u0002\u0002\u0c35\u0c3e\u0007\u02d5\u0002\u0002\u0c36\u0c37",
    "\u0007\u0211\u0002\u0002\u0c37\u0c38\u0005\u029c\u014f\u0002\u0c38\u0c39",
    "\u0005\u02f4\u017b\u0002\u0c39\u0c3a\u0007\u02d5\u0002\u0002\u0c3a\u0c3e",
    "\u0003\u0002\u0002\u0002\u0c3b\u0c3c\u0007m\u0002\u0002\u0c3c\u0c3e",
    "\u0007\u012f\u0002\u0002\u0c3d\u0c2f\u0003\u0002\u0002\u0002\u0c3d\u0c31",
    "\u0003\u0002\u0002\u0002\u0c3d\u0c34\u0003\u0002\u0002\u0002\u0c3d\u0c36",
    "\u0003\u0002\u0002\u0002\u0c3d\u0c3b\u0003\u0002\u0002\u0002\u0c3e\u013b",
    "\u0003\u0002\u0002\u0002\u0c3f\u0c40\u0007\u01b5\u0002\u0002\u0c40\u0c41",
    "\u0005\u013e\u00a0\u0002\u0c41\u0c42\u0007\u01b0\u0002\u0002\u0c42\u0c43",
    "\u0005\u013e\u00a0\u0002\u0c43\u013d\u0003\u0002\u0002\u0002\u0c44\u0c52",
    "\u0005\u013a\u009e\u0002\u0c45\u0c46\u0007\u02da\u0002\u0002\u0c46\u0c52",
    "\u0007\u02ca\u0002\u0002\u0c47\u0c48\u0005\u0470\u0239\u0002\u0c48\u0c49",
    "\u0007\u02ca\u0002\u0002\u0c49\u0c52\u0003\u0002\u0002\u0002\u0c4a\u0c4b",
    "\u0007\u01a6\u0002\u0002\u0c4b\u0c52\u0007\u02ca\u0002\u0002\u0c4c\u0c4d",
    "\u0007\u0211\u0002\u0002\u0c4d\u0c4e\u0005\u029c\u014f\u0002\u0c4e\u0c4f",
    "\u0005\u02f4\u017b\u0002\u0c4f\u0c50\u0007\u02ca\u0002\u0002\u0c50\u0c52",
    "\u0003\u0002\u0002\u0002\u0c51\u0c44\u0003\u0002\u0002\u0002\u0c51\u0c45",
    "\u0003\u0002\u0002\u0002\u0c51\u0c47\u0003\u0002\u0002\u0002\u0c51\u0c4a",
    "\u0003\u0002\u0002\u0002\u0c51\u0c4c\u0003\u0002\u0002\u0002\u0c52\u013f",
    "\u0003\u0002\u0002\u0002\u0c53\u0c5a\u0007\u02c8\u0002\u0002\u0c54\u0c55",
    "\u0007m\u0002\u0002\u0c55\u0c5b\u0007\u012f\u0002\u0002\u0c56\u0c5b",
    "\u0007\u0202\u0002\u0002\u0c57\u0c5b\u0007\u02d9\u0002\u0002\u0c58\u0c59",
    "\u0007\u001d\u0002\u0002\u0c59\u0c5b\u0007\u02d2\u0002\u0002\u0c5a\u0c54",
    "\u0003\u0002\u0002\u0002\u0c5a\u0c56\u0003\u0002\u0002\u0002\u0c5a\u0c57",
    "\u0003\u0002\u0002\u0002\u0c5a\u0c58\u0003\u0002\u0002\u0002\u0c5b\u0141",
    "\u0003\u0002\u0002\u0002\u0c5c\u0c5e\u0007\u02ac\u0002\u0002\u0c5d\u0c5f",
    "\u0007\u02b9\u0002\u0002\u0c5e\u0c5d\u0003\u0002\u0002\u0002\u0c5e\u0c5f",
    "\u0003\u0002\u0002\u0002\u0c5f\u0c60\u0003\u0002\u0002\u0002\u0c60\u0c65",
    "\u0005\u0144\u00a3\u0002\u0c61\u0c62\u0007\u0198\u0002\u0002\u0c62\u0c64",
    "\u0005\u0144\u00a3\u0002\u0c63\u0c61\u0003\u0002\u0002\u0002\u0c64\u0c67",
    "\u0003\u0002\u0002\u0002\u0c65\u0c63\u0003\u0002\u0002\u0002\u0c65\u0c66",
    "\u0003\u0002\u0002\u0002\u0c66\u0143\u0003\u0002\u0002\u0002\u0c67\u0c65",
    "\u0003\u0002\u0002\u0002\u0c68\u0c6a\u0005\u0460\u0231\u0002\u0c69\u0c6b",
    "\u0005\u040c\u0207\u0002\u0c6a\u0c69\u0003\u0002\u0002\u0002\u0c6a\u0c6b",
    "\u0003\u0002\u0002\u0002\u0c6b\u0c6c\u0003\u0002\u0002\u0002\u0c6c\u0c6d",
    "\u0007\u01b1\u0002\u0002\u0c6d\u0c6e\u0005\u011a\u008e\u0002\u0c6e\u0145",
    "\u0003\u0002\u0002\u0002\u0c6f\u0c70\u0007\u0202\u0002\u0002\u0c70\u0c71",
    "\u0007\u01be\u0002\u0002\u0c71\u0c73\u0005\u02fe\u0180\u0002\u0c72\u0c74",
    "\u0005\u0148\u00a5\u0002\u0c73\u0c72\u0003\u0002\u0002\u0002\u0c73\u0c74",
    "\u0003\u0002\u0002\u0002\u0c74\u0147\u0003\u0002\u0002\u0002\u0c75\u0c76",
    "\u0007\u02ac\u0002\u0002\u0c76\u0c7b\u0007\u0129\u0002\u0002\u0c77\u0c78",
    "\u0006\u00a51\u0002\u0c78\u0c79\u0007\u02ac\u0002\u0002\u0c79\u0c7b",
    "\u0007l\u0002\u0002\u0c7a\u0c75\u0003\u0002\u0002\u0002\u0c7a\u0c77",
    "\u0003\u0002\u0002\u0002\u0c7b\u0149\u0003\u0002\u0002\u0002\u0c7c\u0c7d",
    "\u0007\u024c\u0002\u0002\u0c7d\u0c7e\u0007\u01be\u0002\u0002\u0c7e\u0c7f",
    "\u0005\u02fe\u0180\u0002\u0c7f\u014b\u0003\u0002\u0002\u0002\u0c80\u0c81",
    "\t#\u0002\u0002\u0c81\u014d\u0003\u0002\u0002\u0002\u0c82\u0c85\u0007",
    "\u01fd\u0002\u0002\u0c83\u0c86\u0007\u01ea\u0002\u0002\u0c84\u0c86\u0005",
    "\u0150\u00a9\u0002\u0c85\u0c83\u0003\u0002\u0002\u0002\u0c85\u0c84\u0003",
    "\u0002\u0002\u0002\u0c86\u014f\u0003\u0002\u0002\u0002\u0c87\u0c8c\u0005",
    "\u0162\u00b2\u0002\u0c88\u0c89\u0007\u0198\u0002\u0002\u0c89\u0c8b\u0005",
    "\u0162\u00b2\u0002\u0c8a\u0c88\u0003\u0002\u0002\u0002\u0c8b\u0c8e\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c8a\u0003\u0002\u0002\u0002\u0c8c\u0c8d\u0003",
    "\u0002\u0002\u0002\u0c8d\u0151\u0003\u0002\u0002\u0002\u0c8e\u0c8c\u0003",
    "\u0002\u0002\u0002\u0c8f\u0c98\u0005\u011c\u008f\u0002\u0c90\u0c98\u0007",
    "\u0142\u0002\u0002\u0c91\u0c92\u0006\u00aa2\u0002\u0c92\u0c98\u0007",
    "\u0140\u0002\u0002\u0c93\u0c94\u0006\u00aa3\u0002\u0c94\u0c95\u0007",
    "\u00d3\u0002\u0002\u0c95\u0c96\u0007\u0181\u0002\u0002\u0c96\u0c98\u0005",
    "\u046e\u0238\u0002\u0c97\u0c8f\u0003\u0002\u0002\u0002\u0c97\u0c90\u0003",
    "\u0002\u0002\u0002\u0c97\u0c91\u0003\u0002\u0002\u0002\u0c97\u0c93\u0003",
    "\u0002\u0002\u0002\u0c98\u0153\u0003\u0002\u0002\u0002\u0c99\u0c9a\u0007",
    "\u01fc\u0002\u0002\u0c9a\u0c9e\u0005\u0156\u00ac\u0002\u0c9b\u0c9c\u0006",
    "\u00ab4\u0002\u0c9c\u0c9d\u0007\u02bc\u0002\u0002\u0c9d\u0c9f\u0005",
    "\u044a\u0226\u0002\u0c9e\u0c9b\u0003\u0002\u0002\u0002\u0c9e\u0c9f\u0003",
    "\u0002\u0002\u0002\u0c9f\u0ca2\u0003\u0002\u0002\u0002\u0ca0\u0ca1\u0006",
    "\u00ab5\u0002\u0ca1\u0ca3\u0005\u0158\u00ad\u0002\u0ca2\u0ca0\u0003",
    "\u0002\u0002\u0002\u0ca2\u0ca3\u0003\u0002\u0002\u0002\u0ca3\u0ca9\u0003",
    "\u0002\u0002\u0002\u0ca4\u0ca5\u0007\u0226\u0002\u0002\u0ca5\u0ca6\u0007",
    "\u0214\u0002\u0002\u0ca6\u0ca7\u0007\u0138\u0002\u0002\u0ca7\u0ca9\u0007",
    "\u00e0\u0002\u0002\u0ca8\u0c99\u0003\u0002\u0002\u0002\u0ca8\u0ca4\u0003",
    "\u0002\u0002\u0002\u0ca9\u0155\u0003\u0002\u0002\u0002\u0caa\u0cae\u0007",
    "\u0299\u0002\u0002\u0cab\u0cac\u0006\u00ac6\u0002\u0cac\u0cae\u0007",
    "\u0138\u0002\u0002\u0cad\u0caa\u0003\u0002\u0002\u0002\u0cad\u0cab\u0003",
    "\u0002\u0002\u0002\u0cae\u0157\u0003\u0002\u0002\u0002\u0caf\u0cb0\u0007",
    "\u02bd\u0002\u0002\u0cb0\u0cb3\u0007\u02be\u0002\u0002\u0cb1\u0cb3\u0007",
    "\u02bf\u0002\u0002\u0cb2\u0caf\u0003\u0002\u0002\u0002\u0cb2\u0cb1\u0003",
    "\u0002\u0002\u0002\u0cb3\u0159\u0003\u0002\u0002\u0002\u0cb4\u0cb7\u0005",
    "\u015c\u00af\u0002\u0cb5\u0cb7\u0007\u018b\u0002\u0002\u0cb6\u0cb4\u0003",
    "\u0002\u0002\u0002\u0cb6\u0cb5\u0003\u0002\u0002\u0002\u0cb7\u0cbc\u0003",
    "\u0002\u0002\u0002\u0cb8\u0cb9\u0007\u0198\u0002\u0002\u0cb9\u0cbb\u0005",
    "\u015c\u00af\u0002\u0cba\u0cb8\u0003\u0002\u0002\u0002\u0cbb\u0cbe\u0003",
    "\u0002\u0002\u0002\u0cbc\u0cba\u0003\u0002\u0002\u0002\u0cbc\u0cbd\u0003",
    "\u0002\u0002\u0002\u0cbd\u015b\u0003\u0002\u0002\u0002\u0cbe\u0cbc\u0003",
    "\u0002\u0002\u0002\u0cbf\u0cc5\u0005\u0416\u020c\u0002\u0cc0\u0cc2\u0005",
    "\u029c\u014f\u0002\u0cc1\u0cc3\u0005\u015e\u00b0\u0002\u0cc2\u0cc1\u0003",
    "\u0002\u0002\u0002\u0cc2\u0cc3\u0003\u0002\u0002\u0002\u0cc3\u0cc5\u0003",
    "\u0002\u0002\u0002\u0cc4\u0cbf\u0003\u0002\u0002\u0002\u0cc4\u0cc0\u0003",
    "\u0002\u0002\u0002\u0cc5\u015d\u0003\u0002\u0002\u0002\u0cc6\u0cc8\u0007",
    "\u01b1\u0002\u0002\u0cc7\u0cc6\u0003\u0002\u0002\u0002\u0cc7\u0cc8\u0003",
    "\u0002\u0002\u0002\u0cc8\u0ccb\u0003\u0002\u0002\u0002\u0cc9\u0ccc\u0005",
    "\u0460\u0231\u0002\u0cca\u0ccc\u0005\u047a\u023e\u0002\u0ccb\u0cc9\u0003",
    "\u0002\u0002\u0002\u0ccb\u0cca\u0003\u0002\u0002\u0002\u0ccc\u015f\u0003",
    "\u0002\u0002\u0002\u0ccd\u0cce\u0007\u02aa\u0002\u0002\u0cce\u0ccf\u0005",
    "\u029c\u014f\u0002\u0ccf\u0161\u0003\u0002\u0002\u0002\u0cd0\u0cdb\u0005",
    "\u016e\u00b8\u0002\u0cd1\u0cd5\u0007\u019d\u0002\u0002\u0cd2\u0cd3\u0006",
    "\u00b27\u0002\u0cd3\u0cd6\u0005\u0460\u0231\u0002\u0cd4\u0cd6\u0007",
    "\u02fc\u0002\u0002\u0cd5\u0cd2\u0003\u0002\u0002\u0002\u0cd5\u0cd4\u0003",
    "\u0002\u0002\u0002\u0cd6\u0cd7\u0003\u0002\u0002\u0002\u0cd7\u0cd8\u0005",
    "\u0164\u00b3\u0002\u0cd8\u0cd9\u0007\u019e\u0002\u0002\u0cd9\u0cdb\u0003",
    "\u0002\u0002\u0002\u0cda\u0cd0\u0003\u0002\u0002\u0002\u0cda\u0cd1\u0003",
    "\u0002\u0002\u0002\u0cdb\u0cdf\u0003\u0002\u0002\u0002\u0cdc\u0cde\u0005",
    "\u0166\u00b4\u0002\u0cdd\u0cdc\u0003\u0002\u0002\u0002\u0cde\u0ce1\u0003",
    "\u0002\u0002\u0002\u0cdf\u0cdd\u0003\u0002\u0002\u0002\u0cdf\u0ce0\u0003",
    "\u0002\u0002\u0002\u0ce0\u0163\u0003\u0002\u0002\u0002\u0ce1\u0cdf\u0003",
    "\u0002\u0002\u0002\u0ce2\u0ce6\u0005\u016e\u00b8\u0002\u0ce3\u0ce5\u0005",
    "\u0166\u00b4\u0002\u0ce4\u0ce3\u0003\u0002\u0002\u0002\u0ce5\u0ce8\u0003",
    "\u0002\u0002\u0002\u0ce6\u0ce4\u0003\u0002\u0002\u0002\u0ce6\u0ce7\u0003",
    "\u0002\u0002\u0002\u0ce7\u0165\u0003\u0002\u0002\u0002\u0ce8\u0ce6\u0003",
    "\u0002\u0002\u0002\u0ce9\u0cea\u0005\u016a\u00b6\u0002\u0cea\u0cef\u0005",
    "\u0162\u00b2\u0002\u0ceb\u0cec\u0007\u0245\u0002\u0002\u0cec\u0cf0\u0005",
    "\u029c\u014f\u0002\u0ced\u0cee\u0007\u029c\u0002\u0002\u0cee\u0cf0\u0005",
    "\u0464\u0233\u0002\u0cef\u0ceb\u0003\u0002\u0002\u0002\u0cef\u0ced\u0003",
    "\u0002\u0002\u0002\u0cef\u0cf0\u0003\u0002\u0002\u0002\u0cf0\u0cfd\u0003",
    "\u0002\u0002\u0002\u0cf1\u0cf2\u0005\u016c\u00b7\u0002\u0cf2\u0cf7\u0005",
    "\u0162\u00b2\u0002\u0cf3\u0cf4\u0007\u0245\u0002\u0002\u0cf4\u0cf8\u0005",
    "\u029c\u014f\u0002\u0cf5\u0cf6\u0007\u029c\u0002\u0002\u0cf6\u0cf8\u0005",
    "\u0464\u0233\u0002\u0cf7\u0cf3\u0003\u0002\u0002\u0002\u0cf7\u0cf5\u0003",
    "\u0002\u0002\u0002\u0cf8\u0cfd\u0003\u0002\u0002\u0002\u0cf9\u0cfa\u0005",
    "\u0168\u00b5\u0002\u0cfa\u0cfb\u0005\u016e\u00b8\u0002\u0cfb\u0cfd\u0003",
    "\u0002\u0002\u0002\u0cfc\u0ce9\u0003\u0002\u0002\u0002\u0cfc\u0cf1\u0003",
    "\u0002\u0002\u0002\u0cfc\u0cf9\u0003\u0002\u0002\u0002\u0cfd\u0167\u0003",
    "\u0002\u0002\u0002\u0cfe\u0d00\u0007\u023b\u0002\u0002\u0cff\u0d01\u0007",
    "\u020d\u0002\u0002\u0d00\u0cff\u0003\u0002\u0002\u0002\u0d00\u0d01\u0003",
    "\u0002\u0002\u0002\u0d01\u0d02\u0003\u0002\u0002\u0002\u0d02\u0d0a\u0007",
    "\u0219\u0002\u0002\u0d03\u0d04\u0007\u023b\u0002\u0002\u0d04\u0d06\t",
    "$\u0002\u0002\u0d05\u0d07\u0007\u024e\u0002\u0002\u0d06\u0d05\u0003",
    "\u0002\u0002\u0002\u0d06\u0d07\u0003\u0002\u0002\u0002\u0d07\u0d08\u0003",
    "\u0002\u0002\u0002\u0d08\u0d0a\u0007\u0219\u0002\u0002\u0d09\u0cfe\u0003",
    "\u0002\u0002\u0002\u0d09\u0d03\u0003\u0002\u0002\u0002\u0d0a\u0169\u0003",
    "\u0002\u0002\u0002\u0d0b\u0d0d\t%\u0002\u0002\u0d0c\u0d0b\u0003\u0002",
    "\u0002\u0002\u0d0c\u0d0d\u0003\u0002\u0002\u0002\u0d0d\u0d0e\u0003\u0002",
    "\u0002\u0002\u0d0e\u0d11\u0007\u0219\u0002\u0002\u0d0f\u0d11\u0007\u0282",
    "\u0002\u0002\u0d10\u0d0c\u0003\u0002\u0002\u0002\u0d10\u0d0f\u0003\u0002",
    "\u0002\u0002\u0d11\u016b\u0003\u0002\u0002\u0002\u0d12\u0d14\t$\u0002",
    "\u0002\u0d13\u0d15\u0007\u024e\u0002\u0002\u0d14\u0d13\u0003\u0002\u0002",
    "\u0002\u0d14\u0d15\u0003\u0002\u0002\u0002\u0d15\u0d16\u0003\u0002\u0002",
    "\u0002\u0d16\u0d17\u0007\u0219\u0002\u0002\u0d17\u016d\u0003\u0002\u0002",
    "\u0002\u0d18\u0d1f\u0005\u0170\u00b9\u0002\u0d19\u0d1f\u0005\u0172\u00ba",
    "\u0002\u0d1a\u0d1f\u0005\u0174\u00bb\u0002\u0d1b\u0d1f\u0005\u0176\u00bc",
    "\u0002\u0d1c\u0d1d\u0006\u00b88\u0002\u0d1d\u0d1f\u0005\u0178\u00bd",
    "\u0002\u0d1e\u0d18\u0003\u0002\u0002\u0002\u0d1e\u0d19\u0003\u0002\u0002",
    "\u0002\u0d1e\u0d1a\u0003\u0002\u0002\u0002\u0d1e\u0d1b\u0003\u0002\u0002",
    "\u0002\u0d1e\u0d1c\u0003\u0002\u0002\u0002\u0d1f\u016f\u0003\u0002\u0002",
    "\u0002\u0d20\u0d22\u0005\u0446\u0224\u0002\u0d21\u0d23\u0005\u0404\u0203",
    "\u0002\u0d22\u0d21\u0003\u0002\u0002\u0002\u0d22\u0d23\u0003\u0002\u0002",
    "\u0002\u0d23\u0d25\u0003\u0002\u0002\u0002\u0d24\u0d26\u0005\u0188\u00c5",
    "\u0002\u0d25\u0d24\u0003\u0002\u0002\u0002\u0d25\u0d26\u0003\u0002\u0002",
    "\u0002\u0d26\u0d28\u0003\u0002\u0002\u0002\u0d27\u0d29\u0005\u018a\u00c6",
    "\u0002\u0d28\u0d27\u0003\u0002\u0002\u0002\u0d28\u0d29\u0003\u0002\u0002",
    "\u0002\u0d29\u0171\u0003\u0002\u0002\u0002\u0d2a\u0d2d\u0007\u019b\u0002",
    "\u0002\u0d2b\u0d2e\u0005\u0170\u00b9\u0002\u0d2c\u0d2e\u0005\u0172\u00ba",
    "\u0002\u0d2d\u0d2b\u0003\u0002\u0002\u0002\u0d2d\u0d2c\u0003\u0002\u0002",
    "\u0002\u0d2e\u0d2f\u0003\u0002\u0002\u0002\u0d2f\u0d30\u0007\u019c\u0002",
    "\u0002\u0d30\u0173\u0003\u0002\u0002\u0002\u0d31\u0d33\u0005\u011a\u008e",
    "\u0002\u0d32\u0d34\u0005\u0188\u00c5\u0002\u0d33\u0d32\u0003\u0002\u0002",
    "\u0002\u0d33\u0d34\u0003\u0002\u0002\u0002\u0d34\u0d37\u0003\u0002\u0002",
    "\u0002\u0d35\u0d36\u0006\u00bb9\u0002\u0d36\u0d38\u0005\u040c\u0207",
    "\u0002\u0d37\u0d35\u0003\u0002\u0002\u0002\u0d37\u0d38\u0003\u0002\u0002",
    "\u0002\u0d38\u0d43\u0003\u0002\u0002\u0002\u0d39\u0d3a\u0006\u00bb:",
    "\u0002\u0d3a\u0d3b\u0007\u02f6\u0002\u0002\u0d3b\u0d3d\u0005\u011a\u008e",
    "\u0002\u0d3c\u0d3e\u0005\u0188\u00c5\u0002\u0d3d\u0d3c\u0003\u0002\u0002",
    "\u0002\u0d3d\u0d3e\u0003\u0002\u0002\u0002\u0d3e\u0d40\u0003\u0002\u0002",
    "\u0002\u0d3f\u0d41\u0005\u040c\u0207\u0002\u0d40\u0d3f\u0003\u0002\u0002",
    "\u0002\u0d40\u0d41\u0003\u0002\u0002\u0002\u0d41\u0d43\u0003\u0002\u0002",
    "\u0002\u0d42\u0d31\u0003\u0002\u0002\u0002\u0d42\u0d39\u0003\u0002\u0002",
    "\u0002\u0d43\u0175\u0003\u0002\u0002\u0002\u0d44\u0d47\u0007\u019b\u0002",
    "\u0002\u0d45\u0d48\u0005\u0150\u00a9\u0002\u0d46\u0d48\u0005\u0176\u00bc",
    "\u0002\u0d47\u0d45\u0003\u0002\u0002\u0002\u0d47\u0d46\u0003\u0002\u0002",
    "\u0002\u0d48\u0d49\u0003\u0002\u0002\u0002\u0d49\u0d4a\u0007\u019c\u0002",
    "\u0002\u0d4a\u0177\u0003\u0002\u0002\u0002\u0d4b\u0d4c\u0007\u02dd\u0002",
    "\u0002\u0d4c\u0d4d\u0007\u019b\u0002\u0002\u0d4d\u0d4e\u0005\u029c\u014f",
    "\u0002\u0d4e\u0d4f\u0007\u0198\u0002\u0002\u0d4f\u0d50\u0005\u047a\u023e",
    "\u0002\u0d50\u0d51\u0005\u017a\u00be\u0002\u0d51\u0d53\u0007\u019c\u0002",
    "\u0002\u0d52\u0d54\u0005\u0188\u00c5\u0002\u0d53\u0d52\u0003\u0002\u0002",
    "\u0002\u0d53\u0d54\u0003\u0002\u0002\u0002\u0d54\u0179\u0003\u0002\u0002",
    "\u0002\u0d55\u0d56\u0007\\\u0002\u0002\u0d56\u0d57\u0007\u019b\u0002",
    "\u0002\u0d57\u0d5c\u0005\u017c\u00bf\u0002\u0d58\u0d59\u0007\u0198\u0002",
    "\u0002\u0d59\u0d5b\u0005\u017c\u00bf\u0002\u0d5a\u0d58\u0003\u0002\u0002",
    "\u0002\u0d5b\u0d5e\u0003\u0002\u0002\u0002\u0d5c\u0d5a\u0003\u0002\u0002",
    "\u0002\u0d5c\u0d5d\u0003\u0002\u0002\u0002\u0d5d\u0d5f\u0003\u0002\u0002",
    "\u0002\u0d5e\u0d5c\u0003\u0002\u0002\u0002\u0d5f\u0d60\u0007\u019c\u0002",
    "\u0002\u0d60\u017b\u0003\u0002\u0002\u0002\u0d61\u0d62\u0005\u0460\u0231",
    "\u0002\u0d62\u0d63\u0007\u01fc\u0002\u0002\u0d63\u0d64\u0007\u02df\u0002",
    "\u0002\u0d64\u0d79\u0003\u0002\u0002\u0002\u0d65\u0d66\u0005\u0460\u0231",
    "\u0002\u0d66\u0d69\u0005\u038c\u01c7\u0002\u0d67\u0d68\u0006\u00bf;",
    "\u0002\u0d68\u0d6a\u0005\u03d2\u01ea\u0002\u0d69\u0d67\u0003\u0002\u0002",
    "\u0002\u0d69\u0d6a\u0003\u0002\u0002\u0002\u0d6a\u0d6c\u0003\u0002\u0002",
    "\u0002\u0d6b\u0d6d\u0007\u01f2\u0002\u0002\u0d6c\u0d6b\u0003\u0002\u0002",
    "\u0002\u0d6c\u0d6d\u0003\u0002\u0002\u0002\u0d6d\u0d6e\u0003\u0002\u0002",
    "\u0002\u0d6e\u0d6f\u0007\u02e0\u0002\u0002\u0d6f\u0d71\u0005\u047a\u023e",
    "\u0002\u0d70\u0d72\u0005\u017e\u00c0\u0002\u0d71\u0d70\u0003\u0002\u0002",
    "\u0002\u0d71\u0d72\u0003\u0002\u0002\u0002\u0d72\u0d79\u0003\u0002\u0002",
    "\u0002\u0d73\u0d74\u0007\u02de\u0002\u0002\u0d74\u0d75\u0007\u02e0\u0002",
    "\u0002\u0d75\u0d76\u0005\u047a\u023e\u0002\u0d76\u0d77\u0005\u017a\u00be",
    "\u0002\u0d77\u0d79\u0003\u0002\u0002\u0002\u0d78\u0d61\u0003\u0002\u0002",
    "\u0002\u0d78\u0d65\u0003\u0002\u0002\u0002\u0d78\u0d73\u0003\u0002\u0002",
    "\u0002\u0d79\u017d\u0003\u0002\u0002\u0002\u0d7a\u0d7c\u0005\u0180\u00c1",
    "\u0002\u0d7b\u0d7d\u0005\u0182\u00c2\u0002\u0d7c\u0d7b\u0003\u0002\u0002",
    "\u0002\u0d7c\u0d7d\u0003\u0002\u0002\u0002\u0d7d\u0d83\u0003\u0002\u0002",
    "\u0002\u0d7e\u0d80\u0005\u0182\u00c2\u0002\u0d7f\u0d81\u0005\u0180\u00c1",
    "\u0002\u0d80\u0d7f\u0003\u0002\u0002\u0002\u0d80\u0d81\u0003\u0002\u0002",
    "\u0002\u0d81\u0d83\u0003\u0002\u0002\u0002\u0d82\u0d7a\u0003\u0002\u0002",
    "\u0002\u0d82\u0d7e\u0003\u0002\u0002\u0002\u0d83\u017f\u0003\u0002\u0002",
    "\u0002\u0d84\u0d85\u0005\u0184\u00c3\u0002\u0d85\u0d86\u0007\u0245\u0002",
    "\u0002\u0d86\u0d87\u0007\u02dc\u0002\u0002\u0d87\u0181\u0003\u0002\u0002",
    "\u0002\u0d88\u0d89\u0005\u0184\u00c3\u0002\u0d89\u0d8a\u0007\u0245\u0002",
    "\u0002\u0d8a\u0d8b\u0007\u0084\u0002\u0002\u0d8b\u0183\u0003\u0002\u0002",
    "\u0002\u0d8c\u0d91\u0007\u0084\u0002\u0002\u0d8d\u0d91\u0007\u0242\u0002",
    "\u0002\u0d8e\u0d8f\u0007\u01e0\u0002\u0002\u0d8f\u0d91\u0005\u047a\u023e",
    "\u0002\u0d90\u0d8c\u0003\u0002\u0002\u0002\u0d90\u0d8d\u0003\u0002\u0002",
    "\u0002\u0d90\u0d8e\u0003\u0002\u0002\u0002\u0d91\u0185\u0003\u0002\u0002",
    "\u0002\u0d92\u0d93\t&\u0002\u0002\u0d93\u0187\u0003\u0002\u0002\u0002",
    "\u0d94\u0d98\u0007\u01b1\u0002\u0002\u0d95\u0d96\u0006\u00c5<\u0002",
    "\u0d96\u0d98\u0007\u0181\u0002\u0002\u0d97\u0d94\u0003\u0002\u0002\u0002",
    "\u0d97\u0d95\u0003\u0002\u0002\u0002\u0d97\u0d98\u0003\u0002\u0002\u0002",
    "\u0d98\u0d99\u0003\u0002\u0002\u0002\u0d99\u0d9a\u0005\u0460\u0231\u0002",
    "\u0d9a\u0189\u0003\u0002\u0002\u0002\u0d9b\u0da0\u0005\u018c\u00c7\u0002",
    "\u0d9c\u0d9d\u0007\u0198\u0002\u0002\u0d9d\u0d9f\u0005\u018c\u00c7\u0002",
    "\u0d9e\u0d9c\u0003\u0002\u0002\u0002\u0d9f\u0da2\u0003\u0002\u0002\u0002",
    "\u0da0\u0d9e\u0003\u0002\u0002\u0002\u0da0\u0da1\u0003\u0002\u0002\u0002",
    "\u0da1\u018b\u0003\u0002\u0002\u0002\u0da2\u0da0\u0003\u0002\u0002\u0002",
    "\u0da3\u0da4\u0005\u018e\u00c8\u0002\u0da4\u0da6\u0005\u0190\u00c9\u0002",
    "\u0da5\u0da7\u0005\u0194\u00cb\u0002\u0da6\u0da5\u0003\u0002\u0002\u0002",
    "\u0da6\u0da7\u0003\u0002\u0002\u0002\u0da7\u0da8\u0003\u0002\u0002\u0002",
    "\u0da8\u0da9\u0007\u019b\u0002\u0002\u0da9\u0daa\u0005\u0196\u00cc\u0002",
    "\u0daa\u0dab\u0007\u019c\u0002\u0002\u0dab\u0db8\u0003\u0002\u0002\u0002",
    "\u0dac\u0dad\u0007\u029b\u0002\u0002\u0dad\u0daf\u0005\u0190\u00c9\u0002",
    "\u0dae\u0db0\u0005\u0194\u00cb\u0002\u0daf\u0dae\u0003\u0002\u0002\u0002",
    "\u0daf\u0db0\u0003\u0002\u0002\u0002\u0db0\u0db1\u0003\u0002\u0002\u0002",
    "\u0db1\u0db3\u0007\u019b\u0002\u0002\u0db2\u0db4\u0005\u0196\u00cc\u0002",
    "\u0db3\u0db2\u0003\u0002\u0002\u0002\u0db3\u0db4\u0003\u0002\u0002\u0002",
    "\u0db4\u0db5\u0003\u0002\u0002\u0002\u0db5\u0db6\u0007\u019c\u0002\u0002",
    "\u0db6\u0db8\u0003\u0002\u0002\u0002\u0db7\u0da3\u0003\u0002\u0002\u0002",
    "\u0db7\u0dac\u0003\u0002\u0002\u0002\u0db8\u018d\u0003\u0002\u0002\u0002",
    "\u0db9\u0dba\t\'\u0002\u0002\u0dba\u018f\u0003\u0002\u0002\u0002\u0dbb",
    "\u0dbc\t(\u0002\u0002\u0dbc\u0191\u0003\u0002\u0002\u0002\u0dbd\u0dbe",
    "\u0007\u0253\u0002\u0002\u0dbe\u0dc4\u0007\u021b\u0002\u0002\u0dbf\u0dc1",
    "\u0007\u0296\u0002\u0002\u0dc0\u0dc2\u0005\u0190\u00c9\u0002\u0dc1\u0dc0",
    "\u0003\u0002\u0002\u0002\u0dc1\u0dc2\u0003\u0002\u0002\u0002\u0dc2\u0dc4",
    "\u0003\u0002\u0002\u0002\u0dc3\u0dbd\u0003\u0002\u0002\u0002\u0dc3\u0dbf",
    "\u0003\u0002\u0002\u0002\u0dc4\u0193\u0003\u0002\u0002\u0002\u0dc5\u0dcb",
    "\u0007\u01fc\u0002\u0002\u0dc6\u0dcc\u0007\u0219\u0002\u0002\u0dc7\u0dc8",
    "\u0007\u024c\u0002\u0002\u0dc8\u0dcc\u0007\u01be\u0002\u0002\u0dc9\u0dca",
    "\u0007\u0202\u0002\u0002\u0dca\u0dcc\u0007\u01be\u0002\u0002\u0dcb\u0dc6",
    "\u0003\u0002\u0002\u0002\u0dcb\u0dc7\u0003\u0002\u0002\u0002\u0dcb\u0dc9",
    "\u0003\u0002\u0002\u0002\u0dcc\u0195\u0003\u0002\u0002\u0002\u0dcd\u0dd2",
    "\u0005\u0198\u00cd\u0002\u0dce\u0dcf\u0007\u0198\u0002\u0002\u0dcf\u0dd1",
    "\u0005\u0198\u00cd\u0002\u0dd0\u0dce\u0003\u0002\u0002\u0002\u0dd1\u0dd4",
    "\u0003\u0002\u0002\u0002\u0dd2\u0dd0\u0003\u0002\u0002\u0002\u0dd2\u0dd3",
    "\u0003\u0002\u0002\u0002\u0dd3\u0197\u0003\u0002\u0002\u0002\u0dd4\u0dd2",
    "\u0003\u0002\u0002\u0002\u0dd5\u0dd8\u0005\u0460\u0231\u0002\u0dd6\u0dd8",
    "\u0007\u0253\u0002\u0002\u0dd7\u0dd5\u0003\u0002\u0002\u0002\u0dd7\u0dd6",
    "\u0003\u0002\u0002\u0002\u0dd8\u0199\u0003\u0002\u0002\u0002\u0dd9\u0dda",
    "\u0006\u00ce=\u0002\u0dda\u0ddc\u0005\u0142\u00a2\u0002\u0ddb\u0dd9",
    "\u0003\u0002\u0002\u0002\u0ddb\u0ddc\u0003\u0002\u0002\u0002\u0ddc\u0ddd",
    "\u0003\u0002\u0002\u0002\u0ddd\u0ddf\u0007\u0299\u0002\u0002\u0dde\u0de0",
    "\u0007\u022c\u0002\u0002\u0ddf\u0dde\u0003\u0002\u0002\u0002\u0ddf\u0de0",
    "\u0003\u0002\u0002\u0002\u0de0\u0de2\u0003\u0002\u0002\u0002\u0de1\u0de3",
    "\u0007\u020a\u0002\u0002\u0de2\u0de1\u0003\u0002\u0002\u0002\u0de2\u0de3",
    "\u0003\u0002\u0002\u0002\u0de3\u0de4\u0003\u0002\u0002\u0002\u0de4\u0de5",
    "\u0005\u0150\u00a9\u0002\u0de5\u0de6\u0007\u026d\u0002\u0002\u0de6\u0de8",
    "\u0005\u03da\u01ee\u0002\u0de7\u0de9\u0005\u0160\u00b1\u0002\u0de8\u0de7",
    "\u0003\u0002\u0002\u0002\u0de8\u0de9\u0003\u0002\u0002\u0002\u0de9\u0deb",
    "\u0003\u0002\u0002\u0002\u0dea\u0dec\u0005\u014a\u00a6\u0002\u0deb\u0dea",
    "\u0003\u0002\u0002\u0002\u0deb\u0dec\u0003\u0002\u0002\u0002\u0dec\u0dee",
    "\u0003\u0002\u0002\u0002\u0ded\u0def\u0005\u0120\u0091\u0002\u0dee\u0ded",
    "\u0003\u0002\u0002\u0002\u0dee\u0def\u0003\u0002\u0002\u0002\u0def\u019b",
    "\u0003\u0002\u0002\u0002\u0df0\u0df5\u0005\u019e\u00d0\u0002\u0df1\u0df5",
    "\u0005\u01a4\u00d3\u0002\u0df2\u0df5\u0005\u01a6\u00d4\u0002\u0df3\u0df5",
    "\u0005\u01ac\u00d7\u0002\u0df4\u0df0\u0003\u0002\u0002\u0002\u0df4\u0df1",
    "\u0003\u0002\u0002\u0002\u0df4\u0df2\u0003\u0002\u0002\u0002\u0df4\u0df3",
    "\u0003\u0002\u0002\u0002\u0df5\u019d\u0003\u0002\u0002\u0002\u0df6\u0df7",
    "\u00072\u0002\u0002\u0df7\u0dfb\u0007\u015d\u0002\u0002\u0df8\u0dfa",
    "\u0005\u01a2\u00d2\u0002\u0df9\u0df8\u0003\u0002\u0002\u0002\u0dfa\u0dfd",
    "\u0003\u0002\u0002\u0002\u0dfb\u0df9\u0003\u0002\u0002\u0002\u0dfb\u0dfc",
    "\u0003\u0002\u0002\u0002\u0dfc\u0e10\u0003\u0002\u0002\u0002\u0dfd\u0dfb",
    "\u0003\u0002\u0002\u0002\u0dfe\u0e00\u0007\u000e\u0002\u0002\u0dff\u0e01",
    "\u0007\u0176\u0002\u0002\u0e00\u0dff\u0003\u0002\u0002\u0002\u0e00\u0e01",
    "\u0003\u0002\u0002\u0002\u0e01\u0e07\u0003\u0002\u0002\u0002\u0e02\u0e04",
    "\u0007\u01b0\u0002\u0002\u0e03\u0e05\u0007\u001d\u0002\u0002\u0e04\u0e03",
    "\u0003\u0002\u0002\u0002\u0e04\u0e05\u0003\u0002\u0002\u0002\u0e05\u0e06",
    "\u0003\u0002\u0002\u0002\u0e06\u0e08\u0007Q\u0002\u0002\u0e07\u0e02",
    "\u0003\u0002\u0002\u0002\u0e07\u0e08\u0003\u0002\u0002\u0002\u0e08\u0e0d",
    "\u0003\u0002\u0002\u0002\u0e09\u0e0b\u0007\u001d\u0002\u0002\u0e0a\u0e09",
    "\u0003\u0002\u0002\u0002\u0e0a\u0e0b\u0003\u0002\u0002\u0002\u0e0b\u0e0c",
    "\u0003\u0002\u0002\u0002\u0e0c\u0e0e\u0007\u025d\u0002\u0002\u0e0d\u0e0a",
    "\u0003\u0002\u0002\u0002\u0e0d\u0e0e\u0003\u0002\u0002\u0002\u0e0e\u0e10",
    "\u0003\u0002\u0002\u0002\u0e0f\u0df6\u0003\u0002\u0002\u0002\u0e0f\u0dfe",
    "\u0003\u0002\u0002\u0002\u0e10\u019f\u0003\u0002\u0002\u0002\u0e11\u0e13",
    "\u0007\u0007\u0002\u0002\u0e12\u0e14\u0007\u0176\u0002\u0002\u0e13\u0e12",
    "\u0003\u0002\u0002\u0002\u0e13\u0e14\u0003\u0002\u0002\u0002\u0e14\u01a1",
    "\u0003\u0002\u0002\u0002\u0e15\u0e16\u0007\u02ac\u0002\u0002\u0e16\u0e17",
    "\u0007e\u0002\u0002\u0e17\u0e1c\u0007\u013a\u0002\u0002\u0e18\u0e19",
    "\u0006\u00d2>\u0002\u0e19\u0e1a\u0007\u0258\u0002\u0002\u0e1a\u0e1c",
    "\t)\u0002\u0002\u0e1b\u0e15\u0003\u0002\u0002\u0002\u0e1b\u0e18\u0003",
    "\u0002\u0002\u0002\u0e1c\u01a3\u0003\u0002\u0002\u0002\u0e1d\u0e1e\u0007",
    "+\u0002\u0002\u0e1e\u0e3b\u0005\u0460\u0231\u0002\u0e1f\u0e21\u0007",
    "*\u0002\u0002\u0e20\u0e22\u0007\u0176\u0002\u0002\u0e21\u0e20\u0003",
    "\u0002\u0002\u0002\u0e21\u0e22\u0003\u0002\u0002\u0002\u0e22\u0e35\u0003",
    "\u0002\u0002\u0002\u0e23\u0e25\u0007\u028f\u0002\u0002\u0e24\u0e26\u0007",
    "+\u0002\u0002\u0e25\u0e24\u0003\u0002\u0002\u0002\u0e25\u0e26\u0003",
    "\u0002\u0002\u0002\u0e26\u0e27\u0003\u0002\u0002\u0002\u0e27\u0e36\u0005",
    "\u0460\u0231\u0002\u0e28\u0e2a\u0007\u01b0\u0002\u0002\u0e29\u0e2b\u0007",
    "\u001d\u0002\u0002\u0e2a\u0e29\u0003\u0002\u0002\u0002\u0e2a\u0e2b\u0003",
    "\u0002\u0002\u0002\u0e2b\u0e2c\u0003\u0002\u0002\u0002\u0e2c\u0e2e\u0007",
    "Q\u0002\u0002\u0e2d\u0e28\u0003\u0002\u0002\u0002\u0e2d\u0e2e\u0003",
    "\u0002\u0002\u0002\u0e2e\u0e33\u0003\u0002\u0002\u0002\u0e2f\u0e31\u0007",
    "\u001d\u0002\u0002\u0e30\u0e2f\u0003\u0002\u0002\u0002\u0e30\u0e31\u0003",
    "\u0002\u0002\u0002\u0e31\u0e32\u0003\u0002\u0002\u0002\u0e32\u0e34\u0007",
    "\u025d\u0002\u0002\u0e33\u0e30\u0003\u0002\u0002\u0002\u0e33\u0e34\u0003",
    "\u0002\u0002\u0002\u0e34\u0e36\u0003\u0002\u0002\u0002\u0e35\u0e23\u0003",
    "\u0002\u0002\u0002\u0e35\u0e2d\u0003\u0002\u0002\u0002\u0e36\u0e3b\u0003",
    "\u0002\u0002\u0002\u0e37\u0e38\u0007\u025d\u0002\u0002\u0e38\u0e39\u0007",
    "+\u0002\u0002\u0e39\u0e3b\u0005\u0460\u0231\u0002\u0e3a\u0e1d\u0003",
    "\u0002\u0002\u0002\u0e3a\u0e1f\u0003\u0002\u0002\u0002\u0e3a\u0e37\u0003",
    "\u0002\u0002\u0002\u0e3b\u01a5\u0003\u0002\u0002\u0002\u0e3c\u0e3d\u0007",
    "\u0226\u0002\u0002\u0e3d\u0e3e\t\u0014\u0002\u0002\u0e3e\u0e43\u0005",
    "\u01a8\u00d5\u0002\u0e3f\u0e40\u0007\u0198\u0002\u0002\u0e40\u0e42\u0005",
    "\u01a8\u00d5\u0002\u0e41\u0e3f\u0003\u0002\u0002\u0002\u0e42\u0e45\u0003",
    "\u0002\u0002\u0002\u0e43\u0e41\u0003\u0002\u0002\u0002\u0e43\u0e44\u0003",
    "\u0002\u0002\u0002\u0e44\u0e53\u0003\u0002\u0002\u0002\u0e45\u0e43\u0003",
    "\u0002\u0002\u0002\u0e46\u0e47\u0006\u00d4?\u0002\u0e47\u0e48\u0007",
    "\u0226\u0002\u0002\u0e48\u0e49\u0007\u00a7\u0002\u0002\u0e49\u0e4a\u0007",
    "\u01fc\u0002\u0002\u0e4a\u0e53\u0007\u0006\u0002\u0002\u0e4b\u0e50\u0007",
    "\u0297\u0002\u0002\u0e4c\u0e51\u0007\u0156\u0002\u0002\u0e4d\u0e51\u0007",
    "\u0289\u0002\u0002\u0e4e\u0e4f\u0006\u00d4@\u0002\u0e4f\u0e51\u0007",
    "\u00a7\u0002\u0002\u0e50\u0e4c\u0003\u0002\u0002\u0002\u0e50\u0e4d\u0003",
    "\u0002\u0002\u0002\u0e50\u0e4e\u0003\u0002\u0002\u0002\u0e51\u0e53\u0003",
    "\u0002\u0002\u0002\u0e52\u0e3c\u0003\u0002\u0002\u0002\u0e52\u0e46\u0003",
    "\u0002\u0002\u0002\u0e52\u0e4b\u0003\u0002\u0002\u0002\u0e53\u01a7\u0003",
    "\u0002\u0002\u0002\u0e54\u0e56\u0005\u0446\u0224\u0002\u0e55\u0e57\u0005",
    "\u0188\u00c5\u0002\u0e56\u0e55\u0003\u0002\u0002\u0002\u0e56\u0e57\u0003",
    "\u0002\u0002\u0002\u0e57\u0e58\u0003\u0002\u0002\u0002\u0e58\u0e59\u0005",
    "\u01aa\u00d6\u0002\u0e59\u01a9\u0003\u0002\u0002\u0002\u0e5a\u0e5c\u0007",
    "\u0258\u0002\u0002\u0e5b\u0e5d\u0007\u00b6\u0002\u0002\u0e5c\u0e5b\u0003",
    "\u0002\u0002\u0002\u0e5c\u0e5d\u0003\u0002\u0002\u0002\u0e5d\u0e63\u0003",
    "\u0002\u0002\u0002\u0e5e\u0e60\u0007\u022c\u0002\u0002\u0e5f\u0e5e\u0003",
    "\u0002\u0002\u0002\u0e5f\u0e60\u0003\u0002\u0002\u0002\u0e60\u0e61\u0003",
    "\u0002\u0002\u0002\u0e61\u0e63\u0007\u02ae\u0002\u0002\u0e62\u0e5a\u0003",
    "\u0002\u0002\u0002\u0e62\u0e5f\u0003\u0002\u0002\u0002\u0e63\u01ab\u0003",
    "\u0002\u0002\u0002\u0e64\u0e7f\u00079\u0002\u0002\u0e65\u0e66\t*\u0002",
    "\u0002\u0e66\u0e68\u0005\u01b0\u00d9\u0002\u0e67\u0e69\t+\u0002\u0002",
    "\u0e68\u0e67\u0003\u0002\u0002\u0002\u0e68\u0e69\u0003\u0002\u0002\u0002",
    "\u0e69\u0e80\u0003\u0002\u0002\u0002\u0e6a\u0e6b\u0007\u0012\u0002\u0002",
    "\u0e6b\u0e71\u0005\u01b0\u00d9\u0002\u0e6c\u0e6f\u0007\u0152\u0002\u0002",
    "\u0e6d\u0e6e\u0007\u01fc\u0002\u0002\u0e6e\u0e70\u0007\u00dc\u0002\u0002",
    "\u0e6f\u0e6d\u0003\u0002\u0002\u0002\u0e6f\u0e70\u0003\u0002\u0002\u0002",
    "\u0e70\u0e72\u0003\u0002\u0002\u0002\u0e71\u0e6c\u0003\u0002\u0002\u0002",
    "\u0e71\u0e72\u0003\u0002\u0002\u0002\u0e72\u0e80\u0003\u0002\u0002\u0002",
    "\u0e73\u0e74\u0007%\u0002\u0002\u0e74\u0e80\u0005\u01b0\u00d9\u0002",
    "\u0e75\u0e76\u0007\u000e\u0002\u0002\u0e76\u0e79\u0005\u01b0\u00d9\u0002",
    "\u0e77\u0e78\u0007\u00f7\u0002\u0002\u0e78\u0e7a\u0007\u00fe\u0002\u0002",
    "\u0e79\u0e77\u0003\u0002\u0002\u0002\u0e79\u0e7a\u0003\u0002\u0002\u0002",
    "\u0e7a\u0e80\u0003\u0002\u0002\u0002\u0e7b\u0e7c\u0007*\u0002\u0002",
    "\u0e7c\u0e80\u0005\u01b0\u00d9\u0002\u0e7d\u0e7e\u0007\u0111\u0002\u0002",
    "\u0e7e\u0e80\u0005\u01ae\u00d8\u0002\u0e7f\u0e65\u0003\u0002\u0002\u0002",
    "\u0e7f\u0e6a\u0003\u0002\u0002\u0002\u0e7f\u0e73\u0003\u0002\u0002\u0002",
    "\u0e7f\u0e75\u0003\u0002\u0002\u0002\u0e7f\u0e7b\u0003\u0002\u0002\u0002",
    "\u0e7f\u0e7d\u0003\u0002\u0002\u0002\u0e80\u01ad\u0003\u0002\u0002\u0002",
    "\u0e81\u0e84\u0006\u00d8A\u0002\u0e82\u0e83\u0007\u01cb\u0002\u0002",
    "\u0e83\u0e85\u0007\u0179\u0002\u0002\u0e84\u0e82\u0003\u0002\u0002\u0002",
    "\u0e84\u0e85\u0003\u0002\u0002\u0002\u0e85\u0e88\u0003\u0002\u0002\u0002",
    "\u0e86\u0e88\u0003\u0002\u0002\u0002\u0e87\u0e81\u0003\u0002\u0002\u0002",
    "\u0e87\u0e86\u0003\u0002\u0002\u0002\u0e88\u01af\u0003\u0002\u0002\u0002",
    "\u0e89\u0e90\u0005\u047c\u023f\u0002\u0e8a\u0e8b\u0007\u0198\u0002\u0002",
    "\u0e8b\u0e8e\u0005\u047c\u023f\u0002\u0e8c\u0e8d\u0007\u0198\u0002\u0002",
    "\u0e8d\u0e8f\u0005\u046c\u0237\u0002\u0e8e\u0e8c\u0003\u0002\u0002\u0002",
    "\u0e8e\u0e8f\u0003\u0002\u0002\u0002\u0e8f\u0e91\u0003\u0002\u0002\u0002",
    "\u0e90\u0e8a\u0003\u0002\u0002\u0002\u0e90\u0e91\u0003\u0002\u0002\u0002",
    "\u0e91\u01b1\u0003\u0002\u0002\u0002\u0e92\u0e93\u0007\u0255\u0002\u0002",
    "\u0e93\u0e94\t,\u0002\u0002\u0e94\u0e99\u0007\u00b9\u0002\u0002\u0e95",
    "\u0e96\u0007\u028f\u0002\u0002\u0e96\u0e9a\u0005\u0480\u0241\u0002\u0e97",
    "\u0e98\u0007\u01b4\u0002\u0002\u0e98\u0e9a\u0005\u029c\u014f\u0002\u0e99",
    "\u0e95\u0003\u0002\u0002\u0002\u0e99\u0e97\u0003\u0002\u0002\u0002\u0e9a",
    "\u0eb4\u0003\u0002\u0002\u0002\u0e9b\u0eb4\u0005\u01ba\u00de\u0002\u0e9c",
    "\u0e9d\u0007(\u0002\u0002\u0e9d\u0ea2\u0005\u01b4\u00db\u0002\u0e9e",
    "\u0e9f\u0007\u0198\u0002\u0002\u0e9f\u0ea1\u0005\u01b4\u00db\u0002\u0ea0",
    "\u0e9e\u0003\u0002\u0002\u0002\u0ea1\u0ea4\u0003\u0002\u0002\u0002\u0ea2",
    "\u0ea0\u0003\u0002\u0002\u0002\u0ea2\u0ea3\u0003\u0002\u0002\u0002\u0ea3",
    "\u0eb4\u0003\u0002\u0002\u0002\u0ea4\u0ea2\u0003\u0002\u0002\u0002\u0ea5",
    "\u0ea6\u0006\u00daB\u0002\u0ea6\u0ea7\u0007(\u0002\u0002\u0ea7\u0eab",
    "\u0007\u02b2\u0002\u0002\u0ea8\u0ea9\u0005\u03ca\u01e6\u0002\u0ea9\u0eaa",
    "\u0005\u0460\u0231\u0002\u0eaa\u0eac\u0003\u0002\u0002\u0002\u0eab\u0ea8",
    "\u0003\u0002\u0002\u0002\u0eab\u0eac\u0003\u0002\u0002\u0002\u0eac\u0eb4",
    "\u0003\u0002\u0002\u0002\u0ead\u0eb4\u0005\u01d6\u00ec\u0002\u0eae\u0eaf",
    "\u0006\u00daC\u0002\u0eaf\u0eb4\u0005\u01c8\u00e5\u0002\u0eb0\u0eb4",
    "\u0005\u01b8\u00dd\u0002\u0eb1\u0eb2\u0006\u00daD\u0002\u0eb2\u0eb4",
    "\u0005\u01e0\u00f1\u0002\u0eb3\u0e92\u0003\u0002\u0002\u0002\u0eb3\u0e9b",
    "\u0003\u0002\u0002\u0002\u0eb3\u0e9c\u0003\u0002\u0002\u0002\u0eb3\u0ea5",
    "\u0003\u0002\u0002\u0002\u0eb3\u0ead\u0003\u0002\u0002\u0002\u0eb3\u0eae",
    "\u0003\u0002\u0002\u0002\u0eb3\u0eb0\u0003\u0002\u0002\u0002\u0eb3\u0eb1",
    "\u0003\u0002\u0002\u0002\u0eb4\u01b3\u0003\u0002\u0002\u0002\u0eb5\u0eb7",
    "\u0007\u00bb\u0002\u0002\u0eb6\u0eb8\u0005\u01b6\u00dc\u0002\u0eb7\u0eb6",
    "\u0003\u0002\u0002\u0002\u0eb7\u0eb8\u0003\u0002\u0002\u0002\u0eb8\u0ec4",
    "\u0003\u0002\u0002\u0002\u0eb9\u0eba\u0006\u00dbE\u0002\u0eba\u0ebb",
    "\u0007\u010d\u0002\u0002\u0ebb\u0ec4\u0007\t\u0002\u0002\u0ebc\u0ebe",
    "\u0007/\u0002\u0002\u0ebd\u0ebf\u0007\u01ad\u0002\u0002\u0ebe\u0ebd",
    "\u0003\u0002\u0002\u0002\u0ebe\u0ebf\u0003\u0002\u0002\u0002\u0ebf\u0ec1",
    "\u0003\u0002\u0002\u0002\u0ec0\u0ec2\u0005\u0306\u0184\u0002\u0ec1\u0ec0",
    "\u0003\u0002\u0002\u0002\u0ec1\u0ec2\u0003\u0002\u0002\u0002\u0ec2\u0ec4",
    "\u0003\u0002\u0002\u0002\u0ec3\u0eb5\u0003\u0002\u0002\u0002\u0ec3\u0eb9",
    "\u0003\u0002\u0002\u0002\u0ec3\u0ebc\u0003\u0002\u0002\u0002\u0ec4\u01b5",
    "\u0003\u0002\u0002\u0002\u0ec5\u0ec6\u0006\u00dcF\u0002\u0ec6\u0ecb",
    "\u0007\u028f\u0002\u0002\u0ec7\u0ec8\u0006\u00dcG\u0002\u0ec8\u0ecc",
    "\u0005\u046e\u0238\u0002\u0ec9\u0eca\u0006\u00dcH\u0002\u0eca\u0ecc",
    "\u0005\u0472\u023a\u0002\u0ecb\u0ec7\u0003\u0002\u0002\u0002\u0ecb\u0ec9",
    "\u0003\u0002\u0002\u0002\u0ecc\u01b7\u0003\u0002\u0002\u0002\u0ecd\u0ed1",
    "\u0007\u0224\u0002\u0002\u0ece\u0ed2\u0007o\u0002\u0002\u0ecf\u0ed0",
    "\u0007\u0289\u0002\u0002\u0ed0\u0ed2\u0005\u0446\u0224\u0002\u0ed1\u0ece",
    "\u0003\u0002\u0002\u0002\u0ed1\u0ecf\u0003\u0002\u0002\u0002\u0ed2\u0ed3",
    "\u0003\u0002\u0002\u0002\u0ed3\u0ed4\u0007\u01fd\u0002\u0002\u0ed4\u0ed5",
    "\u0007\u00bb\u0002\u0002\u0ed5\u01b9\u0003\u0002\u0002\u0002\u0ed6\u0ed7",
    "\u0007\u01c3\u0002\u0002\u0ed7\u0ed8\u0007\u00bb\u0002\u0002\u0ed8\u0ed9",
    "\u0007\u028f\u0002\u0002\u0ed9\u0edb\u0005\u01bc\u00df\u0002\u0eda\u0edc",
    "\u0005\u0306\u0184\u0002\u0edb\u0eda\u0003\u0002\u0002\u0002\u0edb\u0edc",
    "\u0003\u0002\u0002\u0002\u0edc\u01bb\u0003\u0002\u0002\u0002\u0edd\u0ee2",
    "\u0005\u01be\u00e0\u0002\u0ede\u0edf\u0007\u0198\u0002\u0002\u0edf\u0ee1",
    "\u0005\u01be\u00e0\u0002\u0ee0\u0ede\u0003\u0002\u0002\u0002\u0ee1\u0ee4",
    "\u0003\u0002\u0002\u0002\u0ee2\u0ee0\u0003\u0002\u0002\u0002\u0ee2\u0ee3",
    "\u0003\u0002\u0002\u0002\u0ee3\u01bd\u0003\u0002\u0002\u0002\u0ee4\u0ee2",
    "\u0003\u0002\u0002\u0002\u0ee5\u0ee6\u0007\u00bd\u0002\u0002\u0ee6\u0ee7",
    "\u0007\u0181\u0002\u0002\u0ee7\u0f3b\u0005\u0482\u0242\u0002\u0ee8\u0ee9",
    "\u0007\u02f9\u0002\u0002\u0ee9\u0eea\u0007\u0181\u0002\u0002\u0eea\u0f3b",
    "\u0005\u0482\u0242\u0002\u0eeb\u0eec\u0007\u022d\u0002\u0002\u0eec\u0eed",
    "\u0007\u0181\u0002\u0002\u0eed\u0f3b\u0005\u0482\u0242\u0002\u0eee\u0eef",
    "\u0007\u00c1\u0002\u0002\u0eef\u0ef0\u0007\u0181\u0002\u0002\u0ef0\u0f3b",
    "\u0005\u0482\u0242\u0002\u0ef1\u0ef2\u0007\u00c2\u0002\u0002\u0ef2\u0ef3",
    "\u0007\u0181\u0002\u0002\u0ef3\u0f3b\u0005\u0482\u0242\u0002\u0ef4\u0ef5",
    "\u0007\u00be\u0002\u0002\u0ef5\u0ef6\u0007\u0181\u0002\u0002\u0ef6\u0f3b",
    "\u0005\u046c\u0237\u0002\u0ef7\u0ef8\u0007\u00c4\u0002\u0002\u0ef8\u0ef9",
    "\u0007\u0181\u0002\u0002\u0ef9\u0f3b\u0005\u046c\u0237\u0002\u0efa\u0efb",
    "\u0007\u00c5\u0002\u0002\u0efb\u0efc\u0007\u0181\u0002\u0002\u0efc\u0f3b",
    "\u0005\u046c\u0237\u0002\u0efd\u0efe\u0007\u00c6\u0002\u0002\u0efe\u0eff",
    "\u0007\u0181\u0002\u0002\u0eff\u0f3b\u0005\u046c\u0237\u0002\u0f00\u0f01",
    "\u0007\u00c7\u0002\u0002\u0f01\u0f02\u0007\u0181\u0002\u0002\u0f02\u0f3b",
    "\u0005\u046c\u0237\u0002\u0f03\u0f04\u0007\u00c8\u0002\u0002\u0f04\u0f05",
    "\u0007\u0181\u0002\u0002\u0f05\u0f3b\u0005\u0482\u0242\u0002\u0f06\u0f07",
    "\u0007\u00c9\u0002\u0002\u0f07\u0f08\u0007\u0181\u0002\u0002\u0f08\u0f3b",
    "\u0005\u0482\u0242\u0002\u0f09\u0f0a\u0007\u00ca\u0002\u0002\u0f0a\u0f0b",
    "\u0007\u0181\u0002\u0002\u0f0b\u0f3b\u0005\u0482\u0242\u0002\u0f0c\u0f0d",
    "\u0007\u00cb\u0002\u0002\u0f0d\u0f0e\u0007\u0181\u0002\u0002\u0f0e\u0f3b",
    "\u0005\u0482\u0242\u0002\u0f0f\u0f10\u0007\u0302\u0002\u0002\u0f10\u0f11",
    "\u0007\u0181\u0002\u0002\u0f11\u0f3b\u0005\u01c2\u00e2\u0002\u0f12\u0f13",
    "\u0007\u00cc\u0002\u0002\u0f13\u0f14\u0007\u0181\u0002\u0002\u0f14\u0f3b",
    "\u0005\u0482\u0242\u0002\u0f15\u0f16\u0007\u00cf\u0002\u0002\u0f16\u0f17",
    "\u0007\u0181\u0002\u0002\u0f17\u0f3b\u0005\u0482\u0242\u0002\u0f18\u0f19",
    "\u0007\u022e\u0002\u0002\u0f19\u0f1a\u0007\u0181\u0002\u0002\u0f1a\u0f3b",
    "\u0005\u046c\u0237\u0002\u0f1b\u0f1c\u0007\u00cd\u0002\u0002\u0f1c\u0f1d",
    "\u0007\u0181\u0002\u0002\u0f1d\u0f3b\u0005\u0480\u0241\u0002\u0f1e\u0f1f",
    "\u0007\u00ce\u0002\u0002\u0f1f\u0f20\u0007\u0181\u0002\u0002\u0f20\u0f3b",
    "\u0005\u0482\u0242\u0002\u0f21\u0f22\u0007\u02e8\u0002\u0002\u0f22\u0f23",
    "\u0007\u0181\u0002\u0002\u0f23\u0f3b\u0005\u0482\u0242\u0002\u0f24\u0f25",
    "\u0007\u02e9\u0002\u0002\u0f25\u0f26\u0007\u0181\u0002\u0002\u0f26\u0f3b",
    "\u0005\u046c\u0237\u0002\u0f27\u0f28\u0007\u00bc\u0002\u0002\u0f28\u0f29",
    "\u0007\u0181\u0002\u0002\u0f29\u0f3b\u0005\u046c\u0237\u0002\u0f2a\u0f2b",
    "\u0007\u00a2\u0002\u0002\u0f2b\u0f2c\u0007\u0181\u0002\u0002\u0f2c\u0f3b",
    "\u0005\u01c6\u00e4\u0002\u0f2d\u0f2e\u0007\u02ff\u0002\u0002\u0f2e\u0f2f",
    "\u0007\u0181\u0002\u0002\u0f2f\u0f3b\u0005\u047a\u023e\u0002\u0f30\u0f31",
    "\u0007\u0300\u0002\u0002\u0f31\u0f32\u0007\u0181\u0002\u0002\u0f32\u0f3b",
    "\u0005\u046c\u0237\u0002\u0f33\u0f34\u0007\u00d0\u0002\u0002\u0f34\u0f35",
    "\u0007\u0181\u0002\u0002\u0f35\u0f3b\u0005\u046c\u0237\u0002\u0f36\u0f37",
    "\u0007\u0301\u0002\u0002\u0f37\u0f38\u0007\u0181\u0002\u0002\u0f38\u0f3b",
    "\u0005\u01c0\u00e1\u0002\u0f39\u0f3b\u0005\u01c4\u00e3\u0002\u0f3a\u0ee5",
    "\u0003\u0002\u0002\u0002\u0f3a\u0ee8\u0003\u0002\u0002\u0002\u0f3a\u0eeb",
    "\u0003\u0002\u0002\u0002\u0f3a\u0eee\u0003\u0002\u0002\u0002\u0f3a\u0ef1",
    "\u0003\u0002\u0002\u0002\u0f3a\u0ef4\u0003\u0002\u0002\u0002\u0f3a\u0ef7",
    "\u0003\u0002\u0002\u0002\u0f3a\u0efa\u0003\u0002\u0002\u0002\u0f3a\u0efd",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f00\u0003\u0002\u0002\u0002\u0f3a\u0f03",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f06\u0003\u0002\u0002\u0002\u0f3a\u0f09",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f0c\u0003\u0002\u0002\u0002\u0f3a\u0f0f",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f12\u0003\u0002\u0002\u0002\u0f3a\u0f15",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f18\u0003\u0002\u0002\u0002\u0f3a\u0f1b",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f1e\u0003\u0002\u0002\u0002\u0f3a\u0f21",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f24\u0003\u0002\u0002\u0002\u0f3a\u0f27",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f2a\u0003\u0002\u0002\u0002\u0f3a\u0f2d",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f30\u0003\u0002\u0002\u0002\u0f3a\u0f33",
    "\u0003\u0002\u0002\u0002\u0f3a\u0f36\u0003\u0002\u0002\u0002\u0f3a\u0f39",
    "\u0003\u0002\u0002\u0002\u0f3b\u01bf\u0003\u0002\u0002\u0002\u0f3c\u0f3f",
    "\u0005\u03f8\u01fd\u0002\u0f3d\u0f3f\u0007\u0242\u0002\u0002\u0f3e\u0f3c",
    "\u0003\u0002\u0002\u0002\u0f3e\u0f3d\u0003\u0002\u0002\u0002\u0f3f\u01c1",
    "\u0003\u0002\u0002\u0002\u0f40\u0f43\u0005\u0482\u0242\u0002\u0f41\u0f43",
    "\u0007\u0242\u0002\u0002\u0f42\u0f40\u0003\u0002\u0002\u0002\u0f42\u0f41",
    "\u0003\u0002\u0002\u0002\u0f43\u01c3\u0003\u0002\u0002\u0002\u0f44\u0f45",
    "\u0007\u00bf\u0002\u0002\u0f45\u0f46\u0007\u0181\u0002\u0002\u0f46\u0f51",
    "\u0005\u0482\u0242\u0002\u0f47\u0f48\u0007\u00c0\u0002\u0002\u0f48\u0f49",
    "\u0007\u0181\u0002\u0002\u0f49\u0f51\u0005\u0470\u0239\u0002\u0f4a\u0f4b",
    "\u0007\u0117\u0002\u0002\u0f4b\u0f4c\u0007\u0181\u0002\u0002\u0f4c\u0f51",
    "\u0005\u0482\u0242\u0002\u0f4d\u0f4e\u0007\u0118\u0002\u0002\u0f4e\u0f4f",
    "\u0007\u0181\u0002\u0002\u0f4f\u0f51\u0005\u046c\u0237\u0002\u0f50\u0f44",
    "\u0003\u0002\u0002\u0002\u0f50\u0f47\u0003\u0002\u0002\u0002\u0f50\u0f4a",
    "\u0003\u0002\u0002\u0002\u0f50\u0f4d\u0003\u0002\u0002\u0002\u0f51\u01c5",
    "\u0003\u0002\u0002\u0002\u0f52\u0f5b\u0007\u019b\u0002\u0002\u0f53\u0f58",
    "\u0005\u046c\u0237\u0002\u0f54\u0f55\u0007\u0198\u0002\u0002\u0f55\u0f57",
    "\u0005\u046c\u0237\u0002\u0f56\u0f54\u0003\u0002\u0002\u0002\u0f57\u0f5a",
    "\u0003\u0002\u0002\u0002\u0f58\u0f56\u0003\u0002\u0002\u0002\u0f58\u0f59",
    "\u0003\u0002\u0002\u0002\u0f59\u0f5c\u0003\u0002\u0002\u0002\u0f5a\u0f58",
    "\u0003\u0002\u0002\u0002\u0f5b\u0f53\u0003\u0002\u0002\u0002\u0f5b\u0f5c",
    "\u0003\u0002\u0002\u0002\u0f5c\u0f5d\u0003\u0002\u0002\u0002\u0f5d\u0f5e",
    "\u0007\u019c\u0002\u0002\u0f5e\u01c7\u0003\u0002\u0002\u0002\u0f5f\u0f60",
    "\u0007\u01c3\u0002\u0002\u0f60\u0f61\u0007\u011d\u0002\u0002\u0f61\u0f62",
    "\u0007\u0095\u0002\u0002\u0f62\u0f67\u0005\u01ca\u00e6\u0002\u0f63\u0f64",
    "\u0007\u0198\u0002\u0002\u0f64\u0f66\u0005\u01ca\u00e6\u0002\u0f65\u0f63",
    "\u0003\u0002\u0002\u0002\u0f66\u0f69\u0003\u0002\u0002\u0002\u0f67\u0f65",
    "\u0003\u0002\u0002\u0002\u0f67\u0f68\u0003\u0002\u0002\u0002\u0f68\u0f6c",
    "\u0003\u0002\u0002\u0002\u0f69\u0f67\u0003\u0002\u0002\u0002\u0f6a\u0f6b",
    "\u0006\u00e5I\u0002\u0f6b\u0f6d\u0005\u0306\u0184\u0002\u0f6c\u0f6a",
    "\u0003\u0002\u0002\u0002\u0f6c\u0f6d\u0003\u0002\u0002\u0002\u0f6d\u01c9",
    "\u0003\u0002\u0002\u0002\u0f6e\u0f6f\u0007\u011e\u0002\u0002\u0f6f\u0f70",
    "\u0007\u0181\u0002\u0002\u0f70\u0f72\u0007\u019b\u0002\u0002\u0f71\u0f73",
    "\u0005\u01cc\u00e7\u0002\u0f72\u0f71\u0003\u0002\u0002\u0002\u0f72\u0f73",
    "\u0003\u0002\u0002\u0002\u0f73\u0f74\u0003\u0002\u0002\u0002\u0f74\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f75\u0f76\u0007\u011f\u0002\u0002\u0f76\u0f77",
    "\u0007\u0181\u0002\u0002\u0f77\u0f79\u0007\u019b\u0002\u0002\u0f78\u0f7a",
    "\u0005\u01cc\u00e7\u0002\u0f79\u0f78\u0003\u0002\u0002\u0002\u0f79\u0f7a",
    "\u0003\u0002\u0002\u0002\u0f7a\u0f7b\u0003\u0002\u0002\u0002\u0f7b\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f7c\u0f7d\u0007\u0120\u0002\u0002\u0f7d\u0f7e",
    "\u0007\u0181\u0002\u0002\u0f7e\u0f80\u0007\u019b\u0002\u0002\u0f7f\u0f81",
    "\u0005\u01ce\u00e8\u0002\u0f80\u0f7f\u0003\u0002\u0002\u0002\u0f80\u0f81",
    "\u0003\u0002\u0002\u0002\u0f81\u0f82\u0003\u0002\u0002\u0002\u0f82\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f83\u0f84\u0007\u0121\u0002\u0002\u0f84\u0f85",
    "\u0007\u0181\u0002\u0002\u0f85\u0f87\u0007\u019b\u0002\u0002\u0f86\u0f88",
    "\u0005\u01ce\u00e8\u0002\u0f87\u0f86\u0003\u0002\u0002\u0002\u0f87\u0f88",
    "\u0003\u0002\u0002\u0002\u0f88\u0f89\u0003\u0002\u0002\u0002\u0f89\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f8a\u0f8b\u0007\u0122\u0002\u0002\u0f8b\u0f8c",
    "\u0007\u0181\u0002\u0002\u0f8c\u0f8e\u0007\u019b\u0002\u0002\u0f8d\u0f8f",
    "\u0005\u01d0\u00e9\u0002\u0f8e\u0f8d\u0003\u0002\u0002\u0002\u0f8e\u0f8f",
    "\u0003\u0002\u0002\u0002\u0f8f\u0f90\u0003\u0002\u0002\u0002\u0f90\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f91\u0f92\u0007\u0123\u0002\u0002\u0f92\u0f93",
    "\u0007\u0181\u0002\u0002\u0f93\u0f95\u0007\u019b\u0002\u0002\u0f94\u0f96",
    "\u0005\u01d0\u00e9\u0002\u0f95\u0f94\u0003\u0002\u0002\u0002\u0f95\u0f96",
    "\u0003\u0002\u0002\u0002\u0f96\u0f97\u0003\u0002\u0002\u0002\u0f97\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f98\u0f99\u0007\u0124\u0002\u0002\u0f99\u0f9a",
    "\u0007\u0181\u0002\u0002\u0f9a\u0f9c\u0007\u019b\u0002\u0002\u0f9b\u0f9d",
    "\u0005\u01d4\u00eb\u0002\u0f9c\u0f9b\u0003\u0002\u0002\u0002\u0f9c\u0f9d",
    "\u0003\u0002\u0002\u0002\u0f9d\u0f9e\u0003\u0002\u0002\u0002\u0f9e\u0fa0",
    "\u0007\u019c\u0002\u0002\u0f9f\u0f6e\u0003\u0002\u0002\u0002\u0f9f\u0f75",
    "\u0003\u0002\u0002\u0002\u0f9f\u0f7c\u0003\u0002\u0002\u0002\u0f9f\u0f83",
    "\u0003\u0002\u0002\u0002\u0f9f\u0f8a\u0003\u0002\u0002\u0002\u0f9f\u0f91",
    "\u0003\u0002\u0002\u0002\u0f9f\u0f98\u0003\u0002\u0002\u0002\u0fa0\u01cb",
    "\u0003\u0002\u0002\u0002\u0fa1\u0fa6\u0005\u041a\u020e\u0002\u0fa2\u0fa3",
    "\u0007\u0198\u0002\u0002\u0fa3\u0fa5\u0005\u041a\u020e\u0002\u0fa4\u0fa2",
    "\u0003\u0002\u0002\u0002\u0fa5\u0fa8\u0003\u0002\u0002\u0002\u0fa6\u0fa4",
    "\u0003\u0002\u0002\u0002\u0fa6\u0fa7\u0003\u0002\u0002\u0002\u0fa7\u01cd",
    "\u0003\u0002\u0002\u0002\u0fa8\u0fa6\u0003\u0002\u0002\u0002\u0fa9\u0fae",
    "\u0005\u0442\u0222\u0002\u0faa\u0fab\u0007\u0198\u0002\u0002\u0fab\u0fad",
    "\u0005\u0442\u0222\u0002\u0fac\u0faa\u0003\u0002\u0002\u0002\u0fad\u0fb0",
    "\u0003\u0002\u0002\u0002\u0fae\u0fac\u0003\u0002\u0002\u0002\u0fae\u0faf",
    "\u0003\u0002\u0002\u0002\u0faf\u01cf\u0003\u0002\u0002\u0002\u0fb0\u0fae",
    "\u0003\u0002\u0002\u0002\u0fb1\u0fb6\u0005\u01d2\u00ea\u0002\u0fb2\u0fb3",
    "\u0007\u0198\u0002\u0002\u0fb3\u0fb5\u0005\u01d2\u00ea\u0002\u0fb4\u0fb2",
    "\u0003\u0002\u0002\u0002\u0fb5\u0fb8\u0003\u0002\u0002\u0002\u0fb6\u0fb4",
    "\u0003\u0002\u0002\u0002\u0fb6\u0fb7\u0003\u0002\u0002\u0002\u0fb7\u01d1",
    "\u0003\u0002\u0002\u0002\u0fb8\u0fb6\u0003\u0002\u0002\u0002\u0fb9\u0fba",
    "\u0005\u0482\u0242\u0002\u0fba\u01d3\u0003\u0002\u0002\u0002\u0fbb\u0fc0",
    "\u0005\u03d6\u01ec\u0002\u0fbc\u0fbd\u0007\u0198\u0002\u0002\u0fbd\u0fbf",
    "\u0005\u03d6\u01ec\u0002\u0fbe\u0fbc\u0003\u0002\u0002\u0002\u0fbf\u0fc2",
    "\u0003\u0002\u0002\u0002\u0fc0\u0fbe\u0003\u0002\u0002\u0002\u0fc0\u0fc1",
    "\u0003\u0002\u0002\u0002\u0fc1\u01d5\u0003\u0002\u0002\u0002\u0fc2\u0fc0",
    "\u0003\u0002\u0002\u0002\u0fc3\u0fc4\u00072\u0002\u0002\u0fc4\u0fc6",
    "\u0007/\u0002\u0002\u0fc5\u0fc7\u0005\u01dc\u00ef\u0002\u0fc6\u0fc5",
    "\u0003\u0002\u0002\u0002\u0fc6\u0fc7\u0003\u0002\u0002\u0002\u0fc7\u0fca",
    "\u0003\u0002\u0002\u0002\u0fc8\u0fc9\u0007\u016c\u0002\u0002\u0fc9\u0fcb",
    "\u0005\u01d8\u00ed\u0002\u0fca\u0fc8\u0003\u0002\u0002\u0002\u0fca\u0fcb",
    "\u0003\u0002\u0002\u0002\u0fcb\u0fcc\u0003\u0002\u0002\u0002\u0fcc\u0fce",
    "\u0005\u01da\u00ee\u0002\u0fcd\u0fcf\u0005\u0306\u0184\u0002\u0fce\u0fcd",
    "\u0003\u0002\u0002\u0002\u0fce\u0fcf\u0003\u0002\u0002\u0002\u0fcf\u0fd9",
    "\u0003\u0002\u0002\u0002\u0fd0\u0fd1\u00073\u0002\u0002\u0fd1\u0fd3",
    "\u0007/\u0002\u0002\u0fd2\u0fd4\u0005\u01dc\u00ef\u0002\u0fd3\u0fd2",
    "\u0003\u0002\u0002\u0002\u0fd3\u0fd4\u0003\u0002\u0002\u0002\u0fd4\u0fd6",
    "\u0003\u0002\u0002\u0002\u0fd5\u0fd7\u0005\u0306\u0184\u0002\u0fd6\u0fd5",
    "\u0003\u0002\u0002\u0002\u0fd6\u0fd7\u0003\u0002\u0002\u0002\u0fd7\u0fd9",
    "\u0003\u0002\u0002\u0002\u0fd8\u0fc3\u0003\u0002\u0002\u0002\u0fd8\u0fd0",
    "\u0003\u0002\u0002\u0002\u0fd9\u01d7\u0003\u0002\u0002\u0002\u0fda\u0fe2",
    "\u0005\u01c4\u00e3\u0002\u0fdb\u0fdc\u0006\u00edJ\u0002\u0fdc\u0fdd",
    "\t-\u0002\u0002\u0fdd\u0fde\u0007\u0181\u0002\u0002\u0fde\u0fe2\u0005",
    "\u047c\u023f\u0002\u0fdf\u0fe0\u0006\u00edK\u0002\u0fe0\u0fe2\u0007",
    "\u013e\u0002\u0002\u0fe1\u0fda\u0003\u0002\u0002\u0002\u0fe1\u0fdb\u0003",
    "\u0002\u0002\u0002\u0fe1\u0fdf\u0003\u0002\u0002\u0002\u0fe2\u0fe7\u0003",
    "\u0002\u0002\u0002\u0fe3\u0fe4\u0007\u0198\u0002\u0002\u0fe4\u0fe6\u0005",
    "\u01c4\u00e3\u0002\u0fe5\u0fe3\u0003\u0002\u0002\u0002\u0fe6\u0fe9\u0003",
    "\u0002\u0002\u0002\u0fe7\u0fe5\u0003\u0002\u0002\u0002\u0fe7\u0fe8\u0003",
    "\u0002\u0002\u0002\u0fe8\u01d9\u0003\u0002\u0002\u0002\u0fe9\u0fe7\u0003",
    "\u0002\u0002\u0002\u0fea\u0fee\u0006\u00eeL\u0002\u0feb\u0fec\u0007",
    "\u016e\u0002\u0002\u0fec\u0fed\u0007\u0181\u0002\u0002\u0fed\u0fef\u0005",
    "\u047c\u023f\u0002\u0fee\u0feb\u0003\u0002\u0002\u0002\u0fee\u0fef\u0003",
    "\u0002\u0002\u0002\u0fef\u0ff3\u0003\u0002\u0002\u0002\u0ff0\u0ff1\u0007",
    "\u00fd\u0002\u0002\u0ff1\u0ff2\u0007\u0181\u0002\u0002\u0ff2\u0ff4\u0005",
    "\u047c\u023f\u0002\u0ff3\u0ff0\u0003\u0002\u0002\u0002\u0ff3\u0ff4\u0003",
    "\u0002\u0002\u0002\u0ff4\u0ff8\u0003\u0002\u0002\u0002\u0ff5\u0ff6\u0007",
    "t\u0002\u0002\u0ff6\u0ff7\u0007\u0181\u0002\u0002\u0ff7\u0ff9\u0005",
    "\u047c\u023f\u0002\u0ff8\u0ff5\u0003\u0002\u0002\u0002\u0ff8\u0ff9\u0003",
    "\u0002\u0002\u0002\u0ff9\u0ffd\u0003\u0002\u0002\u0002\u0ffa\u0ffb\u0007",
    "\u00ff\u0002\u0002\u0ffb\u0ffc\u0007\u0181\u0002\u0002\u0ffc\u0ffe\u0005",
    "\u047c\u023f\u0002\u0ffd\u0ffa\u0003\u0002\u0002\u0002\u0ffd\u0ffe\u0003",
    "\u0002\u0002\u0002\u0ffe\u1001\u0003\u0002\u0002\u0002\u0fff\u1001\u0003",
    "\u0002\u0002\u0002\u1000\u0fea\u0003\u0002\u0002\u0002\u1000\u0fff\u0003",
    "\u0002\u0002\u0002\u1001\u01db\u0003\u0002\u0002\u0002\u1002\u1007\u0005",
    "\u01de\u00f0\u0002\u1003\u1004\u0007\u0198\u0002\u0002\u1004\u1006\u0005",
    "\u01de\u00f0\u0002\u1005\u1003\u0003\u0002\u0002\u0002\u1006\u1009\u0003",
    "\u0002\u0002\u0002\u1007\u1005\u0003\u0002\u0002\u0002\u1007\u1008\u0003",
    "\u0002\u0002\u0002\u1008\u01dd\u0003\u0002\u0002\u0002\u1009\u1007\u0003",
    "\u0002\u0002\u0002\u100a\u100b\t.\u0002\u0002\u100b\u01df\u0003\u0002",
    "\u0002\u0002\u100c\u100d\t/\u0002\u0002\u100d\u100e\u0007\u0017\u0002",
    "\u0002\u100e\u01e1\u0003\u0002\u0002\u0002\u100f\u1010\u0007%\u0002",
    "\u0002\u1010\u1011\u0005\u0460\u0231\u0002\u1011\u1014\u0007\u01fd\u0002",
    "\u0002\u1012\u1015\u0005\u0480\u0241\u0002\u1013\u1015\u0005\u02de\u0170",
    "\u0002\u1014\u1012\u0003\u0002\u0002\u0002\u1014\u1013\u0003\u0002\u0002",
    "\u0002\u1015\u101b\u0003\u0002\u0002\u0002\u1016\u101b\u0005\u01e4\u00f3",
    "\u0002\u1017\u1018\t0\u0002\u0002\u1018\u1019\u0007%\u0002\u0002\u1019",
    "\u101b\u0005\u0460\u0231\u0002\u101a\u100f\u0003\u0002\u0002\u0002\u101a",
    "\u1016\u0003\u0002\u0002\u0002\u101a\u1017\u0003\u0002\u0002\u0002\u101b",
    "\u01e3\u0003\u0002\u0002\u0002\u101c\u101d\u0007\u0013\u0002\u0002\u101d",
    "\u1020\u0005\u0460\u0231\u0002\u101e\u101f\u0007\u029c\u0002\u0002\u101f",
    "\u1021\u0005\u01e6\u00f4\u0002\u1020\u101e\u0003\u0002\u0002\u0002\u1020",
    "\u1021\u0003\u0002\u0002\u0002\u1021\u01e5\u0003\u0002\u0002\u0002\u1022",
    "\u1027\u0005\u02de\u0170\u0002\u1023\u1024\u0007\u0198\u0002\u0002\u1024",
    "\u1026\u0005\u02de\u0170\u0002\u1025\u1023\u0003\u0002\u0002\u0002\u1026",
    "\u1029\u0003\u0002\u0002\u0002\u1027\u1025\u0003\u0002\u0002\u0002\u1027",
    "\u1028\u0003\u0002\u0002\u0002\u1028\u01e7\u0003\u0002\u0002\u0002\u1029",
    "\u1027\u0003\u0002\u0002\u0002\u102a\u1043\u0007\u02c5\u0002\u0002\u102b",
    "\u102c\u0007\u00b6\u0002\u0002\u102c\u102d\u0007o\u0002\u0002\u102d",
    "\u102f\u0007y\u0002\u0002\u102e\u1030\u0005\u049e\u0250\u0002\u102f",
    "\u102e\u0003\u0002\u0002\u0002\u102f\u1030\u0003\u0002\u0002\u0002\u1030",
    "\u1031\u0003\u0002\u0002\u0002\u1031\u1044\u0005\u047a\u023e\u0002\u1032",
    "\u1035\u0007\u02c4\u0002\u0002\u1033\u1034\u0007\u01fc\u0002\u0002\u1034",
    "\u1036\u0007\u011d\u0002\u0002\u1035\u1033\u0003\u0002\u0002\u0002\u1035",
    "\u1036\u0003\u0002\u0002\u0002\u1036\u1044\u0003\u0002\u0002\u0002\u1037",
    "\u1038\u0006\u00f5M\u0002\u1038\u1039\u0007\u00a7\u0002\u0002\u1039",
    "\u103a\u0007\u01fd\u0002\u0002\u103a\u103b\u0005\u03fa\u01fe\u0002\u103b",
    "\u103c\u0007\u019a\u0002\u0002\u103c\u103d\u0005\u046c\u0237\u0002\u103d",
    "\u103e\u0007\u00a1\u0002\u0002\u103e\u103f\u0007\u01be\u0002\u0002\u103f",
    "\u1041\u0005\u047a\u023e\u0002\u1040\u1042\u0005\u01ea\u00f6\u0002\u1041",
    "\u1040\u0003\u0002\u0002\u0002\u1041\u1042\u0003\u0002\u0002\u0002\u1042",
    "\u1044\u0003\u0002\u0002\u0002\u1043\u102b\u0003\u0002\u0002\u0002\u1043",
    "\u1032\u0003\u0002\u0002\u0002\u1043\u1037\u0003\u0002\u0002\u0002\u1044",
    "\u01e9\u0003\u0002\u0002\u0002\u1045\u1050\u0005\u01ec\u00f7\u0002\u1046",
    "\u1047\u0007o\u0002\u0002\u1047\u1049\u0007y\u0002\u0002\u1048\u104a",
    "\u0005\u049e\u0250\u0002\u1049\u1048\u0003\u0002\u0002\u0002\u1049\u104a",
    "\u0003\u0002\u0002\u0002\u104a\u104b\u0003\u0002\u0002\u0002\u104b\u104d",
    "\u0005\u047a\u023e\u0002\u104c\u104e\u0005\u01ec\u00f7\u0002\u104d\u104c",
    "\u0003\u0002\u0002\u0002\u104d\u104e\u0003\u0002\u0002\u0002\u104e\u1050",
    "\u0003\u0002\u0002\u0002\u104f\u1045\u0003\u0002\u0002\u0002\u104f\u1046",
    "\u0003\u0002\u0002\u0002\u1050\u01eb\u0003\u0002\u0002\u0002\u1051\u1053",
    "\u0007\u0261\u0002\u0002\u1052\u1054\u0007\u001d\u0002\u0002\u1053\u1052",
    "\u0003\u0002\u0002\u0002\u1053\u1054\u0003\u0002\u0002\u0002\u1054\u1055",
    "\u0003\u0002\u0002\u0002\u1055\u1056\u0007\u027b\u0002\u0002\u1056\u01ed",
    "\u0003\u0002\u0002\u0002\u1057\u1058\u0006\u00f8N\u0002\u1058\u1061",
    "\u0005\u01f0\u00f9\u0002\u1059\u1061\u0005\u01f6\u00fc\u0002\u105a\u1061",
    "\u0005\u0202\u0102\u0002\u105b\u1061\u0005\u0204\u0103\u0002\u105c\u1061",
    "\u0005\u0212\u010a\u0002\u105d\u1061\u0005\u0214\u010b\u0002\u105e\u105f",
    "\u0006\u00f8O\u0002\u105f\u1061\u0005\u0226\u0114\u0002\u1060\u1057",
    "\u0003\u0002\u0002\u0002\u1060\u1059\u0003\u0002\u0002\u0002\u1060\u105a",
    "\u0003\u0002\u0002\u0002\u1060\u105b\u0003\u0002\u0002\u0002\u1060\u105c",
    "\u0003\u0002\u0002\u0002\u1060\u105d\u0003\u0002\u0002\u0002\u1060\u105e",
    "\u0003\u0002\u0002\u0002\u1061\u01ef\u0003\u0002\u0002\u0002\u1062\u1063",
    "\u0007\u01ae\u0002\u0002\u1063\u1066\u0007\u016e\u0002\u0002\u1064\u1065",
    "\u0006\u00f9P\u0002\u1065\u1067\u0005\u03ca\u01e6\u0002\u1066\u1064",
    "\u0003\u0002\u0002\u0002\u1066\u1067\u0003\u0002\u0002\u0002\u1067\u1068",
    "\u0003\u0002\u0002\u0002\u1068\u1069\u0005\u01f2\u00fa\u0002\u1069\u01f1",
    "\u0003\u0002\u0002\u0002\u106a\u106b\u0006\u00faQ\u0002\u106b\u106f",
    "\u0005\u03ea\u01f6\u0002\u106c\u106d\u0006\u00faR\u0002\u106d\u106f",
    "\u0005\u03ec\u01f7\u0002\u106e\u106a\u0003\u0002\u0002\u0002\u106e\u106c",
    "\u0003\u0002\u0002\u0002\u106f\u1070\u0003\u0002\u0002\u0002\u1070\u1071",
    "\u0005\u01f8\u00fd\u0002\u1071\u109a\u0003\u0002\u0002\u0002\u1072\u1073",
    "\u0006\u00faS\u0002\u1073\u1074\u0005\u03fa\u01fe\u0002\u1074\u1075",
    "\u0007\u00a1\u0002\u0002\u1075\u1076\u0007\u01be\u0002\u0002\u1076\u1079",
    "\u0005\u047c\u023f\u0002\u1077\u1078\u0006\u00faT\u0002\u1078\u107a",
    "\u0005\u03f6\u01fc\u0002\u1079\u1077\u0003\u0002\u0002\u0002\u1079\u107a",
    "\u0003\u0002\u0002\u0002\u107a\u107d\u0003\u0002\u0002\u0002\u107b\u107c",
    "\u0006\u00faU\u0002\u107c\u107e\u0005\u03f2\u01fa\u0002\u107d\u107b",
    "\u0003\u0002\u0002\u0002\u107d\u107e\u0003\u0002\u0002\u0002\u107e\u109a",
    "\u0003\u0002\u0002\u0002\u107f\u1080\u0006\u00faV\u0002\u1080\u1081",
    "\u0005\u03fa\u01fe\u0002\u1081\u1082\u0005\u03f4\u01fb\u0002\u1082\u109a",
    "\u0003\u0002\u0002\u0002\u1083\u1084\u0006\u00faW\u0002\u1084\u1085",
    "\u0005\u03fa\u01fe\u0002\u1085\u1086\u0007\u01e0\u0002\u0002\u1086\u108a",
    "\u0007\u02b3\u0002\u0002\u1087\u108b\u0007\u01ad\u0002\u0002\u1088\u108b",
    "\u0007\u00f1\u0002\u0002\u1089\u108b\u0005\u0228\u0115\u0002\u108a\u1087",
    "\u0003\u0002\u0002\u0002\u108a\u1088\u0003\u0002\u0002\u0002\u108a\u1089",
    "\u0003\u0002\u0002\u0002\u108b\u109a\u0003\u0002\u0002\u0002\u108c\u108d",
    "\u0006\u00faX\u0002\u108d\u108e\u0005\u03fa\u01fe\u0002\u108e\u1091",
    "\u0007\u00a1\u0002\u0002\u108f\u1090\u0007\u02ac\u0002\u0002\u1090\u1092",
    "\u0005\u0494\u024b\u0002\u1091\u108f\u0003\u0002\u0002\u0002\u1091\u1092",
    "\u0003\u0002\u0002\u0002\u1092\u1093\u0003\u0002\u0002\u0002\u1093\u1094",
    "\u0007\u01be\u0002\u0002\u1094\u1095\u0007\u02fe\u0002\u0002\u1095\u1097",
    "\u0007\u00fd\u0002\u0002\u1096\u1098\u0005\u03f2\u01fa\u0002\u1097\u1096",
    "\u0003\u0002\u0002\u0002\u1097\u1098\u0003\u0002\u0002\u0002\u1098\u109a",
    "\u0003\u0002\u0002\u0002\u1099\u106e\u0003\u0002\u0002\u0002\u1099\u1072",
    "\u0003\u0002\u0002\u0002\u1099\u107f\u0003\u0002\u0002\u0002\u1099\u1083",
    "\u0003\u0002\u0002\u0002\u1099\u108c\u0003\u0002\u0002\u0002\u109a\u01f3",
    "\u0003\u0002\u0002\u0002\u109b\u109c\u0007\u016e\u0002\u0002\u109c\u109d",
    "\u0005\u049c\u024f\u0002\u109d\u01f5\u0003\u0002\u0002\u0002\u109e\u109f",
    "\u0007\u01cd\u0002\u0002\u109f\u10a3\u0007\u016e\u0002\u0002\u10a0\u10a1",
    "\u0006\u00fcY\u0002\u10a1\u10a4\u0005\u03cc\u01e7\u0002\u10a2\u10a4",
    "\u0003\u0002\u0002\u0002\u10a3\u10a0\u0003\u0002\u0002\u0002\u10a3\u10a2",
    "\u0003\u0002\u0002\u0002\u10a4\u10a5\u0003\u0002\u0002\u0002\u10a5\u10a6",
    "\u0005\u03ea\u01f6\u0002\u10a6\u10a7\u0005\u01fa\u00fe\u0002\u10a7\u10a8",
    "\u0005\u01f8\u00fd\u0002\u10a8\u01f7\u0003\u0002\u0002\u0002\u10a9\u10ab",
    "\u0006\u00fdZ\u0002\u10aa\u10ac\u0005\u01fc\u00ff\u0002\u10ab\u10aa",
    "\u0003\u0002\u0002\u0002\u10ab\u10ac\u0003\u0002\u0002\u0002\u10ac\u10ae",
    "\u0003\u0002\u0002\u0002\u10ad\u10af\u0005\u01fe\u0100\u0002\u10ae\u10ad",
    "\u0003\u0002\u0002\u0002\u10ae\u10af\u0003\u0002\u0002\u0002\u10af\u10b3",
    "\u0003\u0002\u0002\u0002\u10b0\u10b2\u0005\u0200\u0101\u0002\u10b1\u10b0",
    "\u0003\u0002\u0002\u0002\u10b2\u10b5\u0003\u0002\u0002\u0002\u10b3\u10b1",
    "\u0003\u0002\u0002\u0002\u10b3\u10b4\u0003\u0002\u0002\u0002\u10b4\u10b8",
    "\u0003\u0002\u0002\u0002\u10b5\u10b3\u0003\u0002\u0002\u0002\u10b6\u10b8",
    "\u0003\u0002\u0002\u0002\u10b7\u10a9\u0003\u0002\u0002\u0002\u10b7\u10b6",
    "\u0003\u0002\u0002\u0002\u10b8\u01f9\u0003\u0002\u0002\u0002\u10b9\u10bd",
    "\u0006\u00fe[\u0002\u10ba\u10bb\u0007\u01e0\u0002\u0002\u10bb\u10bc",
    "\u0007\u02b3\u0002\u0002\u10bc\u10be\u0005\u0228\u0115\u0002\u10bd\u10ba",
    "\u0003\u0002\u0002\u0002\u10bd\u10be\u0003\u0002\u0002\u0002\u10be\u10c1",
    "\u0003\u0002\u0002\u0002\u10bf\u10c1\u0003\u0002\u0002\u0002\u10c0\u10b9",
    "\u0003\u0002\u0002\u0002\u10c0\u10bf\u0003\u0002\u0002\u0002\u10c1\u01fb",
    "\u0003\u0002\u0002\u0002\u10c2\u10c5\u0007\u0261\u0002\u0002\u10c3\u10c6",
    "\u0005\u0220\u0111\u0002\u10c4\u10c6\t1\u0002\u0002\u10c5\u10c3\u0003",
    "\u0002\u0002\u0002\u10c5\u10c4\u0003\u0002\u0002\u0002\u10c6\u01fd\u0003",
    "\u0002\u0002\u0002\u10c7\u10d0\u0007\u02ac\u0002\u0002\u10c8\u10c9\u0007",
    "\u00d2\u0002\u0002\u10c9\u10d1\u0005\u046c\u0237\u0002\u10ca\u10cb\u0007",
    "\u00d5\u0002\u0002\u10cb\u10d1\u0005\u046c\u0237\u0002\u10cc\u10cd\u0007",
    "\u00d1\u0002\u0002\u10cd\u10d1\u0005\u046c\u0237\u0002\u10ce\u10cf\u0007",
    "\u00d6\u0002\u0002\u10cf\u10d1\u0005\u046c\u0237\u0002\u10d0\u10c8\u0003",
    "\u0002\u0002\u0002\u10d0\u10ca\u0003\u0002\u0002\u0002\u10d0\u10cc\u0003",
    "\u0002\u0002\u0002\u10d0\u10ce\u0003\u0002\u0002\u0002\u10d1\u10d2\u0003",
    "\u0002\u0002\u0002\u10d2\u10d0\u0003\u0002\u0002\u0002\u10d2\u10d3\u0003",
    "\u0002\u0002\u0002\u10d3\u01ff\u0003\u0002\u0002\u0002\u10d4\u10d5\u0007",
    "\u0003\u0002\u0002\u10d5\u10f6\t2\u0002\u0002\u10d6\u10f3\u0007\u00fd",
    "\u0002\u0002\u10d7\u10de\u0007\u01f4\u0002\u0002\u10d8\u10d9\u0007\u0211",
    "\u0002\u0002\u10d9\u10da\u0005\u046e\u0238\u0002\u10da\u10db\u0007s",
    "\u0002\u0002\u10db\u10df\u0003\u0002\u0002\u0002\u10dc\u10df\u0007\u00ec",
    "\u0002\u0002\u10dd\u10df\u0007\u01e0\u0002\u0002\u10de\u10d8\u0003\u0002",
    "\u0002\u0002\u10de\u10dc\u0003\u0002\u0002\u0002\u10de\u10dd\u0003\u0002",
    "\u0002\u0002\u10de\u10df\u0003\u0002\u0002\u0002\u10df\u10f4\u0003\u0002",
    "\u0002\u0002\u10e0\u10e3\u0007\u02e1\u0002\u0002\u10e1\u10e4\u0005\u046e",
    "\u0238\u0002\u10e2\u10e4\u0007\u01e0\u0002\u0002\u10e3\u10e1\u0003\u0002",
    "\u0002\u0002\u10e3\u10e2\u0003\u0002\u0002\u0002\u10e4\u10f4\u0003\u0002",
    "\u0002\u0002\u10e5\u10e6\u0007\u02e2\u0002\u0002\u10e6\u10eb\u0007\u0211",
    "\u0002\u0002\u10e7\u10e8\u0005\u046e\u0238\u0002\u10e8\u10e9\u0007s",
    "\u0002\u0002\u10e9\u10ec\u0003\u0002\u0002\u0002\u10ea\u10ec\u0007\u01e0",
    "\u0002\u0002\u10eb\u10e7\u0003\u0002\u0002\u0002\u10eb\u10ea\u0003\u0002",
    "\u0002\u0002\u10ec\u10f4\u0003\u0002\u0002\u0002\u10ed\u10ee\u0006\u0101",
    "\\\u0002\u10ee\u10ef\u0007\u0261\u0002\u0002\u10ef\u10f1\u0007m\u0002",
    "\u0002\u10f0\u10f2\t3\u0002\u0002\u10f1\u10f0\u0003\u0002\u0002\u0002",
    "\u10f1\u10f2\u0003\u0002\u0002\u0002\u10f2\u10f4\u0003\u0002\u0002\u0002",
    "\u10f3\u10d7\u0003\u0002\u0002\u0002\u10f3\u10e0\u0003\u0002\u0002\u0002",
    "\u10f3\u10e5\u0003\u0002\u0002\u0002\u10f3\u10ed\u0003\u0002\u0002\u0002",
    "\u10f4\u10f6\u0003\u0002\u0002\u0002\u10f5\u10d4\u0003\u0002\u0002\u0002",
    "\u10f5\u10d6\u0003\u0002\u0002\u0002\u10f6\u0201\u0003\u0002\u0002\u0002",
    "\u10f7\u10f8\u0007\u01e9\u0002\u0002\u10f8\u10fb\u0007\u016e\u0002\u0002",
    "\u10f9\u10fa\u0006\u0102]\u0002\u10fa\u10fc\u0005\u03ca\u01e6\u0002",
    "\u10fb\u10f9\u0003\u0002\u0002\u0002\u10fb\u10fc\u0003\u0002\u0002\u0002",
    "\u10fc\u10fd\u0003\u0002\u0002\u0002\u10fd\u10fe\u0005\u03e8\u01f5\u0002",
    "\u10fe\u0203\u0003\u0002\u0002\u0002\u10ff\u112a\u0007\u0201\u0002\u0002",
    "\u1100\u1101\u0006\u0103^\u0002\u1101\u1102\u0005\u021a\u010e\u0002",
    "\u1102\u1103\u0007\u028f\u0002\u0002\u1103\u1107\u0005\u03e8\u01f5\u0002",
    "\u1104\u1105\u0007\u02ac\u0002\u0002\u1105\u1106\u0007\u02b4\u0002\u0002",
    "\u1106\u1108\u0007\u024a\u0002\u0002\u1107\u1104\u0003\u0002\u0002\u0002",
    "\u1107\u1108\u0003\u0002\u0002\u0002\u1108\u112b\u0003\u0002\u0002\u0002",
    "\u1109\u110f\u0005\u021a\u010e\u0002\u110a\u110c\u0007\u01ad\u0002\u0002",
    "\u110b\u110d\u0007\u0106\u0002\u0002\u110c\u110b\u0003\u0002\u0002\u0002",
    "\u110c\u110d\u0003\u0002\u0002\u0002\u110d\u110f\u0003\u0002\u0002\u0002",
    "\u110e\u1109\u0003\u0002\u0002\u0002\u110e\u110a\u0003\u0002\u0002\u0002",
    "\u110f\u1110\u0003\u0002\u0002\u0002\u1110\u1112\u0007\u0245\u0002\u0002",
    "\u1111\u1113\u0005\u0218\u010d\u0002\u1112\u1111\u0003\u0002\u0002\u0002",
    "\u1112\u1113\u0003\u0002\u0002\u0002\u1113\u1114\u0003\u0002\u0002\u0002",
    "\u1114\u1115\u0005\u021e\u0110\u0002\u1115\u1116\u0007\u028f\u0002\u0002",
    "\u1116\u1118\u0005\u0206\u0104\u0002\u1117\u1119\u0005\u0210\u0109\u0002",
    "\u1118\u1117\u0003\u0002\u0002\u0002\u1118\u1119\u0003\u0002\u0002\u0002",
    "\u1119\u111b\u0003\u0002\u0002\u0002\u111a\u111c\u0005\u0208\u0105\u0002",
    "\u111b\u111a\u0003\u0002\u0002\u0002\u111b\u111c\u0003\u0002\u0002\u0002",
    "\u111c\u111e\u0003\u0002\u0002\u0002\u111d\u111f\u0005\u020e\u0108\u0002",
    "\u111e\u111d\u0003\u0002\u0002\u0002\u111e\u111f\u0003\u0002\u0002\u0002",
    "\u111f\u112b\u0003\u0002\u0002\u0002\u1120\u1121\u0007\u010b\u0002\u0002",
    "\u1121\u1122\u0007\u0245\u0002\u0002\u1122\u1123\u0005\u03fa\u01fe\u0002",
    "\u1123\u1124\u0007\u028f\u0002\u0002\u1124\u1128\u0005\u0206\u0104\u0002",
    "\u1125\u1126\u0007\u02ac\u0002\u0002\u1126\u1127\u0007\u0201\u0002\u0002",
    "\u1127\u1129\u0007\u024a\u0002\u0002\u1128\u1125\u0003\u0002\u0002\u0002",
    "\u1128\u1129\u0003\u0002\u0002\u0002\u1129\u112b\u0003\u0002\u0002\u0002",
    "\u112a\u1100\u0003\u0002\u0002\u0002\u112a\u110e\u0003\u0002\u0002\u0002",
    "\u112a\u1120\u0003\u0002\u0002\u0002\u112b\u0205\u0003\u0002\u0002\u0002",
    "\u112c\u112d\u0006\u0104_\u0002\u112d\u1131\u0005\u03ea\u01f6\u0002",
    "\u112e\u112f\u0006\u0104`\u0002\u112f\u1131\u0005\u03e8\u01f5\u0002",
    "\u1130\u112c\u0003\u0002\u0002\u0002\u1130\u112e\u0003\u0002\u0002\u0002",
    "\u1131\u0207\u0003\u0002\u0002\u0002\u1132\u1133\u0006\u0105a\u0002",
    "\u1133\u1135\u0007\u02ac\u0002\u0002\u1134\u1136\u0005\u0224\u0113\u0002",
    "\u1135\u1134\u0003\u0002\u0002\u0002\u1136\u1137\u0003\u0002\u0002\u0002",
    "\u1137\u1135\u0003\u0002\u0002\u0002\u1137\u1138\u0003\u0002\u0002\u0002",
    "\u1138\u113e\u0003\u0002\u0002\u0002\u1139\u113a\u0006\u0105b\u0002",
    "\u113a\u113b\u0007\u02ac\u0002\u0002\u113b\u113c\u0007\u0201\u0002\u0002",
    "\u113c\u113e\u0007\u024a\u0002\u0002\u113d\u1132\u0003\u0002\u0002\u0002",
    "\u113d\u1139\u0003\u0002\u0002\u0002\u113e\u0209\u0003\u0002\u0002\u0002",
    "\u113f\u1140\u0007\u02b7\u0002\u0002\u1140\u1141\u0005\u0228\u0115\u0002",
    "\u1141\u020b\u0003\u0002\u0002\u0002\u1142\u1143\u0007\u02ac\u0002\u0002",
    "\u1143\u114b\u0007\u02b3\u0002\u0002\u1144\u114c\u0005\u0228\u0115\u0002",
    "\u1145\u1147\u0007\u01ad\u0002\u0002\u1146\u1148\u0005\u020a\u0106\u0002",
    "\u1147\u1146\u0003\u0002\u0002\u0002\u1147\u1148\u0003\u0002\u0002\u0002",
    "\u1148\u114c\u0003\u0002\u0002\u0002\u1149\u114c\u0007\u00f1\u0002\u0002",
    "\u114a\u114c\u0007\u01e0\u0002\u0002\u114b\u1144\u0003\u0002\u0002\u0002",
    "\u114b\u1145\u0003\u0002\u0002\u0002\u114b\u1149\u0003\u0002\u0002\u0002",
    "\u114b\u114a\u0003\u0002\u0002\u0002\u114c\u020d\u0003\u0002\u0002\u0002",
    "\u114d\u114e\u0007\u01b1\u0002\u0002\u114e\u1150\u0007\u016e\u0002\u0002",
    "\u114f\u1151\u0005\u020c\u0107\u0002\u1150\u114f\u0003\u0002\u0002\u0002",
    "\u1150\u1151\u0003\u0002\u0002\u0002\u1151\u020f\u0003\u0002\u0002\u0002",
    "\u1152\u1153\u0006\u0109c\u0002\u1153\u1154\u0005\u01fc\u00ff\u0002",
    "\u1154\u0211\u0003\u0002\u0002\u0002\u1155\u1156\u0007\u025e\u0002\u0002",
    "\u1156\u1157\u0007\u016e\u0002\u0002\u1157\u1158\u0005\u03fa\u01fe\u0002",
    "\u1158\u1159\u0007\u028f\u0002\u0002\u1159\u1161\u0005\u03fa\u01fe\u0002",
    "\u115a\u115b\u0007\u0198\u0002\u0002\u115b\u115c\u0005\u03fa\u01fe\u0002",
    "\u115c\u115d\u0007\u028f\u0002\u0002\u115d\u115e\u0005\u03fa\u01fe\u0002",
    "\u115e\u1160\u0003\u0002\u0002\u0002\u115f\u115a\u0003\u0002\u0002\u0002",
    "\u1160\u1163\u0003\u0002\u0002\u0002\u1161\u115f\u0003\u0002\u0002\u0002",
    "\u1161\u1162\u0003\u0002\u0002\u0002\u1162\u0213\u0003\u0002\u0002\u0002",
    "\u1163\u1161\u0003\u0002\u0002\u0002\u1164\u1186\u0007\u0265\u0002\u0002",
    "\u1165\u1166\u0006\u010bd\u0002\u1166\u1167\u0005\u021a\u010e\u0002",
    "\u1167\u1168\u0007\u01fd\u0002\u0002\u1168\u1169\u0005\u03e8\u01f5\u0002",
    "\u1169\u1187\u0003\u0002\u0002\u0002\u116a\u116b\u0005\u021a\u010e\u0002",
    "\u116b\u116c\u0005\u0216\u010c\u0002\u116c\u116d\u0007\u01fd\u0002\u0002",
    "\u116d\u116e\u0005\u03e8\u01f5\u0002\u116e\u1187\u0003\u0002\u0002\u0002",
    "\u116f\u1171\u0007\u01ad\u0002\u0002\u1170\u1172\u0007\u0106\u0002\u0002",
    "\u1171\u1170\u0003\u0002\u0002\u0002\u1171\u1172\u0003\u0002\u0002\u0002",
    "\u1172\u117e\u0003\u0002\u0002\u0002\u1173\u1174\u0006\u010be\u0002",
    "\u1174\u1176\u0007\u0245\u0002\u0002\u1175\u1177\u0005\u0218\u010d\u0002",
    "\u1176\u1175\u0003\u0002\u0002\u0002\u1176\u1177\u0003\u0002\u0002\u0002",
    "\u1177\u1178\u0003\u0002\u0002\u0002\u1178\u117f\u0005\u021e\u0110\u0002",
    "\u1179\u117a\u0007\u0198\u0002\u0002\u117a\u117b\u0007\u0201\u0002\u0002",
    "\u117b\u117c\u0007\u024a\u0002\u0002\u117c\u117d\u0007\u01fd\u0002\u0002",
    "\u117d\u117f\u0005\u03e8\u01f5\u0002\u117e\u1173\u0003\u0002\u0002\u0002",
    "\u117e\u1179\u0003\u0002\u0002\u0002\u117f\u1187\u0003\u0002\u0002\u0002",
    "\u1180\u1181\u0007\u010b\u0002\u0002\u1181\u1182\u0007\u0245\u0002\u0002",
    "\u1182\u1183\u0005\u03fa\u01fe\u0002\u1183\u1184\u0007\u01fd\u0002\u0002",
    "\u1184\u1185\u0005\u03e8\u01f5\u0002\u1185\u1187\u0003\u0002\u0002\u0002",
    "\u1186\u1165\u0003\u0002\u0002\u0002\u1186\u116a\u0003\u0002\u0002\u0002",
    "\u1186\u116f\u0003\u0002\u0002\u0002\u1186\u1180\u0003\u0002\u0002\u0002",
    "\u1187\u0215\u0003\u0002\u0002\u0002\u1188\u1189\u0006\u010cf\u0002",
    "\u1189\u118b\u0007\u0245\u0002\u0002\u118a\u118c\u0005\u0218\u010d\u0002",
    "\u118b\u118a\u0003\u0002\u0002\u0002\u118b\u118c\u0003\u0002\u0002\u0002",
    "\u118c\u118d\u0003\u0002\u0002\u0002\u118d\u1197\u0005\u021e\u0110\u0002",
    "\u118e\u1194\u0006\u010cg\u0002\u118f\u1191\u0007\u0245\u0002\u0002",
    "\u1190\u1192\u0005\u0218\u010d\u0002\u1191\u1190\u0003\u0002\u0002\u0002",
    "\u1191\u1192\u0003\u0002\u0002\u0002\u1192\u1193\u0003\u0002\u0002\u0002",
    "\u1193\u1195\u0005\u021e\u0110\u0002\u1194\u118f\u0003\u0002\u0002\u0002",
    "\u1194\u1195\u0003\u0002\u0002\u0002\u1195\u1197\u0003\u0002\u0002\u0002",
    "\u1196\u1188\u0003\u0002\u0002\u0002\u1196\u118e\u0003\u0002\u0002\u0002",
    "\u1197\u0217\u0003\u0002\u0002\u0002\u1198\u1199\t4\u0002\u0002\u1199",
    "\u0219\u0003\u0002\u0002\u0002\u119a\u119f\u0005\u021c\u010f\u0002\u119b",
    "\u119c\u0007\u0198\u0002\u0002\u119c\u119e\u0005\u021c\u010f\u0002\u119d",
    "\u119b\u0003\u0002\u0002\u0002\u119e\u11a1\u0003\u0002\u0002\u0002\u119f",
    "\u119d\u0003\u0002\u0002\u0002\u119f\u11a0\u0003\u0002\u0002\u0002\u11a0",
    "\u021b\u0003\u0002\u0002\u0002\u11a1\u119f\u0003\u0002\u0002\u0002\u11a2",
    "\u11ad\u0006\u010fh\u0002\u11a3\u11a5\u0005\u0498\u024d\u0002\u11a4",
    "\u11a6\u0005\u040c\u0207\u0002\u11a5\u11a4\u0003\u0002\u0002\u0002\u11a5",
    "\u11a6\u0003\u0002\u0002\u0002\u11a6\u11ae\u0003\u0002\u0002\u0002\u11a7",
    "\u11ab\u0005\u0498\u024d\u0002\u11a8\u11ac\u0007\u01a3\u0002\u0002\u11a9",
    "\u11aa\u0007\u01a2\u0002\u0002\u11aa\u11ac\u0005\u0494\u024b\u0002\u11ab",
    "\u11a8\u0003\u0002\u0002\u0002\u11ab\u11a9\u0003\u0002\u0002\u0002\u11ac",
    "\u11ae\u0003\u0002\u0002\u0002\u11ad\u11a3\u0003\u0002\u0002\u0002\u11ad",
    "\u11a7\u0003\u0002\u0002\u0002\u11ae\u11cc\u0003\u0002\u0002\u0002\u11af",
    "\u11b1\t5\u0002\u0002\u11b0\u11b2\u0005\u040c\u0207\u0002\u11b1\u11b0",
    "\u0003\u0002\u0002\u0002\u11b1\u11b2\u0003\u0002\u0002\u0002\u11b2\u11cc",
    "\u0003\u0002\u0002\u0002\u11b3\u11cc\t6\u0002\u0002\u11b4\u11b5\u0007",
    "\u0201\u0002\u0002\u11b5\u11cc\u0007\u024a\u0002\u0002\u11b6\u11b7\u0007",
    "\u026f\u0002\u0002\u11b7\u11cc\u0007\u01d6\u0002\u0002\u11b8\u11bc\u0007",
    "\u01cd\u0002\u0002\u11b9\u11ba\u0007\u0159\u0002\u0002\u11ba\u11bd\u0007",
    "\u0156\u0002\u0002\u11bb\u11bd\t7\u0002\u0002\u11bc\u11b9\u0003\u0002",
    "\u0002\u0002\u11bc\u11bb\u0003\u0002\u0002\u0002\u11bc\u11bd\u0003\u0002",
    "\u0002\u0002\u11bd\u11cc\u0003\u0002\u0002\u0002\u11be\u11bf\u0007\u0226",
    "\u0002\u0002\u11bf\u11cc\u0007\u0156\u0002\u0002\u11c0\u11c1\u0007\u011d",
    "\u0002\u0002\u11c1\u11cc\t8\u0002\u0002\u11c2\u11c3\u0007\u026f\u0002",
    "\u0002\u11c3\u11cc\u0007\u0171\u0002\u0002\u11c4\u11c6\u0007\u01ae\u0002",
    "\u0002\u11c5\u11c7\u0007\u012b\u0002\u0002\u11c6\u11c5\u0003\u0002\u0002",
    "\u0002\u11c6\u11c7\u0003\u0002\u0002\u0002\u11c7\u11cc\u0003\u0002\u0002",
    "\u0002\u11c8\u11c9\u0006\u010fi\u0002\u11c9\u11ca\t9\u0002\u0002\u11ca",
    "\u11cc\u0007\u02b3\u0002\u0002\u11cb\u11a2\u0003\u0002\u0002\u0002\u11cb",
    "\u11af\u0003\u0002\u0002\u0002\u11cb\u11b3\u0003\u0002\u0002\u0002\u11cb",
    "\u11b4\u0003\u0002\u0002\u0002\u11cb\u11b6\u0003\u0002\u0002\u0002\u11cb",
    "\u11b8\u0003\u0002\u0002\u0002\u11cb\u11be\u0003\u0002\u0002\u0002\u11cb",
    "\u11c0\u0003\u0002\u0002\u0002\u11cb\u11c2\u0003\u0002\u0002\u0002\u11cb",
    "\u11c4\u0003\u0002\u0002\u0002\u11cb\u11c8\u0003\u0002\u0002\u0002\u11cc",
    "\u021d\u0003\u0002\u0002\u0002\u11cd\u11d0\u0007\u018b\u0002\u0002\u11ce",
    "\u11cf\u0007\u0197\u0002\u0002\u11cf\u11d1\u0007\u018b\u0002\u0002\u11d0",
    "\u11ce\u0003\u0002\u0002\u0002\u11d0\u11d1\u0003\u0002\u0002\u0002\u11d1",
    "\u11de\u0003\u0002\u0002\u0002\u11d2\u11d5\u0005\u041a\u020e\u0002\u11d3",
    "\u11d4\u0007\u0197\u0002\u0002\u11d4\u11d6\u0007\u018b\u0002\u0002\u11d5",
    "\u11d3\u0003\u0002\u0002\u0002\u11d5\u11d6\u0003\u0002\u0002\u0002\u11d6",
    "\u11de\u0003\u0002\u0002\u0002\u11d7\u11de\u0005\u0446\u0224\u0002\u11d8",
    "\u11d9\u0006\u0110j\u0002\u11d9\u11da\u0005\u041a\u020e\u0002\u11da",
    "\u11db\u0007\u0197\u0002\u0002\u11db\u11dc\u0005\u0446\u0224\u0002\u11dc",
    "\u11de\u0003\u0002\u0002\u0002\u11dd\u11cd\u0003\u0002\u0002\u0002\u11dd",
    "\u11d2\u0003\u0002\u0002\u0002\u11dd\u11d7\u0003\u0002\u0002\u0002\u11dd",
    "\u11d8\u0003\u0002\u0002\u0002\u11de\u021f\u0003\u0002\u0002\u0002\u11df",
    "\u11e6\u0005\u0222\u0112\u0002\u11e0\u11e2\u0007\u01b0\u0002\u0002\u11e1",
    "\u11e0\u0003\u0002\u0002\u0002\u11e1\u11e2\u0003\u0002\u0002\u0002\u11e2",
    "\u11e3\u0003\u0002\u0002\u0002\u11e3\u11e5\u0005\u0222\u0112\u0002\u11e4",
    "\u11e1\u0003\u0002\u0002\u0002\u11e5\u11e8\u0003\u0002\u0002\u0002\u11e6",
    "\u11e4\u0003\u0002\u0002\u0002\u11e6\u11e7\u0003\u0002\u0002\u0002\u11e7",
    "\u0221\u0003\u0002\u0002\u0002\u11e8\u11e6\u0003\u0002\u0002\u0002\u11e9",
    "\u11ea\u0007T\u0002\u0002\u11ea\u11f0\u0005\u047c\u023f\u0002\u11eb",
    "\u11ec\u0007\u00ac\u0002\u0002\u11ec\u11f0\u0005\u047c\u023f\u0002\u11ed",
    "\u11ee\u0007\u014e\u0002\u0002\u11ee\u11f0\u0005\u047c\u023f\u0002\u11ef",
    "\u11e9\u0003\u0002\u0002\u0002\u11ef\u11eb\u0003\u0002\u0002\u0002\u11ef",
    "\u11ed\u0003\u0002\u0002\u0002\u11f0\u0223\u0003\u0002\u0002\u0002\u11f1",
    "\u11f2\u0007\u0201\u0002\u0002\u11f2\u11fc\u0007\u024a\u0002\u0002\u11f3",
    "\u11f4\u0007\u00d2\u0002\u0002\u11f4\u11fc\u0005\u046c\u0237\u0002\u11f5",
    "\u11f6\u0007\u00d5\u0002\u0002\u11f6\u11fc\u0005\u046c\u0237\u0002\u11f7",
    "\u11f8\u0007\u00d1\u0002\u0002\u11f8\u11fc\u0005\u046c\u0237\u0002\u11f9",
    "\u11fa\u0007\u00d6\u0002\u0002\u11fa\u11fc\u0005\u046c\u0237\u0002\u11fb",
    "\u11f1\u0003\u0002\u0002\u0002\u11fb\u11f3\u0003\u0002\u0002\u0002\u11fb",
    "\u11f5\u0003\u0002\u0002\u0002\u11fb\u11f7\u0003\u0002\u0002\u0002\u11fb",
    "\u11f9\u0003\u0002\u0002\u0002\u11fc\u0225\u0003\u0002\u0002\u0002\u11fd",
    "\u11fe\u0007\u026d\u0002\u0002\u11fe\u11ff\u0007\u02b3\u0002\u0002\u11ff",
    "\u1215\u0005\u0228\u0115\u0002\u1200\u1201\u0007\u026d\u0002\u0002\u1201",
    "\u1202\u0007\u02b3\u0002\u0002\u1202\u1215\t:\u0002\u0002\u1203\u1204",
    "\u0007\u026d\u0002\u0002\u1204\u1205\u0007\u01e0\u0002\u0002\u1205\u1209",
    "\u0007\u02b3\u0002\u0002\u1206\u120a\u0005\u0228\u0115\u0002\u1207\u120a",
    "\u0007\u00f1\u0002\u0002\u1208\u120a\u0007\u01ad\u0002\u0002\u1209\u1206",
    "\u0003\u0002\u0002\u0002\u1209\u1207\u0003\u0002\u0002\u0002\u1209\u1208",
    "\u0003\u0002\u0002\u0002\u120a\u120b\u0003\u0002\u0002\u0002\u120b\u120c",
    "\u0007\u028f\u0002\u0002\u120c\u1215\u0005\u0228\u0115\u0002\u120d\u120e",
    "\u0007\u026d\u0002\u0002\u120e\u120f\u0007\u02b3\u0002\u0002\u120f\u1212",
    "\u0007\u01ad\u0002\u0002\u1210\u1211\u0007\u02b7\u0002\u0002\u1211\u1213",
    "\u0005\u0228\u0115\u0002\u1212\u1210\u0003\u0002\u0002\u0002\u1212\u1213",
    "\u0003\u0002\u0002\u0002\u1213\u1215\u0003\u0002\u0002\u0002\u1214\u11fd",
    "\u0003\u0002\u0002\u0002\u1214\u1200\u0003\u0002\u0002\u0002\u1214\u1203",
    "\u0003\u0002\u0002\u0002\u1214\u120d\u0003\u0002\u0002\u0002\u1215\u0227",
    "\u0003\u0002\u0002\u0002\u1216\u121b\u0005\u022a\u0116\u0002\u1217\u1218",
    "\u0007\u0198\u0002\u0002\u1218\u121a\u0005\u022a\u0116\u0002\u1219\u1217",
    "\u0003\u0002\u0002\u0002\u121a\u121d\u0003\u0002\u0002\u0002\u121b\u1219",
    "\u0003\u0002\u0002\u0002\u121b\u121c\u0003\u0002\u0002\u0002\u121c\u0229",
    "\u0003\u0002\u0002\u0002\u121d\u121b\u0003\u0002\u0002\u0002\u121e\u1222",
    "\u0005\u0498\u024d\u0002\u121f\u1220\u0007\u01a2\u0002\u0002\u1220\u1223",
    "\u0005\u0494\u024b\u0002\u1221\u1223\u0007\u01a3\u0002\u0002\u1222\u121f",
    "\u0003\u0002\u0002\u0002\u1222\u1221\u0003\u0002\u0002\u0002\u1222\u1223",
    "\u0003\u0002\u0002\u0002\u1223\u022b\u0003\u0002\u0002\u0002\u1224\u1226",
    "\u0007A\u0002\u0002\u1225\u1227\u0005\u0402\u0202\u0002\u1226\u1225",
    "\u0003\u0002\u0002\u0002\u1226\u1227\u0003\u0002\u0002\u0002\u1227\u1228",
    "\u0003\u0002\u0002\u0002\u1228\u1229\u0007\u0289\u0002\u0002\u1229\u122c",
    "\u0005\u0448\u0225\u0002\u122a\u122b\u0006\u0117k\u0002\u122b\u122d",
    "\u0005\u022e\u0118\u0002\u122c\u122a\u0003\u0002\u0002\u0002\u122c\u122d",
    "\u0003\u0002\u0002\u0002\u122d\u1250\u0003\u0002\u0002\u0002\u122e\u122f",
    "\u0007\u01c5\u0002\u0002\u122f\u1230\u0007\u0289\u0002\u0002\u1230\u1234",
    "\u0005\u0448\u0225\u0002\u1231\u1233\u0005\u0230\u0119\u0002\u1232\u1231",
    "\u0003\u0002\u0002\u0002\u1233\u1236\u0003\u0002\u0002\u0002\u1234\u1232",
    "\u0003\u0002\u0002\u0002\u1234\u1235\u0003\u0002\u0002\u0002\u1235\u1250",
    "\u0003\u0002\u0002\u0002\u1236\u1234\u0003\u0002\u0002\u0002\u1237\u1238",
    "\u0007\u000b\u0002\u0002\u1238\u1239\u0007\u0289\u0002\u0002\u1239\u123b",
    "\u0005\u0448\u0225\u0002\u123a\u123c\t;\u0002\u0002\u123b\u123a\u0003",
    "\u0002\u0002\u0002\u123b\u123c\u0003\u0002\u0002\u0002\u123c\u1250\u0003",
    "\u0002\u0002\u0002\u123d\u123f\u0007\u0248\u0002\u0002\u123e\u1240\u0005",
    "\u0402\u0202\u0002\u123f\u123e\u0003\u0002\u0002\u0002\u123f\u1240\u0003",
    "\u0002\u0002\u0002\u1240\u1241\u0003\u0002\u0002\u0002\u1241\u1242\u0007",
    "\u0289\u0002\u0002\u1242\u1250\u0005\u0448\u0225\u0002\u1243\u1245\u0007",
    "\'\u0002\u0002\u1244\u1246\u0005\u0402\u0202\u0002\u1245\u1244\u0003",
    "\u0002\u0002\u0002\u1245\u1246\u0003\u0002\u0002\u0002\u1246\u1247\u0003",
    "\u0002\u0002\u0002\u1247\u1248\u0007\u0289\u0002\u0002\u1248\u124c\u0005",
    "\u0448\u0225\u0002\u1249\u124b\u0005\u0232\u011a\u0002\u124a\u1249\u0003",
    "\u0002\u0002\u0002\u124b\u124e\u0003\u0002\u0002\u0002\u124c\u124a\u0003",
    "\u0002\u0002\u0002\u124c\u124d\u0003\u0002\u0002\u0002\u124d\u1250\u0003",
    "\u0002\u0002\u0002\u124e\u124c\u0003\u0002\u0002\u0002\u124f\u1224\u0003",
    "\u0002\u0002\u0002\u124f\u122e\u0003\u0002\u0002\u0002\u124f\u1237\u0003",
    "\u0002\u0002\u0002\u124f\u123d\u0003\u0002\u0002\u0002\u124f\u1243\u0003",
    "\u0002\u0002\u0002\u1250\u022d\u0003\u0002\u0002\u0002\u1251\u1252\u0007",
    "\u0299\u0002\u0002\u1252\u1253\u0007\u02c2\u0002\u0002\u1253\u1254\u0007",
    "\u0245\u0002\u0002\u1254\u1258\u0005\u0462\u0232\u0002\u1255\u1256\u0007",
    "\u02ac\u0002\u0002\u1256\u1257\u0007\u017e\u0002\u0002\u1257\u1259\u0007",
    "\u02c3\u0002\u0002\u1258\u1255\u0003\u0002\u0002\u0002\u1258\u1259\u0003",
    "\u0002\u0002\u0002\u1259\u125f\u0003\u0002\u0002\u0002\u125a\u125b\u0007",
    "\u01e9\u0002\u0002\u125b\u125c\u0007\u02c2\u0002\u0002\u125c\u125d\u0007",
    "\u0245\u0002\u0002\u125d\u125f\u0005\u0462\u0232\u0002\u125e\u1251\u0003",
    "\u0002\u0002\u0002\u125e\u125a\u0003\u0002\u0002\u0002\u125f\u022f\u0003",
    "\u0002\u0002\u0002\u1260\u1261\u0007\u01fc\u0002\u0002\u1261\u1264\u0007",
    "7\u0002\u0002\u1262\u1264\t<\u0002\u0002\u1263\u1260\u0003\u0002\u0002",
    "\u0002\u1263\u1262\u0003\u0002\u0002\u0002\u1264\u0231\u0003\u0002\u0002",
    "\u0002\u1265\u1266\t=\u0002\u0002\u1266\u0233\u0003\u0002\u0002\u0002",
    "\u1267\u1268\u0007\u001b\u0002\u0002\u1268\u1269\u0007\u0100\u0002\u0002",
    "\u1269\u126a\u0005\u0460\u0231\u0002\u126a\u126b\u00071\u0002\u0002",
    "\u126b\u126c\u0005\u047a\u023e\u0002\u126c\u127e\u0003\u0002\u0002\u0002",
    "\u126d\u126e\u0007\u001b\u0002\u0002\u126e\u126f\u0007\u02b8\u0002\u0002",
    "\u126f\u127e\u0005\u0484\u0243\u0002\u1270\u1271\u00076\u0002\u0002",
    "\u1271\u1272\u0007\u0100\u0002\u0002\u1272\u127e\u0005\u0456\u022c\u0002",
    "\u1273\u1274\u00076\u0002\u0002\u1274\u1275\u0007\u02b8\u0002\u0002",
    "\u1275\u127a\u0005\u0458\u022d\u0002\u1276\u1277\u0007\u0198\u0002\u0002",
    "\u1277\u1279\u0005\u0458\u022d\u0002\u1278\u1276\u0003\u0002\u0002\u0002",
    "\u1279\u127c\u0003\u0002\u0002\u0002\u127a\u1278\u0003\u0002\u0002\u0002",
    "\u127a\u127b\u0003\u0002\u0002\u0002\u127b\u127e\u0003\u0002\u0002\u0002",
    "\u127c\u127a\u0003\u0002\u0002\u0002\u127d\u1267\u0003\u0002\u0002\u0002",
    "\u127d\u126d\u0003\u0002\u0002\u0002\u127d\u1270\u0003\u0002\u0002\u0002",
    "\u127d\u1273\u0003\u0002\u0002\u0002\u127e\u0235\u0003\u0002\u0002\u0002",
    "\u127f\u1280\u0007\u026d\u0002\u0002\u1280\u1281\u0005\u0238\u011d\u0002",
    "\u1281\u0237\u0003\u0002\u0002\u0002\u1282\u1283\u0005\u0242\u0122\u0002",
    "\u1283\u1284\u0005\u0240\u0121\u0002\u1284\u12bb\u0003\u0002\u0002\u0002",
    "\u1285\u1286\u0007\u015d\u0002\u0002\u1286\u12bb\u0005\u023a\u011e\u0002",
    "\u1287\u1288\u0005\u04a0\u0251\u0002\u1288\u1289\u0005\u0248\u0125\u0002",
    "\u1289\u12bb\u0003\u0002\u0002\u0002\u128a\u128d\u0007\u00fd\u0002\u0002",
    "\u128b\u128c\u0007\u01fc\u0002\u0002\u128c\u128e\u0005\u03fa\u01fe\u0002",
    "\u128d\u128b\u0003\u0002\u0002\u0002\u128d\u128e\u0003\u0002\u0002\u0002",
    "\u128e\u128f\u0003\u0002\u0002\u0002\u128f\u12aa\u0005\u049e\u0250\u0002",
    "\u1290\u1292\u0005\u047c\u023f\u0002\u1291\u1293\u0005\u03f6\u01fc\u0002",
    "\u1292\u1291\u0003\u0002\u0002\u0002\u1292\u1293\u0003\u0002\u0002\u0002",
    "\u1293\u1295\u0003\u0002\u0002\u0002\u1294\u1296\u0005\u03f2\u01fa\u0002",
    "\u1295\u1294\u0003\u0002\u0002\u0002\u1295\u1296\u0003\u0002\u0002\u0002",
    "\u1296\u12ab\u0003\u0002\u0002\u0002\u1297\u1299\u0005\u047c\u023f\u0002",
    "\u1298\u129a\u0005\u03f6\u01fc\u0002\u1299\u1298\u0003\u0002\u0002\u0002",
    "\u1299\u129a\u0003\u0002\u0002\u0002\u129a\u129c\u0003\u0002\u0002\u0002",
    "\u129b\u129d\u0005\u03f2\u01fa\u0002\u129c\u129b\u0003\u0002\u0002\u0002",
    "\u129c\u129d\u0003\u0002\u0002\u0002\u129d\u12ab\u0003\u0002\u0002\u0002",
    "\u129e\u129f\u0006\u011dl\u0002\u129f\u12a0\u0007\u00f5\u0002\u0002",
    "\u12a0\u12a1\u0007\u019b\u0002\u0002\u12a1\u12a2\u0005\u047c\u023f\u0002",
    "\u12a2\u12a3\u0007\u019c\u0002\u0002\u12a3\u12ab\u0003\u0002\u0002\u0002",
    "\u12a4\u12a5\u0006\u011dm\u0002\u12a5\u12a6\u0007\u00fd\u0002\u0002",
    "\u12a6\u12a7\u0007\u019b\u0002\u0002\u12a7\u12a8\u0005\u047c\u023f\u0002",
    "\u12a8\u12a9\u0007\u019c\u0002\u0002\u12a9\u12ab\u0003\u0002\u0002\u0002",
    "\u12aa\u1290\u0003\u0002\u0002\u0002\u12aa\u1297\u0003\u0002\u0002\u0002",
    "\u12aa\u129e\u0003\u0002\u0002\u0002\u12aa\u12a4\u0003\u0002\u0002\u0002",
    "\u12ab\u12bb\u0003\u0002\u0002\u0002\u12ac\u12ad\u0006\u011dn\u0002",
    "\u12ad\u12b0\u0007\u00fd\u0002\u0002\u12ae\u12af\u0007\u01fc\u0002\u0002",
    "\u12af\u12b1\u0005\u03fa\u01fe\u0002\u12b0\u12ae\u0003\u0002\u0002\u0002",
    "\u12b0\u12b1\u0003\u0002\u0002\u0002\u12b1\u12b2\u0003\u0002\u0002\u0002",
    "\u12b2\u12b3\u0007\u028f\u0002\u0002\u12b3\u12b5\u0007\u02fe\u0002\u0002",
    "\u12b4\u12b6\u0005\u03f6\u01fc\u0002\u12b5\u12b4\u0003\u0002\u0002\u0002",
    "\u12b5\u12b6\u0003\u0002\u0002\u0002\u12b6\u12b8\u0003\u0002\u0002\u0002",
    "\u12b7\u12b9\u0005\u03f2\u01fa\u0002\u12b8\u12b7\u0003\u0002\u0002\u0002",
    "\u12b8\u12b9\u0003\u0002\u0002\u0002\u12b9\u12bb\u0003\u0002\u0002\u0002",
    "\u12ba\u1282\u0003\u0002\u0002\u0002\u12ba\u1285\u0003\u0002\u0002\u0002",
    "\u12ba\u1287\u0003\u0002\u0002\u0002\u12ba\u128a\u0003\u0002\u0002\u0002",
    "\u12ba\u12ac\u0003\u0002\u0002\u0002\u12bb\u0239\u0003\u0002\u0002\u0002",
    "\u12bc\u12be\u0005\u023c\u011f\u0002\u12bd\u12bf\u0005\u023e\u0120\u0002",
    "\u12be\u12bd\u0003\u0002\u0002\u0002\u12be\u12bf\u0003\u0002\u0002\u0002",
    "\u12bf\u12c6\u0003\u0002\u0002\u0002\u12c0\u12c3\u0005\u023e\u0120\u0002",
    "\u12c1\u12c2\u0007\u0198\u0002\u0002\u12c2\u12c4\u0005\u023c\u011f\u0002",
    "\u12c3\u12c1\u0003\u0002\u0002\u0002\u12c3\u12c4\u0003\u0002\u0002\u0002",
    "\u12c4\u12c6\u0003\u0002\u0002\u0002\u12c5\u12bc\u0003\u0002\u0002\u0002",
    "\u12c5\u12c0\u0003\u0002\u0002\u0002\u12c6\u023b\u0003\u0002\u0002\u0002",
    "\u12c7\u12c8\u0007\u0258\u0002\u0002\u12c8\u12c9\t)\u0002\u0002\u12c9",
    "\u023d\u0003\u0002\u0002\u0002\u12ca\u12cb\u0007\u00ab\u0002\u0002\u12cb",
    "\u12d1\u0007\u00b3\u0002\u0002\u12cc\u12cd\u0007\u011c\u0002\u0002\u12cd",
    "\u12d2\u0007\u0258\u0002\u0002\u12ce\u12cf\u0007\u0258\u0002\u0002\u12cf",
    "\u12d2\t>\u0002\u0002\u12d0\u12d2\u0007\u0135\u0002\u0002\u12d1\u12cc",
    "\u0003\u0002\u0002\u0002\u12d1\u12ce\u0003\u0002\u0002\u0002\u12d1\u12d0",
    "\u0003\u0002\u0002\u0002\u12d2\u023f\u0003\u0002\u0002\u0002\u12d3\u12d4",
    "\u0007\u0198\u0002\u0002\u12d4\u12d6\u0005\u0244\u0123\u0002\u12d5\u12d3",
    "\u0003\u0002\u0002\u0002\u12d6\u12d9\u0003\u0002\u0002\u0002\u12d7\u12d5",
    "\u0003\u0002\u0002\u0002\u12d7\u12d8\u0003\u0002\u0002\u0002\u12d8\u0241",
    "\u0003\u0002\u0002\u0002\u12d9\u12d7\u0003\u0002\u0002\u0002\u12da\u12db",
    "\u0005\u02e2\u0172\u0002\u12db\u12dc\u0005\u049e\u0250\u0002\u12dc\u12dd",
    "\u0005\u024c\u0127\u0002\u12dd\u12f4\u0003\u0002\u0002\u0002\u12de\u12f4",
    "\u0005\u03de\u01f0\u0002\u12df\u12e0\u0005\u02de\u0170\u0002\u12e0\u12e1",
    "\u0005\u049e\u0250\u0002\u12e1\u12e2\u0005\u029c\u014f\u0002\u12e2\u12f4",
    "\u0003\u0002\u0002\u0002\u12e3\u12e4\u0005\u0246\u0124\u0002\u12e4\u12e5",
    "\u0005\u049e\u0250\u0002\u12e5\u12e6\u0005\u024c\u0127\u0002\u12e6\u12f4",
    "\u0003\u0002\u0002\u0002\u12e7\u12f1\u0007\u00e8\u0002\u0002\u12e8\u12e9",
    "\u0005\u049e\u0250\u0002\u12e9\u12ea\u0005\u029c\u014f\u0002\u12ea\u12f2",
    "\u0003\u0002\u0002\u0002\u12eb\u12ed\u0005\u03a0\u01d1\u0002\u12ec\u12ee",
    "\u0005\u03d2\u01ea\u0002\u12ed\u12ec\u0003\u0002\u0002\u0002\u12ed\u12ee",
    "\u0003\u0002\u0002\u0002\u12ee\u12f2\u0003\u0002\u0002\u0002\u12ef\u12f0",
    "\u0006\u0122o\u0002\u12f0\u12f2\u0007\u01e0\u0002\u0002\u12f1\u12e8",
    "\u0003\u0002\u0002\u0002\u12f1\u12eb\u0003\u0002\u0002\u0002\u12f1\u12ef",
    "\u0003\u0002\u0002\u0002\u12f2\u12f4\u0003\u0002\u0002\u0002\u12f3\u12da",
    "\u0003\u0002\u0002\u0002\u12f3\u12de\u0003\u0002\u0002\u0002\u12f3\u12df",
    "\u0003\u0002\u0002\u0002\u12f3\u12e3\u0003\u0002\u0002\u0002\u12f3\u12e7",
    "\u0003\u0002\u0002\u0002\u12f4\u0243\u0003\u0002\u0002\u0002\u12f5\u12f6",
    "\u0005\u04a0\u0251\u0002\u12f6\u12f7\u0005\u02e2\u0172\u0002\u12f7\u12f8",
    "\u0005\u049e\u0250\u0002\u12f8\u12f9\u0005\u024c\u0127\u0002\u12f9\u12fc",
    "\u0003\u0002\u0002\u0002\u12fa\u12fc\u0005\u0242\u0122\u0002\u12fb\u12f5",
    "\u0003\u0002\u0002\u0002\u12fb\u12fa\u0003\u0002\u0002\u0002\u12fc\u0245",
    "\u0003\u0002\u0002\u0002\u12fd\u12ff\u0007\u01a4\u0002\u0002\u12fe\u1300",
    "\u0005\u04a4\u0253\u0002\u12ff\u12fe\u0003\u0002\u0002\u0002\u12ff\u1300",
    "\u0003\u0002\u0002\u0002\u1300\u1301\u0003\u0002\u0002\u0002\u1301\u1302",
    "\u0005\u02e2\u0172\u0002\u1302\u0247\u0003\u0002\u0002\u0002\u1303\u1304",
    "\u0005\u024a\u0126\u0002\u1304\u1305\u0005\u0240\u0121\u0002\u1305\u1309",
    "\u0003\u0002\u0002\u0002\u1306\u1307\u0007\u015d\u0002\u0002\u1307\u1309",
    "\u0005\u023a\u011e\u0002\u1308\u1303\u0003\u0002\u0002\u0002\u1308\u1306",
    "\u0003\u0002\u0002\u0002\u1309\u0249\u0003\u0002\u0002\u0002\u130a\u130b",
    "\u0005\u02e2\u0172\u0002\u130b\u130c\u0005\u049e\u0250\u0002\u130c\u130d",
    "\u0005\u024c\u0127\u0002\u130d\u024b\u0003\u0002\u0002\u0002\u130e\u1313",
    "\u0005\u029c\u014f\u0002\u130f\u1313\t?\u0002\u0002\u1310\u1311\u0006",
    "\u0127p\u0002\u1311\u1313\t@\u0002\u0002\u1312\u130e\u0003\u0002\u0002",
    "\u0002\u1312\u130f\u0003\u0002\u0002\u0002\u1312\u1310\u0003\u0002\u0002",
    "\u0002\u1313\u024d\u0003\u0002\u0002\u0002\u1314\u13f0\u0007\u026f\u0002",
    "\u0002\u1315\u1316\u0006\u0128q\u0002\u1316\u13f1\u0007D\u0002\u0002",
    "\u1317\u1319\u0007\u01d6\u0002\u0002\u1318\u131a\u0005\u03fe\u0200\u0002",
    "\u1319\u1318\u0003\u0002\u0002\u0002\u1319\u131a\u0003\u0002\u0002\u0002",
    "\u131a\u13f1\u0003\u0002\u0002\u0002\u131b\u131d\u0005\u0250\u0129\u0002",
    "\u131c\u131b\u0003\u0002\u0002\u0002\u131c\u131d\u0003\u0002\u0002\u0002",
    "\u131d\u131e\u0003\u0002\u0002\u0002\u131e\u1320\u0007\u0156\u0002\u0002",
    "\u131f\u1321\u0005\u0256\u012c\u0002\u1320\u131f\u0003\u0002\u0002\u0002",
    "\u1320\u1321\u0003\u0002\u0002\u0002\u1321\u1323\u0003\u0002\u0002\u0002",
    "\u1322\u1324\u0005\u03fe\u0200\u0002\u1323\u1322\u0003\u0002\u0002\u0002",
    "\u1323\u1324\u0003\u0002\u0002\u0002\u1324\u13f1\u0003\u0002\u0002\u0002",
    "\u1325\u1327\u0007\u0092\u0002\u0002\u1326\u1325\u0003\u0002\u0002\u0002",
    "\u1326\u1327\u0003\u0002\u0002\u0002\u1327\u1328\u0003\u0002\u0002\u0002",
    "\u1328\u132a\u0007\u015e\u0002\u0002\u1329\u132b\u0005\u0256\u012c\u0002",
    "\u132a\u1329\u0003\u0002\u0002\u0002\u132a\u132b\u0003\u0002\u0002\u0002",
    "\u132b\u132d\u0003\u0002\u0002\u0002\u132c\u132e\u0005\u03fe\u0200\u0002",
    "\u132d\u132c\u0003\u0002\u0002\u0002\u132d\u132e\u0003\u0002\u0002\u0002",
    "\u132e\u13f1\u0003\u0002\u0002\u0002\u132f\u1331\u0007\u0088\u0002\u0002",
    "\u1330\u1332\u0005\u0256\u012c\u0002\u1331\u1330\u0003\u0002\u0002\u0002",
    "\u1331\u1332\u0003\u0002\u0002\u0002\u1332\u1334\u0003\u0002\u0002\u0002",
    "\u1333\u1335\u0005\u03fe\u0200\u0002\u1334\u1333\u0003\u0002\u0002\u0002",
    "\u1334\u1335\u0003\u0002\u0002\u0002\u1335\u13f1\u0003\u0002\u0002\u0002",
    "\u1336\u1337\u0007\u0289\u0002\u0002\u1337\u1339\u0007\u0149\u0002\u0002",
    "\u1338\u133a\u0005\u0256\u012c\u0002\u1339\u1338\u0003\u0002\u0002\u0002",
    "\u1339\u133a\u0003\u0002\u0002\u0002\u133a\u133c\u0003\u0002\u0002\u0002",
    "\u133b\u133d\u0005\u03fe\u0200\u0002\u133c\u133b\u0003\u0002\u0002\u0002",
    "\u133c\u133d\u0003\u0002\u0002\u0002\u133d\u13f1\u0003\u0002\u0002\u0002",
    "\u133e\u133f\u0007\u001e\u0002\u0002\u133f\u1341\u0007\u0156\u0002\u0002",
    "\u1340\u1342\u0005\u0256\u012c\u0002\u1341\u1340\u0003\u0002\u0002\u0002",
    "\u1341\u1342\u0003\u0002\u0002\u0002\u1342\u1344\u0003\u0002\u0002\u0002",
    "\u1343\u1345\u0005\u03fe\u0200\u0002\u1344\u1343\u0003\u0002\u0002\u0002",
    "\u1344\u1345\u0003\u0002\u0002\u0002\u1345\u13f1\u0003\u0002\u0002\u0002",
    "\u1346\u13f1\u0007\u0101\u0002\u0002\u1347\u134a\u0007\u0082\u0002\u0002",
    "\u1348\u134b\u0005\u043e\u0220\u0002\u1349\u134b\u0007\u01ad\u0002\u0002",
    "\u134a\u1348\u0003\u0002\u0002\u0002\u134a\u1349\u0003\u0002\u0002\u0002",
    "\u134b\u134c\u0003\u0002\u0002\u0002\u134c\u13f1\tA\u0002\u0002\u134d",
    "\u134f\u0005\u0250\u0129\u0002\u134e\u134d\u0003\u0002\u0002\u0002\u134e",
    "\u134f\u0003\u0002\u0002\u0002\u134f\u1350\u0003\u0002\u0002\u0002\u1350",
    "\u1351\u0007\\\u0002\u0002\u1351\u1352\tB\u0002\u0002\u1352\u1354\u0005",
    "\u0446\u0224\u0002\u1353\u1355\u0005\u0256\u012c\u0002\u1354\u1353\u0003",
    "\u0002\u0002\u0002\u1354\u1355\u0003\u0002\u0002\u0002\u1355\u1357\u0003",
    "\u0002\u0002\u0002\u1356\u1358\u0005\u03fe\u0200\u0002\u1357\u1356\u0003",
    "\u0002\u0002\u0002\u1357\u1358\u0003\u0002\u0002\u0002\u1358\u13f1\u0003",
    "\u0002\u0002\u0002\u1359\u135a\t,\u0002\u0002\u135a\u13f1\u0007\u00b9",
    "\u0002\u0002\u135b\u1362\u0007/\u0002\u0002\u135c\u1363\u0007\u009f",
    "\u0002\u0002\u135d\u135e\u0007\u0149\u0002\u0002\u135e\u1360\u0005\u0252",
    "\u012a\u0002\u135f\u1361\u0005\u0306\u0184\u0002\u1360\u135f\u0003\u0002",
    "\u0002\u0002\u1360\u1361\u0003\u0002\u0002\u0002\u1361\u1363\u0003\u0002",
    "\u0002\u0002\u1362\u135c\u0003\u0002\u0002\u0002\u1362\u135d\u0003\u0002",
    "\u0002\u0002\u1363\u13f1\u0003\u0002\u0002\u0002\u1364\u1365\tC\u0002",
    "\u0002\u1365\u1368\u0007\u0088\u0002\u0002\u1366\u1367\u0007\u0214\u0002",
    "\u0002\u1367\u1369\u0005\u047c\u023f\u0002\u1368\u1366\u0003\u0002\u0002",
    "\u0002\u1368\u1369\u0003\u0002\u0002\u0002\u1369\u136c\u0003\u0002\u0002",
    "\u0002\u136a\u136b\u0007\u01fd\u0002\u0002\u136b\u136d\u0005\u0470\u0239",
    "\u0002\u136c\u136a\u0003\u0002\u0002\u0002\u136c\u136d\u0003\u0002\u0002",
    "\u0002\u136d\u136f\u0003\u0002\u0002\u0002\u136e\u1370\u0005\u011e\u0090",
    "\u0002\u136f\u136e\u0003\u0002\u0002\u0002\u136f\u1370\u0003\u0002\u0002",
    "\u0002\u1370\u1372\u0003\u0002\u0002\u0002\u1371\u1373\u0005\u0306\u0184",
    "\u0002\u1372\u1371\u0003\u0002\u0002\u0002\u1372\u1373\u0003\u0002\u0002",
    "\u0002\u1373\u13f1\u0003\u0002\u0002\u0002\u1374\u1375\u0006\u0128r",
    "\u0002\u1375\u1377\u0007\u008c\u0002\u0002\u1376\u1374\u0003\u0002\u0002",
    "\u0002\u1376\u1377\u0003\u0002\u0002\u0002\u1377\u1378\u0003\u0002\u0002",
    "\u0002\u1378\u1379\tD\u0002\u0002\u1379\u137a\u0005\u0254\u012b\u0002",
    "\u137a\u137c\u0005\u0446\u0224\u0002\u137b\u137d\u0005\u0256\u012c\u0002",
    "\u137c\u137b\u0003\u0002\u0002\u0002\u137c\u137d\u0003\u0002\u0002\u0002",
    "\u137d\u137f\u0003\u0002\u0002\u0002\u137e\u1380\u0005\u0160\u00b1\u0002",
    "\u137f\u137e\u0003\u0002\u0002\u0002\u137f\u1380\u0003\u0002\u0002\u0002",
    "\u1380\u13f1\u0003\u0002\u0002\u0002\u1381\u1383\u0007\u014a\u0002\u0002",
    "\u1382\u1381\u0003\u0002\u0002\u0002\u1382\u1383\u0003\u0002\u0002\u0002",
    "\u1383\u1384\u0003\u0002\u0002\u0002\u1384\u13f1\u0007\u0083\u0002\u0002",
    "\u1385\u1386\u0007\u01cc\u0002\u0002\u1386\u1387\u0007\u019b\u0002\u0002",
    "\u1387\u1388\u0007\u018b\u0002\u0002\u1388\u1389\u0007\u019c\u0002\u0002",
    "\u1389\u13f1\tE\u0002\u0002\u138a\u138c\u0007\u0173\u0002\u0002\u138b",
    "\u138d\u0005\u011e\u0090\u0002\u138c\u138b\u0003\u0002\u0002\u0002\u138c",
    "\u138d\u0003\u0002\u0002\u0002\u138d\u13f1\u0003\u0002\u0002\u0002\u138e",
    "\u1390\u0007\u0085\u0002\u0002\u138f\u1391\u0005\u011e\u0090\u0002\u1390",
    "\u138f\u0003\u0002\u0002\u0002\u1390\u1391\u0003\u0002\u0002\u0002\u1391",
    "\u13f1\u0003\u0002\u0002\u0002\u1392\u13f1\u0007\u010a\u0002\u0002\u1393",
    "\u139c\u0007\u0109\u0002\u0002\u1394\u1399\u0005\u0258\u012d\u0002\u1395",
    "\u1396\u0007\u0198\u0002\u0002\u1396\u1398\u0005\u0258\u012d\u0002\u1397",
    "\u1395\u0003\u0002\u0002\u0002\u1398\u139b\u0003\u0002\u0002\u0002\u1399",
    "\u1397\u0003\u0002\u0002\u0002\u1399\u139a\u0003\u0002\u0002\u0002\u139a",
    "\u139d\u0003\u0002\u0002\u0002\u139b\u1399\u0003\u0002\u0002\u0002\u139c",
    "\u1394\u0003\u0002\u0002\u0002\u139c\u139d\u0003\u0002\u0002\u0002\u139d",
    "\u13a1\u0003\u0002\u0002\u0002\u139e\u139f\u0007\u01fc\u0002\u0002\u139f",
    "\u13a0\u0007\u010d\u0002\u0002\u13a0\u13a2\u0007\u017e\u0002\u0002\u13a1",
    "\u139e\u0003\u0002\u0002\u0002\u13a1\u13a2\u0003\u0002\u0002\u0002\u13a2",
    "\u13a4\u0003\u0002\u0002\u0002\u13a3\u13a5\u0005\u011e\u0090\u0002\u13a4",
    "\u13a3\u0003\u0002\u0002\u0002\u13a4\u13a5\u0003\u0002\u0002\u0002\u13a5",
    "\u13f1\u0003\u0002\u0002\u0002\u13a6\u13a8\u0005\u04a0\u0251\u0002\u13a7",
    "\u13a6\u0003\u0002\u0002\u0002\u13a7\u13a8\u0003\u0002\u0002\u0002\u13a8",
    "\u13a9\u0003\u0002\u0002\u0002\u13a9\u13ab\tF\u0002\u0002\u13aa\u13ac",
    "\u0005\u03fe\u0200\u0002\u13ab\u13aa\u0003\u0002\u0002\u0002\u13ab\u13ac",
    "\u0003\u0002\u0002\u0002\u13ac\u13f1\u0003\u0002\u0002\u0002\u13ad\u13af",
    "\u0007\u0092\u0002\u0002\u13ae\u13ad\u0003\u0002\u0002\u0002\u13ae\u13af",
    "\u0003\u0002\u0002\u0002\u13af\u13b0\u0003\u0002\u0002\u0002\u13b0\u13f1",
    "\u0007\u0108\u0002\u0002\u13b1\u13b3\u0005\u02ee\u0178\u0002\u13b2\u13b4",
    "\u0005\u03fe\u0200\u0002\u13b3\u13b2\u0003\u0002\u0002\u0002\u13b3\u13b4",
    "\u0003\u0002\u0002\u0002\u13b4\u13f1\u0003\u0002\u0002\u0002\u13b5\u13b7",
    "\u0007Y\u0002\u0002\u13b6\u13b8\u0005\u03fe\u0200\u0002\u13b7\u13b6",
    "\u0003\u0002\u0002\u0002\u13b7\u13b8\u0003\u0002\u0002\u0002\u13b8\u13f1",
    "\u0003\u0002\u0002\u0002\u13b9\u13ba\u0006\u0128s\u0002\u13ba\u13f1",
    "\u0007j\u0002\u0002\u13bb\u13f1\u0007\u0106\u0002\u0002\u13bc\u13bf",
    "\u0007\u009c\u0002\u0002\u13bd\u13be\u0007\u01fc\u0002\u0002\u13be\u13c0",
    "\u0005\u03fa\u01fe\u0002\u13bf\u13bd\u0003\u0002\u0002\u0002\u13bf\u13c0",
    "\u0003\u0002\u0002\u0002\u13c0\u13f1\u0003\u0002\u0002\u0002\u13c1\u13c2",
    "\u0007\u009c\u0002\u0002\u13c2\u13c3\u0007\u01fc\u0002\u0002\u13c3\u13c4",
    "\u0005\u03fa\u01fe\u0002\u13c4\u13c5\u0007\u029c\u0002\u0002\u13c5\u13c6",
    "\u0005\u03e8\u01f5\u0002\u13c6\u13f1\u0003\u0002\u0002\u0002\u13c7\u13c8",
    "\u0007\u00bb\u0002\u0002\u13c8\u13f1\u0007\u0149\u0002\u0002\u13c9\u13de",
    "\u0007\u01cd\u0002\u0002\u13ca\u13cc\u0007\u01d5\u0002\u0002\u13cb\u13cd",
    "\u0005\u03cc\u01e7\u0002\u13cc\u13cb\u0003\u0002\u0002\u0002\u13cc\u13cd",
    "\u0003\u0002\u0002\u0002\u13cd\u13ce\u0003\u0002\u0002\u0002\u13ce\u13df",
    "\u0005\u041a\u020e\u0002\u13cf\u13d0\u0007\u0087\u0002\u0002\u13d0\u13df",
    "\u0005\u0436\u021c\u0002\u13d1\u13d2\u0007\u0166\u0002\u0002\u13d2\u13df",
    "\u0005\u0422\u0212\u0002\u13d3\u13d4\u0007\u0254\u0002\u0002\u13d4\u13df",
    "\u0005\u041e\u0210\u0002\u13d5\u13d6\u0007\u0289\u0002\u0002\u13d6\u13df",
    "\u0005\u0446\u0224\u0002\u13d7\u13d8\u0007\u0291\u0002\u0002\u13d8\u13df",
    "\u0005\u0426\u0214\u0002\u13d9\u13da\u0007\u0171\u0002\u0002\u13da\u13df",
    "\u0005\u042a\u0216\u0002\u13db\u13dc\u0006\u0128t\u0002\u13dc\u13dd",
    "\u0007\u016e\u0002\u0002\u13dd\u13df\u0005\u03fa\u01fe\u0002\u13de\u13ca",
    "\u0003\u0002\u0002\u0002\u13de\u13cf\u0003\u0002\u0002\u0002\u13de\u13d1",
    "\u0003\u0002\u0002\u0002\u13de\u13d3\u0003\u0002\u0002\u0002\u13de\u13d5",
    "\u0003\u0002\u0002\u0002\u13de\u13d7\u0003\u0002\u0002\u0002\u13de\u13d9",
    "\u0003\u0002\u0002\u0002\u13de\u13db\u0003\u0002\u0002\u0002\u13df\u13f1",
    "\u0003\u0002\u0002\u0002\u13e0\u13e1\u0007\u0254\u0002\u0002\u13e1\u13e3",
    "\u0007\u0149\u0002\u0002\u13e2\u13e4\u0005\u03fe\u0200\u0002\u13e3\u13e2",
    "\u0003\u0002\u0002\u0002\u13e3\u13e4\u0003\u0002\u0002\u0002\u13e4\u13f1",
    "\u0003\u0002\u0002\u0002\u13e5\u13e6\u0007\u0166\u0002\u0002\u13e6\u13e8",
    "\u0007\u0149\u0002\u0002\u13e7\u13e9\u0005\u03fe\u0200\u0002\u13e8\u13e7",
    "\u0003\u0002\u0002\u0002\u13e8\u13e9\u0003\u0002\u0002\u0002\u13e9\u13f1",
    "\u0003\u0002\u0002\u0002\u13ea\u13eb\u0007\u0254\u0002\u0002\u13eb\u13ec",
    "\u0007X\u0002\u0002\u13ec\u13f1\u0005\u041e\u0210\u0002\u13ed\u13ee",
    "\u0007\u0166\u0002\u0002\u13ee\u13ef\u0007X\u0002\u0002\u13ef\u13f1",
    "\u0005\u0422\u0212\u0002\u13f0\u1315\u0003\u0002\u0002\u0002\u13f0\u1317",
    "\u0003\u0002\u0002\u0002\u13f0\u131c\u0003\u0002\u0002\u0002\u13f0\u1326",
    "\u0003\u0002\u0002\u0002\u13f0\u132f\u0003\u0002\u0002\u0002\u13f0\u1336",
    "\u0003\u0002\u0002\u0002\u13f0\u133e\u0003\u0002\u0002\u0002\u13f0\u1346",
    "\u0003\u0002\u0002\u0002\u13f0\u1347\u0003\u0002\u0002\u0002\u13f0\u134e",
    "\u0003\u0002\u0002\u0002\u13f0\u1359\u0003\u0002\u0002\u0002\u13f0\u135b",
    "\u0003\u0002\u0002\u0002\u13f0\u1364\u0003\u0002\u0002\u0002\u13f0\u1376",
    "\u0003\u0002\u0002\u0002\u13f0\u1382\u0003\u0002\u0002\u0002\u13f0\u1385",
    "\u0003\u0002\u0002\u0002\u13f0\u138a\u0003\u0002\u0002\u0002\u13f0\u138e",
    "\u0003\u0002\u0002\u0002\u13f0\u1392\u0003\u0002\u0002\u0002\u13f0\u1393",
    "\u0003\u0002\u0002\u0002\u13f0\u13a7\u0003\u0002\u0002\u0002\u13f0\u13ae",
    "\u0003\u0002\u0002\u0002\u13f0\u13b1\u0003\u0002\u0002\u0002\u13f0\u13b5",
    "\u0003\u0002\u0002\u0002\u13f0\u13b9\u0003\u0002\u0002\u0002\u13f0\u13bb",
    "\u0003\u0002\u0002\u0002\u13f0\u13bc\u0003\u0002\u0002\u0002\u13f0\u13c1",
    "\u0003\u0002\u0002\u0002\u13f0\u13c7\u0003\u0002\u0002\u0002\u13f0\u13c9",
    "\u0003\u0002\u0002\u0002\u13f0\u13e0\u0003\u0002\u0002\u0002\u13f0\u13e5",
    "\u0003\u0002\u0002\u0002\u13f0\u13ea\u0003\u0002\u0002\u0002\u13f0\u13ed",
    "\u0003\u0002\u0002\u0002\u13f1\u024f\u0003\u0002\u0002\u0002\u13f2\u13f9",
    "\u0007\u0092\u0002\u0002\u13f3\u13f4\u0006\u0129u\u0002\u13f4\u13f6",
    "\u0007\u008c\u0002\u0002\u13f5\u13f7\u0007\u0092\u0002\u0002\u13f6\u13f5",
    "\u0003\u0002\u0002\u0002\u13f6\u13f7\u0003\u0002\u0002\u0002\u13f7\u13f9",
    "\u0003\u0002\u0002\u0002\u13f8\u13f2\u0003\u0002\u0002\u0002\u13f8\u13f3",
    "\u0003\u0002\u0002\u0002\u13f9\u0251\u0003\u0002\u0002\u0002\u13fa\u13fc",
    "\u0006\u012av\u0002\u13fb\u13fd\u0007\u023e\u0002\u0002\u13fc\u13fb",
    "\u0003\u0002\u0002\u0002\u13fc\u13fd\u0003\u0002\u0002\u0002\u13fd\u1400",
    "\u0003\u0002\u0002\u0002\u13fe\u1400\u0003\u0002\u0002\u0002\u13ff\u13fa",
    "\u0003\u0002\u0002\u0002\u13ff\u13fe\u0003\u0002\u0002\u0002\u1400\u0253",
    "\u0003\u0002\u0002\u0002\u1401\u1402\tB\u0002\u0002\u1402\u0255\u0003",
    "\u0002\u0002\u0002\u1403\u1404\u0005\u0254\u012b\u0002\u1404\u1405\u0005",
    "\u0460\u0231\u0002\u1405\u0257\u0003\u0002\u0002\u0002\u1406\u1407\u0007",
    "K\u0002\u0002\u1407\u140e\u0007\u00a9\u0002\u0002\u1408\u1409\u0007",
    "i\u0002\u0002\u1409\u140e\u0007\u0154\u0002\u0002\u140a\u140b\u0007",
    "\u00f9\u0002\u0002\u140b\u140e\u0007\u008e\u0002\u0002\u140c\u140e\t",
    "G\u0002\u0002\u140d\u1406\u0003\u0002\u0002\u0002\u140d\u1408\u0003",
    "\u0002\u0002\u0002\u140d\u140a\u0003\u0002\u0002\u0002\u140d\u140c\u0003",
    "\u0002\u0002\u0002\u140e\u0259\u0003\u0002\u0002\u0002\u140f\u1410\u0007",
    "I\u0002\u0002\u1410\u1435\u0005\u0480\u0241\u0002\u1411\u1412\u0007",
    "\t\u0002\u0002\u1412\u1413\u0007\u020b\u0002\u0002\u1413\u1414\u0005",
    "\u025c\u012f\u0002\u1414\u1417\u0007\u0214\u0002\u0002\u1415\u1418\u0005",
    "\u0460\u0231\u0002\u1416\u1418\u0007\u01e0\u0002\u0002\u1417\u1415\u0003",
    "\u0002\u0002\u0002\u1417\u1416\u0003\u0002\u0002\u0002\u1418\u1435\u0003",
    "\u0002\u0002\u0002\u1419\u141b\u0007\u0014\u0002\u0002\u141a\u141c\u0005",
    "\u0402\u0202\u0002\u141b\u141a\u0003\u0002\u0002\u0002\u141b\u141c\u0003",
    "\u0002\u0002\u0002\u141c\u1426\u0003\u0002\u0002\u0002\u141d\u1427\u0005",
    "\u026e\u0138\u0002\u141e\u1423\u0005\u026a\u0136\u0002\u141f\u1420\u0007",
    "\u0198\u0002\u0002\u1420\u1422\u0005\u026a\u0136\u0002\u1421\u141f\u0003",
    "\u0002\u0002\u0002\u1422\u1425\u0003\u0002\u0002\u0002\u1423\u1421\u0003",
    "\u0002\u0002\u0002\u1423\u1424\u0003\u0002\u0002\u0002\u1424\u1427\u0003",
    "\u0002\u0002\u0002\u1425\u1423\u0003\u0002\u0002\u0002\u1426\u141d\u0003",
    "\u0002\u0002\u0002\u1426\u141e\u0003\u0002\u0002\u0002\u1427\u1435\u0003",
    "\u0002\u0002\u0002\u1428\u142a\u0007\u021c\u0002\u0002\u1429\u142b\t",
    "H\u0002\u0002\u142a\u1429\u0003\u0002\u0002\u0002\u142a\u142b\u0003",
    "\u0002\u0002\u0002\u142b\u142c\u0003\u0002\u0002\u0002\u142c\u1435\u0005",
    "\u029c\u014f\u0002\u142d\u142e\u0007\u0224\u0002\u0002\u142e\u142f\u0007",
    "\u020b\u0002\u0002\u142f\u1430\u0007\u0212\u0002\u0002\u1430\u1431\u0007",
    "\t\u0002\u0002\u1431\u1435\u0005\u0272\u013a\u0002\u1432\u1433\u0006",
    "\u012ew\u0002\u1433\u1435\u0007:\u0002\u0002\u1434\u140f\u0003\u0002",
    "\u0002\u0002\u1434\u1411\u0003\u0002\u0002\u0002\u1434\u1419\u0003\u0002",
    "\u0002\u0002\u1434\u1428\u0003\u0002\u0002\u0002\u1434\u142d\u0003\u0002",
    "\u0002\u0002\u1434\u1432\u0003\u0002\u0002\u0002\u1435\u025b\u0003\u0002",
    "\u0002\u0002\u1436\u1439\u0005\u025e\u0130\u0002\u1437\u1439\u0005\u0262",
    "\u0132\u0002\u1438\u1436\u0003\u0002\u0002\u0002\u1438\u1437\u0003\u0002",
    "\u0002\u0002\u1439\u025d\u0003\u0002\u0002\u0002\u143a\u143f\u0005\u0260",
    "\u0131\u0002\u143b\u143c\u0007\u0198\u0002\u0002\u143c\u143e\u0005\u0260",
    "\u0131\u0002\u143d\u143b\u0003\u0002\u0002\u0002\u143e\u1441\u0003\u0002",
    "\u0002\u0002\u143f\u143d\u0003\u0002\u0002\u0002\u143f\u1440\u0003\u0002",
    "\u0002\u0002\u1440\u025f\u0003\u0002\u0002\u0002\u1441\u143f\u0003\u0002",
    "\u0002\u0002\u1442\u1444\u0005\u0446\u0224\u0002\u1443\u1445\u0005\u0264",
    "\u0133\u0002\u1444\u1443\u0003\u0002\u0002\u0002\u1444\u1445\u0003\u0002",
    "\u0002\u0002\u1445\u0261\u0003\u0002\u0002\u0002\u1446\u1447\u0005\u0446",
    "\u0224\u0002\u1447\u1448\u0007\"\u0002\u0002\u1448\u1449\u0007\u019b",
    "\u0002\u0002\u1449\u144a\u00056\u001c\u0002\u144a\u144c\u0007\u019c",
    "\u0002\u0002\u144b\u144d\u0005\u0264\u0133\u0002\u144c\u144b\u0003\u0002",
    "\u0002\u0002\u144c\u144d\u0003\u0002\u0002\u0002\u144d\u0263\u0003\u0002",
    "\u0002\u0002\u144e\u144f\u0005\u0190\u00c9\u0002\u144f\u1451\u0007\u019b",
    "\u0002\u0002\u1450\u1452\u0005\u0268\u0135\u0002\u1451\u1450\u0003\u0002",
    "\u0002\u0002\u1451\u1452\u0003\u0002\u0002\u0002\u1452\u1453\u0003\u0002",
    "\u0002\u0002\u1453\u1454\u0007\u019c\u0002\u0002\u1454\u0265\u0003\u0002",
    "\u0002\u0002\u1455\u1458\u0005\u0460\u0231\u0002\u1456\u1458\u0007\u0253",
    "\u0002\u0002\u1457\u1455\u0003\u0002\u0002\u0002\u1457\u1456\u0003\u0002",
    "\u0002\u0002\u1458\u0267\u0003\u0002\u0002\u0002\u1459\u145e\u0005\u0266",
    "\u0134\u0002\u145a\u145b\u0007\u0198\u0002\u0002\u145b\u145d\u0005\u0266",
    "\u0134\u0002\u145c\u145a\u0003\u0002\u0002\u0002\u145d\u1460\u0003\u0002",
    "\u0002\u0002\u145e\u145c\u0003\u0002\u0002\u0002\u145e\u145f\u0003\u0002",
    "\u0002\u0002\u145f\u0269\u0003\u0002\u0002\u0002\u1460\u145e\u0003\u0002",
    "\u0002\u0002\u1461\u1471\tI\u0002\u0002\u1462\u1464\u0005\u026c\u0137",
    "\u0002\u1463\u1462\u0003\u0002\u0002\u0002\u1463\u1464\u0003\u0002\u0002",
    "\u0002\u1464\u1465\u0003\u0002\u0002\u0002\u1465\u1471\u0007\u00b9\u0002",
    "\u0002\u1466\u1467\u0007\u0115\u0002\u0002\u1467\u1469\u0007\u00b9\u0002",
    "\u0002\u1468\u146a\u0005\u0306\u0184\u0002\u1469\u1468\u0003\u0002\u0002",
    "\u0002\u1469\u146a\u0003\u0002\u0002\u0002\u146a\u1471\u0003\u0002\u0002",
    "\u0002\u146b\u146c\u0006\u0136x\u0002\u146c\u146d\u0007\u010d\u0002",
    "\u0002\u146d\u1471\u0007\t\u0002\u0002\u146e\u146f\u0006\u0136y\u0002",
    "\u146f\u1471\u0007\u0249\u0002\u0002\u1470\u1461\u0003\u0002\u0002\u0002",
    "\u1470\u1463\u0003\u0002\u0002\u0002\u1470\u1466\u0003\u0002\u0002\u0002",
    "\u1470\u146b\u0003\u0002\u0002\u0002\u1470\u146e\u0003\u0002\u0002\u0002",
    "\u1471\u026b\u0003\u0002\u0002\u0002\u1472\u1473\tJ\u0002\u0002\u1473",
    "\u026d\u0003\u0002\u0002\u0002\u1474\u147c\t\u0014\u0002\u0002\u1475",
    "\u1476\u0007\u02ac\u0002\u0002\u1476\u1477\u0007\u0258\u0002\u0002\u1477",
    "\u147d\u0007\u0226\u0002\u0002\u1478\u147a\u0005\u0462\u0232\u0002\u1479",
    "\u147b\u0005\u0270\u0139\u0002\u147a\u1479\u0003\u0002\u0002\u0002\u147a",
    "\u147b\u0003\u0002\u0002\u0002\u147b\u147d\u0003\u0002\u0002\u0002\u147c",
    "\u1475\u0003\u0002\u0002\u0002\u147c\u1478\u0003\u0002\u0002\u0002\u147c",
    "\u147d\u0003\u0002\u0002\u0002\u147d\u026f\u0003\u0002\u0002\u0002\u147e",
    "\u147f\u0006\u0139z\u0002\u147f\u1480\u0007\u01fc\u0002\u0002\u1480",
    "\u1485\u0007\u008b\u0002\u0002\u1481\u1482\u0007\u02ac\u0002\u0002\u1482",
    "\u1483\u0007\u0258\u0002\u0002\u1483\u1485\u0007\u0226\u0002\u0002\u1484",
    "\u147e\u0003\u0002\u0002\u0002\u1484\u1481\u0003\u0002\u0002\u0002\u1485",
    "\u0271\u0003\u0002\u0002\u0002\u1486\u1487\u0005\u0446\u0224\u0002\u1487",
    "\u1489\u0005\u0278\u013d\u0002\u1488\u148a\u0005\u0264\u0133\u0002\u1489",
    "\u1488\u0003\u0002\u0002\u0002\u1489\u148a\u0003\u0002\u0002\u0002\u148a",
    "\u148d\u0003\u0002\u0002\u0002\u148b\u148c\u0007\u020a\u0002\u0002\u148c",
    "\u148e\u0007\u00b1\u0002\u0002\u148d\u148b\u0003\u0002\u0002\u0002\u148d",
    "\u148e\u0003\u0002\u0002\u0002\u148e\u1491\u0003\u0002\u0002\u0002\u148f",
    "\u1491\u0005\u0274\u013b\u0002\u1490\u1486\u0003\u0002\u0002\u0002\u1490",
    "\u148f\u0003\u0002\u0002\u0002\u1491\u0273\u0003\u0002\u0002\u0002\u1492",
    "\u1497\u0005\u0276\u013c\u0002\u1493\u1494\u0007\u0198\u0002\u0002\u1494",
    "\u1496\u0005\u0276\u013c\u0002\u1495\u1493\u0003\u0002\u0002\u0002\u1496",
    "\u1499\u0003\u0002\u0002\u0002\u1497\u1495\u0003\u0002\u0002\u0002\u1497",
    "\u1498\u0003\u0002\u0002\u0002\u1498\u0275\u0003\u0002\u0002\u0002\u1499",
    "\u1497\u0003\u0002\u0002\u0002\u149a\u149c\u0005\u0446\u0224\u0002\u149b",
    "\u149d\u0005\u0264\u0133\u0002\u149c\u149b\u0003\u0002\u0002\u0002\u149c",
    "\u149d\u0003\u0002\u0002\u0002\u149d\u14a0\u0003\u0002\u0002\u0002\u149e",
    "\u149f\u0007\u020a\u0002\u0002\u149f\u14a1\u0007\u00b1\u0002\u0002\u14a0",
    "\u149e\u0003\u0002\u0002\u0002\u14a0\u14a1\u0003\u0002\u0002\u0002\u14a1",
    "\u0277\u0003\u0002\u0002\u0002\u14a2\u14a3\u0007\"\u0002\u0002\u14a3",
    "\u14a4\u0007\u019b\u0002\u0002\u14a4\u14a5\u00056\u001c\u0002\u14a5",
    "\u14a6\u0007\u019c\u0002\u0002\u14a6\u0279\u0003\u0002\u0002\u0002\u14a7",
    "\u14ac\u0005\u027c\u013f\u0002\u14a8\u14ac\u0005\u0286\u0144\u0002\u14a9",
    "\u14ac\u0005\u0288\u0145\u0002\u14aa\u14ac\u0005\u028c\u0147\u0002\u14ab",
    "\u14a7\u0003\u0002\u0002\u0002\u14ab\u14a8\u0003\u0002\u0002\u0002\u14ab",
    "\u14a9\u0003\u0002\u0002\u0002\u14ab\u14aa\u0003\u0002\u0002\u0002\u14ac",
    "\u027b\u0003\u0002\u0002\u0002\u14ad\u14ae\u0007\u01cd\u0002\u0002\u14ae",
    "\u14af\u0007\u02e5\u0002\u0002\u14af\u14b0\u0007\u0202\u0002\u0002\u14b0",
    "\u14b1\u0005\u0460\u0231\u0002\u14b1\u14b3\u0007\u0164\u0002\u0002\u14b2",
    "\u14b4\u0005\u049e\u0250\u0002\u14b3\u14b2\u0003\u0002\u0002\u0002\u14b3",
    "\u14b4\u0003\u0002\u0002\u0002\u14b4\u14b5\u0003\u0002\u0002\u0002\u14b5",
    "\u14b7\tK\u0002\u0002\u14b6\u14b8\u0005\u027e\u0140\u0002\u14b7\u14b6",
    "\u0003\u0002\u0002\u0002\u14b7\u14b8\u0003\u0002\u0002\u0002\u14b8\u14ba",
    "\u0003\u0002\u0002\u0002\u14b9\u14bb\u0005\u0282\u0142\u0002\u14ba\u14b9",
    "\u0003\u0002\u0002\u0002\u14ba\u14bb\u0003\u0002\u0002\u0002\u14bb\u14bd",
    "\u0003\u0002\u0002\u0002\u14bc\u14be\u0005\u0284\u0143\u0002\u14bd\u14bc",
    "\u0003\u0002\u0002\u0002\u14bd\u14be\u0003\u0002\u0002\u0002\u14be\u027d",
    "\u0003\u0002\u0002\u0002\u14bf\u14c1\u0007\u02e7\u0002\u0002\u14c0\u14c2",
    "\u0005\u049e\u0250\u0002\u14c1\u14c0\u0003\u0002\u0002\u0002\u14c1\u14c2",
    "\u0003\u0002\u0002\u0002\u14c2\u14c3\u0003\u0002\u0002\u0002\u14c3\u14ca",
    "\u0005\u0280\u0141\u0002\u14c4\u14c6\u0007\u0198\u0002\u0002\u14c5\u14c4",
    "\u0003\u0002\u0002\u0002\u14c5\u14c6\u0003\u0002\u0002\u0002\u14c6\u14c7",
    "\u0003\u0002\u0002\u0002\u14c7\u14c9\u0005\u0280\u0141\u0002\u14c8\u14c5",
    "\u0003\u0002\u0002\u0002\u14c9\u14cc\u0003\u0002\u0002\u0002\u14ca\u14c8",
    "\u0003\u0002\u0002\u0002\u14ca\u14cb\u0003\u0002\u0002\u0002\u14cb\u027f",
    "\u0003\u0002\u0002\u0002\u14cc\u14ca\u0003\u0002\u0002\u0002\u14cd\u14d0",
    "\u0007\u017e\u0002\u0002\u14ce\u14cf\u0007\u018a\u0002\u0002\u14cf\u14d1",
    "\u0007\u017e\u0002\u0002\u14d0\u14ce\u0003\u0002\u0002\u0002\u14d0\u14d1",
    "\u0003\u0002\u0002\u0002\u14d1\u0281\u0003\u0002\u0002\u0002\u14d2\u14d4",
    "\u0007\u02e4\u0002\u0002\u14d3\u14d5\u0005\u049e\u0250\u0002\u14d4\u14d3",
    "\u0003\u0002\u0002\u0002\u14d4\u14d5\u0003\u0002\u0002\u0002\u14d5\u14d6",
    "\u0003\u0002\u0002\u0002\u14d6\u14d7\u0007\u017e\u0002\u0002\u14d7\u0283",
    "\u0003\u0002\u0002\u0002\u14d8\u14d9\tL\u0002\u0002\u14d9\u0285\u0003",
    "\u0002\u0002\u0002\u14da\u14db\u0007\u01ae\u0002\u0002\u14db\u14dc\u0007",
    "\u02e5\u0002\u0002\u14dc\u14dd\u0007\u0202\u0002\u0002\u14dd\u14df\u0005",
    "\u045a\u022e\u0002\u14de\u14e0\u0005\u027e\u0140\u0002\u14df\u14de\u0003",
    "\u0002\u0002\u0002\u14df\u14e0\u0003\u0002\u0002\u0002\u14e0\u14e2\u0003",
    "\u0002\u0002\u0002\u14e1\u14e3\u0005\u0282\u0142\u0002\u14e2\u14e1\u0003",
    "\u0002\u0002\u0002\u14e2\u14e3\u0003\u0002\u0002\u0002\u14e3\u14e5\u0003",
    "\u0002\u0002\u0002\u14e4\u14e6\u0005\u0284\u0143\u0002\u14e5\u14e4\u0003",
    "\u0002\u0002\u0002\u14e5\u14e6\u0003\u0002\u0002\u0002\u14e6\u14e8\u0003",
    "\u0002\u0002\u0002\u14e7\u14e9\u0007\u01fa\u0002\u0002\u14e8\u14e7\u0003",
    "\u0002\u0002\u0002\u14e8\u14e9\u0003\u0002\u0002\u0002\u14e9\u0287\u0003",
    "\u0002\u0002\u0002\u14ea\u14eb\u0007\u026d\u0002\u0002\u14eb\u14ec\u0007",
    "\u02e5\u0002\u0002\u14ec\u14ed\u0007\u0202\u0002\u0002\u14ed\u14f0\u0005",
    "\u0460\u0231\u0002\u14ee\u14ef\u0007\u01fc\u0002\u0002\u14ef\u14f1\u0005",
    "\u028a\u0146\u0002\u14f0\u14ee\u0003\u0002\u0002\u0002\u14f0\u14f1\u0003",
    "\u0002\u0002\u0002\u14f1\u0289\u0003\u0002\u0002\u0002\u14f2\u14f9\u0005",
    "\u046e\u0238\u0002\u14f3\u14f5\u0007\u0198\u0002\u0002\u14f4\u14f3\u0003",
    "\u0002\u0002\u0002\u14f4\u14f5\u0003\u0002\u0002\u0002\u14f5\u14f6\u0003",
    "\u0002\u0002\u0002\u14f6\u14f8\u0005\u046e\u0238\u0002\u14f7\u14f4\u0003",
    "\u0002\u0002\u0002\u14f8\u14fb\u0003\u0002\u0002\u0002\u14f9\u14f7\u0003",
    "\u0002\u0002\u0002\u14f9\u14fa\u0003\u0002\u0002\u0002\u14fa\u028b\u0003",
    "\u0002\u0002\u0002\u14fb\u14f9\u0003\u0002\u0002\u0002\u14fc\u14fd\u0007",
    "\u01e9\u0002\u0002\u14fd\u14fe\u0007\u02e5\u0002\u0002\u14fe\u14ff\u0007",
    "\u0202\u0002\u0002\u14ff\u1501\u0005\u045a\u022e\u0002\u1500\u1502\u0007",
    "\u01fa\u0002\u0002\u1501\u1500\u0003\u0002\u0002\u0002\u1501\u1502\u0003",
    "\u0002\u0002\u0002\u1502\u028d\u0003\u0002\u0002\u0002\u1503\u150a\u0005",
    "\u0290\u0149\u0002\u1504\u150a\u0005\u0292\u014a\u0002\u1505\u150a\u0005",
    "\u0296\u014c\u0002\u1506\u150a\u0005\u0298\u014d\u0002\u1507\u1508\u0006",
    "\u0148{\u0002\u1508\u150a\u0005\u029a\u014e\u0002\u1509\u1503\u0003",
    "\u0002\u0002\u0002\u1509\u1504\u0003\u0002\u0002\u0002\u1509\u1505\u0003",
    "\u0002\u0002\u0002\u1509\u1506\u0003\u0002\u0002\u0002\u1509\u1507\u0003",
    "\u0002\u0002\u0002\u150a\u028f\u0003\u0002\u0002\u0002\u150b\u150c\t",
    "M\u0002\u0002\u150c\u150f\u0005\u0446\u0224\u0002\u150d\u1510\u0005",
    "\u047c\u023f\u0002\u150e\u1510\u0005\u040e\u0208\u0002\u150f\u150d\u0003",
    "\u0002\u0002\u0002\u150f\u150e\u0003\u0002\u0002\u0002\u150f\u1510\u0003",
    "\u0002\u0002\u0002\u1510\u0291\u0003\u0002\u0002\u0002\u1511\u151c\t",
    "M\u0002\u0002\u1512\u1513\u0006\u014a|\u0002\u1513\u151d\u0007\u008c",
    "\u0002\u0002\u1514\u1515\u0006\u014a}\u0002\u1515\u151d\u0007\u00fc",
    "\u0002\u0002\u1516\u1517\u0006\u014a~\u0002\u1517\u1518\u0007\u0016",
    "\u0002\u0002\u1518\u1519\u0007\u0181\u0002\u0002\u1519\u151d\u0005\u0494",
    "\u024b\u0002\u151a\u151b\u0006\u014a\u007f\u0002\u151b\u151d\u0007A",
    "\u0002\u0002\u151c\u1512\u0003\u0002\u0002\u0002\u151c\u1514\u0003\u0002",
    "\u0002\u0002\u151c\u1516\u0003\u0002\u0002\u0002\u151c\u151a\u0003\u0002",
    "\u0002\u0002\u151c\u151d\u0003\u0002\u0002\u0002\u151d\u151e\u0003\u0002",
    "\u0002\u0002\u151e\u151f\u0005\u0294\u014b\u0002\u151f\u0293\u0003\u0002",
    "\u0002\u0002\u1520\u152d\u0005\u010e\u0088\u0002\u1521\u1526\u0006\u014b",
    "\u0080\u0002\u1522\u1527\u0005\u00e0q\u0002\u1523\u1527\u0005\u00ec",
    "w\u0002\u1524\u1527\u0005\u010c\u0087\u0002\u1525\u1527\u0005\u019a",
    "\u00ce\u0002\u1526\u1522\u0003\u0002\u0002\u0002\u1526\u1523\u0003\u0002",
    "\u0002\u0002\u1526\u1524\u0003\u0002\u0002\u0002\u1526\u1525\u0003\u0002",
    "\u0002\u0002\u1527\u152d\u0003\u0002\u0002\u0002\u1528\u1529\u0006\u014b",
    "\u0081\u0002\u1529\u152a\u0007\u01fc\u0002\u0002\u152a\u152b\u0007d",
    "\u0002\u0002\u152b\u152d\u0005\u046e\u0238\u0002\u152c\u1520\u0003\u0002",
    "\u0002\u0002\u152c\u1521\u0003\u0002\u0002\u0002\u152c\u1528\u0003\u0002",
    "\u0002\u0002\u152d\u0295\u0003\u0002\u0002\u0002\u152e\u152f\u0007\u0019",
    "\u0002\u0002\u152f\u1530\u0005\u0494\u024b\u0002\u1530\u0297\u0003\u0002",
    "\u0002\u0002\u1531\u1532\u0007\u029b\u0002\u0002\u1532\u1533\u0005\u0460",
    "\u0231\u0002\u1533\u0299\u0003\u0002\u0002\u0002\u1534\u1535\u0007\u02ea",
    "\u0002\u0002\u1535\u029b\u0003\u0002\u0002\u0002\u1536\u1537\b\u014f",
    "\u0001\u0002\u1537\u153d\u0005\u029e\u0150\u0002\u1538\u153a\u0007\u0217",
    "\u0002\u0002\u1539\u153b\u0005\u02f0\u0179\u0002\u153a\u1539\u0003\u0002",
    "\u0002\u0002\u153a\u153b\u0003\u0002\u0002\u0002\u153b\u153c\u0003\u0002",
    "\u0002\u0002\u153c\u153e\tN\u0002\u0002\u153d\u1538\u0003\u0002\u0002",
    "\u0002\u153d\u153e\u0003\u0002\u0002\u0002\u153e\u1542\u0003\u0002\u0002",
    "\u0002\u153f\u1540\u0007\u023f\u0002\u0002\u1540\u1542\u0005\u029c\u014f",
    "\u0006\u1541\u1536\u0003\u0002\u0002\u0002\u1541\u153f\u0003\u0002\u0002",
    "\u0002\u1542\u154e\u0003\u0002\u0002\u0002\u1543\u1544\f\u0005\u0002",
    "\u0002\u1544\u1545\tO\u0002\u0002\u1545\u154d\u0005\u029c\u014f\u0006",
    "\u1546\u1547\f\u0004\u0002\u0002\u1547\u1548\u0007\u02af\u0002\u0002",
    "\u1548\u154d\u0005\u029c\u014f\u0005\u1549\u154a\f\u0003\u0002\u0002",
    "\u154a\u154b\tP\u0002\u0002\u154b\u154d\u0005\u029c\u014f\u0004\u154c",
    "\u1543\u0003\u0002\u0002\u0002\u154c\u1546\u0003\u0002\u0002\u0002\u154c",
    "\u1549\u0003\u0002\u0002\u0002\u154d\u1550\u0003\u0002\u0002\u0002\u154e",
    "\u154c\u0003\u0002\u0002\u0002\u154e\u154f\u0003\u0002\u0002\u0002\u154f",
    "\u029d\u0003\u0002\u0002\u0002\u1550\u154e\u0003\u0002\u0002\u0002\u1551",
    "\u1552\b\u0150\u0001\u0002\u1552\u1553\u0005\u02a2\u0152\u0002\u1553",
    "\u1565\u0003\u0002\u0002\u0002\u1554\u1555\f\u0005\u0002\u0002\u1555",
    "\u1557\u0007\u0217\u0002\u0002\u1556\u1558\u0005\u02f0\u0179\u0002\u1557",
    "\u1556\u0003\u0002\u0002\u0002\u1557\u1558\u0003\u0002\u0002\u0002\u1558",
    "\u1559\u0003\u0002\u0002\u0002\u1559\u1564\u0007\u0242\u0002\u0002\u155a",
    "\u155b\f\u0004\u0002\u0002\u155b\u155c\u0005\u02a0\u0151\u0002\u155c",
    "\u155d\u0005\u02a2\u0152\u0002\u155d\u1564\u0003\u0002\u0002\u0002\u155e",
    "\u155f\f\u0003\u0002\u0002\u155f\u1560\u0005\u02a0\u0151\u0002\u1560",
    "\u1561\tQ\u0002\u0002\u1561\u1562\u0005\u011a\u008e\u0002\u1562\u1564",
    "\u0003\u0002\u0002\u0002\u1563\u1554\u0003\u0002\u0002\u0002\u1563\u155a",
    "\u0003\u0002\u0002\u0002\u1563\u155e\u0003\u0002\u0002\u0002\u1564\u1567",
    "\u0003\u0002\u0002\u0002\u1565\u1563\u0003\u0002\u0002\u0002\u1565\u1566",
    "\u0003\u0002\u0002\u0002\u1566\u029f\u0003\u0002\u0002\u0002\u1567\u1565",
    "\u0003\u0002\u0002\u0002\u1568\u1569\tR\u0002\u0002\u1569\u02a1\u0003",
    "\u0002\u0002\u0002\u156a\u1578\u0005\u02a6\u0154\u0002\u156b\u156d\u0005",
    "\u02f0\u0179\u0002\u156c\u156b\u0003\u0002\u0002\u0002\u156c\u156d\u0003",
    "\u0002\u0002\u0002\u156d\u156e\u0003\u0002\u0002\u0002\u156e\u1579\u0005",
    "\u02a4\u0153\u0002\u156f\u1570\u0006\u0152\u0088\u0002\u1570\u1572\u0007",
    "\u02fd\u0002\u0002\u1571\u1573\u0007\u02bc\u0002\u0002\u1572\u1571\u0003",
    "\u0002\u0002\u0002\u1572\u1573\u0003\u0002\u0002\u0002\u1573\u1574\u0003",
    "\u0002\u0002\u0002\u1574\u1579\u0005\u02fc\u017f\u0002\u1575\u1576\u0007",
    "\u013b\u0002\u0002\u1576\u1577\u0007\u0220\u0002\u0002\u1577\u1579\u0005",
    "\u02a6\u0154\u0002\u1578\u156c\u0003\u0002\u0002\u0002\u1578\u156f\u0003",
    "\u0002\u0002\u0002\u1578\u1575\u0003\u0002\u0002\u0002\u1578\u1579\u0003",
    "\u0002\u0002\u0002\u1579\u02a3\u0003\u0002\u0002\u0002\u157a\u1580\u0007",
    "\u0214\u0002\u0002\u157b\u1581\u0005\u011a\u008e\u0002\u157c\u157d\u0007",
    "\u019b\u0002\u0002\u157d\u157e\u0005\u02ec\u0177\u0002\u157e\u157f\u0007",
    "\u019c\u0002\u0002\u157f\u1581\u0003\u0002\u0002\u0002\u1580\u157b\u0003",
    "\u0002\u0002\u0002\u1580\u157c\u0003\u0002\u0002\u0002\u1581\u1590\u0003",
    "\u0002\u0002\u0002\u1582\u1583\u0007\u01b5\u0002\u0002\u1583\u1584\u0005",
    "\u02a6\u0154\u0002\u1584\u1585\u0007\u01b0\u0002\u0002\u1585\u1586\u0005",
    "\u02a2\u0152\u0002\u1586\u1590\u0003\u0002\u0002\u0002\u1587\u1588\u0007",
    "\u0220\u0002\u0002\u1588\u158b\u0005\u02a8\u0155\u0002\u1589\u158a\u0007",
    "\u0086\u0002\u0002\u158a\u158c\u0005\u02a8\u0155\u0002\u158b\u1589\u0003",
    "\u0002\u0002\u0002\u158b\u158c\u0003\u0002\u0002\u0002\u158c\u1590\u0003",
    "\u0002\u0002\u0002\u158d\u158e\u0007\u025c\u0002\u0002\u158e\u1590\u0005",
    "\u02a6\u0154\u0002\u158f\u157a\u0003\u0002\u0002\u0002\u158f\u1582\u0003",
    "\u0002\u0002\u0002\u158f\u1587\u0003\u0002\u0002\u0002\u158f\u158d\u0003",
    "\u0002\u0002\u0002\u1590\u02a5\u0003\u0002\u0002\u0002\u1591\u1592\b",
    "\u0154\u0001\u0002\u1592\u1593\u0005\u02a8\u0155\u0002\u1593\u15ae\u0003",
    "\u0002\u0002\u0002\u1594\u1595\f\t\u0002\u0002\u1595\u1596\u0007\u0194",
    "\u0002\u0002\u1596\u15ad\u0005\u02a6\u0154\n\u1597\u1598\f\b\u0002\u0002",
    "\u1598\u1599\tS\u0002\u0002\u1599\u15ad\u0005\u02a6\u0154\t\u159a\u159b",
    "\f\u0007\u0002\u0002\u159b\u159c\tT\u0002\u0002\u159c\u15ad\u0005\u02a6",
    "\u0154\b\u159d\u159e\f\u0005\u0002\u0002\u159e\u159f\tU\u0002\u0002",
    "\u159f\u15ad\u0005\u02a6\u0154\u0006\u15a0\u15a1\f\u0004\u0002\u0002",
    "\u15a1\u15a2\u0007\u0193\u0002\u0002\u15a2\u15ad\u0005\u02a6\u0154\u0005",
    "\u15a3\u15a4\f\u0003\u0002\u0002\u15a4\u15a5\u0007\u0196\u0002\u0002",
    "\u15a5\u15ad\u0005\u02a6\u0154\u0004\u15a6\u15a7\f\u0006\u0002\u0002",
    "\u15a7\u15a8\tT\u0002\u0002\u15a8\u15a9\u0007\u0211\u0002\u0002\u15a9",
    "\u15aa\u0005\u029c\u014f\u0002\u15aa\u15ab\u0005\u02f4\u017b\u0002\u15ab",
    "\u15ad\u0003\u0002\u0002\u0002\u15ac\u1594\u0003\u0002\u0002\u0002\u15ac",
    "\u1597\u0003\u0002\u0002\u0002\u15ac\u159a\u0003\u0002\u0002\u0002\u15ac",
    "\u159d\u0003\u0002\u0002\u0002\u15ac\u15a0\u0003\u0002\u0002\u0002\u15ac",
    "\u15a3\u0003\u0002\u0002\u0002\u15ac\u15a6\u0003\u0002\u0002\u0002\u15ad",
    "\u15b0\u0003\u0002\u0002\u0002\u15ae\u15ac\u0003\u0002\u0002\u0002\u15ae",
    "\u15af\u0003\u0002\u0002\u0002\u15af\u02a7\u0003\u0002\u0002\u0002\u15b0",
    "\u15ae\u0003\u0002\u0002\u0002\u15b1\u15b2\b\u0155\u0001\u0002\u15b2",
    "\u161a\u0005\u02dc\u016f\u0002\u15b3\u15b5\u0005\u040e\u0208\u0002\u15b4",
    "\u15b6\u0005\u02ac\u0157\u0002\u15b5\u15b4\u0003\u0002\u0002\u0002\u15b5",
    "\u15b6\u0003\u0002\u0002\u0002\u15b6\u161a\u0003\u0002\u0002\u0002\u15b7",
    "\u161a\u0005\u02c4\u0163\u0002\u15b8\u161a\u0005\u02d6\u016c\u0002\u15b9",
    "\u161a\u0005\u0474\u023b\u0002\u15ba\u161a\u0007\u01a6\u0002\u0002\u15bb",
    "\u161a\u0005\u02ae\u0158\u0002\u15bc\u15bd\u0006\u0155\u0090\u0002\u15bd",
    "\u161a\u0005\u02b0\u0159\u0002\u15be\u15bf\u0006\u0155\u0091\u0002\u15bf",
    "\u161a\u0005\u02b2\u015a\u0002\u15c0\u15c1\tV\u0002\u0002\u15c1\u161a",
    "\u0005\u02a8\u0155\u0010\u15c2\u15c3\u0005\u02f2\u017a\u0002\u15c3\u15c4",
    "\u0005\u02a8\u0155\u000f\u15c4\u161a\u0003\u0002\u0002\u0002\u15c5\u15c7",
    "\u0007\u012f\u0002\u0002\u15c6\u15c5\u0003\u0002\u0002\u0002\u15c6\u15c7",
    "\u0003\u0002\u0002\u0002\u15c7\u15c8\u0003\u0002\u0002\u0002\u15c8\u15c9",
    "\u0007\u019b\u0002\u0002\u15c9\u15ca\u0005\u02ec\u0177\u0002\u15ca\u15cb",
    "\u0007\u019c\u0002\u0002\u15cb\u161a\u0003\u0002\u0002\u0002\u15cc\u15ce",
    "\u0007\u01f2\u0002\u0002\u15cd\u15cc\u0003\u0002\u0002\u0002\u15cd\u15ce",
    "\u0003\u0002\u0002\u0002\u15ce\u15cf\u0003\u0002\u0002\u0002\u15cf\u161a",
    "\u0005\u011a\u008e\u0002\u15d0\u15d1\u0007\u019d\u0002\u0002\u15d1\u15d2",
    "\u0005\u0460\u0231\u0002\u15d2\u15d3\u0005\u029c\u014f\u0002\u15d3\u15d4",
    "\u0007\u019e\u0002\u0002\u15d4\u161a\u0003\u0002\u0002\u0002\u15d5\u15d6",
    "\u0007\u022f\u0002\u0002\u15d6\u15d7\u0005\u02be\u0160\u0002\u15d7\u15d8",
    "\u0007>\u0002\u0002\u15d8\u15d9\u0007\u019b\u0002\u0002\u15d9\u15db",
    "\u0005\u02a6\u0154\u0002\u15da\u15dc\u0005\u02c2\u0162\u0002\u15db\u15da",
    "\u0003\u0002\u0002\u0002\u15db\u15dc\u0003\u0002\u0002\u0002\u15dc\u15dd",
    "\u0003\u0002\u0002\u0002\u15dd\u15de\u0007\u019c\u0002\u0002\u15de\u161a",
    "\u0003\u0002\u0002\u0002\u15df\u15e0\u0007\u01b7\u0002\u0002\u15e0\u161a",
    "\u0005\u02a8\u0155\n\u15e1\u15e2\u0007\u01c2\u0002\u0002\u15e2\u15e3",
    "\u0007\u019b\u0002\u0002\u15e3\u15e4\u0005\u029c\u014f\u0002\u15e4\u15e5",
    "\u0007\u01b1\u0002\u0002\u15e5\u15e7\u0005\u02ea\u0176\u0002\u15e6\u15e8",
    "\u0005\u02aa\u0156\u0002\u15e7\u15e6\u0003\u0002\u0002\u0002\u15e7\u15e8",
    "\u0003\u0002\u0002\u0002\u15e8\u15e9\u0003\u0002\u0002\u0002\u15e9\u15ea",
    "\u0007\u019c\u0002\u0002\u15ea\u161a\u0003\u0002\u0002\u0002\u15eb\u15ed",
    "\u0007\u01c1\u0002\u0002\u15ec\u15ee\u0005\u029c\u014f\u0002\u15ed\u15ec",
    "\u0003\u0002\u0002\u0002\u15ed\u15ee\u0003\u0002\u0002\u0002\u15ee\u15f2",
    "\u0003\u0002\u0002\u0002\u15ef\u15f0\u0005\u02e4\u0173\u0002\u15f0\u15f1",
    "\u0005\u02e6\u0174\u0002\u15f1\u15f3\u0003\u0002\u0002\u0002\u15f2\u15ef",
    "\u0003\u0002\u0002\u0002\u15f3\u15f4\u0003\u0002\u0002\u0002\u15f4\u15f2",
    "\u0003\u0002\u0002\u0002\u15f4\u15f5\u0003\u0002\u0002\u0002\u15f5\u15f7",
    "\u0003\u0002\u0002\u0002\u15f6\u15f8\u0005\u02e8\u0175\u0002\u15f7\u15f6",
    "\u0003\u0002\u0002\u0002\u15f7\u15f8\u0003\u0002\u0002\u0002\u15f8\u15f9",
    "\u0003\u0002\u0002\u0002\u15f9\u15fa\u0007\u0012\u0002\u0002\u15fa\u161a",
    "\u0003\u0002\u0002\u0002\u15fb\u15fc\u0007\u01cb\u0002\u0002\u15fc\u15fd",
    "\u0007\u019b\u0002\u0002\u15fd\u15fe\u0005\u029c\u014f\u0002\u15fe\u15ff",
    "\u0007\u0198\u0002\u0002\u15ff\u1600\u0005\u02ea\u0176\u0002\u1600\u1601",
    "\u0007\u019c\u0002\u0002\u1601\u161a\u0003\u0002\u0002\u0002\u1602\u1603",
    "\u0007\u01cb\u0002\u0002\u1603\u1604\u0007\u019b\u0002\u0002\u1604\u1605",
    "\u0005\u029c\u014f\u0002\u1605\u1606\u0007\u029c\u0002\u0002\u1606\u1607",
    "\u0005\u03a0\u01d1\u0002\u1607\u1608\u0007\u019c\u0002\u0002\u1608\u161a",
    "\u0003\u0002\u0002\u0002\u1609\u160a\u0007\u01e0\u0002\u0002\u160a\u160b",
    "\u0007\u019b\u0002\u0002\u160b\u160c\u0005\u0468\u0235\u0002\u160c\u160d",
    "\u0007\u019c\u0002\u0002\u160d\u161a\u0003\u0002\u0002\u0002\u160e\u160f",
    "\u0007\u02a1\u0002\u0002\u160f\u1610\u0007\u019b\u0002\u0002\u1610\u1611",
    "\u0005\u0468\u0235\u0002\u1611\u1612\u0007\u019c\u0002\u0002\u1612\u161a",
    "\u0003\u0002\u0002\u0002\u1613\u1614\u0007\u0211\u0002\u0002\u1614\u1615",
    "\u0005\u029c\u014f\u0002\u1615\u1616\u0005\u02f4\u017b\u0002\u1616\u1617",
    "\u0007\u0189\u0002\u0002\u1617\u1618\u0005\u029c\u014f\u0002\u1618\u161a",
    "\u0003\u0002\u0002\u0002\u1619\u15b1\u0003\u0002\u0002\u0002\u1619\u15b3",
    "\u0003\u0002\u0002\u0002\u1619\u15b7\u0003\u0002\u0002\u0002\u1619\u15b8",
    "\u0003\u0002\u0002\u0002\u1619\u15b9\u0003\u0002\u0002\u0002\u1619\u15ba",
    "\u0003\u0002\u0002\u0002\u1619\u15bb\u0003\u0002\u0002\u0002\u1619\u15bc",
    "\u0003\u0002\u0002\u0002\u1619\u15be\u0003\u0002\u0002\u0002\u1619\u15c0",
    "\u0003\u0002\u0002\u0002\u1619\u15c2\u0003\u0002\u0002\u0002\u1619\u15c6",
    "\u0003\u0002\u0002\u0002\u1619\u15cd\u0003\u0002\u0002\u0002\u1619\u15d0",
    "\u0003\u0002\u0002\u0002\u1619\u15d5\u0003\u0002\u0002\u0002\u1619\u15df",
    "\u0003\u0002\u0002\u0002\u1619\u15e1\u0003\u0002\u0002\u0002\u1619\u15eb",
    "\u0003\u0002\u0002\u0002\u1619\u15fb\u0003\u0002\u0002\u0002\u1619\u1602",
    "\u0003\u0002\u0002\u0002\u1619\u1609\u0003\u0002\u0002\u0002\u1619\u160e",
    "\u0003\u0002\u0002\u0002\u1619\u1613\u0003\u0002\u0002\u0002\u161a\u1623",
    "\u0003\u0002\u0002\u0002\u161b\u161c\f\u0011\u0002\u0002\u161c\u161d",
    "\u0007\u017d\u0002\u0002\u161d\u1622\u0005\u02a8\u0155\u0012\u161e\u161f",
    "\f\u0017\u0002\u0002\u161f\u1620\u0007\u01c6\u0002\u0002\u1620\u1622",
    "\u0005\u0494\u024b\u0002\u1621\u161b\u0003\u0002\u0002\u0002\u1621\u161e",
    "\u0003\u0002\u0002\u0002\u1622\u1625\u0003\u0002\u0002\u0002\u1623\u1621",
    "\u0003\u0002\u0002\u0002\u1623\u1624\u0003\u0002\u0002\u0002\u1624\u02a9",
    "\u0003\u0002\u0002\u0002\u1625\u1623\u0003\u0002\u0002\u0002\u1626\u1627",
    "\u0006\u0156\u0094\u0002\u1627\u1628\u0007\u02fb\u0002\u0002\u1628\u02ab",
    "\u0003\u0002\u0002\u0002\u1629\u162a\u0006\u0157\u0095\u0002\u162a\u162b",
    "\u0007\u01a0\u0002\u0002\u162b\u1630\u0005\u047a\u023e\u0002\u162c\u162d",
    "\u0006\u0157\u0096\u0002\u162d\u162e\u0007\u01a1\u0002\u0002\u162e\u1630",
    "\u0005\u047a\u023e\u0002\u162f\u1629\u0003\u0002\u0002\u0002\u162f\u162c",
    "\u0003\u0002\u0002\u0002\u1630\u02ad\u0003\u0002\u0002\u0002\u1631\u1632",
    "\u0007H\u0002\u0002\u1632\u1634\u0007\u019b\u0002\u0002\u1633\u1635",
    "\u0007\u01e6\u0002\u0002\u1634\u1633\u0003\u0002\u0002\u0002\u1634\u1635",
    "\u0003\u0002\u0002\u0002\u1635\u1636\u0003\u0002\u0002\u0002\u1636\u1637",
    "\u0005\u02bc\u015f\u0002\u1637\u163a\u0007\u019c\u0002\u0002\u1638\u1639",
    "\u0006\u0158\u0097\u0002\u1639\u163b\u0005\u02b4\u015b\u0002\u163a\u1638",
    "\u0003\u0002\u0002\u0002\u163a\u163b\u0003\u0002\u0002\u0002\u163b\u16b5",
    "\u0003\u0002\u0002\u0002\u163c\u163d\tW\u0002\u0002\u163d\u163e\u0007",
    "\u019b\u0002\u0002\u163e\u163f\u0005\u02bc\u015f\u0002\u163f\u1642\u0007",
    "\u019c\u0002\u0002\u1640\u1641\u0006\u0158\u0098\u0002\u1641\u1643\u0005",
    "\u02b4\u015b\u0002\u1642\u1640\u0003\u0002\u0002\u0002\u1642\u1643\u0003",
    "\u0002\u0002\u0002\u1643\u16b5\u0003\u0002\u0002\u0002\u1644\u1645\u0006",
    "\u0158\u0099\u0002\u1645\u16b5\u0005\u02ba\u015e\u0002\u1646\u1647\u0007",
    "\u01cc\u0002\u0002\u1647\u1649\u0007\u019b\u0002\u0002\u1648\u164a\u0007",
    "\u01ad\u0002\u0002\u1649\u1648\u0003\u0002\u0002\u0002\u1649\u164a\u0003",
    "\u0002\u0002\u0002\u164a\u164b\u0003\u0002\u0002\u0002\u164b\u164c\u0007",
    "\u018b\u0002\u0002\u164c\u164f\u0007\u019c\u0002\u0002\u164d\u164e\u0006",
    "\u0158\u009a\u0002\u164e\u1650\u0005\u02b4\u015b\u0002\u164f\u164d\u0003",
    "\u0002\u0002\u0002\u164f\u1650\u0003\u0002\u0002\u0002\u1650\u16b5\u0003",
    "\u0002\u0002\u0002\u1651\u1652\u0007\u01cc\u0002\u0002\u1652\u165a\u0007",
    "\u019b\u0002\u0002\u1653\u1655\u0007\u01ad\u0002\u0002\u1654\u1653\u0003",
    "\u0002\u0002\u0002\u1654\u1655\u0003\u0002\u0002\u0002\u1655\u1656\u0003",
    "\u0002\u0002\u0002\u1656\u165b\u0007\u018b\u0002\u0002\u1657\u165b\u0005",
    "\u02bc\u015f\u0002\u1658\u1659\u0007\u01e6\u0002\u0002\u1659\u165b\u0005",
    "\u02ec\u0177\u0002\u165a\u1654\u0003\u0002\u0002\u0002\u165a\u1657\u0003",
    "\u0002\u0002\u0002\u165a\u1658\u0003\u0002\u0002\u0002\u165b\u165c\u0003",
    "\u0002\u0002\u0002\u165c\u165f\u0007\u019c\u0002\u0002\u165d\u165e\u0006",
    "\u0158\u009b\u0002\u165e\u1660\u0005\u02b4\u015b\u0002\u165f\u165d\u0003",
    "\u0002\u0002\u0002\u165f\u1660\u0003\u0002\u0002\u0002\u1660\u16b5\u0003",
    "\u0002\u0002\u0002\u1661\u1662\u0007\u0238\u0002\u0002\u1662\u1664\u0007",
    "\u019b\u0002\u0002\u1663\u1665\u0007\u01e6\u0002\u0002\u1664\u1663\u0003",
    "\u0002\u0002\u0002\u1664\u1665\u0003\u0002\u0002\u0002\u1665\u1666\u0003",
    "\u0002\u0002\u0002\u1666\u1667\u0005\u02bc\u015f\u0002\u1667\u166a\u0007",
    "\u019c\u0002\u0002\u1668\u1669\u0006\u0158\u009c\u0002\u1669\u166b\u0005",
    "\u02b4\u015b\u0002\u166a\u1668\u0003\u0002\u0002\u0002\u166a\u166b\u0003",
    "\u0002\u0002\u0002\u166b\u16b5\u0003\u0002\u0002\u0002\u166c\u166d\u0007",
    "\u0230\u0002\u0002\u166d\u166f\u0007\u019b\u0002\u0002\u166e\u1670\u0007",
    "\u01e6\u0002\u0002\u166f\u166e\u0003\u0002\u0002\u0002\u166f\u1670\u0003",
    "\u0002\u0002\u0002\u1670\u1671\u0003\u0002\u0002\u0002\u1671\u1672\u0005",
    "\u02bc\u015f\u0002\u1672\u1675\u0007\u019c\u0002\u0002\u1673\u1674\u0006",
    "\u0158\u009d\u0002\u1674\u1676\u0005\u02b4\u015b\u0002\u1675\u1673\u0003",
    "\u0002\u0002\u0002\u1675\u1676\u0003\u0002\u0002\u0002\u1676\u16b5\u0003",
    "\u0002\u0002\u0002\u1677\u1678\u0007\u0280\u0002\u0002\u1678\u1679\u0007",
    "\u019b\u0002\u0002\u1679\u167a\u0005\u02bc\u015f\u0002\u167a\u167d\u0007",
    "\u019c\u0002\u0002\u167b\u167c\u0006\u0158\u009e\u0002\u167c\u167e\u0005",
    "\u02b4\u015b\u0002\u167d\u167b\u0003\u0002\u0002\u0002\u167d\u167e\u0003",
    "\u0002\u0002\u0002\u167e\u16b5\u0003\u0002\u0002\u0002\u167f\u1680\u0007",
    "\u02a4\u0002\u0002\u1680\u1681\u0007\u019b\u0002\u0002\u1681\u1682\u0005",
    "\u02bc\u015f\u0002\u1682\u1685\u0007\u019c\u0002\u0002\u1683\u1684\u0006",
    "\u0158\u009f\u0002\u1684\u1686\u0005\u02b4\u015b\u0002\u1685\u1683\u0003",
    "\u0002\u0002\u0002\u1685\u1686\u0003\u0002\u0002\u0002\u1686\u16b5\u0003",
    "\u0002\u0002\u0002\u1687\u1688\u0007\u027d\u0002\u0002\u1688\u1689\u0007",
    "\u019b\u0002\u0002\u1689\u168a\u0005\u02bc\u015f\u0002\u168a\u168d\u0007",
    "\u019c\u0002\u0002\u168b\u168c\u0006\u0158\u00a0\u0002\u168c\u168e\u0005",
    "\u02b4\u015b\u0002\u168d\u168b\u0003\u0002\u0002\u0002\u168d\u168e\u0003",
    "\u0002\u0002\u0002\u168e\u16b5\u0003\u0002\u0002\u0002\u168f\u1690\u0007",
    "\u02a7\u0002\u0002\u1690\u1691\u0007\u019b\u0002\u0002\u1691\u1692\u0005",
    "\u02bc\u015f\u0002\u1692\u1695\u0007\u019c\u0002\u0002\u1693\u1694\u0006",
    "\u0158\u00a1\u0002\u1694\u1696\u0005\u02b4\u015b\u0002\u1695\u1693\u0003",
    "\u0002\u0002\u0002\u1695\u1696\u0003\u0002\u0002\u0002\u1696\u16b5\u0003",
    "\u0002\u0002\u0002\u1697\u1698\u0007\u0285\u0002\u0002\u1698\u169a\u0007",
    "\u019b\u0002\u0002\u1699\u169b\u0007\u01e6\u0002\u0002\u169a\u1699\u0003",
    "\u0002\u0002\u0002\u169a\u169b\u0003\u0002\u0002\u0002\u169b\u169c\u0003",
    "\u0002\u0002\u0002\u169c\u169d\u0005\u02bc\u015f\u0002\u169d\u16a0\u0007",
    "\u019c\u0002\u0002\u169e\u169f\u0006\u0158\u00a2\u0002\u169f\u16a1\u0005",
    "\u02b4\u015b\u0002\u16a0\u169e\u0003\u0002\u0002\u0002\u16a0\u16a1\u0003",
    "\u0002\u0002\u0002\u16a1\u16b5\u0003\u0002\u0002\u0002\u16a2\u16a3\u0007",
    "\u0203\u0002\u0002\u16a3\u16a5\u0007\u019b\u0002\u0002\u16a4\u16a6\u0007",
    "\u01e6\u0002\u0002\u16a5\u16a4\u0003\u0002\u0002\u0002\u16a5\u16a6\u0003",
    "\u0002\u0002\u0002\u16a6\u16a7\u0003\u0002\u0002\u0002\u16a7\u16a9\u0005",
    "\u02ec\u0177\u0002\u16a8\u16aa\u0005\u014a\u00a6\u0002\u16a9\u16a8\u0003",
    "\u0002\u0002\u0002\u16a9\u16aa\u0003\u0002\u0002\u0002\u16aa\u16ad\u0003",
    "\u0002\u0002\u0002\u16ab\u16ac\u0007\u026a\u0002\u0002\u16ac\u16ae\u0005",
    "\u047c\u023f\u0002\u16ad\u16ab\u0003\u0002\u0002\u0002\u16ad\u16ae\u0003",
    "\u0002\u0002\u0002\u16ae\u16af\u0003\u0002\u0002\u0002\u16af\u16b2\u0007",
    "\u019c\u0002\u0002\u16b0\u16b1\u0006\u0158\u00a3\u0002\u16b1\u16b3\u0005",
    "\u02b4\u015b\u0002\u16b2\u16b0\u0003\u0002\u0002\u0002\u16b2\u16b3\u0003",
    "\u0002\u0002\u0002\u16b3\u16b5\u0003\u0002\u0002\u0002\u16b4\u1631\u0003",
    "\u0002\u0002\u0002\u16b4\u163c\u0003\u0002\u0002\u0002\u16b4\u1644\u0003",
    "\u0002\u0002\u0002\u16b4\u1646\u0003\u0002\u0002\u0002\u16b4\u1651\u0003",
    "\u0002\u0002\u0002\u16b4\u1661\u0003\u0002\u0002\u0002\u16b4\u166c\u0003",
    "\u0002\u0002\u0002\u16b4\u1677\u0003\u0002\u0002\u0002\u16b4\u167f\u0003",
    "\u0002\u0002\u0002\u16b4\u1687\u0003\u0002\u0002\u0002\u16b4\u168f\u0003",
    "\u0002\u0002\u0002\u16b4\u1697\u0003\u0002\u0002\u0002\u16b4\u16a2\u0003",
    "\u0002\u0002\u0002\u16b5\u02af\u0003\u0002\u0002\u0002\u16b6\u16b7\u0007",
    "\u02c0\u0002\u0002\u16b7\u16b8\u0007\u019b\u0002\u0002\u16b8\u16b9\u0005",
    "\u02ec\u0177\u0002\u16b9\u16ba\u0007\u019c\u0002\u0002\u16ba\u02b1\u0003",
    "\u0002\u0002\u0002\u16bb\u16bc\tX\u0002\u0002\u16bc\u16bd\u0005\u049c",
    "\u024f\u0002\u16bd\u16be\u0005\u02b4\u015b\u0002\u16be\u16e6\u0003\u0002",
    "\u0002\u0002\u16bf\u16c0\u0007\u02d0\u0002\u0002\u16c0\u16c1\u0005\u02fc",
    "\u017f\u0002\u16c1\u16c2\u0005\u02b4\u015b\u0002\u16c2\u16e6\u0003\u0002",
    "\u0002\u0002\u16c3\u16c4\tY\u0002\u0002\u16c4\u16c5\u0007\u019b\u0002",
    "\u0002\u16c5\u16c7\u0005\u029c\u014f\u0002\u16c6\u16c8\u0005\u02b6\u015c",
    "\u0002\u16c7\u16c6\u0003\u0002\u0002\u0002\u16c7\u16c8\u0003\u0002\u0002",
    "\u0002\u16c8\u16c9\u0003\u0002\u0002\u0002\u16c9\u16cb\u0007\u019c\u0002",
    "\u0002\u16ca\u16cc\u0005\u02b8\u015d\u0002\u16cb\u16ca\u0003\u0002\u0002",
    "\u0002\u16cb\u16cc\u0003\u0002\u0002\u0002\u16cc\u16cd\u0003\u0002\u0002",
    "\u0002\u16cd\u16ce\u0005\u02b4\u015b\u0002\u16ce\u16e6\u0003\u0002\u0002",
    "\u0002\u16cf\u16d0\tZ\u0002\u0002\u16d0\u16d2\u0005\u02fa\u017e\u0002",
    "\u16d1\u16d3\u0005\u02b8\u015d\u0002\u16d2\u16d1\u0003\u0002\u0002\u0002",
    "\u16d2\u16d3\u0003\u0002\u0002\u0002\u16d3\u16d4\u0003\u0002\u0002\u0002",
    "\u16d4\u16d5\u0005\u02b4\u015b\u0002\u16d5\u16e6\u0003\u0002\u0002\u0002",
    "\u16d6\u16d7\u0007\u02cf\u0002\u0002\u16d7\u16d8\u0007\u019b\u0002\u0002",
    "\u16d8\u16d9\u0005\u029c\u014f\u0002\u16d9\u16da\u0007\u0198\u0002\u0002",
    "\u16da\u16db\u0005\u02a8\u0155\u0002\u16db\u16de\u0007\u019c\u0002\u0002",
    "\u16dc\u16dd\u0007\u01fd\u0002\u0002\u16dd\u16df\t[\u0002\u0002\u16de",
    "\u16dc\u0003\u0002\u0002\u0002\u16de\u16df\u0003\u0002\u0002\u0002\u16df",
    "\u16e1\u0003\u0002\u0002\u0002\u16e0\u16e2\u0005\u02b8\u015d\u0002\u16e1",
    "\u16e0\u0003\u0002\u0002\u0002\u16e1\u16e2\u0003\u0002\u0002\u0002\u16e2",
    "\u16e3\u0003\u0002\u0002\u0002\u16e3\u16e4\u0005\u02b4\u015b\u0002\u16e4",
    "\u16e6\u0003\u0002\u0002\u0002\u16e5\u16bb\u0003\u0002\u0002\u0002\u16e5",
    "\u16bf\u0003\u0002\u0002\u0002\u16e5\u16c3\u0003\u0002\u0002\u0002\u16e5",
    "\u16cf\u0003\u0002\u0002\u0002\u16e5\u16d6\u0003\u0002\u0002\u0002\u16e6",
    "\u02b3\u0003\u0002\u0002\u0002\u16e7\u16ea\u0007\u02d3\u0002\u0002\u16e8",
    "\u16eb\u0005\u045c\u022f\u0002\u16e9\u16eb\u0005\u0130\u0099\u0002\u16ea",
    "\u16e8\u0003\u0002\u0002\u0002\u16ea\u16e9\u0003\u0002\u0002\u0002\u16eb",
    "\u02b5\u0003\u0002\u0002\u0002\u16ec\u16ef\u0007\u0198\u0002\u0002\u16ed",
    "\u16f0\u0005\u0470\u0239\u0002\u16ee\u16f0\u0007\u01a6\u0002\u0002\u16ef",
    "\u16ed\u0003\u0002\u0002\u0002\u16ef\u16ee\u0003\u0002\u0002\u0002\u16f0",
    "\u16f3\u0003\u0002\u0002\u0002\u16f1\u16f2\u0007\u0198\u0002\u0002\u16f2",
    "\u16f4\u0005\u029c\u014f\u0002\u16f3\u16f1\u0003\u0002\u0002\u0002\u16f3",
    "\u16f4\u0003\u0002\u0002\u0002\u16f4\u02b7\u0003\u0002\u0002\u0002\u16f5",
    "\u16f6\t\\\u0002\u0002\u16f6\u16f7\u0007\u02d1\u0002\u0002\u16f7\u02b9",
    "\u0003\u0002\u0002\u0002\u16f8\u16f9\u0007\u02bb\u0002\u0002\u16f9\u16fa",
    "\u0007\u019b\u0002\u0002\u16fa\u16fb\u0005\u02bc\u015f\u0002\u16fb\u16fd",
    "\u0007\u019c\u0002\u0002\u16fc\u16fe\u0005\u02b4\u015b\u0002\u16fd\u16fc",
    "\u0003\u0002\u0002\u0002\u16fd\u16fe\u0003\u0002\u0002\u0002\u16fe\u1709",
    "\u0003\u0002\u0002\u0002\u16ff\u1700\u0007\u02ba\u0002\u0002\u1700\u1701",
    "\u0007\u019b\u0002\u0002\u1701\u1702\u0005\u02bc\u015f\u0002\u1702\u1703",
    "\u0007\u0198\u0002\u0002\u1703\u1704\u0005\u02bc\u015f\u0002\u1704\u1706",
    "\u0007\u019c\u0002\u0002\u1705\u1707\u0005\u02b4\u015b\u0002\u1706\u1705",
    "\u0003\u0002\u0002\u0002\u1706\u1707\u0003\u0002\u0002\u0002\u1707\u1709",
    "\u0003\u0002\u0002\u0002\u1708\u16f8\u0003\u0002\u0002\u0002\u1708\u16ff",
    "\u0003\u0002\u0002\u0002\u1709\u02bb\u0003\u0002\u0002\u0002\u170a\u170c",
    "\u0007\u01ad\u0002\u0002\u170b\u170a\u0003\u0002\u0002\u0002\u170b\u170c",
    "\u0003\u0002\u0002\u0002\u170c\u170d\u0003\u0002\u0002\u0002\u170d\u170e",
    "\u0005\u029c\u014f\u0002\u170e\u02bd\u0003\u0002\u0002\u0002\u170f\u1715",
    "\u0005\u02c0\u0161\u0002\u1710\u1711\u0007\u019b\u0002\u0002\u1711\u1712",
    "\u0005\u02c0\u0161\u0002\u1712\u1713\u0007\u019c\u0002\u0002\u1713\u1715",
    "\u0003\u0002\u0002\u0002\u1714\u170f\u0003\u0002\u0002\u0002\u1714\u1710",
    "\u0003\u0002\u0002\u0002\u1715\u02bf\u0003\u0002\u0002\u0002\u1716\u171b",
    "\u0005\u0468\u0235\u0002\u1717\u1718\u0007\u0198\u0002\u0002\u1718\u171a",
    "\u0005\u0468\u0235\u0002\u1719\u1717\u0003\u0002\u0002\u0002\u171a\u171d",
    "\u0003\u0002\u0002\u0002\u171b\u1719\u0003\u0002\u0002\u0002\u171b\u171c",
    "\u0003\u0002\u0002\u0002\u171c\u02c1\u0003\u0002\u0002\u0002\u171d\u171b",
    "\u0003\u0002\u0002\u0002\u171e\u171f\u0007\u0214\u0002\u0002\u171f\u1720",
    "\u0007M\u0002\u0002\u1720\u172e\u0007\u00e0\u0002\u0002\u1721\u1722",
    "\u0007\u0214\u0002\u0002\u1722\u1723\u0007\u023b\u0002\u0002\u1723\u1724",
    "\u0007\u001c\u0002\u0002\u1724\u1728\u0007\u00e0\u0002\u0002\u1725\u1726",
    "\u0007\u02ac\u0002\u0002\u1726\u1727\u0007\u010d\u0002\u0002\u1727\u1729",
    "\u0007\u008a\u0002\u0002\u1728\u1725\u0003\u0002\u0002\u0002\u1728\u1729",
    "\u0003\u0002\u0002\u0002\u1729\u172e\u0003\u0002\u0002\u0002\u172a\u172b",
    "\u0007\u02ac\u0002\u0002\u172b\u172c\u0007\u010d\u0002\u0002\u172c\u172e",
    "\u0007\u008a\u0002\u0002\u172d\u171e\u0003\u0002\u0002\u0002\u172d\u1721",
    "\u0003\u0002\u0002\u0002\u172d\u172a\u0003\u0002\u0002\u0002\u172e\u02c3",
    "\u0003\u0002\u0002\u0002\u172f\u1730\u0007\u01c4\u0002\u0002\u1730\u1731",
    "\u0007\u019b\u0002\u0002\u1731\u1734\u0005\u02ec\u0177\u0002\u1732\u1733",
    "\u0007\u029c\u0002\u0002\u1733\u1735\u0005\u03a0\u01d1\u0002\u1734\u1732",
    "\u0003\u0002\u0002\u0002\u1734\u1735\u0003\u0002\u0002\u0002\u1735\u1736",
    "\u0003\u0002\u0002\u0002\u1736\u1737\u0007\u019c\u0002\u0002\u1737\u1841",
    "\u0003\u0002\u0002\u0002\u1738\u173a\u0007\u01d2\u0002\u0002\u1739\u173b",
    "\u0005\u049c\u024f\u0002\u173a\u1739\u0003\u0002\u0002\u0002\u173a\u173b",
    "\u0003\u0002\u0002\u0002\u173b\u1841\u0003\u0002\u0002\u0002\u173c\u173d",
    "\u0007r\u0002\u0002\u173d\u1841\u0005\u02fa\u017e\u0002\u173e\u173f",
    "\u0007s\u0002\u0002\u173f\u1841\u0005\u02fa\u017e\u0002\u1740\u1741",
    "\u0007\u00a0\u0002\u0002\u1741\u1841\u0005\u02fa\u017e\u0002\u1742\u1743",
    "\u0007\u0210\u0002\u0002\u1743\u1744\u0007\u019b\u0002\u0002\u1744\u1745",
    "\u0005\u029c\u014f\u0002\u1745\u1746\u0007\u0198\u0002\u0002\u1746\u1747",
    "\u0005\u029c\u014f\u0002\u1747\u1748\u0007\u0198\u0002\u0002\u1748\u1749",
    "\u0005\u029c\u014f\u0002\u1749\u174a\u0007\u0198\u0002\u0002\u174a\u174b",
    "\u0005\u029c\u014f\u0002\u174b\u174c\u0007\u019c\u0002\u0002\u174c\u1841",
    "\u0003\u0002\u0002\u0002\u174d\u174e\u0007\u0211\u0002\u0002\u174e\u174f",
    "\u0007\u019b\u0002\u0002\u174f\u1752\u0005\u029c\u014f\u0002\u1750\u1751",
    "\u0007\u0198\u0002\u0002\u1751\u1753\u0005\u029c\u014f\u0002\u1752\u1750",
    "\u0003\u0002\u0002\u0002\u1753\u1754\u0003\u0002\u0002\u0002\u1754\u1752",
    "\u0003\u0002\u0002\u0002\u1754\u1755\u0003\u0002\u0002\u0002\u1755\u1756",
    "\u0003\u0002\u0002\u0002\u1756\u1757\u0007\u019c\u0002\u0002\u1757\u1841",
    "\u0003\u0002\u0002\u0002\u1758\u1759\u0007\u021f\u0002\u0002\u1759\u175a",
    "\u0007\u019b\u0002\u0002\u175a\u175b\u0005\u029c\u014f\u0002\u175b\u175c",
    "\u0007\u0198\u0002\u0002\u175c\u175d\u0005\u029c\u014f\u0002\u175d\u175e",
    "\u0007\u019c\u0002\u0002\u175e\u1841\u0003\u0002\u0002\u0002\u175f\u1760",
    "\u0007\u00dd\u0002\u0002\u1760\u1841\u0005\u02fa\u017e\u0002\u1761\u1762",
    "\u0007\u00e1\u0002\u0002\u1762\u1841\u0005\u02fa\u017e\u0002\u1763\u1764",
    "\u0007\u0266\u0002\u0002\u1764\u1765\u0007\u019b\u0002\u0002\u1765\u1766",
    "\u0005\u029c\u014f\u0002\u1766\u1767\u0007\u0198\u0002\u0002\u1767\u1768",
    "\u0005\u029c\u014f\u0002\u1768\u1769\u0007\u019c\u0002\u0002\u1769\u1841",
    "\u0003\u0002\u0002\u0002\u176a\u176b\u0007\u0133\u0002\u0002\u176b\u1841",
    "\u0005\u02fa\u017e\u0002\u176c\u176d\u0007\u0162\u0002\u0002\u176d\u1841",
    "\u0005\u02fa\u017e\u0002\u176e\u176f\u0007\u015f\u0002\u0002\u176f\u1770",
    "\u0007\u019b\u0002\u0002\u1770\u1773\u0005\u029c\u014f\u0002\u1771\u1772",
    "\u0007\u0198\u0002\u0002\u1772\u1774\u0005\u029c\u014f\u0002\u1773\u1771",
    "\u0003\u0002\u0002\u0002\u1773\u1774\u0003\u0002\u0002\u0002\u1774\u1775",
    "\u0003\u0002\u0002\u0002\u1775\u1776\u0007\u019c\u0002\u0002\u1776\u1841",
    "\u0003\u0002\u0002\u0002\u1777\u1841\u0005\u02d2\u016a\u0002\u1778\u1779",
    "\u0007\u016e\u0002\u0002\u1779\u1841\u0005\u049c\u024f\u0002\u177a\u177b",
    "\u0007\u02a1\u0002\u0002\u177b\u1841\u0005\u02fa\u017e\u0002\u177c\u177d",
    "\u0007\u017b\u0002\u0002\u177d\u1841\u0005\u02fa\u017e\u0002\u177e\u177f",
    "\t]\u0002\u0002\u177f\u1780\u0007\u019b\u0002\u0002\u1780\u1781\u0005",
    "\u029c\u014f\u0002\u1781\u1787\u0007\u0198\u0002\u0002\u1782\u1788\u0005",
    "\u029c\u014f\u0002\u1783\u1784\u0007\u0211\u0002\u0002\u1784\u1785\u0005",
    "\u029c\u014f\u0002\u1785\u1786\u0005\u02f4\u017b\u0002\u1786\u1788\u0003",
    "\u0002\u0002\u0002\u1787\u1782\u0003\u0002\u0002\u0002\u1787\u1783\u0003",
    "\u0002\u0002\u0002\u1788\u1789\u0003\u0002\u0002\u0002\u1789\u178a\u0007",
    "\u019c\u0002\u0002\u178a\u1841\u0003\u0002\u0002\u0002\u178b\u178d\u0007",
    "\u01cf\u0002\u0002\u178c\u178e\u0005\u049c\u024f\u0002\u178d\u178c\u0003",
    "\u0002\u0002\u0002\u178d\u178e\u0003\u0002\u0002\u0002\u178e\u1841\u0003",
    "\u0002\u0002\u0002\u178f\u1791\u0007\u01d4\u0002\u0002\u1790\u1792\u0005",
    "\u02c8\u0165\u0002\u1791\u1790\u0003\u0002\u0002\u0002\u1791\u1792\u0003",
    "\u0002\u0002\u0002\u1792\u1841\u0003\u0002\u0002\u0002\u1793\u1794\t",
    "^\u0002\u0002\u1794\u1795\u0007\u019b\u0002\u0002\u1795\u1796\u0005",
    "\u029c\u014f\u0002\u1796\u1797\u0007\u0198\u0002\u0002\u1797\u1798\u0007",
    "\u0211\u0002\u0002\u1798\u1799\u0005\u029c\u014f\u0002\u1799\u179a\u0005",
    "\u02f4\u017b\u0002\u179a\u179b\u0007\u019c\u0002\u0002\u179b\u1841\u0003",
    "\u0002\u0002\u0002\u179c\u179d\u0007\u01f6\u0002\u0002\u179d\u179e\u0007",
    "\u019b\u0002\u0002\u179e\u179f\u0005\u02f4\u017b\u0002\u179f\u17a0\u0007",
    "\u01fd\u0002\u0002\u17a0\u17a1\u0005\u029c\u014f\u0002\u17a1\u17a2\u0007",
    "\u019c\u0002\u0002\u17a2\u1841\u0003\u0002\u0002\u0002\u17a3\u17a4\u0007",
    "\u009b\u0002\u0002\u17a4\u17a5\u0007\u019b\u0002\u0002\u17a5\u17a6\u0005",
    "\u02d0\u0169\u0002\u17a6\u17a7\u0007\u0198\u0002\u0002\u17a7\u17a8\u0005",
    "\u029c\u014f\u0002\u17a8\u17a9\u0007\u019c\u0002\u0002\u17a9\u1841\u0003",
    "\u0002\u0002\u0002\u17aa\u17ac\u0007\u0240\u0002\u0002\u17ab\u17ad\u0005",
    "\u02c8\u0165\u0002\u17ac\u17ab\u0003\u0002\u0002\u0002\u17ac\u17ad\u0003",
    "\u0002\u0002\u0002\u17ad\u1841\u0003\u0002\u0002\u0002\u17ae\u17af\u0007",
    "\u0251\u0002\u0002\u17af\u17b0\u0007\u019b\u0002\u0002\u17b0\u17b1\u0005",
    "\u02a6\u0154\u0002\u17b1\u17b2\u0007\u0214\u0002\u0002\u17b2\u17b3\u0005",
    "\u029c\u014f\u0002\u17b3\u17b4\u0007\u019c\u0002\u0002\u17b4\u1841\u0003",
    "\u0002\u0002\u0002\u17b5\u1841\u0005\u02d4\u016b\u0002\u17b6\u17b8\u0007",
    "\u0286\u0002\u0002\u17b7\u17b9\u0005\u02c8\u0165\u0002\u17b8\u17b7\u0003",
    "\u0002\u0002\u0002\u17b8\u17b9\u0003\u0002\u0002\u0002\u17b9\u1841\u0003",
    "\u0002\u0002\u0002\u17ba\u17bb\t_\u0002\u0002\u17bb\u17bc\u0007\u019b",
    "\u0002\u0002\u17bc\u17bd\u0005\u02f6\u017c\u0002\u17bd\u17be\u0007\u0198",
    "\u0002\u0002\u17be\u17bf\u0005\u029c\u014f\u0002\u17bf\u17c0\u0007\u0198",
    "\u0002\u0002\u17c0\u17c1\u0005\u029c\u014f\u0002\u17c1\u17c2\u0007\u019c",
    "\u0002\u0002\u17c2\u1841\u0003\u0002\u0002\u0002\u17c3\u17c5\u0007\u029d",
    "\u0002\u0002\u17c4\u17c6\u0005\u049c\u024f\u0002\u17c5\u17c4\u0003\u0002",
    "\u0002\u0002\u17c5\u17c6\u0003\u0002\u0002\u0002\u17c6\u1841\u0003\u0002",
    "\u0002\u0002\u17c7\u17c9\u0007\u029f\u0002\u0002\u17c8\u17ca\u0005\u02c8",
    "\u0165\u0002\u17c9\u17c8\u0003\u0002\u0002\u0002\u17c9\u17ca\u0003\u0002",
    "\u0002\u0002\u17ca\u1841\u0003\u0002\u0002\u0002\u17cb\u17cd\u0007\u029e",
    "\u0002\u0002\u17cc\u17ce\u0005\u02c8\u0165\u0002\u17cd\u17cc\u0003\u0002",
    "\u0002\u0002\u17cd\u17ce\u0003\u0002\u0002\u0002\u17ce\u1841\u0003\u0002",
    "\u0002\u0002\u17cf\u17d0\u0007\u0004\u0002\u0002\u17d0\u1841\u0005\u02fa",
    "\u017e\u0002\u17d1\u17d2\u0007\n\u0002\u0002\u17d2\u1841\u0005\u02fa",
    "\u017e\u0002\u17d3\u17d4\u0007W\u0002\u0002\u17d4\u1841\u0005\u02f8",
    "\u017d\u0002\u17d5\u17d6\u0007Y\u0002\u0002\u17d6\u1841\u0005\u02fa",
    "\u017e\u0002\u17d7\u17d8\u0007\u01d5\u0002\u0002\u17d8\u1841\u0005\u049c",
    "\u024f\u0002\u17d9\u17da\u0007\u0209\u0002\u0002\u17da\u17db\u0007\u019b",
    "\u0002\u0002\u17db\u17dc\u0005\u029c\u014f\u0002\u17dc\u17dd\u0007\u0198",
    "\u0002\u0002\u17dd\u17de\u0005\u029c\u014f\u0002\u17de\u17df\u0007\u0198",
    "\u0002\u0002\u17df\u17e0\u0005\u029c\u014f\u0002\u17e0\u17e1\u0007\u019c",
    "\u0002\u0002\u17e1\u1841\u0003\u0002\u0002\u0002\u17e2\u17e3\u0007\u0016",
    "\u0002\u0002\u17e3\u17e4\u0007\u019b\u0002\u0002\u17e4\u17e5\u0005\u029c",
    "\u014f\u0002\u17e5\u17e6\u0007\u0198\u0002\u0002\u17e6\u17e9\u0005\u029c",
    "\u014f\u0002\u17e7\u17e8\u0007\u0198\u0002\u0002\u17e8\u17ea\u0005\u029c",
    "\u014f\u0002\u17e9\u17e7\u0003\u0002\u0002\u0002\u17e9\u17ea\u0003\u0002",
    "\u0002\u0002\u17ea\u17eb\u0003\u0002\u0002\u0002\u17eb\u17ec\u0007\u019c",
    "\u0002\u0002\u17ec\u1841\u0003\u0002\u0002\u0002\u17ed\u17ee\u0007\u00db",
    "\u0002\u0002\u17ee\u1841\u0005\u02fa\u017e\u0002\u17ef\u17f0\u0007\u023a",
    "\u0002\u0002\u17f0\u17f1\u0007\u019b\u0002\u0002\u17f1\u17f2\u0005\u029c",
    "\u014f\u0002\u17f2\u17f3\u0007\u0198\u0002\u0002\u17f3\u17f4\u0005\u029c",
    "\u014f\u0002\u17f4\u17f5\u0007\u019c\u0002\u0002\u17f5\u1841\u0003\u0002",
    "\u0002\u0002\u17f6\u17f7\u0006\u0163\u00a4\u0002\u17f7\u17f8\u0007\u00f5",
    "\u0002\u0002\u17f8\u17f9\u0007\u019b\u0002\u0002\u17f9\u17fa\u0005\u0480",
    "\u0241\u0002\u17fa\u17fb\u0007\u019c\u0002\u0002\u17fb\u1841\u0003\u0002",
    "\u0002\u0002\u17fc\u17fd\u0006\u0163\u00a5\u0002\u17fd\u17fe\u0007\u00fd",
    "\u0002\u0002\u17fe\u1841\u0005\u02fa\u017e\u0002\u17ff\u1800\u0007\u010c",
    "\u0002\u0002\u1800\u1841\u0005\u02fa\u017e\u0002\u1801\u1802\u0007\u025f",
    "\u0002\u0002\u1802\u1803\u0007\u019b\u0002\u0002\u1803\u1804\u0005\u029c",
    "\u014f\u0002\u1804\u1805\u0007\u0198\u0002\u0002\u1805\u1806\u0005\u029c",
    "\u014f\u0002\u1806\u1807\u0007\u019c\u0002\u0002\u1807\u1841\u0003\u0002",
    "\u0002\u0002\u1808\u1809\u0007\u0260\u0002\u0002\u1809\u180a\u0007\u019b",
    "\u0002\u0002\u180a\u180b\u0005\u029c\u014f\u0002\u180b\u180c\u0007\u0198",
    "\u0002\u0002\u180c\u180d\u0005\u029c\u014f\u0002\u180d\u180e\u0007\u0198",
    "\u0002\u0002\u180e\u180f\u0005\u029c\u014f\u0002\u180f\u1810\u0007\u019c",
    "\u0002\u0002\u1810\u1841\u0003\u0002\u0002\u0002\u1811\u1812\u0007\u0128",
    "\u0002\u0002\u1812\u1841\u0005\u02fa\u017e\u0002\u1813\u1814\u0007\u012d",
    "\u0002\u0002\u1814\u1841\u0005\u049c\u024f\u0002\u1815\u1816\u00074",
    "\u0002\u0002\u1816\u1817\u0007\u019b\u0002\u0002\u1817\u1818\u0005\u029c",
    "\u014f\u0002\u1818\u1819\u0007\u0198\u0002\u0002\u1819\u181a\u0005\u029c",
    "\u014f\u0002\u181a\u181b\u0007\u019c\u0002\u0002\u181b\u1841\u0003\u0002",
    "\u0002\u0002\u181c\u181d\u0007\u0175\u0002\u0002\u181d\u181e\u0007\u019b",
    "\u0002\u0002\u181e\u1821\u0005\u029c\u014f\u0002\u181f\u1820\u0007\u0198",
    "\u0002\u0002\u1820\u1822\u0005\u029c\u014f\u0002\u1821\u181f\u0003\u0002",
    "\u0002\u0002\u1821\u1822\u0003\u0002\u0002\u0002\u1822\u1823\u0003\u0002",
    "\u0002\u0002\u1823\u1824\u0007\u019c\u0002\u0002\u1824\u1841\u0003\u0002",
    "\u0002\u0002\u1825\u1826\u0007\u0177\u0002\u0002\u1826\u1827\u0007\u019b",
    "\u0002\u0002\u1827\u183b\u0005\u029c\u014f\u0002\u1828\u1829\u0007\u01b1",
    "\u0002\u0002\u1829\u182a\u0007\u01c4\u0002\u0002\u182a\u182c\u0005\u039c",
    "\u01cf\u0002\u182b\u1828\u0003\u0002\u0002\u0002\u182b\u182c\u0003\u0002",
    "\u0002\u0002\u182c\u182f\u0003\u0002\u0002\u0002\u182d\u182e\u0006\u0163",
    "\u00a6\u0002\u182e\u1830\u0005\u02cc\u0167\u0002\u182f\u182d\u0003\u0002",
    "\u0002\u0002\u182f\u1830\u0003\u0002\u0002\u0002\u1830\u183c\u0003\u0002",
    "\u0002\u0002\u1831\u1832\u0007\u01b1\u0002\u0002\u1832\u1833\u0007\u01b7",
    "\u0002\u0002\u1833\u183c\u0005\u039c\u01cf\u0002\u1834\u1835\u0007\u0198",
    "\u0002\u0002\u1835\u1836\u0005\u046c\u0237\u0002\u1836\u1837\u0007\u0198",
    "\u0002\u0002\u1837\u1838\u0005\u046c\u0237\u0002\u1838\u1839\u0007\u0198",
    "\u0002\u0002\u1839\u183a\u0005\u046c\u0237\u0002\u183a\u183c\u0003\u0002",
    "\u0002\u0002\u183b\u182b\u0003\u0002\u0002\u0002\u183b\u1831\u0003\u0002",
    "\u0002\u0002\u183b\u1834\u0003\u0002\u0002\u0002\u183c\u183d\u0003\u0002",
    "\u0002\u0002\u183d\u183e\u0007\u019c\u0002\u0002\u183e\u1841\u0003\u0002",
    "\u0002\u0002\u183f\u1841\u0005\u02c6\u0164\u0002\u1840\u172f\u0003\u0002",
    "\u0002\u0002\u1840\u1738\u0003\u0002\u0002\u0002\u1840\u173c\u0003\u0002",
    "\u0002\u0002\u1840\u173e\u0003\u0002\u0002\u0002\u1840\u1740\u0003\u0002",
    "\u0002\u0002\u1840\u1742\u0003\u0002\u0002\u0002\u1840\u174d\u0003\u0002",
    "\u0002\u0002\u1840\u1758\u0003\u0002\u0002\u0002\u1840\u175f\u0003\u0002",
    "\u0002\u0002\u1840\u1761\u0003\u0002\u0002\u0002\u1840\u1763\u0003\u0002",
    "\u0002\u0002\u1840\u176a\u0003\u0002\u0002\u0002\u1840\u176c\u0003\u0002",
    "\u0002\u0002\u1840\u176e\u0003\u0002\u0002\u0002\u1840\u1777\u0003\u0002",
    "\u0002\u0002\u1840\u1778\u0003\u0002\u0002\u0002\u1840\u177a\u0003\u0002",
    "\u0002\u0002\u1840\u177c\u0003\u0002\u0002\u0002\u1840\u177e\u0003\u0002",
    "\u0002\u0002\u1840\u178b\u0003\u0002\u0002\u0002\u1840\u178f\u0003\u0002",
    "\u0002\u0002\u1840\u1793\u0003\u0002\u0002\u0002\u1840\u179c\u0003\u0002",
    "\u0002\u0002\u1840\u17a3\u0003\u0002\u0002\u0002\u1840\u17aa\u0003\u0002",
    "\u0002\u0002\u1840\u17ae\u0003\u0002\u0002\u0002\u1840\u17b5\u0003\u0002",
    "\u0002\u0002\u1840\u17b6\u0003\u0002\u0002\u0002\u1840\u17ba\u0003\u0002",
    "\u0002\u0002\u1840\u17c3\u0003\u0002\u0002\u0002\u1840\u17c7\u0003\u0002",
    "\u0002\u0002\u1840\u17cb\u0003\u0002\u0002\u0002\u1840\u17cf\u0003\u0002",
    "\u0002\u0002\u1840\u17d1\u0003\u0002\u0002\u0002\u1840\u17d3\u0003\u0002",
    "\u0002\u0002\u1840\u17d5\u0003\u0002\u0002\u0002\u1840\u17d7\u0003\u0002",
    "\u0002\u0002\u1840\u17d9\u0003\u0002\u0002\u0002\u1840\u17e2\u0003\u0002",
    "\u0002\u0002\u1840\u17ed\u0003\u0002\u0002\u0002\u1840\u17ef\u0003\u0002",
    "\u0002\u0002\u1840\u17f6\u0003\u0002\u0002\u0002\u1840\u17fc\u0003\u0002",
    "\u0002\u0002\u1840\u17ff\u0003\u0002\u0002\u0002\u1840\u1801\u0003\u0002",
    "\u0002\u0002\u1840\u1808\u0003\u0002\u0002\u0002\u1840\u1811\u0003\u0002",
    "\u0002\u0002\u1840\u1813\u0003\u0002\u0002\u0002\u1840\u1815\u0003\u0002",
    "\u0002\u0002\u1840\u181c\u0003\u0002\u0002\u0002\u1840\u1825\u0003\u0002",
    "\u0002\u0002\u1840\u183f\u0003\u0002\u0002\u0002\u1841\u02c5\u0003\u0002",
    "\u0002\u0002\u1842\u1843\u0006\u0164\u00a7\u0002\u1843\u1844\u0007\u000f",
    "\u0002\u0002\u1844\u1845\u0007\u019b\u0002\u0002\u1845\u1846\u0005\u029c",
    "\u014f\u0002\u1846\u1847\u0007\u0198\u0002\u0002\u1847\u1848\u0005\u029c",
    "\u014f\u0002\u1848\u1849\u0007\u019c\u0002\u0002\u1849\u1862\u0003\u0002",
    "\u0002\u0002\u184a\u184b\u0007\u009a\u0002\u0002\u184b\u184d\u0007\u019b",
    "\u0002\u0002\u184c\u184e\u0005\u02ec\u0177\u0002\u184d\u184c\u0003\u0002",
    "\u0002\u0002\u184d\u184e\u0003\u0002\u0002\u0002\u184e\u184f\u0003\u0002",
    "\u0002\u0002\u184f\u1862\u0007\u019c\u0002\u0002\u1850\u1851\u0007\u00b4",
    "\u0002\u0002\u1851\u1862\u0005\u02f8\u017d\u0002\u1852\u1853\u0007\u00e2",
    "\u0002\u0002\u1853\u1862\u0005\u02f8\u017d\u0002\u1854\u1855\u0007\u00e3",
    "\u0002\u0002\u1855\u1862\u0005\u02f8\u017d\u0002\u1856\u1857\u0007\u00e4",
    "\u0002\u0002\u1857\u1862\u0005\u02f8\u017d\u0002\u1858\u1859\u0007\u0102",
    "\u0002\u0002\u1859\u185a\u0007\u019b\u0002\u0002\u185a\u185b\u0005\u029c",
    "\u014f\u0002\u185b\u185c\u0007\u0198\u0002\u0002\u185c\u185d\u0005\u029c",
    "\u014f\u0002\u185d\u185e\u0007\u019c\u0002\u0002\u185e\u1862\u0003\u0002",
    "\u0002\u0002\u185f\u1860\u0007\u0103\u0002\u0002\u1860\u1862\u0005\u02f8",
    "\u017d\u0002\u1861\u1842\u0003\u0002\u0002\u0002\u1861\u184a\u0003\u0002",
    "\u0002\u0002\u1861\u1850\u0003\u0002\u0002\u0002\u1861\u1852\u0003\u0002",
    "\u0002\u0002\u1861\u1854\u0003\u0002\u0002\u0002\u1861\u1856\u0003\u0002",
    "\u0002\u0002\u1861\u1858\u0003\u0002\u0002\u0002\u1861\u185f\u0003\u0002",
    "\u0002\u0002\u1862\u02c7\u0003\u0002\u0002\u0002\u1863\u1865\u0007\u019b",
    "\u0002\u0002\u1864\u1866\u0005\u02ca\u0166\u0002\u1865\u1864\u0003\u0002",
    "\u0002\u0002\u1865\u1866\u0003\u0002\u0002\u0002\u1866\u1867\u0003\u0002",
    "\u0002\u0002\u1867\u1868\u0007\u019c\u0002\u0002\u1868\u02c9\u0003\u0002",
    "\u0002\u0002\u1869\u186a\u0006\u0166\u00a8\u0002\u186a\u186b\u0007\u017e",
    "\u0002\u0002\u186b\u02cb\u0003\u0002\u0002\u0002\u186c\u1879\u0007\u00b3",
    "\u0002\u0002\u186d\u186e\u0005\u046e\u0238\u0002\u186e\u186f\u0007\u018a",
    "\u0002\u0002\u186f\u1870\u0005\u046e\u0238\u0002\u1870\u187a\u0003\u0002",
    "\u0002\u0002\u1871\u1876\u0005\u02ce\u0168\u0002\u1872\u1873\u0007\u0198",
    "\u0002\u0002\u1873\u1875\u0005\u02ce\u0168\u0002\u1874\u1872\u0003\u0002",
    "\u0002\u0002\u1875\u1878\u0003\u0002\u0002\u0002\u1876\u1874\u0003\u0002",
    "\u0002\u0002\u1876\u1877\u0003\u0002\u0002\u0002\u1877\u187a\u0003\u0002",
    "\u0002\u0002\u1878\u1876\u0003\u0002\u0002\u0002\u1879\u186d\u0003\u0002",
    "\u0002\u0002\u1879\u1871\u0003\u0002\u0002\u0002\u187a\u02cd\u0003\u0002",
    "\u0002\u0002\u187b\u1881\u0005\u046e\u0238\u0002\u187c\u187e\t#\u0002",
    "\u0002\u187d\u187f\u0007\u0128\u0002\u0002\u187e\u187d\u0003\u0002\u0002",
    "\u0002\u187e\u187f\u0003\u0002\u0002\u0002\u187f\u1882\u0003\u0002\u0002",
    "\u0002\u1880\u1882\u0007\u0128\u0002\u0002\u1881\u187c\u0003\u0002\u0002",
    "\u0002\u1881\u1880\u0003\u0002\u0002\u0002\u1881\u1882\u0003\u0002\u0002",
    "\u0002\u1882\u02cf\u0003\u0002\u0002\u0002\u1883\u1884\t`\u0002\u0002",
    "\u1884\u02d1\u0003\u0002\u0002\u0002\u1885\u1886\u0007\u0292\u0002\u0002",
    "\u1886\u189e\u0007\u019b\u0002\u0002\u1887\u188a\u0005\u029c\u014f\u0002",
    "\u1888\u1889\u0007\u01fd\u0002\u0002\u1889\u188b\u0005\u029c\u014f\u0002",
    "\u188a\u1888\u0003\u0002\u0002\u0002\u188a\u188b\u0003\u0002\u0002\u0002",
    "\u188b\u189f\u0003\u0002\u0002\u0002\u188c\u188e\u0007\u021d\u0002\u0002",
    "\u188d\u188f\u0005\u029c\u014f\u0002\u188e\u188d\u0003\u0002\u0002\u0002",
    "\u188e\u188f\u0003\u0002\u0002\u0002\u188f\u1890\u0003\u0002\u0002\u0002",
    "\u1890\u1891\u0007\u01fd\u0002\u0002\u1891\u189f\u0005\u029c\u014f\u0002",
    "\u1892\u1894\u0007\u0290\u0002\u0002\u1893\u1895\u0005\u029c\u014f\u0002",
    "\u1894\u1893\u0003\u0002\u0002\u0002\u1894\u1895\u0003\u0002\u0002\u0002",
    "\u1895\u1896\u0003\u0002\u0002\u0002\u1896\u1897\u0007\u01fd\u0002\u0002",
    "\u1897\u189f\u0005\u029c\u014f\u0002\u1898\u189a\u0007\u01bd\u0002\u0002",
    "\u1899\u189b\u0005\u029c\u014f\u0002\u189a\u1899\u0003\u0002\u0002\u0002",
    "\u189a\u189b\u0003\u0002\u0002\u0002\u189b\u189c\u0003\u0002\u0002\u0002",
    "\u189c\u189d\u0007\u01fd\u0002\u0002\u189d\u189f\u0005\u029c\u014f\u0002",
    "\u189e\u1887\u0003\u0002\u0002\u0002\u189e\u188c\u0003\u0002\u0002\u0002",
    "\u189e\u1892\u0003\u0002\u0002\u0002\u189e\u1898\u0003\u0002\u0002\u0002",
    "\u189f\u18a0\u0003\u0002\u0002\u0002\u18a0\u18a1\u0007\u019c\u0002\u0002",
    "\u18a1\u02d3\u0003\u0002\u0002\u0002\u18a2\u18a3\u0007\u0284\u0002\u0002",
    "\u18a3\u18a4\u0007\u019b\u0002\u0002\u18a4\u18b1\u0005\u029c\u014f\u0002",
    "\u18a5\u18a6\u0007\u0198\u0002\u0002\u18a6\u18a9\u0005\u029c\u014f\u0002",
    "\u18a7\u18a8\u0007\u0198\u0002\u0002\u18a8\u18aa\u0005\u029c\u014f\u0002",
    "\u18a9\u18a7\u0003\u0002\u0002\u0002\u18a9\u18aa\u0003\u0002\u0002\u0002",
    "\u18aa\u18b2\u0003\u0002\u0002\u0002\u18ab\u18ac\u0007\u01fd\u0002\u0002",
    "\u18ac\u18af\u0005\u029c\u014f\u0002\u18ad\u18ae\u0007\u01fc\u0002\u0002",
    "\u18ae\u18b0\u0005\u029c\u014f\u0002\u18af\u18ad\u0003\u0002\u0002\u0002",
    "\u18af\u18b0\u0003\u0002\u0002\u0002\u18b0\u18b2\u0003\u0002\u0002\u0002",
    "\u18b1\u18a5\u0003\u0002\u0002\u0002\u18b1\u18ab\u0003\u0002\u0002\u0002",
    "\u18b2\u18b3\u0003\u0002\u0002\u0002\u18b3\u18b4\u0007\u019c\u0002\u0002",
    "\u18b4\u02d5\u0003\u0002\u0002\u0002\u18b5\u18b6\u0005\u045e\u0230\u0002",
    "\u18b6\u18b8\u0007\u019b\u0002\u0002\u18b7\u18b9\u0005\u02d8\u016d\u0002",
    "\u18b8\u18b7\u0003\u0002\u0002\u0002\u18b8\u18b9\u0003\u0002\u0002\u0002",
    "\u18b9\u18ba\u0003\u0002\u0002\u0002\u18ba\u18bb\u0007\u019c\u0002\u0002",
    "\u18bb\u18c4\u0003\u0002\u0002\u0002\u18bc\u18bd\u0005\u0466\u0234\u0002",
    "\u18bd\u18bf\u0007\u019b\u0002\u0002\u18be\u18c0\u0005\u02ec\u0177\u0002",
    "\u18bf\u18be\u0003\u0002\u0002\u0002\u18bf\u18c0\u0003\u0002\u0002\u0002",
    "\u18c0\u18c1\u0003\u0002\u0002\u0002\u18c1\u18c2\u0007\u019c\u0002\u0002",
    "\u18c2\u18c4\u0003\u0002\u0002\u0002\u18c3\u18b5\u0003\u0002\u0002\u0002",
    "\u18c3\u18bc\u0003\u0002\u0002\u0002\u18c4\u02d7\u0003\u0002\u0002\u0002",
    "\u18c5\u18ca\u0005\u02da\u016e\u0002\u18c6\u18c7\u0007\u0198\u0002\u0002",
    "\u18c7\u18c9\u0005\u02da\u016e\u0002\u18c8\u18c6\u0003\u0002\u0002\u0002",
    "\u18c9\u18cc\u0003\u0002\u0002\u0002\u18ca\u18c8\u0003\u0002\u0002\u0002",
    "\u18ca\u18cb\u0003\u0002\u0002\u0002\u18cb\u02d9\u0003\u0002\u0002\u0002",
    "\u18cc\u18ca\u0003\u0002\u0002\u0002\u18cd\u18cf\u0005\u029c\u014f\u0002",
    "\u18ce\u18d0\u0005\u015e\u00b0\u0002\u18cf\u18ce\u0003\u0002\u0002\u0002",
    "\u18cf\u18d0\u0003\u0002\u0002\u0002\u18d0\u02db\u0003\u0002\u0002\u0002",
    "\u18d1\u18d4\u0005\u02de\u0170\u0002\u18d2\u18d3\u0007\u0182\u0002\u0002",
    "\u18d3\u18d5\u0005\u029c\u014f\u0002\u18d4\u18d2\u0003\u0002\u0002\u0002",
    "\u18d4\u18d5\u0003\u0002\u0002\u0002\u18d5\u18d8\u0003\u0002\u0002\u0002",
    "\u18d6\u18d8\u0005\u02e0\u0171\u0002\u18d7\u18d1\u0003\u0002\u0002\u0002",
    "\u18d7\u18d6\u0003\u0002\u0002\u0002\u18d8\u02dd\u0003\u0002\u0002\u0002",
    "\u18d9\u18da\u0007\u01a2\u0002\u0002\u18da\u18dd\u0005\u0494\u024b\u0002",
    "\u18db\u18dd\u0007\u01a3\u0002\u0002\u18dc\u18d9\u0003\u0002\u0002\u0002",
    "\u18dc\u18db\u0003\u0002\u0002\u0002\u18dd\u02df\u0003\u0002\u0002\u0002",
    "\u18de\u18e0\u0007\u01a4\u0002\u0002\u18df\u18e1\u0005\u04a2\u0252\u0002",
    "\u18e0\u18df\u0003\u0002\u0002\u0002\u18e0\u18e1\u0003\u0002\u0002\u0002",
    "\u18e1\u18e2\u0003\u0002\u0002\u0002\u18e2\u18e4\u0005\u0494\u024b\u0002",
    "\u18e3\u18e5\u0005\u046a\u0236\u0002\u18e4\u18e3\u0003\u0002\u0002\u0002",
    "\u18e4\u18e5\u0003\u0002\u0002\u0002\u18e5\u02e1\u0003\u0002\u0002\u0002",
    "\u18e6\u18e7\u0006\u0172\u00a9\u0002\u18e7\u18e9\u0005\u0460\u0231\u0002",
    "\u18e8\u18ea\u0005\u046a\u0236\u0002\u18e9\u18e8\u0003\u0002\u0002\u0002",
    "\u18e9\u18ea\u0003\u0002\u0002\u0002\u18ea\u18f1\u0003\u0002\u0002\u0002",
    "\u18eb\u18ec\u0006\u0172\u00aa\u0002\u18ec\u18ee\u0005\u0496\u024c\u0002",
    "\u18ed\u18ef\u0005\u046a\u0236\u0002\u18ee\u18ed\u0003\u0002\u0002\u0002",
    "\u18ee\u18ef\u0003\u0002\u0002\u0002\u18ef\u18f1\u0003\u0002\u0002\u0002",
    "\u18f0\u18e6\u0003\u0002\u0002\u0002\u18f0\u18eb\u0003\u0002\u0002\u0002",
    "\u18f1\u18f5\u0003\u0002\u0002\u0002\u18f2\u18f3\u0007\u01e0\u0002\u0002",
    "\u18f3\u18f5\u0005\u046a\u0236\u0002\u18f4\u18f0\u0003\u0002\u0002\u0002",
    "\u18f4\u18f2\u0003\u0002\u0002\u0002\u18f5\u02e3\u0003\u0002\u0002\u0002",
    "\u18f6\u18f7\u0007\u02a9\u0002\u0002\u18f7\u18f8\u0005\u029c\u014f\u0002",
    "\u18f8\u02e5\u0003\u0002\u0002\u0002\u18f9\u18fa\u0007\u028b\u0002\u0002",
    "\u18fa\u18fb\u0005\u029c\u014f\u0002\u18fb\u02e7\u0003\u0002\u0002\u0002",
    "\u18fc\u18fd\u0007\u01ec\u0002\u0002\u18fd\u18fe\u0005\u029c\u014f\u0002",
    "\u18fe\u02e9\u0003\u0002\u0002\u0002\u18ff\u1901\u0007\u01b7\u0002\u0002",
    "\u1900\u1902\u0005\u0392\u01ca\u0002\u1901\u1900\u0003\u0002\u0002\u0002",
    "\u1901\u1902\u0003\u0002\u0002\u0002\u1902\u192d\u0003\u0002\u0002\u0002",
    "\u1903\u1905\u0007\u01c4\u0002\u0002\u1904\u1906\u0005\u0392\u01ca\u0002",
    "\u1905\u1904\u0003\u0002\u0002\u0002\u1905\u1906\u0003\u0002\u0002\u0002",
    "\u1906\u1908\u0003\u0002\u0002\u0002\u1907\u1909\u0005\u0396\u01cc\u0002",
    "\u1908\u1907\u0003\u0002\u0002\u0002\u1908\u1909\u0003\u0002\u0002\u0002",
    "\u1909\u192d\u0003\u0002\u0002\u0002\u190a\u190c\u0005\u038e\u01c8\u0002",
    "\u190b\u190d\u0005\u0392\u01ca\u0002\u190c\u190b\u0003\u0002\u0002\u0002",
    "\u190c\u190d\u0003\u0002\u0002\u0002\u190d\u192d\u0003\u0002\u0002\u0002",
    "\u190e\u1910\u0007.\u0002\u0002\u190f\u1911\u0007\u0213\u0002\u0002",
    "\u1910\u190f\u0003\u0002\u0002\u0002\u1910\u1911\u0003\u0002\u0002\u0002",
    "\u1911\u192d\u0003\u0002\u0002\u0002\u1912\u1914\u0007\u0298\u0002\u0002",
    "\u1913\u1915\u0007\u0213\u0002\u0002\u1914\u1913\u0003\u0002\u0002\u0002",
    "\u1914\u1915\u0003\u0002\u0002\u0002\u1915\u192d\u0003\u0002\u0002\u0002",
    "\u1916\u192d\u0007r\u0002\u0002\u1917\u1919\u0007\u0162\u0002\u0002",
    "\u1918\u191a\u0005\u039e\u01d0\u0002\u1919\u1918\u0003\u0002\u0002\u0002",
    "\u1919\u191a\u0003\u0002\u0002\u0002\u191a\u192d\u0003\u0002\u0002\u0002",
    "\u191b\u191d\u0007q\u0002\u0002\u191c\u191e\u0005\u039e\u01d0\u0002",
    "\u191d\u191c\u0003\u0002\u0002\u0002\u191d\u191e\u0003\u0002\u0002\u0002",
    "\u191e\u192d\u0003\u0002\u0002\u0002\u191f\u1921\u0007\u01de\u0002\u0002",
    "\u1920\u1922\u0005\u048e\u0248\u0002\u1921\u1920\u0003\u0002\u0002\u0002",
    "\u1921\u1922\u0003\u0002\u0002\u0002\u1922\u192d\u0003\u0002\u0002\u0002",
    "\u1923\u1924\u0006\u0176\u00ab\u0002\u1924\u192d\u0007\u00ae\u0002\u0002",
    "\u1925\u1926\u0006\u0176\u00ac\u0002\u1926\u192d\u0005\u0390\u01c9\u0002",
    "\u1927\u1928\u0006\u0176\u00ad\u0002\u1928\u192a\u0007\u01f9\u0002\u0002",
    "\u1929\u192b\u0005\u0490\u0249\u0002\u192a\u1929\u0003\u0002\u0002\u0002",
    "\u192a\u192b\u0003\u0002\u0002\u0002\u192b\u192d\u0003\u0002\u0002\u0002",
    "\u192c\u18ff\u0003\u0002\u0002\u0002\u192c\u1903\u0003\u0002\u0002\u0002",
    "\u192c\u190a\u0003\u0002\u0002\u0002\u192c\u190e\u0003\u0002\u0002\u0002",
    "\u192c\u1912\u0003\u0002\u0002\u0002\u192c\u1916\u0003\u0002\u0002\u0002",
    "\u192c\u1917\u0003\u0002\u0002\u0002\u192c\u191b\u0003\u0002\u0002\u0002",
    "\u192c\u191f\u0003\u0002\u0002\u0002\u192c\u1923\u0003\u0002\u0002\u0002",
    "\u192c\u1925\u0003\u0002\u0002\u0002\u192c\u1927\u0003\u0002\u0002\u0002",
    "\u192d\u02eb\u0003\u0002\u0002\u0002\u192e\u1933\u0005\u029c\u014f\u0002",
    "\u192f\u1930\u0007\u0198\u0002\u0002\u1930\u1932\u0005\u029c\u014f\u0002",
    "\u1931\u192f\u0003\u0002\u0002\u0002\u1932\u1935\u0003\u0002\u0002\u0002",
    "\u1933\u1931\u0003\u0002\u0002\u0002\u1933\u1934\u0003\u0002\u0002\u0002",
    "\u1934\u02ed\u0003\u0002\u0002\u0002\u1935\u1933\u0003\u0002\u0002\u0002",
    "\u1936\u1937\u0007\u01c4\u0002\u0002\u1937\u193a\u0007\u026d\u0002\u0002",
    "\u1938\u193a\u0007\n\u0002\u0002\u1939\u1936\u0003\u0002\u0002\u0002",
    "\u1939\u1938\u0003\u0002\u0002\u0002\u193a\u02ef\u0003\u0002\u0002\u0002",
    "\u193b\u193c\ta\u0002\u0002\u193c\u02f1\u0003\u0002\u0002\u0002\u193d",
    "\u193e\tb\u0002\u0002\u193e\u02f3\u0003\u0002\u0002\u0002\u193f\u1942",
    "\u0005\u02f6\u017c\u0002\u1940\u1942\tc\u0002\u0002\u1941\u193f\u0003",
    "\u0002\u0002\u0002\u1941\u1940\u0003\u0002\u0002\u0002\u1942\u02f5\u0003",
    "\u0002\u0002\u0002\u1943\u1944\td\u0002\u0002\u1944\u02f7\u0003\u0002",
    "\u0002\u0002\u1945\u1946\u0007\u019b\u0002\u0002\u1946\u1947\u0005\u02ec",
    "\u0177\u0002\u1947\u1948\u0007\u019c\u0002\u0002\u1948\u02f9\u0003\u0002",
    "\u0002\u0002\u1949\u194a\u0007\u019b\u0002\u0002\u194a\u194b\u0005\u029c",
    "\u014f\u0002\u194b\u194c\u0007\u019c\u0002\u0002\u194c\u02fb\u0003\u0002",
    "\u0002\u0002\u194d\u194e\u0007\u019b\u0002\u0002\u194e\u194f\u0005\u02a8",
    "\u0155\u0002\u194f\u1950\u0007\u019c\u0002\u0002\u1950\u02fd\u0003\u0002",
    "\u0002\u0002\u1951\u1956\u0005\u0300\u0181\u0002\u1952\u1953\u0007\u0198",
    "\u0002\u0002\u1953\u1955\u0005\u0300\u0181\u0002\u1954\u1952\u0003\u0002",
    "\u0002\u0002\u1955\u1958\u0003\u0002\u0002\u0002\u1956\u1954\u0003\u0002",
    "\u0002\u0002\u1956\u1957\u0003\u0002\u0002\u0002\u1957\u02ff\u0003\u0002",
    "\u0002\u0002\u1958\u1956\u0003\u0002\u0002\u0002\u1959\u195b\u0005\u029c",
    "\u014f\u0002\u195a\u195c\u0005\u014c\u00a7\u0002\u195b\u195a\u0003\u0002",
    "\u0002\u0002\u195b\u195c\u0003\u0002\u0002\u0002\u195c\u0301\u0003\u0002",
    "\u0002\u0002\u195d\u1962\u0005\u0304\u0183\u0002\u195e\u195f\u0007\u0198",
    "\u0002\u0002\u195f\u1961\u0005\u0304\u0183\u0002\u1960\u195e\u0003\u0002",
    "\u0002\u0002\u1961\u1964\u0003\u0002\u0002\u0002\u1962\u1960\u0003\u0002",
    "\u0002\u0002\u1962\u1963\u0003\u0002\u0002\u0002\u1963\u0303\u0003\u0002",
    "\u0002\u0002\u1964\u1962\u0003\u0002\u0002\u0002\u1965\u1966\u0005\u029c",
    "\u014f\u0002\u1966\u0305\u0003\u0002\u0002\u0002\u1967\u1968\u0006\u0184",
    "\u00ae\u0002\u1968\u1969\u0007\u01fc\u0002\u0002\u1969\u196a\u0007S",
    "\u0002\u0002\u196a\u196b\u0005\u0482\u0242\u0002\u196b\u0307\u0003\u0002",
    "\u0002\u0002\u196c\u197a\u0005\u0004\u0003\u0002\u196d\u197a\u0005\u030a",
    "\u0186\u0002\u196e\u197a\u0005\u030c\u0187\u0002\u196f\u197a\u0005\u0314",
    "\u018b\u0002\u1970\u197a\u0005\u0318\u018d\u0002\u1971\u197a\u0005\u031a",
    "\u018e\u0002\u1972\u197a\u0005\u0320\u0191\u0002\u1973\u197a\u0005\u0322",
    "\u0192\u0002\u1974\u197a\u0005\u033e\u01a0\u0002\u1975\u197a\u0005\u033c",
    "\u019f\u0002\u1976\u197a\u0005\u0350\u01a9\u0002\u1977\u197a\u0005\u0354",
    "\u01ab\u0002\u1978\u197a\u0005\u0352\u01aa\u0002\u1979\u196c\u0003\u0002",
    "\u0002\u0002\u1979\u196d\u0003\u0002\u0002\u0002\u1979\u196e\u0003\u0002",
    "\u0002\u0002\u1979\u196f\u0003\u0002\u0002\u0002\u1979\u1970\u0003\u0002",
    "\u0002\u0002\u1979\u1971\u0003\u0002\u0002\u0002\u1979\u1972\u0003\u0002",
    "\u0002\u0002\u1979\u1973\u0003\u0002\u0002\u0002\u1979\u1974\u0003\u0002",
    "\u0002\u0002\u1979\u1975\u0003\u0002\u0002\u0002\u1979\u1976\u0003\u0002",
    "\u0002\u0002\u1979\u1977\u0003\u0002\u0002\u0002\u1979\u1978\u0003\u0002",
    "\u0002\u0002\u197a\u0309\u0003\u0002\u0002\u0002\u197b\u197c\u0007\u0264",
    "\u0002\u0002\u197c\u197d\u0005\u029c\u014f\u0002\u197d\u030b\u0003\u0002",
    "\u0002\u0002\u197e\u197f\u0007\u0209\u0002\u0002\u197f\u1980\u0005\u030e",
    "\u0188\u0002\u1980\u1981\u0007\u0012\u0002\u0002\u1981\u1982\u0007\u0209",
    "\u0002\u0002\u1982\u030d\u0003\u0002\u0002\u0002\u1983\u1984\u0005\u029c",
    "\u014f\u0002\u1984\u1989\u0005\u0310\u0189\u0002\u1985\u1986\u0007\u01ed",
    "\u0002\u0002\u1986\u198a\u0005\u030e\u0188\u0002\u1987\u1988\u0007\u01ec",
    "\u0002\u0002\u1988\u198a\u0005\u0312\u018a\u0002\u1989\u1985\u0003\u0002",
    "\u0002\u0002\u1989\u1987\u0003\u0002\u0002\u0002\u1989\u198a\u0003\u0002",
    "\u0002\u0002\u198a\u030f\u0003\u0002\u0002\u0002\u198b\u198c\u0007\u028b",
    "\u0002\u0002\u198c\u198d\u0005\u0312\u018a\u0002\u198d\u0311\u0003\u0002",
    "\u0002\u0002\u198e\u198f\u0005\u0308\u0185\u0002\u198f\u1990\u0007\u0199",
    "\u0002\u0002\u1990\u1992\u0003\u0002\u0002\u0002\u1991\u198e\u0003\u0002",
    "\u0002\u0002\u1992\u1993\u0003\u0002\u0002\u0002\u1993\u1991\u0003\u0002",
    "\u0002\u0002\u1993\u1994\u0003\u0002\u0002\u0002\u1994\u0313\u0003\u0002",
    "\u0002\u0002\u1995\u1997\u0007\u01c1\u0002\u0002\u1996\u1998\u0005\u029c",
    "\u014f\u0002\u1997\u1996\u0003\u0002\u0002\u0002\u1997\u1998\u0003\u0002",
    "\u0002\u0002\u1998\u199c\u0003\u0002\u0002\u0002\u1999\u199a\u0005\u02e4",
    "\u0173\u0002\u199a\u199b\u0005\u0310\u0189\u0002\u199b\u199d\u0003\u0002",
    "\u0002\u0002\u199c\u1999\u0003\u0002\u0002\u0002\u199d\u199e\u0003\u0002",
    "\u0002\u0002\u199e\u199c\u0003\u0002\u0002\u0002\u199e\u199f\u0003\u0002",
    "\u0002\u0002\u199f\u19a1\u0003\u0002\u0002\u0002\u19a0\u19a2\u0005\u0316",
    "\u018c\u0002\u19a1\u19a0\u0003\u0002\u0002\u0002\u19a1\u19a2\u0003\u0002",
    "\u0002\u0002\u19a2\u19a3\u0003\u0002\u0002\u0002\u19a3\u19a4\u0007\u0012",
    "\u0002\u0002\u19a4\u19a5\u0007\u01c1\u0002\u0002\u19a5\u0315\u0003\u0002",
    "\u0002\u0002\u19a6\u19a7\u0007\u01ec\u0002\u0002\u19a7\u19a8\u0005\u0312",
    "\u018a\u0002\u19a8\u0317\u0003\u0002\u0002\u0002\u19a9\u19aa\u0005\u031c",
    "\u018f\u0002\u19aa\u19ac\u0005\u031e\u0190\u0002\u19ab\u19ad\u0005\u0450",
    "\u0229\u0002\u19ac\u19ab\u0003\u0002\u0002\u0002\u19ac\u19ad\u0003\u0002",
    "\u0002\u0002\u19ad\u0319\u0003\u0002\u0002\u0002\u19ae\u19af\u0005\u031e",
    "\u0190\u0002\u19af\u031b\u0003\u0002\u0002\u0002\u19b0\u19b1\u0005\u044e",
    "\u0228\u0002\u19b1\u19b2\u0007\u019a\u0002\u0002\u19b2\u031d\u0003\u0002",
    "\u0002\u0002\u19b3\u19b5\u0007\u0007\u0002\u0002\u19b4\u19b6\u0005\u032a",
    "\u0196\u0002\u19b5\u19b4\u0003\u0002\u0002\u0002\u19b5\u19b6\u0003\u0002",
    "\u0002\u0002\u19b6\u19b8\u0003\u0002\u0002\u0002\u19b7\u19b9\u0005\u0312",
    "\u018a\u0002\u19b8\u19b7\u0003\u0002\u0002\u0002\u19b8\u19b9\u0003\u0002",
    "\u0002\u0002\u19b9\u19ba\u0003\u0002\u0002\u0002\u19ba\u19bb\u0007\u0012",
    "\u0002\u0002\u19bb\u031f\u0003\u0002\u0002\u0002\u19bc\u19bd\u0005\u031c",
    "\u018f\u0002\u19bd\u19bf\u0005\u0322\u0192\u0002\u19be\u19c0\u0005\u0450",
    "\u0229\u0002\u19bf\u19be\u0003\u0002\u0002\u0002\u19bf\u19c0\u0003\u0002",
    "\u0002\u0002\u19c0\u0321\u0003\u0002\u0002\u0002\u19c1\u19c5\u0005\u0324",
    "\u0193\u0002\u19c2\u19c5\u0005\u0326\u0194\u0002\u19c3\u19c5\u0005\u0328",
    "\u0195\u0002\u19c4\u19c1\u0003\u0002\u0002\u0002\u19c4\u19c2\u0003\u0002",
    "\u0002\u0002\u19c4\u19c3\u0003\u0002\u0002\u0002\u19c5\u0323\u0003\u0002",
    "\u0002\u0002\u19c6\u19c7\u0007\u022b\u0002\u0002\u19c7\u19c8\u0005\u0312",
    "\u018a\u0002\u19c8\u19c9\u0007\u0012\u0002\u0002\u19c9\u19ca\u0007\u022b",
    "\u0002\u0002\u19ca\u0325\u0003\u0002\u0002\u0002\u19cb\u19cc\u0007\u02ab",
    "\u0002\u0002\u19cc\u19cd\u0005\u029c\u014f\u0002\u19cd\u19ce\u0007\u0011",
    "\u0002\u0002\u19ce\u19cf\u0005\u0312\u018a\u0002\u19cf\u19d0\u0007\u0012",
    "\u0002\u0002\u19d0\u19d1\u0007\u02ab\u0002\u0002\u19d1\u0327\u0003\u0002",
    "\u0002\u0002\u19d2\u19d3\u0007\u025f\u0002\u0002\u19d3\u19d4\u0005\u0312",
    "\u018a\u0002\u19d4\u19d5\u0007\u016c\u0002\u0002\u19d5\u19d6\u0005\u029c",
    "\u014f\u0002\u19d6\u19d7\u0007\u0012\u0002\u0002\u19d7\u19d8\u0007\u025f",
    "\u0002\u0002\u19d8\u0329\u0003\u0002\u0002\u0002\u19d9\u19da\u0005\u032c",
    "\u0197\u0002\u19da\u19db\u0007\u0199\u0002\u0002\u19db\u19dd\u0003\u0002",
    "\u0002\u0002\u19dc\u19d9\u0003\u0002\u0002\u0002\u19dd\u19de\u0003\u0002",
    "\u0002\u0002\u19de\u19dc\u0003\u0002\u0002\u0002\u19de\u19df\u0003\u0002",
    "\u0002\u0002\u19df\u032b\u0003\u0002\u0002\u0002\u19e0\u19e5\u0005\u032e",
    "\u0198\u0002\u19e1\u19e5\u0005\u0330\u0199\u0002\u19e2\u19e5\u0005\u0336",
    "\u019c\u0002\u19e3\u19e5\u0005\u033a\u019e\u0002\u19e4\u19e0\u0003\u0002",
    "\u0002\u0002\u19e4\u19e1\u0003\u0002\u0002\u0002\u19e4\u19e2\u0003\u0002",
    "\u0002\u0002\u19e4\u19e3\u0003\u0002\u0002\u0002\u19e5\u032d\u0003\u0002",
    "\u0002\u0002\u19e6\u19e7\u0007\u01df\u0002\u0002\u19e7\u19e8\u0005\u0462",
    "\u0232\u0002\u19e8\u19ea\u0005\u038c\u01c7\u0002\u19e9\u19eb\u0005\u03d2",
    "\u01ea\u0002\u19ea\u19e9\u0003\u0002\u0002\u0002\u19ea\u19eb\u0003\u0002",
    "\u0002\u0002\u19eb\u19ee\u0003\u0002\u0002\u0002\u19ec\u19ed\u0007\u01e0",
    "\u0002\u0002\u19ed\u19ef\u0005\u029c\u014f\u0002\u19ee\u19ec\u0003\u0002",
    "\u0002\u0002\u19ee\u19ef\u0003\u0002\u0002\u0002\u19ef\u032f\u0003\u0002",
    "\u0002\u0002\u19f0\u19f1\u0007\u01df\u0002\u0002\u19f1\u19f2\u0005\u0460",
    "\u0231\u0002\u19f2\u19f3\u0007\u01c8\u0002\u0002\u19f3\u19f4\u0007\u01fc",
    "\u0002\u0002\u19f4\u19f5\u0005\u0332\u019a\u0002\u19f5\u0331\u0003\u0002",
    "\u0002\u0002\u19f6\u19f9\u0005\u046c\u0237\u0002\u19f7\u19f9\u0005\u0334",
    "\u019b\u0002\u19f8\u19f6\u0003\u0002\u0002\u0002\u19f8\u19f7\u0003\u0002",
    "\u0002\u0002\u19f9\u0333\u0003\u0002\u0002\u0002\u19fa\u19fc\u0007\u0275",
    "\u0002\u0002\u19fb\u19fd\u0007\u0172\u0002\u0002\u19fc\u19fb\u0003\u0002",
    "\u0002\u0002\u19fc\u19fd\u0003\u0002\u0002\u0002\u19fd\u19fe\u0003\u0002",
    "\u0002\u0002\u19fe\u19ff\u0005\u0480\u0241\u0002\u19ff\u0335\u0003\u0002",
    "\u0002\u0002\u1a00\u1a01\u0007\u01df\u0002\u0002\u1a01\u1a02\te\u0002",
    "\u0002\u1a02\u1a03\u0007\u0018\u0002\u0002\u1a03\u1a04\u0007\u01fc\u0002",
    "\u0002\u1a04\u1a09\u0005\u0338\u019d\u0002\u1a05\u1a06\u0007\u0198\u0002",
    "\u0002\u1a06\u1a08\u0005\u0338\u019d\u0002\u1a07\u1a05\u0003\u0002\u0002",
    "\u0002\u1a08\u1a0b\u0003\u0002\u0002\u0002\u1a09\u1a07\u0003\u0002\u0002",
    "\u0002\u1a09\u1a0a\u0003\u0002\u0002\u0002\u1a0a\u1a0c\u0003\u0002\u0002",
    "\u0002\u1a0b\u1a09\u0003\u0002\u0002\u0002\u1a0c\u1a0d\u0005\u0308\u0185",
    "\u0002\u1a0d\u0337\u0003\u0002\u0002\u0002\u1a0e\u1a16\u0005\u0332\u019a",
    "\u0002\u1a0f\u1a16\u0005\u0460\u0231\u0002\u1a10\u1a16\u0007\u0276\u0002",
    "\u0002\u1a11\u1a12\u0005\u02f0\u0179\u0002\u1a12\u1a13\u0007\u0090\u0002",
    "\u0002\u1a13\u1a16\u0003\u0002\u0002\u0002\u1a14\u1a16\u0007\u0274\u0002",
    "\u0002\u1a15\u1a0e\u0003\u0002\u0002\u0002\u1a15\u1a0f\u0003\u0002\u0002",
    "\u0002\u1a15\u1a10\u0003\u0002\u0002\u0002\u1a15\u1a11\u0003\u0002\u0002",
    "\u0002\u1a15\u1a14\u0003\u0002\u0002\u0002\u1a16\u0339\u0003\u0002\u0002",
    "\u0002\u1a17\u1a18\u0007\u01df\u0002\u0002\u1a18\u1a19\u0005\u0460\u0231",
    "\u0002\u1a19\u1a1a\u0007\u01d3\u0002\u0002\u1a1a\u1a1b\u0007\u01fc\u0002",
    "\u0002\u1a1b\u1a1c\u0005\u010e\u0088\u0002\u1a1c\u033b\u0003\u0002\u0002",
    "\u0002\u1a1d\u1a1e\u0007\u0218\u0002\u0002\u1a1e\u1a1f\u0005\u0450\u0229",
    "\u0002\u1a1f\u033d\u0003\u0002\u0002\u0002\u1a20\u1a21\u0007\u021e\u0002",
    "\u0002\u1a21\u1a22\u0005\u0450\u0229\u0002\u1a22\u033f\u0003\u0002\u0002",
    "\u0002\u1a23\u1a27\u0007\u01ff\u0002\u0002\u1a24\u1a28\u0007m\u0002",
    "\u0002\u1a25\u1a26\u0006\u01a1\u00af\u0002\u1a26\u1a28\u0007\u0144\u0002",
    "\u0002\u1a27\u1a24\u0003\u0002\u0002\u0002\u1a27\u1a25\u0003\u0002\u0002",
    "\u0002\u1a27\u1a28\u0003\u0002\u0002\u0002\u1a28\u1a29\u0003\u0002\u0002",
    "\u0002\u1a29\u1a3c\u0007x\u0002\u0002\u1a2a\u1a2f\u0005\u0344\u01a3",
    "\u0002\u1a2b\u1a2c\u0007\u0198\u0002\u0002\u1a2c\u1a2e\u0005\u0344\u01a3",
    "\u0002\u1a2d\u1a2b\u0003\u0002\u0002\u0002\u1a2e\u1a31\u0003\u0002\u0002",
    "\u0002\u1a2f\u1a2d\u0003\u0002\u0002\u0002\u1a2f\u1a30\u0003\u0002\u0002",
    "\u0002\u1a30\u1a3d\u0003\u0002\u0002\u0002\u1a31\u1a2f\u0003\u0002\u0002",
    "\u0002\u1a32\u1a33\u0007\u01c8\u0002\u0002\u1a33\u1a34\u0005\u0342\u01a2",
    "\u0002\u1a34\u1a39\u0005\u0346\u01a4\u0002\u1a35\u1a36\u0007\u0198\u0002",
    "\u0002\u1a36\u1a38\u0005\u0346\u01a4\u0002\u1a37\u1a35\u0003\u0002\u0002",
    "\u0002\u1a38\u1a3b\u0003\u0002\u0002\u0002\u1a39\u1a37\u0003\u0002\u0002",
    "\u0002\u1a39\u1a3a\u0003\u0002\u0002\u0002\u1a3a\u1a3d\u0003\u0002\u0002",
    "\u0002\u1a3b\u1a39\u0003\u0002\u0002\u0002\u1a3c\u1a2a\u0003\u0002\u0002",
    "\u0002\u1a3c\u1a32\u0003\u0002\u0002\u0002\u1a3d\u0341\u0003\u0002\u0002",
    "\u0002\u1a3e\u1a42\u0005\u0474\u023b\u0002\u1a3f\u1a42\u0005\u02dc\u016f",
    "\u0002\u1a40\u1a42\u0005\u0466\u0234\u0002\u1a41\u1a3e\u0003\u0002\u0002",
    "\u0002\u1a41\u1a3f\u0003\u0002\u0002\u0002\u1a41\u1a40\u0003\u0002\u0002",
    "\u0002\u1a42\u0343\u0003\u0002\u0002\u0002\u1a43\u1a46\u0005\u02dc\u016f",
    "\u0002\u1a44\u1a46\u0005\u0460\u0231\u0002\u1a45\u1a43\u0003\u0002\u0002",
    "\u0002\u1a45\u1a44\u0003\u0002\u0002\u0002\u1a46\u1a47\u0003\u0002\u0002",
    "\u0002\u1a47\u1a48\u0007\u0181\u0002\u0002\u1a48\u1a49\tf\u0002\u0002",
    "\u1a49\u0345\u0003\u0002\u0002\u0002\u1a4a\u1a4d\u0005\u02dc\u016f\u0002",
    "\u1a4b\u1a4d\u0005\u0460\u0231\u0002\u1a4c\u1a4a\u0003\u0002\u0002\u0002",
    "\u1a4c\u1a4b\u0003\u0002\u0002\u0002\u1a4d\u1a4e\u0003\u0002\u0002\u0002",
    "\u1a4e\u1a51\u0007\u0181\u0002\u0002\u1a4f\u1a52\u0005\u0348\u01a5\u0002",
    "\u1a50\u1a52\u0007\u0126\u0002\u0002\u1a51\u1a4f\u0003\u0002\u0002\u0002",
    "\u1a51\u1a50\u0003\u0002\u0002\u0002\u1a52\u0347\u0003\u0002\u0002\u0002",
    "\u1a53\u1a54\tg\u0002\u0002\u1a54\u0349\u0003\u0002\u0002\u0002\u1a55",
    "\u1a58\u0007\u0270\u0002\u0002\u1a56\u1a59\u0005\u0460\u0231\u0002\u1a57",
    "\u1a59\u0005\u0334\u019b\u0002\u1a58\u1a56\u0003\u0002\u0002\u0002\u1a58",
    "\u1a57\u0003\u0002\u0002\u0002\u1a59\u1a63\u0003\u0002\u0002\u0002\u1a5a",
    "\u1a5b\u0007\u026d\u0002\u0002\u1a5b\u1a60\u0005\u034e\u01a8\u0002\u1a5c",
    "\u1a5d\u0007\u0198\u0002\u0002\u1a5d\u1a5f\u0005\u034e\u01a8\u0002\u1a5e",
    "\u1a5c\u0003\u0002\u0002\u0002\u1a5f\u1a62\u0003\u0002\u0002\u0002\u1a60",
    "\u1a5e\u0003\u0002\u0002\u0002\u1a60\u1a61\u0003\u0002\u0002\u0002\u1a61",
    "\u1a64\u0003\u0002\u0002\u0002\u1a62\u1a60\u0003\u0002\u0002\u0002\u1a63",
    "\u1a5a\u0003\u0002\u0002\u0002\u1a63\u1a64\u0003\u0002\u0002\u0002\u1a64",
    "\u034b\u0003\u0002\u0002\u0002\u1a65\u1a6b\u0007\u0262\u0002\u0002\u1a66",
    "\u1a68\u0007\u0275\u0002\u0002\u1a67\u1a69\u0007\u0172\u0002\u0002\u1a68",
    "\u1a67\u0003\u0002\u0002\u0002\u1a68\u1a69\u0003\u0002\u0002\u0002\u1a69",
    "\u1a6a\u0003\u0002\u0002\u0002\u1a6a\u1a6c\u0005\u0494\u024b\u0002\u1a6b",
    "\u1a66\u0003\u0002\u0002\u0002\u1a6b\u1a6c\u0003\u0002\u0002\u0002\u1a6c",
    "\u1a76\u0003\u0002\u0002\u0002\u1a6d\u1a6e\u0007\u026d\u0002\u0002\u1a6e",
    "\u1a73\u0005\u034e\u01a8\u0002\u1a6f\u1a70\u0007\u0198\u0002\u0002\u1a70",
    "\u1a72\u0005\u034e\u01a8\u0002\u1a71\u1a6f\u0003\u0002\u0002\u0002\u1a72",
    "\u1a75\u0003\u0002\u0002\u0002\u1a73\u1a71\u0003\u0002\u0002\u0002\u1a73",
    "\u1a74\u0003\u0002\u0002\u0002\u1a74\u1a77\u0003\u0002\u0002\u0002\u1a75",
    "\u1a73\u0003\u0002\u0002\u0002\u1a76\u1a6d\u0003\u0002\u0002\u0002\u1a76",
    "\u1a77\u0003\u0002\u0002\u0002\u1a77\u034d\u0003\u0002\u0002\u0002\u1a78",
    "\u1a79\u0005\u0348\u01a5\u0002\u1a79\u1a7a\u0007\u0181\u0002\u0002\u1a7a",
    "\u1a7b\u0005\u0342\u01a2\u0002\u1a7b\u034f\u0003\u0002\u0002\u0002\u1a7c",
    "\u1a7d\u0007\u001e\u0002\u0002\u1a7d\u1a7e\u0005\u0460\u0231\u0002\u1a7e",
    "\u0351\u0003\u0002\u0002\u0002\u1a7f\u1a80\u0007\f\u0002\u0002\u1a80",
    "\u1a81\u0005\u0460\u0231\u0002\u1a81\u0353\u0003\u0002\u0002\u0002\u1a82",
    "\u1a87\u0007\u01f8\u0002\u0002\u1a83\u1a85\u0007\u00ed\u0002\u0002\u1a84",
    "\u1a83\u0003\u0002\u0002\u0002\u1a84\u1a85\u0003\u0002\u0002\u0002\u1a85",
    "\u1a86\u0003\u0002\u0002\u0002\u1a86\u1a88\u0007\u01fd\u0002\u0002\u1a87",
    "\u1a84\u0003\u0002\u0002\u0002\u1a87\u1a88\u0003\u0002\u0002\u0002\u1a88",
    "\u1a89\u0003\u0002\u0002\u0002\u1a89\u1a8a\u0005\u0460\u0231\u0002\u1a8a",
    "\u1a8b\u0007\u0212\u0002\u0002\u1a8b\u1a8c\u0005\u0462\u0232\u0002\u1a8c",
    "\u0355\u0003\u0002\u0002\u0002\u1a8d\u1a8e\u0007C\u0002\u0002\u1a8e",
    "\u1a9b\u0005\u029c\u014f\u0002\u1a8f\u1a90\u0007\u0089\u0002\u0002\u1a90",
    "\u1a91\u0005\u029c\u014f\u0002\u1a91\u1a94\u0005\u02f4\u017b\u0002\u1a92",
    "\u1a93\u0007\u0145\u0002\u0002\u1a93\u1a95\u0005\u029c\u014f\u0002\u1a94",
    "\u1a92\u0003\u0002\u0002\u0002\u1a94\u1a95\u0003\u0002\u0002\u0002\u1a95",
    "\u1a98\u0003\u0002\u0002\u0002\u1a96\u1a97\u0007\u0080\u0002\u0002\u1a97",
    "\u1a99\u0005\u029c\u014f\u0002\u1a98\u1a96\u0003\u0002\u0002\u0002\u1a98",
    "\u1a99\u0003\u0002\u0002\u0002\u1a99\u1a9b\u0003\u0002\u0002\u0002\u1a9a",
    "\u1a8d\u0003\u0002\u0002\u0002\u1a9a\u1a8f\u0003\u0002\u0002\u0002\u1a9b",
    "\u0357\u0003\u0002\u0002\u0002\u1a9c\u1a9d\u0005\u0408\u0205\u0002\u1a9d",
    "\u1a9f\u0005\u0364\u01b3\u0002\u1a9e\u1aa0\u0005\u035a\u01ae\u0002\u1a9f",
    "\u1a9e\u0003\u0002\u0002\u0002\u1a9f\u1aa0\u0003\u0002\u0002\u0002\u1aa0",
    "\u0359\u0003\u0002\u0002\u0002\u1aa1\u1aa2\u0006\u01ae\u00b0\u0002\u1aa2",
    "\u1aa5\u0005\u035c\u01af\u0002\u1aa3\u1aa5\u0005\u036e\u01b8\u0002\u1aa4",
    "\u1aa1\u0003\u0002\u0002\u0002\u1aa4\u1aa3\u0003\u0002\u0002\u0002\u1aa5",
    "\u035b\u0003\u0002\u0002\u0002\u1aa6\u1aa7\u0007\u01c5\u0002\u0002\u1aa7",
    "\u1aa8\u0005\u02fa\u017e\u0002\u1aa8\u035d\u0003\u0002\u0002\u0002\u1aa9",
    "\u1aab\u0007\u023f\u0002\u0002\u1aaa\u1aa9\u0003\u0002\u0002\u0002\u1aaa",
    "\u1aab\u0003\u0002\u0002\u0002\u1aab\u1aac\u0003\u0002\u0002\u0002\u1aac",
    "\u1aad\u0007\u02fa\u0002\u0002\u1aad\u035f\u0003\u0002\u0002\u0002\u1aae",
    "\u1ab0\t(\u0002\u0002\u1aaf\u1ab1\u0005p9\u0002\u1ab0\u1aaf\u0003\u0002",
    "\u0002\u0002\u1ab0\u1ab1\u0003\u0002\u0002\u0002\u1ab1\u1ab2\u0003\u0002",
    "\u0002\u0002\u1ab2\u1ab6\u0005\u037a\u01be\u0002\u1ab3\u1ab5\u0005\u037e",
    "\u01c0\u0002\u1ab4\u1ab3\u0003\u0002\u0002\u0002\u1ab5\u1ab8\u0003\u0002",
    "\u0002\u0002\u1ab6\u1ab4\u0003\u0002\u0002\u0002\u1ab6\u1ab7\u0003\u0002",
    "\u0002\u0002\u1ab7\u1afa\u0003\u0002\u0002\u0002\u1ab8\u1ab6\u0003\u0002",
    "\u0002\u0002\u1ab9\u1abb\u0007\u01fe\u0002\u0002\u1aba\u1abc\u0005\u0190",
    "\u00c9\u0002\u1abb\u1aba\u0003\u0002\u0002\u0002\u1abb\u1abc\u0003\u0002",
    "\u0002\u0002\u1abc\u1abe\u0003\u0002\u0002\u0002\u1abd\u1abf\u0005\u0412",
    "\u020a\u0002\u1abe\u1abd\u0003\u0002\u0002\u0002\u1abe\u1abf\u0003\u0002",
    "\u0002\u0002\u1abf\u1ac0\u0003\u0002\u0002\u0002\u1ac0\u1ac4\u0005\u037a",
    "\u01be\u0002\u1ac1\u1ac3\u0005\u0386\u01c4\u0002\u1ac2\u1ac1\u0003\u0002",
    "\u0002\u0002\u1ac3\u1ac6\u0003\u0002\u0002\u0002\u1ac4\u1ac2\u0003\u0002",
    "\u0002\u0002\u1ac4\u1ac5\u0003\u0002\u0002\u0002\u1ac5\u1afa\u0003\u0002",
    "\u0002\u0002\u1ac6\u1ac4\u0003\u0002\u0002\u0002\u1ac7\u1ac9\u0007\u0272",
    "\u0002\u0002\u1ac8\u1aca\u0005\u0190\u00c9\u0002\u1ac9\u1ac8\u0003\u0002",
    "\u0002\u0002\u1ac9\u1aca\u0003\u0002\u0002\u0002\u1aca\u1acc\u0003\u0002",
    "\u0002\u0002\u1acb\u1acd\u0005\u0412\u020a\u0002\u1acc\u1acb\u0003\u0002",
    "\u0002\u0002\u1acc\u1acd\u0003\u0002\u0002\u0002\u1acd\u1ace\u0003\u0002",
    "\u0002\u0002\u1ace\u1ad2\u0005\u037a\u01be\u0002\u1acf\u1ad1\u0005\u0388",
    "\u01c5\u0002\u1ad0\u1acf\u0003\u0002\u0002\u0002\u1ad1\u1ad4\u0003\u0002",
    "\u0002\u0002\u1ad2\u1ad0\u0003\u0002\u0002\u0002\u1ad2\u1ad3\u0003\u0002",
    "\u0002\u0002\u1ad3\u1afa\u0003\u0002\u0002\u0002\u1ad4\u1ad2\u0003\u0002",
    "\u0002\u0002\u1ad5\u1ad7\u0005\u0362\u01b2\u0002\u1ad6\u1ad5\u0003\u0002",
    "\u0002\u0002\u1ad6\u1ad7\u0003\u0002\u0002\u0002\u1ad7\u1af7\u0003\u0002",
    "\u0002\u0002\u1ad8\u1ad9\u0007\u0253\u0002\u0002\u1ad9\u1adf\u0007\u021b",
    "\u0002\u0002\u1ada\u1adc\u0007\u0296\u0002\u0002\u1adb\u1add\u0005\u0190",
    "\u00c9\u0002\u1adc\u1adb\u0003\u0002\u0002\u0002\u1adc\u1add\u0003\u0002",
    "\u0002\u0002\u1add\u1adf\u0003\u0002\u0002\u0002\u1ade\u1ad8\u0003\u0002",
    "\u0002\u0002\u1ade\u1ada\u0003\u0002\u0002\u0002\u1adf\u1ae1\u0003\u0002",
    "\u0002\u0002\u1ae0\u1ae2\u0005p9\u0002\u1ae1\u1ae0\u0003\u0002\u0002",
    "\u0002\u1ae1\u1ae2\u0003\u0002\u0002\u0002\u1ae2\u1ae3\u0003\u0002\u0002",
    "\u0002\u1ae3\u1ae7\u0005\u037a\u01be\u0002\u1ae4\u1ae6\u0005\u037e\u01c0",
    "\u0002\u1ae5\u1ae4\u0003\u0002\u0002\u0002\u1ae6\u1ae9\u0003\u0002\u0002",
    "\u0002\u1ae7\u1ae5\u0003\u0002\u0002\u0002\u1ae7\u1ae8\u0003\u0002\u0002",
    "\u0002\u1ae8\u1af8\u0003\u0002\u0002\u0002\u1ae9\u1ae7\u0003\u0002\u0002",
    "\u0002\u1aea\u1aeb\u0007\u01fb\u0002\u0002\u1aeb\u1aed\u0007\u021b\u0002",
    "\u0002\u1aec\u1aee\u0005\u0412\u020a\u0002\u1aed\u1aec\u0003\u0002\u0002",
    "\u0002\u1aed\u1aee\u0003\u0002\u0002\u0002\u1aee\u1aef\u0003\u0002\u0002",
    "\u0002\u1aef\u1af0\u0005\u0372\u01ba\u0002\u1af0\u1af1\u0005\u036e\u01b8",
    "\u0002\u1af1\u1af8\u0003\u0002\u0002\u0002\u1af2\u1af5\u0005\u035c\u01af",
    "\u0002\u1af3\u1af4\u0006\u01b1\u00b1\u0002\u1af4\u1af6\u0005\u035e\u01b0",
    "\u0002\u1af5\u1af3\u0003\u0002\u0002\u0002\u1af5\u1af6\u0003\u0002\u0002",
    "\u0002\u1af6\u1af8\u0003\u0002\u0002\u0002\u1af7\u1ade\u0003\u0002\u0002",
    "\u0002\u1af7\u1aea\u0003\u0002\u0002\u0002\u1af7\u1af2\u0003\u0002\u0002",
    "\u0002\u1af8\u1afa\u0003\u0002\u0002\u0002\u1af9\u1aae\u0003\u0002\u0002",
    "\u0002\u1af9\u1ab9\u0003\u0002\u0002\u0002\u1af9\u1ac7\u0003\u0002\u0002",
    "\u0002\u1af9\u1ad6\u0003\u0002\u0002\u0002\u1afa\u0361\u0003\u0002\u0002",
    "\u0002\u1afb\u1afd\u0007\u01c9\u0002\u0002\u1afc\u1afe\u0005\u0460\u0231",
    "\u0002\u1afd\u1afc\u0003\u0002\u0002\u0002\u1afd\u1afe\u0003\u0002\u0002",
    "\u0002\u1afe\u0363\u0003\u0002\u0002\u0002\u1aff\u1b23\u0005\u038c\u01c7",
    "\u0002\u1b00\u1b02\u0005\u0366\u01b4\u0002\u1b01\u1b00\u0003\u0002\u0002",
    "\u0002\u1b02\u1b05\u0003\u0002\u0002\u0002\u1b03\u1b01\u0003\u0002\u0002",
    "\u0002\u1b03\u1b04\u0003\u0002\u0002\u0002\u1b04\u1b24\u0003\u0002\u0002",
    "\u0002\u1b05\u1b03\u0003\u0002\u0002\u0002\u1b06\u1b08\u0006\u01b3\u00b2",
    "\u0002\u1b07\u1b09\u0005\u03d2\u01ea\u0002\u1b08\u1b07\u0003\u0002\u0002",
    "\u0002\u1b08\u1b09\u0003\u0002\u0002\u0002\u1b09\u1b0c\u0003\u0002\u0002",
    "\u0002\u1b0a\u1b0b\u0007\u0200\u0002\u0002\u1b0b\u1b0d\u0007\u0005\u0002",
    "\u0002\u1b0c\u1b0a\u0003\u0002\u0002\u0002\u1b0c\u1b0d\u0003\u0002\u0002",
    "\u0002\u1b0d\u1b0e\u0003\u0002\u0002\u0002\u1b0e\u1b0f\u0007\u01b1\u0002",
    "\u0002\u1b0f\u1b11\u0005\u02fa\u017e\u0002\u1b10\u1b12\th\u0002\u0002",
    "\u1b11\u1b10\u0003\u0002\u0002\u0002\u1b11\u1b12\u0003\u0002\u0002\u0002",
    "\u1b12\u1b21\u0003\u0002\u0002\u0002\u1b13\u1b17\u0006\u01b3\u00b3\u0002",
    "\u1b14\u1b16\u0005\u036c\u01b7\u0002\u1b15\u1b14\u0003\u0002\u0002\u0002",
    "\u1b16\u1b19\u0003\u0002\u0002\u0002\u1b17\u1b15\u0003\u0002\u0002\u0002",
    "\u1b17\u1b18\u0003\u0002\u0002\u0002\u1b18\u1b22\u0003\u0002\u0002\u0002",
    "\u1b19\u1b17\u0003\u0002\u0002\u0002\u1b1a\u1b1e\u0006\u01b3\u00b4\u0002",
    "\u1b1b\u1b1d\u0005\u0366\u01b4\u0002\u1b1c\u1b1b\u0003\u0002\u0002\u0002",
    "\u1b1d\u1b20\u0003\u0002\u0002\u0002\u1b1e\u1b1c\u0003\u0002\u0002\u0002",
    "\u1b1e\u1b1f\u0003\u0002\u0002\u0002\u1b1f\u1b22\u0003\u0002\u0002\u0002",
    "\u1b20\u1b1e\u0003\u0002\u0002\u0002\u1b21\u1b13\u0003\u0002\u0002\u0002",
    "\u1b21\u1b1a\u0003\u0002\u0002\u0002\u1b22\u1b24\u0003\u0002\u0002\u0002",
    "\u1b23\u1b03\u0003\u0002\u0002\u0002\u1b23\u1b06\u0003\u0002\u0002\u0002",
    "\u1b24\u0365\u0003\u0002\u0002\u0002\u1b25\u1b27\u0007\u023f\u0002\u0002",
    "\u1b26\u1b25\u0003\u0002\u0002\u0002\u1b26\u1b27\u0003\u0002\u0002\u0002",
    "\u1b27\u1b28\u0003\u0002\u0002\u0002\u1b28\u1b5a\u0005\u048a\u0246\u0002",
    "\u1b29\u1b2a\u0006\u01b4\u00b5\u0002\u1b2a\u1b2b\u0007\u023f\u0002\u0002",
    "\u1b2b\u1b5a\u0007\u02f0\u0002\u0002\u1b2c\u1b34\u0007\u01e0\u0002\u0002",
    "\u1b2d\u1b35\u0005\u0476\u023c\u0002\u1b2e\u1b30\u0007\u0240\u0002\u0002",
    "\u1b2f\u1b31\u0005\u02c8\u0165\u0002\u1b30\u1b2f\u0003\u0002\u0002\u0002",
    "\u1b30\u1b31\u0003\u0002\u0002\u0002\u1b31\u1b35\u0003\u0002\u0002\u0002",
    "\u1b32\u1b33\u0006\u01b4\u00b6\u0002\u1b33\u1b35\u0005\u02fa\u017e\u0002",
    "\u1b34\u1b2d\u0003\u0002\u0002\u0002\u1b34\u1b2e\u0003\u0002\u0002\u0002",
    "\u1b34\u1b32\u0003\u0002\u0002\u0002\u1b35\u1b5a\u0003\u0002\u0002\u0002",
    "\u1b36\u1b37\u0007\u0245\u0002\u0002\u1b37\u1b38\u0007\u0299\u0002\u0002",
    "\u1b38\u1b3a\u0007\u0240\u0002\u0002\u1b39\u1b3b\u0005\u02c8\u0165\u0002",
    "\u1b3a\u1b39\u0003\u0002\u0002\u0002\u1b3a\u1b3b\u0003\u0002\u0002\u0002",
    "\u1b3b\u1b5a\u0003\u0002\u0002\u0002\u1b3c\u1b5a\u0007E\u0002\u0002",
    "\u1b3d\u1b3e\u0007\u0134\u0002\u0002\u1b3e\u1b3f\u0007\u01e0\u0002\u0002",
    "\u1b3f\u1b5a\u0007\u0172\u0002\u0002\u1b40\u1b42\u0007\u0253\u0002\u0002",
    "\u1b41\u1b40\u0003\u0002\u0002\u0002\u1b41\u1b42\u0003\u0002\u0002\u0002",
    "\u1b42\u1b43\u0003\u0002\u0002\u0002\u1b43\u1b5a\u0007\u021b\u0002\u0002",
    "\u1b44\u1b46\u0007\u0296\u0002\u0002\u1b45\u1b47\u0007\u021b\u0002\u0002",
    "\u1b46\u1b45\u0003\u0002\u0002\u0002\u1b46\u1b47\u0003\u0002\u0002\u0002",
    "\u1b47\u1b5a\u0003\u0002\u0002\u0002\u1b48\u1b49\u0007\r\u0002\u0002",
    "\u1b49\u1b5a\u0005\u0480\u0241\u0002\u1b4a\u1b5a\u0005\u03d2\u01ea\u0002",
    "\u1b4b\u1b4c\u0007[\u0002\u0002\u1b4c\u1b5a\u0005\u0368\u01b5\u0002",
    "\u1b4d\u1b4e\u0007\u014a\u0002\u0002\u1b4e\u1b5a\u0005\u036a\u01b6\u0002",
    "\u1b4f\u1b50\u0006\u01b4\u00b7\u0002\u1b50\u1b51\u0007\u02e3\u0002\u0002",
    "\u1b51\u1b5a\u0005\u0472\u023a\u0002\u1b52\u1b54\u0006\u01b4\u00b8\u0002",
    "\u1b53\u1b55\u0005\u0362\u01b2\u0002\u1b54\u1b53\u0003\u0002\u0002\u0002",
    "\u1b54\u1b55\u0003\u0002\u0002\u0002\u1b55\u1b56\u0003\u0002\u0002\u0002",
    "\u1b56\u1b5a\u0005\u035c\u01af\u0002\u1b57\u1b58\u0006\u01b4\u00b9\u0002",
    "\u1b58\u1b5a\u0005\u035e\u01b0\u0002\u1b59\u1b26\u0003\u0002\u0002\u0002",
    "\u1b59\u1b29\u0003\u0002\u0002\u0002\u1b59\u1b2c\u0003\u0002\u0002\u0002",
    "\u1b59\u1b36\u0003\u0002\u0002\u0002\u1b59\u1b3c\u0003\u0002\u0002\u0002",
    "\u1b59\u1b3d\u0003\u0002\u0002\u0002\u1b59\u1b41\u0003\u0002\u0002\u0002",
    "\u1b59\u1b44\u0003\u0002\u0002\u0002\u1b59\u1b48\u0003\u0002\u0002\u0002",
    "\u1b59\u1b4a\u0003\u0002\u0002\u0002\u1b59\u1b4b\u0003\u0002\u0002\u0002",
    "\u1b59\u1b4d\u0003\u0002\u0002\u0002\u1b59\u1b4f\u0003\u0002\u0002\u0002",
    "\u1b59\u1b52\u0003\u0002\u0002\u0002\u1b59\u1b57\u0003\u0002\u0002\u0002",
    "\u1b5a\u0367\u0003\u0002\u0002\u0002\u1b5b\u1b5c\ti\u0002\u0002\u1b5c",
    "\u0369\u0003\u0002\u0002\u0002\u1b5d\u1b5e\tj\u0002\u0002\u1b5e\u036b",
    "\u0003\u0002\u0002\u0002\u1b5f\u1b61\u0007\u0296\u0002\u0002\u1b60\u1b62",
    "\u0007\u021b\u0002\u0002\u1b61\u1b60\u0003\u0002\u0002\u0002\u1b61\u1b62",
    "\u0003\u0002\u0002\u0002\u1b62\u1b6e\u0003\u0002\u0002\u0002\u1b63\u1b64",
    "\u0007\r\u0002\u0002\u1b64\u1b6e\u0005\u047c\u023f\u0002\u1b65\u1b67",
    "\u0005\u02f0\u0179\u0002\u1b66\u1b65\u0003\u0002\u0002\u0002\u1b66\u1b67",
    "\u0003\u0002\u0002\u0002\u1b67\u1b68\u0003\u0002\u0002\u0002\u1b68\u1b6e",
    "\u0007\u0242\u0002\u0002\u1b69\u1b6b\u0007\u0253\u0002\u0002\u1b6a\u1b69",
    "\u0003\u0002\u0002\u0002\u1b6a\u1b6b\u0003\u0002\u0002\u0002\u1b6b\u1b6c",
    "\u0003\u0002\u0002\u0002\u1b6c\u1b6e\u0007\u021b\u0002\u0002\u1b6d\u1b5f",
    "\u0003\u0002\u0002\u0002\u1b6d\u1b63\u0003\u0002\u0002\u0002\u1b6d\u1b66",
    "\u0003\u0002\u0002\u0002\u1b6d\u1b6a\u0003\u0002\u0002\u0002\u1b6e\u036d",
    "\u0003\u0002\u0002\u0002\u1b6f\u1b70\u0007\u025b\u0002\u0002\u1b70\u1b72",
    "\u0005\u0446\u0224\u0002\u1b71\u1b73\u0005\u0464\u0233\u0002\u1b72\u1b71",
    "\u0003\u0002\u0002\u0002\u1b72\u1b73\u0003\u0002\u0002\u0002\u1b73\u1b76",
    "\u0003\u0002\u0002\u0002\u1b74\u1b75\u0007\u022f\u0002\u0002\u1b75\u1b77",
    "\tk\u0002\u0002\u1b76\u1b74\u0003\u0002\u0002\u0002\u1b76\u1b77\u0003",
    "\u0002\u0002\u0002\u1b77\u1b88\u0003\u0002\u0002\u0002\u1b78\u1b79\u0007",
    "\u0245\u0002\u0002\u1b79\u1b7a\u0007\u0299\u0002\u0002\u1b7a\u1b7e\u0005",
    "\u0370\u01b9\u0002\u1b7b\u1b7c\u0007\u0245\u0002\u0002\u1b7c\u1b7d\u0007",
    "\u01e2\u0002\u0002\u1b7d\u1b7f\u0005\u0370\u01b9\u0002\u1b7e\u1b7b\u0003",
    "\u0002\u0002\u0002\u1b7e\u1b7f\u0003\u0002\u0002\u0002\u1b7f\u1b89\u0003",
    "\u0002\u0002\u0002\u1b80\u1b81\u0007\u0245\u0002\u0002\u1b81\u1b82\u0007",
    "\u01e2\u0002\u0002\u1b82\u1b86\u0005\u0370\u01b9\u0002\u1b83\u1b84\u0007",
    "\u0245\u0002\u0002\u1b84\u1b85\u0007\u0299\u0002\u0002\u1b85\u1b87\u0005",
    "\u0370\u01b9\u0002\u1b86\u1b83\u0003\u0002\u0002\u0002\u1b86\u1b87\u0003",
    "\u0002\u0002\u0002\u1b87\u1b89\u0003\u0002\u0002\u0002\u1b88\u1b78\u0003",
    "\u0002\u0002\u0002\u1b88\u1b80\u0003\u0002\u0002\u0002\u1b88\u1b89\u0003",
    "\u0002\u0002\u0002\u1b89\u036f\u0003\u0002\u0002\u0002\u1b8a\u1b90\t",
    "\u0004\u0002\u0002\u1b8b\u1b8c\u0007\u026d\u0002\u0002\u1b8c\u1b90\u0005",
    "\u048a\u0246\u0002\u1b8d\u1b8e\u0007\u001d\u0002\u0002\u1b8e\u1b90\u0007",
    ";\u0002\u0002\u1b8f\u1b8a\u0003\u0002\u0002\u0002\u1b8f\u1b8b\u0003",
    "\u0002\u0002\u0002\u1b8f\u1b8d\u0003\u0002\u0002\u0002\u1b90\u0371\u0003",
    "\u0002\u0002\u0002\u1b91\u1b92\u0007\u019b\u0002\u0002\u1b92\u1b97\u0005",
    "\u0374\u01bb\u0002\u1b93\u1b94\u0007\u0198\u0002\u0002\u1b94\u1b96\u0005",
    "\u0374\u01bb\u0002\u1b95\u1b93\u0003\u0002\u0002\u0002\u1b96\u1b99\u0003",
    "\u0002\u0002\u0002\u1b97\u1b95\u0003\u0002\u0002\u0002\u1b97\u1b98\u0003",
    "\u0002\u0002\u0002\u1b98\u1b9a\u0003\u0002\u0002\u0002\u1b99\u1b97\u0003",
    "\u0002\u0002\u0002\u1b9a\u1b9b\u0007\u019c\u0002\u0002\u1b9b\u0373\u0003",
    "\u0002\u0002\u0002\u1b9c\u1b9e\u0005\u0460\u0231\u0002\u1b9d\u1b9f\u0005",
    "\u0392\u01ca\u0002\u1b9e\u1b9d\u0003\u0002\u0002\u0002\u1b9e\u1b9f\u0003",
    "\u0002\u0002\u0002\u1b9f\u1ba1\u0003\u0002\u0002\u0002\u1ba0\u1ba2\u0005",
    "\u014c\u00a7\u0002\u1ba1\u1ba0\u0003\u0002\u0002\u0002\u1ba1\u1ba2\u0003",
    "\u0002\u0002\u0002\u1ba2\u0375\u0003\u0002\u0002\u0002\u1ba3\u1ba4\u0007",
    "\u019b\u0002\u0002\u1ba4\u1ba9\u0005\u0378\u01bd\u0002\u1ba5\u1ba6\u0007",
    "\u0198\u0002\u0002\u1ba6\u1ba8\u0005\u0378\u01bd\u0002\u1ba7\u1ba5\u0003",
    "\u0002\u0002\u0002\u1ba8\u1bab\u0003\u0002\u0002\u0002\u1ba9\u1ba7\u0003",
    "\u0002\u0002\u0002\u1ba9\u1baa\u0003\u0002\u0002\u0002\u1baa\u1bac\u0003",
    "\u0002\u0002\u0002\u1bab\u1ba9\u0003\u0002\u0002\u0002\u1bac\u1bad\u0007",
    "\u019c\u0002\u0002\u1bad\u0377\u0003\u0002\u0002\u0002\u1bae\u1bb4\u0005",
    "\u0374\u01bb\u0002\u1baf\u1bb1\u0005\u02fa\u017e\u0002\u1bb0\u1bb2\u0005",
    "\u014c\u00a7\u0002\u1bb1\u1bb0\u0003\u0002\u0002\u0002\u1bb1\u1bb2\u0003",
    "\u0002\u0002\u0002\u1bb2\u1bb4\u0003\u0002\u0002\u0002\u1bb3\u1bae\u0003",
    "\u0002\u0002\u0002\u1bb3\u1baf\u0003\u0002\u0002\u0002\u1bb4\u0379\u0003",
    "\u0002\u0002\u0002\u1bb5\u1bb6\u0006\u01be\u00ba\u0002\u1bb6\u1bba\u0005",
    "\u0376\u01bc\u0002\u1bb7\u1bb8\u0006\u01be\u00bb\u0002\u1bb8\u1bba\u0005",
    "\u0372\u01ba\u0002\u1bb9\u1bb5\u0003\u0002\u0002\u0002\u1bb9\u1bb7\u0003",
    "\u0002\u0002\u0002\u1bba\u037b\u0003\u0002\u0002\u0002\u1bbb\u1bbc\t",
    "l\u0002\u0002\u1bbc\u037d\u0003\u0002\u0002\u0002\u1bbd\u1bc0\u0005",
    "\u0380\u01c1\u0002\u1bbe\u1bc0\u0005\u0384\u01c3\u0002\u1bbf\u1bbd\u0003",
    "\u0002\u0002\u0002\u1bbf\u1bbe\u0003\u0002\u0002\u0002\u1bc0\u037f\u0003",
    "\u0002\u0002\u0002\u1bc1\u1bc3\u0007\u00af\u0002\u0002\u1bc2\u1bc4\u0007",
    "\u0181\u0002\u0002\u1bc3\u1bc2\u0003\u0002\u0002\u0002\u1bc3\u1bc4\u0003",
    "\u0002\u0002\u0002\u1bc4\u1bc5\u0003\u0002\u0002\u0002\u1bc5\u1bcb\u0005",
    "\u046c\u0237\u0002\u1bc6\u1bc7\u0007\r\u0002\u0002\u1bc7\u1bcb\u0005",
    "\u0480\u0241\u0002\u1bc8\u1bc9\u0006\u01c1\u00bc\u0002\u1bc9\u1bcb\u0005",
    "\u0382\u01c2\u0002\u1bca\u1bc1\u0003\u0002\u0002\u0002\u1bca\u1bc6\u0003",
    "\u0002\u0002\u0002\u1bca\u1bc8\u0003\u0002\u0002\u0002\u1bcb\u0381\u0003",
    "\u0002\u0002\u0002\u1bcc\u1bcd\tm\u0002\u0002\u1bcd\u0383\u0003\u0002",
    "\u0002\u0002\u1bce\u1bcf\tn\u0002\u0002\u1bcf\u1bd0\u0005\u037c\u01bf",
    "\u0002\u1bd0\u0385\u0003\u0002\u0002\u0002\u1bd1\u1bd6\u0005\u0380\u01c1",
    "\u0002\u1bd2\u1bd3\u0007\u02ac\u0002\u0002\u1bd3\u1bd4\u0007!\u0002",
    "\u0002\u1bd4\u1bd6\u0005\u0460\u0231\u0002\u1bd5\u1bd1\u0003\u0002\u0002",
    "\u0002\u1bd5\u1bd2\u0003\u0002\u0002\u0002\u1bd6\u0387\u0003\u0002\u0002",
    "\u0002\u1bd7\u1bd8\u0005\u0380\u01c1\u0002\u1bd8\u0389\u0003\u0002\u0002",
    "\u0002\u1bd9\u1bda\u0005\u038c\u01c7\u0002\u1bda\u1bdb\u0007\u0002\u0002",
    "\u0003\u1bdb\u038b\u0003\u0002\u0002\u0002\u1bdc\u1bde\to\u0002\u0002",
    "\u1bdd\u1bdf\u0005\u0392\u01ca\u0002\u1bde\u1bdd\u0003\u0002\u0002\u0002",
    "\u1bde\u1bdf\u0003\u0002\u0002\u0002\u1bdf\u1be1\u0003\u0002\u0002\u0002",
    "\u1be0\u1be2\u0005\u0394\u01cb\u0002\u1be1\u1be0\u0003\u0002\u0002\u0002",
    "\u1be1\u1be2\u0003\u0002\u0002\u0002\u1be2\u1c70\u0003\u0002\u0002\u0002",
    "\u1be3\u1be9\u0007\u025a\u0002\u0002\u1be4\u1be6\u0007\u01e8\u0002\u0002",
    "\u1be5\u1be7\u0007\u0252\u0002\u0002\u1be6\u1be5\u0003\u0002\u0002\u0002",
    "\u1be6\u1be7\u0003\u0002\u0002\u0002\u1be7\u1be9\u0003\u0002\u0002\u0002",
    "\u1be8\u1be3\u0003\u0002\u0002\u0002\u1be8\u1be4\u0003\u0002\u0002\u0002",
    "\u1be9\u1beb\u0003\u0002\u0002\u0002\u1bea\u1bec\u0005\u0492\u024a\u0002",
    "\u1beb\u1bea\u0003\u0002\u0002\u0002\u1beb\u1bec\u0003\u0002\u0002\u0002",
    "\u1bec\u1bee\u0003\u0002\u0002\u0002\u1bed\u1bef\u0005\u0394\u01cb\u0002",
    "\u1bee\u1bed\u0003\u0002\u0002\u0002\u1bee\u1bef\u0003\u0002\u0002\u0002",
    "\u1bef\u1c70\u0003\u0002\u0002\u0002\u1bf0\u1bf2\tp\u0002\u0002\u1bf1",
    "\u1bf3\u0005\u048e\u0248\u0002\u1bf2\u1bf1\u0003\u0002\u0002\u0002\u1bf2",
    "\u1bf3\u0003\u0002\u0002\u0002\u1bf3\u1bf5\u0003\u0002\u0002\u0002\u1bf4",
    "\u1bf6\u0005\u0394\u01cb\u0002\u1bf5\u1bf4\u0003\u0002\u0002\u0002\u1bf5",
    "\u1bf6\u0003\u0002\u0002\u0002\u1bf6\u1c70\u0003\u0002\u0002\u0002\u1bf7",
    "\u1bf9\u0007J\u0002\u0002\u1bf8\u1bfa\u0005\u0392\u01ca\u0002\u1bf9",
    "\u1bf8\u0003\u0002\u0002\u0002\u1bf9\u1bfa\u0003\u0002\u0002\u0002\u1bfa",
    "\u1c70\u0003\u0002\u0002\u0002\u1bfb\u1c70\tq\u0002\u0002\u1bfc\u1bfe",
    "\u0007\u01c4\u0002\u0002\u1bfd\u1bff\u0005\u0392\u01ca\u0002\u1bfe\u1bfd",
    "\u0003\u0002\u0002\u0002\u1bfe\u1bff\u0003\u0002\u0002\u0002\u1bff\u1c01",
    "\u0003\u0002\u0002\u0002\u1c00\u1c02\u0005\u0396\u01cc\u0002\u1c01\u1c00",
    "\u0003\u0002\u0002\u0002\u1c01\u1c02\u0003\u0002\u0002\u0002\u1c02\u1c70",
    "\u0003\u0002\u0002\u0002\u1c03\u1c05\u0005\u038e\u01c8\u0002\u1c04\u1c06",
    "\u0005\u0392\u01ca\u0002\u1c05\u1c04\u0003\u0002\u0002\u0002\u1c05\u1c06",
    "\u0003\u0002\u0002\u0002\u1c06\u1c08\u0003\u0002\u0002\u0002\u1c07\u1c09",
    "\u0007\u01b7\u0002\u0002\u1c08\u1c07\u0003\u0002\u0002\u0002\u1c08\u1c09",
    "\u0003\u0002\u0002\u0002\u1c09\u1c70\u0003\u0002\u0002\u0002\u1c0a\u1c0c",
    "\u0007\u01b7\u0002\u0002\u1c0b\u1c0d\u0005\u0392\u01ca\u0002\u1c0c\u1c0b",
    "\u0003\u0002\u0002\u0002\u1c0c\u1c0d\u0003\u0002\u0002\u0002\u1c0d\u1c70",
    "\u0003\u0002\u0002\u0002\u1c0e\u1c0f\u0007\u01c4\u0002\u0002\u1c0f\u1c12",
    "\u0007\u02a5\u0002\u0002\u1c10\u1c12\u0007\u02a3\u0002\u0002\u1c11\u1c0e",
    "\u0003\u0002\u0002\u0002\u1c11\u1c10\u0003\u0002\u0002\u0002\u1c12\u1c13",
    "\u0003\u0002\u0002\u0002\u1c13\u1c15\u0005\u0392\u01ca\u0002\u1c14\u1c16",
    "\u0005\u0396\u01cc\u0002\u1c15\u1c14\u0003\u0002\u0002\u0002\u1c15\u1c16",
    "\u0003\u0002\u0002\u0002\u1c16\u1c70\u0003\u0002\u0002\u0002\u1c17\u1c18",
    "\u0007\u00e9\u0002\u0002\u1c18\u1c22\u0007\u02a3\u0002\u0002\u1c19\u1c22",
    "\u0007\u00f3\u0002\u0002\u1c1a\u1c1b\u0007\u00ea\u0002\u0002\u1c1b\u1c22",
    "\u0007\u02a3\u0002\u0002\u1c1c\u1c1d\u0007\u00e9\u0002\u0002\u1c1d\u1c1e",
    "\u0007\u01c4\u0002\u0002\u1c1e\u1c22\u0007\u02a5\u0002\u0002\u1c1f\u1c20",
    "\u0007\u00ea\u0002\u0002\u1c20\u1c22\u0007\u02a5\u0002\u0002\u1c21\u1c17",
    "\u0003\u0002\u0002\u0002\u1c21\u1c19\u0003\u0002\u0002\u0002\u1c21\u1c1a",
    "\u0003\u0002\u0002\u0002\u1c21\u1c1c\u0003\u0002\u0002\u0002\u1c21\u1c1f",
    "\u0003\u0002\u0002\u0002\u1c22\u1c23\u0003\u0002\u0002\u0002\u1c23\u1c25",
    "\u0005\u0392\u01ca\u0002\u1c24\u1c26\u0007\u01b7\u0002\u0002\u1c25\u1c24",
    "\u0003\u0002\u0002\u0002\u1c25\u1c26\u0003\u0002\u0002\u0002\u1c26\u1c70",
    "\u0003\u0002\u0002\u0002\u1c27\u1c28\u0007\u02a2\u0002\u0002\u1c28\u1c70",
    "\u0005\u0392\u01ca\u0002\u1c29\u1c2b\u0007\u017b\u0002\u0002\u1c2a\u1c2c",
    "\u0005\u0392\u01ca\u0002\u1c2b\u1c2a\u0003\u0002\u0002\u0002\u1c2b\u1c2c",
    "\u0003\u0002\u0002\u0002\u1c2c\u1c2e\u0003\u0002\u0002\u0002\u1c2d\u1c2f",
    "\u0005\u0394\u01cb\u0002\u1c2e\u1c2d\u0003\u0002\u0002\u0002\u1c2e\u1c2f",
    "\u0003\u0002\u0002\u0002\u1c2f\u1c70\u0003\u0002\u0002\u0002\u1c30\u1c70",
    "\u0007r\u0002\u0002\u1c31\u1c33\u0007\u0162\u0002\u0002\u1c32\u1c34",
    "\u0005\u039e\u01d0\u0002\u1c33\u1c32\u0003\u0002\u0002\u0002\u1c33\u1c34",
    "\u0003\u0002\u0002\u0002\u1c34\u1c70\u0003\u0002\u0002\u0002\u1c35\u1c37",
    "\u0007\u015f\u0002\u0002\u1c36\u1c38\u0005\u039e\u01d0\u0002\u1c37\u1c36",
    "\u0003\u0002\u0002\u0002\u1c37\u1c38\u0003\u0002\u0002\u0002\u1c38\u1c70",
    "\u0003\u0002\u0002\u0002\u1c39\u1c3b\u0007q\u0002\u0002\u1c3a\u1c3c",
    "\u0005\u039e\u01d0\u0002\u1c3b\u1c3a\u0003\u0002\u0002\u0002\u1c3b\u1c3c",
    "\u0003\u0002\u0002\u0002\u1c3c\u1c70\u0003\u0002\u0002\u0002\u1c3d\u1c70",
    "\u0007\u028c\u0002\u0002\u1c3e\u1c40\u0007\u01bc\u0002\u0002\u1c3f\u1c41",
    "\u0005\u0392\u01ca\u0002\u1c40\u1c3f\u0003\u0002\u0002\u0002\u1c40\u1c41",
    "\u0003\u0002\u0002\u0002\u1c41\u1c70\u0003\u0002\u0002\u0002\u1c42\u1c70",
    "\tr\u0002\u0002\u1c43\u1c44\u0007\u022a\u0002\u0002\u1c44\u1c70\u0007",
    "\u02a2\u0002\u0002\u1c45\u1c49\u0007\u022a\u0002\u0002\u1c46\u1c47\u0007",
    "\u01c4\u0002\u0002\u1c47\u1c4a\u0007\u02a5\u0002\u0002\u1c48\u1c4a\u0007",
    "\u02a3\u0002\u0002\u1c49\u1c46\u0003\u0002\u0002\u0002\u1c49\u1c48\u0003",
    "\u0002\u0002\u0002\u1c49\u1c4a\u0003\u0002\u0002\u0002\u1c4a\u1c4c\u0003",
    "\u0002\u0002\u0002\u1c4b\u1c4d\u0005\u0396\u01cc\u0002\u1c4c\u1c4b\u0003",
    "\u0002\u0002\u0002\u1c4c\u1c4d\u0003\u0002\u0002\u0002\u1c4d\u1c70\u0003",
    "\u0002\u0002\u0002\u1c4e\u1c50\u0007\u028e\u0002\u0002\u1c4f\u1c51\u0005",
    "\u0396\u01cc\u0002\u1c50\u1c4f\u0003\u0002\u0002\u0002\u1c50\u1c51\u0003",
    "\u0002\u0002\u0002\u1c51\u1c70\u0003\u0002\u0002\u0002\u1c52\u1c54\u0007",
    "\u015b\u0002\u0002\u1c53\u1c55\u0005\u0392\u01ca\u0002\u1c54\u1c53\u0003",
    "\u0002\u0002\u0002\u1c54\u1c55\u0003\u0002\u0002\u0002\u1c55\u1c57\u0003",
    "\u0002\u0002\u0002\u1c56\u1c58\u0005\u0396\u01cc\u0002\u1c57\u1c56\u0003",
    "\u0002\u0002\u0002\u1c57\u1c58\u0003\u0002\u0002\u0002\u1c58\u1c70\u0003",
    "\u0002\u0002\u0002\u1c59\u1c5b\u0007\u0234\u0002\u0002\u1c5a\u1c5c\u0005",
    "\u0396\u01cc\u0002\u1c5b\u1c5a\u0003\u0002\u0002\u0002\u1c5b\u1c5c\u0003",
    "\u0002\u0002\u0002\u1c5c\u1c70\u0003\u0002\u0002\u0002\u1c5d\u1c5f\u0007",
    "\u0228\u0002\u0002\u1c5e\u1c60\u0005\u0396\u01cc\u0002\u1c5f\u1c5e\u0003",
    "\u0002\u0002\u0002\u1c5f\u1c60\u0003\u0002\u0002\u0002\u1c60\u1c70\u0003",
    "\u0002\u0002\u0002\u1c61\u1c62\u0007\u0081\u0002\u0002\u1c62\u1c64\u0005",
    "\u0478\u023d\u0002\u1c63\u1c65\u0005\u0396\u01cc\u0002\u1c64\u1c63\u0003",
    "\u0002\u0002\u0002\u1c64\u1c65\u0003\u0002\u0002\u0002\u1c65\u1c70\u0003",
    "\u0002\u0002\u0002\u1c66\u1c67\u0007\u026d\u0002\u0002\u1c67\u1c69\u0005",
    "\u0478\u023d\u0002\u1c68\u1c6a\u0005\u0396\u01cc\u0002\u1c69\u1c68\u0003",
    "\u0002\u0002\u0002\u1c69\u1c6a\u0003\u0002\u0002\u0002\u1c6a\u1c70\u0003",
    "\u0002\u0002\u0002\u1c6b\u1c70\u0007\u0134\u0002\u0002\u1c6c\u1c6d\u0006",
    "\u01c7\u00bd\u0002\u1c6d\u1c70\u0007\u00ae\u0002\u0002\u1c6e\u1c70\t",
    "s\u0002\u0002\u1c6f\u1bdc\u0003\u0002\u0002\u0002\u1c6f\u1be8\u0003",
    "\u0002\u0002\u0002\u1c6f\u1bf0\u0003\u0002\u0002\u0002\u1c6f\u1bf7\u0003",
    "\u0002\u0002\u0002\u1c6f\u1bfb\u0003\u0002\u0002\u0002\u1c6f\u1bfc\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c03\u0003\u0002\u0002\u0002\u1c6f\u1c0a\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c11\u0003\u0002\u0002\u0002\u1c6f\u1c21\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c27\u0003\u0002\u0002\u0002\u1c6f\u1c29\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c30\u0003\u0002\u0002\u0002\u1c6f\u1c31\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c35\u0003\u0002\u0002\u0002\u1c6f\u1c39\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c3d\u0003\u0002\u0002\u0002\u1c6f\u1c3e\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c42\u0003\u0002\u0002\u0002\u1c6f\u1c43\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c45\u0003\u0002\u0002\u0002\u1c6f\u1c4e\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c52\u0003\u0002\u0002\u0002\u1c6f\u1c59\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c5d\u0003\u0002\u0002\u0002\u1c6f\u1c61\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c66\u0003\u0002\u0002\u0002\u1c6f\u1c6b\u0003",
    "\u0002\u0002\u0002\u1c6f\u1c6c\u0003\u0002\u0002\u0002\u1c6f\u1c6e\u0003",
    "\u0002\u0002\u0002\u1c70\u038d\u0003\u0002\u0002\u0002\u1c71\u1c75\u0007",
    "\u00ea\u0002\u0002\u1c72\u1c73\u0007\u00e9\u0002\u0002\u1c73\u1c75\u0007",
    "\u01c4\u0002\u0002\u1c74\u1c71\u0003\u0002\u0002\u0002\u1c74\u1c72\u0003",
    "\u0002\u0002\u0002\u1c75\u038f\u0003\u0002\u0002\u0002\u1c76\u1c7c\u0007",
    "\u025a\u0002\u0002\u1c77\u1c79\u0007\u01e8\u0002\u0002\u1c78\u1c7a\u0007",
    "\u0252\u0002\u0002\u1c79\u1c78\u0003\u0002\u0002\u0002\u1c79\u1c7a\u0003",
    "\u0002\u0002\u0002\u1c7a\u1c7c\u0003\u0002\u0002\u0002\u1c7b\u1c76\u0003",
    "\u0002\u0002\u0002\u1c7b\u1c77\u0003\u0002\u0002\u0002\u1c7c\u0391\u0003",
    "\u0002\u0002\u0002\u1c7d\u1c80\u0007\u019b\u0002\u0002\u1c7e\u1c81\u0005",
    "\u0472\u023a\u0002\u1c7f\u1c81\u0007\u01a9\u0002\u0002\u1c80\u1c7e\u0003",
    "\u0002\u0002\u0002\u1c80\u1c7f\u0003\u0002\u0002\u0002\u1c81\u1c82\u0003",
    "\u0002\u0002\u0002\u1c82\u1c83\u0007\u019c\u0002\u0002\u1c83\u0393\u0003",
    "\u0002\u0002\u0002\u1c84\u1c86\tt\u0002\u0002\u1c85\u1c84\u0003\u0002",
    "\u0002\u0002\u1c86\u1c87\u0003\u0002\u0002\u0002\u1c87\u1c85\u0003\u0002",
    "\u0002\u0002\u1c87\u1c88\u0003\u0002\u0002\u0002\u1c88\u0395\u0003\u0002",
    "\u0002\u0002\u1c89\u1c98\u0005\u0398\u01cd\u0002\u1c8a\u1c98\u0005\u039a",
    "\u01ce\u0002\u1c8b\u1c98\u0007\b\u0002\u0002\u1c8c\u1c8d\u0005\u02ee",
    "\u0178\u0002\u1c8d\u1c8f\u0005\u03a0\u01d1\u0002\u1c8e\u1c90\u0007\u01b7",
    "\u0002\u0002\u1c8f\u1c8e\u0003\u0002\u0002\u0002\u1c8f\u1c90\u0003\u0002",
    "\u0002\u0002\u1c90\u1c98\u0003\u0002\u0002\u0002\u1c91\u1c95\u0007\u01b7",
    "\u0002\u0002\u1c92\u1c93\u0005\u02ee\u0178\u0002\u1c93\u1c94\u0005\u03a0",
    "\u01d1\u0002\u1c94\u1c96\u0003\u0002\u0002\u0002\u1c95\u1c92\u0003\u0002",
    "\u0002\u0002\u1c95\u1c96\u0003\u0002\u0002\u0002\u1c96\u1c98\u0003\u0002",
    "\u0002\u0002\u1c97\u1c89\u0003\u0002\u0002\u0002\u1c97\u1c8a\u0003\u0002",
    "\u0002\u0002\u1c97\u1c8b\u0003\u0002\u0002\u0002\u1c97\u1c8c\u0003\u0002",
    "\u0002\u0002\u1c97\u1c91\u0003\u0002\u0002\u0002\u1c98\u0397\u0003\u0002",
    "\u0002\u0002\u1c99\u1c9b\u0007\u0004\u0002\u0002\u1c9a\u1c9c\u0007\u01b7",
    "\u0002\u0002\u1c9b\u1c9a\u0003\u0002\u0002\u0002\u1c9b\u1c9c\u0003\u0002",
    "\u0002\u0002\u1c9c\u1ca0\u0003\u0002\u0002\u0002\u1c9d\u1c9e\u0007\u01b7",
    "\u0002\u0002\u1c9e\u1ca0\u0007\u0004\u0002\u0002\u1c9f\u1c99\u0003\u0002",
    "\u0002\u0002\u1c9f\u1c9d\u0003\u0002\u0002\u0002\u1ca0\u0399\u0003\u0002",
    "\u0002\u0002\u1ca1\u1ca3\u00075\u0002\u0002\u1ca2\u1ca4\u0007\u01b7",
    "\u0002\u0002\u1ca3\u1ca2\u0003\u0002\u0002\u0002\u1ca3\u1ca4\u0003\u0002",
    "\u0002\u0002\u1ca4\u1ca8\u0003\u0002\u0002\u0002\u1ca5\u1ca6\u0007\u01b7",
    "\u0002\u0002\u1ca6\u1ca8\u00075\u0002\u0002\u1ca7\u1ca1\u0003\u0002",
    "\u0002\u0002\u1ca7\u1ca5\u0003\u0002\u0002\u0002\u1ca8\u039b\u0003\u0002",
    "\u0002\u0002\u1ca9\u1caa\u0007\u019b\u0002\u0002\u1caa\u1cab\u0005\u046e",
    "\u0238\u0002\u1cab\u1cac\u0007\u019c\u0002\u0002\u1cac\u039d\u0003\u0002",
    "\u0002\u0002\u1cad\u1cae\u0007\u019b\u0002\u0002\u1cae\u1caf\u0007\u017e",
    "\u0002\u0002\u1caf\u1cb0\u0007\u019c\u0002\u0002\u1cb0\u039f\u0003\u0002",
    "\u0002\u0002\u1cb1\u1cb6\u0005\u0494\u024b\u0002\u1cb2\u1cb6\u0007\u01b7",
    "\u0002\u0002\u1cb3\u1cb4\u0006\u01d1\u00be\u0002\u1cb4\u1cb6\u0007\u01e0",
    "\u0002\u0002\u1cb5\u1cb1\u0003\u0002\u0002\u0002\u1cb5\u1cb2\u0003\u0002",
    "\u0002\u0002\u1cb5\u1cb3\u0003\u0002\u0002\u0002\u1cb6\u03a1\u0003\u0002",
    "\u0002\u0002\u1cb7\u1cbd\u0005\u0494\u024b\u0002\u1cb8\u1cb9\u0006\u01d2",
    "\u00bf\u0002\u1cb9\u1cbd\u0007\u01e0\u0002\u0002\u1cba\u1cbb\u0006\u01d2",
    "\u00c0\u0002\u1cbb\u1cbd\u0007\u01b7\u0002\u0002\u1cbc\u1cb7\u0003\u0002",
    "\u0002\u0002\u1cbc\u1cb8\u0003\u0002\u0002\u0002\u1cbc\u1cba\u0003\u0002",
    "\u0002\u0002\u1cbd\u03a3\u0003\u0002\u0002\u0002\u1cbe\u1cc5\u0005\u03a8",
    "\u01d5\u0002\u1cbf\u1cc1\u0007\u0198\u0002\u0002\u1cc0\u1cbf\u0003\u0002",
    "\u0002\u0002\u1cc0\u1cc1\u0003\u0002\u0002\u0002\u1cc1\u1cc2\u0003\u0002",
    "\u0002\u0002\u1cc2\u1cc4\u0005\u03a8\u01d5\u0002\u1cc3\u1cc0\u0003\u0002",
    "\u0002\u0002\u1cc4\u1cc7\u0003\u0002\u0002\u0002\u1cc5\u1cc3\u0003\u0002",
    "\u0002\u0002\u1cc5\u1cc6\u0003\u0002\u0002\u0002\u1cc6\u03a5\u0003\u0002",
    "\u0002\u0002\u1cc7\u1cc5\u0003\u0002\u0002\u0002\u1cc8\u1cca\u0005\u03a8",
    "\u01d5\u0002\u1cc9\u1cc8\u0003\u0002\u0002\u0002\u1cca\u1ccb\u0003\u0002",
    "\u0002\u0002\u1ccb\u1cc9\u0003\u0002\u0002\u0002\u1ccb\u1ccc\u0003\u0002",
    "\u0002\u0002\u1ccc\u03a7\u0003\u0002\u0002\u0002\u1ccd\u1ccf\u0007\u0082",
    "\u0002\u0002\u1cce\u1cd0\u0007\u0181\u0002\u0002\u1ccf\u1cce\u0003\u0002",
    "\u0002\u0002\u1ccf\u1cd0\u0003\u0002\u0002\u0002\u1cd0\u1cd1\u0003\u0002",
    "\u0002\u0002\u1cd1\u1d4f\u0005\u043e\u0220\u0002\u1cd2\u1cd3\u0006\u01d5",
    "\u00c1\u0002\u1cd3\u1cd5\u0007\u02f1\u0002\u0002\u1cd4\u1cd6\u0005\u049e",
    "\u0250\u0002\u1cd5\u1cd4\u0003\u0002\u0002\u0002\u1cd5\u1cd6\u0003\u0002",
    "\u0002\u0002\u1cd6\u1cd9\u0003\u0002\u0002\u0002\u1cd7\u1cda\u0007\u0242",
    "\u0002\u0002\u1cd8\u1cda\u0005\u0494\u024b\u0002\u1cd9\u1cd7\u0003\u0002",
    "\u0002\u0002\u1cd9\u1cd8\u0003\u0002\u0002\u0002\u1cda\u1d4f\u0003\u0002",
    "\u0002\u0002\u1cdb\u1cdd\u0007\u00ba\u0002\u0002\u1cdc\u1cde\u0007\u0181",
    "\u0002\u0002\u1cdd\u1cdc\u0003\u0002\u0002\u0002\u1cdd\u1cde\u0003\u0002",
    "\u0002\u0002\u1cde\u1cdf\u0003\u0002\u0002\u0002\u1cdf\u1d4f\u0005\u0470",
    "\u0239\u0002\u1ce0\u1ce2\u0007\u00de\u0002\u0002\u1ce1\u1ce3\u0007\u0181",
    "\u0002\u0002\u1ce2\u1ce1\u0003\u0002\u0002\u0002\u1ce2\u1ce3\u0003\u0002",
    "\u0002\u0002\u1ce3\u1ce4\u0003\u0002\u0002\u0002\u1ce4\u1d4f\u0005\u0470",
    "\u0239\u0002\u1ce5\u1ce7\u0007G\u0002\u0002\u1ce6\u1ce8\u0007\u0181",
    "\u0002\u0002\u1ce7\u1ce6\u0003\u0002\u0002\u0002\u1ce7\u1ce8\u0003\u0002",
    "\u0002\u0002\u1ce8\u1ce9\u0003\u0002\u0002\u0002\u1ce9\u1d4f\u0005\u046c",
    "\u0237\u0002\u1cea\u1cec\u0007\u00fd\u0002\u0002\u1ceb\u1ced\u0007\u0181",
    "\u0002\u0002\u1cec\u1ceb\u0003\u0002\u0002\u0002\u1cec\u1ced\u0003\u0002",
    "\u0002\u0002\u1ced\u1cee\u0003\u0002\u0002\u0002\u1cee\u1d4f\u0005\u047a",
    "\u023e\u0002\u1cef\u1cf1\u0007\r\u0002\u0002\u1cf0\u1cf2\u0007\u0181",
    "\u0002\u0002\u1cf1\u1cf0\u0003\u0002\u0002\u0002\u1cf1\u1cf2\u0003\u0002",
    "\u0002\u0002\u1cf2\u1cf3\u0003\u0002\u0002\u0002\u1cf3\u1d4f\u0005\u047a",
    "\u023e\u0002\u1cf4\u1cf5\u0006\u01d5\u00c2\u0002\u1cf5\u1cf7\u0007a",
    "\u0002\u0002\u1cf6\u1cf8\u0007\u0181\u0002\u0002\u1cf7\u1cf6\u0003\u0002",
    "\u0002\u0002\u1cf7\u1cf8\u0003\u0002\u0002\u0002\u1cf8\u1cf9\u0003\u0002",
    "\u0002\u0002\u1cf9\u1d4f\u0005\u047c\u023f\u0002\u1cfa\u1cfb\u0006\u01d5",
    "\u00c3\u0002\u1cfb\u1cfd\u0007b\u0002\u0002\u1cfc\u1cfe\u0007\u0181",
    "\u0002\u0002\u1cfd\u1cfc\u0003\u0002\u0002\u0002\u1cfd\u1cfe\u0003\u0002",
    "\u0002\u0002\u1cfe\u1cff\u0003\u0002\u0002\u0002\u1cff\u1d4f\u0005\u047c",
    "\u023f\u0002\u1d00\u1d02\u0007E\u0002\u0002\u1d01\u1d03\u0007\u0181",
    "\u0002\u0002\u1d02\u1d01\u0003\u0002\u0002\u0002\u1d02\u1d03\u0003\u0002",
    "\u0002\u0002\u1d03\u1d04\u0003\u0002\u0002\u0002\u1d04\u1d4f\u0005\u0470",
    "\u0239\u0002\u1d05\u1d07\u0007\u00f8\u0002\u0002\u1d06\u1d08\u0007\u0181",
    "\u0002\u0002\u1d07\u1d06\u0003\u0002\u0002\u0002\u1d07\u1d08\u0003\u0002",
    "\u0002\u0002\u1d08\u1d09\u0003\u0002\u0002\u0002\u1d09\u1d4f\u0005\u03aa",
    "\u01d6\u0002\u1d0a\u1d0c\tu\u0002\u0002\u1d0b\u1d0d\u0007\u0181\u0002",
    "\u0002\u1d0c\u1d0b\u0003\u0002\u0002\u0002\u1d0c\u1d0d\u0003\u0002\u0002",
    "\u0002\u1d0d\u1d0e\u0003\u0002\u0002\u0002\u1d0e\u1d4f\u0005\u03aa\u01d6",
    "\u0002\u1d0f\u1d11\tv\u0002\u0002\u1d10\u1d12\u0007\u0181\u0002\u0002",
    "\u1d11\u1d10\u0003\u0002\u0002\u0002\u1d11\u1d12\u0003\u0002\u0002\u0002",
    "\u1d12\u1d13\u0003\u0002\u0002\u0002\u1d13\u1d4f\u0005\u046c\u0237\u0002",
    "\u1d14\u1d16\u0007v\u0002\u0002\u1d15\u1d17\u0007\u0181\u0002\u0002",
    "\u1d16\u1d15\u0003\u0002\u0002\u0002\u1d16\u1d17\u0003\u0002\u0002\u0002",
    "\u1d17\u1d18\u0003\u0002\u0002\u0002\u1d18\u1d4f\u0005\u046c\u0237\u0002",
    "\u1d19\u1d1b\u0007\u012e\u0002\u0002\u1d1a\u1d1c\u0007\u0181\u0002\u0002",
    "\u1d1b\u1d1a\u0003\u0002\u0002\u0002\u1d1b\u1d1c\u0003\u0002\u0002\u0002",
    "\u1d1c\u1d1d\u0003\u0002\u0002\u0002\u1d1d\u1d4f\tw\u0002\u0002\u1d1e",
    "\u1d20\u0007\u0295\u0002\u0002\u1d1f\u1d21\u0007\u0181\u0002\u0002\u1d20",
    "\u1d1f\u0003\u0002\u0002\u0002\u1d20\u1d21\u0003\u0002\u0002\u0002\u1d21",
    "\u1d22\u0003\u0002\u0002\u0002\u1d22\u1d23\u0007\u019b\u0002\u0002\u1d23",
    "\u1d24\u0005\u0448\u0225\u0002\u1d24\u1d25\u0007\u019c\u0002\u0002\u1d25",
    "\u1d4f\u0003\u0002\u0002\u0002\u1d26\u1d4f\u0005\u03b0\u01d9\u0002\u1d27",
    "\u1d4f\u0005\u03ac\u01d7\u0002\u1d28\u1d2a\u0007\u00ad\u0002\u0002\u1d29",
    "\u1d2b\u0007\u0181\u0002\u0002\u1d2a\u1d29\u0003\u0002\u0002\u0002\u1d2a",
    "\u1d2b\u0003\u0002\u0002\u0002\u1d2b\u1d2c\u0003\u0002\u0002\u0002\u1d2c",
    "\u1d4f\tx\u0002\u0002\u1d2d\u1d2e\u0007o\u0002\u0002\u1d2e\u1d30\u0007",
    "y\u0002\u0002\u1d2f\u1d31\u0007\u0181\u0002\u0002\u1d30\u1d2f\u0003",
    "\u0002\u0002\u0002\u1d30\u1d31\u0003\u0002\u0002\u0002\u1d31\u1d32\u0003",
    "\u0002\u0002\u0002\u1d32\u1d4f\u0005\u047c\u023f\u0002\u1d33\u1d34\u0007",
    "\u020b\u0002\u0002\u1d34\u1d36\u0007y\u0002\u0002\u1d35\u1d37\u0007",
    "\u0181\u0002\u0002\u1d36\u1d35\u0003\u0002\u0002\u0002\u1d36\u1d37\u0003",
    "\u0002\u0002\u0002\u1d37\u1d38\u0003\u0002\u0002\u0002\u1d38\u1d4f\u0005",
    "\u047c\u023f\u0002\u1d39\u1d3f\u0007\u0158\u0002\u0002\u1d3a\u1d3c\u0006",
    "\u01d5\u00c4\u0002\u1d3b\u1d3d\u0007\u0181\u0002\u0002\u1d3c\u1d3b\u0003",
    "\u0002\u0002\u0002\u1d3c\u1d3d\u0003\u0002\u0002\u0002\u1d3d\u1d40\u0003",
    "\u0002\u0002\u0002\u1d3e\u1d40\u0003\u0002\u0002\u0002\u1d3f\u1d3a\u0003",
    "\u0002\u0002\u0002\u1d3f\u1d3e\u0003\u0002\u0002\u0002\u1d40\u1d41\u0003",
    "\u0002\u0002\u0002\u1d41\u1d4f\u0005\u0460\u0231\u0002\u1d42\u1d43\u0007",
    "\u014a\u0002\u0002\u1d43\u1d4f\ty\u0002\u0002\u1d44\u1d46\u0007d\u0002",
    "\u0002\u1d45\u1d47\u0007\u0181\u0002\u0002\u1d46\u1d45\u0003\u0002\u0002",
    "\u0002\u1d46\u1d47\u0003\u0002\u0002\u0002\u1d47\u1d48\u0003\u0002\u0002",
    "\u0002\u1d48\u1d4f\u0005\u047c\u023f\u0002\u1d49\u1d4b\u0007\u00af\u0002",
    "\u0002\u1d4a\u1d4c\u0007\u0181\u0002\u0002\u1d4b\u1d4a\u0003\u0002\u0002",
    "\u0002\u1d4b\u1d4c\u0003\u0002\u0002\u0002\u1d4c\u1d4d\u0003\u0002\u0002",
    "\u0002\u1d4d\u1d4f\u0005\u046c\u0237\u0002\u1d4e\u1ccd\u0003\u0002\u0002",
    "\u0002\u1d4e\u1cd2\u0003\u0002\u0002\u0002\u1d4e\u1cdb\u0003\u0002\u0002",
    "\u0002\u1d4e\u1ce0\u0003\u0002\u0002\u0002\u1d4e\u1ce5\u0003\u0002\u0002",
    "\u0002\u1d4e\u1cea\u0003\u0002\u0002\u0002\u1d4e\u1cef\u0003\u0002\u0002",
    "\u0002\u1d4e\u1cf4\u0003\u0002\u0002\u0002\u1d4e\u1cfa\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d00\u0003\u0002\u0002\u0002\u1d4e\u1d05\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d0a\u0003\u0002\u0002\u0002\u1d4e\u1d0f\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d14\u0003\u0002\u0002\u0002\u1d4e\u1d19\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d1e\u0003\u0002\u0002\u0002\u1d4e\u1d26\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d27\u0003\u0002\u0002\u0002\u1d4e\u1d28\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d2d\u0003\u0002\u0002\u0002\u1d4e\u1d33\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d39\u0003\u0002\u0002\u0002\u1d4e\u1d42\u0003\u0002\u0002",
    "\u0002\u1d4e\u1d44\u0003\u0002\u0002\u0002\u1d4e\u1d49\u0003\u0002\u0002",
    "\u0002\u1d4f\u03a9\u0003\u0002\u0002\u0002\u1d50\u1d53\u0005\u046c\u0237",
    "\u0002\u1d51\u1d53\u0007\u01e0\u0002\u0002\u1d52\u1d50\u0003\u0002\u0002",
    "\u0002\u1d52\u1d51\u0003\u0002\u0002\u0002\u1d53\u03ab\u0003\u0002\u0002",
    "\u0002\u1d54\u1d56\u0007\u01e0\u0002\u0002\u1d55\u1d54\u0003\u0002\u0002",
    "\u0002\u1d55\u1d56\u0003\u0002\u0002\u0002\u1d56\u1d57\u0003\u0002\u0002",
    "\u0002\u1d57\u1d59\u0007\u01c6\u0002\u0002\u1d58\u1d5a\u0007\u0181\u0002",
    "\u0002\u1d59\u1d58\u0003\u0002\u0002\u0002\u1d59\u1d5a\u0003\u0002\u0002",
    "\u0002\u1d5a\u1d5b\u0003\u0002\u0002\u0002\u1d5b\u1d5c\u0005\u03a2\u01d2",
    "\u0002\u1d5c\u03ad\u0003\u0002\u0002\u0002\u1d5d\u1d5f\u0007\u01e0\u0002",
    "\u0002\u1d5e\u1d5d\u0003\u0002\u0002\u0002\u1d5e\u1d5f\u0003\u0002\u0002",
    "\u0002\u1d5f\u1d60\u0003\u0002\u0002\u0002\u1d60\u1d62\u0007b\u0002",
    "\u0002\u1d61\u1d63\u0007\u0181\u0002\u0002\u1d62\u1d61\u0003\u0002\u0002",
    "\u0002\u1d62\u1d63\u0003\u0002\u0002\u0002\u1d63\u1d64\u0003\u0002\u0002",
    "\u0002\u1d64\u1d65\u0005\u047a\u023e\u0002\u1d65\u03af\u0003\u0002\u0002",
    "\u0002\u1d66\u1d68\u0007\u01e0\u0002\u0002\u1d67\u1d66\u0003\u0002\u0002",
    "\u0002\u1d67\u1d68\u0003\u0002\u0002\u0002\u1d68\u1d69\u0003\u0002\u0002",
    "\u0002\u1d69\u1d6b\u0005\u02ee\u0178\u0002\u1d6a\u1d6c\u0007\u0181\u0002",
    "\u0002\u1d6b\u1d6a\u0003\u0002\u0002\u0002\u1d6b\u1d6c\u0003\u0002\u0002",
    "\u0002\u1d6c\u1d6d\u0003\u0002\u0002\u0002\u1d6d\u1d6e\u0005\u03a0\u01d1",
    "\u0002\u1d6e\u03b1\u0003\u0002\u0002\u0002\u1d6f\u1d70\u0007\"\u0002",
    "\u0002\u1d70\u1d71\u0007\u01be\u0002\u0002\u1d71\u1d74\u0005\u03b4\u01db",
    "\u0002\u1d72\u1d73\u0007\u00fc\u0002\u0002\u1d73\u1d75\u0005\u046e\u0238",
    "\u0002\u1d74\u1d72\u0003\u0002\u0002\u0002\u1d74\u1d75\u0003\u0002\u0002",
    "\u0002\u1d75\u1d77\u0003\u0002\u0002\u0002\u1d76\u1d78\u0005\u03b6\u01dc",
    "\u0002\u1d77\u1d76\u0003\u0002\u0002\u0002\u1d77\u1d78\u0003\u0002\u0002",
    "\u0002\u1d78\u1d7a\u0003\u0002\u0002\u0002\u1d79\u1d7b\u0005\u03ba\u01de",
    "\u0002\u1d7a\u1d79\u0003\u0002\u0002\u0002\u1d7a\u1d7b\u0003\u0002\u0002",
    "\u0002\u1d7b\u03b3\u0003\u0002\u0002\u0002\u1d7c\u1d7e\u0007\u0222\u0002",
    "\u0002\u1d7d\u1d7c\u0003\u0002\u0002\u0002\u1d7d\u1d7e\u0003\u0002\u0002",
    "\u0002\u1d7e\u1d7f\u0003\u0002\u0002\u0002\u1d7f\u1d81\u0007\u021b\u0002",
    "\u0002\u1d80\u1d82\u0005\u03b8\u01dd\u0002\u1d81\u1d80\u0003\u0002\u0002",
    "\u0002\u1d81\u1d82\u0003\u0002\u0002\u0002\u1d82\u1d83\u0003\u0002\u0002",
    "\u0002\u1d83\u1d85\u0007\u019b\u0002\u0002\u1d84\u1d86\u0005\u0462\u0232",
    "\u0002\u1d85\u1d84\u0003\u0002\u0002\u0002\u1d85\u1d86\u0003\u0002\u0002",
    "\u0002\u1d86\u1d87\u0003\u0002\u0002\u0002\u1d87\u1d9e\u0007\u019c\u0002",
    "\u0002\u1d88\u1d8a\u0007\u0222\u0002\u0002\u1d89\u1d88\u0003\u0002\u0002",
    "\u0002\u1d89\u1d8a\u0003\u0002\u0002\u0002\u1d8a\u1d8b\u0003\u0002\u0002",
    "\u0002\u1d8b\u1d8c\u0007\u009e\u0002\u0002\u1d8c\u1d8d\u0007\u019b\u0002",
    "\u0002\u1d8d\u1d8e\u0005\u02a6\u0154\u0002\u1d8e\u1d8f\u0007\u019c\u0002",
    "\u0002\u1d8f\u1d9e\u0003\u0002\u0002\u0002\u1d90\u1d9b\tz\u0002\u0002",
    "\u1d91\u1d92\u0007\u019b\u0002\u0002\u1d92\u1d93\u0005\u02a6\u0154\u0002",
    "\u1d93\u1d94\u0007\u019c\u0002\u0002\u1d94\u1d9c\u0003\u0002\u0002\u0002",
    "\u1d95\u1d96\u0007\\\u0002\u0002\u1d96\u1d98\u0007\u019b\u0002\u0002",
    "\u1d97\u1d99\u0005\u0462\u0232\u0002\u1d98\u1d97\u0003\u0002\u0002\u0002",
    "\u1d98\u1d99\u0003\u0002\u0002\u0002\u1d99\u1d9a\u0003\u0002\u0002\u0002",
    "\u1d9a\u1d9c\u0007\u019c\u0002\u0002\u1d9b\u1d91\u0003\u0002\u0002\u0002",
    "\u1d9b\u1d95\u0003\u0002\u0002\u0002\u1d9c\u1d9e\u0003\u0002\u0002\u0002",
    "\u1d9d\u1d7d\u0003\u0002\u0002\u0002\u1d9d\u1d89\u0003\u0002\u0002\u0002",
    "\u1d9d\u1d90\u0003\u0002\u0002\u0002\u1d9e\u03b5\u0003\u0002\u0002\u0002",
    "\u1d9f\u1da0\u0007\u014f\u0002\u0002\u1da0\u1da2\u0007\u01be\u0002\u0002",
    "\u1da1\u1da3\u0007\u0222\u0002\u0002\u1da2\u1da1\u0003\u0002\u0002\u0002",
    "\u1da2\u1da3\u0003\u0002\u0002\u0002\u1da3\u1dae\u0003\u0002\u0002\u0002",
    "\u1da4\u1da5\u0007\u009e\u0002\u0002\u1da5\u1da6\u0007\u019b\u0002\u0002",
    "\u1da6\u1da7\u0005\u02a6\u0154\u0002\u1da7\u1da8\u0007\u019c\u0002\u0002",
    "\u1da8\u1daf\u0003\u0002\u0002\u0002\u1da9\u1dab\u0007\u021b\u0002\u0002",
    "\u1daa\u1dac\u0005\u03b8\u01dd\u0002\u1dab\u1daa\u0003\u0002\u0002\u0002",
    "\u1dab\u1dac\u0003\u0002\u0002\u0002\u1dac\u1dad\u0003\u0002\u0002\u0002",
    "\u1dad\u1daf\u0005\u0464\u0233\u0002\u1dae\u1da4\u0003\u0002\u0002\u0002",
    "\u1dae\u1da9\u0003\u0002\u0002\u0002\u1daf\u1db2\u0003\u0002\u0002\u0002",
    "\u1db0\u1db1\u0007\u0150\u0002\u0002\u1db1\u1db3\u0005\u046e\u0238\u0002",
    "\u1db2\u1db0\u0003\u0002\u0002\u0002\u1db2\u1db3\u0003\u0002\u0002\u0002",
    "\u1db3\u03b7\u0003\u0002\u0002\u0002\u1db4\u1db5\u0006\u01dd\u00c5\u0002",
    "\u1db5\u1db6\u0007@\u0002\u0002\u1db6\u1db7\u0007\u0181\u0002\u0002",
    "\u1db7\u1db8\u0005\u046e\u0238\u0002\u1db8\u03b9\u0003\u0002\u0002\u0002",
    "\u1db9\u1dba\u0007\u019b\u0002\u0002\u1dba\u1dbf\u0005\u03bc\u01df\u0002",
    "\u1dbb\u1dbc\u0007\u0198\u0002\u0002\u1dbc\u1dbe\u0005\u03bc\u01df\u0002",
    "\u1dbd\u1dbb\u0003\u0002\u0002\u0002\u1dbe\u1dc1\u0003\u0002\u0002\u0002",
    "\u1dbf\u1dbd\u0003\u0002\u0002\u0002\u1dbf\u1dc0\u0003\u0002\u0002\u0002",
    "\u1dc0\u1dc2\u0003\u0002\u0002\u0002\u1dc1\u1dbf\u0003\u0002\u0002\u0002",
    "\u1dc2\u1dc3\u0007\u019c\u0002\u0002\u1dc3\u03bb\u0003\u0002\u0002\u0002",
    "\u1dc4\u1dc5\u0007\"\u0002\u0002\u1dc5\u1dd0\u0005\u0460\u0231\u0002",
    "\u1dc6\u1dc7\u0007\u02a1\u0002\u0002\u1dc7\u1dc8\u0007\u00b2\u0002\u0002",
    "\u1dc8\u1dcb\u0007\u015c\u0002\u0002\u1dc9\u1dcc\u0005\u03c4\u01e3\u0002",
    "\u1dca\u1dcc\u0007\u0231\u0002\u0002\u1dcb\u1dc9\u0003\u0002\u0002\u0002",
    "\u1dcb\u1dca\u0003\u0002\u0002\u0002\u1dcc\u1dd1\u0003\u0002\u0002\u0002",
    "\u1dcd\u1dce\u0007\u02a1\u0002\u0002\u1dce\u1dcf\u0007\u0214\u0002\u0002",
    "\u1dcf\u1dd1\u0005\u03be\u01e0\u0002\u1dd0\u1dc6\u0003\u0002\u0002\u0002",
    "\u1dd0\u1dcd\u0003\u0002\u0002\u0002\u1dd0\u1dd1\u0003\u0002\u0002\u0002",
    "\u1dd1\u1dd5\u0003\u0002\u0002\u0002\u1dd2\u1dd4\u0005\u03c0\u01e1\u0002",
    "\u1dd3\u1dd2\u0003\u0002\u0002\u0002\u1dd4\u1dd7\u0003\u0002\u0002\u0002",
    "\u1dd5\u1dd3\u0003\u0002\u0002\u0002\u1dd5\u1dd6\u0003\u0002\u0002\u0002",
    "\u1dd6\u1de3\u0003\u0002\u0002\u0002\u1dd7\u1dd5\u0003\u0002\u0002\u0002",
    "\u1dd8\u1dd9\u0007\u019b\u0002\u0002\u1dd9\u1dde\u0005\u03c2\u01e2\u0002",
    "\u1dda\u1ddb\u0007\u0198\u0002\u0002\u1ddb\u1ddd\u0005\u03c2\u01e2\u0002",
    "\u1ddc\u1dda\u0003\u0002\u0002\u0002\u1ddd\u1de0\u0003\u0002\u0002\u0002",
    "\u1dde\u1ddc\u0003\u0002\u0002\u0002\u1dde\u1ddf\u0003\u0002\u0002\u0002",
    "\u1ddf\u1de1\u0003\u0002\u0002\u0002\u1de0\u1dde\u0003\u0002\u0002\u0002",
    "\u1de1\u1de2\u0007\u019c\u0002\u0002\u1de2\u1de4\u0003\u0002\u0002\u0002",
    "\u1de3\u1dd8\u0003\u0002\u0002\u0002\u1de3\u1de4\u0003\u0002\u0002\u0002",
    "\u1de4\u03bd\u0003\u0002\u0002\u0002\u1de5\u1df2\u0005\u03c4\u01e3\u0002",
    "\u1de6\u1de7\u0007\u019b\u0002\u0002\u1de7\u1dec\u0005\u03c4\u01e3\u0002",
    "\u1de8\u1de9\u0007\u0198\u0002\u0002\u1de9\u1deb\u0005\u03c4\u01e3\u0002",
    "\u1dea\u1de8\u0003\u0002\u0002\u0002\u1deb\u1dee\u0003\u0002\u0002\u0002",
    "\u1dec\u1dea\u0003\u0002\u0002\u0002\u1dec\u1ded\u0003\u0002\u0002\u0002",
    "\u1ded\u1def\u0003\u0002\u0002\u0002\u1dee\u1dec\u0003\u0002\u0002\u0002",
    "\u1def\u1df0\u0007\u019c\u0002\u0002\u1df0\u1df2\u0003\u0002\u0002\u0002",
    "\u1df1\u1de5\u0003\u0002\u0002\u0002\u1df1\u1de6\u0003\u0002\u0002\u0002",
    "\u1df2\u03bf\u0003\u0002\u0002\u0002\u1df3\u1df5\u0007\u0158\u0002\u0002",
    "\u1df4\u1df6\u0007\u0181\u0002\u0002\u1df5\u1df4\u0003\u0002\u0002\u0002",
    "\u1df5\u1df6\u0003\u0002\u0002\u0002\u1df6\u1df7\u0003\u0002\u0002\u0002",
    "\u1df7\u1e16\u0005\u0460\u0231\u0002\u1df8\u1dfa\u0007\u014a\u0002\u0002",
    "\u1df9\u1df8\u0003\u0002\u0002\u0002\u1df9\u1dfa\u0003\u0002\u0002\u0002",
    "\u1dfa\u1dfb\u0003\u0002\u0002\u0002\u1dfb\u1dfd\u0007\u0082\u0002\u0002",
    "\u1dfc\u1dfe\u0007\u0181\u0002\u0002\u1dfd\u1dfc\u0003\u0002\u0002\u0002",
    "\u1dfd\u1dfe\u0003\u0002\u0002\u0002\u1dfe\u1dff\u0003\u0002\u0002\u0002",
    "\u1dff\u1e16\u0005\u043e\u0220\u0002\u1e00\u1e02\u0007\u00f0\u0002\u0002",
    "\u1e01\u1e03\u0007\u0181\u0002\u0002\u1e02\u1e01\u0003\u0002\u0002\u0002",
    "\u1e02\u1e03\u0003\u0002\u0002\u0002\u1e03\u1e04\u0003\u0002\u0002\u0002",
    "\u1e04\u1e16\u0005\u046e\u0238\u0002\u1e05\u1e07\t{\u0002\u0002\u1e06",
    "\u1e08\u0007\u0181\u0002\u0002\u1e07\u1e06\u0003\u0002\u0002\u0002\u1e07",
    "\u1e08\u0003\u0002\u0002\u0002\u1e08\u1e09\u0003\u0002\u0002\u0002\u1e09",
    "\u1e16\u0005\u046e\u0238\u0002\u1e0a\u1e0b\t|\u0002\u0002\u1e0b\u1e0d",
    "\u0007y\u0002\u0002\u1e0c\u1e0e\u0007\u0181\u0002\u0002\u1e0d\u1e0c",
    "\u0003\u0002\u0002\u0002\u1e0d\u1e0e\u0003\u0002\u0002\u0002\u1e0e\u1e0f",
    "\u0003\u0002\u0002\u0002\u1e0f\u1e16\u0005\u0480\u0241\u0002\u1e10\u1e12",
    "\u0007\r\u0002\u0002\u1e11\u1e13\u0007\u0181\u0002\u0002\u1e12\u1e11",
    "\u0003\u0002\u0002\u0002\u1e12\u1e13\u0003\u0002\u0002\u0002\u1e13\u1e14",
    "\u0003\u0002\u0002\u0002\u1e14\u1e16\u0005\u0480\u0241\u0002\u1e15\u1df3",
    "\u0003\u0002\u0002\u0002\u1e15\u1df9\u0003\u0002\u0002\u0002\u1e15\u1e00",
    "\u0003\u0002\u0002\u0002\u1e15\u1e05\u0003\u0002\u0002\u0002\u1e15\u1e0a",
    "\u0003\u0002\u0002\u0002\u1e15\u1e10\u0003\u0002\u0002\u0002\u1e16\u03c1",
    "\u0003\u0002\u0002\u0002\u1e17\u1e18\u0007\u014f\u0002\u0002\u1e18\u1e1c",
    "\u0005\u0494\u024b\u0002\u1e19\u1e1b\u0005\u03c0\u01e1\u0002\u1e1a\u1e19",
    "\u0003\u0002\u0002\u0002\u1e1b\u1e1e\u0003\u0002\u0002\u0002\u1e1c\u1e1a",
    "\u0003\u0002\u0002\u0002\u1e1c\u1e1d\u0003\u0002\u0002\u0002\u1e1d\u03c3",
    "\u0003\u0002\u0002\u0002\u1e1e\u1e1c\u0003\u0002\u0002\u0002\u1e1f\u1e20",
    "\u0007\u019b\u0002\u0002\u1e20\u1e25\u0005\u03c6\u01e4\u0002\u1e21\u1e22",
    "\u0007\u0198\u0002\u0002\u1e22\u1e24\u0005\u03c6\u01e4\u0002\u1e23\u1e21",
    "\u0003\u0002\u0002\u0002\u1e24\u1e27\u0003\u0002\u0002\u0002\u1e25\u1e23",
    "\u0003\u0002\u0002\u0002\u1e25\u1e26\u0003\u0002\u0002\u0002\u1e26\u1e28",
    "\u0003\u0002\u0002\u0002\u1e27\u1e25\u0003\u0002\u0002\u0002\u1e28\u1e29",
    "\u0007\u019c\u0002\u0002\u1e29\u03c5\u0003\u0002\u0002\u0002\u1e2a\u1e2d",
    "\u0005\u02a6\u0154\u0002\u1e2b\u1e2d\u0007\u0231\u0002\u0002\u1e2c\u1e2a",
    "\u0003\u0002\u0002\u0002\u1e2c\u1e2b\u0003\u0002\u0002\u0002\u1e2d\u03c7",
    "\u0003\u0002\u0002\u0002\u1e2e\u1e2f\u0007u\u0002\u0002\u1e2f\u1e30",
    "\u0007\u0181\u0002\u0002\u1e30\u1e31\u0005\u03fa\u01fe\u0002\u1e31\u03c9",
    "\u0003\u0002\u0002\u0002\u1e32\u1e33\u0007\u0209\u0002\u0002\u1e33\u1e34",
    "\u0007\u01f2\u0002\u0002\u1e34\u03cb\u0003\u0002\u0002\u0002\u1e35\u1e36",
    "\u0007\u0209\u0002\u0002\u1e36\u1e37\u0005\u02f0\u0179\u0002\u1e37\u1e38",
    "\u0007\u01f2\u0002\u0002\u1e38\u03cd\u0003\u0002\u0002\u0002\u1e39\u1e3b",
    "\t}\u0002\u0002\u1e3a\u1e39\u0003\u0002\u0002\u0002\u1e3a\u1e3b\u0003",
    "\u0002\u0002\u0002\u1e3b\u1e3c\u0003\u0002\u0002\u0002\u1e3c\u1e3d\u0005",
    "\u03d0\u01e9\u0002\u1e3d\u03cf\u0003\u0002\u0002\u0002\u1e3e\u1e3f\u0005",
    "\u044c\u0227\u0002\u1e3f\u1e40\u0005\u03d4\u01eb\u0002\u1e40\u03d1\u0003",
    "\u0002\u0002\u0002\u1e41\u1e42\u0007\u01c6\u0002\u0002\u1e42\u1e43\u0005",
    "\u03a2\u01d2\u0002\u1e43\u03d3\u0003\u0002\u0002\u0002\u1e44\u1e46\u0005",
    "\u038c\u01c7\u0002\u1e45\u1e47\u0005\u03d2\u01ea\u0002\u1e46\u1e45\u0003",
    "\u0002\u0002\u0002\u1e46\u1e47\u0003\u0002\u0002\u0002\u1e47\u03d5\u0003",
    "\u0002\u0002\u0002\u1e48\u1e49\u0007\u019b\u0002\u0002\u1e49\u1e4a\u0005",
    "\u041a\u020e\u0002\u1e4a\u1e4b\u0007\u0198\u0002\u0002\u1e4b\u1e4c\u0005",
    "\u041a\u020e\u0002\u1e4c\u1e4d\u0007\u019c\u0002\u0002\u1e4d\u03d7\u0003",
    "\u0002\u0002\u0002\u1e4e\u1e53\u0005\u042a\u0216\u0002\u1e4f\u1e50\u0007",
    "\u0198\u0002\u0002\u1e50\u1e52\u0005\u042a\u0216\u0002\u1e51\u1e4f\u0003",
    "\u0002\u0002\u0002\u1e52\u1e55\u0003\u0002\u0002\u0002\u1e53\u1e51\u0003",
    "\u0002\u0002\u0002\u1e53\u1e54\u0003\u0002\u0002\u0002\u1e54\u03d9\u0003",
    "\u0002\u0002\u0002\u1e55\u1e53\u0003\u0002\u0002\u0002\u1e56\u1e5b\u0005",
    "\u03dc\u01ef\u0002\u1e57\u1e58\u0007\u0198\u0002\u0002\u1e58\u1e5a\u0005",
    "\u03dc\u01ef\u0002\u1e59\u1e57\u0003\u0002\u0002\u0002\u1e5a\u1e5d\u0003",
    "\u0002\u0002\u0002\u1e5b\u1e59\u0003\u0002\u0002\u0002\u1e5b\u1e5c\u0003",
    "\u0002\u0002\u0002\u1e5c\u03db\u0003\u0002\u0002\u0002\u1e5d\u1e5b\u0003",
    "\u0002\u0002\u0002\u1e5e\u1e5f\u0005\u040e\u0208\u0002\u1e5f\u1e62\u0007",
    "\u0181\u0002\u0002\u1e60\u1e63\u0005\u029c\u014f\u0002\u1e61\u1e63\u0007",
    "\u01e0\u0002\u0002\u1e62\u1e60\u0003\u0002\u0002\u0002\u1e62\u1e61\u0003",
    "\u0002\u0002\u0002\u1e63\u03dd\u0003\u0002\u0002\u0002\u1e64\u1e65\u0005",
    "\u02ee\u0178\u0002\u1e65\u1e66\u0005\u03a0\u01d1\u0002\u1e66\u03df\u0003",
    "\u0002\u0002\u0002\u1e67\u1e69\u0007\\\u0002\u0002\u1e68\u1e6a\u0005",
    "\u03e2\u01f2\u0002\u1e69\u1e68\u0003\u0002\u0002\u0002\u1e6a\u1e6b\u0003",
    "\u0002\u0002\u0002\u1e6b\u1e69\u0003\u0002\u0002\u0002\u1e6b\u1e6c\u0003",
    "\u0002\u0002\u0002\u1e6c\u03e1\u0003\u0002\u0002\u0002\u1e6d\u1e6e\u0007",
    "\u028a\u0002\u0002\u1e6e\u1e6f\u0007\u01be\u0002\u0002\u1e6f\u1e7a\u0005",
    "\u047c\u023f\u0002\u1e70\u1e72\u0007\u024b\u0002\u0002\u1e71\u1e70\u0003",
    "\u0002\u0002\u0002\u1e71\u1e72\u0003\u0002\u0002\u0002\u1e72\u1e73\u0003",
    "\u0002\u0002\u0002\u1e73\u1e74\u0007\u01ee\u0002\u0002\u1e74\u1e75\u0007",
    "\u01be\u0002\u0002\u1e75\u1e7a\u0005\u047c\u023f\u0002\u1e76\u1e77\u0007",
    "\u01f0\u0002\u0002\u1e77\u1e78\u0007\u01be\u0002\u0002\u1e78\u1e7a\u0005",
    "\u047c\u023f\u0002\u1e79\u1e6d\u0003\u0002\u0002\u0002\u1e79\u1e71\u0003",
    "\u0002\u0002\u0002\u1e79\u1e76\u0003\u0002\u0002\u0002\u1e7a\u03e3\u0003",
    "\u0002\u0002\u0002\u1e7b\u1e7d\u0007\u0223\u0002\u0002\u1e7c\u1e7e\u0005",
    "\u03e6\u01f4\u0002\u1e7d\u1e7c\u0003\u0002\u0002\u0002\u1e7e\u1e7f\u0003",
    "\u0002\u0002\u0002\u1e7f\u1e7d\u0003\u0002\u0002\u0002\u1e7f\u1e80\u0003",
    "\u0002\u0002\u0002\u1e80\u03e5\u0003\u0002\u0002\u0002\u1e81\u1e82\t",
    "~\u0002\u0002\u1e82\u1e83\u0007\u01be\u0002\u0002\u1e83\u1e84\u0005",
    "\u047c\u023f\u0002\u1e84\u03e7\u0003\u0002\u0002\u0002\u1e85\u1e8a\u0005",
    "\u03fa\u01fe\u0002\u1e86\u1e87\u0007\u0198\u0002\u0002\u1e87\u1e89\u0005",
    "\u03fa\u01fe\u0002\u1e88\u1e86\u0003\u0002\u0002\u0002\u1e89\u1e8c\u0003",
    "\u0002\u0002\u0002\u1e8a\u1e88\u0003\u0002\u0002\u0002\u1e8a\u1e8b\u0003",
    "\u0002\u0002\u0002\u1e8b\u03e9\u0003\u0002\u0002\u0002\u1e8c\u1e8a\u0003",
    "\u0002\u0002\u0002\u1e8d\u1e92\u0005\u03ee\u01f8\u0002\u1e8e\u1e8f\u0007",
    "\u0198\u0002\u0002\u1e8f\u1e91\u0005\u03ee\u01f8\u0002\u1e90\u1e8e\u0003",
    "\u0002\u0002\u0002\u1e91\u1e94\u0003\u0002\u0002\u0002\u1e92\u1e90\u0003",
    "\u0002\u0002\u0002\u1e92\u1e93\u0003\u0002\u0002\u0002\u1e93\u03eb\u0003",
    "\u0002\u0002\u0002\u1e94\u1e92\u0003\u0002\u0002\u0002\u1e95\u1e9a\u0005",
    "\u03f0\u01f9\u0002\u1e96\u1e97\u0007\u0198\u0002\u0002\u1e97\u1e99\u0005",
    "\u03f0\u01f9\u0002\u1e98\u1e96\u0003\u0002\u0002\u0002\u1e99\u1e9c\u0003",
    "\u0002\u0002\u0002\u1e9a\u1e98\u0003\u0002\u0002\u0002\u1e9a\u1e9b\u0003",
    "\u0002\u0002\u0002\u1e9b\u03ed\u0003\u0002\u0002\u0002\u1e9c\u1e9a\u0003",
    "\u0002\u0002\u0002\u1e9d\u1eb8\u0005\u03fa\u01fe\u0002\u1e9e\u1eb6\u0007",
    "\u00a1\u0002\u0002\u1e9f\u1ea2\u0007\u01be\u0002\u0002\u1ea0\u1ea1\u0006",
    "\u01f8\u00c6\u0002\u1ea1\u1ea3\u0007\u00fd\u0002\u0002\u1ea2\u1ea0\u0003",
    "\u0002\u0002\u0002\u1ea2\u1ea3\u0003\u0002\u0002\u0002\u1ea3\u1ea4\u0003",
    "\u0002\u0002\u0002\u1ea4\u1eb7\u0005\u047c\u023f\u0002\u1ea5\u1ea6\u0007",
    "\u02ac\u0002\u0002\u1ea6\u1eac\u0005\u0494\u024b\u0002\u1ea7\u1ea8\u0007",
    "\u01b1\u0002\u0002\u1ea8\u1ead\u0005\u047e\u0240\u0002\u1ea9\u1eaa\u0006",
    "\u01f8\u00c7\u0002\u1eaa\u1eab\u0007\u01be\u0002\u0002\u1eab\u1ead\u0005",
    "\u047c\u023f\u0002\u1eac\u1ea7\u0003\u0002\u0002\u0002\u1eac\u1ea9\u0003",
    "\u0002\u0002\u0002\u1eac\u1ead\u0003\u0002\u0002\u0002\u1ead\u1eb7\u0003",
    "\u0002\u0002\u0002\u1eae\u1eb1\u0006\u01f8\u00c8\u0002\u1eaf\u1eb0\u0007",
    "\u02ac\u0002\u0002\u1eb0\u1eb2\u0005\u0494\u024b\u0002\u1eb1\u1eaf\u0003",
    "\u0002\u0002\u0002\u1eb1\u1eb2\u0003\u0002\u0002\u0002\u1eb2\u1eb3\u0003",
    "\u0002\u0002\u0002\u1eb3\u1eb4\u0007\u01be\u0002\u0002\u1eb4\u1eb5\u0007",
    "\u02fe\u0002\u0002\u1eb5\u1eb7\u0007\u00fd\u0002\u0002\u1eb6\u1e9f\u0003",
    "\u0002\u0002\u0002\u1eb6\u1ea5\u0003\u0002\u0002\u0002\u1eb6\u1eae\u0003",
    "\u0002\u0002\u0002\u1eb7\u1eb9\u0003\u0002\u0002\u0002\u1eb8\u1e9e\u0003",
    "\u0002\u0002\u0002\u1eb8\u1eb9\u0003\u0002\u0002\u0002\u1eb9\u03ef\u0003",
    "\u0002\u0002\u0002\u1eba\u1ed7\u0005\u03fa\u01fe\u0002\u1ebb\u1ed2\u0007",
    "\u00a1\u0002\u0002\u1ebc\u1ebd\u0007\u02ac\u0002\u0002\u1ebd\u1ebf\u0005",
    "\u0494\u024b\u0002\u1ebe\u1ebc\u0003\u0002\u0002\u0002\u1ebe\u1ebf\u0003",
    "\u0002\u0002\u0002\u1ebf\u1ec0\u0003\u0002\u0002\u0002\u1ec0\u1ec1\u0007",
    "\u01be\u0002\u0002\u1ec1\u1ec4\u0005\u047c\u023f\u0002\u1ec2\u1ec3\u0007",
    "\u0260\u0002\u0002\u1ec3\u1ec5\u0005\u047c\u023f\u0002\u1ec4\u1ec2\u0003",
    "\u0002\u0002\u0002\u1ec4\u1ec5\u0003\u0002\u0002\u0002\u1ec5\u1ec7\u0003",
    "\u0002\u0002\u0002\u1ec6\u1ec8\u0005\u03f2\u01fa\u0002\u1ec7\u1ec6\u0003",
    "\u0002\u0002\u0002\u1ec7\u1ec8\u0003\u0002\u0002\u0002\u1ec8\u1ed3\u0003",
    "\u0002\u0002\u0002\u1ec9\u1eca\u0007\u02ac\u0002\u0002\u1eca\u1ed0\u0005",
    "\u0494\u024b\u0002\u1ecb\u1ecc\u0007\u01b1\u0002\u0002\u1ecc\u1ece\u0005",
    "\u047e\u0240\u0002\u1ecd\u1ecf\u0005\u03f2\u01fa\u0002\u1ece\u1ecd\u0003",
    "\u0002\u0002\u0002\u1ece\u1ecf\u0003\u0002\u0002\u0002\u1ecf\u1ed1\u0003",
    "\u0002\u0002\u0002\u1ed0\u1ecb\u0003\u0002\u0002\u0002\u1ed0\u1ed1\u0003",
    "\u0002\u0002\u0002\u1ed1\u1ed3\u0003\u0002\u0002\u0002\u1ed2\u1ebe\u0003",
    "\u0002\u0002\u0002\u1ed2\u1ec9\u0003\u0002\u0002\u0002\u1ed2\u1ed3\u0003",
    "\u0002\u0002\u0002\u1ed3\u1ed8\u0003\u0002\u0002\u0002\u1ed4\u1ed6\u0005",
    "\u03f4\u01fb\u0002\u1ed5\u1ed4\u0003\u0002\u0002\u0002\u1ed5\u1ed6\u0003",
    "\u0002\u0002\u0002\u1ed6\u1ed8\u0003\u0002\u0002\u0002\u1ed7\u1ebb\u0003",
    "\u0002\u0002\u0002\u1ed7\u1ed5\u0003\u0002\u0002\u0002\u1ed8\u03f1\u0003",
    "\u0002\u0002\u0002\u1ed9\u1eda\u0007\u02f7\u0002\u0002\u1eda\u1edb\u0007",
    "m\u0002\u0002\u1edb\u1edc\u0007\u00fd\u0002\u0002\u1edc\u03f3\u0003",
    "\u0002\u0002\u0002\u1edd\u1ede\u0007{\u0002\u0002\u1ede\u1edf\u0007",
    "\u02f8\u0002\u0002\u1edf\u1ee0\u0007\u00fd\u0002\u0002\u1ee0\u03f5\u0003",
    "\u0002\u0002\u0002\u1ee1\u1ee2\u0007\u0260\u0002\u0002\u1ee2\u1ee3\u0005",
    "\u047c\u023f\u0002\u1ee3\u03f7\u0003\u0002\u0002\u0002\u1ee4\u1ee8\u0005",
    "\u0494\u024b\u0002\u1ee5\u1ee6\u0007\u01a2\u0002\u0002\u1ee6\u1ee9\u0005",
    "\u0494\u024b\u0002\u1ee7\u1ee9\u0007\u01a3\u0002\u0002\u1ee8\u1ee5\u0003",
    "\u0002\u0002\u0002\u1ee8\u1ee7\u0003\u0002\u0002\u0002\u1ee8\u1ee9\u0003",
    "\u0002\u0002\u0002\u1ee9\u03f9\u0003\u0002\u0002\u0002\u1eea\u1ef0\u0005",
    "\u03f8\u01fd\u0002\u1eeb\u1eed\u0007\u01d2\u0002\u0002\u1eec\u1eee\u0005",
    "\u049c\u024f\u0002\u1eed\u1eec\u0003\u0002\u0002\u0002\u1eed\u1eee\u0003",
    "\u0002\u0002\u0002\u1eee\u1ef0\u0003\u0002\u0002\u0002\u1eef\u1eea\u0003",
    "\u0002\u0002\u0002\u1eef\u1eeb\u0003\u0002\u0002\u0002\u1ef0\u03fb\u0003",
    "\u0002\u0002\u0002\u1ef1\u1ef2\u0007\u0220\u0002\u0002\u1ef2\u1ef3\u0005",
    "\u047a\u023e\u0002\u1ef3\u03fd\u0003\u0002\u0002\u0002\u1ef4\u1ef7\u0005",
    "\u03fc\u01ff\u0002\u1ef5\u1ef7\u0005\u0160\u00b1\u0002\u1ef6\u1ef4\u0003",
    "\u0002\u0002\u0002\u1ef6\u1ef5\u0003\u0002\u0002\u0002\u1ef7\u03ff\u0003",
    "\u0002\u0002\u0002\u1ef8\u1ef9\t\u007f\u0002\u0002\u1ef9\u0401\u0003",
    "\u0002\u0002\u0002\u1efa\u1efb\t\u0080\u0002\u0002\u1efb\u0403\u0003",
    "\u0002\u0002\u0002\u1efc\u1efd\u0006\u0203\u00c9\u0002\u1efd\u1efe\u0007",
    "\"\u0002\u0002\u1efe\u1eff\u0005\u0464\u0233\u0002\u1eff\u0405\u0003",
    "\u0002\u0002\u0002\u1f00\u1f06\u0005\u046a\u0236\u0002\u1f01\u1f03\u0005",
    "\u0466\u0234\u0002\u1f02\u1f04\u0005\u046a\u0236\u0002\u1f03\u1f02\u0003",
    "\u0002\u0002\u0002\u1f03\u1f04\u0003\u0002\u0002\u0002\u1f04\u1f06\u0003",
    "\u0002\u0002\u0002\u1f05\u1f00\u0003\u0002\u0002\u0002\u1f05\u1f01\u0003",
    "\u0002\u0002\u0002\u1f06\u0407\u0003\u0002\u0002\u0002\u1f07\u1f08\u0006",
    "\u0205\u00ca\u0002\u1f08\u1f0c\u0005\u0460\u0231\u0002\u1f09\u1f0a\u0006",
    "\u0205\u00cb\u0002\u1f0a\u1f0c\u0005\u0406\u0204\u0002\u1f0b\u1f07\u0003",
    "\u0002\u0002\u0002\u1f0b\u1f09\u0003\u0002\u0002\u0002\u1f0c\u0409\u0003",
    "\u0002\u0002\u0002\u1f0d\u1f0e\u0005\u0460\u0231\u0002\u1f0e\u040b\u0003",
    "\u0002\u0002\u0002\u1f0f\u1f10\u0007\u019b\u0002\u0002\u1f10\u1f15\u0005",
    "\u040a\u0206\u0002\u1f11\u1f12\u0007\u0198\u0002\u0002\u1f12\u1f14\u0005",
    "\u040a\u0206\u0002\u1f13\u1f11\u0003\u0002\u0002\u0002\u1f14\u1f17\u0003",
    "\u0002\u0002\u0002\u1f15\u1f13\u0003\u0002\u0002\u0002\u1f15\u1f16\u0003",
    "\u0002\u0002\u0002\u1f16\u1f18\u0003\u0002\u0002\u0002\u1f17\u1f15\u0003",
    "\u0002\u0002\u0002\u1f18\u1f19\u0007\u019c\u0002\u0002\u1f19\u040d\u0003",
    "\u0002\u0002\u0002\u1f1a\u1f1b\u0005\u0406\u0204\u0002\u1f1b\u040f\u0003",
    "\u0002\u0002\u0002\u1f1c\u1f1f\u0005\u040e\u0208\u0002\u1f1d\u1f1f\u0005",
    "\u0416\u020c\u0002\u1f1e\u1f1c\u0003\u0002\u0002\u0002\u1f1e\u1f1d\u0003",
    "\u0002\u0002\u0002\u1f1f\u0411\u0003\u0002\u0002\u0002\u1f20\u1f21\u0005",
    "\u0460\u0231\u0002\u1f21\u0413\u0003\u0002\u0002\u0002\u1f22\u1f23\u0005",
    "\u0406\u0204\u0002\u1f23\u0415\u0003\u0002\u0002\u0002\u1f24\u1f25\u0005",
    "\u0460\u0231\u0002\u1f25\u1f29\u0007\u0197\u0002\u0002\u1f26\u1f27\u0005",
    "\u0460\u0231\u0002\u1f27\u1f28\u0007\u0197\u0002\u0002\u1f28\u1f2a\u0003",
    "\u0002\u0002\u0002\u1f29\u1f26\u0003\u0002\u0002\u0002\u1f29\u1f2a\u0003",
    "\u0002\u0002\u0002\u1f2a\u1f2b\u0003\u0002\u0002\u0002\u1f2b\u1f2c\u0007",
    "\u018b\u0002\u0002\u1f2c\u0417\u0003\u0002\u0002\u0002\u1f2d\u1f2e\u0005",
    "\u0460\u0231\u0002\u1f2e\u0419\u0003\u0002\u0002\u0002\u1f2f\u1f30\u0005",
    "\u0460\u0231\u0002\u1f30\u041b\u0003\u0002\u0002\u0002\u1f31\u1f32\u0005",
    "\u0466\u0234\u0002\u1f32\u041d\u0003\u0002\u0002\u0002\u1f33\u1f34\u0005",
    "\u0466\u0234\u0002\u1f34\u041f\u0003\u0002\u0002\u0002\u1f35\u1f36\u0005",
    "\u0466\u0234\u0002\u1f36\u0421\u0003\u0002\u0002\u0002\u1f37\u1f38\u0005",
    "\u0466\u0234\u0002\u1f38\u0423\u0003\u0002\u0002\u0002\u1f39\u1f3a\u0005",
    "\u0466\u0234\u0002\u1f3a\u0425\u0003\u0002\u0002\u0002\u1f3b\u1f3c\u0005",
    "\u0466\u0234\u0002\u1f3c\u0427\u0003\u0002\u0002\u0002\u1f3d\u1f40\u0005",
    "\u0466\u0234\u0002\u1f3e\u1f40\u0005\u046a\u0236\u0002\u1f3f\u1f3d\u0003",
    "\u0002\u0002\u0002\u1f3f\u1f3e\u0003\u0002\u0002\u0002\u1f40\u0429\u0003",
    "\u0002\u0002\u0002\u1f41\u1f44\u0005\u0466\u0234\u0002\u1f42\u1f44\u0005",
    "\u046a\u0236\u0002\u1f43\u1f41\u0003\u0002\u0002\u0002\u1f43\u1f42\u0003",
    "\u0002\u0002\u0002\u1f44\u042b\u0003\u0002\u0002\u0002\u1f45\u1f46\u0005",
    "\u0460\u0231\u0002\u1f46\u042d\u0003\u0002\u0002\u0002\u1f47\u1f48\u0005",
    "\u0460\u0231\u0002\u1f48\u042f\u0003\u0002\u0002\u0002\u1f49\u1f4a\u0005",
    "\u0460\u0231\u0002\u1f4a\u0431\u0003\u0002\u0002\u0002\u1f4b\u1f4c\u0005",
    "\u0460\u0231\u0002\u1f4c\u0433\u0003\u0002\u0002\u0002\u1f4d\u1f4e\u0005",
    "\u0466\u0234\u0002\u1f4e\u0435\u0003\u0002\u0002\u0002\u1f4f\u1f50\u0005",
    "\u0466\u0234\u0002\u1f50\u0437\u0003\u0002\u0002\u0002\u1f51\u1f52\u0005",
    "\u0460\u0231\u0002\u1f52\u0439\u0003\u0002\u0002\u0002\u1f53\u1f54\u0005",
    "\u0494\u024b\u0002\u1f54\u043b\u0003\u0002\u0002\u0002\u1f55\u1f56\u0005",
    "\u0494\u024b\u0002\u1f56\u043d\u0003\u0002\u0002\u0002\u1f57\u1f58\u0005",
    "\u0494\u024b\u0002\u1f58\u043f\u0003\u0002\u0002\u0002\u1f59\u1f5c\u0005",
    "\u0466\u0234\u0002\u1f5a\u1f5c\u0005\u046a\u0236\u0002\u1f5b\u1f59\u0003",
    "\u0002\u0002\u0002\u1f5b\u1f5a\u0003\u0002\u0002\u0002\u1f5c\u0441\u0003",
    "\u0002\u0002\u0002\u1f5d\u1f5e\u0005\u041a\u020e\u0002\u1f5e\u1f5f\u0005",
    "\u046a\u0236\u0002\u1f5f\u0443\u0003\u0002\u0002\u0002\u1f60\u1f68\u0005",
    "\u0460\u0231\u0002\u1f61\u1f62\u0007\u0197\u0002\u0002\u1f62\u1f69\u0007",
    "\u018b\u0002\u0002\u1f63\u1f66\u0005\u046a\u0236\u0002\u1f64\u1f65\u0007",
    "\u0197\u0002\u0002\u1f65\u1f67\u0007\u018b\u0002\u0002\u1f66\u1f64\u0003",
    "\u0002\u0002\u0002\u1f66\u1f67\u0003\u0002\u0002\u0002\u1f67\u1f69\u0003",
    "\u0002\u0002\u0002\u1f68\u1f61\u0003\u0002\u0002\u0002\u1f68\u1f63\u0003",
    "\u0002\u0002\u0002\u1f68\u1f69\u0003\u0002\u0002\u0002\u1f69\u0445\u0003",
    "\u0002\u0002\u0002\u1f6a\u1f6d\u0005\u0466\u0234\u0002\u1f6b\u1f6d\u0005",
    "\u046a\u0236\u0002\u1f6c\u1f6a\u0003\u0002\u0002\u0002\u1f6c\u1f6b\u0003",
    "\u0002\u0002\u0002\u1f6d\u0447\u0003\u0002\u0002\u0002\u1f6e\u1f73\u0005",
    "\u0446\u0224\u0002\u1f6f\u1f70\u0007\u0198\u0002\u0002\u1f70\u1f72\u0005",
    "\u0446\u0224\u0002\u1f71\u1f6f\u0003\u0002\u0002\u0002\u1f72\u1f75\u0003",
    "\u0002\u0002\u0002\u1f73\u1f71\u0003\u0002\u0002\u0002\u1f73\u1f74\u0003",
    "\u0002\u0002\u0002\u1f74\u0449\u0003\u0002\u0002\u0002\u1f75\u1f73\u0003",
    "\u0002\u0002\u0002\u1f76\u1f7b\u0005\u0444\u0223\u0002\u1f77\u1f78\u0007",
    "\u0198\u0002\u0002\u1f78\u1f7a\u0005\u0444\u0223\u0002\u1f79\u1f77\u0003",
    "\u0002\u0002\u0002\u1f7a\u1f7d\u0003\u0002\u0002\u0002\u1f7b\u1f79\u0003",
    "\u0002\u0002\u0002\u1f7b\u1f7c\u0003\u0002\u0002\u0002\u1f7c\u044b\u0003",
    "\u0002\u0002\u0002\u1f7d\u1f7b\u0003\u0002\u0002\u0002\u1f7e\u1f7f\u0005",
    "\u0460\u0231\u0002\u1f7f\u044d\u0003\u0002\u0002\u0002\u1f80\u1f83\u0005",
    "\u045e\u0230\u0002\u1f81\u1f83\u0005\u04ac\u0257\u0002\u1f82\u1f80\u0003",
    "\u0002\u0002\u0002\u1f82\u1f81\u0003\u0002\u0002\u0002\u1f83\u044f\u0003",
    "\u0002\u0002\u0002\u1f84\u1f85\u0005\u044e\u0228\u0002\u1f85\u0451\u0003",
    "\u0002\u0002\u0002\u1f86\u1f89\u0005\u045e\u0230\u0002\u1f87\u1f89\u0005",
    "\u04b2\u025a\u0002\u1f88\u1f86\u0003\u0002\u0002\u0002\u1f88\u1f87\u0003",
    "\u0002\u0002\u0002\u1f89\u0453\u0003\u0002\u0002\u0002\u1f8a\u1f8b\u0005",
    "\u0452\u022a\u0002\u1f8b\u0455\u0003\u0002\u0002\u0002\u1f8c\u1f8d\u0005",
    "\u0460\u0231\u0002\u1f8d\u0457\u0003\u0002\u0002\u0002\u1f8e\u1f8f\u0005",
    "\u047a\u023e\u0002\u1f8f\u0459\u0003\u0002\u0002\u0002\u1f90\u1f91\u0005",
    "\u0460\u0231\u0002\u1f91\u045b\u0003\u0002\u0002\u0002\u1f92\u1f93\u0005",
    "\u0460\u0231\u0002\u1f93\u045d\u0003\u0002\u0002\u0002\u1f94\u1f98\t",
    "\u0081\u0002\u0002\u1f95\u1f96\u0006\u0230\u00cc\u0002\u1f96\u1f98\u0007",
    "\u0309\u0002\u0002\u1f97\u1f94\u0003\u0002\u0002\u0002\u1f97\u1f95\u0003",
    "\u0002\u0002\u0002\u1f98\u045f\u0003\u0002\u0002\u0002\u1f99\u1f9c\u0005",
    "\u045e\u0230\u0002\u1f9a\u1f9c\u0005\u04a6\u0254\u0002\u1f9b\u1f99\u0003",
    "\u0002\u0002\u0002\u1f9b\u1f9a\u0003\u0002\u0002\u0002\u1f9c\u0461\u0003",
    "\u0002\u0002\u0002\u1f9d\u1fa2\u0005\u0460\u0231\u0002\u1f9e\u1f9f\u0007",
    "\u0198\u0002\u0002\u1f9f\u1fa1\u0005\u0460\u0231\u0002\u1fa0\u1f9e\u0003",
    "\u0002\u0002\u0002\u1fa1\u1fa4\u0003\u0002\u0002\u0002\u1fa2\u1fa0\u0003",
    "\u0002\u0002\u0002\u1fa2\u1fa3\u0003\u0002\u0002\u0002\u1fa3\u0463\u0003",
    "\u0002\u0002\u0002\u1fa4\u1fa2\u0003\u0002\u0002\u0002\u1fa5\u1fa6\u0007",
    "\u019b\u0002\u0002\u1fa6\u1fa7\u0005\u0462\u0232\u0002\u1fa7\u1fa8\u0007",
    "\u019c\u0002\u0002\u1fa8\u0465\u0003\u0002\u0002\u0002\u1fa9\u1fab\u0005",
    "\u0460\u0231\u0002\u1faa\u1fac\u0005\u046a\u0236\u0002\u1fab\u1faa\u0003",
    "\u0002\u0002\u0002\u1fab\u1fac\u0003\u0002\u0002\u0002\u1fac\u0467\u0003",
    "\u0002\u0002\u0002\u1fad\u1fb2\u0005\u0460\u0231\u0002\u1fae\u1fb0\u0005",
    "\u046a\u0236\u0002\u1faf\u1fb1\u0005\u046a\u0236\u0002\u1fb0\u1faf\u0003",
    "\u0002\u0002\u0002\u1fb0\u1fb1\u0003\u0002\u0002\u0002\u1fb1\u1fb3\u0003",
    "\u0002\u0002\u0002\u1fb2\u1fae\u0003\u0002\u0002\u0002\u1fb2\u1fb3\u0003",
    "\u0002\u0002\u0002\u1fb3\u1fb9\u0003\u0002\u0002\u0002\u1fb4\u1fb5\u0006",
    "\u0235\u00cd\u0002\u1fb5\u1fb6\u0005\u046a\u0236\u0002\u1fb6\u1fb7\u0005",
    "\u046a\u0236\u0002\u1fb7\u1fb9\u0003\u0002\u0002\u0002\u1fb8\u1fad\u0003",
    "\u0002\u0002\u0002\u1fb8\u1fb4\u0003\u0002\u0002\u0002\u1fb9\u0469\u0003",
    "\u0002\u0002\u0002\u1fba\u1fbb\u0007\u0197\u0002\u0002\u1fbb\u1fbc\u0005",
    "\u0460\u0231\u0002\u1fbc\u046b\u0003\u0002\u0002\u0002\u1fbd\u1fbe\t",
    "\u0082\u0002\u0002\u1fbe\u046d\u0003\u0002\u0002\u0002\u1fbf\u1fc0\t",
    "\u0083\u0002\u0002\u1fc0\u046f\u0003\u0002\u0002\u0002\u1fc1\u1fc2\t",
    "\u0084\u0002\u0002\u1fc2\u0471\u0003\u0002\u0002\u0002\u1fc3\u1fc9\u0007",
    "\u017e\u0002\u0002\u1fc4\u1fc5\u0006\u023a\u00ce\u0002\u1fc5\u1fc9\u0007",
    "\u01a7\u0002\u0002\u1fc6\u1fc9\u0007\u0180\u0002\u0002\u1fc7\u1fc9\u0007",
    "\u017f\u0002\u0002\u1fc8\u1fc3\u0003\u0002\u0002\u0002\u1fc8\u1fc4\u0003",
    "\u0002\u0002\u0002\u1fc8\u1fc6\u0003\u0002\u0002\u0002\u1fc8\u1fc7\u0003",
    "\u0002\u0002\u0002\u1fc9\u0473\u0003\u0002\u0002\u0002\u1fca\u1fd4\u0005",
    "\u0480\u0241\u0002\u1fcb\u1fd4\u0005\u0486\u0244\u0002\u1fcc\u1fd4\u0005",
    "\u048c\u0247\u0002\u1fcd\u1fd4\u0005\u048a\u0246\u0002\u1fce\u1fd4\u0005",
    "\u0488\u0245\u0002\u1fcf\u1fd1\u0007\u0305\u0002\u0002\u1fd0\u1fcf\u0003",
    "\u0002\u0002\u0002\u1fd0\u1fd1\u0003\u0002\u0002\u0002\u1fd1\u1fd2\u0003",
    "\u0002\u0002\u0002\u1fd2\u1fd4\t\u0085\u0002\u0002\u1fd3\u1fca\u0003",
    "\u0002\u0002\u0002\u1fd3\u1fcb\u0003\u0002\u0002\u0002\u1fd3\u1fcc\u0003",
    "\u0002\u0002\u0002\u1fd3\u1fcd\u0003\u0002\u0002\u0002\u1fd3\u1fce\u0003",
    "\u0002\u0002\u0002\u1fd3\u1fd0\u0003\u0002\u0002\u0002\u1fd4\u0475\u0003",
    "\u0002\u0002\u0002\u1fd5\u1fdb\u0005\u0474\u023b\u0002\u1fd6\u1fd7\u0007",
    "\u0189\u0002\u0002\u1fd7\u1fdb\u0005\u046c\u0237\u0002\u1fd8\u1fd9\u0007",
    "\u018a\u0002\u0002\u1fd9\u1fdb\u0005\u046c\u0237\u0002\u1fda\u1fd5\u0003",
    "\u0002\u0002\u0002\u1fda\u1fd6\u0003\u0002\u0002\u0002\u1fda\u1fd8\u0003",
    "\u0002\u0002\u0002\u1fdb\u0477\u0003\u0002\u0002\u0002\u1fdc\u1fdd\u0007",
    "\u019b\u0002\u0002\u1fdd\u1fe2\u0005\u047c\u023f\u0002\u1fde\u1fdf\u0007",
    "\u0198\u0002\u0002\u1fdf\u1fe1\u0005\u047c\u023f\u0002\u1fe0\u1fde\u0003",
    "\u0002\u0002\u0002\u1fe1\u1fe4\u0003\u0002\u0002\u0002\u1fe2\u1fe0\u0003",
    "\u0002\u0002\u0002\u1fe2\u1fe3\u0003\u0002\u0002\u0002\u1fe3\u1fe5\u0003",
    "\u0002\u0002\u0002\u1fe4\u1fe2\u0003\u0002\u0002\u0002\u1fe5\u1fe6\u0007",
    "\u019c\u0002\u0002\u1fe6\u0479\u0003\u0002\u0002\u0002\u1fe7\u1feb\u0007",
    "\u030a\u0002\u0002\u1fe8\u1fe9\u0006\u023e\u00cf\u0002\u1fe9\u1feb\u0007",
    "\u0309\u0002\u0002\u1fea\u1fe7\u0003\u0002\u0002\u0002\u1fea\u1fe8\u0003",
    "\u0002\u0002\u0002\u1feb\u047b\u0003\u0002\u0002\u0002\u1fec\u1ff0\u0005",
    "\u047a\u023e\u0002\u1fed\u1ff0\u0007\u01a7\u0002\u0002\u1fee\u1ff0\u0007",
    "\u01a8\u0002\u0002\u1fef\u1fec\u0003\u0002\u0002\u0002\u1fef\u1fed\u0003",
    "\u0002\u0002\u0002\u1fef\u1fee\u0003\u0002\u0002\u0002\u1ff0\u047d\u0003",
    "\u0002\u0002\u0002\u1ff1\u1ff5\u0005\u047a\u023e\u0002\u1ff2\u1ff3\u0006",
    "\u0240\u00d0\u0002\u1ff3\u1ff5\u0007\u01a7\u0002\u0002\u1ff4\u1ff1\u0003",
    "\u0002\u0002\u0002\u1ff4\u1ff2\u0003\u0002\u0002\u0002\u1ff5\u047f\u0003",
    "\u0002\u0002\u0002\u1ff6\u1ff8\u0007\u0305\u0002\u0002\u1ff7\u1ff6\u0003",
    "\u0002\u0002\u0002\u1ff7\u1ff8\u0003\u0002\u0002\u0002\u1ff8\u1ff9\u0003",
    "\u0002\u0002\u0002\u1ff9\u1ffc\u0005\u047a\u023e\u0002\u1ffa\u1ffc\u0007",
    "\u0307\u0002\u0002\u1ffb\u1ff7\u0003\u0002\u0002\u0002\u1ffb\u1ffa\u0003",
    "\u0002\u0002\u0002\u1ffc\u2000\u0003\u0002\u0002\u0002\u1ffd\u1fff\u0005",
    "\u047a\u023e\u0002\u1ffe\u1ffd\u0003\u0002\u0002\u0002\u1fff\u2002\u0003",
    "\u0002\u0002\u0002\u2000\u1ffe\u0003\u0002\u0002\u0002\u2000\u2001\u0003",
    "\u0002\u0002\u0002\u2001\u0481\u0003\u0002\u0002\u0002\u2002\u2000\u0003",
    "\u0002\u0002\u0002\u2003\u2004\u0005\u047a\u023e\u0002\u2004\u0483\u0003",
    "\u0002\u0002\u0002\u2005\u200a\u0005\u047a\u023e\u0002\u2006\u2007\u0007",
    "\u0198\u0002\u0002\u2007\u2009\u0005\u047a\u023e\u0002\u2008\u2006\u0003",
    "\u0002\u0002\u0002\u2009\u200c\u0003\u0002\u0002\u0002\u200a\u2008\u0003",
    "\u0002\u0002\u0002\u200a\u200b\u0003\u0002\u0002\u0002\u200b\u0485\u0003",
    "\u0002\u0002\u0002\u200c\u200a\u0003\u0002\u0002\u0002\u200d\u200e\t",
    "\u0084\u0002\u0002\u200e\u0487\u0003\u0002\u0002\u0002\u200f\u2010\t",
    "\u0086\u0002\u0002\u2010\u0489\u0003\u0002\u0002\u0002\u2011\u2012\t",
    "\u0087\u0002\u0002\u2012\u048b\u0003\u0002\u0002\u0002\u2013\u2014\u0007",
    "r\u0002\u0002\u2014\u201a\u0007\u030a\u0002\u0002\u2015\u2016\u0007",
    "\u0162\u0002\u0002\u2016\u201a\u0007\u030a\u0002\u0002\u2017\u2018\u0007",
    "\u015f\u0002\u0002\u2018\u201a\u0007\u030a\u0002\u0002\u2019\u2013\u0003",
    "\u0002\u0002\u0002\u2019\u2015\u0003\u0002\u0002\u0002\u2019\u2017\u0003",
    "\u0002\u0002\u0002\u201a\u048d\u0003\u0002\u0002\u0002\u201b\u201e\u0005",
    "\u0392\u01ca\u0002\u201c\u201e\u0005\u0492\u024a\u0002\u201d\u201b\u0003",
    "\u0002\u0002\u0002\u201d\u201c\u0003\u0002\u0002\u0002\u201e\u048f\u0003",
    "\u0002\u0002\u0002\u201f\u2020\u0005\u0492\u024a\u0002\u2020\u0491\u0003",
    "\u0002\u0002\u0002\u2021\u2022\u0007\u019b\u0002\u0002\u2022\u2023\u0007",
    "\u017e\u0002\u0002\u2023\u2024\u0007\u0198\u0002\u0002\u2024\u2025\u0007",
    "\u017e\u0002\u0002\u2025\u2026\u0007\u019c\u0002\u0002\u2026\u0493\u0003",
    "\u0002\u0002\u0002\u2027\u202a\u0007\u030a\u0002\u0002\u2028\u202a\u0005",
    "\u0460\u0231\u0002\u2029\u2027\u0003\u0002\u0002\u0002\u2029\u2028\u0003",
    "\u0002\u0002\u0002\u202a\u0495\u0003\u0002\u0002\u0002\u202b\u202e\u0005",
    "\u045e\u0230\u0002\u202c\u202e\u0005\u04b4\u025b\u0002\u202d\u202b\u0003",
    "\u0002\u0002\u0002\u202d\u202c\u0003\u0002\u0002\u0002\u202e\u0497\u0003",
    "\u0002\u0002\u0002\u202f\u2032\u0005\u0452\u022a\u0002\u2030\u2032\u0005",
    "\u047a\u023e\u0002\u2031\u202f\u0003\u0002\u0002\u0002\u2031\u2030\u0003",
    "\u0002\u0002\u0002\u2032\u0499\u0003\u0002\u0002\u0002\u2033\u2036\u0005",
    "\u0472\u023a\u0002\u2034\u2036\u0005\u045e\u0230\u0002\u2035\u2033\u0003",
    "\u0002\u0002\u0002\u2035\u2034\u0003\u0002\u0002\u0002\u2036\u049b\u0003",
    "\u0002\u0002\u0002\u2037\u2038\u0007\u019b\u0002\u0002\u2038\u2039\u0007",
    "\u019c\u0002\u0002\u2039\u049d\u0003\u0002\u0002\u0002\u203a\u203b\t",
    "\u0088\u0002\u0002\u203b\u049f\u0003\u0002\u0002\u0002\u203c\u203d\t",
    "\u0089\u0002\u0002\u203d\u04a1\u0003\u0002\u0002\u0002\u203e\u203f\u0007",
    "\u009d\u0002\u0002\u203f\u2045\u0007\u0197\u0002\u0002\u2040\u2041\u0007",
    "\u00b6\u0002\u0002\u2041\u2045\u0007\u0197\u0002\u0002\u2042\u2043\u0007",
    "\u0136\u0002\u0002\u2043\u2045\u0007\u0197\u0002\u0002\u2044\u203e\u0003",
    "\u0002\u0002\u0002\u2044\u2040\u0003\u0002\u0002\u0002\u2044\u2042\u0003",
    "\u0002\u0002\u0002\u2045\u04a3\u0003\u0002\u0002\u0002\u2046\u2047\u0007",
    "\u02b2\u0002\u0002\u2047\u2051\u0007\u0197\u0002\u0002\u2048\u2049\u0007",
    "\u02c1\u0002\u0002\u2049\u2051\u0007\u0197\u0002\u0002\u204a\u204b\u0007",
    "\u009d\u0002\u0002\u204b\u2051\u0007\u0197\u0002\u0002\u204c\u204d\u0007",
    "\u00b6\u0002\u0002\u204d\u2051\u0007\u0197\u0002\u0002\u204e\u204f\u0007",
    "\u0136\u0002\u0002\u204f\u2051\u0007\u0197\u0002\u0002\u2050\u2046\u0003",
    "\u0002\u0002\u0002\u2050\u2048\u0003\u0002\u0002\u0002\u2050\u204a\u0003",
    "\u0002\u0002\u0002\u2050\u204c\u0003\u0002\u0002\u0002\u2050\u204e\u0003",
    "\u0002\u0002\u0002\u2051\u04a5\u0003\u0002\u0002\u0002\u2052\u205a\u0006",
    "\u0254\u00d1\u0002\u2053\u205b\u0005\u04ac\u0257\u0002\u2054\u205b\u0005",
    "\u04b8\u025d\u0002\u2055\u205b\u0007\u0013\u0002\u0002\u2056\u2057\u0006",
    "\u0254\u00d2\u0002\u2057\u205b\u0007:\u0002\u0002\u2058\u2059\u0006",
    "\u0254\u00d3\u0002\u2059\u205b\u0007\u02ea\u0002\u0002\u205a\u2053\u0003",
    "\u0002\u0002\u0002\u205a\u2054\u0003\u0002\u0002\u0002\u205a\u2055\u0003",
    "\u0002\u0002\u0002\u205a\u2056\u0003\u0002\u0002\u0002\u205a\u2058\u0003",
    "\u0002\u0002\u0002\u205b\u2064\u0003\u0002\u0002\u0002\u205c\u2062\u0005",
    "\u04b0\u0259\u0002\u205d\u2062\u0005\u04a8\u0255\u0002\u205e\u2062\u0005",
    "\u04aa\u0256\u0002\u205f\u2062\u0005\u04ae\u0258\u0002\u2060\u2062\u0005",
    "\u04b6\u025c\u0002\u2061\u205c\u0003\u0002\u0002\u0002\u2061\u205d\u0003",
    "\u0002\u0002\u0002\u2061\u205e\u0003\u0002\u0002\u0002\u2061\u205f\u0003",
    "\u0002\u0002\u0002\u2061\u2060\u0003\u0002\u0002\u0002\u2062\u2064\u0003",
    "\u0002\u0002\u0002\u2063\u2052\u0003\u0002\u0002\u0002\u2063\u2061\u0003",
    "\u0002\u0002\u0002\u2064\u04a7\u0003\u0002\u0002\u0002\u2065\u2066\t",
    "\u008a\u0002\u0002\u2066\u04a9\u0003\u0002\u0002\u0002\u2067\u2068\t",
    "\u008b\u0002\u0002\u2068\u04ab\u0003\u0002\u0002\u0002\u2069\u2074\u0006",
    "\u0257\u00d4\u0002\u206a\u2075\u0005\u04ba\u025e\u0002\u206b\u2075\u0007",
    "\u0087\u0002\u0002\u206c\u2075\u0007\u0093\u0002\u0002\u206d\u2075\u0007",
    "\u00f1\u0002\u0002\u206e\u2075\u0007\u0107\u0002\u0002\u206f\u2075\u0007",
    "\u010b\u0002\u0002\u2070\u2075\u0007\u011a\u0002\u0002\u2071\u2075\u0007",
    "\u011d\u0002\u0002\u2072\u2075\u0007\u02e5\u0002\u0002\u2073\u2075\u0007",
    "\u0151\u0002\u0002\u2074\u206a\u0003\u0002\u0002\u0002\u2074\u206b\u0003",
    "\u0002\u0002\u0002\u2074\u206c\u0003\u0002\u0002\u0002\u2074\u206d\u0003",
    "\u0002\u0002\u0002\u2074\u206e\u0003\u0002\u0002\u0002\u2074\u206f\u0003",
    "\u0002\u0002\u0002\u2074\u2070\u0003\u0002\u0002\u0002\u2074\u2071\u0003",
    "\u0002\u0002\u0002\u2074\u2072\u0003\u0002\u0002\u0002\u2074\u2073\u0003",
    "\u0002\u0002\u0002\u2075\u207c\u0003\u0002\u0002\u0002\u2076\u207a\u0005",
    "\u04b0\u0259\u0002\u2077\u207a\u0005\u04ae\u0258\u0002\u2078\u207a\u0005",
    "\u04b6\u025c\u0002\u2079\u2076\u0003\u0002\u0002\u0002\u2079\u2077\u0003",
    "\u0002\u0002\u0002\u2079\u2078\u0003\u0002\u0002\u0002\u207a\u207c\u0003",
    "\u0002\u0002\u0002\u207b\u2069\u0003\u0002\u0002\u0002\u207b\u2079\u0003",
    "\u0002\u0002\u0002\u207c\u04ad\u0003\u0002\u0002\u0002\u207d\u207e\t",
    "\u008c\u0002\u0002\u207e\u04af\u0003\u0002\u0002\u0002\u207f\u2080\t",
    "\u008d\u0002\u0002\u2080\u04b1\u0003\u0002\u0002\u0002\u2081\u2084\u0006",
    "\u025a\u00d5\u0002\u2082\u2085\u0005\u04ba\u025e\u0002\u2083\u2085\u0005",
    "\u04b8\u025d\u0002\u2084\u2082\u0003\u0002\u0002\u0002\u2084\u2083\u0003",
    "\u0002\u0002\u0002\u2085\u208c\u0003\u0002\u0002\u0002\u2086\u208a\u0005",
    "\u04b0\u0259\u0002\u2087\u208a\u0005\u04aa\u0256\u0002\u2088\u208a\u0005",
    "\u04b6\u025c\u0002\u2089\u2086\u0003\u0002\u0002\u0002\u2089\u2087\u0003",
    "\u0002\u0002\u0002\u2089\u2088\u0003\u0002\u0002\u0002\u208a\u208c\u0003",
    "\u0002\u0002\u0002\u208b\u2081\u0003\u0002\u0002\u0002\u208b\u2089\u0003",
    "\u0002\u0002\u0002\u208c\u04b3\u0003\u0002\u0002\u0002\u208d\u2092\u0005",
    "\u04b0\u0259\u0002\u208e\u2092\u0005\u04a8\u0255\u0002\u208f\u2092\u0005",
    "\u04aa\u0256\u0002\u2090\u2092\u0005\u04ae\u0258\u0002\u2091\u208d\u0003",
    "\u0002\u0002\u0002\u2091\u208e\u0003\u0002\u0002\u0002\u2091\u208f\u0003",
    "\u0002\u0002\u0002\u2091\u2090\u0003\u0002\u0002\u0002\u2092\u04b5\u0003",
    "\u0002\u0002\u0002\u2093\u2094\t\u0089\u0002\u0002\u2094\u04b7\u0003",
    "\u0002\u0002\u0002\u2095\u209b\t\u008e\u0002\u0002\u2096\u2097\u0006",
    "\u025d\u00d6\u0002\u2097\u209b\u0007:\u0002\u0002\u2098\u2099\u0006",
    "\u025d\u00d7\u0002\u2099\u209b\u0007\u00a4\u0002\u0002\u209a\u2095\u0003",
    "\u0002\u0002\u0002\u209a\u2096\u0003\u0002\u0002\u0002\u209a\u2098\u0003",
    "\u0002\u0002\u0002\u209b\u04b9\u0003\u0002\u0002\u0002\u209c\u20a6\t",
    "\u008f\u0002\u0002\u209d\u209e\u0006\u025e\u00d8\u0002\u209e\u20a6\u0007",
    ":\u0002\u0002\u209f\u20a0\u0006\u025e\u00d9\u0002\u20a0\u20a6\t\u0090",
    "\u0002\u0002\u20a1\u20a2\u0006\u025e\u00da\u0002\u20a2\u20a6\t\u0091",
    "\u0002\u0002\u20a3\u20a4\u0006\u025e\u00db\u0002\u20a4\u20a6\u0007\u02b4",
    "\u0002\u0002\u20a5\u209c\u0003\u0002\u0002\u0002\u20a5\u209d\u0003\u0002",
    "\u0002\u0002\u20a5\u209f\u0003\u0002\u0002\u0002\u20a5\u20a1\u0003\u0002",
    "\u0002\u0002\u20a5\u20a3\u0003\u0002\u0002\u0002\u20a6\u04bb\u0003\u0002",
    "\u0002\u0002\u0462\u04bf\u04c3\u04c6\u04c8\u04ec\u04f4\u04f9\u0509\u0510",
    "\u0517\u051a\u0521\u0526\u0529\u052e\u0534\u0536\u053a\u053e\u0547\u054b",
    "\u0550\u0556\u055d\u0561\u0566\u056b\u0572\u0575\u057b\u057e\u0585\u058f",
    "\u0594\u0599\u05a1\u05a7\u05ab\u05b0\u05b9\u05bf\u05c5\u05cb\u05d5\u05db",
    "\u05e4\u05f2\u05f6\u05fc\u0600\u0606\u060a\u060f\u0612\u0618\u061e\u0624",
    "\u0628\u062d\u0631\u0635\u063d\u063f\u0646\u064e\u0656\u065a\u0671\u0681",
    "\u0684\u068d\u0692\u0698\u069d\u06a1\u06a6\u06aa\u06ae\u06b2\u06b6\u06ba",
    "\u06bc\u06c7\u06cc\u06d2\u06da\u06e3\u06e8\u06eb\u06f0\u06f7\u06ff\u0703",
    "\u0708\u070f\u0714\u0719\u0721\u0725\u072a\u072d\u0730\u0733\u073a\u0741",
    "\u0745\u075d\u0761\u0767\u076e\u0771\u0775\u077c\u077f\u0782\u0785\u078e",
    "\u0795\u079a\u079d\u07a0\u07a6\u07ac\u07af\u07b4\u07be\u07c1\u07c7\u07cd",
    "\u07d7\u07da\u07e2\u07e8\u07f3\u07f6\u07fb\u080e\u0811\u0814\u081a\u081d",
    "\u081f\u0825\u082f\u0839\u083c\u083f\u0844\u084a\u0857\u085b\u0860\u0869",
    "\u087a\u088d\u0896\u0899\u08a1\u08a6\u08aa\u08b1\u08b6\u08c5\u08c9\u08cf",
    "\u08d5\u08db\u08e1\u08e7\u08ec\u08f0\u08f8\u08fe\u0904\u0909\u090c\u090f",
    "\u0918\u091b\u0926\u0932\u093b\u093f\u0948\u094b\u0951\u0953\u0957\u095e",
    "\u096b\u0972\u0978\u097b\u098c\u09a0\u09a4\u09aa\u09b0\u09b6\u09bb\u09c2",
    "\u09c9\u09ce\u09d1\u09d5\u09d9\u09de\u09e2\u09e6\u09ec\u09f1\u09f4\u09f8",
    "\u09fe\u0a02\u0a06\u0a0e\u0a16\u0a1f\u0a28\u0a35\u0a38\u0a3c\u0a42\u0a4a",
    "\u0a4f\u0a52\u0a55\u0a58\u0a5b\u0a5d\u0a63\u0a65\u0a74\u0a7a\u0a81\u0a84",
    "\u0a86\u0a88\u0a92\u0a94\u0a98\u0a9b\u0a9e\u0aa2\u0aa7\u0aad\u0ab0\u0ab3",
    "\u0ab9\u0abc\u0ac5\u0ace\u0ad2\u0ad6\u0adc\u0ae1\u0ae6\u0aeb\u0aef\u0af5",
    "\u0b00\u0b03\u0b08\u0b0e\u0b11\u0b14\u0b17\u0b1a\u0b28\u0b2b\u0b2f\u0b33",
    "\u0b39\u0b3e\u0b42\u0b47\u0b4a\u0b4e\u0b54\u0b59\u0b62\u0b66\u0b6a\u0b6d",
    "\u0b72\u0b75\u0b77\u0b7b\u0b7e\u0b84\u0b86\u0b8d\u0b91\u0b93\u0b98\u0b9c",
    "\u0ba0\u0ba6\u0bae\u0bb3\u0bb6\u0bb9\u0bbc\u0bbf\u0bc3\u0bd2\u0bd6\u0bdc",
    "\u0bdf\u0be2\u0be8\u0bed\u0bf1\u0bf4\u0bfc\u0bfe\u0c0b\u0c17\u0c1c\u0c1f",
    "\u0c22\u0c27\u0c2d\u0c3d\u0c51\u0c5a\u0c5e\u0c65\u0c6a\u0c73\u0c7a\u0c85",
    "\u0c8c\u0c97\u0c9e\u0ca2\u0ca8\u0cad\u0cb2\u0cb6\u0cbc\u0cc2\u0cc4\u0cc7",
    "\u0ccb\u0cd5\u0cda\u0cdf\u0ce6\u0cef\u0cf7\u0cfc\u0d00\u0d06\u0d09\u0d0c",
    "\u0d10\u0d14\u0d1e\u0d22\u0d25\u0d28\u0d2d\u0d33\u0d37\u0d3d\u0d40\u0d42",
    "\u0d47\u0d53\u0d5c\u0d69\u0d6c\u0d71\u0d78\u0d7c\u0d80\u0d82\u0d90\u0d97",
    "\u0da0\u0da6\u0daf\u0db3\u0db7\u0dc1\u0dc3\u0dcb\u0dd2\u0dd7\u0ddb\u0ddf",
    "\u0de2\u0de8\u0deb\u0dee\u0df4\u0dfb\u0e00\u0e04\u0e07\u0e0a\u0e0d\u0e0f",
    "\u0e13\u0e1b\u0e21\u0e25\u0e2a\u0e2d\u0e30\u0e33\u0e35\u0e3a\u0e43\u0e50",
    "\u0e52\u0e56\u0e5c\u0e5f\u0e62\u0e68\u0e6f\u0e71\u0e79\u0e7f\u0e84\u0e87",
    "\u0e8e\u0e90\u0e99\u0ea2\u0eab\u0eb3\u0eb7\u0ebe\u0ec1\u0ec3\u0ecb\u0ed1",
    "\u0edb\u0ee2\u0f3a\u0f3e\u0f42\u0f50\u0f58\u0f5b\u0f67\u0f6c\u0f72\u0f79",
    "\u0f80\u0f87\u0f8e\u0f95\u0f9c\u0f9f\u0fa6\u0fae\u0fb6\u0fc0\u0fc6\u0fca",
    "\u0fce\u0fd3\u0fd6\u0fd8\u0fe1\u0fe7\u0fee\u0ff3\u0ff8\u0ffd\u1000\u1007",
    "\u1014\u101a\u1020\u1027\u102f\u1035\u1041\u1043\u1049\u104d\u104f\u1053",
    "\u1060\u1066\u106e\u1079\u107d\u108a\u1091\u1097\u1099\u10a3\u10ab\u10ae",
    "\u10b3\u10b7\u10bd\u10c0\u10c5\u10d0\u10d2\u10de\u10e3\u10eb\u10f1\u10f3",
    "\u10f5\u10fb\u1107\u110c\u110e\u1112\u1118\u111b\u111e\u1128\u112a\u1130",
    "\u1137\u113d\u1147\u114b\u1150\u1161\u1171\u1176\u117e\u1186\u118b\u1191",
    "\u1194\u1196\u119f\u11a5\u11ab\u11ad\u11b1\u11bc\u11c6\u11cb\u11d0\u11d5",
    "\u11dd\u11e1\u11e6\u11ef\u11fb\u1209\u1212\u1214\u121b\u1222\u1226\u122c",
    "\u1234\u123b\u123f\u1245\u124c\u124f\u1258\u125e\u1263\u127a\u127d\u128d",
    "\u1292\u1295\u1299\u129c\u12aa\u12b0\u12b5\u12b8\u12ba\u12be\u12c3\u12c5",
    "\u12d1\u12d7\u12ed\u12f1\u12f3\u12fb\u12ff\u1308\u1312\u1319\u131c\u1320",
    "\u1323\u1326\u132a\u132d\u1331\u1334\u1339\u133c\u1341\u1344\u134a\u134e",
    "\u1354\u1357\u1360\u1362\u1368\u136c\u136f\u1372\u1376\u137c\u137f\u1382",
    "\u138c\u1390\u1399\u139c\u13a1\u13a4\u13a7\u13ab\u13ae\u13b3\u13b7\u13bf",
    "\u13cc\u13de\u13e3\u13e8\u13f0\u13f6\u13f8\u13fc\u13ff\u140d\u1417\u141b",
    "\u1423\u1426\u142a\u1434\u1438\u143f\u1444\u144c\u1451\u1457\u145e\u1463",
    "\u1469\u1470\u147a\u147c\u1484\u1489\u148d\u1490\u1497\u149c\u14a0\u14ab",
    "\u14b3\u14b7\u14ba\u14bd\u14c1\u14c5\u14ca\u14d0\u14d4\u14df\u14e2\u14e5",
    "\u14e8\u14f0\u14f4\u14f9\u1501\u1509\u150f\u151c\u1526\u152c\u153a\u153d",
    "\u1541\u154c\u154e\u1557\u1563\u1565\u156c\u1572\u1578\u1580\u158b\u158f",
    "\u15ac\u15ae\u15b5\u15c6\u15cd\u15db\u15e7\u15ed\u15f4\u15f7\u1619\u1621",
    "\u1623\u162f\u1634\u163a\u1642\u1649\u164f\u1654\u165a\u165f\u1664\u166a",
    "\u166f\u1675\u167d\u1685\u168d\u1695\u169a\u16a0\u16a5\u16a9\u16ad\u16b2",
    "\u16b4\u16c7\u16cb\u16d2\u16de\u16e1\u16e5\u16ea\u16ef\u16f3\u16fd\u1706",
    "\u1708\u170b\u1714\u171b\u1728\u172d\u1734\u173a\u1754\u1773\u1787\u178d",
    "\u1791\u17ac\u17b8\u17c5\u17c9\u17cd\u17e9\u1821\u182b\u182f\u183b\u1840",
    "\u184d\u1861\u1865\u1876\u1879\u187e\u1881\u188a\u188e\u1894\u189a\u189e",
    "\u18a9\u18af\u18b1\u18b8\u18bf\u18c3\u18ca\u18cf\u18d4\u18d7\u18dc\u18e0",
    "\u18e4\u18e9\u18ee\u18f0\u18f4\u1901\u1905\u1908\u190c\u1910\u1914\u1919",
    "\u191d\u1921\u192a\u192c\u1933\u1939\u1941\u1956\u195b\u1962\u1979\u1989",
    "\u1993\u1997\u199e\u19a1\u19ac\u19b5\u19b8\u19bf\u19c4\u19de\u19e4\u19ea",
    "\u19ee\u19f8\u19fc\u1a09\u1a15\u1a27\u1a2f\u1a39\u1a3c\u1a41\u1a45\u1a4c",
    "\u1a51\u1a58\u1a60\u1a63\u1a68\u1a6b\u1a73\u1a76\u1a84\u1a87\u1a94\u1a98",
    "\u1a9a\u1a9f\u1aa4\u1aaa\u1ab0\u1ab6\u1abb\u1abe\u1ac4\u1ac9\u1acc\u1ad2",
    "\u1ad6\u1adc\u1ade\u1ae1\u1ae7\u1aed\u1af5\u1af7\u1af9\u1afd\u1b03\u1b08",
    "\u1b0c\u1b11\u1b17\u1b1e\u1b21\u1b23\u1b26\u1b30\u1b34\u1b3a\u1b41\u1b46",
    "\u1b54\u1b59\u1b61\u1b66\u1b6a\u1b6d\u1b72\u1b76\u1b7e\u1b86\u1b88\u1b8f",
    "\u1b97\u1b9e\u1ba1\u1ba9\u1bb1\u1bb3\u1bb9\u1bbf\u1bc3\u1bca\u1bd5\u1bde",
    "\u1be1\u1be6\u1be8\u1beb\u1bee\u1bf2\u1bf5\u1bf9\u1bfe\u1c01\u1c05\u1c08",
    "\u1c0c\u1c11\u1c15\u1c21\u1c25\u1c2b\u1c2e\u1c33\u1c37\u1c3b\u1c40\u1c49",
    "\u1c4c\u1c50\u1c54\u1c57\u1c5b\u1c5f\u1c64\u1c69\u1c6f\u1c74\u1c79\u1c7b",
    "\u1c80\u1c87\u1c8f\u1c95\u1c97\u1c9b\u1c9f\u1ca3\u1ca7\u1cb5\u1cbc\u1cc0",
    "\u1cc5\u1ccb\u1ccf\u1cd5\u1cd9\u1cdd\u1ce2\u1ce7\u1cec\u1cf1\u1cf7\u1cfd",
    "\u1d02\u1d07\u1d0c\u1d11\u1d16\u1d1b\u1d20\u1d2a\u1d30\u1d36\u1d3c\u1d3f",
    "\u1d46\u1d4b\u1d4e\u1d52\u1d55\u1d59\u1d5e\u1d62\u1d67\u1d6b\u1d74\u1d77",
    "\u1d7a\u1d7d\u1d81\u1d85\u1d89\u1d98\u1d9b\u1d9d\u1da2\u1dab\u1dae\u1db2",
    "\u1dbf\u1dcb\u1dd0\u1dd5\u1dde\u1de3\u1dec\u1df1\u1df5\u1df9\u1dfd\u1e02",
    "\u1e07\u1e0d\u1e12\u1e15\u1e1c\u1e25\u1e2c\u1e3a\u1e46\u1e53\u1e5b\u1e62",
    "\u1e6b\u1e71\u1e79\u1e7f\u1e8a\u1e92\u1e9a\u1ea2\u1eac\u1eb1\u1eb6\u1eb8",
    "\u1ebe\u1ec4\u1ec7\u1ece\u1ed0\u1ed2\u1ed5\u1ed7\u1ee8\u1eed\u1eef\u1ef6",
    "\u1f03\u1f05\u1f0b\u1f15\u1f1e\u1f29\u1f3f\u1f43\u1f5b\u1f66\u1f68\u1f6c",
    "\u1f73\u1f7b\u1f82\u1f88\u1f97\u1f9b\u1fa2\u1fab\u1fb0\u1fb2\u1fb8\u1fc8",
    "\u1fd0\u1fd3\u1fda\u1fe2\u1fea\u1fef\u1ff4\u1ff7\u1ffb\u2000\u200a\u2019",
    "\u201d\u2029\u202d\u2031\u2035\u2044\u2050\u205a\u2061\u2063\u2074\u2079",
    "\u207b\u2084\u2089\u208b\u2091\u209a\u20a5"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, "'='", "':='", "'<=>'", 
                     "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", 
                     "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", 
                     "'->>'", "'@'", null, "'@@'", "'\\N'", "'?'", null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, "'<>'" ];

var symbolicNames = [ null, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", 
                      "BACKUP_SYMBOL", "BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", 
                      "CHARSET_SYMBOL", "CHECKSUM_SYMBOL", "CLOSE_SYMBOL", 
                      "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL", 
                      "DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", 
                      "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORMAT_SYMBOL", 
                      "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL", "HELP_SYMBOL", 
                      "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", 
                      "NO_SYMBOL", "OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", 
                      "PARSER_SYMBOL", "PARTITION_SYMBOL", "PORT_SYMBOL", 
                      "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", 
                      "REPAIR_SYMBOL", "RESET_SYMBOL", "RESTORE_SYMBOL", 
                      "ROLLBACK_SYMBOL", "SAVEPOINT_SYMBOL", "SECURITY_SYMBOL", 
                      "SERVER_SYMBOL", "SIGNED_SYMBOL", "SLAVE_SYMBOL", 
                      "SOCKET_SYMBOL", "SONAME_SYMBOL", "START_SYMBOL", 
                      "STOP_SYMBOL", "TRUNCATE_SYMBOL", "UNICODE_SYMBOL", 
                      "UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", "WRAPPER_SYMBOL", 
                      "XA_SYMBOL", "SHUTDOWN_SYMBOL", "ACTION_SYMBOL", "ADDDATE_SYMBOL", 
                      "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
                      "ALGORITHM_SYMBOL", "ANALYZE_SYMBOL", "ANY_SYMBOL", 
                      "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTO_INCREMENT_SYMBOL", 
                      "AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
                      "AVG_SYMBOL", "BINLOG_SYMBOL", "BIT_SYMBOL", "BLOCK_SYMBOL", 
                      "BOOL_SYMBOL", "BOOLEAN_SYMBOL", "BTREE_SYMBOL", "CASCADED_SYMBOL", 
                      "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGED_SYMBOL", 
                      "CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL", 
                      "CLASS_ORIGIN_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", 
                      "COLLATION_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", 
                      "COLUMNS_SYMBOL", "COMMITTED_SYMBOL", "COMPACT_SYMBOL", 
                      "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
                      "ENCRYPTION_SYMBOL", "CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", 
                      "CONSISTENT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", 
                      "CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
                      "CONTEXT_SYMBOL", "CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", 
                      "CUBE_SYMBOL", "CURRENT_SYMBOL", "CURSOR_NAME_SYMBOL", 
                      "DATA_SYMBOL", "DATAFILE_SYMBOL", "DATETIME_SYMBOL", 
                      "DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL", 
                      "DEFINER_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", 
                      "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
                      "DISCARD_SYMBOL", "DISK_SYMBOL", "DUMPFILE_SYMBOL", 
                      "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL", 
                      "ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", 
                      "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPE_SYMBOL", 
                      "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL", 
                      "EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", 
                      "FAULTS_SYMBOL", "FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", 
                      "FULL_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
                      "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "GENERAL_SYMBOL", 
                      "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL", 
                      "GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", 
                      "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", 
                      "INVOKER_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
                      "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL", 
                      "IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", 
                      "INSERT_METHOD_SYMBOL", "JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", 
                      "LAST_SYMBOL", "LEAVES_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", 
                      "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL", 
                      "LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", 
                      "MASTER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
                      "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
                      "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
                      "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
                      "MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", 
                      "MASTER_SSL_SYMBOL", "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
                      "MASTER_TLS_VERSION_SYMBOL", "MASTER_SSL_CERT_SYMBOL", 
                      "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
                      "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
                      "MASTER_AUTO_POSITION_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", 
                      "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
                      "MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
                      "MAX_USER_CONNECTIONS_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
                      "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
                      "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
                      "MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
                      "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", 
                      "MYSQL_ERRNO_SYMBOL", "NAME_SYMBOL", "NAMES_SYMBOL", 
                      "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
                      "NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", 
                      "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NUMBER_SYMBOL", 
                      "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
                      "ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", 
                      "PAGE_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", 
                      "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
                      "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", 
                      "POINT_SYMBOL", "POLYGON_SYMBOL", "PRESERVE_SYMBOL", 
                      "PREV_SYMBOL", "PRIVILEGES_SYMBOL", "PROCESS_SYMBOL", 
                      "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", 
                      "PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", 
                      "QUICK_SYMBOL", "READ_ONLY_SYMBOL", "REBUILD_SYMBOL", 
                      "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL", 
                      "REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
                      "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
                      "RELOAD_SYMBOL", "REORGANIZE_SYMBOL", "REPEATABLE_SYMBOL", 
                      "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
                      "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", 
                      "RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL", 
                      "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", 
                      "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", 
                      "RTREE_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL", 
                      "SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL", 
                      "SESSION_SYMBOL", "SIMPLE_SYMBOL", "SHARE_SYMBOL", 
                      "SLOW_SYMBOL", "SNAPSHOT_SYMBOL", "SOUNDS_SYMBOL", 
                      "SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
                      "SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
                      "SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", 
                      "STARTS_SYMBOL", "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", 
                      "STATS_SAMPLE_PAGES_SYMBOL", "STATUS_SYMBOL", "STORAGE_SYMBOL", 
                      "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", 
                      "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL", 
                      "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", 
                      "SWITCHES_SYMBOL", "TABLE_NAME_SYMBOL", "TABLES_SYMBOL", 
                      "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", "TEMPORARY_SYMBOL", 
                      "TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", 
                      "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", 
                      "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", 
                      "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", 
                      "FUNCTION_SYMBOL", "UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", 
                      "UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL", "UNKNOWN_SYMBOL", 
                      "UNTIL_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", 
                      "USE_FRM_SYMBOL", "VARIABLES_SYMBOL", "VIEW_SYMBOL", 
                      "VALUE_SYMBOL", "WARNINGS_SYMBOL", "WAIT_SYMBOL", 
                      "WEEK_SYMBOL", "WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", 
                      "X509_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", "YEAR_SYMBOL", 
                      "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", 
                      "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
                      "ADD_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", 
                      "AND_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", "ASENSITIVE_SYMBOL", 
                      "BEFORE_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", 
                      "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
                      "BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", 
                      "BOTH_SYMBOL", "BY_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", 
                      "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL", "CHAR_SYMBOL", 
                      "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", 
                      "CONDITION_SYMBOL", "CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", 
                      "CONVERT_SYMBOL", "COUNT_SYMBOL", "CREATE_SYMBOL", 
                      "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL", 
                      "CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", 
                      "CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", 
                      "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DAY_HOUR_SYMBOL", 
                      "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
                      "DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", 
                      "DEFAULT_SYMBOL", "DELAYED_SYMBOL", "DELETE_SYMBOL", 
                      "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", 
                      "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", 
                      "DROP_SYMBOL", "DUAL_SYMBOL", "EACH_SYMBOL", "ELSE_SYMBOL", 
                      "ELSEIF_SYMBOL", "ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL", 
                      "ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", "EXISTS_SYMBOL", 
                      "EXIT_SYMBOL", "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", 
                      "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FETCH_SYMBOL", 
                      "FLOAT_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", 
                      "FOR_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL", "GET_SYMBOL", 
                      "GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_SYMBOL", 
                      "GROUP_CONCAT_SYMBOL", "HAVING_SYMBOL", "HIGH_PRIORITY_SYMBOL", 
                      "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", "HOUR_SECOND_SYMBOL", 
                      "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL", 
                      "INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", 
                      "INSERT_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
                      "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
                      "IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", 
                      "JOIN_SYMBOL", "KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", 
                      "LEADING_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LIKE_SYMBOL", 
                      "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", "LOAD_SYMBOL", 
                      "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", 
                      "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", 
                      "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", "MASTER_BIND_SYMBOL", 
                      "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL", 
                      "MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", 
                      "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MID_SYMBOL", 
                      "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
                      "MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", 
                      "NCHAR_STRING_SYMBOL", "NEG_SYMBOL", "NONBLOCKING_SYMBOL", 
                      "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
                      "NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", 
                      "ON_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPTIMIZE_SYMBOL", 
                      "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", 
                      "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
                      "OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", 
                      "PRIMARY_SYMBOL", "PROCEDURE_SYMBOL", "PURGE_SYMBOL", 
                      "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL", 
                      "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
                      "RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", 
                      "REPLACE_SYMBOL", "REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", 
                      "RESTRICT_SYMBOL", "RETURN_SYMBOL", "REVOKE_SYMBOL", 
                      "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL", 
                      "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", 
                      "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
                      "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL", 
                      "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
                      "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", 
                      "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", 
                      "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL", "STDDEV_SAMP_SYMBOL", 
                      "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
                      "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", 
                      "SUBSTRING_SYMBOL", "SUM_SYMBOL", "SYSDATE_SYMBOL", 
                      "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
                      "TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", 
                      "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
                      "TO_SYMBOL", "TRAILING_SYMBOL", "TRIGGER_SYMBOL", 
                      "TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", 
                      "UNIQUE_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", 
                      "UPDATE_SYMBOL", "USAGE_SYMBOL", "USE_SYMBOL", "USING_SYMBOL", 
                      "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
                      "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", 
                      "VARCHAR_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", 
                      "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIRTUAL_SYMBOL", 
                      "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", 
                      "WITHOUT_SYMBOL", "WRITE_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", 
                      "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", 
                      "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", 
                      "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", 
                      "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", 
                      "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", 
                      "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", 
                      "REMOTE_SYMBOL", "CLONE_SYMBOL", "CUME_DIST_SYMBOL", 
                      "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", 
                      "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", 
                      "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", 
                      "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", 
                      "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL", 
                      "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", 
                      "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", 
                      "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", "ORDINALITY_SYMBOL", 
                      "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL", "SRID_SYMBOL", 
                      "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", 
                      "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
                      "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", 
                      "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", 
                      "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", "SECONDARY_LOAD_SYMBOL", 
                      "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
                      "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
                      "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", 
                      "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                      "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
                      "MASTER_TLS_CIPHERSUITES_SYMBOL", "WHITESPACE", "INVALID_INPUT", 
                      "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
                      "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", 
                      "VERSION_COMMENT_START", "MYSQL_COMMENT_START", "VERSION_COMMENT_END", 
                      "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
                      "NOT_EQUAL2_OPERATOR" ];

var ruleNames =  [ "query", "simpleStatement", "alterStatement", "alterDatabase", 
                   "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", 
                   "alterLogfileGroupOption", "alterServer", "alterTable", 
                   "alterTableActions", "alterCommandList", "alterCommandsModifierList", 
                   "standaloneAlterCommands", "alterPartition", "alterList", 
                   "alterCommandsModifier", "alterListItem", "place", "restrict", 
                   "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
                   "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
                   "allOrPartitionNameList", "reorgPartitionRule", "alterTablespace", 
                   "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
                   "alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
                   "alterView", "viewTail", "viewSelect", "viewCheckOption", 
                   "createStatement", "createDatabase", "createDatabaseOption", 
                   "createTable", "tableElementList", "tableElement", "duplicateAsQueryExpression", 
                   "queryExpressionOrParens", "createRoutine", "createProcedure", 
                   "createFunction", "createUdf", "routineCreateOption", 
                   "routineAlterOptions", "routineOption", "createIndex", 
                   "indexNameAndType", "createIndexTarget", "createLogfileGroup", 
                   "logfileGroupOptions", "logfileGroupOption", "createServer", 
                   "serverOptions", "serverOption", "createTablespace", 
                   "createUndoTablespace", "tsDataFileName", "tsDataFile", 
                   "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize", 
                   "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
                   "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", 
                   "tsOptionEngine", "tsOptionWait", "tsOptionComment", 
                   "tsOptionFileblockSize", "tsOptionEncryption", "createView", 
                   "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", 
                   "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
                   "createRole", "createSpatialReference", "srsAttribute", 
                   "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
                   "dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
                   "dropServer", "dropTable", "dropTableSpace", "dropTrigger", 
                   "dropView", "dropRole", "dropSpatialReference", "dropUndoTablespace", 
                   "renameTableStatement", "renamePair", "truncateTableStatement", 
                   "importStatement", "callStatement", "deleteStatement", 
                   "partitionDelete", "deleteStatementOption", "doStatement", 
                   "handlerStatement", "handlerReadOrScan", "insertStatement", 
                   "insertLockOption", "insertFromConstructor", "fields", 
                   "insertValues", "insertQueryExpression", "valueList", 
                   "values", "valuesReference", "insertUpdateList", "loadStatement", 
                   "dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", 
                   "loadDataFileTargetList", "fieldOrVariableList", "replaceStatement", 
                   "selectStatement", "selectStatementWithInto", "queryExpression", 
                   "queryExpressionBody", "queryExpressionParens", "querySpecification", 
                   "subquery", "querySpecOption", "limitClause", "simpleLimitClause", 
                   "limitOptions", "limitOption", "intoClause", "procedureAnalyseClause", 
                   "havingClause", "windowClause", "windowDefinition", "windowSpec", 
                   "windowSpecDetails", "windowFrameClause", "windowFrameUnits", 
                   "windowFrameExtent", "windowFrameStart", "windowFrameBetween", 
                   "windowFrameBound", "windowFrameExclusion", "withClause", 
                   "commonTableExpression", "groupByClause", "olapOption", 
                   "orderClause", "direction", "fromClause", "tableReferenceList", 
                   "selectOption", "lockingClause", "lockStrengh", "lockedRowAction", 
                   "selectItemList", "selectItem", "selectAlias", "whereClause", 
                   "tableReference", "escapedTableReference", "joinedTable", 
                   "naturalJoinType", "innerJoinType", "outerJoinType", 
                   "tableFactor", "singleTable", "singleTableParens", "derivedTable", 
                   "tableReferenceListParens", "tableFunction", "columnsClause", 
                   "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
                   "unionOption", "tableAlias", "indexHintList", "indexHint", 
                   "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
                   "indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
                   "transactionStatement", "beginWork", "transactionCharacteristic", 
                   "savepointStatement", "lockStatement", "lockItem", "lockOption", 
                   "xaStatement", "xaConvert", "xid", "replicationStatement", 
                   "resetOption", "masterResetOptions", "replicationLoad", 
                   "changeMaster", "changeMasterOptions", "masterOption", 
                   "privilegeCheckDef", "masterTlsCiphersuitesDef", "masterFileDef", 
                   "serverIdList", "changeReplication", "filterDefinition", 
                   "filterDbList", "filterTableList", "filterStringList", 
                   "filterWildDbTableString", "filterDbPairList", "slave", 
                   "slaveUntilOptions", "slaveConnectionOptions", "slaveThreadOptions", 
                   "slaveThreadOption", "groupReplication", "preparedStatement", 
                   "executeStatement", "executeVarList", "cloneStatement", 
                   "dataDirSSL", "ssl", "accountManagementStatement", "alterUser", 
                   "alterUserTail", "userFunction", "createUser", "createUserTail", 
                   "defaultRoleClause", "requireClause", "connectOptions", 
                   "accountLockPasswordExpireOptions", "dropUser", "grant", 
                   "grantTargetList", "grantOptions", "exceptRoleList", 
                   "withRoles", "grantAs", "versionedRequireClause", "renameUser", 
                   "revoke", "onTypeTo", "aclType", "roleOrPrivilegesList", 
                   "roleOrPrivilege", "grantIdentifier", "requireList", 
                   "requireListElement", "grantOption", "setRole", "roleList", 
                   "role", "tableAdministrationStatement", "histogram", 
                   "checkOption", "repairType", "installUninstallStatment", 
                   "setStatement", "startOptionValueList", "transactionCharacteristics", 
                   "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
                   "optionValueNoOptionType", "optionValue", "setSystemVariable", 
                   "startOptionValueListFollowingOptionType", "optionValueFollowingOptionType", 
                   "setExprOrDefault", "showStatement", "showCommandType", 
                   "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
                   "keyCacheListOrParts", "keyCacheList", "assignToKeycache", 
                   "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
                   "keyUsageList", "flushOption", "logType", "flushTables", 
                   "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
                   "adminPartition", "resourceGroupManagement", "createResourceGroup", 
                   "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
                   "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
                   "threadIdList", "dropResourceGroup", "utilityStatement", 
                   "describeCommand", "explainCommand", "explainableStatement", 
                   "helpCommand", "useCommand", "restartServer", "expr", 
                   "boolPri", "compOp", "predicate", "predicateOperations", 
                   "bitExpr", "simpleExpr", "arrayCast", "jsonOperator", 
                   "sumExpr", "groupingOperation", "windowFunctionCall", 
                   "windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", 
                   "inSumExpr", "identListArg", "identList", "fulltextOptions", 
                   "runtimeFunctionCall", "geometryFunction", "timeFunctionParameters", 
                   "fractionalPrecision", "weightStringLevels", "weightStringLevelListItem", 
                   "dateTimeTtype", "trimFunction", "substringFunction", 
                   "functionCall", "udfExprList", "udfExpr", "variable", 
                   "userVariable", "systemVariable", "internalVariableName", 
                   "whenExpression", "thenExpression", "elseExpression", 
                   "castType", "exprList", "charset", "notRule", "not2Rule", 
                   "interval", "intervalTimeStamp", "exprListWithParentheses", 
                   "exprWithParentheses", "simpleExprWithParentheses", "orderList", 
                   "orderExpression", "groupList", "groupingExpression", 
                   "channel", "compoundStatement", "returnStatement", "ifStatement", 
                   "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
                   "elseStatement", "labeledBlock", "unlabeledBlock", "label", 
                   "beginEndBlock", "labeledControl", "unlabeledControl", 
                   "loopBlock", "whileDoBlock", "repeatUntilBlock", "spDeclarations", 
                   "spDeclaration", "variableDeclaration", "conditionDeclaration", 
                   "spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", 
                   "cursorDeclaration", "iterateStatement", "leaveStatement", 
                   "getDiagnostics", "signalAllowedExpr", "statementInformationItem", 
                   "conditionInformationItem", "signalInformationItemName", 
                   "signalStatement", "resignalStatement", "signalInformationItem", 
                   "cursorOpen", "cursorClose", "cursorFetch", "schedule", 
                   "columnDefinition", "checkOrReferences", "checkConstraint", 
                   "constraintEnforcement", "tableConstraintDef", "constraintName", 
                   "fieldDefinition", "columnAttribute", "columnFormat", 
                   "storageMedia", "gcolAttribute", "references", "deleteOption", 
                   "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
                   "keyListVariants", "indexType", "indexOption", "commonIndexOption", 
                   "visibility", "indexTypeClause", "fulltextIndexOption", 
                   "spatialIndexOption", "dataTypeDefinition", "dataType", 
                   "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
                   "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
                   "charsetName", "collationName", "createTableOptions", 
                   "createTableOptionsSpaceSeparated", "createTableOption", 
                   "ternaryOption", "defaultCollation", "defaultEncryption", 
                   "defaultCharset", "partitionClause", "partitionTypeDef", 
                   "subPartitions", "partitionKeyAlgorithm", "partitionDefinitions", 
                   "partitionDefinition", "partitionValuesIn", "partitionOption", 
                   "subpartitionDefinition", "partitionValueItemListParen", 
                   "partitionValueItem", "definerClause", "ifExists", "ifNotExists", 
                   "procedureParameter", "functionParameter", "collate", 
                   "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
                   "updateList", "updateElement", "charsetClause", "fieldsClause", 
                   "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
                   "alterUserList", "createUserEntry", "alterUserEntry", 
                   "retainCurrentPassword", "discardOldPassword", "replacePassword", 
                   "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
                   "onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
                   "columnName", "columnInternalRef", "columnInternalRefList", 
                   "columnRef", "insertIdentifier", "indexName", "indexRef", 
                   "tableWild", "schemaName", "schemaRef", "procedureName", 
                   "procedureRef", "functionName", "functionRef", "triggerName", 
                   "triggerRef", "viewName", "viewRef", "tablespaceName", 
                   "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
                   "eventName", "eventRef", "udfName", "serverName", "serverRef", 
                   "engineRef", "tableName", "filterTableRef", "tableRefWithWildcard", 
                   "tableRef", "tableRefList", "tableAliasRefList", "parameterName", 
                   "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
                   "pluginRef", "componentRef", "resourceGroupRef", "windowName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "ulong_number", "real_ulong_number", "ulonglong_number", 
                   "real_ulonglong_number", "literal", "signedLiteral", 
                   "stringList", "textStringLiteral", "textString", "textStringHash", 
                   "textLiteral", "textStringNoLinebreak", "textStringLiteralList", 
                   "numLiteral", "boolLiteral", "nullLiteral", "temporalLiteral", 
                   "floatOptions", "standardFloatOptions", "precision", 
                   "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
                   "sizeNumber", "parentheses", "equal", "optionType", "varIdentType", 
                   "setVarIdentType", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
                   "identifierKeywordsAmbiguous2Labels", "labelKeyword", 
                   "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
                   "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
                   "roleOrIdentifierKeyword", "roleOrLabelKeyword" ];

function MySQLParser (input) {
	MySQLBaseRecognizer.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

MySQLParser.prototype = Object.create(MySQLBaseRecognizer.prototype);
MySQLParser.prototype.constructor = MySQLParser;

Object.defineProperty(MySQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

MySQLParser.EOF = antlr4.Token.EOF;
MySQLParser.ACCOUNT_SYMBOL = 1;
MySQLParser.ASCII_SYMBOL = 2;
MySQLParser.ALWAYS_SYMBOL = 3;
MySQLParser.BACKUP_SYMBOL = 4;
MySQLParser.BEGIN_SYMBOL = 5;
MySQLParser.BYTE_SYMBOL = 6;
MySQLParser.CACHE_SYMBOL = 7;
MySQLParser.CHARSET_SYMBOL = 8;
MySQLParser.CHECKSUM_SYMBOL = 9;
MySQLParser.CLOSE_SYMBOL = 10;
MySQLParser.COMMENT_SYMBOL = 11;
MySQLParser.COMMIT_SYMBOL = 12;
MySQLParser.CONTAINS_SYMBOL = 13;
MySQLParser.DEALLOCATE_SYMBOL = 14;
MySQLParser.DO_SYMBOL = 15;
MySQLParser.END_SYMBOL = 16;
MySQLParser.EXECUTE_SYMBOL = 17;
MySQLParser.FLUSH_SYMBOL = 18;
MySQLParser.FOLLOWS_SYMBOL = 19;
MySQLParser.FORMAT_SYMBOL = 20;
MySQLParser.GROUP_REPLICATION_SYMBOL = 21;
MySQLParser.HANDLER_SYMBOL = 22;
MySQLParser.HELP_SYMBOL = 23;
MySQLParser.HOST_SYMBOL = 24;
MySQLParser.INSTALL_SYMBOL = 25;
MySQLParser.LANGUAGE_SYMBOL = 26;
MySQLParser.NO_SYMBOL = 27;
MySQLParser.OPEN_SYMBOL = 28;
MySQLParser.OPTIONS_SYMBOL = 29;
MySQLParser.OWNER_SYMBOL = 30;
MySQLParser.PARSER_SYMBOL = 31;
MySQLParser.PARTITION_SYMBOL = 32;
MySQLParser.PORT_SYMBOL = 33;
MySQLParser.PRECEDES_SYMBOL = 34;
MySQLParser.PREPARE_SYMBOL = 35;
MySQLParser.REMOVE_SYMBOL = 36;
MySQLParser.REPAIR_SYMBOL = 37;
MySQLParser.RESET_SYMBOL = 38;
MySQLParser.RESTORE_SYMBOL = 39;
MySQLParser.ROLLBACK_SYMBOL = 40;
MySQLParser.SAVEPOINT_SYMBOL = 41;
MySQLParser.SECURITY_SYMBOL = 42;
MySQLParser.SERVER_SYMBOL = 43;
MySQLParser.SIGNED_SYMBOL = 44;
MySQLParser.SLAVE_SYMBOL = 45;
MySQLParser.SOCKET_SYMBOL = 46;
MySQLParser.SONAME_SYMBOL = 47;
MySQLParser.START_SYMBOL = 48;
MySQLParser.STOP_SYMBOL = 49;
MySQLParser.TRUNCATE_SYMBOL = 50;
MySQLParser.UNICODE_SYMBOL = 51;
MySQLParser.UNINSTALL_SYMBOL = 52;
MySQLParser.UPGRADE_SYMBOL = 53;
MySQLParser.WRAPPER_SYMBOL = 54;
MySQLParser.XA_SYMBOL = 55;
MySQLParser.SHUTDOWN_SYMBOL = 56;
MySQLParser.ACTION_SYMBOL = 57;
MySQLParser.ADDDATE_SYMBOL = 58;
MySQLParser.AFTER_SYMBOL = 59;
MySQLParser.AGAINST_SYMBOL = 60;
MySQLParser.AGGREGATE_SYMBOL = 61;
MySQLParser.ALGORITHM_SYMBOL = 62;
MySQLParser.ANALYZE_SYMBOL = 63;
MySQLParser.ANY_SYMBOL = 64;
MySQLParser.AT_SYMBOL = 65;
MySQLParser.AUTHORS_SYMBOL = 66;
MySQLParser.AUTO_INCREMENT_SYMBOL = 67;
MySQLParser.AUTOEXTEND_SIZE_SYMBOL = 68;
MySQLParser.AVG_ROW_LENGTH_SYMBOL = 69;
MySQLParser.AVG_SYMBOL = 70;
MySQLParser.BINLOG_SYMBOL = 71;
MySQLParser.BIT_SYMBOL = 72;
MySQLParser.BLOCK_SYMBOL = 73;
MySQLParser.BOOL_SYMBOL = 74;
MySQLParser.BOOLEAN_SYMBOL = 75;
MySQLParser.BTREE_SYMBOL = 76;
MySQLParser.CASCADED_SYMBOL = 77;
MySQLParser.CATALOG_NAME_SYMBOL = 78;
MySQLParser.CHAIN_SYMBOL = 79;
MySQLParser.CHANGED_SYMBOL = 80;
MySQLParser.CHANNEL_SYMBOL = 81;
MySQLParser.CIPHER_SYMBOL = 82;
MySQLParser.CLIENT_SYMBOL = 83;
MySQLParser.CLASS_ORIGIN_SYMBOL = 84;
MySQLParser.COALESCE_SYMBOL = 85;
MySQLParser.CODE_SYMBOL = 86;
MySQLParser.COLLATION_SYMBOL = 87;
MySQLParser.COLUMN_NAME_SYMBOL = 88;
MySQLParser.COLUMN_FORMAT_SYMBOL = 89;
MySQLParser.COLUMNS_SYMBOL = 90;
MySQLParser.COMMITTED_SYMBOL = 91;
MySQLParser.COMPACT_SYMBOL = 92;
MySQLParser.COMPLETION_SYMBOL = 93;
MySQLParser.COMPRESSED_SYMBOL = 94;
MySQLParser.COMPRESSION_SYMBOL = 95;
MySQLParser.ENCRYPTION_SYMBOL = 96;
MySQLParser.CONCURRENT_SYMBOL = 97;
MySQLParser.CONNECTION_SYMBOL = 98;
MySQLParser.CONSISTENT_SYMBOL = 99;
MySQLParser.CONSTRAINT_CATALOG_SYMBOL = 100;
MySQLParser.CONSTRAINT_SCHEMA_SYMBOL = 101;
MySQLParser.CONSTRAINT_NAME_SYMBOL = 102;
MySQLParser.CONTEXT_SYMBOL = 103;
MySQLParser.CONTRIBUTORS_SYMBOL = 104;
MySQLParser.CPU_SYMBOL = 105;
MySQLParser.CUBE_SYMBOL = 106;
MySQLParser.CURRENT_SYMBOL = 107;
MySQLParser.CURSOR_NAME_SYMBOL = 108;
MySQLParser.DATA_SYMBOL = 109;
MySQLParser.DATAFILE_SYMBOL = 110;
MySQLParser.DATETIME_SYMBOL = 111;
MySQLParser.DATE_SYMBOL = 112;
MySQLParser.DAY_SYMBOL = 113;
MySQLParser.DEFAULT_AUTH_SYMBOL = 114;
MySQLParser.DEFINER_SYMBOL = 115;
MySQLParser.DELAY_KEY_WRITE_SYMBOL = 116;
MySQLParser.DES_KEY_FILE_SYMBOL = 117;
MySQLParser.DIAGNOSTICS_SYMBOL = 118;
MySQLParser.DIRECTORY_SYMBOL = 119;
MySQLParser.DISABLE_SYMBOL = 120;
MySQLParser.DISCARD_SYMBOL = 121;
MySQLParser.DISK_SYMBOL = 122;
MySQLParser.DUMPFILE_SYMBOL = 123;
MySQLParser.DUPLICATE_SYMBOL = 124;
MySQLParser.DYNAMIC_SYMBOL = 125;
MySQLParser.ENDS_SYMBOL = 126;
MySQLParser.ENUM_SYMBOL = 127;
MySQLParser.ENGINE_SYMBOL = 128;
MySQLParser.ENGINES_SYMBOL = 129;
MySQLParser.ERROR_SYMBOL = 130;
MySQLParser.ERRORS_SYMBOL = 131;
MySQLParser.ESCAPE_SYMBOL = 132;
MySQLParser.EVENT_SYMBOL = 133;
MySQLParser.EVENTS_SYMBOL = 134;
MySQLParser.EVERY_SYMBOL = 135;
MySQLParser.EXPANSION_SYMBOL = 136;
MySQLParser.EXPORT_SYMBOL = 137;
MySQLParser.EXTENDED_SYMBOL = 138;
MySQLParser.EXTENT_SIZE_SYMBOL = 139;
MySQLParser.FAULTS_SYMBOL = 140;
MySQLParser.FAST_SYMBOL = 141;
MySQLParser.FOUND_SYMBOL = 142;
MySQLParser.ENABLE_SYMBOL = 143;
MySQLParser.FULL_SYMBOL = 144;
MySQLParser.FILE_SYMBOL = 145;
MySQLParser.FILE_BLOCK_SIZE_SYMBOL = 146;
MySQLParser.FILTER_SYMBOL = 147;
MySQLParser.FIRST_SYMBOL = 148;
MySQLParser.FIXED_SYMBOL = 149;
MySQLParser.GENERAL_SYMBOL = 150;
MySQLParser.GEOMETRY_SYMBOL = 151;
MySQLParser.GEOMETRYCOLLECTION_SYMBOL = 152;
MySQLParser.GET_FORMAT_SYMBOL = 153;
MySQLParser.GRANTS_SYMBOL = 154;
MySQLParser.GLOBAL_SYMBOL = 155;
MySQLParser.HASH_SYMBOL = 156;
MySQLParser.HOSTS_SYMBOL = 157;
MySQLParser.HOUR_SYMBOL = 158;
MySQLParser.IDENTIFIED_SYMBOL = 159;
MySQLParser.IGNORE_SERVER_IDS_SYMBOL = 160;
MySQLParser.INVOKER_SYMBOL = 161;
MySQLParser.IMPORT_SYMBOL = 162;
MySQLParser.INDEXES_SYMBOL = 163;
MySQLParser.INITIAL_SIZE_SYMBOL = 164;
MySQLParser.INSTANCE_SYMBOL = 165;
MySQLParser.INNODB_SYMBOL = 166;
MySQLParser.IO_SYMBOL = 167;
MySQLParser.IPC_SYMBOL = 168;
MySQLParser.ISOLATION_SYMBOL = 169;
MySQLParser.ISSUER_SYMBOL = 170;
MySQLParser.INSERT_METHOD_SYMBOL = 171;
MySQLParser.JSON_SYMBOL = 172;
MySQLParser.KEY_BLOCK_SIZE_SYMBOL = 173;
MySQLParser.LAST_SYMBOL = 174;
MySQLParser.LEAVES_SYMBOL = 175;
MySQLParser.LESS_SYMBOL = 176;
MySQLParser.LEVEL_SYMBOL = 177;
MySQLParser.LINESTRING_SYMBOL = 178;
MySQLParser.LIST_SYMBOL = 179;
MySQLParser.LOCAL_SYMBOL = 180;
MySQLParser.LOCKS_SYMBOL = 181;
MySQLParser.LOGFILE_SYMBOL = 182;
MySQLParser.LOGS_SYMBOL = 183;
MySQLParser.MAX_ROWS_SYMBOL = 184;
MySQLParser.MASTER_SYMBOL = 185;
MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL = 186;
MySQLParser.MASTER_HOST_SYMBOL = 187;
MySQLParser.MASTER_PORT_SYMBOL = 188;
MySQLParser.MASTER_LOG_FILE_SYMBOL = 189;
MySQLParser.MASTER_LOG_POS_SYMBOL = 190;
MySQLParser.MASTER_USER_SYMBOL = 191;
MySQLParser.MASTER_PASSWORD_SYMBOL = 192;
MySQLParser.MASTER_SERVER_ID_SYMBOL = 193;
MySQLParser.MASTER_CONNECT_RETRY_SYMBOL = 194;
MySQLParser.MASTER_RETRY_COUNT_SYMBOL = 195;
MySQLParser.MASTER_DELAY_SYMBOL = 196;
MySQLParser.MASTER_SSL_SYMBOL = 197;
MySQLParser.MASTER_SSL_CA_SYMBOL = 198;
MySQLParser.MASTER_SSL_CAPATH_SYMBOL = 199;
MySQLParser.MASTER_TLS_VERSION_SYMBOL = 200;
MySQLParser.MASTER_SSL_CERT_SYMBOL = 201;
MySQLParser.MASTER_SSL_CIPHER_SYMBOL = 202;
MySQLParser.MASTER_SSL_CRL_SYMBOL = 203;
MySQLParser.MASTER_SSL_CRLPATH_SYMBOL = 204;
MySQLParser.MASTER_SSL_KEY_SYMBOL = 205;
MySQLParser.MASTER_AUTO_POSITION_SYMBOL = 206;
MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL = 207;
MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL = 208;
MySQLParser.MAX_STATEMENT_TIME_SYMBOL = 209;
MySQLParser.MAX_SIZE_SYMBOL = 210;
MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL = 211;
MySQLParser.MAX_USER_CONNECTIONS_SYMBOL = 212;
MySQLParser.MEDIUM_SYMBOL = 213;
MySQLParser.MEMORY_SYMBOL = 214;
MySQLParser.MERGE_SYMBOL = 215;
MySQLParser.MESSAGE_TEXT_SYMBOL = 216;
MySQLParser.MICROSECOND_SYMBOL = 217;
MySQLParser.MIGRATE_SYMBOL = 218;
MySQLParser.MINUTE_SYMBOL = 219;
MySQLParser.MIN_ROWS_SYMBOL = 220;
MySQLParser.MODIFY_SYMBOL = 221;
MySQLParser.MODE_SYMBOL = 222;
MySQLParser.MONTH_SYMBOL = 223;
MySQLParser.MULTILINESTRING_SYMBOL = 224;
MySQLParser.MULTIPOINT_SYMBOL = 225;
MySQLParser.MULTIPOLYGON_SYMBOL = 226;
MySQLParser.MUTEX_SYMBOL = 227;
MySQLParser.MYSQL_ERRNO_SYMBOL = 228;
MySQLParser.NAME_SYMBOL = 229;
MySQLParser.NAMES_SYMBOL = 230;
MySQLParser.NATIONAL_SYMBOL = 231;
MySQLParser.NCHAR_SYMBOL = 232;
MySQLParser.NDBCLUSTER_SYMBOL = 233;
MySQLParser.NEVER_SYMBOL = 234;
MySQLParser.NEXT_SYMBOL = 235;
MySQLParser.NEW_SYMBOL = 236;
MySQLParser.NO_WAIT_SYMBOL = 237;
MySQLParser.NODEGROUP_SYMBOL = 238;
MySQLParser.NONE_SYMBOL = 239;
MySQLParser.NUMBER_SYMBOL = 240;
MySQLParser.NVARCHAR_SYMBOL = 241;
MySQLParser.OFFSET_SYMBOL = 242;
MySQLParser.OLD_PASSWORD_SYMBOL = 243;
MySQLParser.ONE_SHOT_SYMBOL = 244;
MySQLParser.ONE_SYMBOL = 245;
MySQLParser.PACK_KEYS_SYMBOL = 246;
MySQLParser.PAGE_SYMBOL = 247;
MySQLParser.PARTIAL_SYMBOL = 248;
MySQLParser.PARTITIONING_SYMBOL = 249;
MySQLParser.PARTITIONS_SYMBOL = 250;
MySQLParser.PASSWORD_SYMBOL = 251;
MySQLParser.PHASE_SYMBOL = 252;
MySQLParser.PLUGIN_DIR_SYMBOL = 253;
MySQLParser.PLUGIN_SYMBOL = 254;
MySQLParser.PLUGINS_SYMBOL = 255;
MySQLParser.POINT_SYMBOL = 256;
MySQLParser.POLYGON_SYMBOL = 257;
MySQLParser.PRESERVE_SYMBOL = 258;
MySQLParser.PREV_SYMBOL = 259;
MySQLParser.PRIVILEGES_SYMBOL = 260;
MySQLParser.PROCESS_SYMBOL = 261;
MySQLParser.PROCESSLIST_SYMBOL = 262;
MySQLParser.PROFILE_SYMBOL = 263;
MySQLParser.PROFILES_SYMBOL = 264;
MySQLParser.PROXY_SYMBOL = 265;
MySQLParser.QUARTER_SYMBOL = 266;
MySQLParser.QUERY_SYMBOL = 267;
MySQLParser.QUICK_SYMBOL = 268;
MySQLParser.READ_ONLY_SYMBOL = 269;
MySQLParser.REBUILD_SYMBOL = 270;
MySQLParser.RECOVER_SYMBOL = 271;
MySQLParser.REDO_BUFFER_SIZE_SYMBOL = 272;
MySQLParser.REDOFILE_SYMBOL = 273;
MySQLParser.REDUNDANT_SYMBOL = 274;
MySQLParser.RELAY_SYMBOL = 275;
MySQLParser.RELAYLOG_SYMBOL = 276;
MySQLParser.RELAY_LOG_FILE_SYMBOL = 277;
MySQLParser.RELAY_LOG_POS_SYMBOL = 278;
MySQLParser.RELAY_THREAD_SYMBOL = 279;
MySQLParser.RELOAD_SYMBOL = 280;
MySQLParser.REORGANIZE_SYMBOL = 281;
MySQLParser.REPEATABLE_SYMBOL = 282;
MySQLParser.REPLICATION_SYMBOL = 283;
MySQLParser.REPLICATE_DO_DB_SYMBOL = 284;
MySQLParser.REPLICATE_IGNORE_DB_SYMBOL = 285;
MySQLParser.REPLICATE_DO_TABLE_SYMBOL = 286;
MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL = 287;
MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL = 288;
MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 289;
MySQLParser.REPLICATE_REWRITE_DB_SYMBOL = 290;
MySQLParser.RESUME_SYMBOL = 291;
MySQLParser.RETURNED_SQLSTATE_SYMBOL = 292;
MySQLParser.RETURNS_SYMBOL = 293;
MySQLParser.REVERSE_SYMBOL = 294;
MySQLParser.ROLLUP_SYMBOL = 295;
MySQLParser.ROTATE_SYMBOL = 296;
MySQLParser.ROUTINE_SYMBOL = 297;
MySQLParser.ROWS_SYMBOL = 298;
MySQLParser.ROW_COUNT_SYMBOL = 299;
MySQLParser.ROW_FORMAT_SYMBOL = 300;
MySQLParser.ROW_SYMBOL = 301;
MySQLParser.RTREE_SYMBOL = 302;
MySQLParser.SCHEDULE_SYMBOL = 303;
MySQLParser.SCHEMA_NAME_SYMBOL = 304;
MySQLParser.SECOND_SYMBOL = 305;
MySQLParser.SERIAL_SYMBOL = 306;
MySQLParser.SERIALIZABLE_SYMBOL = 307;
MySQLParser.SESSION_SYMBOL = 308;
MySQLParser.SIMPLE_SYMBOL = 309;
MySQLParser.SHARE_SYMBOL = 310;
MySQLParser.SLOW_SYMBOL = 311;
MySQLParser.SNAPSHOT_SYMBOL = 312;
MySQLParser.SOUNDS_SYMBOL = 313;
MySQLParser.SOURCE_SYMBOL = 314;
MySQLParser.SQL_AFTER_GTIDS_SYMBOL = 315;
MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL = 316;
MySQLParser.SQL_BEFORE_GTIDS_SYMBOL = 317;
MySQLParser.SQL_CACHE_SYMBOL = 318;
MySQLParser.SQL_BUFFER_RESULT_SYMBOL = 319;
MySQLParser.SQL_NO_CACHE_SYMBOL = 320;
MySQLParser.SQL_THREAD_SYMBOL = 321;
MySQLParser.STACKED_SYMBOL = 322;
MySQLParser.STARTS_SYMBOL = 323;
MySQLParser.STATS_AUTO_RECALC_SYMBOL = 324;
MySQLParser.STATS_PERSISTENT_SYMBOL = 325;
MySQLParser.STATS_SAMPLE_PAGES_SYMBOL = 326;
MySQLParser.STATUS_SYMBOL = 327;
MySQLParser.STORAGE_SYMBOL = 328;
MySQLParser.STRING_SYMBOL = 329;
MySQLParser.SUBCLASS_ORIGIN_SYMBOL = 330;
MySQLParser.SUBDATE_SYMBOL = 331;
MySQLParser.SUBJECT_SYMBOL = 332;
MySQLParser.SUBPARTITION_SYMBOL = 333;
MySQLParser.SUBPARTITIONS_SYMBOL = 334;
MySQLParser.SUPER_SYMBOL = 335;
MySQLParser.SUSPEND_SYMBOL = 336;
MySQLParser.SWAPS_SYMBOL = 337;
MySQLParser.SWITCHES_SYMBOL = 338;
MySQLParser.TABLE_NAME_SYMBOL = 339;
MySQLParser.TABLES_SYMBOL = 340;
MySQLParser.TABLE_CHECKSUM_SYMBOL = 341;
MySQLParser.TABLESPACE_SYMBOL = 342;
MySQLParser.TEMPORARY_SYMBOL = 343;
MySQLParser.TEMPTABLE_SYMBOL = 344;
MySQLParser.TEXT_SYMBOL = 345;
MySQLParser.THAN_SYMBOL = 346;
MySQLParser.TRANSACTION_SYMBOL = 347;
MySQLParser.TRIGGERS_SYMBOL = 348;
MySQLParser.TIMESTAMP_SYMBOL = 349;
MySQLParser.TIMESTAMP_ADD_SYMBOL = 350;
MySQLParser.TIMESTAMP_DIFF_SYMBOL = 351;
MySQLParser.TIME_SYMBOL = 352;
MySQLParser.TYPES_SYMBOL = 353;
MySQLParser.TYPE_SYMBOL = 354;
MySQLParser.UDF_RETURNS_SYMBOL = 355;
MySQLParser.FUNCTION_SYMBOL = 356;
MySQLParser.UNCOMMITTED_SYMBOL = 357;
MySQLParser.UNDEFINED_SYMBOL = 358;
MySQLParser.UNDO_BUFFER_SIZE_SYMBOL = 359;
MySQLParser.UNDOFILE_SYMBOL = 360;
MySQLParser.UNKNOWN_SYMBOL = 361;
MySQLParser.UNTIL_SYMBOL = 362;
MySQLParser.USER_RESOURCES_SYMBOL = 363;
MySQLParser.USER_SYMBOL = 364;
MySQLParser.USE_FRM_SYMBOL = 365;
MySQLParser.VARIABLES_SYMBOL = 366;
MySQLParser.VIEW_SYMBOL = 367;
MySQLParser.VALUE_SYMBOL = 368;
MySQLParser.WARNINGS_SYMBOL = 369;
MySQLParser.WAIT_SYMBOL = 370;
MySQLParser.WEEK_SYMBOL = 371;
MySQLParser.WORK_SYMBOL = 372;
MySQLParser.WEIGHT_STRING_SYMBOL = 373;
MySQLParser.X509_SYMBOL = 374;
MySQLParser.XID_SYMBOL = 375;
MySQLParser.XML_SYMBOL = 376;
MySQLParser.YEAR_SYMBOL = 377;
MySQLParser.NOT2_SYMBOL = 378;
MySQLParser.CONCAT_PIPES_SYMBOL = 379;
MySQLParser.INT_NUMBER = 380;
MySQLParser.LONG_NUMBER = 381;
MySQLParser.ULONGLONG_NUMBER = 382;
MySQLParser.EQUAL_OPERATOR = 383;
MySQLParser.ASSIGN_OPERATOR = 384;
MySQLParser.NULL_SAFE_EQUAL_OPERATOR = 385;
MySQLParser.GREATER_OR_EQUAL_OPERATOR = 386;
MySQLParser.GREATER_THAN_OPERATOR = 387;
MySQLParser.LESS_OR_EQUAL_OPERATOR = 388;
MySQLParser.LESS_THAN_OPERATOR = 389;
MySQLParser.NOT_EQUAL_OPERATOR = 390;
MySQLParser.PLUS_OPERATOR = 391;
MySQLParser.MINUS_OPERATOR = 392;
MySQLParser.MULT_OPERATOR = 393;
MySQLParser.DIV_OPERATOR = 394;
MySQLParser.MOD_OPERATOR = 395;
MySQLParser.LOGICAL_NOT_OPERATOR = 396;
MySQLParser.BITWISE_NOT_OPERATOR = 397;
MySQLParser.SHIFT_LEFT_OPERATOR = 398;
MySQLParser.SHIFT_RIGHT_OPERATOR = 399;
MySQLParser.LOGICAL_AND_OPERATOR = 400;
MySQLParser.BITWISE_AND_OPERATOR = 401;
MySQLParser.BITWISE_XOR_OPERATOR = 402;
MySQLParser.LOGICAL_OR_OPERATOR = 403;
MySQLParser.BITWISE_OR_OPERATOR = 404;
MySQLParser.DOT_SYMBOL = 405;
MySQLParser.COMMA_SYMBOL = 406;
MySQLParser.SEMICOLON_SYMBOL = 407;
MySQLParser.COLON_SYMBOL = 408;
MySQLParser.OPEN_PAR_SYMBOL = 409;
MySQLParser.CLOSE_PAR_SYMBOL = 410;
MySQLParser.OPEN_CURLY_SYMBOL = 411;
MySQLParser.CLOSE_CURLY_SYMBOL = 412;
MySQLParser.UNDERLINE_SYMBOL = 413;
MySQLParser.JSON_SEPARATOR_SYMBOL = 414;
MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL = 415;
MySQLParser.AT_SIGN_SYMBOL = 416;
MySQLParser.AT_TEXT_SUFFIX = 417;
MySQLParser.AT_AT_SIGN_SYMBOL = 418;
MySQLParser.NULL2_SYMBOL = 419;
MySQLParser.PARAM_MARKER = 420;
MySQLParser.HEX_NUMBER = 421;
MySQLParser.BIN_NUMBER = 422;
MySQLParser.DECIMAL_NUMBER = 423;
MySQLParser.FLOAT_NUMBER = 424;
MySQLParser.ACCESSIBLE_SYMBOL = 425;
MySQLParser.ADD_SYMBOL = 426;
MySQLParser.ALL_SYMBOL = 427;
MySQLParser.ALTER_SYMBOL = 428;
MySQLParser.ANALYSE_SYMBOL = 429;
MySQLParser.AND_SYMBOL = 430;
MySQLParser.AS_SYMBOL = 431;
MySQLParser.ASC_SYMBOL = 432;
MySQLParser.ASENSITIVE_SYMBOL = 433;
MySQLParser.BEFORE_SYMBOL = 434;
MySQLParser.BETWEEN_SYMBOL = 435;
MySQLParser.BIGINT_SYMBOL = 436;
MySQLParser.BINARY_SYMBOL = 437;
MySQLParser.BIN_NUM_SYMBOL = 438;
MySQLParser.BIT_AND_SYMBOL = 439;
MySQLParser.BIT_OR_SYMBOL = 440;
MySQLParser.BIT_XOR_SYMBOL = 441;
MySQLParser.BLOB_SYMBOL = 442;
MySQLParser.BOTH_SYMBOL = 443;
MySQLParser.BY_SYMBOL = 444;
MySQLParser.CALL_SYMBOL = 445;
MySQLParser.CASCADE_SYMBOL = 446;
MySQLParser.CASE_SYMBOL = 447;
MySQLParser.CAST_SYMBOL = 448;
MySQLParser.CHANGE_SYMBOL = 449;
MySQLParser.CHAR_SYMBOL = 450;
MySQLParser.CHECK_SYMBOL = 451;
MySQLParser.COLLATE_SYMBOL = 452;
MySQLParser.COLUMN_SYMBOL = 453;
MySQLParser.CONDITION_SYMBOL = 454;
MySQLParser.CONSTRAINT_SYMBOL = 455;
MySQLParser.CONTINUE_SYMBOL = 456;
MySQLParser.CONVERT_SYMBOL = 457;
MySQLParser.COUNT_SYMBOL = 458;
MySQLParser.CREATE_SYMBOL = 459;
MySQLParser.CROSS_SYMBOL = 460;
MySQLParser.CURDATE_SYMBOL = 461;
MySQLParser.CURRENT_DATE_SYMBOL = 462;
MySQLParser.CURRENT_TIME_SYMBOL = 463;
MySQLParser.CURRENT_USER_SYMBOL = 464;
MySQLParser.CURSOR_SYMBOL = 465;
MySQLParser.CURTIME_SYMBOL = 466;
MySQLParser.DATABASE_SYMBOL = 467;
MySQLParser.DATABASES_SYMBOL = 468;
MySQLParser.DATE_ADD_SYMBOL = 469;
MySQLParser.DATE_SUB_SYMBOL = 470;
MySQLParser.DAY_HOUR_SYMBOL = 471;
MySQLParser.DAY_MICROSECOND_SYMBOL = 472;
MySQLParser.DAY_MINUTE_SYMBOL = 473;
MySQLParser.DAY_SECOND_SYMBOL = 474;
MySQLParser.DECIMAL_NUM_SYMBOL = 475;
MySQLParser.DECIMAL_SYMBOL = 476;
MySQLParser.DECLARE_SYMBOL = 477;
MySQLParser.DEFAULT_SYMBOL = 478;
MySQLParser.DELAYED_SYMBOL = 479;
MySQLParser.DELETE_SYMBOL = 480;
MySQLParser.DESC_SYMBOL = 481;
MySQLParser.DESCRIBE_SYMBOL = 482;
MySQLParser.DETERMINISTIC_SYMBOL = 483;
MySQLParser.DISTINCT_SYMBOL = 484;
MySQLParser.DIV_SYMBOL = 485;
MySQLParser.DOUBLE_SYMBOL = 486;
MySQLParser.DROP_SYMBOL = 487;
MySQLParser.DUAL_SYMBOL = 488;
MySQLParser.EACH_SYMBOL = 489;
MySQLParser.ELSE_SYMBOL = 490;
MySQLParser.ELSEIF_SYMBOL = 491;
MySQLParser.ENCLOSED_SYMBOL = 492;
MySQLParser.END_OF_INPUT_SYMBOL = 493;
MySQLParser.ESCAPED_SYMBOL = 494;
MySQLParser.EXCHANGE_SYMBOL = 495;
MySQLParser.EXISTS_SYMBOL = 496;
MySQLParser.EXIT_SYMBOL = 497;
MySQLParser.EXPIRE_SYMBOL = 498;
MySQLParser.EXPLAIN_SYMBOL = 499;
MySQLParser.EXTRACT_SYMBOL = 500;
MySQLParser.FALSE_SYMBOL = 501;
MySQLParser.FETCH_SYMBOL = 502;
MySQLParser.FLOAT_SYMBOL = 503;
MySQLParser.FORCE_SYMBOL = 504;
MySQLParser.FOREIGN_SYMBOL = 505;
MySQLParser.FOR_SYMBOL = 506;
MySQLParser.FROM_SYMBOL = 507;
MySQLParser.FULLTEXT_SYMBOL = 508;
MySQLParser.GET_SYMBOL = 509;
MySQLParser.GENERATED_SYMBOL = 510;
MySQLParser.GRANT_SYMBOL = 511;
MySQLParser.GROUP_SYMBOL = 512;
MySQLParser.GROUP_CONCAT_SYMBOL = 513;
MySQLParser.HAVING_SYMBOL = 514;
MySQLParser.HIGH_PRIORITY_SYMBOL = 515;
MySQLParser.HOUR_MICROSECOND_SYMBOL = 516;
MySQLParser.HOUR_MINUTE_SYMBOL = 517;
MySQLParser.HOUR_SECOND_SYMBOL = 518;
MySQLParser.IF_SYMBOL = 519;
MySQLParser.IGNORE_SYMBOL = 520;
MySQLParser.INDEX_SYMBOL = 521;
MySQLParser.INFILE_SYMBOL = 522;
MySQLParser.INNER_SYMBOL = 523;
MySQLParser.INOUT_SYMBOL = 524;
MySQLParser.INSENSITIVE_SYMBOL = 525;
MySQLParser.INSERT_SYMBOL = 526;
MySQLParser.INTERVAL_SYMBOL = 527;
MySQLParser.INTO_SYMBOL = 528;
MySQLParser.INT_SYMBOL = 529;
MySQLParser.IN_SYMBOL = 530;
MySQLParser.IO_AFTER_GTIDS_SYMBOL = 531;
MySQLParser.IO_BEFORE_GTIDS_SYMBOL = 532;
MySQLParser.IS_SYMBOL = 533;
MySQLParser.ITERATE_SYMBOL = 534;
MySQLParser.JOIN_SYMBOL = 535;
MySQLParser.KEYS_SYMBOL = 536;
MySQLParser.KEY_SYMBOL = 537;
MySQLParser.KILL_SYMBOL = 538;
MySQLParser.LEADING_SYMBOL = 539;
MySQLParser.LEAVE_SYMBOL = 540;
MySQLParser.LEFT_SYMBOL = 541;
MySQLParser.LIKE_SYMBOL = 542;
MySQLParser.LIMIT_SYMBOL = 543;
MySQLParser.LINEAR_SYMBOL = 544;
MySQLParser.LINES_SYMBOL = 545;
MySQLParser.LOAD_SYMBOL = 546;
MySQLParser.LOCATOR_SYMBOL = 547;
MySQLParser.LOCK_SYMBOL = 548;
MySQLParser.LONGBLOB_SYMBOL = 549;
MySQLParser.LONGTEXT_SYMBOL = 550;
MySQLParser.LONG_NUM_SYMBOL = 551;
MySQLParser.LONG_SYMBOL = 552;
MySQLParser.LOOP_SYMBOL = 553;
MySQLParser.LOW_PRIORITY_SYMBOL = 554;
MySQLParser.MASTER_BIND_SYMBOL = 555;
MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 556;
MySQLParser.MATCH_SYMBOL = 557;
MySQLParser.MAX_SYMBOL = 558;
MySQLParser.MAXVALUE_SYMBOL = 559;
MySQLParser.MEDIUMBLOB_SYMBOL = 560;
MySQLParser.MEDIUMINT_SYMBOL = 561;
MySQLParser.MEDIUMTEXT_SYMBOL = 562;
MySQLParser.MID_SYMBOL = 563;
MySQLParser.MINUTE_MICROSECOND_SYMBOL = 564;
MySQLParser.MINUTE_SECOND_SYMBOL = 565;
MySQLParser.MIN_SYMBOL = 566;
MySQLParser.MODIFIES_SYMBOL = 567;
MySQLParser.MOD_SYMBOL = 568;
MySQLParser.NATURAL_SYMBOL = 569;
MySQLParser.NCHAR_STRING_SYMBOL = 570;
MySQLParser.NEG_SYMBOL = 571;
MySQLParser.NONBLOCKING_SYMBOL = 572;
MySQLParser.NOT_SYMBOL = 573;
MySQLParser.NOW_SYMBOL = 574;
MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL = 575;
MySQLParser.NULL_SYMBOL = 576;
MySQLParser.NUMERIC_SYMBOL = 577;
MySQLParser.OFFLINE_SYMBOL = 578;
MySQLParser.ON_SYMBOL = 579;
MySQLParser.ONLINE_SYMBOL = 580;
MySQLParser.ONLY_SYMBOL = 581;
MySQLParser.OPTIMIZE_SYMBOL = 582;
MySQLParser.OPTIMIZER_COSTS_SYMBOL = 583;
MySQLParser.OPTION_SYMBOL = 584;
MySQLParser.OPTIONALLY_SYMBOL = 585;
MySQLParser.ORDER_SYMBOL = 586;
MySQLParser.OR_SYMBOL = 587;
MySQLParser.OUTER_SYMBOL = 588;
MySQLParser.OUTFILE_SYMBOL = 589;
MySQLParser.OUT_SYMBOL = 590;
MySQLParser.POSITION_SYMBOL = 591;
MySQLParser.PRECISION_SYMBOL = 592;
MySQLParser.PRIMARY_SYMBOL = 593;
MySQLParser.PROCEDURE_SYMBOL = 594;
MySQLParser.PURGE_SYMBOL = 595;
MySQLParser.RANGE_SYMBOL = 596;
MySQLParser.READS_SYMBOL = 597;
MySQLParser.READ_SYMBOL = 598;
MySQLParser.READ_WRITE_SYMBOL = 599;
MySQLParser.REAL_SYMBOL = 600;
MySQLParser.REFERENCES_SYMBOL = 601;
MySQLParser.REGEXP_SYMBOL = 602;
MySQLParser.RELEASE_SYMBOL = 603;
MySQLParser.RENAME_SYMBOL = 604;
MySQLParser.REPEAT_SYMBOL = 605;
MySQLParser.REPLACE_SYMBOL = 606;
MySQLParser.REQUIRE_SYMBOL = 607;
MySQLParser.RESIGNAL_SYMBOL = 608;
MySQLParser.RESTRICT_SYMBOL = 609;
MySQLParser.RETURN_SYMBOL = 610;
MySQLParser.REVOKE_SYMBOL = 611;
MySQLParser.RIGHT_SYMBOL = 612;
MySQLParser.SECOND_MICROSECOND_SYMBOL = 613;
MySQLParser.SELECT_SYMBOL = 614;
MySQLParser.SENSITIVE_SYMBOL = 615;
MySQLParser.SEPARATOR_SYMBOL = 616;
MySQLParser.SERVER_OPTIONS_SYMBOL = 617;
MySQLParser.SESSION_USER_SYMBOL = 618;
MySQLParser.SET_SYMBOL = 619;
MySQLParser.SET_VAR_SYMBOL = 620;
MySQLParser.SHOW_SYMBOL = 621;
MySQLParser.SIGNAL_SYMBOL = 622;
MySQLParser.SMALLINT_SYMBOL = 623;
MySQLParser.SPATIAL_SYMBOL = 624;
MySQLParser.SPECIFIC_SYMBOL = 625;
MySQLParser.SQLEXCEPTION_SYMBOL = 626;
MySQLParser.SQLSTATE_SYMBOL = 627;
MySQLParser.SQLWARNING_SYMBOL = 628;
MySQLParser.SQL_BIG_RESULT_SYMBOL = 629;
MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL = 630;
MySQLParser.SQL_SMALL_RESULT_SYMBOL = 631;
MySQLParser.SQL_SYMBOL = 632;
MySQLParser.SSL_SYMBOL = 633;
MySQLParser.STARTING_SYMBOL = 634;
MySQLParser.STDDEV_SAMP_SYMBOL = 635;
MySQLParser.STDDEV_SYMBOL = 636;
MySQLParser.STDDEV_POP_SYMBOL = 637;
MySQLParser.STD_SYMBOL = 638;
MySQLParser.STORED_SYMBOL = 639;
MySQLParser.STRAIGHT_JOIN_SYMBOL = 640;
MySQLParser.SUBSTR_SYMBOL = 641;
MySQLParser.SUBSTRING_SYMBOL = 642;
MySQLParser.SUM_SYMBOL = 643;
MySQLParser.SYSDATE_SYMBOL = 644;
MySQLParser.SYSTEM_USER_SYMBOL = 645;
MySQLParser.TABLE_REF_PRIORITY_SYMBOL = 646;
MySQLParser.TABLE_SYMBOL = 647;
MySQLParser.TERMINATED_SYMBOL = 648;
MySQLParser.THEN_SYMBOL = 649;
MySQLParser.TINYBLOB_SYMBOL = 650;
MySQLParser.TINYINT_SYMBOL = 651;
MySQLParser.TINYTEXT_SYMBOL = 652;
MySQLParser.TO_SYMBOL = 653;
MySQLParser.TRAILING_SYMBOL = 654;
MySQLParser.TRIGGER_SYMBOL = 655;
MySQLParser.TRIM_SYMBOL = 656;
MySQLParser.TRUE_SYMBOL = 657;
MySQLParser.UNDO_SYMBOL = 658;
MySQLParser.UNION_SYMBOL = 659;
MySQLParser.UNIQUE_SYMBOL = 660;
MySQLParser.UNLOCK_SYMBOL = 661;
MySQLParser.UNSIGNED_SYMBOL = 662;
MySQLParser.UPDATE_SYMBOL = 663;
MySQLParser.USAGE_SYMBOL = 664;
MySQLParser.USE_SYMBOL = 665;
MySQLParser.USING_SYMBOL = 666;
MySQLParser.UTC_DATE_SYMBOL = 667;
MySQLParser.UTC_TIMESTAMP_SYMBOL = 668;
MySQLParser.UTC_TIME_SYMBOL = 669;
MySQLParser.VALIDATION_SYMBOL = 670;
MySQLParser.VALUES_SYMBOL = 671;
MySQLParser.VARBINARY_SYMBOL = 672;
MySQLParser.VARCHAR_SYMBOL = 673;
MySQLParser.VARIANCE_SYMBOL = 674;
MySQLParser.VARYING_SYMBOL = 675;
MySQLParser.VAR_POP_SYMBOL = 676;
MySQLParser.VAR_SAMP_SYMBOL = 677;
MySQLParser.VIRTUAL_SYMBOL = 678;
MySQLParser.WHEN_SYMBOL = 679;
MySQLParser.WHERE_SYMBOL = 680;
MySQLParser.WHILE_SYMBOL = 681;
MySQLParser.WITH_SYMBOL = 682;
MySQLParser.WITHOUT_SYMBOL = 683;
MySQLParser.WRITE_SYMBOL = 684;
MySQLParser.XOR_SYMBOL = 685;
MySQLParser.YEAR_MONTH_SYMBOL = 686;
MySQLParser.ZEROFILL_SYMBOL = 687;
MySQLParser.PERSIST_SYMBOL = 688;
MySQLParser.ROLE_SYMBOL = 689;
MySQLParser.ADMIN_SYMBOL = 690;
MySQLParser.INVISIBLE_SYMBOL = 691;
MySQLParser.VISIBLE_SYMBOL = 692;
MySQLParser.EXCEPT_SYMBOL = 693;
MySQLParser.COMPONENT_SYMBOL = 694;
MySQLParser.RECURSIVE_SYMBOL = 695;
MySQLParser.JSON_OBJECTAGG_SYMBOL = 696;
MySQLParser.JSON_ARRAYAGG_SYMBOL = 697;
MySQLParser.OF_SYMBOL = 698;
MySQLParser.SKIP_SYMBOL = 699;
MySQLParser.LOCKED_SYMBOL = 700;
MySQLParser.NOWAIT_SYMBOL = 701;
MySQLParser.GROUPING_SYMBOL = 702;
MySQLParser.PERSIST_ONLY_SYMBOL = 703;
MySQLParser.HISTOGRAM_SYMBOL = 704;
MySQLParser.BUCKETS_SYMBOL = 705;
MySQLParser.REMOTE_SYMBOL = 706;
MySQLParser.CLONE_SYMBOL = 707;
MySQLParser.CUME_DIST_SYMBOL = 708;
MySQLParser.DENSE_RANK_SYMBOL = 709;
MySQLParser.EXCLUDE_SYMBOL = 710;
MySQLParser.FIRST_VALUE_SYMBOL = 711;
MySQLParser.FOLLOWING_SYMBOL = 712;
MySQLParser.GROUPS_SYMBOL = 713;
MySQLParser.LAG_SYMBOL = 714;
MySQLParser.LAST_VALUE_SYMBOL = 715;
MySQLParser.LEAD_SYMBOL = 716;
MySQLParser.NTH_VALUE_SYMBOL = 717;
MySQLParser.NTILE_SYMBOL = 718;
MySQLParser.NULLS_SYMBOL = 719;
MySQLParser.OTHERS_SYMBOL = 720;
MySQLParser.OVER_SYMBOL = 721;
MySQLParser.PERCENT_RANK_SYMBOL = 722;
MySQLParser.PRECEDING_SYMBOL = 723;
MySQLParser.RANK_SYMBOL = 724;
MySQLParser.RESPECT_SYMBOL = 725;
MySQLParser.ROW_NUMBER_SYMBOL = 726;
MySQLParser.TIES_SYMBOL = 727;
MySQLParser.UNBOUNDED_SYMBOL = 728;
MySQLParser.WINDOW_SYMBOL = 729;
MySQLParser.EMPTY_SYMBOL = 730;
MySQLParser.JSON_TABLE_SYMBOL = 731;
MySQLParser.NESTED_SYMBOL = 732;
MySQLParser.ORDINALITY_SYMBOL = 733;
MySQLParser.PATH_SYMBOL = 734;
MySQLParser.HISTORY_SYMBOL = 735;
MySQLParser.REUSE_SYMBOL = 736;
MySQLParser.SRID_SYMBOL = 737;
MySQLParser.THREAD_PRIORITY_SYMBOL = 738;
MySQLParser.RESOURCE_SYMBOL = 739;
MySQLParser.SYSTEM_SYMBOL = 740;
MySQLParser.VCPU_SYMBOL = 741;
MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL = 742;
MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL = 743;
MySQLParser.RESTART_SYMBOL = 744;
MySQLParser.DEFINITION_SYMBOL = 745;
MySQLParser.DESCRIPTION_SYMBOL = 746;
MySQLParser.ORGANIZATION_SYMBOL = 747;
MySQLParser.REFERENCE_SYMBOL = 748;
MySQLParser.OPTIONAL_SYMBOL = 749;
MySQLParser.SECONDARY_SYMBOL = 750;
MySQLParser.SECONDARY_ENGINE_SYMBOL = 751;
MySQLParser.SECONDARY_LOAD_SYMBOL = 752;
MySQLParser.SECONDARY_UNLOAD_SYMBOL = 753;
MySQLParser.ACTIVE_SYMBOL = 754;
MySQLParser.INACTIVE_SYMBOL = 755;
MySQLParser.LATERAL_SYMBOL = 756;
MySQLParser.RETAIN_SYMBOL = 757;
MySQLParser.OLD_SYMBOL = 758;
MySQLParser.NETWORK_NAMESPACE_SYMBOL = 759;
MySQLParser.ENFORCED_SYMBOL = 760;
MySQLParser.ARRAY_SYMBOL = 761;
MySQLParser.OJ_SYMBOL = 762;
MySQLParser.MEMBER_SYMBOL = 763;
MySQLParser.RANDOM_SYMBOL = 764;
MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL = 765;
MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 766;
MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL = 767;
MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL = 768;
MySQLParser.WHITESPACE = 769;
MySQLParser.INVALID_INPUT = 770;
MySQLParser.UNDERSCORE_CHARSET = 771;
MySQLParser.IDENTIFIER = 772;
MySQLParser.NCHAR_TEXT = 773;
MySQLParser.BACK_TICK_QUOTED_ID = 774;
MySQLParser.DOUBLE_QUOTED_TEXT = 775;
MySQLParser.SINGLE_QUOTED_TEXT = 776;
MySQLParser.VERSION_COMMENT_START = 777;
MySQLParser.MYSQL_COMMENT_START = 778;
MySQLParser.VERSION_COMMENT_END = 779;
MySQLParser.BLOCK_COMMENT = 780;
MySQLParser.POUND_COMMENT = 781;
MySQLParser.DASHDASH_COMMENT = 782;
MySQLParser.NOT_EQUAL2_OPERATOR = 783;

MySQLParser.RULE_query = 0;
MySQLParser.RULE_simpleStatement = 1;
MySQLParser.RULE_alterStatement = 2;
MySQLParser.RULE_alterDatabase = 3;
MySQLParser.RULE_alterEvent = 4;
MySQLParser.RULE_alterLogfileGroup = 5;
MySQLParser.RULE_alterLogfileGroupOptions = 6;
MySQLParser.RULE_alterLogfileGroupOption = 7;
MySQLParser.RULE_alterServer = 8;
MySQLParser.RULE_alterTable = 9;
MySQLParser.RULE_alterTableActions = 10;
MySQLParser.RULE_alterCommandList = 11;
MySQLParser.RULE_alterCommandsModifierList = 12;
MySQLParser.RULE_standaloneAlterCommands = 13;
MySQLParser.RULE_alterPartition = 14;
MySQLParser.RULE_alterList = 15;
MySQLParser.RULE_alterCommandsModifier = 16;
MySQLParser.RULE_alterListItem = 17;
MySQLParser.RULE_place = 18;
MySQLParser.RULE_restrict = 19;
MySQLParser.RULE_alterOrderList = 20;
MySQLParser.RULE_alterAlgorithmOption = 21;
MySQLParser.RULE_alterLockOption = 22;
MySQLParser.RULE_indexLockAndAlgorithm = 23;
MySQLParser.RULE_withValidation = 24;
MySQLParser.RULE_removePartitioning = 25;
MySQLParser.RULE_allOrPartitionNameList = 26;
MySQLParser.RULE_reorgPartitionRule = 27;
MySQLParser.RULE_alterTablespace = 28;
MySQLParser.RULE_alterUndoTablespace = 29;
MySQLParser.RULE_undoTableSpaceOptions = 30;
MySQLParser.RULE_undoTableSpaceOption = 31;
MySQLParser.RULE_alterTablespaceOptions = 32;
MySQLParser.RULE_alterTablespaceOption = 33;
MySQLParser.RULE_changeTablespaceOption = 34;
MySQLParser.RULE_alterView = 35;
MySQLParser.RULE_viewTail = 36;
MySQLParser.RULE_viewSelect = 37;
MySQLParser.RULE_viewCheckOption = 38;
MySQLParser.RULE_createStatement = 39;
MySQLParser.RULE_createDatabase = 40;
MySQLParser.RULE_createDatabaseOption = 41;
MySQLParser.RULE_createTable = 42;
MySQLParser.RULE_tableElementList = 43;
MySQLParser.RULE_tableElement = 44;
MySQLParser.RULE_duplicateAsQueryExpression = 45;
MySQLParser.RULE_queryExpressionOrParens = 46;
MySQLParser.RULE_createRoutine = 47;
MySQLParser.RULE_createProcedure = 48;
MySQLParser.RULE_createFunction = 49;
MySQLParser.RULE_createUdf = 50;
MySQLParser.RULE_routineCreateOption = 51;
MySQLParser.RULE_routineAlterOptions = 52;
MySQLParser.RULE_routineOption = 53;
MySQLParser.RULE_createIndex = 54;
MySQLParser.RULE_indexNameAndType = 55;
MySQLParser.RULE_createIndexTarget = 56;
MySQLParser.RULE_createLogfileGroup = 57;
MySQLParser.RULE_logfileGroupOptions = 58;
MySQLParser.RULE_logfileGroupOption = 59;
MySQLParser.RULE_createServer = 60;
MySQLParser.RULE_serverOptions = 61;
MySQLParser.RULE_serverOption = 62;
MySQLParser.RULE_createTablespace = 63;
MySQLParser.RULE_createUndoTablespace = 64;
MySQLParser.RULE_tsDataFileName = 65;
MySQLParser.RULE_tsDataFile = 66;
MySQLParser.RULE_tablespaceOptions = 67;
MySQLParser.RULE_tablespaceOption = 68;
MySQLParser.RULE_tsOptionInitialSize = 69;
MySQLParser.RULE_tsOptionUndoRedoBufferSize = 70;
MySQLParser.RULE_tsOptionAutoextendSize = 71;
MySQLParser.RULE_tsOptionMaxSize = 72;
MySQLParser.RULE_tsOptionExtentSize = 73;
MySQLParser.RULE_tsOptionNodegroup = 74;
MySQLParser.RULE_tsOptionEngine = 75;
MySQLParser.RULE_tsOptionWait = 76;
MySQLParser.RULE_tsOptionComment = 77;
MySQLParser.RULE_tsOptionFileblockSize = 78;
MySQLParser.RULE_tsOptionEncryption = 79;
MySQLParser.RULE_createView = 80;
MySQLParser.RULE_viewReplaceOrAlgorithm = 81;
MySQLParser.RULE_viewAlgorithm = 82;
MySQLParser.RULE_viewSuid = 83;
MySQLParser.RULE_createTrigger = 84;
MySQLParser.RULE_triggerFollowsPrecedesClause = 85;
MySQLParser.RULE_createEvent = 86;
MySQLParser.RULE_createRole = 87;
MySQLParser.RULE_createSpatialReference = 88;
MySQLParser.RULE_srsAttribute = 89;
MySQLParser.RULE_dropStatement = 90;
MySQLParser.RULE_dropDatabase = 91;
MySQLParser.RULE_dropEvent = 92;
MySQLParser.RULE_dropFunction = 93;
MySQLParser.RULE_dropProcedure = 94;
MySQLParser.RULE_dropIndex = 95;
MySQLParser.RULE_dropLogfileGroup = 96;
MySQLParser.RULE_dropLogfileGroupOption = 97;
MySQLParser.RULE_dropServer = 98;
MySQLParser.RULE_dropTable = 99;
MySQLParser.RULE_dropTableSpace = 100;
MySQLParser.RULE_dropTrigger = 101;
MySQLParser.RULE_dropView = 102;
MySQLParser.RULE_dropRole = 103;
MySQLParser.RULE_dropSpatialReference = 104;
MySQLParser.RULE_dropUndoTablespace = 105;
MySQLParser.RULE_renameTableStatement = 106;
MySQLParser.RULE_renamePair = 107;
MySQLParser.RULE_truncateTableStatement = 108;
MySQLParser.RULE_importStatement = 109;
MySQLParser.RULE_callStatement = 110;
MySQLParser.RULE_deleteStatement = 111;
MySQLParser.RULE_partitionDelete = 112;
MySQLParser.RULE_deleteStatementOption = 113;
MySQLParser.RULE_doStatement = 114;
MySQLParser.RULE_handlerStatement = 115;
MySQLParser.RULE_handlerReadOrScan = 116;
MySQLParser.RULE_insertStatement = 117;
MySQLParser.RULE_insertLockOption = 118;
MySQLParser.RULE_insertFromConstructor = 119;
MySQLParser.RULE_fields = 120;
MySQLParser.RULE_insertValues = 121;
MySQLParser.RULE_insertQueryExpression = 122;
MySQLParser.RULE_valueList = 123;
MySQLParser.RULE_values = 124;
MySQLParser.RULE_valuesReference = 125;
MySQLParser.RULE_insertUpdateList = 126;
MySQLParser.RULE_loadStatement = 127;
MySQLParser.RULE_dataOrXml = 128;
MySQLParser.RULE_xmlRowsIdentifiedBy = 129;
MySQLParser.RULE_loadDataFileTail = 130;
MySQLParser.RULE_loadDataFileTargetList = 131;
MySQLParser.RULE_fieldOrVariableList = 132;
MySQLParser.RULE_replaceStatement = 133;
MySQLParser.RULE_selectStatement = 134;
MySQLParser.RULE_selectStatementWithInto = 135;
MySQLParser.RULE_queryExpression = 136;
MySQLParser.RULE_queryExpressionBody = 137;
MySQLParser.RULE_queryExpressionParens = 138;
MySQLParser.RULE_querySpecification = 139;
MySQLParser.RULE_subquery = 140;
MySQLParser.RULE_querySpecOption = 141;
MySQLParser.RULE_limitClause = 142;
MySQLParser.RULE_simpleLimitClause = 143;
MySQLParser.RULE_limitOptions = 144;
MySQLParser.RULE_limitOption = 145;
MySQLParser.RULE_intoClause = 146;
MySQLParser.RULE_procedureAnalyseClause = 147;
MySQLParser.RULE_havingClause = 148;
MySQLParser.RULE_windowClause = 149;
MySQLParser.RULE_windowDefinition = 150;
MySQLParser.RULE_windowSpec = 151;
MySQLParser.RULE_windowSpecDetails = 152;
MySQLParser.RULE_windowFrameClause = 153;
MySQLParser.RULE_windowFrameUnits = 154;
MySQLParser.RULE_windowFrameExtent = 155;
MySQLParser.RULE_windowFrameStart = 156;
MySQLParser.RULE_windowFrameBetween = 157;
MySQLParser.RULE_windowFrameBound = 158;
MySQLParser.RULE_windowFrameExclusion = 159;
MySQLParser.RULE_withClause = 160;
MySQLParser.RULE_commonTableExpression = 161;
MySQLParser.RULE_groupByClause = 162;
MySQLParser.RULE_olapOption = 163;
MySQLParser.RULE_orderClause = 164;
MySQLParser.RULE_direction = 165;
MySQLParser.RULE_fromClause = 166;
MySQLParser.RULE_tableReferenceList = 167;
MySQLParser.RULE_selectOption = 168;
MySQLParser.RULE_lockingClause = 169;
MySQLParser.RULE_lockStrengh = 170;
MySQLParser.RULE_lockedRowAction = 171;
MySQLParser.RULE_selectItemList = 172;
MySQLParser.RULE_selectItem = 173;
MySQLParser.RULE_selectAlias = 174;
MySQLParser.RULE_whereClause = 175;
MySQLParser.RULE_tableReference = 176;
MySQLParser.RULE_escapedTableReference = 177;
MySQLParser.RULE_joinedTable = 178;
MySQLParser.RULE_naturalJoinType = 179;
MySQLParser.RULE_innerJoinType = 180;
MySQLParser.RULE_outerJoinType = 181;
MySQLParser.RULE_tableFactor = 182;
MySQLParser.RULE_singleTable = 183;
MySQLParser.RULE_singleTableParens = 184;
MySQLParser.RULE_derivedTable = 185;
MySQLParser.RULE_tableReferenceListParens = 186;
MySQLParser.RULE_tableFunction = 187;
MySQLParser.RULE_columnsClause = 188;
MySQLParser.RULE_jtColumn = 189;
MySQLParser.RULE_onEmptyOrError = 190;
MySQLParser.RULE_onEmpty = 191;
MySQLParser.RULE_onError = 192;
MySQLParser.RULE_jtOnResponse = 193;
MySQLParser.RULE_unionOption = 194;
MySQLParser.RULE_tableAlias = 195;
MySQLParser.RULE_indexHintList = 196;
MySQLParser.RULE_indexHint = 197;
MySQLParser.RULE_indexHintType = 198;
MySQLParser.RULE_keyOrIndex = 199;
MySQLParser.RULE_constraintKeyType = 200;
MySQLParser.RULE_indexHintClause = 201;
MySQLParser.RULE_indexList = 202;
MySQLParser.RULE_indexListElement = 203;
MySQLParser.RULE_updateStatement = 204;
MySQLParser.RULE_transactionOrLockingStatement = 205;
MySQLParser.RULE_transactionStatement = 206;
MySQLParser.RULE_beginWork = 207;
MySQLParser.RULE_transactionCharacteristic = 208;
MySQLParser.RULE_savepointStatement = 209;
MySQLParser.RULE_lockStatement = 210;
MySQLParser.RULE_lockItem = 211;
MySQLParser.RULE_lockOption = 212;
MySQLParser.RULE_xaStatement = 213;
MySQLParser.RULE_xaConvert = 214;
MySQLParser.RULE_xid = 215;
MySQLParser.RULE_replicationStatement = 216;
MySQLParser.RULE_resetOption = 217;
MySQLParser.RULE_masterResetOptions = 218;
MySQLParser.RULE_replicationLoad = 219;
MySQLParser.RULE_changeMaster = 220;
MySQLParser.RULE_changeMasterOptions = 221;
MySQLParser.RULE_masterOption = 222;
MySQLParser.RULE_privilegeCheckDef = 223;
MySQLParser.RULE_masterTlsCiphersuitesDef = 224;
MySQLParser.RULE_masterFileDef = 225;
MySQLParser.RULE_serverIdList = 226;
MySQLParser.RULE_changeReplication = 227;
MySQLParser.RULE_filterDefinition = 228;
MySQLParser.RULE_filterDbList = 229;
MySQLParser.RULE_filterTableList = 230;
MySQLParser.RULE_filterStringList = 231;
MySQLParser.RULE_filterWildDbTableString = 232;
MySQLParser.RULE_filterDbPairList = 233;
MySQLParser.RULE_slave = 234;
MySQLParser.RULE_slaveUntilOptions = 235;
MySQLParser.RULE_slaveConnectionOptions = 236;
MySQLParser.RULE_slaveThreadOptions = 237;
MySQLParser.RULE_slaveThreadOption = 238;
MySQLParser.RULE_groupReplication = 239;
MySQLParser.RULE_preparedStatement = 240;
MySQLParser.RULE_executeStatement = 241;
MySQLParser.RULE_executeVarList = 242;
MySQLParser.RULE_cloneStatement = 243;
MySQLParser.RULE_dataDirSSL = 244;
MySQLParser.RULE_ssl = 245;
MySQLParser.RULE_accountManagementStatement = 246;
MySQLParser.RULE_alterUser = 247;
MySQLParser.RULE_alterUserTail = 248;
MySQLParser.RULE_userFunction = 249;
MySQLParser.RULE_createUser = 250;
MySQLParser.RULE_createUserTail = 251;
MySQLParser.RULE_defaultRoleClause = 252;
MySQLParser.RULE_requireClause = 253;
MySQLParser.RULE_connectOptions = 254;
MySQLParser.RULE_accountLockPasswordExpireOptions = 255;
MySQLParser.RULE_dropUser = 256;
MySQLParser.RULE_grant = 257;
MySQLParser.RULE_grantTargetList = 258;
MySQLParser.RULE_grantOptions = 259;
MySQLParser.RULE_exceptRoleList = 260;
MySQLParser.RULE_withRoles = 261;
MySQLParser.RULE_grantAs = 262;
MySQLParser.RULE_versionedRequireClause = 263;
MySQLParser.RULE_renameUser = 264;
MySQLParser.RULE_revoke = 265;
MySQLParser.RULE_onTypeTo = 266;
MySQLParser.RULE_aclType = 267;
MySQLParser.RULE_roleOrPrivilegesList = 268;
MySQLParser.RULE_roleOrPrivilege = 269;
MySQLParser.RULE_grantIdentifier = 270;
MySQLParser.RULE_requireList = 271;
MySQLParser.RULE_requireListElement = 272;
MySQLParser.RULE_grantOption = 273;
MySQLParser.RULE_setRole = 274;
MySQLParser.RULE_roleList = 275;
MySQLParser.RULE_role = 276;
MySQLParser.RULE_tableAdministrationStatement = 277;
MySQLParser.RULE_histogram = 278;
MySQLParser.RULE_checkOption = 279;
MySQLParser.RULE_repairType = 280;
MySQLParser.RULE_installUninstallStatment = 281;
MySQLParser.RULE_setStatement = 282;
MySQLParser.RULE_startOptionValueList = 283;
MySQLParser.RULE_transactionCharacteristics = 284;
MySQLParser.RULE_transactionAccessMode = 285;
MySQLParser.RULE_isolationLevel = 286;
MySQLParser.RULE_optionValueListContinued = 287;
MySQLParser.RULE_optionValueNoOptionType = 288;
MySQLParser.RULE_optionValue = 289;
MySQLParser.RULE_setSystemVariable = 290;
MySQLParser.RULE_startOptionValueListFollowingOptionType = 291;
MySQLParser.RULE_optionValueFollowingOptionType = 292;
MySQLParser.RULE_setExprOrDefault = 293;
MySQLParser.RULE_showStatement = 294;
MySQLParser.RULE_showCommandType = 295;
MySQLParser.RULE_nonBlocking = 296;
MySQLParser.RULE_fromOrIn = 297;
MySQLParser.RULE_inDb = 298;
MySQLParser.RULE_profileType = 299;
MySQLParser.RULE_otherAdministrativeStatement = 300;
MySQLParser.RULE_keyCacheListOrParts = 301;
MySQLParser.RULE_keyCacheList = 302;
MySQLParser.RULE_assignToKeycache = 303;
MySQLParser.RULE_assignToKeycachePartition = 304;
MySQLParser.RULE_cacheKeyList = 305;
MySQLParser.RULE_keyUsageElement = 306;
MySQLParser.RULE_keyUsageList = 307;
MySQLParser.RULE_flushOption = 308;
MySQLParser.RULE_logType = 309;
MySQLParser.RULE_flushTables = 310;
MySQLParser.RULE_flushTablesOptions = 311;
MySQLParser.RULE_preloadTail = 312;
MySQLParser.RULE_preloadList = 313;
MySQLParser.RULE_preloadKeys = 314;
MySQLParser.RULE_adminPartition = 315;
MySQLParser.RULE_resourceGroupManagement = 316;
MySQLParser.RULE_createResourceGroup = 317;
MySQLParser.RULE_resourceGroupVcpuList = 318;
MySQLParser.RULE_vcpuNumOrRange = 319;
MySQLParser.RULE_resourceGroupPriority = 320;
MySQLParser.RULE_resourceGroupEnableDisable = 321;
MySQLParser.RULE_alterResourceGroup = 322;
MySQLParser.RULE_setResourceGroup = 323;
MySQLParser.RULE_threadIdList = 324;
MySQLParser.RULE_dropResourceGroup = 325;
MySQLParser.RULE_utilityStatement = 326;
MySQLParser.RULE_describeCommand = 327;
MySQLParser.RULE_explainCommand = 328;
MySQLParser.RULE_explainableStatement = 329;
MySQLParser.RULE_helpCommand = 330;
MySQLParser.RULE_useCommand = 331;
MySQLParser.RULE_restartServer = 332;
MySQLParser.RULE_expr = 333;
MySQLParser.RULE_boolPri = 334;
MySQLParser.RULE_compOp = 335;
MySQLParser.RULE_predicate = 336;
MySQLParser.RULE_predicateOperations = 337;
MySQLParser.RULE_bitExpr = 338;
MySQLParser.RULE_simpleExpr = 339;
MySQLParser.RULE_arrayCast = 340;
MySQLParser.RULE_jsonOperator = 341;
MySQLParser.RULE_sumExpr = 342;
MySQLParser.RULE_groupingOperation = 343;
MySQLParser.RULE_windowFunctionCall = 344;
MySQLParser.RULE_windowingClause = 345;
MySQLParser.RULE_leadLagInfo = 346;
MySQLParser.RULE_nullTreatment = 347;
MySQLParser.RULE_jsonFunction = 348;
MySQLParser.RULE_inSumExpr = 349;
MySQLParser.RULE_identListArg = 350;
MySQLParser.RULE_identList = 351;
MySQLParser.RULE_fulltextOptions = 352;
MySQLParser.RULE_runtimeFunctionCall = 353;
MySQLParser.RULE_geometryFunction = 354;
MySQLParser.RULE_timeFunctionParameters = 355;
MySQLParser.RULE_fractionalPrecision = 356;
MySQLParser.RULE_weightStringLevels = 357;
MySQLParser.RULE_weightStringLevelListItem = 358;
MySQLParser.RULE_dateTimeTtype = 359;
MySQLParser.RULE_trimFunction = 360;
MySQLParser.RULE_substringFunction = 361;
MySQLParser.RULE_functionCall = 362;
MySQLParser.RULE_udfExprList = 363;
MySQLParser.RULE_udfExpr = 364;
MySQLParser.RULE_variable = 365;
MySQLParser.RULE_userVariable = 366;
MySQLParser.RULE_systemVariable = 367;
MySQLParser.RULE_internalVariableName = 368;
MySQLParser.RULE_whenExpression = 369;
MySQLParser.RULE_thenExpression = 370;
MySQLParser.RULE_elseExpression = 371;
MySQLParser.RULE_castType = 372;
MySQLParser.RULE_exprList = 373;
MySQLParser.RULE_charset = 374;
MySQLParser.RULE_notRule = 375;
MySQLParser.RULE_not2Rule = 376;
MySQLParser.RULE_interval = 377;
MySQLParser.RULE_intervalTimeStamp = 378;
MySQLParser.RULE_exprListWithParentheses = 379;
MySQLParser.RULE_exprWithParentheses = 380;
MySQLParser.RULE_simpleExprWithParentheses = 381;
MySQLParser.RULE_orderList = 382;
MySQLParser.RULE_orderExpression = 383;
MySQLParser.RULE_groupList = 384;
MySQLParser.RULE_groupingExpression = 385;
MySQLParser.RULE_channel = 386;
MySQLParser.RULE_compoundStatement = 387;
MySQLParser.RULE_returnStatement = 388;
MySQLParser.RULE_ifStatement = 389;
MySQLParser.RULE_ifBody = 390;
MySQLParser.RULE_thenStatement = 391;
MySQLParser.RULE_compoundStatementList = 392;
MySQLParser.RULE_caseStatement = 393;
MySQLParser.RULE_elseStatement = 394;
MySQLParser.RULE_labeledBlock = 395;
MySQLParser.RULE_unlabeledBlock = 396;
MySQLParser.RULE_label = 397;
MySQLParser.RULE_beginEndBlock = 398;
MySQLParser.RULE_labeledControl = 399;
MySQLParser.RULE_unlabeledControl = 400;
MySQLParser.RULE_loopBlock = 401;
MySQLParser.RULE_whileDoBlock = 402;
MySQLParser.RULE_repeatUntilBlock = 403;
MySQLParser.RULE_spDeclarations = 404;
MySQLParser.RULE_spDeclaration = 405;
MySQLParser.RULE_variableDeclaration = 406;
MySQLParser.RULE_conditionDeclaration = 407;
MySQLParser.RULE_spCondition = 408;
MySQLParser.RULE_sqlstate = 409;
MySQLParser.RULE_handlerDeclaration = 410;
MySQLParser.RULE_handlerCondition = 411;
MySQLParser.RULE_cursorDeclaration = 412;
MySQLParser.RULE_iterateStatement = 413;
MySQLParser.RULE_leaveStatement = 414;
MySQLParser.RULE_getDiagnostics = 415;
MySQLParser.RULE_signalAllowedExpr = 416;
MySQLParser.RULE_statementInformationItem = 417;
MySQLParser.RULE_conditionInformationItem = 418;
MySQLParser.RULE_signalInformationItemName = 419;
MySQLParser.RULE_signalStatement = 420;
MySQLParser.RULE_resignalStatement = 421;
MySQLParser.RULE_signalInformationItem = 422;
MySQLParser.RULE_cursorOpen = 423;
MySQLParser.RULE_cursorClose = 424;
MySQLParser.RULE_cursorFetch = 425;
MySQLParser.RULE_schedule = 426;
MySQLParser.RULE_columnDefinition = 427;
MySQLParser.RULE_checkOrReferences = 428;
MySQLParser.RULE_checkConstraint = 429;
MySQLParser.RULE_constraintEnforcement = 430;
MySQLParser.RULE_tableConstraintDef = 431;
MySQLParser.RULE_constraintName = 432;
MySQLParser.RULE_fieldDefinition = 433;
MySQLParser.RULE_columnAttribute = 434;
MySQLParser.RULE_columnFormat = 435;
MySQLParser.RULE_storageMedia = 436;
MySQLParser.RULE_gcolAttribute = 437;
MySQLParser.RULE_references = 438;
MySQLParser.RULE_deleteOption = 439;
MySQLParser.RULE_keyList = 440;
MySQLParser.RULE_keyPart = 441;
MySQLParser.RULE_keyListWithExpression = 442;
MySQLParser.RULE_keyPartOrExpression = 443;
MySQLParser.RULE_keyListVariants = 444;
MySQLParser.RULE_indexType = 445;
MySQLParser.RULE_indexOption = 446;
MySQLParser.RULE_commonIndexOption = 447;
MySQLParser.RULE_visibility = 448;
MySQLParser.RULE_indexTypeClause = 449;
MySQLParser.RULE_fulltextIndexOption = 450;
MySQLParser.RULE_spatialIndexOption = 451;
MySQLParser.RULE_dataTypeDefinition = 452;
MySQLParser.RULE_dataType = 453;
MySQLParser.RULE_nchar = 454;
MySQLParser.RULE_realType = 455;
MySQLParser.RULE_fieldLength = 456;
MySQLParser.RULE_fieldOptions = 457;
MySQLParser.RULE_charsetWithOptBinary = 458;
MySQLParser.RULE_ascii = 459;
MySQLParser.RULE_unicode = 460;
MySQLParser.RULE_wsNumCodepoints = 461;
MySQLParser.RULE_typeDatetimePrecision = 462;
MySQLParser.RULE_charsetName = 463;
MySQLParser.RULE_collationName = 464;
MySQLParser.RULE_createTableOptions = 465;
MySQLParser.RULE_createTableOptionsSpaceSeparated = 466;
MySQLParser.RULE_createTableOption = 467;
MySQLParser.RULE_ternaryOption = 468;
MySQLParser.RULE_defaultCollation = 469;
MySQLParser.RULE_defaultEncryption = 470;
MySQLParser.RULE_defaultCharset = 471;
MySQLParser.RULE_partitionClause = 472;
MySQLParser.RULE_partitionTypeDef = 473;
MySQLParser.RULE_subPartitions = 474;
MySQLParser.RULE_partitionKeyAlgorithm = 475;
MySQLParser.RULE_partitionDefinitions = 476;
MySQLParser.RULE_partitionDefinition = 477;
MySQLParser.RULE_partitionValuesIn = 478;
MySQLParser.RULE_partitionOption = 479;
MySQLParser.RULE_subpartitionDefinition = 480;
MySQLParser.RULE_partitionValueItemListParen = 481;
MySQLParser.RULE_partitionValueItem = 482;
MySQLParser.RULE_definerClause = 483;
MySQLParser.RULE_ifExists = 484;
MySQLParser.RULE_ifNotExists = 485;
MySQLParser.RULE_procedureParameter = 486;
MySQLParser.RULE_functionParameter = 487;
MySQLParser.RULE_collate = 488;
MySQLParser.RULE_typeWithOptCollate = 489;
MySQLParser.RULE_schemaIdentifierPair = 490;
MySQLParser.RULE_viewRefList = 491;
MySQLParser.RULE_updateList = 492;
MySQLParser.RULE_updateElement = 493;
MySQLParser.RULE_charsetClause = 494;
MySQLParser.RULE_fieldsClause = 495;
MySQLParser.RULE_fieldTerm = 496;
MySQLParser.RULE_linesClause = 497;
MySQLParser.RULE_lineTerm = 498;
MySQLParser.RULE_userList = 499;
MySQLParser.RULE_createUserList = 500;
MySQLParser.RULE_alterUserList = 501;
MySQLParser.RULE_createUserEntry = 502;
MySQLParser.RULE_alterUserEntry = 503;
MySQLParser.RULE_retainCurrentPassword = 504;
MySQLParser.RULE_discardOldPassword = 505;
MySQLParser.RULE_replacePassword = 506;
MySQLParser.RULE_userIdentifierOrText = 507;
MySQLParser.RULE_user = 508;
MySQLParser.RULE_likeClause = 509;
MySQLParser.RULE_likeOrWhere = 510;
MySQLParser.RULE_onlineOption = 511;
MySQLParser.RULE_noWriteToBinLog = 512;
MySQLParser.RULE_usePartition = 513;
MySQLParser.RULE_fieldIdentifier = 514;
MySQLParser.RULE_columnName = 515;
MySQLParser.RULE_columnInternalRef = 516;
MySQLParser.RULE_columnInternalRefList = 517;
MySQLParser.RULE_columnRef = 518;
MySQLParser.RULE_insertIdentifier = 519;
MySQLParser.RULE_indexName = 520;
MySQLParser.RULE_indexRef = 521;
MySQLParser.RULE_tableWild = 522;
MySQLParser.RULE_schemaName = 523;
MySQLParser.RULE_schemaRef = 524;
MySQLParser.RULE_procedureName = 525;
MySQLParser.RULE_procedureRef = 526;
MySQLParser.RULE_functionName = 527;
MySQLParser.RULE_functionRef = 528;
MySQLParser.RULE_triggerName = 529;
MySQLParser.RULE_triggerRef = 530;
MySQLParser.RULE_viewName = 531;
MySQLParser.RULE_viewRef = 532;
MySQLParser.RULE_tablespaceName = 533;
MySQLParser.RULE_tablespaceRef = 534;
MySQLParser.RULE_logfileGroupName = 535;
MySQLParser.RULE_logfileGroupRef = 536;
MySQLParser.RULE_eventName = 537;
MySQLParser.RULE_eventRef = 538;
MySQLParser.RULE_udfName = 539;
MySQLParser.RULE_serverName = 540;
MySQLParser.RULE_serverRef = 541;
MySQLParser.RULE_engineRef = 542;
MySQLParser.RULE_tableName = 543;
MySQLParser.RULE_filterTableRef = 544;
MySQLParser.RULE_tableRefWithWildcard = 545;
MySQLParser.RULE_tableRef = 546;
MySQLParser.RULE_tableRefList = 547;
MySQLParser.RULE_tableAliasRefList = 548;
MySQLParser.RULE_parameterName = 549;
MySQLParser.RULE_labelIdentifier = 550;
MySQLParser.RULE_labelRef = 551;
MySQLParser.RULE_roleIdentifier = 552;
MySQLParser.RULE_roleRef = 553;
MySQLParser.RULE_pluginRef = 554;
MySQLParser.RULE_componentRef = 555;
MySQLParser.RULE_resourceGroupRef = 556;
MySQLParser.RULE_windowName = 557;
MySQLParser.RULE_pureIdentifier = 558;
MySQLParser.RULE_identifier = 559;
MySQLParser.RULE_identifierList = 560;
MySQLParser.RULE_identifierListWithParentheses = 561;
MySQLParser.RULE_qualifiedIdentifier = 562;
MySQLParser.RULE_simpleIdentifier = 563;
MySQLParser.RULE_dotIdentifier = 564;
MySQLParser.RULE_ulong_number = 565;
MySQLParser.RULE_real_ulong_number = 566;
MySQLParser.RULE_ulonglong_number = 567;
MySQLParser.RULE_real_ulonglong_number = 568;
MySQLParser.RULE_literal = 569;
MySQLParser.RULE_signedLiteral = 570;
MySQLParser.RULE_stringList = 571;
MySQLParser.RULE_textStringLiteral = 572;
MySQLParser.RULE_textString = 573;
MySQLParser.RULE_textStringHash = 574;
MySQLParser.RULE_textLiteral = 575;
MySQLParser.RULE_textStringNoLinebreak = 576;
MySQLParser.RULE_textStringLiteralList = 577;
MySQLParser.RULE_numLiteral = 578;
MySQLParser.RULE_boolLiteral = 579;
MySQLParser.RULE_nullLiteral = 580;
MySQLParser.RULE_temporalLiteral = 581;
MySQLParser.RULE_floatOptions = 582;
MySQLParser.RULE_standardFloatOptions = 583;
MySQLParser.RULE_precision = 584;
MySQLParser.RULE_textOrIdentifier = 585;
MySQLParser.RULE_lValueIdentifier = 586;
MySQLParser.RULE_roleIdentifierOrText = 587;
MySQLParser.RULE_sizeNumber = 588;
MySQLParser.RULE_parentheses = 589;
MySQLParser.RULE_equal = 590;
MySQLParser.RULE_optionType = 591;
MySQLParser.RULE_varIdentType = 592;
MySQLParser.RULE_setVarIdentType = 593;
MySQLParser.RULE_identifierKeyword = 594;
MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels = 595;
MySQLParser.RULE_identifierKeywordsAmbiguous2Labels = 596;
MySQLParser.RULE_labelKeyword = 597;
MySQLParser.RULE_identifierKeywordsAmbiguous3Roles = 598;
MySQLParser.RULE_identifierKeywordsUnambiguous = 599;
MySQLParser.RULE_roleKeyword = 600;
MySQLParser.RULE_lValueKeyword = 601;
MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables = 602;
MySQLParser.RULE_roleOrIdentifierKeyword = 603;
MySQLParser.RULE_roleOrLabelKeyword = 604;


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.EOF = function() {
    return this.getToken(MySQLParser.EOF, 0);
};

QueryContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

QueryContext.prototype.beginWork = function() {
    return this.getTypedRuleContext(BeginWorkContext,0);
};

QueryContext.prototype.SEMICOLON_SYMBOL = function() {
    return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QueryContext = QueryContext;

MySQLParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, MySQLParser.RULE_query);
    try {
        this.state = 1222;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1210;
            this.match(MySQLParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1213;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1211;
                this.simpleStatement();
                break;

            case 2:
                this.state = 1212;
                this.beginWork();
                break;

            }
            this.state = 1220;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.SEMICOLON_SYMBOL:
                this.state = 1215;
                this.match(MySQLParser.SEMICOLON_SYMBOL);
                this.state = 1217;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
                if(la_===1) {
                    this.state = 1216;
                    this.match(MySQLParser.EOF);

                }
                break;
            case MySQLParser.EOF:
                this.state = 1219;
                this.match(MySQLParser.EOF);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.alterStatement = function() {
    return this.getTypedRuleContext(AlterStatementContext,0);
};

SimpleStatementContext.prototype.createStatement = function() {
    return this.getTypedRuleContext(CreateStatementContext,0);
};

SimpleStatementContext.prototype.dropStatement = function() {
    return this.getTypedRuleContext(DropStatementContext,0);
};

SimpleStatementContext.prototype.renameTableStatement = function() {
    return this.getTypedRuleContext(RenameTableStatementContext,0);
};

SimpleStatementContext.prototype.truncateTableStatement = function() {
    return this.getTypedRuleContext(TruncateTableStatementContext,0);
};

SimpleStatementContext.prototype.importStatement = function() {
    return this.getTypedRuleContext(ImportStatementContext,0);
};

SimpleStatementContext.prototype.callStatement = function() {
    return this.getTypedRuleContext(CallStatementContext,0);
};

SimpleStatementContext.prototype.deleteStatement = function() {
    return this.getTypedRuleContext(DeleteStatementContext,0);
};

SimpleStatementContext.prototype.doStatement = function() {
    return this.getTypedRuleContext(DoStatementContext,0);
};

SimpleStatementContext.prototype.handlerStatement = function() {
    return this.getTypedRuleContext(HandlerStatementContext,0);
};

SimpleStatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

SimpleStatementContext.prototype.loadStatement = function() {
    return this.getTypedRuleContext(LoadStatementContext,0);
};

SimpleStatementContext.prototype.replaceStatement = function() {
    return this.getTypedRuleContext(ReplaceStatementContext,0);
};

SimpleStatementContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

SimpleStatementContext.prototype.updateStatement = function() {
    return this.getTypedRuleContext(UpdateStatementContext,0);
};

SimpleStatementContext.prototype.transactionOrLockingStatement = function() {
    return this.getTypedRuleContext(TransactionOrLockingStatementContext,0);
};

SimpleStatementContext.prototype.replicationStatement = function() {
    return this.getTypedRuleContext(ReplicationStatementContext,0);
};

SimpleStatementContext.prototype.preparedStatement = function() {
    return this.getTypedRuleContext(PreparedStatementContext,0);
};

SimpleStatementContext.prototype.cloneStatement = function() {
    return this.getTypedRuleContext(CloneStatementContext,0);
};

SimpleStatementContext.prototype.accountManagementStatement = function() {
    return this.getTypedRuleContext(AccountManagementStatementContext,0);
};

SimpleStatementContext.prototype.tableAdministrationStatement = function() {
    return this.getTypedRuleContext(TableAdministrationStatementContext,0);
};

SimpleStatementContext.prototype.installUninstallStatment = function() {
    return this.getTypedRuleContext(InstallUninstallStatmentContext,0);
};

SimpleStatementContext.prototype.setStatement = function() {
    return this.getTypedRuleContext(SetStatementContext,0);
};

SimpleStatementContext.prototype.showStatement = function() {
    return this.getTypedRuleContext(ShowStatementContext,0);
};

SimpleStatementContext.prototype.resourceGroupManagement = function() {
    return this.getTypedRuleContext(ResourceGroupManagementContext,0);
};

SimpleStatementContext.prototype.otherAdministrativeStatement = function() {
    return this.getTypedRuleContext(OtherAdministrativeStatementContext,0);
};

SimpleStatementContext.prototype.utilityStatement = function() {
    return this.getTypedRuleContext(UtilityStatementContext,0);
};

SimpleStatementContext.prototype.getDiagnostics = function() {
    return this.getTypedRuleContext(GetDiagnosticsContext,0);
};

SimpleStatementContext.prototype.signalStatement = function() {
    return this.getTypedRuleContext(SignalStatementContext,0);
};

SimpleStatementContext.prototype.resignalStatement = function() {
    return this.getTypedRuleContext(ResignalStatementContext,0);
};

SimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleStatementContext = SimpleStatementContext;

MySQLParser.prototype.simpleStatement = function() {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, MySQLParser.RULE_simpleStatement);
    try {
        this.state = 1258;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1224;
            this.alterStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1225;
            this.createStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1226;
            this.dropStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1227;
            this.renameTableStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1228;
            this.truncateTableStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1229;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 1230;
            this.importStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1231;
            this.callStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1232;
            this.deleteStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1233;
            this.doStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1234;
            this.handlerStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1235;
            this.insertStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1236;
            this.loadStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1237;
            this.replaceStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1238;
            this.selectStatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1239;
            this.updateStatement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1240;
            this.transactionOrLockingStatement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1241;
            this.replicationStatement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1242;
            this.preparedStatement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 1243;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 1244;
            this.cloneStatement();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 1245;
            this.accountManagementStatement();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 1246;
            this.tableAdministrationStatement();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 1247;
            this.installUninstallStatment();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 1248;
            this.setStatement();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 1249;
            this.showStatement();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 1250;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 1251;
            this.resourceGroupManagement();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 1252;
            this.otherAdministrativeStatement();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 1253;
            this.utilityStatement();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 1254;
            if (!( serverVersion >= 50604)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50604");
            }
            this.state = 1255;
            this.getDiagnostics();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 1256;
            this.signalStatement();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 1257;
            this.resignalStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterStatement;
    return this;
}

AlterStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementContext.prototype.constructor = AlterStatementContext;

AlterStatementContext.prototype.ALTER_SYMBOL = function() {
    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
};

AlterStatementContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

AlterStatementContext.prototype.alterDatabase = function() {
    return this.getTypedRuleContext(AlterDatabaseContext,0);
};

AlterStatementContext.prototype.PROCEDURE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
};

AlterStatementContext.prototype.procedureRef = function() {
    return this.getTypedRuleContext(ProcedureRefContext,0);
};

AlterStatementContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

AlterStatementContext.prototype.functionRef = function() {
    return this.getTypedRuleContext(FunctionRefContext,0);
};

AlterStatementContext.prototype.alterView = function() {
    return this.getTypedRuleContext(AlterViewContext,0);
};

AlterStatementContext.prototype.alterEvent = function() {
    return this.getTypedRuleContext(AlterEventContext,0);
};

AlterStatementContext.prototype.alterTablespace = function() {
    return this.getTypedRuleContext(AlterTablespaceContext,0);
};

AlterStatementContext.prototype.alterUndoTablespace = function() {
    return this.getTypedRuleContext(AlterUndoTablespaceContext,0);
};

AlterStatementContext.prototype.alterLogfileGroup = function() {
    return this.getTypedRuleContext(AlterLogfileGroupContext,0);
};

AlterStatementContext.prototype.alterServer = function() {
    return this.getTypedRuleContext(AlterServerContext,0);
};

AlterStatementContext.prototype.INSTANCE_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
};

AlterStatementContext.prototype.ROTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
};

AlterStatementContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

AlterStatementContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

AlterStatementContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

AlterStatementContext.prototype.routineAlterOptions = function() {
    return this.getTypedRuleContext(RoutineAlterOptionsContext,0);
};

AlterStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterStatement(this);
	}
};

AlterStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterStatement(this);
	}
};

AlterStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterStatementContext = AlterStatementContext;

MySQLParser.prototype.alterStatement = function() {

    var localctx = new AlterStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, MySQLParser.RULE_alterStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1260;
        this.match(MySQLParser.ALTER_SYMBOL);
        this.state = 1287;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1261;
            this.alterTable();
            break;

        case 2:
            this.state = 1262;
            this.alterDatabase();
            break;

        case 3:
            this.state = 1263;
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 1264;
            this.procedureRef();
            this.state = 1266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || _la===MySQLParser.DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x1f) == 0 && ((1 << (_la - 567)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 567)) | (1 << (MySQLParser.NOT_SYMBOL - 567)) | (1 << (MySQLParser.READS_SYMBOL - 567)))) !== 0) || _la===MySQLParser.SQL_SYMBOL) {
                this.state = 1265;
                this.routineAlterOptions();
            }

            break;

        case 4:
            this.state = 1268;
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 1269;
            this.functionRef();
            this.state = 1271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || _la===MySQLParser.DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x1f) == 0 && ((1 << (_la - 567)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 567)) | (1 << (MySQLParser.NOT_SYMBOL - 567)) | (1 << (MySQLParser.READS_SYMBOL - 567)))) !== 0) || _la===MySQLParser.SQL_SYMBOL) {
                this.state = 1270;
                this.routineAlterOptions();
            }

            break;

        case 5:
            this.state = 1273;
            this.alterView();
            break;

        case 6:
            this.state = 1274;
            this.alterEvent();
            break;

        case 7:
            this.state = 1275;
            this.alterTablespace();
            break;

        case 8:
            this.state = 1276;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 1277;
            this.alterUndoTablespace();
            break;

        case 9:
            this.state = 1278;
            this.alterLogfileGroup();
            break;

        case 10:
            this.state = 1279;
            this.alterServer();
            break;

        case 11:
            this.state = 1280;
            if (!( serverVersion >= 50713)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50713");
            }
            this.state = 1281;
            this.match(MySQLParser.INSTANCE_SYMBOL);
            this.state = 1282;
            this.match(MySQLParser.ROTATE_SYMBOL);
            this.state = 1283;
            this.textOrIdentifier();
            this.state = 1284;
            this.match(MySQLParser.MASTER_SYMBOL);
            this.state = 1285;
            this.match(MySQLParser.KEY_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterDatabase;
    return this;
}

AlterDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseContext.prototype.constructor = AlterDatabaseContext;

AlterDatabaseContext.prototype.DATABASE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
};

AlterDatabaseContext.prototype.schemaRef = function() {
    return this.getTypedRuleContext(SchemaRefContext,0);
};

AlterDatabaseContext.prototype.UPGRADE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
};

AlterDatabaseContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

AlterDatabaseContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

AlterDatabaseContext.prototype.NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
};

AlterDatabaseContext.prototype.createDatabaseOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
    } else {
        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
    }
};

AlterDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterDatabaseContext = AlterDatabaseContext;

MySQLParser.prototype.alterDatabase = function() {

    var localctx = new AlterDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, MySQLParser.RULE_alterDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1289;
        this.match(MySQLParser.DATABASE_SYMBOL);
        this.state = 1290;
        this.schemaRef();
        this.state = 1301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1292; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1291;
            		this.createDatabaseOption();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1294; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.state = 1296;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 1297;
            this.match(MySQLParser.UPGRADE_SYMBOL);
            this.state = 1298;
            this.match(MySQLParser.DATA_SYMBOL);
            this.state = 1299;
            this.match(MySQLParser.DIRECTORY_SYMBOL);
            this.state = 1300;
            this.match(MySQLParser.NAME_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterEvent;
    return this;
}

AlterEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterEventContext.prototype.constructor = AlterEventContext;

AlterEventContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

AlterEventContext.prototype.eventRef = function() {
    return this.getTypedRuleContext(EventRefContext,0);
};

AlterEventContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

AlterEventContext.prototype.ON_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ON_SYMBOL);
    } else {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
};


AlterEventContext.prototype.SCHEDULE_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
};

AlterEventContext.prototype.schedule = function() {
    return this.getTypedRuleContext(ScheduleContext,0);
};

AlterEventContext.prototype.COMPLETION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
};

AlterEventContext.prototype.PRESERVE_SYMBOL = function() {
    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
};

AlterEventContext.prototype.RENAME_SYMBOL = function() {
    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
};

AlterEventContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

AlterEventContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterEventContext.prototype.ENABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
};

AlterEventContext.prototype.DISABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
};

AlterEventContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

AlterEventContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

AlterEventContext.prototype.DO_SYMBOL = function() {
    return this.getToken(MySQLParser.DO_SYMBOL, 0);
};

AlterEventContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

AlterEventContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

AlterEventContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

AlterEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterEvent(this);
	}
};

AlterEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterEvent(this);
	}
};

AlterEventContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterEvent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterEventContext = AlterEventContext;

MySQLParser.prototype.alterEvent = function() {

    var localctx = new AlterEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, MySQLParser.RULE_alterEvent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 1303;
            this.definerClause();
        }

        this.state = 1306;
        this.match(MySQLParser.EVENT_SYMBOL);
        this.state = 1307;
        this.eventRef();
        this.state = 1311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 1308;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 1309;
            this.match(MySQLParser.SCHEDULE_SYMBOL);
            this.state = 1310;
            this.schedule();

        }
        this.state = 1319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ON_SYMBOL) {
            this.state = 1313;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 1314;
            this.match(MySQLParser.COMPLETION_SYMBOL);
            this.state = 1316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT_SYMBOL) {
                this.state = 1315;
                this.match(MySQLParser.NOT_SYMBOL);
            }

            this.state = 1318;
            this.match(MySQLParser.PRESERVE_SYMBOL);
        }

        this.state = 1324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.RENAME_SYMBOL) {
            this.state = 1321;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 1322;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 1323;
            this.identifier();
        }

        this.state = 1332;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case MySQLParser.ENABLE_SYMBOL:
        	this.state = 1326;
        	this.match(MySQLParser.ENABLE_SYMBOL);
        	break;
        case MySQLParser.DISABLE_SYMBOL:
        	this.state = 1327;
        	this.match(MySQLParser.DISABLE_SYMBOL);
        	this.state = 1330;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===MySQLParser.ON_SYMBOL) {
        	    this.state = 1328;
        	    this.match(MySQLParser.ON_SYMBOL);
        	    this.state = 1329;
        	    this.match(MySQLParser.SLAVE_SYMBOL);
        	}

        	break;
        case MySQLParser.EOF:
        case MySQLParser.COMMENT_SYMBOL:
        case MySQLParser.DO_SYMBOL:
        case MySQLParser.SEMICOLON_SYMBOL:
        	break;
        default:
        	break;
        }
        this.state = 1336;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT_SYMBOL) {
            this.state = 1334;
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 1335;
            this.textLiteral();
        }

        this.state = 1340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DO_SYMBOL) {
            this.state = 1338;
            this.match(MySQLParser.DO_SYMBOL);
            this.state = 1339;
            this.compoundStatement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterLogfileGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterLogfileGroup;
    return this;
}

AlterLogfileGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterLogfileGroupContext.prototype.constructor = AlterLogfileGroupContext;

AlterLogfileGroupContext.prototype.LOGFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
};

AlterLogfileGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

AlterLogfileGroupContext.prototype.logfileGroupRef = function() {
    return this.getTypedRuleContext(LogfileGroupRefContext,0);
};

AlterLogfileGroupContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

AlterLogfileGroupContext.prototype.UNDOFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
};

AlterLogfileGroupContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

AlterLogfileGroupContext.prototype.alterLogfileGroupOptions = function() {
    return this.getTypedRuleContext(AlterLogfileGroupOptionsContext,0);
};

AlterLogfileGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterLogfileGroup(this);
	}
};

AlterLogfileGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterLogfileGroup(this);
	}
};

AlterLogfileGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterLogfileGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterLogfileGroupContext = AlterLogfileGroupContext;

MySQLParser.prototype.alterLogfileGroup = function() {

    var localctx = new AlterLogfileGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, MySQLParser.RULE_alterLogfileGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.match(MySQLParser.LOGFILE_SYMBOL);
        this.state = 1343;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 1344;
        this.logfileGroupRef();
        this.state = 1345;
        this.match(MySQLParser.ADD_SYMBOL);
        this.state = 1346;
        this.match(MySQLParser.UNDOFILE_SYMBOL);
        this.state = 1347;
        this.textLiteral();
        this.state = 1349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL) {
            this.state = 1348;
            this.alterLogfileGroupOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterLogfileGroupOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterLogfileGroupOptions;
    return this;
}

AlterLogfileGroupOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterLogfileGroupOptionsContext.prototype.constructor = AlterLogfileGroupOptionsContext;

AlterLogfileGroupOptionsContext.prototype.alterLogfileGroupOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterLogfileGroupOptionContext);
    } else {
        return this.getTypedRuleContext(AlterLogfileGroupOptionContext,i);
    }
};

AlterLogfileGroupOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterLogfileGroupOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterLogfileGroupOptions(this);
	}
};

AlterLogfileGroupOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterLogfileGroupOptions(this);
	}
};

AlterLogfileGroupOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterLogfileGroupOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterLogfileGroupOptionsContext = AlterLogfileGroupOptionsContext;

MySQLParser.prototype.alterLogfileGroupOptions = function() {

    var localctx = new AlterLogfileGroupOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, MySQLParser.RULE_alterLogfileGroupOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this.alterLogfileGroupOption();
        this.state = 1358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
            this.state = 1353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 1352;
                this.match(MySQLParser.COMMA_SYMBOL);
            }

            this.state = 1355;
            this.alterLogfileGroupOption();
            this.state = 1360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterLogfileGroupOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterLogfileGroupOption;
    return this;
}

AlterLogfileGroupOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterLogfileGroupOptionContext.prototype.constructor = AlterLogfileGroupOptionContext;

AlterLogfileGroupOptionContext.prototype.tsOptionInitialSize = function() {
    return this.getTypedRuleContext(TsOptionInitialSizeContext,0);
};

AlterLogfileGroupOptionContext.prototype.tsOptionEngine = function() {
    return this.getTypedRuleContext(TsOptionEngineContext,0);
};

AlterLogfileGroupOptionContext.prototype.tsOptionWait = function() {
    return this.getTypedRuleContext(TsOptionWaitContext,0);
};

AlterLogfileGroupOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterLogfileGroupOption(this);
	}
};

AlterLogfileGroupOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterLogfileGroupOption(this);
	}
};

AlterLogfileGroupOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterLogfileGroupOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterLogfileGroupOptionContext = AlterLogfileGroupOptionContext;

MySQLParser.prototype.alterLogfileGroupOption = function() {

    var localctx = new AlterLogfileGroupOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, MySQLParser.RULE_alterLogfileGroupOption);
    try {
        this.state = 1364;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INITIAL_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1361;
            this.tsOptionInitialSize();
            break;
        case MySQLParser.ENGINE_SYMBOL:
        case MySQLParser.STORAGE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1362;
            this.tsOptionEngine();
            break;
        case MySQLParser.NO_WAIT_SYMBOL:
        case MySQLParser.WAIT_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1363;
            this.tsOptionWait();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterServer;
    return this;
}

AlterServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterServerContext.prototype.constructor = AlterServerContext;

AlterServerContext.prototype.SERVER_SYMBOL = function() {
    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
};

AlterServerContext.prototype.serverRef = function() {
    return this.getTypedRuleContext(ServerRefContext,0);
};

AlterServerContext.prototype.serverOptions = function() {
    return this.getTypedRuleContext(ServerOptionsContext,0);
};

AlterServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterServer(this);
	}
};

AlterServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterServer(this);
	}
};

AlterServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterServerContext = AlterServerContext;

MySQLParser.prototype.alterServer = function() {

    var localctx = new AlterServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, MySQLParser.RULE_alterServer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1366;
        this.match(MySQLParser.SERVER_SYMBOL);
        this.state = 1367;
        this.serverRef();
        this.state = 1368;
        this.serverOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTable;
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

AlterTableContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

AlterTableContext.prototype.onlineOption = function() {
    return this.getTypedRuleContext(OnlineOptionContext,0);
};

AlterTableContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

AlterTableContext.prototype.alterTableActions = function() {
    return this.getTypedRuleContext(AlterTableActionsContext,0);
};

AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTableContext = AlterTableContext;

MySQLParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, MySQLParser.RULE_alterTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1371;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 1370;
            this.onlineOption();

        }
        this.state = 1375;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 1373;
            if (!( serverVersion < 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
            }
            this.state = 1374;
            this.match(MySQLParser.IGNORE_SYMBOL);

        }
        this.state = 1377;
        this.match(MySQLParser.TABLE_SYMBOL);
        this.state = 1378;
        this.tableRef();
        this.state = 1380;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 1379;
            this.alterTableActions();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableActionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTableActions;
    return this;
}

AlterTableActionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableActionsContext.prototype.constructor = AlterTableActionsContext;

AlterTableActionsContext.prototype.alterCommandList = function() {
    return this.getTypedRuleContext(AlterCommandListContext,0);
};

AlterTableActionsContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

AlterTableActionsContext.prototype.removePartitioning = function() {
    return this.getTypedRuleContext(RemovePartitioningContext,0);
};

AlterTableActionsContext.prototype.standaloneAlterCommands = function() {
    return this.getTypedRuleContext(StandaloneAlterCommandsContext,0);
};

AlterTableActionsContext.prototype.alterCommandsModifierList = function() {
    return this.getTypedRuleContext(AlterCommandsModifierListContext,0);
};

AlterTableActionsContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

AlterTableActionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTableActions(this);
	}
};

AlterTableActionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTableActions(this);
	}
};

AlterTableActionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTableActions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTableActionsContext = AlterTableActionsContext;

MySQLParser.prototype.alterTableActions = function() {

    var localctx = new AlterTableActionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, MySQLParser.RULE_alterTableActions);
    try {
        this.state = 1395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1382;
            this.alterCommandList();
            this.state = 1385;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case MySQLParser.PARTITION_SYMBOL:
            	this.state = 1383;
            	this.partitionClause();
            	break;
            case MySQLParser.REMOVE_SYMBOL:
            	this.state = 1384;
            	this.removePartitioning();
            	break;
            case MySQLParser.EOF:
            case MySQLParser.SEMICOLON_SYMBOL:
            	break;
            default:
            	break;
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1387;
            this.partitionClause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1388;
            this.removePartitioning();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1392;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 1389;
                this.alterCommandsModifierList();
                this.state = 1390;
                this.match(MySQLParser.COMMA_SYMBOL);

            }
            this.state = 1394;
            this.standaloneAlterCommands();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterCommandListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterCommandList;
    return this;
}

AlterCommandListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterCommandListContext.prototype.constructor = AlterCommandListContext;

AlterCommandListContext.prototype.alterCommandsModifierList = function() {
    return this.getTypedRuleContext(AlterCommandsModifierListContext,0);
};

AlterCommandListContext.prototype.alterList = function() {
    return this.getTypedRuleContext(AlterListContext,0);
};

AlterCommandListContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

AlterCommandListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterCommandList(this);
	}
};

AlterCommandListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterCommandList(this);
	}
};

AlterCommandListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterCommandList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterCommandListContext = AlterCommandListContext;

MySQLParser.prototype.alterCommandList = function() {

    var localctx = new AlterCommandListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, MySQLParser.RULE_alterCommandList);
    try {
        this.state = 1404;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1397;
            this.alterCommandsModifierList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1401;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            if(la_===1) {
                this.state = 1398;
                this.alterCommandsModifierList();
                this.state = 1399;
                this.match(MySQLParser.COMMA_SYMBOL);

            }
            this.state = 1403;
            this.alterList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterCommandsModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterCommandsModifierList;
    return this;
}

AlterCommandsModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterCommandsModifierListContext.prototype.constructor = AlterCommandsModifierListContext;

AlterCommandsModifierListContext.prototype.alterCommandsModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterCommandsModifierContext);
    } else {
        return this.getTypedRuleContext(AlterCommandsModifierContext,i);
    }
};

AlterCommandsModifierListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterCommandsModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterCommandsModifierList(this);
	}
};

AlterCommandsModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterCommandsModifierList(this);
	}
};

AlterCommandsModifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterCommandsModifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterCommandsModifierListContext = AlterCommandsModifierListContext;

MySQLParser.prototype.alterCommandsModifierList = function() {

    var localctx = new AlterCommandsModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, MySQLParser.RULE_alterCommandsModifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1406;
        this.alterCommandsModifier();
        this.state = 1411;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1407;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 1408;
                this.alterCommandsModifier(); 
            }
            this.state = 1413;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandaloneAlterCommandsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_standaloneAlterCommands;
    return this;
}

StandaloneAlterCommandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandaloneAlterCommandsContext.prototype.constructor = StandaloneAlterCommandsContext;

StandaloneAlterCommandsContext.prototype.DISCARD_SYMBOL = function() {
    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
};

StandaloneAlterCommandsContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

StandaloneAlterCommandsContext.prototype.IMPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
};

StandaloneAlterCommandsContext.prototype.alterPartition = function() {
    return this.getTypedRuleContext(AlterPartitionContext,0);
};

StandaloneAlterCommandsContext.prototype.SECONDARY_LOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
};

StandaloneAlterCommandsContext.prototype.SECONDARY_UNLOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
};

StandaloneAlterCommandsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStandaloneAlterCommands(this);
	}
};

StandaloneAlterCommandsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStandaloneAlterCommands(this);
	}
};

StandaloneAlterCommandsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStandaloneAlterCommands(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StandaloneAlterCommandsContext = StandaloneAlterCommandsContext;

MySQLParser.prototype.standaloneAlterCommands = function() {

    var localctx = new StandaloneAlterCommandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, MySQLParser.RULE_standaloneAlterCommands);
    var _la = 0; // Token type
    try {
        this.state = 1421;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1414;
            this.match(MySQLParser.DISCARD_SYMBOL);
            this.state = 1415;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1416;
            this.match(MySQLParser.IMPORT_SYMBOL);
            this.state = 1417;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1418;
            this.alterPartition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1419;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 1420;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SECONDARY_LOAD_SYMBOL || _la===MySQLParser.SECONDARY_UNLOAD_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterPartitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterPartition;
    return this;
}

AlterPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterPartitionContext.prototype.constructor = AlterPartitionContext;

AlterPartitionContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

AlterPartitionContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

AlterPartitionContext.prototype.partitionDefinitions = function() {
    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
};

AlterPartitionContext.prototype.PARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
};

AlterPartitionContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

AlterPartitionContext.prototype.noWriteToBinLog = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NoWriteToBinLogContext);
    } else {
        return this.getTypedRuleContext(NoWriteToBinLogContext,i);
    }
};

AlterPartitionContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

AlterPartitionContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

AlterPartitionContext.prototype.REBUILD_SYMBOL = function() {
    return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
};

AlterPartitionContext.prototype.allOrPartitionNameList = function() {
    return this.getTypedRuleContext(AllOrPartitionNameListContext,0);
};

AlterPartitionContext.prototype.OPTIMIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
};

AlterPartitionContext.prototype.ANALYZE_SYMBOL = function() {
    return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
};

AlterPartitionContext.prototype.CHECK_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
};

AlterPartitionContext.prototype.checkOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CheckOptionContext);
    } else {
        return this.getTypedRuleContext(CheckOptionContext,i);
    }
};

AlterPartitionContext.prototype.REPAIR_SYMBOL = function() {
    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
};

AlterPartitionContext.prototype.repairType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RepairTypeContext);
    } else {
        return this.getTypedRuleContext(RepairTypeContext,i);
    }
};

AlterPartitionContext.prototype.COALESCE_SYMBOL = function() {
    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
};

AlterPartitionContext.prototype.TRUNCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
};

AlterPartitionContext.prototype.reorgPartitionRule = function() {
    return this.getTypedRuleContext(ReorgPartitionRuleContext,0);
};

AlterPartitionContext.prototype.REORGANIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
};

AlterPartitionContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

AlterPartitionContext.prototype.EXCHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
};

AlterPartitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterPartitionContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

AlterPartitionContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

AlterPartitionContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

AlterPartitionContext.prototype.withValidation = function() {
    return this.getTypedRuleContext(WithValidationContext,0);
};

AlterPartitionContext.prototype.DISCARD_SYMBOL = function() {
    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
};

AlterPartitionContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

AlterPartitionContext.prototype.IMPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
};

AlterPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterPartition(this);
	}
};

AlterPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterPartition(this);
	}
};

AlterPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterPartitionContext = AlterPartitionContext;

MySQLParser.prototype.alterPartition = function() {

    var localctx = new AlterPartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, MySQLParser.RULE_alterPartition);
    var _la = 0; // Token type
    try {
        this.state = 1520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1423;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 1424;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                this.state = 1425;
                this.noWriteToBinLog();
            }

            this.state = 1431;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.OPEN_PAR_SYMBOL:
                this.state = 1428;
                this.partitionDefinitions();
                break;
            case MySQLParser.PARTITIONS_SYMBOL:
                this.state = 1429;
                this.match(MySQLParser.PARTITIONS_SYMBOL);
                this.state = 1430;
                this.real_ulong_number();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1433;
            this.match(MySQLParser.DROP_SYMBOL);
            this.state = 1434;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1435;
            this.identifierList();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1436;
            this.match(MySQLParser.REBUILD_SYMBOL);
            this.state = 1437;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1439;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 1438;
                this.noWriteToBinLog();

            }
            this.state = 1441;
            this.allOrPartitionNameList();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1442;
            this.match(MySQLParser.OPTIMIZE_SYMBOL);
            this.state = 1443;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1445;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 1444;
                this.noWriteToBinLog();

            }
            this.state = 1447;
            this.allOrPartitionNameList();
            this.state = 1449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                this.state = 1448;
                this.noWriteToBinLog();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1451;
            this.match(MySQLParser.ANALYZE_SYMBOL);
            this.state = 1452;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1454;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 1453;
                this.noWriteToBinLog();

            }
            this.state = 1456;
            this.allOrPartitionNameList();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1457;
            this.match(MySQLParser.CHECK_SYMBOL);
            this.state = 1458;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1459;
            this.allOrPartitionNameList();
            this.state = 1463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.CHANGED_SYMBOL || _la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.FAST_SYMBOL || _la===MySQLParser.MEDIUM_SYMBOL || _la===MySQLParser.QUICK_SYMBOL || _la===MySQLParser.FOR_SYMBOL) {
                this.state = 1460;
                this.checkOption();
                this.state = 1465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1466;
            this.match(MySQLParser.REPAIR_SYMBOL);
            this.state = 1467;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1469;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 1468;
                this.noWriteToBinLog();

            }
            this.state = 1471;
            this.allOrPartitionNameList();
            this.state = 1475;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.QUICK_SYMBOL || _la===MySQLParser.USE_FRM_SYMBOL) {
                this.state = 1472;
                this.repairType();
                this.state = 1477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1478;
            this.match(MySQLParser.COALESCE_SYMBOL);
            this.state = 1479;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1481;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                this.state = 1480;
                this.noWriteToBinLog();
            }

            this.state = 1483;
            this.real_ulong_number();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1484;
            this.match(MySQLParser.TRUNCATE_SYMBOL);
            this.state = 1485;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1486;
            this.allOrPartitionNameList();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1487;
            this.reorgPartitionRule();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1488;
            this.match(MySQLParser.REORGANIZE_SYMBOL);
            this.state = 1489;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1491;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
            if(la_===1) {
                this.state = 1490;
                this.noWriteToBinLog();

            }
            this.state = 1497;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            if(la_===1) {
                this.state = 1493;
                this.identifierList();
                this.state = 1494;
                this.match(MySQLParser.INTO_SYMBOL);
                this.state = 1495;
                this.partitionDefinitions();

            }
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1499;
            this.match(MySQLParser.EXCHANGE_SYMBOL);
            this.state = 1500;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1501;
            this.identifier();
            this.state = 1502;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 1503;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 1504;
            this.tableRef();
            this.state = 1506;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
            if(la_===1) {
                this.state = 1505;
                this.withValidation();

            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1508;
            if (!( serverVersion >= 50704)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
            }
            this.state = 1509;
            this.match(MySQLParser.DISCARD_SYMBOL);
            this.state = 1510;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1511;
            this.allOrPartitionNameList();
            this.state = 1512;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1514;
            if (!( serverVersion >= 50704)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
            }
            this.state = 1515;
            this.match(MySQLParser.IMPORT_SYMBOL);
            this.state = 1516;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 1517;
            this.allOrPartitionNameList();
            this.state = 1518;
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterList;
    return this;
}

AlterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterListContext.prototype.constructor = AlterListContext;

AlterListContext.prototype.alterListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterListItemContext);
    } else {
        return this.getTypedRuleContext(AlterListItemContext,i);
    }
};

AlterListContext.prototype.createTableOptionsSpaceSeparated = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateTableOptionsSpaceSeparatedContext);
    } else {
        return this.getTypedRuleContext(CreateTableOptionsSpaceSeparatedContext,i);
    }
};

AlterListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterListContext.prototype.alterCommandsModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterCommandsModifierContext);
    } else {
        return this.getTypedRuleContext(AlterCommandsModifierContext,i);
    }
};

AlterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterList(this);
	}
};

AlterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterList(this);
	}
};

AlterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterListContext = AlterListContext;

MySQLParser.prototype.alterList = function() {

    var localctx = new AlterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, MySQLParser.RULE_alterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1524;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1522;
            this.alterListItem();
            break;

        case 2:
            this.state = 1523;
            this.createTableOptionsSpaceSeparated();
            break;

        }
        this.state = 1534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 1526;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 1530;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1527;
                this.alterListItem();
                break;

            case 2:
                this.state = 1528;
                this.alterCommandsModifier();
                break;

            case 3:
                this.state = 1529;
                this.createTableOptionsSpaceSeparated();
                break;

            }
            this.state = 1536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterCommandsModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterCommandsModifier;
    return this;
}

AlterCommandsModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterCommandsModifierContext.prototype.constructor = AlterCommandsModifierContext;

AlterCommandsModifierContext.prototype.alterAlgorithmOption = function() {
    return this.getTypedRuleContext(AlterAlgorithmOptionContext,0);
};

AlterCommandsModifierContext.prototype.alterLockOption = function() {
    return this.getTypedRuleContext(AlterLockOptionContext,0);
};

AlterCommandsModifierContext.prototype.withValidation = function() {
    return this.getTypedRuleContext(WithValidationContext,0);
};

AlterCommandsModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterCommandsModifier(this);
	}
};

AlterCommandsModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterCommandsModifier(this);
	}
};

AlterCommandsModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterCommandsModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterCommandsModifierContext = AlterCommandsModifierContext;

MySQLParser.prototype.alterCommandsModifier = function() {

    var localctx = new AlterCommandsModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, MySQLParser.RULE_alterCommandsModifier);
    try {
        this.state = 1540;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1537;
            this.alterAlgorithmOption();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1538;
            this.alterLockOption();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1539;
            this.withValidation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterListItem;
    return this;
}

AlterListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterListItemContext.prototype.constructor = AlterListItemContext;

AlterListItemContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

AlterListItemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterListItemContext.prototype.fieldDefinition = function() {
    return this.getTypedRuleContext(FieldDefinitionContext,0);
};

AlterListItemContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

AlterListItemContext.prototype.tableElementList = function() {
    return this.getTypedRuleContext(TableElementListContext,0);
};

AlterListItemContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

AlterListItemContext.prototype.COLUMN_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
};

AlterListItemContext.prototype.checkOrReferences = function() {
    return this.getTypedRuleContext(CheckOrReferencesContext,0);
};

AlterListItemContext.prototype.place = function() {
    return this.getTypedRuleContext(PlaceContext,0);
};

AlterListItemContext.prototype.tableConstraintDef = function() {
    return this.getTypedRuleContext(TableConstraintDefContext,0);
};

AlterListItemContext.prototype.CHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
};

AlterListItemContext.prototype.columnInternalRef = function() {
    return this.getTypedRuleContext(ColumnInternalRefContext,0);
};

AlterListItemContext.prototype.MODIFY_SYMBOL = function() {
    return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
};

AlterListItemContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

AlterListItemContext.prototype.FOREIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
};

AlterListItemContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

AlterListItemContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

AlterListItemContext.prototype.keyOrIndex = function() {
    return this.getTypedRuleContext(KeyOrIndexContext,0);
};

AlterListItemContext.prototype.indexRef = function() {
    return this.getTypedRuleContext(IndexRefContext,0);
};

AlterListItemContext.prototype.restrict = function() {
    return this.getTypedRuleContext(RestrictContext,0);
};

AlterListItemContext.prototype.DISABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
};

AlterListItemContext.prototype.KEYS_SYMBOL = function() {
    return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
};

AlterListItemContext.prototype.ENABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
};

AlterListItemContext.prototype.ALTER_SYMBOL = function() {
    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
};

AlterListItemContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

AlterListItemContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

AlterListItemContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

AlterListItemContext.prototype.signedLiteral = function() {
    return this.getTypedRuleContext(SignedLiteralContext,0);
};

AlterListItemContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

AlterListItemContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

AlterListItemContext.prototype.CHECK_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
};

AlterListItemContext.prototype.constraintEnforcement = function() {
    return this.getTypedRuleContext(ConstraintEnforcementContext,0);
};

AlterListItemContext.prototype.RENAME_SYMBOL = function() {
    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
};

AlterListItemContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

AlterListItemContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

AlterListItemContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

AlterListItemContext.prototype.indexName = function() {
    return this.getTypedRuleContext(IndexNameContext,0);
};

AlterListItemContext.prototype.CONVERT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
};

AlterListItemContext.prototype.charset = function() {
    return this.getTypedRuleContext(CharsetContext,0);
};

AlterListItemContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

AlterListItemContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

AlterListItemContext.prototype.FORCE_SYMBOL = function() {
    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
};

AlterListItemContext.prototype.ORDER_SYMBOL = function() {
    return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
};

AlterListItemContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

AlterListItemContext.prototype.alterOrderList = function() {
    return this.getTypedRuleContext(AlterOrderListContext,0);
};

AlterListItemContext.prototype.UPGRADE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
};

AlterListItemContext.prototype.PARTITIONING_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
};

AlterListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterListItem(this);
	}
};

AlterListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterListItem(this);
	}
};

AlterListItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterListItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterListItemContext = AlterListItemContext;

MySQLParser.prototype.alterListItem = function() {

    var localctx = new AlterListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, MySQLParser.RULE_alterListItem);
    var _la = 0; // Token type
    try {
        this.state = 1675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1542;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 1544;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            if(la_===1) {
                this.state = 1543;
                this.match(MySQLParser.COLUMN_SYMBOL);

            }
            this.state = 1558;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1546;
                this.identifier();
                this.state = 1547;
                this.fieldDefinition();
                this.state = 1549;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
                if(la_===1) {
                    this.state = 1548;
                    this.checkOrReferences();

                }
                this.state = 1552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AFTER_SYMBOL || _la===MySQLParser.FIRST_SYMBOL) {
                    this.state = 1551;
                    this.place();
                }

                break;

            case 2:
                this.state = 1554;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 1555;
                this.tableElementList();
                this.state = 1556;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1560;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 1561;
            this.tableConstraintDef();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1562;
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.state = 1564;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
            if(la_===1) {
                this.state = 1563;
                this.match(MySQLParser.COLUMN_SYMBOL);

            }
            this.state = 1566;
            this.columnInternalRef();
            this.state = 1567;
            this.identifier();
            this.state = 1568;
            this.fieldDefinition();
            this.state = 1570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AFTER_SYMBOL || _la===MySQLParser.FIRST_SYMBOL) {
                this.state = 1569;
                this.place();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1572;
            this.match(MySQLParser.MODIFY_SYMBOL);
            this.state = 1574;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 1573;
                this.match(MySQLParser.COLUMN_SYMBOL);

            }
            this.state = 1576;
            this.columnInternalRef();
            this.state = 1577;
            this.fieldDefinition();
            this.state = 1579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AFTER_SYMBOL || _la===MySQLParser.FIRST_SYMBOL) {
                this.state = 1578;
                this.place();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1581;
            this.match(MySQLParser.DROP_SYMBOL);
            this.state = 1604;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1583;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
                if(la_===1) {
                    this.state = 1582;
                    this.match(MySQLParser.COLUMN_SYMBOL);

                }
                this.state = 1585;
                this.columnInternalRef();
                this.state = 1587;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL) {
                    this.state = 1586;
                    this.restrict();
                }

                break;

            case 2:
                this.state = 1589;
                this.match(MySQLParser.FOREIGN_SYMBOL);
                this.state = 1590;
                this.match(MySQLParser.KEY_SYMBOL);
                this.state = 1597;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1591;
                    if (!( serverVersion >= 50700)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
                    }
                    this.state = 1592;
                    this.columnInternalRef();
                    break;

                case 2:
                    this.state = 1593;
                    if (!( serverVersion < 50700)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
                    }
                    this.state = 1595;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
                    if(la_===1) {
                        this.state = 1594;
                        this.columnInternalRef();

                    }
                    break;

                }
                break;

            case 3:
                this.state = 1599;
                this.match(MySQLParser.PRIMARY_SYMBOL);
                this.state = 1600;
                this.match(MySQLParser.KEY_SYMBOL);
                break;

            case 4:
                this.state = 1601;
                this.keyOrIndex();
                this.state = 1602;
                this.indexRef();
                break;

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1606;
            this.match(MySQLParser.DISABLE_SYMBOL);
            this.state = 1607;
            this.match(MySQLParser.KEYS_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1608;
            this.match(MySQLParser.ENABLE_SYMBOL);
            this.state = 1609;
            this.match(MySQLParser.KEYS_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1610;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 1612;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 1611;
                this.match(MySQLParser.COLUMN_SYMBOL);

            }
            this.state = 1614;
            this.columnInternalRef();
            this.state = 1624;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.SET_SYMBOL:
                this.state = 1615;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 1616;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 1620;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1617;
                    if (!( serverVersion >= 80014)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                    }
                    this.state = 1618;
                    this.exprWithParentheses();
                    break;

                case 2:
                    this.state = 1619;
                    this.signedLiteral();
                    break;

                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.state = 1622;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 1623;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1626;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 1627;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 1628;
            this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 1629;
            this.indexRef();
            this.state = 1630;
            this.visibility();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1632;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 1633;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 1634;
            this.match(MySQLParser.CHECK_SYMBOL);
            this.state = 1635;
            this.identifier();
            this.state = 1636;
            this.constraintEnforcement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1638;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 1639;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 1640;
            this.match(MySQLParser.COLUMN_SYMBOL);
            this.state = 1641;
            this.columnInternalRef();
            this.state = 1642;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 1643;
            this.identifier();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1645;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 1647;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            if(la_===1) {
                this.state = 1646;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.AS_SYMBOL || _la===MySQLParser.TO_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1649;
            this.tableName();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1650;
            if (!( serverVersion >= 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
            }
            this.state = 1651;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 1652;
            this.keyOrIndex();
            this.state = 1653;
            this.indexRef();
            this.state = 1654;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 1655;
            this.indexName();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1657;
            this.match(MySQLParser.CONVERT_SYMBOL);
            this.state = 1658;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 1659;
            this.charset();
            this.state = 1663;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1660;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 1661;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                break;

            case 2:
                this.state = 1662;
                this.charsetName();
                break;

            }
            this.state = 1666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLLATE_SYMBOL) {
                this.state = 1665;
                this.collate();
            }

            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1668;
            this.match(MySQLParser.FORCE_SYMBOL);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1669;
            this.match(MySQLParser.ORDER_SYMBOL);
            this.state = 1670;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 1671;
            this.alterOrderList();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1672;
            if (!( serverVersion >= 50708 && serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
            }
            this.state = 1673;
            this.match(MySQLParser.UPGRADE_SYMBOL);
            this.state = 1674;
            this.match(MySQLParser.PARTITIONING_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PlaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_place;
    return this;
}

PlaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlaceContext.prototype.constructor = PlaceContext;

PlaceContext.prototype.AFTER_SYMBOL = function() {
    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
};

PlaceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PlaceContext.prototype.FIRST_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
};

PlaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPlace(this);
	}
};

PlaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPlace(this);
	}
};

PlaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPlace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PlaceContext = PlaceContext;

MySQLParser.prototype.place = function() {

    var localctx = new PlaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, MySQLParser.RULE_place);
    try {
        this.state = 1680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.AFTER_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1677;
            this.match(MySQLParser.AFTER_SYMBOL);
            this.state = 1678;
            this.identifier();
            break;
        case MySQLParser.FIRST_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1679;
            this.match(MySQLParser.FIRST_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RestrictContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_restrict;
    return this;
}

RestrictContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RestrictContext.prototype.constructor = RestrictContext;

RestrictContext.prototype.RESTRICT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
};

RestrictContext.prototype.CASCADE_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
};

RestrictContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRestrict(this);
	}
};

RestrictContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRestrict(this);
	}
};

RestrictContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRestrict(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RestrictContext = RestrictContext;

MySQLParser.prototype.restrict = function() {

    var localctx = new RestrictContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, MySQLParser.RULE_restrict);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1682;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterOrderListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterOrderList;
    return this;
}

AlterOrderListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterOrderListContext.prototype.constructor = AlterOrderListContext;

AlterOrderListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

AlterOrderListContext.prototype.direction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DirectionContext);
    } else {
        return this.getTypedRuleContext(DirectionContext,i);
    }
};

AlterOrderListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterOrderListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterOrderList(this);
	}
};

AlterOrderListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterOrderList(this);
	}
};

AlterOrderListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterOrderList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterOrderListContext = AlterOrderListContext;

MySQLParser.prototype.alterOrderList = function() {

    var localctx = new AlterOrderListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, MySQLParser.RULE_alterOrderList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1684;
        this.identifier();
        this.state = 1686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ASC_SYMBOL || _la===MySQLParser.DESC_SYMBOL) {
            this.state = 1685;
            this.direction();
        }

        this.state = 1695;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1688;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 1689;
                this.identifier();
                this.state = 1691;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ASC_SYMBOL || _la===MySQLParser.DESC_SYMBOL) {
                    this.state = 1690;
                    this.direction();
                }
         
            }
            this.state = 1697;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterAlgorithmOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterAlgorithmOption;
    return this;
}

AlterAlgorithmOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterAlgorithmOptionContext.prototype.constructor = AlterAlgorithmOptionContext;

AlterAlgorithmOptionContext.prototype.ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
};

AlterAlgorithmOptionContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

AlterAlgorithmOptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterAlgorithmOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

AlterAlgorithmOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterAlgorithmOption(this);
	}
};

AlterAlgorithmOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterAlgorithmOption(this);
	}
};

AlterAlgorithmOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterAlgorithmOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterAlgorithmOptionContext = AlterAlgorithmOptionContext;

MySQLParser.prototype.alterAlgorithmOption = function() {

    var localctx = new AlterAlgorithmOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, MySQLParser.RULE_alterAlgorithmOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1698;
        this.match(MySQLParser.ALGORITHM_SYMBOL);
        this.state = 1700;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 1699;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 1704;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1702;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        case 2:
            this.state = 1703;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterLockOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterLockOption;
    return this;
}

AlterLockOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterLockOptionContext.prototype.constructor = AlterLockOptionContext;

AlterLockOptionContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

AlterLockOptionContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

AlterLockOptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterLockOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

AlterLockOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterLockOption(this);
	}
};

AlterLockOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterLockOption(this);
	}
};

AlterLockOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterLockOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterLockOptionContext = AlterLockOptionContext;

MySQLParser.prototype.alterLockOption = function() {

    var localctx = new AlterLockOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, MySQLParser.RULE_alterLockOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1706;
        this.match(MySQLParser.LOCK_SYMBOL);
        this.state = 1708;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        if(la_===1) {
            this.state = 1707;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 1712;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1710;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        case 2:
            this.state = 1711;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexLockAndAlgorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexLockAndAlgorithm;
    return this;
}

IndexLockAndAlgorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexLockAndAlgorithmContext.prototype.constructor = IndexLockAndAlgorithmContext;

IndexLockAndAlgorithmContext.prototype.alterAlgorithmOption = function() {
    return this.getTypedRuleContext(AlterAlgorithmOptionContext,0);
};

IndexLockAndAlgorithmContext.prototype.alterLockOption = function() {
    return this.getTypedRuleContext(AlterLockOptionContext,0);
};

IndexLockAndAlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexLockAndAlgorithm(this);
	}
};

IndexLockAndAlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexLockAndAlgorithm(this);
	}
};

IndexLockAndAlgorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexLockAndAlgorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexLockAndAlgorithmContext = IndexLockAndAlgorithmContext;

MySQLParser.prototype.indexLockAndAlgorithm = function() {

    var localctx = new IndexLockAndAlgorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, MySQLParser.RULE_indexLockAndAlgorithm);
    var _la = 0; // Token type
    try {
        this.state = 1722;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ALGORITHM_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1714;
            this.alterAlgorithmOption();
            this.state = 1716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCK_SYMBOL) {
                this.state = 1715;
                this.alterLockOption();
            }

            break;
        case MySQLParser.LOCK_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1718;
            this.alterLockOption();
            this.state = 1720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALGORITHM_SYMBOL) {
                this.state = 1719;
                this.alterAlgorithmOption();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithValidationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_withValidation;
    return this;
}

WithValidationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithValidationContext.prototype.constructor = WithValidationContext;

WithValidationContext.prototype.VALIDATION_SYMBOL = function() {
    return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
};

WithValidationContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

WithValidationContext.prototype.WITHOUT_SYMBOL = function() {
    return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
};

WithValidationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWithValidation(this);
	}
};

WithValidationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWithValidation(this);
	}
};

WithValidationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWithValidation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WithValidationContext = WithValidationContext;

MySQLParser.prototype.withValidation = function() {

    var localctx = new WithValidationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, MySQLParser.RULE_withValidation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1724;
        if (!( serverVersion >= 50706)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
        }
        this.state = 1725;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.WITH_SYMBOL || _la===MySQLParser.WITHOUT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1726;
        this.match(MySQLParser.VALIDATION_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RemovePartitioningContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_removePartitioning;
    return this;
}

RemovePartitioningContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemovePartitioningContext.prototype.constructor = RemovePartitioningContext;

RemovePartitioningContext.prototype.REMOVE_SYMBOL = function() {
    return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
};

RemovePartitioningContext.prototype.PARTITIONING_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
};

RemovePartitioningContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRemovePartitioning(this);
	}
};

RemovePartitioningContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRemovePartitioning(this);
	}
};

RemovePartitioningContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRemovePartitioning(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RemovePartitioningContext = RemovePartitioningContext;

MySQLParser.prototype.removePartitioning = function() {

    var localctx = new RemovePartitioningContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, MySQLParser.RULE_removePartitioning);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1728;
        this.match(MySQLParser.REMOVE_SYMBOL);
        this.state = 1729;
        this.match(MySQLParser.PARTITIONING_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AllOrPartitionNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_allOrPartitionNameList;
    return this;
}

AllOrPartitionNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllOrPartitionNameListContext.prototype.constructor = AllOrPartitionNameListContext;

AllOrPartitionNameListContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

AllOrPartitionNameListContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

AllOrPartitionNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAllOrPartitionNameList(this);
	}
};

AllOrPartitionNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAllOrPartitionNameList(this);
	}
};

AllOrPartitionNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAllOrPartitionNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AllOrPartitionNameListContext = AllOrPartitionNameListContext;

MySQLParser.prototype.allOrPartitionNameList = function() {

    var localctx = new AllOrPartitionNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, MySQLParser.RULE_allOrPartitionNameList);
    try {
        this.state = 1733;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1731;
            this.match(MySQLParser.ALL_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1732;
            this.identifierList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReorgPartitionRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_reorgPartitionRule;
    return this;
}

ReorgPartitionRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReorgPartitionRuleContext.prototype.constructor = ReorgPartitionRuleContext;

ReorgPartitionRuleContext.prototype.REORGANIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
};

ReorgPartitionRuleContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

ReorgPartitionRuleContext.prototype.noWriteToBinLog = function() {
    return this.getTypedRuleContext(NoWriteToBinLogContext,0);
};

ReorgPartitionRuleContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ReorgPartitionRuleContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

ReorgPartitionRuleContext.prototype.partitionDefinitions = function() {
    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
};

ReorgPartitionRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReorgPartitionRule(this);
	}
};

ReorgPartitionRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReorgPartitionRule(this);
	}
};

ReorgPartitionRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReorgPartitionRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReorgPartitionRuleContext = ReorgPartitionRuleContext;

MySQLParser.prototype.reorgPartitionRule = function() {

    var localctx = new ReorgPartitionRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, MySQLParser.RULE_reorgPartitionRule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1735;
        this.match(MySQLParser.REORGANIZE_SYMBOL);
        this.state = 1736;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 1738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 1737;
            this.noWriteToBinLog();

        }
        this.state = 1744;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1740;
            this.identifierList();
            this.state = 1741;
            this.match(MySQLParser.INTO_SYMBOL);
            this.state = 1742;
            this.partitionDefinitions();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTablespace;
    return this;
}

AlterTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTablespaceContext.prototype.constructor = AlterTablespaceContext;

AlterTablespaceContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

AlterTablespaceContext.prototype.tablespaceRef = function() {
    return this.getTypedRuleContext(TablespaceRefContext,0);
};

AlterTablespaceContext.prototype.DATAFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
};

AlterTablespaceContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

AlterTablespaceContext.prototype.RENAME_SYMBOL = function() {
    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
};

AlterTablespaceContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

AlterTablespaceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterTablespaceContext.prototype.alterTablespaceOptions = function() {
    return this.getTypedRuleContext(AlterTablespaceOptionsContext,0);
};

AlterTablespaceContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

AlterTablespaceContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

AlterTablespaceContext.prototype.CHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
};

AlterTablespaceContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

AlterTablespaceContext.prototype.ACCESSIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0);
};

AlterTablespaceContext.prototype.READ_ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
};

AlterTablespaceContext.prototype.READ_WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_WRITE_SYMBOL, 0);
};

AlterTablespaceContext.prototype.changeTablespaceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChangeTablespaceOptionContext);
    } else {
        return this.getTypedRuleContext(ChangeTablespaceOptionContext,i);
    }
};

AlterTablespaceContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTablespace(this);
	}
};

AlterTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTablespace(this);
	}
};

AlterTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTablespaceContext = AlterTablespaceContext;

MySQLParser.prototype.alterTablespace = function() {

    var localctx = new AlterTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, MySQLParser.RULE_alterTablespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1746;
        this.match(MySQLParser.TABLESPACE_SYMBOL);
        this.state = 1747;
        this.tablespaceRef();
        this.state = 1781;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1748;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ADD_SYMBOL || _la===MySQLParser.DROP_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1749;
            this.match(MySQLParser.DATAFILE_SYMBOL);
            this.state = 1750;
            this.textLiteral();
            this.state = 1752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la===MySQLParser.ENCRYPTION_SYMBOL || _la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.MAX_SIZE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL) {
                this.state = 1751;
                this.alterTablespaceOptions();
            }

            break;

        case 2:
            this.state = 1754;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 1774;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.EOF:
            case MySQLParser.SEMICOLON_SYMBOL:
                break;
            case MySQLParser.CHANGE_SYMBOL:
                this.state = 1756;
                this.match(MySQLParser.CHANGE_SYMBOL);
                this.state = 1757;
                this.match(MySQLParser.DATAFILE_SYMBOL);
                this.state = 1758;
                this.textLiteral();
                this.state = 1769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.MAX_SIZE_SYMBOL) {
                    this.state = 1759;
                    this.changeTablespaceOption();
                    this.state = 1766;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.MAX_SIZE_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
                        this.state = 1761;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===MySQLParser.COMMA_SYMBOL) {
                            this.state = 1760;
                            this.match(MySQLParser.COMMA_SYMBOL);
                        }

                        this.state = 1763;
                        this.changeTablespaceOption();
                        this.state = 1768;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                break;
            case MySQLParser.READ_ONLY_SYMBOL:
            case MySQLParser.READ_WRITE_SYMBOL:
                this.state = 1771;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.READ_ONLY_SYMBOL || _la===MySQLParser.READ_WRITE_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case MySQLParser.NOT_SYMBOL:
                this.state = 1772;
                this.match(MySQLParser.NOT_SYMBOL);
                this.state = 1773;
                this.match(MySQLParser.ACCESSIBLE_SYMBOL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 3:
            this.state = 1776;
            this.match(MySQLParser.RENAME_SYMBOL);
            this.state = 1777;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 1778;
            this.identifier();
            break;

        case 4:
            this.state = 1779;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 1780;
            this.alterTablespaceOptions();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUndoTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterUndoTablespace;
    return this;
}

AlterUndoTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUndoTablespaceContext.prototype.constructor = AlterUndoTablespaceContext;

AlterUndoTablespaceContext.prototype.UNDO_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
};

AlterUndoTablespaceContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

AlterUndoTablespaceContext.prototype.tablespaceRef = function() {
    return this.getTypedRuleContext(TablespaceRefContext,0);
};

AlterUndoTablespaceContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

AlterUndoTablespaceContext.prototype.ACTIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
};

AlterUndoTablespaceContext.prototype.INACTIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
};

AlterUndoTablespaceContext.prototype.undoTableSpaceOptions = function() {
    return this.getTypedRuleContext(UndoTableSpaceOptionsContext,0);
};

AlterUndoTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUndoTablespace(this);
	}
};

AlterUndoTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUndoTablespace(this);
	}
};

AlterUndoTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUndoTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterUndoTablespaceContext = AlterUndoTablespaceContext;

MySQLParser.prototype.alterUndoTablespace = function() {

    var localctx = new AlterUndoTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, MySQLParser.RULE_alterUndoTablespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1783;
        this.match(MySQLParser.UNDO_SYMBOL);
        this.state = 1784;
        this.match(MySQLParser.TABLESPACE_SYMBOL);
        this.state = 1785;
        this.tablespaceRef();
        this.state = 1786;
        this.match(MySQLParser.SET_SYMBOL);
        this.state = 1787;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ACTIVE_SYMBOL || _la===MySQLParser.INACTIVE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL) {
            this.state = 1788;
            this.undoTableSpaceOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UndoTableSpaceOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_undoTableSpaceOptions;
    return this;
}

UndoTableSpaceOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UndoTableSpaceOptionsContext.prototype.constructor = UndoTableSpaceOptionsContext;

UndoTableSpaceOptionsContext.prototype.undoTableSpaceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UndoTableSpaceOptionContext);
    } else {
        return this.getTypedRuleContext(UndoTableSpaceOptionContext,i);
    }
};

UndoTableSpaceOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


UndoTableSpaceOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUndoTableSpaceOptions(this);
	}
};

UndoTableSpaceOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUndoTableSpaceOptions(this);
	}
};

UndoTableSpaceOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUndoTableSpaceOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UndoTableSpaceOptionsContext = UndoTableSpaceOptionsContext;

MySQLParser.prototype.undoTableSpaceOptions = function() {

    var localctx = new UndoTableSpaceOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, MySQLParser.RULE_undoTableSpaceOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1791;
        this.undoTableSpaceOption();
        this.state = 1798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
            this.state = 1793;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 1792;
                this.match(MySQLParser.COMMA_SYMBOL);
            }

            this.state = 1795;
            this.undoTableSpaceOption();
            this.state = 1800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UndoTableSpaceOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_undoTableSpaceOption;
    return this;
}

UndoTableSpaceOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UndoTableSpaceOptionContext.prototype.constructor = UndoTableSpaceOptionContext;

UndoTableSpaceOptionContext.prototype.tsOptionEngine = function() {
    return this.getTypedRuleContext(TsOptionEngineContext,0);
};

UndoTableSpaceOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUndoTableSpaceOption(this);
	}
};

UndoTableSpaceOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUndoTableSpaceOption(this);
	}
};

UndoTableSpaceOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUndoTableSpaceOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UndoTableSpaceOptionContext = UndoTableSpaceOptionContext;

MySQLParser.prototype.undoTableSpaceOption = function() {

    var localctx = new UndoTableSpaceOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, MySQLParser.RULE_undoTableSpaceOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1801;
        this.tsOptionEngine();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTablespaceOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTablespaceOptions;
    return this;
}

AlterTablespaceOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTablespaceOptionsContext.prototype.constructor = AlterTablespaceOptionsContext;

AlterTablespaceOptionsContext.prototype.alterTablespaceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterTablespaceOptionContext);
    } else {
        return this.getTypedRuleContext(AlterTablespaceOptionContext,i);
    }
};

AlterTablespaceOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterTablespaceOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTablespaceOptions(this);
	}
};

AlterTablespaceOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTablespaceOptions(this);
	}
};

AlterTablespaceOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTablespaceOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTablespaceOptionsContext = AlterTablespaceOptionsContext;

MySQLParser.prototype.alterTablespaceOptions = function() {

    var localctx = new AlterTablespaceOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, MySQLParser.RULE_alterTablespaceOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1803;
        this.alterTablespaceOption();
        this.state = 1810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la===MySQLParser.ENCRYPTION_SYMBOL || _la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.MAX_SIZE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
            this.state = 1805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 1804;
                this.match(MySQLParser.COMMA_SYMBOL);
            }

            this.state = 1807;
            this.alterTablespaceOption();
            this.state = 1812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTablespaceOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTablespaceOption;
    return this;
}

AlterTablespaceOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTablespaceOptionContext.prototype.constructor = AlterTablespaceOptionContext;

AlterTablespaceOptionContext.prototype.INITIAL_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
};

AlterTablespaceOptionContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

AlterTablespaceOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

AlterTablespaceOptionContext.prototype.tsOptionAutoextendSize = function() {
    return this.getTypedRuleContext(TsOptionAutoextendSizeContext,0);
};

AlterTablespaceOptionContext.prototype.tsOptionMaxSize = function() {
    return this.getTypedRuleContext(TsOptionMaxSizeContext,0);
};

AlterTablespaceOptionContext.prototype.tsOptionEngine = function() {
    return this.getTypedRuleContext(TsOptionEngineContext,0);
};

AlterTablespaceOptionContext.prototype.tsOptionWait = function() {
    return this.getTypedRuleContext(TsOptionWaitContext,0);
};

AlterTablespaceOptionContext.prototype.tsOptionEncryption = function() {
    return this.getTypedRuleContext(TsOptionEncryptionContext,0);
};

AlterTablespaceOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTablespaceOption(this);
	}
};

AlterTablespaceOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTablespaceOption(this);
	}
};

AlterTablespaceOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTablespaceOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTablespaceOptionContext = AlterTablespaceOptionContext;

MySQLParser.prototype.alterTablespaceOption = function() {

    var localctx = new AlterTablespaceOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, MySQLParser.RULE_alterTablespaceOption);
    try {
        this.state = 1823;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INITIAL_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1813;
            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
            this.state = 1815;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 1814;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 1817;
            this.sizeNumber();
            break;
        case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1818;
            this.tsOptionAutoextendSize();
            break;
        case MySQLParser.MAX_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1819;
            this.tsOptionMaxSize();
            break;
        case MySQLParser.ENGINE_SYMBOL:
        case MySQLParser.STORAGE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1820;
            this.tsOptionEngine();
            break;
        case MySQLParser.NO_WAIT_SYMBOL:
        case MySQLParser.WAIT_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 1821;
            this.tsOptionWait();
            break;
        case MySQLParser.ENCRYPTION_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 1822;
            this.tsOptionEncryption();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangeTablespaceOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_changeTablespaceOption;
    return this;
}

ChangeTablespaceOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangeTablespaceOptionContext.prototype.constructor = ChangeTablespaceOptionContext;

ChangeTablespaceOptionContext.prototype.INITIAL_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
};

ChangeTablespaceOptionContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

ChangeTablespaceOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

ChangeTablespaceOptionContext.prototype.tsOptionAutoextendSize = function() {
    return this.getTypedRuleContext(TsOptionAutoextendSizeContext,0);
};

ChangeTablespaceOptionContext.prototype.tsOptionMaxSize = function() {
    return this.getTypedRuleContext(TsOptionMaxSizeContext,0);
};

ChangeTablespaceOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChangeTablespaceOption(this);
	}
};

ChangeTablespaceOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChangeTablespaceOption(this);
	}
};

ChangeTablespaceOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChangeTablespaceOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChangeTablespaceOptionContext = ChangeTablespaceOptionContext;

MySQLParser.prototype.changeTablespaceOption = function() {

    var localctx = new ChangeTablespaceOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, MySQLParser.RULE_changeTablespaceOption);
    try {
        this.state = 1832;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INITIAL_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1825;
            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
            this.state = 1827;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 1826;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 1829;
            this.sizeNumber();
            break;
        case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1830;
            this.tsOptionAutoextendSize();
            break;
        case MySQLParser.MAX_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1831;
            this.tsOptionMaxSize();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterView;
    return this;
}

AlterViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterViewContext.prototype.constructor = AlterViewContext;

AlterViewContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

AlterViewContext.prototype.viewRef = function() {
    return this.getTypedRuleContext(ViewRefContext,0);
};

AlterViewContext.prototype.viewTail = function() {
    return this.getTypedRuleContext(ViewTailContext,0);
};

AlterViewContext.prototype.viewAlgorithm = function() {
    return this.getTypedRuleContext(ViewAlgorithmContext,0);
};

AlterViewContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

AlterViewContext.prototype.viewSuid = function() {
    return this.getTypedRuleContext(ViewSuidContext,0);
};

AlterViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterView(this);
	}
};

AlterViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterView(this);
	}
};

AlterViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterViewContext = AlterViewContext;

MySQLParser.prototype.alterView = function() {

    var localctx = new AlterViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, MySQLParser.RULE_alterView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1835;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALGORITHM_SYMBOL) {
            this.state = 1834;
            this.viewAlgorithm();
        }

        this.state = 1838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 1837;
            this.definerClause();
        }

        this.state = 1841;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SQL_SYMBOL) {
            this.state = 1840;
            this.viewSuid();
        }

        this.state = 1843;
        this.match(MySQLParser.VIEW_SYMBOL);
        this.state = 1844;
        this.viewRef();
        this.state = 1845;
        this.viewTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewTail;
    return this;
}

ViewTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewTailContext.prototype.constructor = ViewTailContext;

ViewTailContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

ViewTailContext.prototype.viewSelect = function() {
    return this.getTypedRuleContext(ViewSelectContext,0);
};

ViewTailContext.prototype.columnInternalRefList = function() {
    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
};

ViewTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewTail(this);
	}
};

ViewTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewTail(this);
	}
};

ViewTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewTailContext = ViewTailContext;

MySQLParser.prototype.viewTail = function() {

    var localctx = new ViewTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, MySQLParser.RULE_viewTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 1847;
            this.columnInternalRefList();
        }

        this.state = 1850;
        this.match(MySQLParser.AS_SYMBOL);
        this.state = 1851;
        this.viewSelect();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewSelect;
    return this;
}

ViewSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewSelectContext.prototype.constructor = ViewSelectContext;

ViewSelectContext.prototype.queryExpressionOrParens = function() {
    return this.getTypedRuleContext(QueryExpressionOrParensContext,0);
};

ViewSelectContext.prototype.viewCheckOption = function() {
    return this.getTypedRuleContext(ViewCheckOptionContext,0);
};

ViewSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewSelect(this);
	}
};

ViewSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewSelect(this);
	}
};

ViewSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewSelectContext = ViewSelectContext;

MySQLParser.prototype.viewSelect = function() {

    var localctx = new ViewSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, MySQLParser.RULE_viewSelect);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1853;
        this.queryExpressionOrParens();
        this.state = 1855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WITH_SYMBOL) {
            this.state = 1854;
            this.viewCheckOption();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewCheckOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewCheckOption;
    return this;
}

ViewCheckOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewCheckOptionContext.prototype.constructor = ViewCheckOptionContext;

ViewCheckOptionContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

ViewCheckOptionContext.prototype.CHECK_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
};

ViewCheckOptionContext.prototype.OPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
};

ViewCheckOptionContext.prototype.CASCADED_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
};

ViewCheckOptionContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

ViewCheckOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewCheckOption(this);
	}
};

ViewCheckOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewCheckOption(this);
	}
};

ViewCheckOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewCheckOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewCheckOptionContext = ViewCheckOptionContext;

MySQLParser.prototype.viewCheckOption = function() {

    var localctx = new ViewCheckOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, MySQLParser.RULE_viewCheckOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1857;
        this.match(MySQLParser.WITH_SYMBOL);
        this.state = 1859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CASCADED_SYMBOL || _la===MySQLParser.LOCAL_SYMBOL) {
            this.state = 1858;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CASCADED_SYMBOL || _la===MySQLParser.LOCAL_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1861;
        this.match(MySQLParser.CHECK_SYMBOL);
        this.state = 1862;
        this.match(MySQLParser.OPTION_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createStatement;
    return this;
}

CreateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateStatementContext.prototype.constructor = CreateStatementContext;

CreateStatementContext.prototype.CREATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
};

CreateStatementContext.prototype.createDatabase = function() {
    return this.getTypedRuleContext(CreateDatabaseContext,0);
};

CreateStatementContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

CreateStatementContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

CreateStatementContext.prototype.createProcedure = function() {
    return this.getTypedRuleContext(CreateProcedureContext,0);
};

CreateStatementContext.prototype.createUdf = function() {
    return this.getTypedRuleContext(CreateUdfContext,0);
};

CreateStatementContext.prototype.createLogfileGroup = function() {
    return this.getTypedRuleContext(CreateLogfileGroupContext,0);
};

CreateStatementContext.prototype.createView = function() {
    return this.getTypedRuleContext(CreateViewContext,0);
};

CreateStatementContext.prototype.createTrigger = function() {
    return this.getTypedRuleContext(CreateTriggerContext,0);
};

CreateStatementContext.prototype.createIndex = function() {
    return this.getTypedRuleContext(CreateIndexContext,0);
};

CreateStatementContext.prototype.createServer = function() {
    return this.getTypedRuleContext(CreateServerContext,0);
};

CreateStatementContext.prototype.createTablespace = function() {
    return this.getTypedRuleContext(CreateTablespaceContext,0);
};

CreateStatementContext.prototype.createEvent = function() {
    return this.getTypedRuleContext(CreateEventContext,0);
};

CreateStatementContext.prototype.createRole = function() {
    return this.getTypedRuleContext(CreateRoleContext,0);
};

CreateStatementContext.prototype.createSpatialReference = function() {
    return this.getTypedRuleContext(CreateSpatialReferenceContext,0);
};

CreateStatementContext.prototype.createUndoTablespace = function() {
    return this.getTypedRuleContext(CreateUndoTablespaceContext,0);
};

CreateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateStatement(this);
	}
};

CreateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateStatement(this);
	}
};

CreateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateStatementContext = CreateStatementContext;

MySQLParser.prototype.createStatement = function() {

    var localctx = new CreateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, MySQLParser.RULE_createStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1864;
        this.match(MySQLParser.CREATE_SYMBOL);
        this.state = 1883;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1865;
            this.createDatabase();
            break;

        case 2:
            this.state = 1866;
            this.createTable();
            break;

        case 3:
            this.state = 1867;
            this.createFunction();
            break;

        case 4:
            this.state = 1868;
            this.createProcedure();
            break;

        case 5:
            this.state = 1869;
            this.createUdf();
            break;

        case 6:
            this.state = 1870;
            this.createLogfileGroup();
            break;

        case 7:
            this.state = 1871;
            this.createView();
            break;

        case 8:
            this.state = 1872;
            this.createTrigger();
            break;

        case 9:
            this.state = 1873;
            this.createIndex();
            break;

        case 10:
            this.state = 1874;
            this.createServer();
            break;

        case 11:
            this.state = 1875;
            this.createTablespace();
            break;

        case 12:
            this.state = 1876;
            this.createEvent();
            break;

        case 13:
            this.state = 1877;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 1878;
            this.createRole();
            break;

        case 14:
            this.state = 1879;
            if (!( serverVersion >= 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
            }
            this.state = 1880;
            this.createSpatialReference();
            break;

        case 15:
            this.state = 1881;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 1882;
            this.createUndoTablespace();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createDatabase;
    return this;
}

CreateDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

CreateDatabaseContext.prototype.DATABASE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
};

CreateDatabaseContext.prototype.schemaName = function() {
    return this.getTypedRuleContext(SchemaNameContext,0);
};

CreateDatabaseContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateDatabaseContext.prototype.createDatabaseOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
    } else {
        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
    }
};

CreateDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateDatabaseContext = CreateDatabaseContext;

MySQLParser.prototype.createDatabase = function() {

    var localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, MySQLParser.RULE_createDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1885;
        this.match(MySQLParser.DATABASE_SYMBOL);
        this.state = 1887;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        if(la_===1) {
            this.state = 1886;
            this.ifNotExists();

        }
        this.state = 1889;
        this.schemaName();
        this.state = 1893;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1890;
                this.createDatabaseOption(); 
            }
            this.state = 1895;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createDatabaseOption;
    return this;
}

CreateDatabaseOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseOptionContext.prototype.constructor = CreateDatabaseOptionContext;

CreateDatabaseOptionContext.prototype.defaultCharset = function() {
    return this.getTypedRuleContext(DefaultCharsetContext,0);
};

CreateDatabaseOptionContext.prototype.defaultCollation = function() {
    return this.getTypedRuleContext(DefaultCollationContext,0);
};

CreateDatabaseOptionContext.prototype.defaultEncryption = function() {
    return this.getTypedRuleContext(DefaultEncryptionContext,0);
};

CreateDatabaseOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateDatabaseOption(this);
	}
};

CreateDatabaseOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateDatabaseOption(this);
	}
};

CreateDatabaseOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateDatabaseOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateDatabaseOptionContext = CreateDatabaseOptionContext;

MySQLParser.prototype.createDatabaseOption = function() {

    var localctx = new CreateDatabaseOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, MySQLParser.RULE_createDatabaseOption);
    try {
        this.state = 1900;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1896;
            this.defaultCharset();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1897;
            this.defaultCollation();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1898;
            if (!( serverVersion >= 80016)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80016");
            }
            this.state = 1899;
            this.defaultEncryption();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

CreateTableContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

CreateTableContext.prototype.LIKE_SYMBOL = function() {
    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
};

CreateTableContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

CreateTableContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

CreateTableContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

CreateTableContext.prototype.TEMPORARY_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
};

CreateTableContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateTableContext.prototype.tableElementList = function() {
    return this.getTypedRuleContext(TableElementListContext,0);
};

CreateTableContext.prototype.createTableOptions = function() {
    return this.getTypedRuleContext(CreateTableOptionsContext,0);
};

CreateTableContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

CreateTableContext.prototype.duplicateAsQueryExpression = function() {
    return this.getTypedRuleContext(DuplicateAsQueryExpressionContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTableContext = CreateTableContext;

MySQLParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, MySQLParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.TEMPORARY_SYMBOL) {
            this.state = 1902;
            this.match(MySQLParser.TEMPORARY_SYMBOL);
        }

        this.state = 1905;
        this.match(MySQLParser.TABLE_SYMBOL);
        this.state = 1907;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        if(la_===1) {
            this.state = 1906;
            this.ifNotExists();

        }
        this.state = 1909;
        this.tableName();
        this.state = 1932;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1914;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
            if(la_===1) {
                this.state = 1910;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 1911;
                this.tableElementList();
                this.state = 1912;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);

            }
            this.state = 1917;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
            if(la_===1) {
                this.state = 1916;
                this.createTableOptions();

            }
            this.state = 1920;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
            if(la_===1) {
                this.state = 1919;
                this.partitionClause();

            }
            this.state = 1923;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
            if(la_===1) {
                this.state = 1922;
                this.duplicateAsQueryExpression();

            }
            break;

        case 2:
            this.state = 1925;
            this.match(MySQLParser.LIKE_SYMBOL);
            this.state = 1926;
            this.tableRef();
            break;

        case 3:
            this.state = 1927;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 1928;
            this.match(MySQLParser.LIKE_SYMBOL);
            this.state = 1929;
            this.tableRef();
            this.state = 1930;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableElementList;
    return this;
}

TableElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementListContext.prototype.constructor = TableElementListContext;

TableElementListContext.prototype.tableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementContext);
    } else {
        return this.getTypedRuleContext(TableElementContext,i);
    }
};

TableElementListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


TableElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableElementList(this);
	}
};

TableElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableElementList(this);
	}
};

TableElementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableElementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableElementListContext = TableElementListContext;

MySQLParser.prototype.tableElementList = function() {

    var localctx = new TableElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, MySQLParser.RULE_tableElementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1934;
        this.tableElement();
        this.state = 1939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 1935;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 1936;
            this.tableElement();
            this.state = 1941;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableElement;
    return this;
}

TableElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementContext.prototype.constructor = TableElementContext;

TableElementContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};

TableElementContext.prototype.tableConstraintDef = function() {
    return this.getTypedRuleContext(TableConstraintDefContext,0);
};

TableElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableElement(this);
	}
};

TableElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableElement(this);
	}
};

TableElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableElementContext = TableElementContext;

MySQLParser.prototype.tableElement = function() {

    var localctx = new TableElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, MySQLParser.RULE_tableElement);
    try {
        this.state = 1944;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1942;
            this.columnDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1943;
            this.tableConstraintDef();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DuplicateAsQueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_duplicateAsQueryExpression;
    return this;
}

DuplicateAsQueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DuplicateAsQueryExpressionContext.prototype.constructor = DuplicateAsQueryExpressionContext;

DuplicateAsQueryExpressionContext.prototype.queryExpressionOrParens = function() {
    return this.getTypedRuleContext(QueryExpressionOrParensContext,0);
};

DuplicateAsQueryExpressionContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

DuplicateAsQueryExpressionContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

DuplicateAsQueryExpressionContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

DuplicateAsQueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDuplicateAsQueryExpression(this);
	}
};

DuplicateAsQueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDuplicateAsQueryExpression(this);
	}
};

DuplicateAsQueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDuplicateAsQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DuplicateAsQueryExpressionContext = DuplicateAsQueryExpressionContext;

MySQLParser.prototype.duplicateAsQueryExpression = function() {

    var localctx = new DuplicateAsQueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, MySQLParser.RULE_duplicateAsQueryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1947;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        if(la_===1) {
            this.state = 1946;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.REPLACE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1950;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 1949;
            this.match(MySQLParser.AS_SYMBOL);

        }
        this.state = 1952;
        this.queryExpressionOrParens();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionOrParensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_queryExpressionOrParens;
    return this;
}

QueryExpressionOrParensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionOrParensContext.prototype.constructor = QueryExpressionOrParensContext;

QueryExpressionOrParensContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryExpressionOrParensContext.prototype.queryExpressionParens = function() {
    return this.getTypedRuleContext(QueryExpressionParensContext,0);
};

QueryExpressionOrParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryExpressionOrParens(this);
	}
};

QueryExpressionOrParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryExpressionOrParens(this);
	}
};

QueryExpressionOrParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryExpressionOrParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QueryExpressionOrParensContext = QueryExpressionOrParensContext;

MySQLParser.prototype.queryExpressionOrParens = function() {

    var localctx = new QueryExpressionOrParensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, MySQLParser.RULE_queryExpressionOrParens);
    try {
        this.state = 1956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1954;
            this.queryExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1955;
            this.queryExpressionParens();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateRoutineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createRoutine;
    return this;
}

CreateRoutineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRoutineContext.prototype.constructor = CreateRoutineContext;

CreateRoutineContext.prototype.CREATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
};

CreateRoutineContext.prototype.EOF = function() {
    return this.getToken(MySQLParser.EOF, 0);
};

CreateRoutineContext.prototype.createProcedure = function() {
    return this.getTypedRuleContext(CreateProcedureContext,0);
};

CreateRoutineContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

CreateRoutineContext.prototype.createUdf = function() {
    return this.getTypedRuleContext(CreateUdfContext,0);
};

CreateRoutineContext.prototype.SEMICOLON_SYMBOL = function() {
    return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
};

CreateRoutineContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateRoutine(this);
	}
};

CreateRoutineContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateRoutine(this);
	}
};

CreateRoutineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateRoutine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateRoutineContext = CreateRoutineContext;

MySQLParser.prototype.createRoutine = function() {

    var localctx = new CreateRoutineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, MySQLParser.RULE_createRoutine);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1958;
        this.match(MySQLParser.CREATE_SYMBOL);
        this.state = 1962;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1959;
            this.createProcedure();
            break;

        case 2:
            this.state = 1960;
            this.createFunction();
            break;

        case 3:
            this.state = 1961;
            this.createUdf();
            break;

        }
        this.state = 1965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SEMICOLON_SYMBOL) {
            this.state = 1964;
            this.match(MySQLParser.SEMICOLON_SYMBOL);
        }

        this.state = 1967;
        this.match(MySQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateProcedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createProcedure;
    return this;
}

CreateProcedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateProcedureContext.prototype.constructor = CreateProcedureContext;

CreateProcedureContext.prototype.PROCEDURE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
};

CreateProcedureContext.prototype.procedureName = function() {
    return this.getTypedRuleContext(ProcedureNameContext,0);
};

CreateProcedureContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

CreateProcedureContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

CreateProcedureContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

CreateProcedureContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

CreateProcedureContext.prototype.procedureParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureParameterContext);
    } else {
        return this.getTypedRuleContext(ProcedureParameterContext,i);
    }
};

CreateProcedureContext.prototype.routineCreateOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineCreateOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineCreateOptionContext,i);
    }
};

CreateProcedureContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


CreateProcedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateProcedure(this);
	}
};

CreateProcedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateProcedure(this);
	}
};

CreateProcedureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateProcedure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateProcedureContext = CreateProcedureContext;

MySQLParser.prototype.createProcedure = function() {

    var localctx = new CreateProcedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, MySQLParser.RULE_createProcedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 1969;
            this.definerClause();
        }

        this.state = 1972;
        this.match(MySQLParser.PROCEDURE_SYMBOL);
        this.state = 1973;
        this.procedureName();
        this.state = 1974;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 1983;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 1975;
            this.procedureParameter();
            this.state = 1980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 1976;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 1977;
                this.procedureParameter();
                this.state = 1982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 1985;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        this.state = 1989;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1986;
                this.routineCreateOption(); 
            }
            this.state = 1991;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
        }

        this.state = 1992;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

CreateFunctionContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

CreateFunctionContext.prototype.functionName = function() {
    return this.getTypedRuleContext(FunctionNameContext,0);
};

CreateFunctionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

CreateFunctionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

CreateFunctionContext.prototype.RETURNS_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
};

CreateFunctionContext.prototype.typeWithOptCollate = function() {
    return this.getTypedRuleContext(TypeWithOptCollateContext,0);
};

CreateFunctionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

CreateFunctionContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

CreateFunctionContext.prototype.functionParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionParameterContext);
    } else {
        return this.getTypedRuleContext(FunctionParameterContext,i);
    }
};

CreateFunctionContext.prototype.routineCreateOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineCreateOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineCreateOptionContext,i);
    }
};

CreateFunctionContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateFunctionContext = CreateFunctionContext;

MySQLParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, MySQLParser.RULE_createFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1995;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 1994;
            this.definerClause();
        }

        this.state = 1997;
        this.match(MySQLParser.FUNCTION_SYMBOL);
        this.state = 1998;
        this.functionName();
        this.state = 1999;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 2008;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        if(la_===1) {
            this.state = 2000;
            this.functionParameter();
            this.state = 2005;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 2001;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 2002;
                this.functionParameter();
                this.state = 2007;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 2010;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        this.state = 2011;
        this.match(MySQLParser.RETURNS_SYMBOL);
        this.state = 2012;
        this.typeWithOptCollate();
        this.state = 2016;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2013;
                this.routineCreateOption(); 
            }
            this.state = 2018;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
        }

        this.state = 2019;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUdfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUdf;
    this.type = null; // Token
    return this;
}

CreateUdfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUdfContext.prototype.constructor = CreateUdfContext;

CreateUdfContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

CreateUdfContext.prototype.udfName = function() {
    return this.getTypedRuleContext(UdfNameContext,0);
};

CreateUdfContext.prototype.RETURNS_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
};

CreateUdfContext.prototype.SONAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
};

CreateUdfContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

CreateUdfContext.prototype.STRING_SYMBOL = function() {
    return this.getToken(MySQLParser.STRING_SYMBOL, 0);
};

CreateUdfContext.prototype.INT_SYMBOL = function() {
    return this.getToken(MySQLParser.INT_SYMBOL, 0);
};

CreateUdfContext.prototype.REAL_SYMBOL = function() {
    return this.getToken(MySQLParser.REAL_SYMBOL, 0);
};

CreateUdfContext.prototype.DECIMAL_SYMBOL = function() {
    return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
};

CreateUdfContext.prototype.AGGREGATE_SYMBOL = function() {
    return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
};

CreateUdfContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUdf(this);
	}
};

CreateUdfContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUdf(this);
	}
};

CreateUdfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUdf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUdfContext = CreateUdfContext;

MySQLParser.prototype.createUdf = function() {

    var localctx = new CreateUdfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, MySQLParser.RULE_createUdf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2022;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AGGREGATE_SYMBOL) {
            this.state = 2021;
            this.match(MySQLParser.AGGREGATE_SYMBOL);
        }

        this.state = 2024;
        this.match(MySQLParser.FUNCTION_SYMBOL);
        this.state = 2025;
        this.udfName();
        this.state = 2026;
        this.match(MySQLParser.RETURNS_SYMBOL);
        this.state = 2027;
        localctx.type = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.STRING_SYMBOL || _la===MySQLParser.DECIMAL_SYMBOL || _la===MySQLParser.INT_SYMBOL || _la===MySQLParser.REAL_SYMBOL)) {
            localctx.type = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2028;
        this.match(MySQLParser.SONAME_SYMBOL);
        this.state = 2029;
        this.textLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineCreateOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_routineCreateOption;
    return this;
}

RoutineCreateOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineCreateOptionContext.prototype.constructor = RoutineCreateOptionContext;

RoutineCreateOptionContext.prototype.routineOption = function() {
    return this.getTypedRuleContext(RoutineOptionContext,0);
};

RoutineCreateOptionContext.prototype.DETERMINISTIC_SYMBOL = function() {
    return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
};

RoutineCreateOptionContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

RoutineCreateOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineCreateOption(this);
	}
};

RoutineCreateOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineCreateOption(this);
	}
};

RoutineCreateOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineCreateOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoutineCreateOptionContext = RoutineCreateOptionContext;

MySQLParser.prototype.routineCreateOption = function() {

    var localctx = new RoutineCreateOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, MySQLParser.RULE_routineCreateOption);
    var _la = 0; // Token type
    try {
        this.state = 2036;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.COMMENT_SYMBOL:
        case MySQLParser.CONTAINS_SYMBOL:
        case MySQLParser.LANGUAGE_SYMBOL:
        case MySQLParser.NO_SYMBOL:
        case MySQLParser.MODIFIES_SYMBOL:
        case MySQLParser.READS_SYMBOL:
        case MySQLParser.SQL_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2031;
            this.routineOption();
            break;
        case MySQLParser.DETERMINISTIC_SYMBOL:
        case MySQLParser.NOT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT_SYMBOL) {
                this.state = 2032;
                this.match(MySQLParser.NOT_SYMBOL);
            }

            this.state = 2035;
            this.match(MySQLParser.DETERMINISTIC_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineAlterOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_routineAlterOptions;
    return this;
}

RoutineAlterOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineAlterOptionsContext.prototype.constructor = RoutineAlterOptionsContext;

RoutineAlterOptionsContext.prototype.routineCreateOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineCreateOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineCreateOptionContext,i);
    }
};

RoutineAlterOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineAlterOptions(this);
	}
};

RoutineAlterOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineAlterOptions(this);
	}
};

RoutineAlterOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineAlterOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoutineAlterOptionsContext = RoutineAlterOptionsContext;

MySQLParser.prototype.routineAlterOptions = function() {

    var localctx = new RoutineAlterOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, MySQLParser.RULE_routineAlterOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2039; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2038;
            this.routineCreateOption();
            this.state = 2041; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || _la===MySQLParser.DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x1f) == 0 && ((1 << (_la - 567)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 567)) | (1 << (MySQLParser.NOT_SYMBOL - 567)) | (1 << (MySQLParser.READS_SYMBOL - 567)))) !== 0) || _la===MySQLParser.SQL_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_routineOption;
    this.option = null; // Token
    this.security = null; // Token
    return this;
}

RoutineOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineOptionContext.prototype.constructor = RoutineOptionContext;

RoutineOptionContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

RoutineOptionContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

RoutineOptionContext.prototype.SQL_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_SYMBOL, 0);
};

RoutineOptionContext.prototype.LANGUAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
};

RoutineOptionContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

RoutineOptionContext.prototype.CONTAINS_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
};

RoutineOptionContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

RoutineOptionContext.prototype.READS_SYMBOL = function() {
    return this.getToken(MySQLParser.READS_SYMBOL, 0);
};

RoutineOptionContext.prototype.MODIFIES_SYMBOL = function() {
    return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
};

RoutineOptionContext.prototype.SECURITY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
};

RoutineOptionContext.prototype.DEFINER_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
};

RoutineOptionContext.prototype.INVOKER_SYMBOL = function() {
    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
};

RoutineOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineOption(this);
	}
};

RoutineOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineOption(this);
	}
};

RoutineOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoutineOptionContext = RoutineOptionContext;

MySQLParser.prototype.routineOption = function() {

    var localctx = new RoutineOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, MySQLParser.RULE_routineOption);
    var _la = 0; // Token type
    try {
        this.state = 2060;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.COMMENT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2043;
            localctx.option = this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 2044;
            this.textLiteral();
            break;
        case MySQLParser.LANGUAGE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2045;
            localctx.option = this.match(MySQLParser.LANGUAGE_SYMBOL);
            this.state = 2046;
            this.match(MySQLParser.SQL_SYMBOL);
            break;
        case MySQLParser.NO_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2047;
            localctx.option = this.match(MySQLParser.NO_SYMBOL);
            this.state = 2048;
            this.match(MySQLParser.SQL_SYMBOL);
            break;
        case MySQLParser.CONTAINS_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2049;
            localctx.option = this.match(MySQLParser.CONTAINS_SYMBOL);
            this.state = 2050;
            this.match(MySQLParser.SQL_SYMBOL);
            break;
        case MySQLParser.READS_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 2051;
            localctx.option = this.match(MySQLParser.READS_SYMBOL);
            this.state = 2052;
            this.match(MySQLParser.SQL_SYMBOL);
            this.state = 2053;
            this.match(MySQLParser.DATA_SYMBOL);
            break;
        case MySQLParser.MODIFIES_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 2054;
            localctx.option = this.match(MySQLParser.MODIFIES_SYMBOL);
            this.state = 2055;
            this.match(MySQLParser.SQL_SYMBOL);
            this.state = 2056;
            this.match(MySQLParser.DATA_SYMBOL);
            break;
        case MySQLParser.SQL_SYMBOL:
            this.enterOuterAlt(localctx, 7);
            this.state = 2057;
            localctx.option = this.match(MySQLParser.SQL_SYMBOL);
            this.state = 2058;
            this.match(MySQLParser.SECURITY_SYMBOL);
            this.state = 2059;
            localctx.security = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFINER_SYMBOL || _la===MySQLParser.INVOKER_SYMBOL)) {
                localctx.security = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createIndex;
    this.type = null; // Token
    return this;
}

CreateIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexContext.prototype.constructor = CreateIndexContext;

CreateIndexContext.prototype.createIndexTarget = function() {
    return this.getTypedRuleContext(CreateIndexTargetContext,0);
};

CreateIndexContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

CreateIndexContext.prototype.indexName = function() {
    return this.getTypedRuleContext(IndexNameContext,0);
};

CreateIndexContext.prototype.onlineOption = function() {
    return this.getTypedRuleContext(OnlineOptionContext,0);
};

CreateIndexContext.prototype.FULLTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
};

CreateIndexContext.prototype.SPATIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
};

CreateIndexContext.prototype.indexLockAndAlgorithm = function() {
    return this.getTypedRuleContext(IndexLockAndAlgorithmContext,0);
};

CreateIndexContext.prototype.UNIQUE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
};

CreateIndexContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

CreateIndexContext.prototype.fulltextIndexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltextIndexOptionContext);
    } else {
        return this.getTypedRuleContext(FulltextIndexOptionContext,i);
    }
};

CreateIndexContext.prototype.spatialIndexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpatialIndexOptionContext);
    } else {
        return this.getTypedRuleContext(SpatialIndexOptionContext,i);
    }
};

CreateIndexContext.prototype.indexTypeClause = function() {
    return this.getTypedRuleContext(IndexTypeClauseContext,0);
};

CreateIndexContext.prototype.indexNameAndType = function() {
    return this.getTypedRuleContext(IndexNameAndTypeContext,0);
};

CreateIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateIndex(this);
	}
};

CreateIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateIndex(this);
	}
};

CreateIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateIndexContext = CreateIndexContext;

MySQLParser.prototype.createIndex = function() {

    var localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, MySQLParser.RULE_createIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OFFLINE_SYMBOL || _la===MySQLParser.ONLINE_SYMBOL) {
            this.state = 2062;
            this.onlineOption();
        }

        this.state = 2106;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INDEX_SYMBOL:
        case MySQLParser.UNIQUE_SYMBOL:
            this.state = 2066;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.UNIQUE_SYMBOL) {
                this.state = 2065;
                this.match(MySQLParser.UNIQUE_SYMBOL);
            }

            this.state = 2068;
            localctx.type = this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 2077;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2069;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 2070;
                this.indexName();
                this.state = 2072;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.TYPE_SYMBOL || _la===MySQLParser.USING_SYMBOL) {
                    this.state = 2071;
                    this.indexTypeClause();
                }

                break;

            case 2:
                this.state = 2075;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
                if(la_===1) {
                    this.state = 2074;
                    this.indexNameAndType();

                }
                break;

            }
            this.state = 2079;
            this.createIndexTarget();
            this.state = 2083;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2080;
                    this.indexOption(); 
                }
                this.state = 2085;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
            }

            break;
        case MySQLParser.FULLTEXT_SYMBOL:
            this.state = 2086;
            localctx.type = this.match(MySQLParser.FULLTEXT_SYMBOL);
            this.state = 2087;
            this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 2088;
            this.indexName();
            this.state = 2089;
            this.createIndexTarget();
            this.state = 2093;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2090;
                    this.fulltextIndexOption(); 
                }
                this.state = 2095;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
            }

            break;
        case MySQLParser.SPATIAL_SYMBOL:
            this.state = 2096;
            localctx.type = this.match(MySQLParser.SPATIAL_SYMBOL);
            this.state = 2097;
            this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 2098;
            this.indexName();
            this.state = 2099;
            this.createIndexTarget();
            this.state = 2103;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2100;
                    this.spatialIndexOption(); 
                }
                this.state = 2105;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALGORITHM_SYMBOL || _la===MySQLParser.LOCK_SYMBOL) {
            this.state = 2108;
            this.indexLockAndAlgorithm();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexNameAndTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexNameAndType;
    return this;
}

IndexNameAndTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexNameAndTypeContext.prototype.constructor = IndexNameAndTypeContext;

IndexNameAndTypeContext.prototype.indexName = function() {
    return this.getTypedRuleContext(IndexNameContext,0);
};

IndexNameAndTypeContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

IndexNameAndTypeContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

IndexNameAndTypeContext.prototype.TYPE_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
};

IndexNameAndTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexNameAndType(this);
	}
};

IndexNameAndTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexNameAndType(this);
	}
};

IndexNameAndTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexNameAndType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexNameAndTypeContext = IndexNameAndTypeContext;

MySQLParser.prototype.indexNameAndType = function() {

    var localctx = new IndexNameAndTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, MySQLParser.RULE_indexNameAndType);
    try {
        this.state = 2120;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2111;
            this.indexName();
            this.state = 2114;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            if(la_===1) {
                this.state = 2112;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 2113;
                this.indexType();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2116;
            this.indexName();
            this.state = 2117;
            this.match(MySQLParser.TYPE_SYMBOL);
            this.state = 2118;
            this.indexType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateIndexTargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createIndexTarget;
    return this;
}

CreateIndexTargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexTargetContext.prototype.constructor = CreateIndexTargetContext;

CreateIndexTargetContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

CreateIndexTargetContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

CreateIndexTargetContext.prototype.keyListVariants = function() {
    return this.getTypedRuleContext(KeyListVariantsContext,0);
};

CreateIndexTargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateIndexTarget(this);
	}
};

CreateIndexTargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateIndexTarget(this);
	}
};

CreateIndexTargetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateIndexTarget(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateIndexTargetContext = CreateIndexTargetContext;

MySQLParser.prototype.createIndexTarget = function() {

    var localctx = new CreateIndexTargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, MySQLParser.RULE_createIndexTarget);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2122;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 2123;
        this.tableRef();
        this.state = 2124;
        this.keyListVariants();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateLogfileGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createLogfileGroup;
    return this;
}

CreateLogfileGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateLogfileGroupContext.prototype.constructor = CreateLogfileGroupContext;

CreateLogfileGroupContext.prototype.LOGFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
};

CreateLogfileGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

CreateLogfileGroupContext.prototype.logfileGroupName = function() {
    return this.getTypedRuleContext(LogfileGroupNameContext,0);
};

CreateLogfileGroupContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

CreateLogfileGroupContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

CreateLogfileGroupContext.prototype.UNDOFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
};

CreateLogfileGroupContext.prototype.REDOFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.REDOFILE_SYMBOL, 0);
};

CreateLogfileGroupContext.prototype.logfileGroupOptions = function() {
    return this.getTypedRuleContext(LogfileGroupOptionsContext,0);
};

CreateLogfileGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateLogfileGroup(this);
	}
};

CreateLogfileGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateLogfileGroup(this);
	}
};

CreateLogfileGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateLogfileGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateLogfileGroupContext = CreateLogfileGroupContext;

MySQLParser.prototype.createLogfileGroup = function() {

    var localctx = new CreateLogfileGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, MySQLParser.RULE_createLogfileGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2126;
        this.match(MySQLParser.LOGFILE_SYMBOL);
        this.state = 2127;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 2128;
        this.logfileGroupName();
        this.state = 2129;
        this.match(MySQLParser.ADD_SYMBOL);
        this.state = 2130;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.REDOFILE_SYMBOL || _la===MySQLParser.UNDOFILE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2131;
        this.textLiteral();
        this.state = 2133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT_SYMBOL || _la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.NODEGROUP_SYMBOL || _la===MySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.UNDO_BUFFER_SIZE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL) {
            this.state = 2132;
            this.logfileGroupOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogfileGroupOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_logfileGroupOptions;
    return this;
}

LogfileGroupOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogfileGroupOptionsContext.prototype.constructor = LogfileGroupOptionsContext;

LogfileGroupOptionsContext.prototype.logfileGroupOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogfileGroupOptionContext);
    } else {
        return this.getTypedRuleContext(LogfileGroupOptionContext,i);
    }
};

LogfileGroupOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


LogfileGroupOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogfileGroupOptions(this);
	}
};

LogfileGroupOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogfileGroupOptions(this);
	}
};

LogfileGroupOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogfileGroupOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LogfileGroupOptionsContext = LogfileGroupOptionsContext;

MySQLParser.prototype.logfileGroupOptions = function() {

    var localctx = new LogfileGroupOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, MySQLParser.RULE_logfileGroupOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2135;
        this.logfileGroupOption();
        this.state = 2142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMENT_SYMBOL || _la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.INITIAL_SIZE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.NODEGROUP_SYMBOL || _la===MySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.UNDO_BUFFER_SIZE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
            this.state = 2137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 2136;
                this.match(MySQLParser.COMMA_SYMBOL);
            }

            this.state = 2139;
            this.logfileGroupOption();
            this.state = 2144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogfileGroupOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_logfileGroupOption;
    return this;
}

LogfileGroupOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogfileGroupOptionContext.prototype.constructor = LogfileGroupOptionContext;

LogfileGroupOptionContext.prototype.tsOptionInitialSize = function() {
    return this.getTypedRuleContext(TsOptionInitialSizeContext,0);
};

LogfileGroupOptionContext.prototype.tsOptionUndoRedoBufferSize = function() {
    return this.getTypedRuleContext(TsOptionUndoRedoBufferSizeContext,0);
};

LogfileGroupOptionContext.prototype.tsOptionNodegroup = function() {
    return this.getTypedRuleContext(TsOptionNodegroupContext,0);
};

LogfileGroupOptionContext.prototype.tsOptionEngine = function() {
    return this.getTypedRuleContext(TsOptionEngineContext,0);
};

LogfileGroupOptionContext.prototype.tsOptionWait = function() {
    return this.getTypedRuleContext(TsOptionWaitContext,0);
};

LogfileGroupOptionContext.prototype.tsOptionComment = function() {
    return this.getTypedRuleContext(TsOptionCommentContext,0);
};

LogfileGroupOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogfileGroupOption(this);
	}
};

LogfileGroupOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogfileGroupOption(this);
	}
};

LogfileGroupOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogfileGroupOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LogfileGroupOptionContext = LogfileGroupOptionContext;

MySQLParser.prototype.logfileGroupOption = function() {

    var localctx = new LogfileGroupOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, MySQLParser.RULE_logfileGroupOption);
    try {
        this.state = 2151;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INITIAL_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2145;
            this.tsOptionInitialSize();
            break;
        case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
        case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2146;
            this.tsOptionUndoRedoBufferSize();
            break;
        case MySQLParser.NODEGROUP_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2147;
            this.tsOptionNodegroup();
            break;
        case MySQLParser.ENGINE_SYMBOL:
        case MySQLParser.STORAGE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2148;
            this.tsOptionEngine();
            break;
        case MySQLParser.NO_WAIT_SYMBOL:
        case MySQLParser.WAIT_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 2149;
            this.tsOptionWait();
            break;
        case MySQLParser.COMMENT_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 2150;
            this.tsOptionComment();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createServer;
    return this;
}

CreateServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateServerContext.prototype.constructor = CreateServerContext;

CreateServerContext.prototype.SERVER_SYMBOL = function() {
    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
};

CreateServerContext.prototype.serverName = function() {
    return this.getTypedRuleContext(ServerNameContext,0);
};

CreateServerContext.prototype.FOREIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
};

CreateServerContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

CreateServerContext.prototype.WRAPPER_SYMBOL = function() {
    return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
};

CreateServerContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

CreateServerContext.prototype.serverOptions = function() {
    return this.getTypedRuleContext(ServerOptionsContext,0);
};

CreateServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateServer(this);
	}
};

CreateServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateServer(this);
	}
};

CreateServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateServerContext = CreateServerContext;

MySQLParser.prototype.createServer = function() {

    var localctx = new CreateServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, MySQLParser.RULE_createServer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2153;
        this.match(MySQLParser.SERVER_SYMBOL);
        this.state = 2154;
        this.serverName();
        this.state = 2155;
        this.match(MySQLParser.FOREIGN_SYMBOL);
        this.state = 2156;
        this.match(MySQLParser.DATA_SYMBOL);
        this.state = 2157;
        this.match(MySQLParser.WRAPPER_SYMBOL);
        this.state = 2158;
        this.textOrIdentifier();
        this.state = 2159;
        this.serverOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ServerOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_serverOptions;
    return this;
}

ServerOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerOptionsContext.prototype.constructor = ServerOptionsContext;

ServerOptionsContext.prototype.OPTIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
};

ServerOptionsContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ServerOptionsContext.prototype.serverOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ServerOptionContext);
    } else {
        return this.getTypedRuleContext(ServerOptionContext,i);
    }
};

ServerOptionsContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ServerOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ServerOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterServerOptions(this);
	}
};

ServerOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitServerOptions(this);
	}
};

ServerOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitServerOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ServerOptionsContext = ServerOptionsContext;

MySQLParser.prototype.serverOptions = function() {

    var localctx = new ServerOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, MySQLParser.RULE_serverOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2161;
        this.match(MySQLParser.OPTIONS_SYMBOL);
        this.state = 2162;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 2163;
        this.serverOption();
        this.state = 2168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 2164;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 2165;
            this.serverOption();
            this.state = 2170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2171;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ServerOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_serverOption;
    this.option = null; // Token
    return this;
}

ServerOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerOptionContext.prototype.constructor = ServerOptionContext;

ServerOptionContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

ServerOptionContext.prototype.HOST_SYMBOL = function() {
    return this.getToken(MySQLParser.HOST_SYMBOL, 0);
};

ServerOptionContext.prototype.DATABASE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
};

ServerOptionContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

ServerOptionContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

ServerOptionContext.prototype.SOCKET_SYMBOL = function() {
    return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
};

ServerOptionContext.prototype.OWNER_SYMBOL = function() {
    return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
};

ServerOptionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

ServerOptionContext.prototype.PORT_SYMBOL = function() {
    return this.getToken(MySQLParser.PORT_SYMBOL, 0);
};

ServerOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterServerOption(this);
	}
};

ServerOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitServerOption(this);
	}
};

ServerOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitServerOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ServerOptionContext = ServerOptionContext;

MySQLParser.prototype.serverOption = function() {

    var localctx = new ServerOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, MySQLParser.RULE_serverOption);
    try {
        this.state = 2187;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.HOST_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2173;
            localctx.option = this.match(MySQLParser.HOST_SYMBOL);
            this.state = 2174;
            this.textLiteral();
            break;
        case MySQLParser.DATABASE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2175;
            localctx.option = this.match(MySQLParser.DATABASE_SYMBOL);
            this.state = 2176;
            this.textLiteral();
            break;
        case MySQLParser.USER_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2177;
            localctx.option = this.match(MySQLParser.USER_SYMBOL);
            this.state = 2178;
            this.textLiteral();
            break;
        case MySQLParser.PASSWORD_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2179;
            localctx.option = this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 2180;
            this.textLiteral();
            break;
        case MySQLParser.SOCKET_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 2181;
            localctx.option = this.match(MySQLParser.SOCKET_SYMBOL);
            this.state = 2182;
            this.textLiteral();
            break;
        case MySQLParser.OWNER_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 2183;
            localctx.option = this.match(MySQLParser.OWNER_SYMBOL);
            this.state = 2184;
            this.textLiteral();
            break;
        case MySQLParser.PORT_SYMBOL:
            this.enterOuterAlt(localctx, 7);
            this.state = 2185;
            localctx.option = this.match(MySQLParser.PORT_SYMBOL);
            this.state = 2186;
            this.ulong_number();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTablespace;
    return this;
}

CreateTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTablespaceContext.prototype.constructor = CreateTablespaceContext;

CreateTablespaceContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

CreateTablespaceContext.prototype.tablespaceName = function() {
    return this.getTypedRuleContext(TablespaceNameContext,0);
};

CreateTablespaceContext.prototype.tsDataFileName = function() {
    return this.getTypedRuleContext(TsDataFileNameContext,0);
};

CreateTablespaceContext.prototype.USE_SYMBOL = function() {
    return this.getToken(MySQLParser.USE_SYMBOL, 0);
};

CreateTablespaceContext.prototype.LOGFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
};

CreateTablespaceContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

CreateTablespaceContext.prototype.logfileGroupRef = function() {
    return this.getTypedRuleContext(LogfileGroupRefContext,0);
};

CreateTablespaceContext.prototype.tablespaceOptions = function() {
    return this.getTypedRuleContext(TablespaceOptionsContext,0);
};

CreateTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTablespace(this);
	}
};

CreateTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTablespace(this);
	}
};

CreateTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTablespaceContext = CreateTablespaceContext;

MySQLParser.prototype.createTablespace = function() {

    var localctx = new CreateTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, MySQLParser.RULE_createTablespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2189;
        this.match(MySQLParser.TABLESPACE_SYMBOL);
        this.state = 2190;
        this.tablespaceName();
        this.state = 2191;
        this.tsDataFileName();
        this.state = 2196;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        if(la_===1) {
            this.state = 2192;
            this.match(MySQLParser.USE_SYMBOL);
            this.state = 2193;
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.state = 2194;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 2195;
            this.logfileGroupRef();

        }
        this.state = 2199;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        if(la_===1) {
            this.state = 2198;
            this.tablespaceOptions();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUndoTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUndoTablespace;
    return this;
}

CreateUndoTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUndoTablespaceContext.prototype.constructor = CreateUndoTablespaceContext;

CreateUndoTablespaceContext.prototype.UNDO_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
};

CreateUndoTablespaceContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

CreateUndoTablespaceContext.prototype.tablespaceName = function() {
    return this.getTypedRuleContext(TablespaceNameContext,0);
};

CreateUndoTablespaceContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

CreateUndoTablespaceContext.prototype.tsDataFile = function() {
    return this.getTypedRuleContext(TsDataFileContext,0);
};

CreateUndoTablespaceContext.prototype.undoTableSpaceOptions = function() {
    return this.getTypedRuleContext(UndoTableSpaceOptionsContext,0);
};

CreateUndoTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUndoTablespace(this);
	}
};

CreateUndoTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUndoTablespace(this);
	}
};

CreateUndoTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUndoTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUndoTablespaceContext = CreateUndoTablespaceContext;

MySQLParser.prototype.createUndoTablespace = function() {

    var localctx = new CreateUndoTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, MySQLParser.RULE_createUndoTablespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        this.match(MySQLParser.UNDO_SYMBOL);
        this.state = 2202;
        this.match(MySQLParser.TABLESPACE_SYMBOL);
        this.state = 2203;
        this.tablespaceName();
        this.state = 2204;
        this.match(MySQLParser.ADD_SYMBOL);
        this.state = 2205;
        this.tsDataFile();
        this.state = 2207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL) {
            this.state = 2206;
            this.undoTableSpaceOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsDataFileNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsDataFileName;
    return this;
}

TsDataFileNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsDataFileNameContext.prototype.constructor = TsDataFileNameContext;

TsDataFileNameContext.prototype.ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
};

TsDataFileNameContext.prototype.tsDataFile = function() {
    return this.getTypedRuleContext(TsDataFileContext,0);
};

TsDataFileNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsDataFileName(this);
	}
};

TsDataFileNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsDataFileName(this);
	}
};

TsDataFileNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsDataFileName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsDataFileNameContext = TsDataFileNameContext;

MySQLParser.prototype.tsDataFileName = function() {

    var localctx = new TsDataFileNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, MySQLParser.RULE_tsDataFileName);
    try {
        this.state = 2216;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2209;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 2212;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 2210;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 2211;
                this.tsDataFile();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2214;
            this.match(MySQLParser.ADD_SYMBOL);
            this.state = 2215;
            this.tsDataFile();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsDataFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsDataFile;
    return this;
}

TsDataFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsDataFileContext.prototype.constructor = TsDataFileContext;

TsDataFileContext.prototype.DATAFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
};

TsDataFileContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

TsDataFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsDataFile(this);
	}
};

TsDataFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsDataFile(this);
	}
};

TsDataFileContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsDataFile(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsDataFileContext = TsDataFileContext;

MySQLParser.prototype.tsDataFile = function() {

    var localctx = new TsDataFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, MySQLParser.RULE_tsDataFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2218;
        this.match(MySQLParser.DATAFILE_SYMBOL);
        this.state = 2219;
        this.textLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablespaceOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tablespaceOptions;
    return this;
}

TablespaceOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablespaceOptionsContext.prototype.constructor = TablespaceOptionsContext;

TablespaceOptionsContext.prototype.tablespaceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablespaceOptionContext);
    } else {
        return this.getTypedRuleContext(TablespaceOptionContext,i);
    }
};

TablespaceOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


TablespaceOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTablespaceOptions(this);
	}
};

TablespaceOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTablespaceOptions(this);
	}
};

TablespaceOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTablespaceOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablespaceOptionsContext = TablespaceOptionsContext;

MySQLParser.prototype.tablespaceOptions = function() {

    var localctx = new TablespaceOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, MySQLParser.RULE_tablespaceOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2221;
        this.tablespaceOption();
        this.state = 2228;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2223;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
                if(la_===1) {
                    this.state = 2222;
                    this.match(MySQLParser.COMMA_SYMBOL);

                }
                this.state = 2225;
                this.tablespaceOption(); 
            }
            this.state = 2230;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablespaceOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tablespaceOption;
    return this;
}

TablespaceOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablespaceOptionContext.prototype.constructor = TablespaceOptionContext;

TablespaceOptionContext.prototype.tsOptionInitialSize = function() {
    return this.getTypedRuleContext(TsOptionInitialSizeContext,0);
};

TablespaceOptionContext.prototype.tsOptionAutoextendSize = function() {
    return this.getTypedRuleContext(TsOptionAutoextendSizeContext,0);
};

TablespaceOptionContext.prototype.tsOptionMaxSize = function() {
    return this.getTypedRuleContext(TsOptionMaxSizeContext,0);
};

TablespaceOptionContext.prototype.tsOptionExtentSize = function() {
    return this.getTypedRuleContext(TsOptionExtentSizeContext,0);
};

TablespaceOptionContext.prototype.tsOptionNodegroup = function() {
    return this.getTypedRuleContext(TsOptionNodegroupContext,0);
};

TablespaceOptionContext.prototype.tsOptionEngine = function() {
    return this.getTypedRuleContext(TsOptionEngineContext,0);
};

TablespaceOptionContext.prototype.tsOptionWait = function() {
    return this.getTypedRuleContext(TsOptionWaitContext,0);
};

TablespaceOptionContext.prototype.tsOptionComment = function() {
    return this.getTypedRuleContext(TsOptionCommentContext,0);
};

TablespaceOptionContext.prototype.tsOptionFileblockSize = function() {
    return this.getTypedRuleContext(TsOptionFileblockSizeContext,0);
};

TablespaceOptionContext.prototype.tsOptionEncryption = function() {
    return this.getTypedRuleContext(TsOptionEncryptionContext,0);
};

TablespaceOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTablespaceOption(this);
	}
};

TablespaceOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTablespaceOption(this);
	}
};

TablespaceOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTablespaceOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablespaceOptionContext = TablespaceOptionContext;

MySQLParser.prototype.tablespaceOption = function() {

    var localctx = new TablespaceOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, MySQLParser.RULE_tablespaceOption);
    try {
        this.state = 2243;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2231;
            this.tsOptionInitialSize();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2232;
            this.tsOptionAutoextendSize();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2233;
            this.tsOptionMaxSize();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2234;
            this.tsOptionExtentSize();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2235;
            this.tsOptionNodegroup();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2236;
            this.tsOptionEngine();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2237;
            this.tsOptionWait();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2238;
            this.tsOptionComment();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2239;
            if (!( serverVersion >= 50707)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50707");
            }
            this.state = 2240;
            this.tsOptionFileblockSize();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2241;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 2242;
            this.tsOptionEncryption();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionInitialSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionInitialSize;
    return this;
}

TsOptionInitialSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionInitialSizeContext.prototype.constructor = TsOptionInitialSizeContext;

TsOptionInitialSizeContext.prototype.INITIAL_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
};

TsOptionInitialSizeContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

TsOptionInitialSizeContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionInitialSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionInitialSize(this);
	}
};

TsOptionInitialSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionInitialSize(this);
	}
};

TsOptionInitialSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionInitialSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionInitialSizeContext = TsOptionInitialSizeContext;

MySQLParser.prototype.tsOptionInitialSize = function() {

    var localctx = new TsOptionInitialSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, MySQLParser.RULE_tsOptionInitialSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2245;
        this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
        this.state = 2247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        if(la_===1) {
            this.state = 2246;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2249;
        this.sizeNumber();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionUndoRedoBufferSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionUndoRedoBufferSize;
    return this;
}

TsOptionUndoRedoBufferSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionUndoRedoBufferSizeContext.prototype.constructor = TsOptionUndoRedoBufferSizeContext;

TsOptionUndoRedoBufferSizeContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

TsOptionUndoRedoBufferSizeContext.prototype.UNDO_BUFFER_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
};

TsOptionUndoRedoBufferSizeContext.prototype.REDO_BUFFER_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
};

TsOptionUndoRedoBufferSizeContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionUndoRedoBufferSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionUndoRedoBufferSize(this);
	}
};

TsOptionUndoRedoBufferSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionUndoRedoBufferSize(this);
	}
};

TsOptionUndoRedoBufferSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionUndoRedoBufferSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionUndoRedoBufferSizeContext = TsOptionUndoRedoBufferSizeContext;

MySQLParser.prototype.tsOptionUndoRedoBufferSize = function() {

    var localctx = new TsOptionUndoRedoBufferSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2251;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la===MySQLParser.UNDO_BUFFER_SIZE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2253;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        if(la_===1) {
            this.state = 2252;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2255;
        this.sizeNumber();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionAutoextendSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionAutoextendSize;
    return this;
}

TsOptionAutoextendSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionAutoextendSizeContext.prototype.constructor = TsOptionAutoextendSizeContext;

TsOptionAutoextendSizeContext.prototype.AUTOEXTEND_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
};

TsOptionAutoextendSizeContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

TsOptionAutoextendSizeContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionAutoextendSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionAutoextendSize(this);
	}
};

TsOptionAutoextendSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionAutoextendSize(this);
	}
};

TsOptionAutoextendSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionAutoextendSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionAutoextendSizeContext = TsOptionAutoextendSizeContext;

MySQLParser.prototype.tsOptionAutoextendSize = function() {

    var localctx = new TsOptionAutoextendSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, MySQLParser.RULE_tsOptionAutoextendSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2257;
        this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
        this.state = 2259;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 2258;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2261;
        this.sizeNumber();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionMaxSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionMaxSize;
    return this;
}

TsOptionMaxSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionMaxSizeContext.prototype.constructor = TsOptionMaxSizeContext;

TsOptionMaxSizeContext.prototype.MAX_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
};

TsOptionMaxSizeContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

TsOptionMaxSizeContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionMaxSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionMaxSize(this);
	}
};

TsOptionMaxSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionMaxSize(this);
	}
};

TsOptionMaxSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionMaxSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionMaxSizeContext = TsOptionMaxSizeContext;

MySQLParser.prototype.tsOptionMaxSize = function() {

    var localctx = new TsOptionMaxSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, MySQLParser.RULE_tsOptionMaxSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2263;
        this.match(MySQLParser.MAX_SIZE_SYMBOL);
        this.state = 2265;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        if(la_===1) {
            this.state = 2264;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2267;
        this.sizeNumber();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionExtentSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionExtentSize;
    return this;
}

TsOptionExtentSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionExtentSizeContext.prototype.constructor = TsOptionExtentSizeContext;

TsOptionExtentSizeContext.prototype.EXTENT_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
};

TsOptionExtentSizeContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

TsOptionExtentSizeContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionExtentSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionExtentSize(this);
	}
};

TsOptionExtentSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionExtentSize(this);
	}
};

TsOptionExtentSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionExtentSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionExtentSizeContext = TsOptionExtentSizeContext;

MySQLParser.prototype.tsOptionExtentSize = function() {

    var localctx = new TsOptionExtentSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, MySQLParser.RULE_tsOptionExtentSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2269;
        this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
        this.state = 2271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        if(la_===1) {
            this.state = 2270;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2273;
        this.sizeNumber();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionNodegroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionNodegroup;
    return this;
}

TsOptionNodegroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionNodegroupContext.prototype.constructor = TsOptionNodegroupContext;

TsOptionNodegroupContext.prototype.NODEGROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
};

TsOptionNodegroupContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

TsOptionNodegroupContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionNodegroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionNodegroup(this);
	}
};

TsOptionNodegroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionNodegroup(this);
	}
};

TsOptionNodegroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionNodegroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionNodegroupContext = TsOptionNodegroupContext;

MySQLParser.prototype.tsOptionNodegroup = function() {

    var localctx = new TsOptionNodegroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, MySQLParser.RULE_tsOptionNodegroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2275;
        this.match(MySQLParser.NODEGROUP_SYMBOL);
        this.state = 2277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_OPERATOR) {
            this.state = 2276;
            this.match(MySQLParser.EQUAL_OPERATOR);
        }

        this.state = 2279;
        this.real_ulong_number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionEngineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionEngine;
    return this;
}

TsOptionEngineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionEngineContext.prototype.constructor = TsOptionEngineContext;

TsOptionEngineContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

TsOptionEngineContext.prototype.engineRef = function() {
    return this.getTypedRuleContext(EngineRefContext,0);
};

TsOptionEngineContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

TsOptionEngineContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionEngineContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionEngine(this);
	}
};

TsOptionEngineContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionEngine(this);
	}
};

TsOptionEngineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionEngine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionEngineContext = TsOptionEngineContext;

MySQLParser.prototype.tsOptionEngine = function() {

    var localctx = new TsOptionEngineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, MySQLParser.RULE_tsOptionEngine);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.STORAGE_SYMBOL) {
            this.state = 2281;
            this.match(MySQLParser.STORAGE_SYMBOL);
        }

        this.state = 2284;
        this.match(MySQLParser.ENGINE_SYMBOL);
        this.state = 2286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        if(la_===1) {
            this.state = 2285;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2288;
        this.engineRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionWaitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionWait;
    return this;
}

TsOptionWaitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionWaitContext.prototype.constructor = TsOptionWaitContext;

TsOptionWaitContext.prototype.WAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
};

TsOptionWaitContext.prototype.NO_WAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
};

TsOptionWaitContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionWait(this);
	}
};

TsOptionWaitContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionWait(this);
	}
};

TsOptionWaitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionWait(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionWaitContext = TsOptionWaitContext;

MySQLParser.prototype.tsOptionWait = function() {

    var localctx = new TsOptionWaitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, MySQLParser.RULE_tsOptionWait);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2290;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.WAIT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionCommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionComment;
    return this;
}

TsOptionCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionCommentContext.prototype.constructor = TsOptionCommentContext;

TsOptionCommentContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

TsOptionCommentContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

TsOptionCommentContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionComment(this);
	}
};

TsOptionCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionComment(this);
	}
};

TsOptionCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionCommentContext = TsOptionCommentContext;

MySQLParser.prototype.tsOptionComment = function() {

    var localctx = new TsOptionCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, MySQLParser.RULE_tsOptionComment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2292;
        this.match(MySQLParser.COMMENT_SYMBOL);
        this.state = 2294;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        if(la_===1) {
            this.state = 2293;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2296;
        this.textLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionFileblockSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionFileblockSize;
    return this;
}

TsOptionFileblockSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionFileblockSizeContext.prototype.constructor = TsOptionFileblockSizeContext;

TsOptionFileblockSizeContext.prototype.FILE_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
};

TsOptionFileblockSizeContext.prototype.sizeNumber = function() {
    return this.getTypedRuleContext(SizeNumberContext,0);
};

TsOptionFileblockSizeContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionFileblockSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionFileblockSize(this);
	}
};

TsOptionFileblockSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionFileblockSize(this);
	}
};

TsOptionFileblockSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionFileblockSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionFileblockSizeContext = TsOptionFileblockSizeContext;

MySQLParser.prototype.tsOptionFileblockSize = function() {

    var localctx = new TsOptionFileblockSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, MySQLParser.RULE_tsOptionFileblockSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2298;
        this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
        this.state = 2300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
        if(la_===1) {
            this.state = 2299;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2302;
        this.sizeNumber();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TsOptionEncryptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tsOptionEncryption;
    return this;
}

TsOptionEncryptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TsOptionEncryptionContext.prototype.constructor = TsOptionEncryptionContext;

TsOptionEncryptionContext.prototype.ENCRYPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
};

TsOptionEncryptionContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

TsOptionEncryptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TsOptionEncryptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTsOptionEncryption(this);
	}
};

TsOptionEncryptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTsOptionEncryption(this);
	}
};

TsOptionEncryptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTsOptionEncryption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TsOptionEncryptionContext = TsOptionEncryptionContext;

MySQLParser.prototype.tsOptionEncryption = function() {

    var localctx = new TsOptionEncryptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, MySQLParser.RULE_tsOptionEncryption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2304;
        this.match(MySQLParser.ENCRYPTION_SYMBOL);
        this.state = 2306;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        if(la_===1) {
            this.state = 2305;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 2308;
        this.textStringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createView;
    return this;
}

CreateViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

CreateViewContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

CreateViewContext.prototype.viewName = function() {
    return this.getTypedRuleContext(ViewNameContext,0);
};

CreateViewContext.prototype.viewTail = function() {
    return this.getTypedRuleContext(ViewTailContext,0);
};

CreateViewContext.prototype.viewReplaceOrAlgorithm = function() {
    return this.getTypedRuleContext(ViewReplaceOrAlgorithmContext,0);
};

CreateViewContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

CreateViewContext.prototype.viewSuid = function() {
    return this.getTypedRuleContext(ViewSuidContext,0);
};

CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateView(this);
	}
};

CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateViewContext = CreateViewContext;

MySQLParser.prototype.createView = function() {

    var localctx = new CreateViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, MySQLParser.RULE_createView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALGORITHM_SYMBOL || _la===MySQLParser.OR_SYMBOL) {
            this.state = 2310;
            this.viewReplaceOrAlgorithm();
        }

        this.state = 2314;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 2313;
            this.definerClause();
        }

        this.state = 2317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SQL_SYMBOL) {
            this.state = 2316;
            this.viewSuid();
        }

        this.state = 2319;
        this.match(MySQLParser.VIEW_SYMBOL);
        this.state = 2320;
        this.viewName();
        this.state = 2321;
        this.viewTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewReplaceOrAlgorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewReplaceOrAlgorithm;
    return this;
}

ViewReplaceOrAlgorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewReplaceOrAlgorithmContext.prototype.constructor = ViewReplaceOrAlgorithmContext;

ViewReplaceOrAlgorithmContext.prototype.OR_SYMBOL = function() {
    return this.getToken(MySQLParser.OR_SYMBOL, 0);
};

ViewReplaceOrAlgorithmContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

ViewReplaceOrAlgorithmContext.prototype.viewAlgorithm = function() {
    return this.getTypedRuleContext(ViewAlgorithmContext,0);
};

ViewReplaceOrAlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewReplaceOrAlgorithm(this);
	}
};

ViewReplaceOrAlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewReplaceOrAlgorithm(this);
	}
};

ViewReplaceOrAlgorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewReplaceOrAlgorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewReplaceOrAlgorithmContext = ViewReplaceOrAlgorithmContext;

MySQLParser.prototype.viewReplaceOrAlgorithm = function() {

    var localctx = new ViewReplaceOrAlgorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, MySQLParser.RULE_viewReplaceOrAlgorithm);
    var _la = 0; // Token type
    try {
        this.state = 2329;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.OR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2323;
            this.match(MySQLParser.OR_SYMBOL);
            this.state = 2324;
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.state = 2326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALGORITHM_SYMBOL) {
                this.state = 2325;
                this.viewAlgorithm();
            }

            break;
        case MySQLParser.ALGORITHM_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2328;
            this.viewAlgorithm();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewAlgorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewAlgorithm;
    this.algorithm = null; // Token
    return this;
}

ViewAlgorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewAlgorithmContext.prototype.constructor = ViewAlgorithmContext;

ViewAlgorithmContext.prototype.ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
};

ViewAlgorithmContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

ViewAlgorithmContext.prototype.UNDEFINED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
};

ViewAlgorithmContext.prototype.MERGE_SYMBOL = function() {
    return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
};

ViewAlgorithmContext.prototype.TEMPTABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
};

ViewAlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewAlgorithm(this);
	}
};

ViewAlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewAlgorithm(this);
	}
};

ViewAlgorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewAlgorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewAlgorithmContext = ViewAlgorithmContext;

MySQLParser.prototype.viewAlgorithm = function() {

    var localctx = new ViewAlgorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, MySQLParser.RULE_viewAlgorithm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2331;
        this.match(MySQLParser.ALGORITHM_SYMBOL);
        this.state = 2332;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 2333;
        localctx.algorithm = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.MERGE_SYMBOL || _la===MySQLParser.TEMPTABLE_SYMBOL || _la===MySQLParser.UNDEFINED_SYMBOL)) {
            localctx.algorithm = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewSuidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewSuid;
    return this;
}

ViewSuidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewSuidContext.prototype.constructor = ViewSuidContext;

ViewSuidContext.prototype.SQL_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_SYMBOL, 0);
};

ViewSuidContext.prototype.SECURITY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
};

ViewSuidContext.prototype.DEFINER_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
};

ViewSuidContext.prototype.INVOKER_SYMBOL = function() {
    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
};

ViewSuidContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewSuid(this);
	}
};

ViewSuidContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewSuid(this);
	}
};

ViewSuidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewSuid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewSuidContext = ViewSuidContext;

MySQLParser.prototype.viewSuid = function() {

    var localctx = new ViewSuidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, MySQLParser.RULE_viewSuid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2335;
        this.match(MySQLParser.SQL_SYMBOL);
        this.state = 2336;
        this.match(MySQLParser.SECURITY_SYMBOL);
        this.state = 2337;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DEFINER_SYMBOL || _la===MySQLParser.INVOKER_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTrigger;
    this.timing = null; // Token
    this.event = null; // Token
    return this;
}

CreateTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTriggerContext.prototype.constructor = CreateTriggerContext;

CreateTriggerContext.prototype.TRIGGER_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
};

CreateTriggerContext.prototype.triggerName = function() {
    return this.getTypedRuleContext(TriggerNameContext,0);
};

CreateTriggerContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

CreateTriggerContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

CreateTriggerContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

CreateTriggerContext.prototype.EACH_SYMBOL = function() {
    return this.getToken(MySQLParser.EACH_SYMBOL, 0);
};

CreateTriggerContext.prototype.ROW_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
};

CreateTriggerContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

CreateTriggerContext.prototype.BEFORE_SYMBOL = function() {
    return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
};

CreateTriggerContext.prototype.AFTER_SYMBOL = function() {
    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
};

CreateTriggerContext.prototype.INSERT_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
};

CreateTriggerContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

CreateTriggerContext.prototype.DELETE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
};

CreateTriggerContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

CreateTriggerContext.prototype.triggerFollowsPrecedesClause = function() {
    return this.getTypedRuleContext(TriggerFollowsPrecedesClauseContext,0);
};

CreateTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTriggerContext = CreateTriggerContext;

MySQLParser.prototype.createTrigger = function() {

    var localctx = new CreateTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, MySQLParser.RULE_createTrigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 2339;
            this.definerClause();
        }

        this.state = 2342;
        this.match(MySQLParser.TRIGGER_SYMBOL);
        this.state = 2343;
        this.triggerName();
        this.state = 2344;
        localctx.timing = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.AFTER_SYMBOL || _la===MySQLParser.BEFORE_SYMBOL)) {
            localctx.timing = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2345;
        localctx.event = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DELETE_SYMBOL || _la===MySQLParser.INSERT_SYMBOL || _la===MySQLParser.UPDATE_SYMBOL)) {
            localctx.event = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2346;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 2347;
        this.tableRef();
        this.state = 2348;
        this.match(MySQLParser.FOR_SYMBOL);
        this.state = 2349;
        this.match(MySQLParser.EACH_SYMBOL);
        this.state = 2350;
        this.match(MySQLParser.ROW_SYMBOL);
        this.state = 2352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        if(la_===1) {
            this.state = 2351;
            this.triggerFollowsPrecedesClause();

        }
        this.state = 2354;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TriggerFollowsPrecedesClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_triggerFollowsPrecedesClause;
    this.ordering = null; // Token
    return this;
}

TriggerFollowsPrecedesClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerFollowsPrecedesClauseContext.prototype.constructor = TriggerFollowsPrecedesClauseContext;

TriggerFollowsPrecedesClauseContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

TriggerFollowsPrecedesClauseContext.prototype.FOLLOWS_SYMBOL = function() {
    return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
};

TriggerFollowsPrecedesClauseContext.prototype.PRECEDES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
};

TriggerFollowsPrecedesClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTriggerFollowsPrecedesClause(this);
	}
};

TriggerFollowsPrecedesClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTriggerFollowsPrecedesClause(this);
	}
};

TriggerFollowsPrecedesClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTriggerFollowsPrecedesClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TriggerFollowsPrecedesClauseContext = TriggerFollowsPrecedesClauseContext;

MySQLParser.prototype.triggerFollowsPrecedesClause = function() {

    var localctx = new TriggerFollowsPrecedesClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, MySQLParser.RULE_triggerFollowsPrecedesClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2356;
        if (!( serverVersion >= 50700)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
        }
        this.state = 2357;
        localctx.ordering = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FOLLOWS_SYMBOL || _la===MySQLParser.PRECEDES_SYMBOL)) {
            localctx.ordering = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2358;
        this.textOrIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createEvent;
    return this;
}

CreateEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateEventContext.prototype.constructor = CreateEventContext;

CreateEventContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

CreateEventContext.prototype.eventName = function() {
    return this.getTypedRuleContext(EventNameContext,0);
};

CreateEventContext.prototype.ON_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ON_SYMBOL);
    } else {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
};


CreateEventContext.prototype.SCHEDULE_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
};

CreateEventContext.prototype.schedule = function() {
    return this.getTypedRuleContext(ScheduleContext,0);
};

CreateEventContext.prototype.DO_SYMBOL = function() {
    return this.getToken(MySQLParser.DO_SYMBOL, 0);
};

CreateEventContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

CreateEventContext.prototype.definerClause = function() {
    return this.getTypedRuleContext(DefinerClauseContext,0);
};

CreateEventContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateEventContext.prototype.COMPLETION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
};

CreateEventContext.prototype.PRESERVE_SYMBOL = function() {
    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
};

CreateEventContext.prototype.ENABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
};

CreateEventContext.prototype.DISABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
};

CreateEventContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

CreateEventContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

CreateEventContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

CreateEventContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

CreateEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateEvent(this);
	}
};

CreateEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateEvent(this);
	}
};

CreateEventContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateEvent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateEventContext = CreateEventContext;

MySQLParser.prototype.createEvent = function() {

    var localctx = new CreateEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, MySQLParser.RULE_createEvent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER_SYMBOL) {
            this.state = 2360;
            this.definerClause();
        }

        this.state = 2363;
        this.match(MySQLParser.EVENT_SYMBOL);
        this.state = 2365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        if(la_===1) {
            this.state = 2364;
            this.ifNotExists();

        }
        this.state = 2367;
        this.eventName();
        this.state = 2368;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 2369;
        this.match(MySQLParser.SCHEDULE_SYMBOL);
        this.state = 2370;
        this.schedule();
        this.state = 2377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ON_SYMBOL) {
            this.state = 2371;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 2372;
            this.match(MySQLParser.COMPLETION_SYMBOL);
            this.state = 2374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT_SYMBOL) {
                this.state = 2373;
                this.match(MySQLParser.NOT_SYMBOL);
            }

            this.state = 2376;
            this.match(MySQLParser.PRESERVE_SYMBOL);
        }

        this.state = 2385;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case MySQLParser.ENABLE_SYMBOL:
        	this.state = 2379;
        	this.match(MySQLParser.ENABLE_SYMBOL);
        	break;
        case MySQLParser.DISABLE_SYMBOL:
        	this.state = 2380;
        	this.match(MySQLParser.DISABLE_SYMBOL);
        	this.state = 2383;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===MySQLParser.ON_SYMBOL) {
        	    this.state = 2381;
        	    this.match(MySQLParser.ON_SYMBOL);
        	    this.state = 2382;
        	    this.match(MySQLParser.SLAVE_SYMBOL);
        	}

        	break;
        case MySQLParser.COMMENT_SYMBOL:
        case MySQLParser.DO_SYMBOL:
        	break;
        default:
        	break;
        }
        this.state = 2389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT_SYMBOL) {
            this.state = 2387;
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 2388;
            this.textLiteral();
        }

        this.state = 2391;
        this.match(MySQLParser.DO_SYMBOL);
        this.state = 2392;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createRole;
    return this;
}

CreateRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRoleContext.prototype.constructor = CreateRoleContext;

CreateRoleContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

CreateRoleContext.prototype.roleList = function() {
    return this.getTypedRuleContext(RoleListContext,0);
};

CreateRoleContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateRole(this);
	}
};

CreateRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateRole(this);
	}
};

CreateRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateRoleContext = CreateRoleContext;

MySQLParser.prototype.createRole = function() {

    var localctx = new CreateRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, MySQLParser.RULE_createRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2394;
        this.match(MySQLParser.ROLE_SYMBOL);
        this.state = 2396;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        if(la_===1) {
            this.state = 2395;
            this.ifNotExists();

        }
        this.state = 2398;
        this.roleList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateSpatialReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createSpatialReference;
    return this;
}

CreateSpatialReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateSpatialReferenceContext.prototype.constructor = CreateSpatialReferenceContext;

CreateSpatialReferenceContext.prototype.OR_SYMBOL = function() {
    return this.getToken(MySQLParser.OR_SYMBOL, 0);
};

CreateSpatialReferenceContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

CreateSpatialReferenceContext.prototype.SPATIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
};

CreateSpatialReferenceContext.prototype.REFERENCE_SYMBOL = function() {
    return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
};

CreateSpatialReferenceContext.prototype.SYSTEM_SYMBOL = function() {
    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
};

CreateSpatialReferenceContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

CreateSpatialReferenceContext.prototype.srsAttribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SrsAttributeContext);
    } else {
        return this.getTypedRuleContext(SrsAttributeContext,i);
    }
};

CreateSpatialReferenceContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateSpatialReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateSpatialReference(this);
	}
};

CreateSpatialReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateSpatialReference(this);
	}
};

CreateSpatialReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateSpatialReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateSpatialReferenceContext = CreateSpatialReferenceContext;

MySQLParser.prototype.createSpatialReference = function() {

    var localctx = new CreateSpatialReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, MySQLParser.RULE_createSpatialReference);
    var _la = 0; // Token type
    try {
        this.state = 2425;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.OR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2400;
            this.match(MySQLParser.OR_SYMBOL);
            this.state = 2401;
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.state = 2402;
            this.match(MySQLParser.SPATIAL_SYMBOL);
            this.state = 2403;
            this.match(MySQLParser.REFERENCE_SYMBOL);
            this.state = 2404;
            this.match(MySQLParser.SYSTEM_SYMBOL);
            this.state = 2405;
            this.real_ulonglong_number();
            this.state = 2409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.NAME_SYMBOL || ((((_la - 745)) & ~0x1f) == 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.DEFINITION_SYMBOL - 745)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 745)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 745)))) !== 0)) {
                this.state = 2406;
                this.srsAttribute();
                this.state = 2411;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case MySQLParser.SPATIAL_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2412;
            this.match(MySQLParser.SPATIAL_SYMBOL);
            this.state = 2413;
            this.match(MySQLParser.REFERENCE_SYMBOL);
            this.state = 2414;
            this.match(MySQLParser.SYSTEM_SYMBOL);
            this.state = 2416;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
            if(la_===1) {
                this.state = 2415;
                this.ifNotExists();

            }
            this.state = 2418;
            this.real_ulonglong_number();
            this.state = 2422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.NAME_SYMBOL || ((((_la - 745)) & ~0x1f) == 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.DEFINITION_SYMBOL - 745)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 745)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 745)))) !== 0)) {
                this.state = 2419;
                this.srsAttribute();
                this.state = 2424;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SrsAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_srsAttribute;
    return this;
}

SrsAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SrsAttributeContext.prototype.constructor = SrsAttributeContext;

SrsAttributeContext.prototype.NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
};

SrsAttributeContext.prototype.TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
};

SrsAttributeContext.prototype.textStringNoLinebreak = function() {
    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
};

SrsAttributeContext.prototype.DEFINITION_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
};

SrsAttributeContext.prototype.ORGANIZATION_SYMBOL = function() {
    return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
};

SrsAttributeContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

SrsAttributeContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

SrsAttributeContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

SrsAttributeContext.prototype.DESCRIPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
};

SrsAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSrsAttribute(this);
	}
};

SrsAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSrsAttribute(this);
	}
};

SrsAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSrsAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SrsAttributeContext = SrsAttributeContext;

MySQLParser.prototype.srsAttribute = function() {

    var localctx = new SrsAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, MySQLParser.RULE_srsAttribute);
    try {
        this.state = 2442;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.NAME_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2427;
            this.match(MySQLParser.NAME_SYMBOL);
            this.state = 2428;
            this.match(MySQLParser.TEXT_SYMBOL);
            this.state = 2429;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.DEFINITION_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2430;
            this.match(MySQLParser.DEFINITION_SYMBOL);
            this.state = 2431;
            this.match(MySQLParser.TEXT_SYMBOL);
            this.state = 2432;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.ORGANIZATION_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2433;
            this.match(MySQLParser.ORGANIZATION_SYMBOL);
            this.state = 2434;
            this.textStringNoLinebreak();
            this.state = 2435;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 2436;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 2437;
            this.real_ulonglong_number();
            break;
        case MySQLParser.DESCRIPTION_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2439;
            this.match(MySQLParser.DESCRIPTION_SYMBOL);
            this.state = 2440;
            this.match(MySQLParser.TEXT_SYMBOL);
            this.state = 2441;
            this.textStringNoLinebreak();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropStatement;
    return this;
}

DropStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropStatementContext.prototype.constructor = DropStatementContext;

DropStatementContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

DropStatementContext.prototype.dropDatabase = function() {
    return this.getTypedRuleContext(DropDatabaseContext,0);
};

DropStatementContext.prototype.dropEvent = function() {
    return this.getTypedRuleContext(DropEventContext,0);
};

DropStatementContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

DropStatementContext.prototype.dropProcedure = function() {
    return this.getTypedRuleContext(DropProcedureContext,0);
};

DropStatementContext.prototype.dropIndex = function() {
    return this.getTypedRuleContext(DropIndexContext,0);
};

DropStatementContext.prototype.dropLogfileGroup = function() {
    return this.getTypedRuleContext(DropLogfileGroupContext,0);
};

DropStatementContext.prototype.dropServer = function() {
    return this.getTypedRuleContext(DropServerContext,0);
};

DropStatementContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

DropStatementContext.prototype.dropTableSpace = function() {
    return this.getTypedRuleContext(DropTableSpaceContext,0);
};

DropStatementContext.prototype.dropTrigger = function() {
    return this.getTypedRuleContext(DropTriggerContext,0);
};

DropStatementContext.prototype.dropView = function() {
    return this.getTypedRuleContext(DropViewContext,0);
};

DropStatementContext.prototype.dropRole = function() {
    return this.getTypedRuleContext(DropRoleContext,0);
};

DropStatementContext.prototype.dropSpatialReference = function() {
    return this.getTypedRuleContext(DropSpatialReferenceContext,0);
};

DropStatementContext.prototype.dropUndoTablespace = function() {
    return this.getTypedRuleContext(DropUndoTablespaceContext,0);
};

DropStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropStatement(this);
	}
};

DropStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropStatement(this);
	}
};

DropStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropStatementContext = DropStatementContext;

MySQLParser.prototype.dropStatement = function() {

    var localctx = new DropStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, MySQLParser.RULE_dropStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2444;
        this.match(MySQLParser.DROP_SYMBOL);
        this.state = 2462;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2445;
            this.dropDatabase();
            break;

        case 2:
            this.state = 2446;
            this.dropEvent();
            break;

        case 3:
            this.state = 2447;
            this.dropFunction();
            break;

        case 4:
            this.state = 2448;
            this.dropProcedure();
            break;

        case 5:
            this.state = 2449;
            this.dropIndex();
            break;

        case 6:
            this.state = 2450;
            this.dropLogfileGroup();
            break;

        case 7:
            this.state = 2451;
            this.dropServer();
            break;

        case 8:
            this.state = 2452;
            this.dropTable();
            break;

        case 9:
            this.state = 2453;
            this.dropTableSpace();
            break;

        case 10:
            this.state = 2454;
            this.dropTrigger();
            break;

        case 11:
            this.state = 2455;
            this.dropView();
            break;

        case 12:
            this.state = 2456;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 2457;
            this.dropRole();
            break;

        case 13:
            this.state = 2458;
            if (!( serverVersion >= 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
            }
            this.state = 2459;
            this.dropSpatialReference();
            break;

        case 14:
            this.state = 2460;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 2461;
            this.dropUndoTablespace();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropDatabase;
    return this;
}

DropDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

DropDatabaseContext.prototype.DATABASE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
};

DropDatabaseContext.prototype.schemaRef = function() {
    return this.getTypedRuleContext(SchemaRefContext,0);
};

DropDatabaseContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropDatabase(this);
	}
};

DropDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropDatabase(this);
	}
};

DropDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropDatabaseContext = DropDatabaseContext;

MySQLParser.prototype.dropDatabase = function() {

    var localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, MySQLParser.RULE_dropDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2464;
        this.match(MySQLParser.DATABASE_SYMBOL);
        this.state = 2466;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 2465;
            this.ifExists();

        }
        this.state = 2468;
        this.schemaRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropEvent;
    return this;
}

DropEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropEventContext.prototype.constructor = DropEventContext;

DropEventContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

DropEventContext.prototype.eventRef = function() {
    return this.getTypedRuleContext(EventRefContext,0);
};

DropEventContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropEvent(this);
	}
};

DropEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropEvent(this);
	}
};

DropEventContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropEvent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropEventContext = DropEventContext;

MySQLParser.prototype.dropEvent = function() {

    var localctx = new DropEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, MySQLParser.RULE_dropEvent);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2470;
        this.match(MySQLParser.EVENT_SYMBOL);
        this.state = 2472;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        if(la_===1) {
            this.state = 2471;
            this.ifExists();

        }
        this.state = 2474;
        this.eventRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

DropFunctionContext.prototype.functionRef = function() {
    return this.getTypedRuleContext(FunctionRefContext,0);
};

DropFunctionContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropFunctionContext = DropFunctionContext;

MySQLParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, MySQLParser.RULE_dropFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2476;
        this.match(MySQLParser.FUNCTION_SYMBOL);
        this.state = 2478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
        if(la_===1) {
            this.state = 2477;
            this.ifExists();

        }
        this.state = 2480;
        this.functionRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropProcedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropProcedure;
    return this;
}

DropProcedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropProcedureContext.prototype.constructor = DropProcedureContext;

DropProcedureContext.prototype.PROCEDURE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
};

DropProcedureContext.prototype.procedureRef = function() {
    return this.getTypedRuleContext(ProcedureRefContext,0);
};

DropProcedureContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropProcedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropProcedure(this);
	}
};

DropProcedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropProcedure(this);
	}
};

DropProcedureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropProcedure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropProcedureContext = DropProcedureContext;

MySQLParser.prototype.dropProcedure = function() {

    var localctx = new DropProcedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, MySQLParser.RULE_dropProcedure);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2482;
        this.match(MySQLParser.PROCEDURE_SYMBOL);
        this.state = 2484;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        if(la_===1) {
            this.state = 2483;
            this.ifExists();

        }
        this.state = 2486;
        this.procedureRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropIndex;
    this.type = null; // Token
    return this;
}

DropIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexContext.prototype.constructor = DropIndexContext;

DropIndexContext.prototype.indexRef = function() {
    return this.getTypedRuleContext(IndexRefContext,0);
};

DropIndexContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

DropIndexContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

DropIndexContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

DropIndexContext.prototype.onlineOption = function() {
    return this.getTypedRuleContext(OnlineOptionContext,0);
};

DropIndexContext.prototype.indexLockAndAlgorithm = function() {
    return this.getTypedRuleContext(IndexLockAndAlgorithmContext,0);
};

DropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropIndex(this);
	}
};

DropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropIndex(this);
	}
};

DropIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropIndexContext = DropIndexContext;

MySQLParser.prototype.dropIndex = function() {

    var localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, MySQLParser.RULE_dropIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OFFLINE_SYMBOL || _la===MySQLParser.ONLINE_SYMBOL) {
            this.state = 2488;
            this.onlineOption();
        }

        this.state = 2491;
        localctx.type = this.match(MySQLParser.INDEX_SYMBOL);
        this.state = 2492;
        this.indexRef();
        this.state = 2493;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 2494;
        this.tableRef();
        this.state = 2496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALGORITHM_SYMBOL || _la===MySQLParser.LOCK_SYMBOL) {
            this.state = 2495;
            this.indexLockAndAlgorithm();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropLogfileGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropLogfileGroup;
    return this;
}

DropLogfileGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropLogfileGroupContext.prototype.constructor = DropLogfileGroupContext;

DropLogfileGroupContext.prototype.LOGFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
};

DropLogfileGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

DropLogfileGroupContext.prototype.logfileGroupRef = function() {
    return this.getTypedRuleContext(LogfileGroupRefContext,0);
};

DropLogfileGroupContext.prototype.dropLogfileGroupOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DropLogfileGroupOptionContext);
    } else {
        return this.getTypedRuleContext(DropLogfileGroupOptionContext,i);
    }
};

DropLogfileGroupContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


DropLogfileGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropLogfileGroup(this);
	}
};

DropLogfileGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropLogfileGroup(this);
	}
};

DropLogfileGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropLogfileGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropLogfileGroupContext = DropLogfileGroupContext;

MySQLParser.prototype.dropLogfileGroup = function() {

    var localctx = new DropLogfileGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, MySQLParser.RULE_dropLogfileGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2498;
        this.match(MySQLParser.LOGFILE_SYMBOL);
        this.state = 2499;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 2500;
        this.logfileGroupRef();
        this.state = 2511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL) {
            this.state = 2501;
            this.dropLogfileGroupOption();
            this.state = 2508;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
                this.state = 2503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.COMMA_SYMBOL) {
                    this.state = 2502;
                    this.match(MySQLParser.COMMA_SYMBOL);
                }

                this.state = 2505;
                this.dropLogfileGroupOption();
                this.state = 2510;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropLogfileGroupOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropLogfileGroupOption;
    return this;
}

DropLogfileGroupOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropLogfileGroupOptionContext.prototype.constructor = DropLogfileGroupOptionContext;

DropLogfileGroupOptionContext.prototype.tsOptionWait = function() {
    return this.getTypedRuleContext(TsOptionWaitContext,0);
};

DropLogfileGroupOptionContext.prototype.tsOptionEngine = function() {
    return this.getTypedRuleContext(TsOptionEngineContext,0);
};

DropLogfileGroupOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropLogfileGroupOption(this);
	}
};

DropLogfileGroupOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropLogfileGroupOption(this);
	}
};

DropLogfileGroupOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropLogfileGroupOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropLogfileGroupOptionContext = DropLogfileGroupOptionContext;

MySQLParser.prototype.dropLogfileGroupOption = function() {

    var localctx = new DropLogfileGroupOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, MySQLParser.RULE_dropLogfileGroupOption);
    try {
        this.state = 2515;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.NO_WAIT_SYMBOL:
        case MySQLParser.WAIT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2513;
            this.tsOptionWait();
            break;
        case MySQLParser.ENGINE_SYMBOL:
        case MySQLParser.STORAGE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2514;
            this.tsOptionEngine();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropServer;
    return this;
}

DropServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropServerContext.prototype.constructor = DropServerContext;

DropServerContext.prototype.SERVER_SYMBOL = function() {
    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
};

DropServerContext.prototype.serverRef = function() {
    return this.getTypedRuleContext(ServerRefContext,0);
};

DropServerContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropServer(this);
	}
};

DropServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropServer(this);
	}
};

DropServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropServerContext = DropServerContext;

MySQLParser.prototype.dropServer = function() {

    var localctx = new DropServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, MySQLParser.RULE_dropServer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2517;
        this.match(MySQLParser.SERVER_SYMBOL);
        this.state = 2519;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        if(la_===1) {
            this.state = 2518;
            this.ifExists();

        }
        this.state = 2521;
        this.serverRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropTable;
    this.type = null; // Token
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.tableRefList = function() {
    return this.getTypedRuleContext(TableRefListContext,0);
};

DropTableContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

DropTableContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

DropTableContext.prototype.TEMPORARY_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
};

DropTableContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTableContext.prototype.RESTRICT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
};

DropTableContext.prototype.CASCADE_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropTableContext = DropTableContext;

MySQLParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, MySQLParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2524;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.TEMPORARY_SYMBOL) {
            this.state = 2523;
            this.match(MySQLParser.TEMPORARY_SYMBOL);
        }

        this.state = 2526;
        localctx.type = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.TABLES_SYMBOL || _la===MySQLParser.TABLE_SYMBOL)) {
            localctx.type = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
        if(la_===1) {
            this.state = 2527;
            this.ifExists();

        }
        this.state = 2530;
        this.tableRefList();
        this.state = 2532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL) {
            this.state = 2531;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableSpaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropTableSpace;
    return this;
}

DropTableSpaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableSpaceContext.prototype.constructor = DropTableSpaceContext;

DropTableSpaceContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

DropTableSpaceContext.prototype.tablespaceRef = function() {
    return this.getTypedRuleContext(TablespaceRefContext,0);
};

DropTableSpaceContext.prototype.dropLogfileGroupOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DropLogfileGroupOptionContext);
    } else {
        return this.getTypedRuleContext(DropLogfileGroupOptionContext,i);
    }
};

DropTableSpaceContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


DropTableSpaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropTableSpace(this);
	}
};

DropTableSpaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropTableSpace(this);
	}
};

DropTableSpaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropTableSpace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropTableSpaceContext = DropTableSpaceContext;

MySQLParser.prototype.dropTableSpace = function() {

    var localctx = new DropTableSpaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, MySQLParser.RULE_dropTableSpace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2534;
        this.match(MySQLParser.TABLESPACE_SYMBOL);
        this.state = 2535;
        this.tablespaceRef();
        this.state = 2546;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL) {
            this.state = 2536;
            this.dropLogfileGroupOption();
            this.state = 2543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.NO_WAIT_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.WAIT_SYMBOL || _la===MySQLParser.COMMA_SYMBOL) {
                this.state = 2538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.COMMA_SYMBOL) {
                    this.state = 2537;
                    this.match(MySQLParser.COMMA_SYMBOL);
                }

                this.state = 2540;
                this.dropLogfileGroupOption();
                this.state = 2545;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropTrigger;
    return this;
}

DropTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTriggerContext.prototype.constructor = DropTriggerContext;

DropTriggerContext.prototype.TRIGGER_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
};

DropTriggerContext.prototype.triggerRef = function() {
    return this.getTypedRuleContext(TriggerRefContext,0);
};

DropTriggerContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropTrigger(this);
	}
};

DropTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropTrigger(this);
	}
};

DropTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropTriggerContext = DropTriggerContext;

MySQLParser.prototype.dropTrigger = function() {

    var localctx = new DropTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, MySQLParser.RULE_dropTrigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2548;
        this.match(MySQLParser.TRIGGER_SYMBOL);
        this.state = 2550;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        if(la_===1) {
            this.state = 2549;
            this.ifExists();

        }
        this.state = 2552;
        this.triggerRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropView;
    return this;
}

DropViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

DropViewContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

DropViewContext.prototype.viewRefList = function() {
    return this.getTypedRuleContext(ViewRefListContext,0);
};

DropViewContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropViewContext.prototype.RESTRICT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
};

DropViewContext.prototype.CASCADE_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
};

DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropView(this);
	}
};

DropViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropViewContext = DropViewContext;

MySQLParser.prototype.dropView = function() {

    var localctx = new DropViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, MySQLParser.RULE_dropView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2554;
        this.match(MySQLParser.VIEW_SYMBOL);
        this.state = 2556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        if(la_===1) {
            this.state = 2555;
            this.ifExists();

        }
        this.state = 2558;
        this.viewRefList();
        this.state = 2560;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL) {
            this.state = 2559;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropRole;
    return this;
}

DropRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRoleContext.prototype.constructor = DropRoleContext;

DropRoleContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

DropRoleContext.prototype.roleList = function() {
    return this.getTypedRuleContext(RoleListContext,0);
};

DropRoleContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropRole(this);
	}
};

DropRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropRole(this);
	}
};

DropRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropRoleContext = DropRoleContext;

MySQLParser.prototype.dropRole = function() {

    var localctx = new DropRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, MySQLParser.RULE_dropRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2562;
        this.match(MySQLParser.ROLE_SYMBOL);
        this.state = 2564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
        if(la_===1) {
            this.state = 2563;
            this.ifExists();

        }
        this.state = 2566;
        this.roleList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropSpatialReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropSpatialReference;
    return this;
}

DropSpatialReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropSpatialReferenceContext.prototype.constructor = DropSpatialReferenceContext;

DropSpatialReferenceContext.prototype.SPATIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
};

DropSpatialReferenceContext.prototype.REFERENCE_SYMBOL = function() {
    return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
};

DropSpatialReferenceContext.prototype.SYSTEM_SYMBOL = function() {
    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
};

DropSpatialReferenceContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

DropSpatialReferenceContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropSpatialReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropSpatialReference(this);
	}
};

DropSpatialReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropSpatialReference(this);
	}
};

DropSpatialReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropSpatialReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropSpatialReferenceContext = DropSpatialReferenceContext;

MySQLParser.prototype.dropSpatialReference = function() {

    var localctx = new DropSpatialReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, MySQLParser.RULE_dropSpatialReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2568;
        this.match(MySQLParser.SPATIAL_SYMBOL);
        this.state = 2569;
        this.match(MySQLParser.REFERENCE_SYMBOL);
        this.state = 2570;
        this.match(MySQLParser.SYSTEM_SYMBOL);
        this.state = 2572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
        if(la_===1) {
            this.state = 2571;
            this.ifExists();

        }
        this.state = 2574;
        this.real_ulonglong_number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropUndoTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropUndoTablespace;
    return this;
}

DropUndoTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUndoTablespaceContext.prototype.constructor = DropUndoTablespaceContext;

DropUndoTablespaceContext.prototype.UNDO_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
};

DropUndoTablespaceContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

DropUndoTablespaceContext.prototype.tablespaceRef = function() {
    return this.getTypedRuleContext(TablespaceRefContext,0);
};

DropUndoTablespaceContext.prototype.undoTableSpaceOptions = function() {
    return this.getTypedRuleContext(UndoTableSpaceOptionsContext,0);
};

DropUndoTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropUndoTablespace(this);
	}
};

DropUndoTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropUndoTablespace(this);
	}
};

DropUndoTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropUndoTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropUndoTablespaceContext = DropUndoTablespaceContext;

MySQLParser.prototype.dropUndoTablespace = function() {

    var localctx = new DropUndoTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, MySQLParser.RULE_dropUndoTablespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2576;
        this.match(MySQLParser.UNDO_SYMBOL);
        this.state = 2577;
        this.match(MySQLParser.TABLESPACE_SYMBOL);
        this.state = 2578;
        this.tablespaceRef();
        this.state = 2580;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL) {
            this.state = 2579;
            this.undoTableSpaceOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameTableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renameTableStatement;
    return this;
}

RenameTableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameTableStatementContext.prototype.constructor = RenameTableStatementContext;

RenameTableStatementContext.prototype.RENAME_SYMBOL = function() {
    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
};

RenameTableStatementContext.prototype.renamePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenamePairContext);
    } else {
        return this.getTypedRuleContext(RenamePairContext,i);
    }
};

RenameTableStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

RenameTableStatementContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

RenameTableStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


RenameTableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenameTableStatement(this);
	}
};

RenameTableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenameTableStatement(this);
	}
};

RenameTableStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenameTableStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenameTableStatementContext = RenameTableStatementContext;

MySQLParser.prototype.renameTableStatement = function() {

    var localctx = new RenameTableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, MySQLParser.RULE_renameTableStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2582;
        this.match(MySQLParser.RENAME_SYMBOL);
        this.state = 2583;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.TABLES_SYMBOL || _la===MySQLParser.TABLE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2584;
        this.renamePair();
        this.state = 2589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 2585;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 2586;
            this.renamePair();
            this.state = 2591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenamePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renamePair;
    return this;
}

RenamePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenamePairContext.prototype.constructor = RenamePairContext;

RenamePairContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

RenamePairContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

RenamePairContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

RenamePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenamePair(this);
	}
};

RenamePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenamePair(this);
	}
};

RenamePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenamePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenamePairContext = RenamePairContext;

MySQLParser.prototype.renamePair = function() {

    var localctx = new RenamePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, MySQLParser.RULE_renamePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2592;
        this.tableRef();
        this.state = 2593;
        this.match(MySQLParser.TO_SYMBOL);
        this.state = 2594;
        this.tableName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TruncateTableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_truncateTableStatement;
    return this;
}

TruncateTableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TruncateTableStatementContext.prototype.constructor = TruncateTableStatementContext;

TruncateTableStatementContext.prototype.TRUNCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
};

TruncateTableStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

TruncateTableStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

TruncateTableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTruncateTableStatement(this);
	}
};

TruncateTableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTruncateTableStatement(this);
	}
};

TruncateTableStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTruncateTableStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TruncateTableStatementContext = TruncateTableStatementContext;

MySQLParser.prototype.truncateTableStatement = function() {

    var localctx = new TruncateTableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, MySQLParser.RULE_truncateTableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2596;
        this.match(MySQLParser.TRUNCATE_SYMBOL);
        this.state = 2598;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        if(la_===1) {
            this.state = 2597;
            this.match(MySQLParser.TABLE_SYMBOL);

        }
        this.state = 2600;
        this.tableRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_importStatement;
    return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.IMPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
};

ImportStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

ImportStatementContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

ImportStatementContext.prototype.textStringLiteralList = function() {
    return this.getTypedRuleContext(TextStringLiteralListContext,0);
};

ImportStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterImportStatement(this);
	}
};

ImportStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitImportStatement(this);
	}
};

ImportStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitImportStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ImportStatementContext = ImportStatementContext;

MySQLParser.prototype.importStatement = function() {

    var localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, MySQLParser.RULE_importStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2602;
        this.match(MySQLParser.IMPORT_SYMBOL);
        this.state = 2603;
        this.match(MySQLParser.TABLE_SYMBOL);
        this.state = 2604;
        this.match(MySQLParser.FROM_SYMBOL);
        this.state = 2605;
        this.textStringLiteralList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_callStatement;
    return this;
}

CallStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallStatementContext.prototype.constructor = CallStatementContext;

CallStatementContext.prototype.CALL_SYMBOL = function() {
    return this.getToken(MySQLParser.CALL_SYMBOL, 0);
};

CallStatementContext.prototype.procedureRef = function() {
    return this.getTypedRuleContext(ProcedureRefContext,0);
};

CallStatementContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

CallStatementContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

CallStatementContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

CallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCallStatement(this);
	}
};

CallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCallStatement(this);
	}
};

CallStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCallStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CallStatementContext = CallStatementContext;

MySQLParser.prototype.callStatement = function() {

    var localctx = new CallStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, MySQLParser.RULE_callStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2607;
        this.match(MySQLParser.CALL_SYMBOL);
        this.state = 2608;
        this.procedureRef();
        this.state = 2614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 2609;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2611;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
            if(la_===1) {
                this.state = 2610;
                this.exprList();

            }
            this.state = 2613;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_deleteStatement;
    return this;
}

DeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteStatementContext.prototype.constructor = DeleteStatementContext;

DeleteStatementContext.prototype.DELETE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
};

DeleteStatementContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

DeleteStatementContext.prototype.tableAliasRefList = function() {
    return this.getTypedRuleContext(TableAliasRefListContext,0);
};

DeleteStatementContext.prototype.tableReferenceList = function() {
    return this.getTypedRuleContext(TableReferenceListContext,0);
};

DeleteStatementContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

DeleteStatementContext.prototype.deleteStatementOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeleteStatementOptionContext);
    } else {
        return this.getTypedRuleContext(DeleteStatementOptionContext,i);
    }
};

DeleteStatementContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

DeleteStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

DeleteStatementContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

DeleteStatementContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

DeleteStatementContext.prototype.partitionDelete = function() {
    return this.getTypedRuleContext(PartitionDeleteContext,0);
};

DeleteStatementContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

DeleteStatementContext.prototype.simpleLimitClause = function() {
    return this.getTypedRuleContext(SimpleLimitClauseContext,0);
};

DeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeleteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeleteStatementContext = DeleteStatementContext;

MySQLParser.prototype.deleteStatement = function() {

    var localctx = new DeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, MySQLParser.RULE_deleteStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2618;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        if(la_===1) {
            this.state = 2616;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 2617;
            this.withClause();

        }
        this.state = 2620;
        this.match(MySQLParser.DELETE_SYMBOL);
        this.state = 2624;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,223,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2621;
                this.deleteStatementOption(); 
            }
            this.state = 2626;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,223,this._ctx);
        }

        this.state = 2659;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2627;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 2651;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2628;
                this.tableAliasRefList();
                this.state = 2629;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 2630;
                this.tableReferenceList();
                this.state = 2632;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.WHERE_SYMBOL) {
                    this.state = 2631;
                    this.whereClause();
                }

                break;

            case 2:
                this.state = 2634;
                this.tableRef();
                this.state = 2637;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
                if(la_===1) {
                    this.state = 2635;
                    if (!( serverVersion >= 80017)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
                    }
                    this.state = 2636;
                    this.tableAlias();

                }
                this.state = 2640;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
                if(la_===1) {
                    this.state = 2639;
                    this.partitionDelete();

                }
                this.state = 2643;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.WHERE_SYMBOL) {
                    this.state = 2642;
                    this.whereClause();
                }

                this.state = 2646;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ORDER_SYMBOL) {
                    this.state = 2645;
                    this.orderClause();
                }

                this.state = 2649;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.LIMIT_SYMBOL) {
                    this.state = 2648;
                    this.simpleLimitClause();
                }

                break;

            }
            break;

        case 2:
            this.state = 2653;
            this.tableAliasRefList();
            this.state = 2654;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 2655;
            this.tableReferenceList();
            this.state = 2657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WHERE_SYMBOL) {
                this.state = 2656;
                this.whereClause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDeleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDelete;
    return this;
}

PartitionDeleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDeleteContext.prototype.constructor = PartitionDeleteContext;

PartitionDeleteContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

PartitionDeleteContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionDeleteContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

PartitionDeleteContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionDeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDelete(this);
	}
};

PartitionDeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDelete(this);
	}
};

PartitionDeleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDelete(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionDeleteContext = PartitionDeleteContext;

MySQLParser.prototype.partitionDelete = function() {

    var localctx = new PartitionDeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, MySQLParser.RULE_partitionDelete);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2661;
        if (!( serverVersion >= 50602)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50602");
        }
        this.state = 2662;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 2663;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 2664;
        this.identifierList();
        this.state = 2665;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteStatementOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_deleteStatementOption;
    return this;
}

DeleteStatementOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteStatementOptionContext.prototype.constructor = DeleteStatementOptionContext;

DeleteStatementOptionContext.prototype.QUICK_SYMBOL = function() {
    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
};

DeleteStatementOptionContext.prototype.LOW_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
};

DeleteStatementOptionContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

DeleteStatementOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeleteStatementOption(this);
	}
};

DeleteStatementOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeleteStatementOption(this);
	}
};

DeleteStatementOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeleteStatementOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeleteStatementOptionContext = DeleteStatementOptionContext;

MySQLParser.prototype.deleteStatementOption = function() {

    var localctx = new DeleteStatementOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, MySQLParser.RULE_deleteStatementOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.QUICK_SYMBOL || _la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.LOW_PRIORITY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_doStatement;
    return this;
}

DoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

DoStatementContext.prototype.DO_SYMBOL = function() {
    return this.getToken(MySQLParser.DO_SYMBOL, 0);
};

DoStatementContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

DoStatementContext.prototype.selectItemList = function() {
    return this.getTypedRuleContext(SelectItemListContext,0);
};

DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDoStatement(this);
	}
};

DoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DoStatementContext = DoStatementContext;

MySQLParser.prototype.doStatement = function() {

    var localctx = new DoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, MySQLParser.RULE_doStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2669;
        this.match(MySQLParser.DO_SYMBOL);
        this.state = 2674;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2670;
            if (!( serverVersion < 50709)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50709");
            }
            this.state = 2671;
            this.exprList();
            break;

        case 2:
            this.state = 2672;
            if (!( serverVersion >= 50709)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
            }
            this.state = 2673;
            this.selectItemList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerStatement;
    return this;
}

HandlerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerStatementContext.prototype.constructor = HandlerStatementContext;

HandlerStatementContext.prototype.HANDLER_SYMBOL = function() {
    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
};

HandlerStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

HandlerStatementContext.prototype.OPEN_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
};

HandlerStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

HandlerStatementContext.prototype.CLOSE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
};

HandlerStatementContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

HandlerStatementContext.prototype.handlerReadOrScan = function() {
    return this.getTypedRuleContext(HandlerReadOrScanContext,0);
};

HandlerStatementContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

HandlerStatementContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

HandlerStatementContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

HandlerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerStatement(this);
	}
};

HandlerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerStatement(this);
	}
};

HandlerStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerStatementContext = HandlerStatementContext;

MySQLParser.prototype.handlerStatement = function() {

    var localctx = new HandlerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, MySQLParser.RULE_handlerStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2676;
        this.match(MySQLParser.HANDLER_SYMBOL);
        this.state = 2694;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2677;
            this.tableRef();
            this.state = 2678;
            this.match(MySQLParser.OPEN_SYMBOL);
            this.state = 2680;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
            if(la_===1) {
                this.state = 2679;
                this.tableAlias();

            }
            break;

        case 2:
            this.state = 2682;
            this.identifier();
            this.state = 2692;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CLOSE_SYMBOL:
                this.state = 2683;
                this.match(MySQLParser.CLOSE_SYMBOL);
                break;
            case MySQLParser.READ_SYMBOL:
                this.state = 2684;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 2685;
                this.handlerReadOrScan();
                this.state = 2687;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.WHERE_SYMBOL) {
                    this.state = 2686;
                    this.whereClause();
                }

                this.state = 2690;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.LIMIT_SYMBOL) {
                    this.state = 2689;
                    this.limitClause();
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerReadOrScanContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerReadOrScan;
    return this;
}

HandlerReadOrScanContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerReadOrScanContext.prototype.constructor = HandlerReadOrScanContext;

HandlerReadOrScanContext.prototype.FIRST_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
};

HandlerReadOrScanContext.prototype.NEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
};

HandlerReadOrScanContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

HandlerReadOrScanContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

HandlerReadOrScanContext.prototype.values = function() {
    return this.getTypedRuleContext(ValuesContext,0);
};

HandlerReadOrScanContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

HandlerReadOrScanContext.prototype.PREV_SYMBOL = function() {
    return this.getToken(MySQLParser.PREV_SYMBOL, 0);
};

HandlerReadOrScanContext.prototype.LAST_SYMBOL = function() {
    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
};

HandlerReadOrScanContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

HandlerReadOrScanContext.prototype.LESS_THAN_OPERATOR = function() {
    return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
};

HandlerReadOrScanContext.prototype.GREATER_THAN_OPERATOR = function() {
    return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
};

HandlerReadOrScanContext.prototype.LESS_OR_EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
};

HandlerReadOrScanContext.prototype.GREATER_OR_EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
};

HandlerReadOrScanContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerReadOrScan(this);
	}
};

HandlerReadOrScanContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerReadOrScan(this);
	}
};

HandlerReadOrScanContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerReadOrScan(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerReadOrScanContext = HandlerReadOrScanContext;

MySQLParser.prototype.handlerReadOrScan = function() {

    var localctx = new HandlerReadOrScanContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, MySQLParser.RULE_handlerReadOrScan);
    var _la = 0; // Token type
    try {
        this.state = 2706;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2696;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FIRST_SYMBOL || _la===MySQLParser.NEXT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2697;
            this.identifier();
            this.state = 2704;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.FIRST_SYMBOL:
            case MySQLParser.LAST_SYMBOL:
            case MySQLParser.NEXT_SYMBOL:
            case MySQLParser.PREV_SYMBOL:
                this.state = 2698;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.FIRST_SYMBOL || _la===MySQLParser.LAST_SYMBOL || _la===MySQLParser.NEXT_SYMBOL || _la===MySQLParser.PREV_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case MySQLParser.EQUAL_OPERATOR:
            case MySQLParser.GREATER_OR_EQUAL_OPERATOR:
            case MySQLParser.GREATER_THAN_OPERATOR:
            case MySQLParser.LESS_OR_EQUAL_OPERATOR:
            case MySQLParser.LESS_THAN_OPERATOR:
                this.state = 2699;
                _la = this._input.LA(1);
                if(!(((((_la - 383)) & ~0x1f) == 0 && ((1 << (_la - 383)) & ((1 << (MySQLParser.EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_THAN_OPERATOR - 383)) | (1 << (MySQLParser.LESS_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.LESS_THAN_OPERATOR - 383)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2700;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2701;
                this.values();
                this.state = 2702;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertStatement;
    return this;
}

InsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementContext.prototype.constructor = InsertStatementContext;

InsertStatementContext.prototype.INSERT_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
};

InsertStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

InsertStatementContext.prototype.insertFromConstructor = function() {
    return this.getTypedRuleContext(InsertFromConstructorContext,0);
};

InsertStatementContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

InsertStatementContext.prototype.updateList = function() {
    return this.getTypedRuleContext(UpdateListContext,0);
};

InsertStatementContext.prototype.insertQueryExpression = function() {
    return this.getTypedRuleContext(InsertQueryExpressionContext,0);
};

InsertStatementContext.prototype.insertLockOption = function() {
    return this.getTypedRuleContext(InsertLockOptionContext,0);
};

InsertStatementContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

InsertStatementContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

InsertStatementContext.prototype.usePartition = function() {
    return this.getTypedRuleContext(UsePartitionContext,0);
};

InsertStatementContext.prototype.insertUpdateList = function() {
    return this.getTypedRuleContext(InsertUpdateListContext,0);
};

InsertStatementContext.prototype.valuesReference = function() {
    return this.getTypedRuleContext(ValuesReferenceContext,0);
};

InsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertStatement(this);
	}
};

InsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertStatement(this);
	}
};

InsertStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertStatementContext = InsertStatementContext;

MySQLParser.prototype.insertStatement = function() {

    var localctx = new InsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, MySQLParser.RULE_insertStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2708;
        this.match(MySQLParser.INSERT_SYMBOL);
        this.state = 2710;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        if(la_===1) {
            this.state = 2709;
            this.insertLockOption();

        }
        this.state = 2713;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
        if(la_===1) {
            this.state = 2712;
            this.match(MySQLParser.IGNORE_SYMBOL);

        }
        this.state = 2716;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
        if(la_===1) {
            this.state = 2715;
            this.match(MySQLParser.INTO_SYMBOL);

        }
        this.state = 2718;
        this.tableRef();
        this.state = 2720;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
        if(la_===1) {
            this.state = 2719;
            this.usePartition();

        }
        this.state = 2734;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2722;
            this.insertFromConstructor();
            this.state = 2725;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
            if(la_===1) {
                this.state = 2723;
                if (!(  serverVersion >= 80018)) {
                    throw new antlr4.error.FailedPredicateException(this, " serverVersion >= 80018");
                }
                this.state = 2724;
                this.valuesReference();

            }
            break;

        case 2:
            this.state = 2727;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 2728;
            this.updateList();
            this.state = 2731;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
            if(la_===1) {
                this.state = 2729;
                if (!(  serverVersion >= 80018)) {
                    throw new antlr4.error.FailedPredicateException(this, " serverVersion >= 80018");
                }
                this.state = 2730;
                this.valuesReference();

            }
            break;

        case 3:
            this.state = 2733;
            this.insertQueryExpression();
            break;

        }
        this.state = 2737;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ON_SYMBOL) {
            this.state = 2736;
            this.insertUpdateList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertLockOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertLockOption;
    return this;
}

InsertLockOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertLockOptionContext.prototype.constructor = InsertLockOptionContext;

InsertLockOptionContext.prototype.LOW_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
};

InsertLockOptionContext.prototype.DELAYED_SYMBOL = function() {
    return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
};

InsertLockOptionContext.prototype.HIGH_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
};

InsertLockOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertLockOption(this);
	}
};

InsertLockOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertLockOption(this);
	}
};

InsertLockOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertLockOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertLockOptionContext = InsertLockOptionContext;

MySQLParser.prototype.insertLockOption = function() {

    var localctx = new InsertLockOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, MySQLParser.RULE_insertLockOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2739;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DELAYED_SYMBOL || _la===MySQLParser.HIGH_PRIORITY_SYMBOL || _la===MySQLParser.LOW_PRIORITY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertFromConstructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertFromConstructor;
    return this;
}

InsertFromConstructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertFromConstructorContext.prototype.constructor = InsertFromConstructorContext;

InsertFromConstructorContext.prototype.insertValues = function() {
    return this.getTypedRuleContext(InsertValuesContext,0);
};

InsertFromConstructorContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

InsertFromConstructorContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

InsertFromConstructorContext.prototype.fields = function() {
    return this.getTypedRuleContext(FieldsContext,0);
};

InsertFromConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertFromConstructor(this);
	}
};

InsertFromConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertFromConstructor(this);
	}
};

InsertFromConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertFromConstructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertFromConstructorContext = InsertFromConstructorContext;

MySQLParser.prototype.insertFromConstructor = function() {

    var localctx = new InsertFromConstructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, MySQLParser.RULE_insertFromConstructor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2746;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 2741;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2743;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
            if(la_===1) {
                this.state = 2742;
                this.fields();

            }
            this.state = 2745;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        }

        this.state = 2748;
        this.insertValues();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fields;
    return this;
}

FieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldsContext.prototype.constructor = FieldsContext;

FieldsContext.prototype.insertIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InsertIdentifierContext);
    } else {
        return this.getTypedRuleContext(InsertIdentifierContext,i);
    }
};

FieldsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


FieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFields(this);
	}
};

FieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFields(this);
	}
};

FieldsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFields(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldsContext = FieldsContext;

MySQLParser.prototype.fields = function() {

    var localctx = new FieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, MySQLParser.RULE_fields);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2750;
        this.insertIdentifier();
        this.state = 2755;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 2751;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 2752;
            this.insertIdentifier();
            this.state = 2757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertValues;
    return this;
}

InsertValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertValuesContext.prototype.constructor = InsertValuesContext;

InsertValuesContext.prototype.valueList = function() {
    return this.getTypedRuleContext(ValueListContext,0);
};

InsertValuesContext.prototype.VALUES_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
};

InsertValuesContext.prototype.VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
};

InsertValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertValues(this);
	}
};

InsertValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertValues(this);
	}
};

InsertValuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertValues(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertValuesContext = InsertValuesContext;

MySQLParser.prototype.insertValues = function() {

    var localctx = new InsertValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, MySQLParser.RULE_insertValues);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2758;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.VALUE_SYMBOL || _la===MySQLParser.VALUES_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2759;
        this.valueList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertQueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertQueryExpression;
    return this;
}

InsertQueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertQueryExpressionContext.prototype.constructor = InsertQueryExpressionContext;

InsertQueryExpressionContext.prototype.queryExpressionOrParens = function() {
    return this.getTypedRuleContext(QueryExpressionOrParensContext,0);
};

InsertQueryExpressionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

InsertQueryExpressionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

InsertQueryExpressionContext.prototype.fields = function() {
    return this.getTypedRuleContext(FieldsContext,0);
};

InsertQueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertQueryExpression(this);
	}
};

InsertQueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertQueryExpression(this);
	}
};

InsertQueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertQueryExpressionContext = InsertQueryExpressionContext;

MySQLParser.prototype.insertQueryExpression = function() {

    var localctx = new InsertQueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, MySQLParser.RULE_insertQueryExpression);
    try {
        this.state = 2768;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2761;
            this.queryExpressionOrParens();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2762;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2764;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
            if(la_===1) {
                this.state = 2763;
                this.fields();

            }
            this.state = 2766;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 2767;
            this.queryExpressionOrParens();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_valueList;
    return this;
}

ValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueListContext.prototype.constructor = ValueListContext;

ValueListContext.prototype.OPEN_PAR_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
    } else {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
    }
};


ValueListContext.prototype.CLOSE_PAR_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
    } else {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
    }
};


ValueListContext.prototype.values = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValuesContext);
    } else {
        return this.getTypedRuleContext(ValuesContext,i);
    }
};

ValueListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterValueList(this);
	}
};

ValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitValueList(this);
	}
};

ValueListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitValueList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ValueListContext = ValueListContext;

MySQLParser.prototype.valueList = function() {

    var localctx = new ValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, MySQLParser.RULE_valueList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2770;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 2772;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
        if(la_===1) {
            this.state = 2771;
            this.values();

        }
        this.state = 2774;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        this.state = 2783;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,256,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2775;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 2776;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2778;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
                if(la_===1) {
                    this.state = 2777;
                    this.values();

                }
                this.state = 2780;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL); 
            }
            this.state = 2785;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,256,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_values;
    return this;
}

ValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesContext.prototype.constructor = ValuesContext;

ValuesContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ValuesContext.prototype.DEFAULT_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
    } else {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
    }
};


ValuesContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterValues(this);
	}
};

ValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitValues(this);
	}
};

ValuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitValues(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ValuesContext = ValuesContext;

MySQLParser.prototype.values = function() {

    var localctx = new ValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, MySQLParser.RULE_values);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2788;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2786;
            this.expr(0);
            break;

        case 2:
            this.state = 2787;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        }
        this.state = 2797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 2790;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 2793;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2791;
                this.expr(0);
                break;

            case 2:
                this.state = 2792;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                break;

            }
            this.state = 2799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_valuesReference;
    return this;
}

ValuesReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesReferenceContext.prototype.constructor = ValuesReferenceContext;

ValuesReferenceContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

ValuesReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ValuesReferenceContext.prototype.columnInternalRefList = function() {
    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
};

ValuesReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterValuesReference(this);
	}
};

ValuesReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitValuesReference(this);
	}
};

ValuesReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitValuesReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ValuesReferenceContext = ValuesReferenceContext;

MySQLParser.prototype.valuesReference = function() {

    var localctx = new ValuesReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, MySQLParser.RULE_valuesReference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2800;
        this.match(MySQLParser.AS_SYMBOL);
        this.state = 2801;
        this.identifier();
        this.state = 2803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 2802;
            this.columnInternalRefList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertUpdateListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertUpdateList;
    return this;
}

InsertUpdateListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertUpdateListContext.prototype.constructor = InsertUpdateListContext;

InsertUpdateListContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

InsertUpdateListContext.prototype.DUPLICATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
};

InsertUpdateListContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

InsertUpdateListContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

InsertUpdateListContext.prototype.updateList = function() {
    return this.getTypedRuleContext(UpdateListContext,0);
};

InsertUpdateListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertUpdateList(this);
	}
};

InsertUpdateListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertUpdateList(this);
	}
};

InsertUpdateListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertUpdateList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertUpdateListContext = InsertUpdateListContext;

MySQLParser.prototype.insertUpdateList = function() {

    var localctx = new InsertUpdateListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, MySQLParser.RULE_insertUpdateList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2805;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 2806;
        this.match(MySQLParser.DUPLICATE_SYMBOL);
        this.state = 2807;
        this.match(MySQLParser.KEY_SYMBOL);
        this.state = 2808;
        this.match(MySQLParser.UPDATE_SYMBOL);
        this.state = 2809;
        this.updateList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadStatement;
    return this;
}

LoadStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadStatementContext.prototype.constructor = LoadStatementContext;

LoadStatementContext.prototype.LOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
};

LoadStatementContext.prototype.dataOrXml = function() {
    return this.getTypedRuleContext(DataOrXmlContext,0);
};

LoadStatementContext.prototype.INFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
};

LoadStatementContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

LoadStatementContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

LoadStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

LoadStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

LoadStatementContext.prototype.loadDataFileTail = function() {
    return this.getTypedRuleContext(LoadDataFileTailContext,0);
};

LoadStatementContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

LoadStatementContext.prototype.usePartition = function() {
    return this.getTypedRuleContext(UsePartitionContext,0);
};

LoadStatementContext.prototype.charsetClause = function() {
    return this.getTypedRuleContext(CharsetClauseContext,0);
};

LoadStatementContext.prototype.xmlRowsIdentifiedBy = function() {
    return this.getTypedRuleContext(XmlRowsIdentifiedByContext,0);
};

LoadStatementContext.prototype.fieldsClause = function() {
    return this.getTypedRuleContext(FieldsClauseContext,0);
};

LoadStatementContext.prototype.linesClause = function() {
    return this.getTypedRuleContext(LinesClauseContext,0);
};

LoadStatementContext.prototype.LOW_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
};

LoadStatementContext.prototype.CONCURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
};

LoadStatementContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

LoadStatementContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

LoadStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadStatement(this);
	}
};

LoadStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadStatement(this);
	}
};

LoadStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadStatementContext = LoadStatementContext;

MySQLParser.prototype.loadStatement = function() {

    var localctx = new LoadStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, MySQLParser.RULE_loadStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2811;
        this.match(MySQLParser.LOAD_SYMBOL);
        this.state = 2812;
        this.dataOrXml();
        this.state = 2814;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CONCURRENT_SYMBOL || _la===MySQLParser.LOW_PRIORITY_SYMBOL) {
            this.state = 2813;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CONCURRENT_SYMBOL || _la===MySQLParser.LOW_PRIORITY_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOCAL_SYMBOL) {
            this.state = 2816;
            this.match(MySQLParser.LOCAL_SYMBOL);
        }

        this.state = 2819;
        this.match(MySQLParser.INFILE_SYMBOL);
        this.state = 2820;
        this.textLiteral();
        this.state = 2822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.REPLACE_SYMBOL) {
            this.state = 2821;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.REPLACE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2824;
        this.match(MySQLParser.INTO_SYMBOL);
        this.state = 2825;
        this.match(MySQLParser.TABLE_SYMBOL);
        this.state = 2826;
        this.tableRef();
        this.state = 2828;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
        if(la_===1) {
            this.state = 2827;
            this.usePartition();

        }
        this.state = 2831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CHARSET_SYMBOL || _la===MySQLParser.CHAR_SYMBOL) {
            this.state = 2830;
            this.charsetClause();
        }

        this.state = 2834;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ROWS_SYMBOL) {
            this.state = 2833;
            this.xmlRowsIdentifiedBy();
        }

        this.state = 2837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COLUMNS_SYMBOL) {
            this.state = 2836;
            this.fieldsClause();
        }

        this.state = 2840;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LINES_SYMBOL) {
            this.state = 2839;
            this.linesClause();
        }

        this.state = 2842;
        this.loadDataFileTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataOrXmlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dataOrXml;
    return this;
}

DataOrXmlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataOrXmlContext.prototype.constructor = DataOrXmlContext;

DataOrXmlContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

DataOrXmlContext.prototype.XML_SYMBOL = function() {
    return this.getToken(MySQLParser.XML_SYMBOL, 0);
};

DataOrXmlContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDataOrXml(this);
	}
};

DataOrXmlContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDataOrXml(this);
	}
};

DataOrXmlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDataOrXml(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DataOrXmlContext = DataOrXmlContext;

MySQLParser.prototype.dataOrXml = function() {

    var localctx = new DataOrXmlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, MySQLParser.RULE_dataOrXml);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2844;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DATA_SYMBOL || _la===MySQLParser.XML_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XmlRowsIdentifiedByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xmlRowsIdentifiedBy;
    return this;
}

XmlRowsIdentifiedByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XmlRowsIdentifiedByContext.prototype.constructor = XmlRowsIdentifiedByContext;

XmlRowsIdentifiedByContext.prototype.ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
};

XmlRowsIdentifiedByContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

XmlRowsIdentifiedByContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

XmlRowsIdentifiedByContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

XmlRowsIdentifiedByContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXmlRowsIdentifiedBy(this);
	}
};

XmlRowsIdentifiedByContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXmlRowsIdentifiedBy(this);
	}
};

XmlRowsIdentifiedByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXmlRowsIdentifiedBy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XmlRowsIdentifiedByContext = XmlRowsIdentifiedByContext;

MySQLParser.prototype.xmlRowsIdentifiedBy = function() {

    var localctx = new XmlRowsIdentifiedByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, MySQLParser.RULE_xmlRowsIdentifiedBy);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2846;
        this.match(MySQLParser.ROWS_SYMBOL);
        this.state = 2847;
        this.match(MySQLParser.IDENTIFIED_SYMBOL);
        this.state = 2848;
        this.match(MySQLParser.BY_SYMBOL);
        this.state = 2849;
        this.textString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadDataFileTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadDataFileTail;
    return this;
}

LoadDataFileTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadDataFileTailContext.prototype.constructor = LoadDataFileTailContext;

LoadDataFileTailContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

LoadDataFileTailContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

LoadDataFileTailContext.prototype.loadDataFileTargetList = function() {
    return this.getTypedRuleContext(LoadDataFileTargetListContext,0);
};

LoadDataFileTailContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

LoadDataFileTailContext.prototype.updateList = function() {
    return this.getTypedRuleContext(UpdateListContext,0);
};

LoadDataFileTailContext.prototype.LINES_SYMBOL = function() {
    return this.getToken(MySQLParser.LINES_SYMBOL, 0);
};

LoadDataFileTailContext.prototype.ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
};

LoadDataFileTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadDataFileTail(this);
	}
};

LoadDataFileTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadDataFileTail(this);
	}
};

LoadDataFileTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadDataFileTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadDataFileTailContext = LoadDataFileTailContext;

MySQLParser.prototype.loadDataFileTail = function() {

    var localctx = new LoadDataFileTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, MySQLParser.RULE_loadDataFileTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE_SYMBOL) {
            this.state = 2851;
            this.match(MySQLParser.IGNORE_SYMBOL);
            this.state = 2852;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 2853;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ROWS_SYMBOL || _la===MySQLParser.LINES_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2857;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 2856;
            this.loadDataFileTargetList();
        }

        this.state = 2861;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SET_SYMBOL) {
            this.state = 2859;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 2860;
            this.updateList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadDataFileTargetListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadDataFileTargetList;
    return this;
}

LoadDataFileTargetListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadDataFileTargetListContext.prototype.constructor = LoadDataFileTargetListContext;

LoadDataFileTargetListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

LoadDataFileTargetListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

LoadDataFileTargetListContext.prototype.fieldOrVariableList = function() {
    return this.getTypedRuleContext(FieldOrVariableListContext,0);
};

LoadDataFileTargetListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadDataFileTargetList(this);
	}
};

LoadDataFileTargetListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadDataFileTargetList(this);
	}
};

LoadDataFileTargetListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadDataFileTargetList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadDataFileTargetListContext = LoadDataFileTargetListContext;

MySQLParser.prototype.loadDataFileTargetList = function() {

    var localctx = new LoadDataFileTargetListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, MySQLParser.RULE_loadDataFileTargetList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2863;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 2865;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
        if(la_===1) {
            this.state = 2864;
            this.fieldOrVariableList();

        }
        this.state = 2867;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldOrVariableListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldOrVariableList;
    return this;
}

FieldOrVariableListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldOrVariableListContext.prototype.constructor = FieldOrVariableListContext;

FieldOrVariableListContext.prototype.columnRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnRefContext);
    } else {
        return this.getTypedRuleContext(ColumnRefContext,i);
    }
};

FieldOrVariableListContext.prototype.userVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserVariableContext);
    } else {
        return this.getTypedRuleContext(UserVariableContext,i);
    }
};

FieldOrVariableListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


FieldOrVariableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldOrVariableList(this);
	}
};

FieldOrVariableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldOrVariableList(this);
	}
};

FieldOrVariableListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldOrVariableList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldOrVariableListContext = FieldOrVariableListContext;

MySQLParser.prototype.fieldOrVariableList = function() {

    var localctx = new FieldOrVariableListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, MySQLParser.RULE_fieldOrVariableList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2871;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2869;
            this.columnRef();
            break;

        case 2:
            this.state = 2870;
            this.userVariable();
            break;

        }
        this.state = 2880;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 2873;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 2876;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2874;
                this.columnRef();
                break;

            case 2:
                this.state = 2875;
                this.userVariable();
                break;

            }
            this.state = 2882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplaceStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replaceStatement;
    return this;
}

ReplaceStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplaceStatementContext.prototype.constructor = ReplaceStatementContext;

ReplaceStatementContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

ReplaceStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

ReplaceStatementContext.prototype.insertFromConstructor = function() {
    return this.getTypedRuleContext(InsertFromConstructorContext,0);
};

ReplaceStatementContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

ReplaceStatementContext.prototype.updateList = function() {
    return this.getTypedRuleContext(UpdateListContext,0);
};

ReplaceStatementContext.prototype.insertQueryExpression = function() {
    return this.getTypedRuleContext(InsertQueryExpressionContext,0);
};

ReplaceStatementContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

ReplaceStatementContext.prototype.usePartition = function() {
    return this.getTypedRuleContext(UsePartitionContext,0);
};

ReplaceStatementContext.prototype.LOW_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
};

ReplaceStatementContext.prototype.DELAYED_SYMBOL = function() {
    return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
};

ReplaceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReplaceStatement(this);
	}
};

ReplaceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReplaceStatement(this);
	}
};

ReplaceStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReplaceStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReplaceStatementContext = ReplaceStatementContext;

MySQLParser.prototype.replaceStatement = function() {

    var localctx = new ReplaceStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, MySQLParser.RULE_replaceStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2883;
        this.match(MySQLParser.REPLACE_SYMBOL);
        this.state = 2885;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
        if(la_===1) {
            this.state = 2884;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DELAYED_SYMBOL || _la===MySQLParser.LOW_PRIORITY_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 2888;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
        if(la_===1) {
            this.state = 2887;
            this.match(MySQLParser.INTO_SYMBOL);

        }
        this.state = 2890;
        this.tableRef();
        this.state = 2892;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
        if(la_===1) {
            this.state = 2891;
            this.usePartition();

        }
        this.state = 2898;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2894;
            this.insertFromConstructor();
            break;

        case 2:
            this.state = 2895;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 2896;
            this.updateList();
            break;

        case 3:
            this.state = 2897;
            this.insertQueryExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectStatement;
    return this;
}

SelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementContext.prototype.constructor = SelectStatementContext;

SelectStatementContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

SelectStatementContext.prototype.queryExpressionParens = function() {
    return this.getTypedRuleContext(QueryExpressionParensContext,0);
};

SelectStatementContext.prototype.selectStatementWithInto = function() {
    return this.getTypedRuleContext(SelectStatementWithIntoContext,0);
};

SelectStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectStatement(this);
	}
};

SelectStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectStatement(this);
	}
};

SelectStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectStatementContext = SelectStatementContext;

MySQLParser.prototype.selectStatement = function() {

    var localctx = new SelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, MySQLParser.RULE_selectStatement);
    try {
        this.state = 2903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2900;
            this.queryExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2901;
            this.queryExpressionParens();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2902;
            this.selectStatementWithInto();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementWithIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectStatementWithInto;
    return this;
}

SelectStatementWithIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementWithIntoContext.prototype.constructor = SelectStatementWithIntoContext;

SelectStatementWithIntoContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SelectStatementWithIntoContext.prototype.selectStatementWithInto = function() {
    return this.getTypedRuleContext(SelectStatementWithIntoContext,0);
};

SelectStatementWithIntoContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SelectStatementWithIntoContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

SelectStatementWithIntoContext.prototype.intoClause = function() {
    return this.getTypedRuleContext(IntoClauseContext,0);
};

SelectStatementWithIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectStatementWithInto(this);
	}
};

SelectStatementWithIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectStatementWithInto(this);
	}
};

SelectStatementWithIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectStatementWithInto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectStatementWithIntoContext = SelectStatementWithIntoContext;

MySQLParser.prototype.selectStatementWithInto = function() {

    var localctx = new SelectStatementWithIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, MySQLParser.RULE_selectStatementWithInto);
    try {
        this.state = 2912;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2905;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 2906;
            this.selectStatementWithInto();
            this.state = 2907;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2909;
            this.queryExpression();
            this.state = 2910;
            this.intoClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_queryExpression;
    return this;
}

QueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

QueryExpressionContext.prototype.queryExpressionBody = function() {
    return this.getTypedRuleContext(QueryExpressionBodyContext,0);
};

QueryExpressionContext.prototype.queryExpressionParens = function() {
    return this.getTypedRuleContext(QueryExpressionParensContext,0);
};

QueryExpressionContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

QueryExpressionContext.prototype.procedureAnalyseClause = function() {
    return this.getTypedRuleContext(ProcedureAnalyseClauseContext,0);
};

QueryExpressionContext.prototype.lockingClause = function() {
    return this.getTypedRuleContext(LockingClauseContext,0);
};

QueryExpressionContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

QueryExpressionContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryExpression(this);
	}
};

QueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryExpression(this);
	}
};

QueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QueryExpressionContext = QueryExpressionContext;

MySQLParser.prototype.queryExpression = function() {

    var localctx = new QueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, MySQLParser.RULE_queryExpression);
    var _la = 0; // Token type
    try {
        this.state = 2948;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2916;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
            if(la_===1) {
                this.state = 2914;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 2915;
                this.withClause();

            }
            this.state = 2933;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2918;
                this.queryExpressionBody(0);
                this.state = 2920;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
                if(la_===1) {
                    this.state = 2919;
                    this.orderClause();

                }
                this.state = 2923;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
                if(la_===1) {
                    this.state = 2922;
                    this.limitClause();

                }
                break;

            case 2:
                this.state = 2925;
                this.queryExpressionParens();
                this.state = 2931;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.ORDER_SYMBOL:
                    this.state = 2926;
                    this.orderClause();
                    this.state = 2928;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
                    if(la_===1) {
                        this.state = 2927;
                        this.limitClause();

                    }
                    break;
                case MySQLParser.LIMIT_SYMBOL:
                    this.state = 2930;
                    this.limitClause();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            this.state = 2937;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
            if(la_===1) {
                this.state = 2935;
                if (!( serverVersion < 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
                }
                this.state = 2936;
                this.procedureAnalyseClause();

            }
            this.state = 2940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL || _la===MySQLParser.LOCK_SYMBOL) {
                this.state = 2939;
                this.lockingClause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2942;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 2943;
            this.withClause();
            this.state = 2944;
            this.queryExpressionParens();
            this.state = 2946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL || _la===MySQLParser.LOCK_SYMBOL) {
                this.state = 2945;
                this.lockingClause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_queryExpressionBody;
    return this;
}

QueryExpressionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionBodyContext.prototype.constructor = QueryExpressionBodyContext;

QueryExpressionBodyContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

QueryExpressionBodyContext.prototype.queryExpressionParens = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryExpressionParensContext);
    } else {
        return this.getTypedRuleContext(QueryExpressionParensContext,i);
    }
};

QueryExpressionBodyContext.prototype.UNION_SYMBOL = function() {
    return this.getToken(MySQLParser.UNION_SYMBOL, 0);
};

QueryExpressionBodyContext.prototype.unionOption = function() {
    return this.getTypedRuleContext(UnionOptionContext,0);
};

QueryExpressionBodyContext.prototype.queryExpressionBody = function() {
    return this.getTypedRuleContext(QueryExpressionBodyContext,0);
};

QueryExpressionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryExpressionBody(this);
	}
};

QueryExpressionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryExpressionBody(this);
	}
};

QueryExpressionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryExpressionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.queryExpressionBody = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryExpressionBodyContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 274;
    this.enterRecursionRule(localctx, 274, MySQLParser.RULE_queryExpressionBody, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2961;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SELECT_SYMBOL:
            this.state = 2951;
            this.querySpecification();
            break;
        case MySQLParser.OPEN_PAR_SYMBOL:
            this.state = 2952;
            this.queryExpressionParens();
            this.state = 2953;
            this.match(MySQLParser.UNION_SYMBOL);
            this.state = 2955;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALL_SYMBOL || _la===MySQLParser.DISTINCT_SYMBOL) {
                this.state = 2954;
                this.unionOption();
            }

            this.state = 2959;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.SELECT_SYMBOL:
                this.state = 2957;
                this.querySpecification();
                break;
            case MySQLParser.OPEN_PAR_SYMBOL:
                this.state = 2958;
                this.queryExpressionParens();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2974;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,297,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new QueryExpressionBodyContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_queryExpressionBody);
                this.state = 2963;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 2964;
                this.match(MySQLParser.UNION_SYMBOL);
                this.state = 2966;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ALL_SYMBOL || _la===MySQLParser.DISTINCT_SYMBOL) {
                    this.state = 2965;
                    this.unionOption();
                }

                this.state = 2970;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.SELECT_SYMBOL:
                    this.state = 2968;
                    this.querySpecification();
                    break;
                case MySQLParser.OPEN_PAR_SYMBOL:
                    this.state = 2969;
                    this.queryExpressionParens();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2976;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,297,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function QueryExpressionParensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_queryExpressionParens;
    return this;
}

QueryExpressionParensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionParensContext.prototype.constructor = QueryExpressionParensContext;

QueryExpressionParensContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

QueryExpressionParensContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

QueryExpressionParensContext.prototype.queryExpressionParens = function() {
    return this.getTypedRuleContext(QueryExpressionParensContext,0);
};

QueryExpressionParensContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryExpressionParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryExpressionParens(this);
	}
};

QueryExpressionParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryExpressionParens(this);
	}
};

QueryExpressionParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryExpressionParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QueryExpressionParensContext = QueryExpressionParensContext;

MySQLParser.prototype.queryExpressionParens = function() {

    var localctx = new QueryExpressionParensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, MySQLParser.RULE_queryExpressionParens);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2977;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 2980;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2978;
            this.queryExpressionParens();
            break;

        case 2:
            this.state = 2979;
            this.queryExpression();
            break;

        }
        this.state = 2982;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_querySpecification;
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.SELECT_SYMBOL = function() {
    return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
};

QuerySpecificationContext.prototype.selectItemList = function() {
    return this.getTypedRuleContext(SelectItemListContext,0);
};

QuerySpecificationContext.prototype.selectOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectOptionContext);
    } else {
        return this.getTypedRuleContext(SelectOptionContext,i);
    }
};

QuerySpecificationContext.prototype.intoClause = function() {
    return this.getTypedRuleContext(IntoClauseContext,0);
};

QuerySpecificationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

QuerySpecificationContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

QuerySpecificationContext.prototype.groupByClause = function() {
    return this.getTypedRuleContext(GroupByClauseContext,0);
};

QuerySpecificationContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

QuerySpecificationContext.prototype.windowClause = function() {
    return this.getTypedRuleContext(WindowClauseContext,0);
};

QuerySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQuerySpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QuerySpecificationContext = QuerySpecificationContext;

MySQLParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, MySQLParser.RULE_querySpecification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2984;
        this.match(MySQLParser.SELECT_SYMBOL);
        this.state = 2988;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,299,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2985;
                this.selectOption(); 
            }
            this.state = 2990;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,299,this._ctx);
        }

        this.state = 2991;
        this.selectItemList();
        this.state = 2993;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
        if(la_===1) {
            this.state = 2992;
            this.intoClause();

        }
        this.state = 2996;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
        if(la_===1) {
            this.state = 2995;
            this.fromClause();

        }
        this.state = 2999;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        if(la_===1) {
            this.state = 2998;
            this.whereClause();

        }
        this.state = 3002;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
        if(la_===1) {
            this.state = 3001;
            this.groupByClause();

        }
        this.state = 3005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
        if(la_===1) {
            this.state = 3004;
            this.havingClause();

        }
        this.state = 3009;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
        if(la_===1) {
            this.state = 3007;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 3008;
            this.windowClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.queryExpressionParens = function() {
    return this.getTypedRuleContext(QueryExpressionParensContext,0);
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubquery(this);
	}
};

SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SubqueryContext = SubqueryContext;

MySQLParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, MySQLParser.RULE_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3011;
        this.queryExpressionParens();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_querySpecOption;
    return this;
}

QuerySpecOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecOptionContext.prototype.constructor = QuerySpecOptionContext;

QuerySpecOptionContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.DISTINCT_SYMBOL = function() {
    return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.STRAIGHT_JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.HIGH_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.SQL_SMALL_RESULT_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.SQL_BIG_RESULT_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.SQL_BUFFER_RESULT_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.SQL_CALC_FOUND_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
};

QuerySpecOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQuerySpecOption(this);
	}
};

QuerySpecOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQuerySpecOption(this);
	}
};

QuerySpecOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQuerySpecOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QuerySpecOptionContext = QuerySpecOptionContext;

MySQLParser.prototype.querySpecOption = function() {

    var localctx = new QuerySpecOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, MySQLParser.RULE_querySpecOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3013;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.SQL_BUFFER_RESULT_SYMBOL || _la===MySQLParser.ALL_SYMBOL || _la===MySQLParser.DISTINCT_SYMBOL || _la===MySQLParser.HIGH_PRIORITY_SYMBOL || ((((_la - 629)) & ~0x1f) == 0 && ((1 << (_la - 629)) & ((1 << (MySQLParser.SQL_BIG_RESULT_SYMBOL - 629)) | (1 << (MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL - 629)) | (1 << (MySQLParser.SQL_SMALL_RESULT_SYMBOL - 629)) | (1 << (MySQLParser.STRAIGHT_JOIN_SYMBOL - 629)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_limitClause;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT_SYMBOL = function() {
    return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
};

LimitClauseContext.prototype.limitOptions = function() {
    return this.getTypedRuleContext(LimitOptionsContext,0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLimitClause(this);
	}
};

LimitClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLimitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LimitClauseContext = LimitClauseContext;

MySQLParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, MySQLParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3015;
        this.match(MySQLParser.LIMIT_SYMBOL);
        this.state = 3016;
        this.limitOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleLimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleLimitClause;
    return this;
}

SimpleLimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleLimitClauseContext.prototype.constructor = SimpleLimitClauseContext;

SimpleLimitClauseContext.prototype.LIMIT_SYMBOL = function() {
    return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
};

SimpleLimitClauseContext.prototype.limitOption = function() {
    return this.getTypedRuleContext(LimitOptionContext,0);
};

SimpleLimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleLimitClause(this);
	}
};

SimpleLimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleLimitClause(this);
	}
};

SimpleLimitClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleLimitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleLimitClauseContext = SimpleLimitClauseContext;

MySQLParser.prototype.simpleLimitClause = function() {

    var localctx = new SimpleLimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, MySQLParser.RULE_simpleLimitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3018;
        this.match(MySQLParser.LIMIT_SYMBOL);
        this.state = 3019;
        this.limitOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_limitOptions;
    return this;
}

LimitOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitOptionsContext.prototype.constructor = LimitOptionsContext;

LimitOptionsContext.prototype.limitOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LimitOptionContext);
    } else {
        return this.getTypedRuleContext(LimitOptionContext,i);
    }
};

LimitOptionsContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

LimitOptionsContext.prototype.OFFSET_SYMBOL = function() {
    return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
};

LimitOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLimitOptions(this);
	}
};

LimitOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLimitOptions(this);
	}
};

LimitOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLimitOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LimitOptionsContext = LimitOptionsContext;

MySQLParser.prototype.limitOptions = function() {

    var localctx = new LimitOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, MySQLParser.RULE_limitOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3021;
        this.limitOption();
        this.state = 3024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
        if(la_===1) {
            this.state = 3022;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.OFFSET_SYMBOL || _la===MySQLParser.COMMA_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3023;
            this.limitOption();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_limitOption;
    return this;
}

LimitOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitOptionContext.prototype.constructor = LimitOptionContext;

LimitOptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LimitOptionContext.prototype.PARAM_MARKER = function() {
    return this.getToken(MySQLParser.PARAM_MARKER, 0);
};

LimitOptionContext.prototype.ULONGLONG_NUMBER = function() {
    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
};

LimitOptionContext.prototype.LONG_NUMBER = function() {
    return this.getToken(MySQLParser.LONG_NUMBER, 0);
};

LimitOptionContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

LimitOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLimitOption(this);
	}
};

LimitOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLimitOption(this);
	}
};

LimitOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLimitOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LimitOptionContext = LimitOptionContext;

MySQLParser.prototype.limitOption = function() {

    var localctx = new LimitOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, MySQLParser.RULE_limitOption);
    var _la = 0; // Token type
    try {
        this.state = 3028;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3026;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3027;
            _la = this._input.LA(1);
            if(!(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la===MySQLParser.PARAM_MARKER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntoClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_intoClause;
    return this;
}

IntoClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntoClauseContext.prototype.constructor = IntoClauseContext;

IntoClauseContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

IntoClauseContext.prototype.OUTFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
};

IntoClauseContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

IntoClauseContext.prototype.DUMPFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
};

IntoClauseContext.prototype.textOrIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextOrIdentifierContext);
    } else {
        return this.getTypedRuleContext(TextOrIdentifierContext,i);
    }
};

IntoClauseContext.prototype.userVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserVariableContext);
    } else {
        return this.getTypedRuleContext(UserVariableContext,i);
    }
};

IntoClauseContext.prototype.charsetClause = function() {
    return this.getTypedRuleContext(CharsetClauseContext,0);
};

IntoClauseContext.prototype.fieldsClause = function() {
    return this.getTypedRuleContext(FieldsClauseContext,0);
};

IntoClauseContext.prototype.linesClause = function() {
    return this.getTypedRuleContext(LinesClauseContext,0);
};

IntoClauseContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


IntoClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntoClause(this);
	}
};

IntoClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntoClause(this);
	}
};

IntoClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntoClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IntoClauseContext = IntoClauseContext;

MySQLParser.prototype.intoClause = function() {

    var localctx = new IntoClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, MySQLParser.RULE_intoClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3030;
        this.match(MySQLParser.INTO_SYMBOL);
        this.state = 3058;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3031;
            this.match(MySQLParser.OUTFILE_SYMBOL);
            this.state = 3032;
            this.textStringLiteral();
            this.state = 3034;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
            if(la_===1) {
                this.state = 3033;
                this.charsetClause();

            }
            this.state = 3037;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
            if(la_===1) {
                this.state = 3036;
                this.fieldsClause();

            }
            this.state = 3040;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
            if(la_===1) {
                this.state = 3039;
                this.linesClause();

            }
            break;

        case 2:
            this.state = 3042;
            this.match(MySQLParser.DUMPFILE_SYMBOL);
            this.state = 3043;
            this.textStringLiteral();
            break;

        case 3:
            this.state = 3046;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3044;
                this.textOrIdentifier();
                break;

            case 2:
                this.state = 3045;
                this.userVariable();
                break;

            }
            this.state = 3055;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,313,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3048;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 3051;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 3049;
                        this.textOrIdentifier();
                        break;

                    case 2:
                        this.state = 3050;
                        this.userVariable();
                        break;

                    } 
                }
                this.state = 3057;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,313,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureAnalyseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_procedureAnalyseClause;
    return this;
}

ProcedureAnalyseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureAnalyseClauseContext.prototype.constructor = ProcedureAnalyseClauseContext;

ProcedureAnalyseClauseContext.prototype.PROCEDURE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
};

ProcedureAnalyseClauseContext.prototype.ANALYSE_SYMBOL = function() {
    return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0);
};

ProcedureAnalyseClauseContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ProcedureAnalyseClauseContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ProcedureAnalyseClauseContext.prototype.INT_NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.INT_NUMBER);
    } else {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
};


ProcedureAnalyseClauseContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

ProcedureAnalyseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProcedureAnalyseClause(this);
	}
};

ProcedureAnalyseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProcedureAnalyseClause(this);
	}
};

ProcedureAnalyseClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProcedureAnalyseClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProcedureAnalyseClauseContext = ProcedureAnalyseClauseContext;

MySQLParser.prototype.procedureAnalyseClause = function() {

    var localctx = new ProcedureAnalyseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, MySQLParser.RULE_procedureAnalyseClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3060;
        this.match(MySQLParser.PROCEDURE_SYMBOL);
        this.state = 3061;
        this.match(MySQLParser.ANALYSE_SYMBOL);
        this.state = 3062;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3068;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INT_NUMBER) {
            this.state = 3063;
            this.match(MySQLParser.INT_NUMBER);
            this.state = 3066;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 3064;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3065;
                this.match(MySQLParser.INT_NUMBER);
            }

        }

        this.state = 3070;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING_SYMBOL = function() {
    return this.getToken(MySQLParser.HAVING_SYMBOL, 0);
};

HavingClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHavingClause(this);
	}
};

HavingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHavingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HavingClauseContext = HavingClauseContext;

MySQLParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, MySQLParser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3072;
        this.match(MySQLParser.HAVING_SYMBOL);
        this.state = 3073;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowClause;
    return this;
}

WindowClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowClauseContext.prototype.constructor = WindowClauseContext;

WindowClauseContext.prototype.WINDOW_SYMBOL = function() {
    return this.getToken(MySQLParser.WINDOW_SYMBOL, 0);
};

WindowClauseContext.prototype.windowDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WindowDefinitionContext);
    } else {
        return this.getTypedRuleContext(WindowDefinitionContext,i);
    }
};

WindowClauseContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


WindowClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowClause(this);
	}
};

WindowClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowClause(this);
	}
};

WindowClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowClauseContext = WindowClauseContext;

MySQLParser.prototype.windowClause = function() {

    var localctx = new WindowClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, MySQLParser.RULE_windowClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3075;
        this.match(MySQLParser.WINDOW_SYMBOL);
        this.state = 3076;
        this.windowDefinition();
        this.state = 3081;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,317,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3077;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3078;
                this.windowDefinition(); 
            }
            this.state = 3083;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,317,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowDefinition;
    return this;
}

WindowDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowDefinitionContext.prototype.constructor = WindowDefinitionContext;

WindowDefinitionContext.prototype.windowName = function() {
    return this.getTypedRuleContext(WindowNameContext,0);
};

WindowDefinitionContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

WindowDefinitionContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

WindowDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowDefinition(this);
	}
};

WindowDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowDefinition(this);
	}
};

WindowDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowDefinitionContext = WindowDefinitionContext;

MySQLParser.prototype.windowDefinition = function() {

    var localctx = new WindowDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, MySQLParser.RULE_windowDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3084;
        this.windowName();
        this.state = 3085;
        this.match(MySQLParser.AS_SYMBOL);
        this.state = 3086;
        this.windowSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowSpec;
    return this;
}

WindowSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowSpecContext.prototype.constructor = WindowSpecContext;

WindowSpecContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

WindowSpecContext.prototype.windowSpecDetails = function() {
    return this.getTypedRuleContext(WindowSpecDetailsContext,0);
};

WindowSpecContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

WindowSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowSpec(this);
	}
};

WindowSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowSpec(this);
	}
};

WindowSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowSpecContext = WindowSpecContext;

MySQLParser.prototype.windowSpec = function() {

    var localctx = new WindowSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, MySQLParser.RULE_windowSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3088;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3089;
        this.windowSpecDetails();
        this.state = 3090;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowSpecDetailsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowSpecDetails;
    return this;
}

WindowSpecDetailsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowSpecDetailsContext.prototype.constructor = WindowSpecDetailsContext;

WindowSpecDetailsContext.prototype.windowName = function() {
    return this.getTypedRuleContext(WindowNameContext,0);
};

WindowSpecDetailsContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

WindowSpecDetailsContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

WindowSpecDetailsContext.prototype.orderList = function() {
    return this.getTypedRuleContext(OrderListContext,0);
};

WindowSpecDetailsContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

WindowSpecDetailsContext.prototype.windowFrameClause = function() {
    return this.getTypedRuleContext(WindowFrameClauseContext,0);
};

WindowSpecDetailsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowSpecDetails(this);
	}
};

WindowSpecDetailsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowSpecDetails(this);
	}
};

WindowSpecDetailsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowSpecDetails(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowSpecDetailsContext = WindowSpecDetailsContext;

MySQLParser.prototype.windowSpecDetails = function() {

    var localctx = new WindowSpecDetailsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, MySQLParser.RULE_windowSpecDetails);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3093;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
        if(la_===1) {
            this.state = 3092;
            this.windowName();

        }
        this.state = 3098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION_SYMBOL) {
            this.state = 3095;
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.state = 3096;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 3097;
            this.orderList();
        }

        this.state = 3101;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ORDER_SYMBOL) {
            this.state = 3100;
            this.orderClause();
        }

        this.state = 3104;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ROWS_SYMBOL || _la===MySQLParser.RANGE_SYMBOL || _la===MySQLParser.GROUPS_SYMBOL) {
            this.state = 3103;
            this.windowFrameClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameClause;
    return this;
}

WindowFrameClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameClauseContext.prototype.constructor = WindowFrameClauseContext;

WindowFrameClauseContext.prototype.windowFrameUnits = function() {
    return this.getTypedRuleContext(WindowFrameUnitsContext,0);
};

WindowFrameClauseContext.prototype.windowFrameExtent = function() {
    return this.getTypedRuleContext(WindowFrameExtentContext,0);
};

WindowFrameClauseContext.prototype.windowFrameExclusion = function() {
    return this.getTypedRuleContext(WindowFrameExclusionContext,0);
};

WindowFrameClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameClause(this);
	}
};

WindowFrameClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameClause(this);
	}
};

WindowFrameClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameClauseContext = WindowFrameClauseContext;

MySQLParser.prototype.windowFrameClause = function() {

    var localctx = new WindowFrameClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, MySQLParser.RULE_windowFrameClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3106;
        this.windowFrameUnits();
        this.state = 3107;
        this.windowFrameExtent();
        this.state = 3109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EXCLUDE_SYMBOL) {
            this.state = 3108;
            this.windowFrameExclusion();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameUnitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameUnits;
    return this;
}

WindowFrameUnitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameUnitsContext.prototype.constructor = WindowFrameUnitsContext;

WindowFrameUnitsContext.prototype.ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
};

WindowFrameUnitsContext.prototype.RANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
};

WindowFrameUnitsContext.prototype.GROUPS_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
};

WindowFrameUnitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameUnits(this);
	}
};

WindowFrameUnitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameUnits(this);
	}
};

WindowFrameUnitsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameUnits(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameUnitsContext = WindowFrameUnitsContext;

MySQLParser.prototype.windowFrameUnits = function() {

    var localctx = new WindowFrameUnitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, MySQLParser.RULE_windowFrameUnits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3111;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ROWS_SYMBOL || _la===MySQLParser.RANGE_SYMBOL || _la===MySQLParser.GROUPS_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameExtentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameExtent;
    return this;
}

WindowFrameExtentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameExtentContext.prototype.constructor = WindowFrameExtentContext;

WindowFrameExtentContext.prototype.windowFrameStart = function() {
    return this.getTypedRuleContext(WindowFrameStartContext,0);
};

WindowFrameExtentContext.prototype.windowFrameBetween = function() {
    return this.getTypedRuleContext(WindowFrameBetweenContext,0);
};

WindowFrameExtentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameExtent(this);
	}
};

WindowFrameExtentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameExtent(this);
	}
};

WindowFrameExtentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameExtent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameExtentContext = WindowFrameExtentContext;

MySQLParser.prototype.windowFrameExtent = function() {

    var localctx = new WindowFrameExtentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, MySQLParser.RULE_windowFrameExtent);
    try {
        this.state = 3115;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT_SYMBOL:
        case MySQLParser.INT_NUMBER:
        case MySQLParser.LONG_NUMBER:
        case MySQLParser.ULONGLONG_NUMBER:
        case MySQLParser.PARAM_MARKER:
        case MySQLParser.DECIMAL_NUMBER:
        case MySQLParser.FLOAT_NUMBER:
        case MySQLParser.INTERVAL_SYMBOL:
        case MySQLParser.UNBOUNDED_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3113;
            this.windowFrameStart();
            break;
        case MySQLParser.BETWEEN_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3114;
            this.windowFrameBetween();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameStartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameStart;
    return this;
}

WindowFrameStartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameStartContext.prototype.constructor = WindowFrameStartContext;

WindowFrameStartContext.prototype.UNBOUNDED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
};

WindowFrameStartContext.prototype.PRECEDING_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
};

WindowFrameStartContext.prototype.ulonglong_number = function() {
    return this.getTypedRuleContext(Ulonglong_numberContext,0);
};

WindowFrameStartContext.prototype.PARAM_MARKER = function() {
    return this.getToken(MySQLParser.PARAM_MARKER, 0);
};

WindowFrameStartContext.prototype.INTERVAL_SYMBOL = function() {
    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
};

WindowFrameStartContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WindowFrameStartContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

WindowFrameStartContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

WindowFrameStartContext.prototype.ROW_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
};

WindowFrameStartContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameStart(this);
	}
};

WindowFrameStartContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameStart(this);
	}
};

WindowFrameStartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameStart(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameStartContext = WindowFrameStartContext;

MySQLParser.prototype.windowFrameStart = function() {

    var localctx = new WindowFrameStartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, MySQLParser.RULE_windowFrameStart);
    try {
        this.state = 3131;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.UNBOUNDED_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3117;
            this.match(MySQLParser.UNBOUNDED_SYMBOL);
            this.state = 3118;
            this.match(MySQLParser.PRECEDING_SYMBOL);
            break;
        case MySQLParser.INT_NUMBER:
        case MySQLParser.LONG_NUMBER:
        case MySQLParser.ULONGLONG_NUMBER:
        case MySQLParser.DECIMAL_NUMBER:
        case MySQLParser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 3119;
            this.ulonglong_number();
            this.state = 3120;
            this.match(MySQLParser.PRECEDING_SYMBOL);
            break;
        case MySQLParser.PARAM_MARKER:
            this.enterOuterAlt(localctx, 3);
            this.state = 3122;
            this.match(MySQLParser.PARAM_MARKER);
            this.state = 3123;
            this.match(MySQLParser.PRECEDING_SYMBOL);
            break;
        case MySQLParser.INTERVAL_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 3124;
            this.match(MySQLParser.INTERVAL_SYMBOL);
            this.state = 3125;
            this.expr(0);
            this.state = 3126;
            this.interval();
            this.state = 3127;
            this.match(MySQLParser.PRECEDING_SYMBOL);
            break;
        case MySQLParser.CURRENT_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 3129;
            this.match(MySQLParser.CURRENT_SYMBOL);
            this.state = 3130;
            this.match(MySQLParser.ROW_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameBetweenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameBetween;
    return this;
}

WindowFrameBetweenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameBetweenContext.prototype.constructor = WindowFrameBetweenContext;

WindowFrameBetweenContext.prototype.BETWEEN_SYMBOL = function() {
    return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
};

WindowFrameBetweenContext.prototype.windowFrameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WindowFrameBoundContext);
    } else {
        return this.getTypedRuleContext(WindowFrameBoundContext,i);
    }
};

WindowFrameBetweenContext.prototype.AND_SYMBOL = function() {
    return this.getToken(MySQLParser.AND_SYMBOL, 0);
};

WindowFrameBetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameBetween(this);
	}
};

WindowFrameBetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameBetween(this);
	}
};

WindowFrameBetweenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameBetween(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameBetweenContext = WindowFrameBetweenContext;

MySQLParser.prototype.windowFrameBetween = function() {

    var localctx = new WindowFrameBetweenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, MySQLParser.RULE_windowFrameBetween);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3133;
        this.match(MySQLParser.BETWEEN_SYMBOL);
        this.state = 3134;
        this.windowFrameBound();
        this.state = 3135;
        this.match(MySQLParser.AND_SYMBOL);
        this.state = 3136;
        this.windowFrameBound();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameBound;
    return this;
}

WindowFrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameBoundContext.prototype.constructor = WindowFrameBoundContext;

WindowFrameBoundContext.prototype.windowFrameStart = function() {
    return this.getTypedRuleContext(WindowFrameStartContext,0);
};

WindowFrameBoundContext.prototype.UNBOUNDED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
};

WindowFrameBoundContext.prototype.FOLLOWING_SYMBOL = function() {
    return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
};

WindowFrameBoundContext.prototype.ulonglong_number = function() {
    return this.getTypedRuleContext(Ulonglong_numberContext,0);
};

WindowFrameBoundContext.prototype.PARAM_MARKER = function() {
    return this.getToken(MySQLParser.PARAM_MARKER, 0);
};

WindowFrameBoundContext.prototype.INTERVAL_SYMBOL = function() {
    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
};

WindowFrameBoundContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WindowFrameBoundContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

WindowFrameBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameBound(this);
	}
};

WindowFrameBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameBound(this);
	}
};

WindowFrameBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameBoundContext = WindowFrameBoundContext;

MySQLParser.prototype.windowFrameBound = function() {

    var localctx = new WindowFrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, MySQLParser.RULE_windowFrameBound);
    try {
        this.state = 3151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3138;
            this.windowFrameStart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3139;
            this.match(MySQLParser.UNBOUNDED_SYMBOL);
            this.state = 3140;
            this.match(MySQLParser.FOLLOWING_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3141;
            this.ulonglong_number();
            this.state = 3142;
            this.match(MySQLParser.FOLLOWING_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3144;
            this.match(MySQLParser.PARAM_MARKER);
            this.state = 3145;
            this.match(MySQLParser.FOLLOWING_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3146;
            this.match(MySQLParser.INTERVAL_SYMBOL);
            this.state = 3147;
            this.expr(0);
            this.state = 3148;
            this.interval();
            this.state = 3149;
            this.match(MySQLParser.FOLLOWING_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameExclusionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFrameExclusion;
    return this;
}

WindowFrameExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameExclusionContext.prototype.constructor = WindowFrameExclusionContext;

WindowFrameExclusionContext.prototype.EXCLUDE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.ROW_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.TIES_SYMBOL = function() {
    return this.getToken(MySQLParser.TIES_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.OTHERS_SYMBOL = function() {
    return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
};

WindowFrameExclusionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFrameExclusion(this);
	}
};

WindowFrameExclusionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFrameExclusion(this);
	}
};

WindowFrameExclusionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFrameExclusion(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFrameExclusionContext = WindowFrameExclusionContext;

MySQLParser.prototype.windowFrameExclusion = function() {

    var localctx = new WindowFrameExclusionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, MySQLParser.RULE_windowFrameExclusion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3153;
        this.match(MySQLParser.EXCLUDE_SYMBOL);
        this.state = 3160;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT_SYMBOL:
            this.state = 3154;
            this.match(MySQLParser.CURRENT_SYMBOL);
            this.state = 3155;
            this.match(MySQLParser.ROW_SYMBOL);
            break;
        case MySQLParser.GROUP_SYMBOL:
            this.state = 3156;
            this.match(MySQLParser.GROUP_SYMBOL);
            break;
        case MySQLParser.TIES_SYMBOL:
            this.state = 3157;
            this.match(MySQLParser.TIES_SYMBOL);
            break;
        case MySQLParser.NO_SYMBOL:
            this.state = 3158;
            this.match(MySQLParser.NO_SYMBOL);
            this.state = 3159;
            this.match(MySQLParser.OTHERS_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_withClause;
    return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

WithClauseContext.prototype.commonTableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommonTableExpressionContext);
    } else {
        return this.getTypedRuleContext(CommonTableExpressionContext,i);
    }
};

WithClauseContext.prototype.RECURSIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
};

WithClauseContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


WithClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWithClause(this);
	}
};

WithClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWithClause(this);
	}
};

WithClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWithClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WithClauseContext = WithClauseContext;

MySQLParser.prototype.withClause = function() {

    var localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, MySQLParser.RULE_withClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3162;
        this.match(MySQLParser.WITH_SYMBOL);
        this.state = 3164;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
        if(la_===1) {
            this.state = 3163;
            this.match(MySQLParser.RECURSIVE_SYMBOL);

        }
        this.state = 3166;
        this.commonTableExpression();
        this.state = 3171;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 3167;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 3168;
            this.commonTableExpression();
            this.state = 3173;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommonTableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_commonTableExpression;
    return this;
}

CommonTableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonTableExpressionContext.prototype.constructor = CommonTableExpressionContext;

CommonTableExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CommonTableExpressionContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

CommonTableExpressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

CommonTableExpressionContext.prototype.columnInternalRefList = function() {
    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
};

CommonTableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCommonTableExpression(this);
	}
};

CommonTableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCommonTableExpression(this);
	}
};

CommonTableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCommonTableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CommonTableExpressionContext = CommonTableExpressionContext;

MySQLParser.prototype.commonTableExpression = function() {

    var localctx = new CommonTableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, MySQLParser.RULE_commonTableExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3174;
        this.identifier();
        this.state = 3176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 3175;
            this.columnInternalRefList();
        }

        this.state = 3178;
        this.match(MySQLParser.AS_SYMBOL);
        this.state = 3179;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_groupByClause;
    return this;
}

GroupByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByClauseContext.prototype.constructor = GroupByClauseContext;

GroupByClauseContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

GroupByClauseContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

GroupByClauseContext.prototype.orderList = function() {
    return this.getTypedRuleContext(OrderListContext,0);
};

GroupByClauseContext.prototype.olapOption = function() {
    return this.getTypedRuleContext(OlapOptionContext,0);
};

GroupByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGroupByClause(this);
	}
};

GroupByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGroupByClause(this);
	}
};

GroupByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGroupByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GroupByClauseContext = GroupByClauseContext;

MySQLParser.prototype.groupByClause = function() {

    var localctx = new GroupByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, MySQLParser.RULE_groupByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3181;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 3182;
        this.match(MySQLParser.BY_SYMBOL);
        this.state = 3183;
        this.orderList();
        this.state = 3185;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
        if(la_===1) {
            this.state = 3184;
            this.olapOption();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OlapOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_olapOption;
    return this;
}

OlapOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OlapOptionContext.prototype.constructor = OlapOptionContext;

OlapOptionContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

OlapOptionContext.prototype.ROLLUP_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
};

OlapOptionContext.prototype.CUBE_SYMBOL = function() {
    return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
};

OlapOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOlapOption(this);
	}
};

OlapOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOlapOption(this);
	}
};

OlapOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOlapOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OlapOptionContext = OlapOptionContext;

MySQLParser.prototype.olapOption = function() {

    var localctx = new OlapOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, MySQLParser.RULE_olapOption);
    try {
        this.state = 3192;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3187;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 3188;
            this.match(MySQLParser.ROLLUP_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3189;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 3190;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 3191;
            this.match(MySQLParser.CUBE_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_orderClause;
    return this;
}

OrderClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderClauseContext.prototype.constructor = OrderClauseContext;

OrderClauseContext.prototype.ORDER_SYMBOL = function() {
    return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
};

OrderClauseContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

OrderClauseContext.prototype.orderList = function() {
    return this.getTypedRuleContext(OrderListContext,0);
};

OrderClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOrderClause(this);
	}
};

OrderClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOrderClause(this);
	}
};

OrderClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOrderClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OrderClauseContext = OrderClauseContext;

MySQLParser.prototype.orderClause = function() {

    var localctx = new OrderClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, MySQLParser.RULE_orderClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3194;
        this.match(MySQLParser.ORDER_SYMBOL);
        this.state = 3195;
        this.match(MySQLParser.BY_SYMBOL);
        this.state = 3196;
        this.orderList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DirectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_direction;
    return this;
}

DirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectionContext.prototype.constructor = DirectionContext;

DirectionContext.prototype.ASC_SYMBOL = function() {
    return this.getToken(MySQLParser.ASC_SYMBOL, 0);
};

DirectionContext.prototype.DESC_SYMBOL = function() {
    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
};

DirectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDirection(this);
	}
};

DirectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDirection(this);
	}
};

DirectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDirection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DirectionContext = DirectionContext;

MySQLParser.prototype.direction = function() {

    var localctx = new DirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, MySQLParser.RULE_direction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3198;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ASC_SYMBOL || _la===MySQLParser.DESC_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

FromClauseContext.prototype.DUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
};

FromClauseContext.prototype.tableReferenceList = function() {
    return this.getTypedRuleContext(TableReferenceListContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFromClause(this);
	}
};

FromClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFromClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FromClauseContext = FromClauseContext;

MySQLParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, MySQLParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3200;
        this.match(MySQLParser.FROM_SYMBOL);
        this.state = 3203;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3201;
            this.match(MySQLParser.DUAL_SYMBOL);
            break;

        case 2:
            this.state = 3202;
            this.tableReferenceList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableReferenceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableReferenceList;
    return this;
}

TableReferenceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableReferenceListContext.prototype.constructor = TableReferenceListContext;

TableReferenceListContext.prototype.tableReference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableReferenceContext);
    } else {
        return this.getTypedRuleContext(TableReferenceContext,i);
    }
};

TableReferenceListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


TableReferenceListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableReferenceList(this);
	}
};

TableReferenceListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableReferenceList(this);
	}
};

TableReferenceListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableReferenceList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableReferenceListContext = TableReferenceListContext;

MySQLParser.prototype.tableReferenceList = function() {

    var localctx = new TableReferenceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, MySQLParser.RULE_tableReferenceList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3205;
        this.tableReference();
        this.state = 3210;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,333,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3206;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3207;
                this.tableReference(); 
            }
            this.state = 3212;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,333,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectOption;
    return this;
}

SelectOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectOptionContext.prototype.constructor = SelectOptionContext;

SelectOptionContext.prototype.querySpecOption = function() {
    return this.getTypedRuleContext(QuerySpecOptionContext,0);
};

SelectOptionContext.prototype.SQL_NO_CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
};

SelectOptionContext.prototype.SQL_CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0);
};

SelectOptionContext.prototype.MAX_STATEMENT_TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0);
};

SelectOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

SelectOptionContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

SelectOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectOption(this);
	}
};

SelectOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectOption(this);
	}
};

SelectOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectOptionContext = SelectOptionContext;

MySQLParser.prototype.selectOption = function() {

    var localctx = new SelectOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, MySQLParser.RULE_selectOption);
    try {
        this.state = 3221;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3213;
            this.querySpecOption();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3214;
            this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3215;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 3216;
            this.match(MySQLParser.SQL_CACHE_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3217;
            if (!( serverVersion >= 50704 && serverVersion < 50708)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
            }
            this.state = 3218;
            this.match(MySQLParser.MAX_STATEMENT_TIME_SYMBOL);
            this.state = 3219;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3220;
            this.real_ulong_number();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockingClause;
    return this;
}

LockingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockingClauseContext.prototype.constructor = LockingClauseContext;

LockingClauseContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

LockingClauseContext.prototype.lockStrengh = function() {
    return this.getTypedRuleContext(LockStrenghContext,0);
};

LockingClauseContext.prototype.OF_SYMBOL = function() {
    return this.getToken(MySQLParser.OF_SYMBOL, 0);
};

LockingClauseContext.prototype.tableAliasRefList = function() {
    return this.getTypedRuleContext(TableAliasRefListContext,0);
};

LockingClauseContext.prototype.lockedRowAction = function() {
    return this.getTypedRuleContext(LockedRowActionContext,0);
};

LockingClauseContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

LockingClauseContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

LockingClauseContext.prototype.SHARE_SYMBOL = function() {
    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
};

LockingClauseContext.prototype.MODE_SYMBOL = function() {
    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
};

LockingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockingClause(this);
	}
};

LockingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockingClause(this);
	}
};

LockingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockingClauseContext = LockingClauseContext;

MySQLParser.prototype.lockingClause = function() {

    var localctx = new LockingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, MySQLParser.RULE_lockingClause);
    try {
        this.state = 3238;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.FOR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3223;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 3224;
            this.lockStrengh();
            this.state = 3228;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
            if(la_===1) {
                this.state = 3225;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 3226;
                this.match(MySQLParser.OF_SYMBOL);
                this.state = 3227;
                this.tableAliasRefList();

            }
            this.state = 3232;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
            if(la_===1) {
                this.state = 3230;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 3231;
                this.lockedRowAction();

            }
            break;
        case MySQLParser.LOCK_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3234;
            this.match(MySQLParser.LOCK_SYMBOL);
            this.state = 3235;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 3236;
            this.match(MySQLParser.SHARE_SYMBOL);
            this.state = 3237;
            this.match(MySQLParser.MODE_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockStrenghContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockStrengh;
    return this;
}

LockStrenghContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockStrenghContext.prototype.constructor = LockStrenghContext;

LockStrenghContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

LockStrenghContext.prototype.SHARE_SYMBOL = function() {
    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
};

LockStrenghContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockStrengh(this);
	}
};

LockStrenghContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockStrengh(this);
	}
};

LockStrenghContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockStrengh(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockStrenghContext = LockStrenghContext;

MySQLParser.prototype.lockStrengh = function() {

    var localctx = new LockStrenghContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, MySQLParser.RULE_lockStrengh);
    try {
        this.state = 3243;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3240;
            this.match(MySQLParser.UPDATE_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3241;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 3242;
            this.match(MySQLParser.SHARE_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockedRowActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockedRowAction;
    return this;
}

LockedRowActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockedRowActionContext.prototype.constructor = LockedRowActionContext;

LockedRowActionContext.prototype.SKIP_SYMBOL = function() {
    return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
};

LockedRowActionContext.prototype.LOCKED_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
};

LockedRowActionContext.prototype.NOWAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
};

LockedRowActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockedRowAction(this);
	}
};

LockedRowActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockedRowAction(this);
	}
};

LockedRowActionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockedRowAction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockedRowActionContext = LockedRowActionContext;

MySQLParser.prototype.lockedRowAction = function() {

    var localctx = new LockedRowActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, MySQLParser.RULE_lockedRowAction);
    try {
        this.state = 3248;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SKIP_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3245;
            this.match(MySQLParser.SKIP_SYMBOL);
            this.state = 3246;
            this.match(MySQLParser.LOCKED_SYMBOL);
            break;
        case MySQLParser.NOWAIT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3247;
            this.match(MySQLParser.NOWAIT_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectItemList;
    return this;
}

SelectItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemListContext.prototype.constructor = SelectItemListContext;

SelectItemListContext.prototype.selectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemContext);
    } else {
        return this.getTypedRuleContext(SelectItemContext,i);
    }
};

SelectItemListContext.prototype.MULT_OPERATOR = function() {
    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
};

SelectItemListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


SelectItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectItemList(this);
	}
};

SelectItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectItemList(this);
	}
};

SelectItemListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectItemList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectItemListContext = SelectItemListContext;

MySQLParser.prototype.selectItemList = function() {

    var localctx = new SelectItemListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, MySQLParser.RULE_selectItemList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3252;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3250;
            this.selectItem();
            break;

        case 2:
            this.state = 3251;
            this.match(MySQLParser.MULT_OPERATOR);
            break;

        }
        this.state = 3258;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,341,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3254;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3255;
                this.selectItem(); 
            }
            this.state = 3260;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,341,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectItem;
    return this;
}

SelectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;

SelectItemContext.prototype.tableWild = function() {
    return this.getTypedRuleContext(TableWildContext,0);
};

SelectItemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SelectItemContext.prototype.selectAlias = function() {
    return this.getTypedRuleContext(SelectAliasContext,0);
};

SelectItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectItem(this);
	}
};

SelectItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectItem(this);
	}
};

SelectItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectItemContext = SelectItemContext;

MySQLParser.prototype.selectItem = function() {

    var localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, MySQLParser.RULE_selectItem);
    try {
        this.state = 3266;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3261;
            this.tableWild();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3262;
            this.expr(0);
            this.state = 3264;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
            if(la_===1) {
                this.state = 3263;
                this.selectAlias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectAlias;
    return this;
}

SelectAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectAliasContext.prototype.constructor = SelectAliasContext;

SelectAliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectAliasContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

SelectAliasContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

SelectAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectAlias(this);
	}
};

SelectAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectAlias(this);
	}
};

SelectAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectAliasContext = SelectAliasContext;

MySQLParser.prototype.selectAlias = function() {

    var localctx = new SelectAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, MySQLParser.RULE_selectAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3269;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
        if(la_===1) {
            this.state = 3268;
            this.match(MySQLParser.AS_SYMBOL);

        }
        this.state = 3273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3271;
            this.identifier();
            break;

        case 2:
            this.state = 3272;
            this.textStringLiteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.WHERE_SYMBOL = function() {
    return this.getToken(MySQLParser.WHERE_SYMBOL, 0);
};

WhereClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWhereClause(this);
	}
};

WhereClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWhereClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WhereClauseContext = WhereClauseContext;

MySQLParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, MySQLParser.RULE_whereClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3275;
        this.match(MySQLParser.WHERE_SYMBOL);
        this.state = 3276;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableReference;
    return this;
}

TableReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableReferenceContext.prototype.constructor = TableReferenceContext;

TableReferenceContext.prototype.tableFactor = function() {
    return this.getTypedRuleContext(TableFactorContext,0);
};

TableReferenceContext.prototype.OPEN_CURLY_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
};

TableReferenceContext.prototype.escapedTableReference = function() {
    return this.getTypedRuleContext(EscapedTableReferenceContext,0);
};

TableReferenceContext.prototype.CLOSE_CURLY_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
};

TableReferenceContext.prototype.joinedTable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinedTableContext);
    } else {
        return this.getTypedRuleContext(JoinedTableContext,i);
    }
};

TableReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableReferenceContext.prototype.OJ_SYMBOL = function() {
    return this.getToken(MySQLParser.OJ_SYMBOL, 0);
};

TableReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableReference(this);
	}
};

TableReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableReference(this);
	}
};

TableReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableReferenceContext = TableReferenceContext;

MySQLParser.prototype.tableReference = function() {

    var localctx = new TableReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, MySQLParser.RULE_tableReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3288;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3278;
            this.tableFactor();
            break;

        case 2:
            this.state = 3279;
            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
            this.state = 3283;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3280;
                if (!( serverVersion < 80017)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
                }
                this.state = 3281;
                this.identifier();
                break;

            case 2:
                this.state = 3282;
                this.match(MySQLParser.OJ_SYMBOL);
                break;

            }
            this.state = 3285;
            this.escapedTableReference();
            this.state = 3286;
            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
            break;

        }
        this.state = 3293;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,348,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3290;
                this.joinedTable(); 
            }
            this.state = 3295;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,348,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EscapedTableReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_escapedTableReference;
    return this;
}

EscapedTableReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EscapedTableReferenceContext.prototype.constructor = EscapedTableReferenceContext;

EscapedTableReferenceContext.prototype.tableFactor = function() {
    return this.getTypedRuleContext(TableFactorContext,0);
};

EscapedTableReferenceContext.prototype.joinedTable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinedTableContext);
    } else {
        return this.getTypedRuleContext(JoinedTableContext,i);
    }
};

EscapedTableReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEscapedTableReference(this);
	}
};

EscapedTableReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEscapedTableReference(this);
	}
};

EscapedTableReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEscapedTableReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EscapedTableReferenceContext = EscapedTableReferenceContext;

MySQLParser.prototype.escapedTableReference = function() {

    var localctx = new EscapedTableReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, MySQLParser.RULE_escapedTableReference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3296;
        this.tableFactor();
        this.state = 3300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.CROSS_SYMBOL || ((((_la - 523)) & ~0x1f) == 0 && ((1 << (_la - 523)) & ((1 << (MySQLParser.INNER_SYMBOL - 523)) | (1 << (MySQLParser.JOIN_SYMBOL - 523)) | (1 << (MySQLParser.LEFT_SYMBOL - 523)))) !== 0) || _la===MySQLParser.NATURAL_SYMBOL || _la===MySQLParser.RIGHT_SYMBOL || _la===MySQLParser.STRAIGHT_JOIN_SYMBOL) {
            this.state = 3297;
            this.joinedTable();
            this.state = 3302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinedTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_joinedTable;
    return this;
}

JoinedTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinedTableContext.prototype.constructor = JoinedTableContext;

JoinedTableContext.prototype.innerJoinType = function() {
    return this.getTypedRuleContext(InnerJoinTypeContext,0);
};

JoinedTableContext.prototype.tableReference = function() {
    return this.getTypedRuleContext(TableReferenceContext,0);
};

JoinedTableContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

JoinedTableContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

JoinedTableContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

JoinedTableContext.prototype.identifierListWithParentheses = function() {
    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
};

JoinedTableContext.prototype.outerJoinType = function() {
    return this.getTypedRuleContext(OuterJoinTypeContext,0);
};

JoinedTableContext.prototype.naturalJoinType = function() {
    return this.getTypedRuleContext(NaturalJoinTypeContext,0);
};

JoinedTableContext.prototype.tableFactor = function() {
    return this.getTypedRuleContext(TableFactorContext,0);
};

JoinedTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterJoinedTable(this);
	}
};

JoinedTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitJoinedTable(this);
	}
};

JoinedTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitJoinedTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.JoinedTableContext = JoinedTableContext;

MySQLParser.prototype.joinedTable = function() {

    var localctx = new JoinedTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, MySQLParser.RULE_joinedTable);
    try {
        this.state = 3322;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CROSS_SYMBOL:
        case MySQLParser.INNER_SYMBOL:
        case MySQLParser.JOIN_SYMBOL:
        case MySQLParser.STRAIGHT_JOIN_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3303;
            this.innerJoinType();
            this.state = 3304;
            this.tableReference();
            this.state = 3309;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
            if(la_===1) {
                this.state = 3305;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 3306;
                this.expr(0);

            } else if(la_===2) {
                this.state = 3307;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 3308;
                this.identifierListWithParentheses();

            }
            break;
        case MySQLParser.LEFT_SYMBOL:
        case MySQLParser.RIGHT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3311;
            this.outerJoinType();
            this.state = 3312;
            this.tableReference();
            this.state = 3317;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.ON_SYMBOL:
                this.state = 3313;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 3314;
                this.expr(0);
                break;
            case MySQLParser.USING_SYMBOL:
                this.state = 3315;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 3316;
                this.identifierListWithParentheses();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case MySQLParser.NATURAL_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 3319;
            this.naturalJoinType();
            this.state = 3320;
            this.tableFactor();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NaturalJoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_naturalJoinType;
    return this;
}

NaturalJoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NaturalJoinTypeContext.prototype.constructor = NaturalJoinTypeContext;

NaturalJoinTypeContext.prototype.NATURAL_SYMBOL = function() {
    return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
};

NaturalJoinTypeContext.prototype.JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
};

NaturalJoinTypeContext.prototype.INNER_SYMBOL = function() {
    return this.getToken(MySQLParser.INNER_SYMBOL, 0);
};

NaturalJoinTypeContext.prototype.LEFT_SYMBOL = function() {
    return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
};

NaturalJoinTypeContext.prototype.RIGHT_SYMBOL = function() {
    return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
};

NaturalJoinTypeContext.prototype.OUTER_SYMBOL = function() {
    return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
};

NaturalJoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNaturalJoinType(this);
	}
};

NaturalJoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNaturalJoinType(this);
	}
};

NaturalJoinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNaturalJoinType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NaturalJoinTypeContext = NaturalJoinTypeContext;

MySQLParser.prototype.naturalJoinType = function() {

    var localctx = new NaturalJoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, MySQLParser.RULE_naturalJoinType);
    var _la = 0; // Token type
    try {
        this.state = 3335;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3324;
            this.match(MySQLParser.NATURAL_SYMBOL);
            this.state = 3326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INNER_SYMBOL) {
                this.state = 3325;
                this.match(MySQLParser.INNER_SYMBOL);
            }

            this.state = 3328;
            this.match(MySQLParser.JOIN_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3329;
            this.match(MySQLParser.NATURAL_SYMBOL);
            this.state = 3330;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LEFT_SYMBOL || _la===MySQLParser.RIGHT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.OUTER_SYMBOL) {
                this.state = 3331;
                this.match(MySQLParser.OUTER_SYMBOL);
            }

            this.state = 3334;
            this.match(MySQLParser.JOIN_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InnerJoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_innerJoinType;
    this.type = null; // Token
    return this;
}

InnerJoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerJoinTypeContext.prototype.constructor = InnerJoinTypeContext;

InnerJoinTypeContext.prototype.JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
};

InnerJoinTypeContext.prototype.INNER_SYMBOL = function() {
    return this.getToken(MySQLParser.INNER_SYMBOL, 0);
};

InnerJoinTypeContext.prototype.CROSS_SYMBOL = function() {
    return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
};

InnerJoinTypeContext.prototype.STRAIGHT_JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
};

InnerJoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInnerJoinType(this);
	}
};

InnerJoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInnerJoinType(this);
	}
};

InnerJoinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInnerJoinType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InnerJoinTypeContext = InnerJoinTypeContext;

MySQLParser.prototype.innerJoinType = function() {

    var localctx = new InnerJoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, MySQLParser.RULE_innerJoinType);
    var _la = 0; // Token type
    try {
        this.state = 3342;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CROSS_SYMBOL:
        case MySQLParser.INNER_SYMBOL:
        case MySQLParser.JOIN_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CROSS_SYMBOL || _la===MySQLParser.INNER_SYMBOL) {
                this.state = 3337;
                localctx.type = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.CROSS_SYMBOL || _la===MySQLParser.INNER_SYMBOL)) {
                    localctx.type = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3340;
            this.match(MySQLParser.JOIN_SYMBOL);
            break;
        case MySQLParser.STRAIGHT_JOIN_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3341;
            localctx.type = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OuterJoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_outerJoinType;
    this.type = null; // Token
    return this;
}

OuterJoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OuterJoinTypeContext.prototype.constructor = OuterJoinTypeContext;

OuterJoinTypeContext.prototype.JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
};

OuterJoinTypeContext.prototype.LEFT_SYMBOL = function() {
    return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
};

OuterJoinTypeContext.prototype.RIGHT_SYMBOL = function() {
    return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
};

OuterJoinTypeContext.prototype.OUTER_SYMBOL = function() {
    return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
};

OuterJoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOuterJoinType(this);
	}
};

OuterJoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOuterJoinType(this);
	}
};

OuterJoinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOuterJoinType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OuterJoinTypeContext = OuterJoinTypeContext;

MySQLParser.prototype.outerJoinType = function() {

    var localctx = new OuterJoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, MySQLParser.RULE_outerJoinType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3344;
        localctx.type = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.LEFT_SYMBOL || _la===MySQLParser.RIGHT_SYMBOL)) {
            localctx.type = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OUTER_SYMBOL) {
            this.state = 3345;
            this.match(MySQLParser.OUTER_SYMBOL);
        }

        this.state = 3348;
        this.match(MySQLParser.JOIN_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableFactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableFactor;
    return this;
}

TableFactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFactorContext.prototype.constructor = TableFactorContext;

TableFactorContext.prototype.singleTable = function() {
    return this.getTypedRuleContext(SingleTableContext,0);
};

TableFactorContext.prototype.singleTableParens = function() {
    return this.getTypedRuleContext(SingleTableParensContext,0);
};

TableFactorContext.prototype.derivedTable = function() {
    return this.getTypedRuleContext(DerivedTableContext,0);
};

TableFactorContext.prototype.tableReferenceListParens = function() {
    return this.getTypedRuleContext(TableReferenceListParensContext,0);
};

TableFactorContext.prototype.tableFunction = function() {
    return this.getTypedRuleContext(TableFunctionContext,0);
};

TableFactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableFactor(this);
	}
};

TableFactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableFactor(this);
	}
};

TableFactorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableFactor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableFactorContext = TableFactorContext;

MySQLParser.prototype.tableFactor = function() {

    var localctx = new TableFactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, MySQLParser.RULE_tableFactor);
    try {
        this.state = 3356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3350;
            this.singleTable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3351;
            this.singleTableParens();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3352;
            this.derivedTable();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3353;
            this.tableReferenceListParens();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3354;
            if (!( serverVersion >= 80004)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80004");
            }
            this.state = 3355;
            this.tableFunction();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_singleTable;
    return this;
}

SingleTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableContext.prototype.constructor = SingleTableContext;

SingleTableContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

SingleTableContext.prototype.usePartition = function() {
    return this.getTypedRuleContext(UsePartitionContext,0);
};

SingleTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

SingleTableContext.prototype.indexHintList = function() {
    return this.getTypedRuleContext(IndexHintListContext,0);
};

SingleTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSingleTable(this);
	}
};

SingleTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSingleTable(this);
	}
};

SingleTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSingleTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SingleTableContext = SingleTableContext;

MySQLParser.prototype.singleTable = function() {

    var localctx = new SingleTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, MySQLParser.RULE_singleTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3358;
        this.tableRef();
        this.state = 3360;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
        if(la_===1) {
            this.state = 3359;
            this.usePartition();

        }
        this.state = 3363;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
        if(la_===1) {
            this.state = 3362;
            this.tableAlias();

        }
        this.state = 3366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
        if(la_===1) {
            this.state = 3365;
            this.indexHintList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleTableParensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_singleTableParens;
    return this;
}

SingleTableParensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableParensContext.prototype.constructor = SingleTableParensContext;

SingleTableParensContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SingleTableParensContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SingleTableParensContext.prototype.singleTable = function() {
    return this.getTypedRuleContext(SingleTableContext,0);
};

SingleTableParensContext.prototype.singleTableParens = function() {
    return this.getTypedRuleContext(SingleTableParensContext,0);
};

SingleTableParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSingleTableParens(this);
	}
};

SingleTableParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSingleTableParens(this);
	}
};

SingleTableParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSingleTableParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SingleTableParensContext = SingleTableParensContext;

MySQLParser.prototype.singleTableParens = function() {

    var localctx = new SingleTableParensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, MySQLParser.RULE_singleTableParens);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3368;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3371;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3369;
            this.singleTable();
            break;

        case 2:
            this.state = 3370;
            this.singleTableParens();
            break;

        }
        this.state = 3373;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DerivedTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_derivedTable;
    return this;
}

DerivedTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DerivedTableContext.prototype.constructor = DerivedTableContext;

DerivedTableContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

DerivedTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

DerivedTableContext.prototype.columnInternalRefList = function() {
    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
};

DerivedTableContext.prototype.LATERAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
};

DerivedTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDerivedTable(this);
	}
};

DerivedTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDerivedTable(this);
	}
};

DerivedTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDerivedTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DerivedTableContext = DerivedTableContext;

MySQLParser.prototype.derivedTable = function() {

    var localctx = new DerivedTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, MySQLParser.RULE_derivedTable);
    try {
        this.state = 3392;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3375;
            this.subquery();
            this.state = 3377;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
            if(la_===1) {
                this.state = 3376;
                this.tableAlias();

            }
            this.state = 3381;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
            if(la_===1) {
                this.state = 3379;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 3380;
                this.columnInternalRefList();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3383;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 3384;
            this.match(MySQLParser.LATERAL_SYMBOL);
            this.state = 3385;
            this.subquery();
            this.state = 3387;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
            if(la_===1) {
                this.state = 3386;
                this.tableAlias();

            }
            this.state = 3390;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
            if(la_===1) {
                this.state = 3389;
                this.columnInternalRefList();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableReferenceListParensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableReferenceListParens;
    return this;
}

TableReferenceListParensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableReferenceListParensContext.prototype.constructor = TableReferenceListParensContext;

TableReferenceListParensContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

TableReferenceListParensContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

TableReferenceListParensContext.prototype.tableReferenceList = function() {
    return this.getTypedRuleContext(TableReferenceListContext,0);
};

TableReferenceListParensContext.prototype.tableReferenceListParens = function() {
    return this.getTypedRuleContext(TableReferenceListParensContext,0);
};

TableReferenceListParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableReferenceListParens(this);
	}
};

TableReferenceListParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableReferenceListParens(this);
	}
};

TableReferenceListParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableReferenceListParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableReferenceListParensContext = TableReferenceListParensContext;

MySQLParser.prototype.tableReferenceListParens = function() {

    var localctx = new TableReferenceListParensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, MySQLParser.RULE_tableReferenceListParens);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3394;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3397;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3395;
            this.tableReferenceList();
            break;

        case 2:
            this.state = 3396;
            this.tableReferenceListParens();
            break;

        }
        this.state = 3399;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableFunction;
    return this;
}

TableFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFunctionContext.prototype.constructor = TableFunctionContext;

TableFunctionContext.prototype.JSON_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0);
};

TableFunctionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

TableFunctionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TableFunctionContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

TableFunctionContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

TableFunctionContext.prototype.columnsClause = function() {
    return this.getTypedRuleContext(ColumnsClauseContext,0);
};

TableFunctionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

TableFunctionContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

TableFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableFunction(this);
	}
};

TableFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableFunction(this);
	}
};

TableFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableFunctionContext = TableFunctionContext;

MySQLParser.prototype.tableFunction = function() {

    var localctx = new TableFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, MySQLParser.RULE_tableFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3401;
        this.match(MySQLParser.JSON_TABLE_SYMBOL);
        this.state = 3402;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3403;
        this.expr(0);
        this.state = 3404;
        this.match(MySQLParser.COMMA_SYMBOL);
        this.state = 3405;
        this.textStringLiteral();
        this.state = 3406;
        this.columnsClause();
        this.state = 3407;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        this.state = 3409;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
        if(la_===1) {
            this.state = 3408;
            this.tableAlias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnsClause;
    return this;
}

ColumnsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnsClauseContext.prototype.constructor = ColumnsClauseContext;

ColumnsClauseContext.prototype.COLUMNS_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
};

ColumnsClauseContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ColumnsClauseContext.prototype.jtColumn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JtColumnContext);
    } else {
        return this.getTypedRuleContext(JtColumnContext,i);
    }
};

ColumnsClauseContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ColumnsClauseContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ColumnsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnsClause(this);
	}
};

ColumnsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnsClause(this);
	}
};

ColumnsClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnsClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnsClauseContext = ColumnsClauseContext;

MySQLParser.prototype.columnsClause = function() {

    var localctx = new ColumnsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, MySQLParser.RULE_columnsClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3411;
        this.match(MySQLParser.COLUMNS_SYMBOL);
        this.state = 3412;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3413;
        this.jtColumn();
        this.state = 3418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 3414;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 3415;
            this.jtColumn();
            this.state = 3420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3421;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JtColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_jtColumn;
    return this;
}

JtColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JtColumnContext.prototype.constructor = JtColumnContext;

JtColumnContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

JtColumnContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

JtColumnContext.prototype.ORDINALITY_SYMBOL = function() {
    return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
};

JtColumnContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

JtColumnContext.prototype.PATH_SYMBOL = function() {
    return this.getToken(MySQLParser.PATH_SYMBOL, 0);
};

JtColumnContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

JtColumnContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

JtColumnContext.prototype.EXISTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
};

JtColumnContext.prototype.onEmptyOrError = function() {
    return this.getTypedRuleContext(OnEmptyOrErrorContext,0);
};

JtColumnContext.prototype.NESTED_SYMBOL = function() {
    return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
};

JtColumnContext.prototype.columnsClause = function() {
    return this.getTypedRuleContext(ColumnsClauseContext,0);
};

JtColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterJtColumn(this);
	}
};

JtColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitJtColumn(this);
	}
};

JtColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitJtColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.JtColumnContext = JtColumnContext;

MySQLParser.prototype.jtColumn = function() {

    var localctx = new JtColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, MySQLParser.RULE_jtColumn);
    var _la = 0; // Token type
    try {
        this.state = 3446;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3423;
            this.identifier();
            this.state = 3424;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 3425;
            this.match(MySQLParser.ORDINALITY_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3427;
            this.identifier();
            this.state = 3428;
            this.dataType();
            this.state = 3431;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
            if(la_===1) {
                this.state = 3429;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 3430;
                this.collate();

            }
            this.state = 3434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EXISTS_SYMBOL) {
                this.state = 3433;
                this.match(MySQLParser.EXISTS_SYMBOL);
            }

            this.state = 3436;
            this.match(MySQLParser.PATH_SYMBOL);
            this.state = 3437;
            this.textStringLiteral();
            this.state = 3439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ERROR_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL || _la===MySQLParser.NULL_SYMBOL) {
                this.state = 3438;
                this.onEmptyOrError();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3441;
            this.match(MySQLParser.NESTED_SYMBOL);
            this.state = 3442;
            this.match(MySQLParser.PATH_SYMBOL);
            this.state = 3443;
            this.textStringLiteral();
            this.state = 3444;
            this.columnsClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OnEmptyOrErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_onEmptyOrError;
    return this;
}

OnEmptyOrErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnEmptyOrErrorContext.prototype.constructor = OnEmptyOrErrorContext;

OnEmptyOrErrorContext.prototype.onEmpty = function() {
    return this.getTypedRuleContext(OnEmptyContext,0);
};

OnEmptyOrErrorContext.prototype.onError = function() {
    return this.getTypedRuleContext(OnErrorContext,0);
};

OnEmptyOrErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOnEmptyOrError(this);
	}
};

OnEmptyOrErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOnEmptyOrError(this);
	}
};

OnEmptyOrErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOnEmptyOrError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OnEmptyOrErrorContext = OnEmptyOrErrorContext;

MySQLParser.prototype.onEmptyOrError = function() {

    var localctx = new OnEmptyOrErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, MySQLParser.RULE_onEmptyOrError);
    var _la = 0; // Token type
    try {
        this.state = 3456;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3448;
            this.onEmpty();
            this.state = 3450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ERROR_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL || _la===MySQLParser.NULL_SYMBOL) {
                this.state = 3449;
                this.onError();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3452;
            this.onError();
            this.state = 3454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ERROR_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL || _la===MySQLParser.NULL_SYMBOL) {
                this.state = 3453;
                this.onEmpty();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OnEmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_onEmpty;
    return this;
}

OnEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnEmptyContext.prototype.constructor = OnEmptyContext;

OnEmptyContext.prototype.jtOnResponse = function() {
    return this.getTypedRuleContext(JtOnResponseContext,0);
};

OnEmptyContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

OnEmptyContext.prototype.EMPTY_SYMBOL = function() {
    return this.getToken(MySQLParser.EMPTY_SYMBOL, 0);
};

OnEmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOnEmpty(this);
	}
};

OnEmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOnEmpty(this);
	}
};

OnEmptyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOnEmpty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OnEmptyContext = OnEmptyContext;

MySQLParser.prototype.onEmpty = function() {

    var localctx = new OnEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, MySQLParser.RULE_onEmpty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3458;
        this.jtOnResponse();
        this.state = 3459;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 3460;
        this.match(MySQLParser.EMPTY_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OnErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_onError;
    return this;
}

OnErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnErrorContext.prototype.constructor = OnErrorContext;

OnErrorContext.prototype.jtOnResponse = function() {
    return this.getTypedRuleContext(JtOnResponseContext,0);
};

OnErrorContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

OnErrorContext.prototype.ERROR_SYMBOL = function() {
    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
};

OnErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOnError(this);
	}
};

OnErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOnError(this);
	}
};

OnErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOnError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OnErrorContext = OnErrorContext;

MySQLParser.prototype.onError = function() {

    var localctx = new OnErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, MySQLParser.RULE_onError);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3462;
        this.jtOnResponse();
        this.state = 3463;
        this.match(MySQLParser.ON_SYMBOL);
        this.state = 3464;
        this.match(MySQLParser.ERROR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JtOnResponseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_jtOnResponse;
    return this;
}

JtOnResponseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JtOnResponseContext.prototype.constructor = JtOnResponseContext;

JtOnResponseContext.prototype.ERROR_SYMBOL = function() {
    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
};

JtOnResponseContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

JtOnResponseContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

JtOnResponseContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

JtOnResponseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterJtOnResponse(this);
	}
};

JtOnResponseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitJtOnResponse(this);
	}
};

JtOnResponseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitJtOnResponse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.JtOnResponseContext = JtOnResponseContext;

MySQLParser.prototype.jtOnResponse = function() {

    var localctx = new JtOnResponseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, MySQLParser.RULE_jtOnResponse);
    try {
        this.state = 3470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ERROR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3466;
            this.match(MySQLParser.ERROR_SYMBOL);
            break;
        case MySQLParser.NULL_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3467;
            this.match(MySQLParser.NULL_SYMBOL);
            break;
        case MySQLParser.DEFAULT_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 3468;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 3469;
            this.textStringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unionOption;
    return this;
}

UnionOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionOptionContext.prototype.constructor = UnionOptionContext;

UnionOptionContext.prototype.DISTINCT_SYMBOL = function() {
    return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
};

UnionOptionContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

UnionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnionOption(this);
	}
};

UnionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnionOption(this);
	}
};

UnionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnionOptionContext = UnionOptionContext;

MySQLParser.prototype.unionOption = function() {

    var localctx = new UnionOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, MySQLParser.RULE_unionOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3472;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ALL_SYMBOL || _la===MySQLParser.DISTINCT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableAlias;
    return this;
}

TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;

TableAliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableAliasContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

TableAliasContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

TableAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableAlias(this);
	}
};

TableAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableAlias(this);
	}
};

TableAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableAliasContext = TableAliasContext;

MySQLParser.prototype.tableAlias = function() {

    var localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, MySQLParser.RULE_tableAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3477;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
        if(la_===1) {
            this.state = 3474;
            this.match(MySQLParser.AS_SYMBOL);

        } else if(la_===2) {
            this.state = 3475;
            if (!( serverVersion < 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
            }
            this.state = 3476;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 3479;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexHintListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexHintList;
    return this;
}

IndexHintListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexHintListContext.prototype.constructor = IndexHintListContext;

IndexHintListContext.prototype.indexHint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexHintContext);
    } else {
        return this.getTypedRuleContext(IndexHintContext,i);
    }
};

IndexHintListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


IndexHintListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexHintList(this);
	}
};

IndexHintListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexHintList(this);
	}
};

IndexHintListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexHintList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexHintListContext = IndexHintListContext;

MySQLParser.prototype.indexHintList = function() {

    var localctx = new IndexHintListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, MySQLParser.RULE_indexHintList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3481;
        this.indexHint();
        this.state = 3486;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,381,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3482;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3483;
                this.indexHint(); 
            }
            this.state = 3488;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,381,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexHintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexHint;
    return this;
}

IndexHintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexHintContext.prototype.constructor = IndexHintContext;

IndexHintContext.prototype.indexHintType = function() {
    return this.getTypedRuleContext(IndexHintTypeContext,0);
};

IndexHintContext.prototype.keyOrIndex = function() {
    return this.getTypedRuleContext(KeyOrIndexContext,0);
};

IndexHintContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

IndexHintContext.prototype.indexList = function() {
    return this.getTypedRuleContext(IndexListContext,0);
};

IndexHintContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

IndexHintContext.prototype.indexHintClause = function() {
    return this.getTypedRuleContext(IndexHintClauseContext,0);
};

IndexHintContext.prototype.USE_SYMBOL = function() {
    return this.getToken(MySQLParser.USE_SYMBOL, 0);
};

IndexHintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexHint(this);
	}
};

IndexHintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexHint(this);
	}
};

IndexHintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexHint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexHintContext = IndexHintContext;

MySQLParser.prototype.indexHint = function() {

    var localctx = new IndexHintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, MySQLParser.RULE_indexHint);
    var _la = 0; // Token type
    try {
        this.state = 3509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.FORCE_SYMBOL:
        case MySQLParser.IGNORE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3489;
            this.indexHintType();
            this.state = 3490;
            this.keyOrIndex();
            this.state = 3492;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 3491;
                this.indexHintClause();
            }

            this.state = 3494;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3495;
            this.indexList();
            this.state = 3496;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.USE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3498;
            this.match(MySQLParser.USE_SYMBOL);
            this.state = 3499;
            this.keyOrIndex();
            this.state = 3501;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 3500;
                this.indexHintClause();
            }

            this.state = 3503;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3505;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
            if(la_===1) {
                this.state = 3504;
                this.indexList();

            }
            this.state = 3507;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexHintTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexHintType;
    return this;
}

IndexHintTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexHintTypeContext.prototype.constructor = IndexHintTypeContext;

IndexHintTypeContext.prototype.FORCE_SYMBOL = function() {
    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
};

IndexHintTypeContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

IndexHintTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexHintType(this);
	}
};

IndexHintTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexHintType(this);
	}
};

IndexHintTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexHintType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexHintTypeContext = IndexHintTypeContext;

MySQLParser.prototype.indexHintType = function() {

    var localctx = new IndexHintTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, MySQLParser.RULE_indexHintType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3511;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FORCE_SYMBOL || _la===MySQLParser.IGNORE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyOrIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyOrIndex;
    return this;
}

KeyOrIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyOrIndexContext.prototype.constructor = KeyOrIndexContext;

KeyOrIndexContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

KeyOrIndexContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

KeyOrIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyOrIndex(this);
	}
};

KeyOrIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyOrIndex(this);
	}
};

KeyOrIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyOrIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyOrIndexContext = KeyOrIndexContext;

MySQLParser.prototype.keyOrIndex = function() {

    var localctx = new KeyOrIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, MySQLParser.RULE_keyOrIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3513;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintKeyTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_constraintKeyType;
    return this;
}

ConstraintKeyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintKeyTypeContext.prototype.constructor = ConstraintKeyTypeContext;

ConstraintKeyTypeContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

ConstraintKeyTypeContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

ConstraintKeyTypeContext.prototype.UNIQUE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
};

ConstraintKeyTypeContext.prototype.keyOrIndex = function() {
    return this.getTypedRuleContext(KeyOrIndexContext,0);
};

ConstraintKeyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstraintKeyType(this);
	}
};

ConstraintKeyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstraintKeyType(this);
	}
};

ConstraintKeyTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstraintKeyType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConstraintKeyTypeContext = ConstraintKeyTypeContext;

MySQLParser.prototype.constraintKeyType = function() {

    var localctx = new ConstraintKeyTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, MySQLParser.RULE_constraintKeyType);
    var _la = 0; // Token type
    try {
        this.state = 3521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.PRIMARY_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3515;
            this.match(MySQLParser.PRIMARY_SYMBOL);
            this.state = 3516;
            this.match(MySQLParser.KEY_SYMBOL);
            break;
        case MySQLParser.UNIQUE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3517;
            this.match(MySQLParser.UNIQUE_SYMBOL);
            this.state = 3519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL) {
                this.state = 3518;
                this.keyOrIndex();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexHintClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexHintClause;
    return this;
}

IndexHintClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexHintClauseContext.prototype.constructor = IndexHintClauseContext;

IndexHintClauseContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

IndexHintClauseContext.prototype.JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
};

IndexHintClauseContext.prototype.ORDER_SYMBOL = function() {
    return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
};

IndexHintClauseContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

IndexHintClauseContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

IndexHintClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexHintClause(this);
	}
};

IndexHintClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexHintClause(this);
	}
};

IndexHintClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexHintClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexHintClauseContext = IndexHintClauseContext;

MySQLParser.prototype.indexHintClause = function() {

    var localctx = new IndexHintClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, MySQLParser.RULE_indexHintClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3523;
        this.match(MySQLParser.FOR_SYMBOL);
        this.state = 3529;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.JOIN_SYMBOL:
            this.state = 3524;
            this.match(MySQLParser.JOIN_SYMBOL);
            break;
        case MySQLParser.ORDER_SYMBOL:
            this.state = 3525;
            this.match(MySQLParser.ORDER_SYMBOL);
            this.state = 3526;
            this.match(MySQLParser.BY_SYMBOL);
            break;
        case MySQLParser.GROUP_SYMBOL:
            this.state = 3527;
            this.match(MySQLParser.GROUP_SYMBOL);
            this.state = 3528;
            this.match(MySQLParser.BY_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexList;
    return this;
}

IndexListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexListContext.prototype.constructor = IndexListContext;

IndexListContext.prototype.indexListElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexListElementContext);
    } else {
        return this.getTypedRuleContext(IndexListElementContext,i);
    }
};

IndexListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


IndexListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexList(this);
	}
};

IndexListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexList(this);
	}
};

IndexListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexListContext = IndexListContext;

MySQLParser.prototype.indexList = function() {

    var localctx = new IndexListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, MySQLParser.RULE_indexList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3531;
        this.indexListElement();
        this.state = 3536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 3532;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 3533;
            this.indexListElement();
            this.state = 3538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexListElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexListElement;
    return this;
}

IndexListElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexListElementContext.prototype.constructor = IndexListElementContext;

IndexListElementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IndexListElementContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

IndexListElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexListElement(this);
	}
};

IndexListElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexListElement(this);
	}
};

IndexListElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexListElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexListElementContext = IndexListElementContext;

MySQLParser.prototype.indexListElement = function() {

    var localctx = new IndexListElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, MySQLParser.RULE_indexListElement);
    try {
        this.state = 3541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3539;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3540;
            this.match(MySQLParser.PRIMARY_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_updateStatement;
    return this;
}

UpdateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateStatementContext.prototype.constructor = UpdateStatementContext;

UpdateStatementContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

UpdateStatementContext.prototype.tableReferenceList = function() {
    return this.getTypedRuleContext(TableReferenceListContext,0);
};

UpdateStatementContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

UpdateStatementContext.prototype.updateList = function() {
    return this.getTypedRuleContext(UpdateListContext,0);
};

UpdateStatementContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

UpdateStatementContext.prototype.LOW_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
};

UpdateStatementContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

UpdateStatementContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

UpdateStatementContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

UpdateStatementContext.prototype.simpleLimitClause = function() {
    return this.getTypedRuleContext(SimpleLimitClauseContext,0);
};

UpdateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUpdateStatement(this);
	}
};

UpdateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUpdateStatement(this);
	}
};

UpdateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUpdateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UpdateStatementContext = UpdateStatementContext;

MySQLParser.prototype.updateStatement = function() {

    var localctx = new UpdateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, MySQLParser.RULE_updateStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3545;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
        if(la_===1) {
            this.state = 3543;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 3544;
            this.withClause();

        }
        this.state = 3547;
        this.match(MySQLParser.UPDATE_SYMBOL);
        this.state = 3549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
        if(la_===1) {
            this.state = 3548;
            this.match(MySQLParser.LOW_PRIORITY_SYMBOL);

        }
        this.state = 3552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
        if(la_===1) {
            this.state = 3551;
            this.match(MySQLParser.IGNORE_SYMBOL);

        }
        this.state = 3554;
        this.tableReferenceList();
        this.state = 3555;
        this.match(MySQLParser.SET_SYMBOL);
        this.state = 3556;
        this.updateList();
        this.state = 3558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE_SYMBOL) {
            this.state = 3557;
            this.whereClause();
        }

        this.state = 3561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ORDER_SYMBOL) {
            this.state = 3560;
            this.orderClause();
        }

        this.state = 3564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LIMIT_SYMBOL) {
            this.state = 3563;
            this.simpleLimitClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionOrLockingStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionOrLockingStatement;
    return this;
}

TransactionOrLockingStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionOrLockingStatementContext.prototype.constructor = TransactionOrLockingStatementContext;

TransactionOrLockingStatementContext.prototype.transactionStatement = function() {
    return this.getTypedRuleContext(TransactionStatementContext,0);
};

TransactionOrLockingStatementContext.prototype.savepointStatement = function() {
    return this.getTypedRuleContext(SavepointStatementContext,0);
};

TransactionOrLockingStatementContext.prototype.lockStatement = function() {
    return this.getTypedRuleContext(LockStatementContext,0);
};

TransactionOrLockingStatementContext.prototype.xaStatement = function() {
    return this.getTypedRuleContext(XaStatementContext,0);
};

TransactionOrLockingStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionOrLockingStatement(this);
	}
};

TransactionOrLockingStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionOrLockingStatement(this);
	}
};

TransactionOrLockingStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionOrLockingStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionOrLockingStatementContext = TransactionOrLockingStatementContext;

MySQLParser.prototype.transactionOrLockingStatement = function() {

    var localctx = new TransactionOrLockingStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, MySQLParser.RULE_transactionOrLockingStatement);
    try {
        this.state = 3570;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3566;
            this.transactionStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3567;
            this.savepointStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3568;
            this.lockStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3569;
            this.xaStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionStatement;
    return this;
}

TransactionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionStatementContext.prototype.constructor = TransactionStatementContext;

TransactionStatementContext.prototype.START_SYMBOL = function() {
    return this.getToken(MySQLParser.START_SYMBOL, 0);
};

TransactionStatementContext.prototype.TRANSACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
};

TransactionStatementContext.prototype.transactionCharacteristic = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransactionCharacteristicContext);
    } else {
        return this.getTypedRuleContext(TransactionCharacteristicContext,i);
    }
};

TransactionStatementContext.prototype.COMMIT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
};

TransactionStatementContext.prototype.WORK_SYMBOL = function() {
    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
};

TransactionStatementContext.prototype.AND_SYMBOL = function() {
    return this.getToken(MySQLParser.AND_SYMBOL, 0);
};

TransactionStatementContext.prototype.CHAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
};

TransactionStatementContext.prototype.RELEASE_SYMBOL = function() {
    return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
};

TransactionStatementContext.prototype.NO_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NO_SYMBOL);
    } else {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
};


TransactionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionStatement(this);
	}
};

TransactionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionStatement(this);
	}
};

TransactionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionStatementContext = TransactionStatementContext;

MySQLParser.prototype.transactionStatement = function() {

    var localctx = new TransactionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, MySQLParser.RULE_transactionStatement);
    var _la = 0; // Token type
    try {
        this.state = 3597;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.START_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3572;
            this.match(MySQLParser.START_SYMBOL);
            this.state = 3573;
            this.match(MySQLParser.TRANSACTION_SYMBOL);
            this.state = 3577;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,398,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3574;
                    this.transactionCharacteristic(); 
                }
                this.state = 3579;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,398,this._ctx);
            }

            break;
        case MySQLParser.COMMIT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3580;
            this.match(MySQLParser.COMMIT_SYMBOL);
            this.state = 3582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WORK_SYMBOL) {
                this.state = 3581;
                this.match(MySQLParser.WORK_SYMBOL);
            }

            this.state = 3589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AND_SYMBOL) {
                this.state = 3584;
                this.match(MySQLParser.AND_SYMBOL);
                this.state = 3586;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.NO_SYMBOL) {
                    this.state = 3585;
                    this.match(MySQLParser.NO_SYMBOL);
                }

                this.state = 3588;
                this.match(MySQLParser.CHAIN_SYMBOL);
            }

            this.state = 3595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NO_SYMBOL || _la===MySQLParser.RELEASE_SYMBOL) {
                this.state = 3592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.NO_SYMBOL) {
                    this.state = 3591;
                    this.match(MySQLParser.NO_SYMBOL);
                }

                this.state = 3594;
                this.match(MySQLParser.RELEASE_SYMBOL);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BeginWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_beginWork;
    return this;
}

BeginWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginWorkContext.prototype.constructor = BeginWorkContext;

BeginWorkContext.prototype.BEGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
};

BeginWorkContext.prototype.WORK_SYMBOL = function() {
    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
};

BeginWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBeginWork(this);
	}
};

BeginWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBeginWork(this);
	}
};

BeginWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBeginWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BeginWorkContext = BeginWorkContext;

MySQLParser.prototype.beginWork = function() {

    var localctx = new BeginWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, MySQLParser.RULE_beginWork);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3599;
        this.match(MySQLParser.BEGIN_SYMBOL);
        this.state = 3601;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WORK_SYMBOL) {
            this.state = 3600;
            this.match(MySQLParser.WORK_SYMBOL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionCharacteristicContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionCharacteristic;
    return this;
}

TransactionCharacteristicContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionCharacteristicContext.prototype.constructor = TransactionCharacteristicContext;

TransactionCharacteristicContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

TransactionCharacteristicContext.prototype.CONSISTENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
};

TransactionCharacteristicContext.prototype.SNAPSHOT_SYMBOL = function() {
    return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
};

TransactionCharacteristicContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

TransactionCharacteristicContext.prototype.WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
};

TransactionCharacteristicContext.prototype.ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
};

TransactionCharacteristicContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionCharacteristic(this);
	}
};

TransactionCharacteristicContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionCharacteristic(this);
	}
};

TransactionCharacteristicContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionCharacteristic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionCharacteristicContext = TransactionCharacteristicContext;

MySQLParser.prototype.transactionCharacteristic = function() {

    var localctx = new TransactionCharacteristicContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, MySQLParser.RULE_transactionCharacteristic);
    var _la = 0; // Token type
    try {
        this.state = 3609;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3603;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 3604;
            this.match(MySQLParser.CONSISTENT_SYMBOL);
            this.state = 3605;
            this.match(MySQLParser.SNAPSHOT_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3606;
            if (!( serverVersion >= 50605)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50605");
            }
            this.state = 3607;
            this.match(MySQLParser.READ_SYMBOL);
            this.state = 3608;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ONLY_SYMBOL || _la===MySQLParser.WRITE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SavepointStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_savepointStatement;
    return this;
}

SavepointStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SavepointStatementContext.prototype.constructor = SavepointStatementContext;

SavepointStatementContext.prototype.SAVEPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
};

SavepointStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SavepointStatementContext.prototype.ROLLBACK_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
};

SavepointStatementContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

SavepointStatementContext.prototype.WORK_SYMBOL = function() {
    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
};

SavepointStatementContext.prototype.AND_SYMBOL = function() {
    return this.getToken(MySQLParser.AND_SYMBOL, 0);
};

SavepointStatementContext.prototype.CHAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
};

SavepointStatementContext.prototype.RELEASE_SYMBOL = function() {
    return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
};

SavepointStatementContext.prototype.NO_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NO_SYMBOL);
    } else {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
};


SavepointStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSavepointStatement(this);
	}
};

SavepointStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSavepointStatement(this);
	}
};

SavepointStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSavepointStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SavepointStatementContext = SavepointStatementContext;

MySQLParser.prototype.savepointStatement = function() {

    var localctx = new SavepointStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, MySQLParser.RULE_savepointStatement);
    var _la = 0; // Token type
    try {
        this.state = 3640;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SAVEPOINT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3611;
            this.match(MySQLParser.SAVEPOINT_SYMBOL);
            this.state = 3612;
            this.identifier();
            break;
        case MySQLParser.ROLLBACK_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3613;
            this.match(MySQLParser.ROLLBACK_SYMBOL);
            this.state = 3615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WORK_SYMBOL) {
                this.state = 3614;
                this.match(MySQLParser.WORK_SYMBOL);
            }

            this.state = 3635;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.TO_SYMBOL:
                this.state = 3617;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 3619;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
                if(la_===1) {
                    this.state = 3618;
                    this.match(MySQLParser.SAVEPOINT_SYMBOL);

                }
                this.state = 3621;
                this.identifier();
                break;
            case MySQLParser.EOF:
            case MySQLParser.NO_SYMBOL:
            case MySQLParser.SEMICOLON_SYMBOL:
            case MySQLParser.AND_SYMBOL:
            case MySQLParser.RELEASE_SYMBOL:
                this.state = 3627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AND_SYMBOL) {
                    this.state = 3622;
                    this.match(MySQLParser.AND_SYMBOL);
                    this.state = 3624;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NO_SYMBOL) {
                        this.state = 3623;
                        this.match(MySQLParser.NO_SYMBOL);
                    }

                    this.state = 3626;
                    this.match(MySQLParser.CHAIN_SYMBOL);
                }

                this.state = 3633;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.NO_SYMBOL || _la===MySQLParser.RELEASE_SYMBOL) {
                    this.state = 3630;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NO_SYMBOL) {
                        this.state = 3629;
                        this.match(MySQLParser.NO_SYMBOL);
                    }

                    this.state = 3632;
                    this.match(MySQLParser.RELEASE_SYMBOL);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case MySQLParser.RELEASE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 3637;
            this.match(MySQLParser.RELEASE_SYMBOL);
            this.state = 3638;
            this.match(MySQLParser.SAVEPOINT_SYMBOL);
            this.state = 3639;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockStatement;
    return this;
}

LockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockStatementContext.prototype.constructor = LockStatementContext;

LockStatementContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

LockStatementContext.prototype.lockItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LockItemContext);
    } else {
        return this.getTypedRuleContext(LockItemContext,i);
    }
};

LockStatementContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

LockStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

LockStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


LockStatementContext.prototype.INSTANCE_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
};

LockStatementContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

LockStatementContext.prototype.BACKUP_SYMBOL = function() {
    return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
};

LockStatementContext.prototype.UNLOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
};

LockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockStatement(this);
	}
};

LockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockStatement(this);
	}
};

LockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockStatementContext = LockStatementContext;

MySQLParser.prototype.lockStatement = function() {

    var localctx = new LockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, MySQLParser.RULE_lockStatement);
    var _la = 0; // Token type
    try {
        this.state = 3664;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3642;
            this.match(MySQLParser.LOCK_SYMBOL);
            this.state = 3643;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.TABLES_SYMBOL || _la===MySQLParser.TABLE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3644;
            this.lockItem();
            this.state = 3649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 3645;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3646;
                this.lockItem();
                this.state = 3651;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3652;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 3653;
            this.match(MySQLParser.LOCK_SYMBOL);
            this.state = 3654;
            this.match(MySQLParser.INSTANCE_SYMBOL);
            this.state = 3655;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 3656;
            this.match(MySQLParser.BACKUP_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3657;
            this.match(MySQLParser.UNLOCK_SYMBOL);
            this.state = 3662;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3658;
                this.match(MySQLParser.TABLES_SYMBOL);
                break;

            case 2:
                this.state = 3659;
                this.match(MySQLParser.TABLE_SYMBOL);
                break;

            case 3:
                this.state = 3660;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 3661;
                this.match(MySQLParser.INSTANCE_SYMBOL);
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockItem;
    return this;
}

LockItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockItemContext.prototype.constructor = LockItemContext;

LockItemContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

LockItemContext.prototype.lockOption = function() {
    return this.getTypedRuleContext(LockOptionContext,0);
};

LockItemContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

LockItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockItem(this);
	}
};

LockItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockItem(this);
	}
};

LockItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockItemContext = LockItemContext;

MySQLParser.prototype.lockItem = function() {

    var localctx = new LockItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, MySQLParser.RULE_lockItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3666;
        this.tableRef();
        this.state = 3668;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
        if(la_===1) {
            this.state = 3667;
            this.tableAlias();

        }
        this.state = 3670;
        this.lockOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockOption;
    return this;
}

LockOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockOptionContext.prototype.constructor = LockOptionContext;

LockOptionContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

LockOptionContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

LockOptionContext.prototype.WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
};

LockOptionContext.prototype.LOW_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
};

LockOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockOption(this);
	}
};

LockOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockOption(this);
	}
};

LockOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockOptionContext = LockOptionContext;

MySQLParser.prototype.lockOption = function() {

    var localctx = new LockOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, MySQLParser.RULE_lockOption);
    var _la = 0; // Token type
    try {
        this.state = 3680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.READ_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3672;
            this.match(MySQLParser.READ_SYMBOL);
            this.state = 3674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL) {
                this.state = 3673;
                this.match(MySQLParser.LOCAL_SYMBOL);
            }

            break;
        case MySQLParser.LOW_PRIORITY_SYMBOL:
        case MySQLParser.WRITE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3677;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOW_PRIORITY_SYMBOL) {
                this.state = 3676;
                this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
            }

            this.state = 3679;
            this.match(MySQLParser.WRITE_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaStatement;
    return this;
}

XaStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaStatementContext.prototype.constructor = XaStatementContext;

XaStatementContext.prototype.XA_SYMBOL = function() {
    return this.getToken(MySQLParser.XA_SYMBOL, 0);
};

XaStatementContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaStatementContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

XaStatementContext.prototype.PREPARE_SYMBOL = function() {
    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
};

XaStatementContext.prototype.COMMIT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
};

XaStatementContext.prototype.ROLLBACK_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
};

XaStatementContext.prototype.RECOVER_SYMBOL = function() {
    return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
};

XaStatementContext.prototype.xaConvert = function() {
    return this.getTypedRuleContext(XaConvertContext,0);
};

XaStatementContext.prototype.START_SYMBOL = function() {
    return this.getToken(MySQLParser.START_SYMBOL, 0);
};

XaStatementContext.prototype.BEGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
};

XaStatementContext.prototype.SUSPEND_SYMBOL = function() {
    return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
};

XaStatementContext.prototype.ONE_SYMBOL = function() {
    return this.getToken(MySQLParser.ONE_SYMBOL, 0);
};

XaStatementContext.prototype.PHASE_SYMBOL = function() {
    return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
};

XaStatementContext.prototype.JOIN_SYMBOL = function() {
    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
};

XaStatementContext.prototype.RESUME_SYMBOL = function() {
    return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
};

XaStatementContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

XaStatementContext.prototype.MIGRATE_SYMBOL = function() {
    return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
};

XaStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaStatement(this);
	}
};

XaStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaStatement(this);
	}
};

XaStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaStatementContext = XaStatementContext;

MySQLParser.prototype.xaStatement = function() {

    var localctx = new XaStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, MySQLParser.RULE_xaStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3682;
        this.match(MySQLParser.XA_SYMBOL);
        this.state = 3709;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.BEGIN_SYMBOL:
        case MySQLParser.START_SYMBOL:
            this.state = 3683;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BEGIN_SYMBOL || _la===MySQLParser.START_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3684;
            this.xid();
            this.state = 3686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.RESUME_SYMBOL || _la===MySQLParser.JOIN_SYMBOL) {
                this.state = 3685;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.RESUME_SYMBOL || _la===MySQLParser.JOIN_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;
        case MySQLParser.END_SYMBOL:
            this.state = 3688;
            this.match(MySQLParser.END_SYMBOL);
            this.state = 3689;
            this.xid();
            this.state = 3695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUSPEND_SYMBOL) {
                this.state = 3690;
                this.match(MySQLParser.SUSPEND_SYMBOL);
                this.state = 3693;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.FOR_SYMBOL) {
                    this.state = 3691;
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.state = 3692;
                    this.match(MySQLParser.MIGRATE_SYMBOL);
                }

            }

            break;
        case MySQLParser.PREPARE_SYMBOL:
            this.state = 3697;
            this.match(MySQLParser.PREPARE_SYMBOL);
            this.state = 3698;
            this.xid();
            break;
        case MySQLParser.COMMIT_SYMBOL:
            this.state = 3699;
            this.match(MySQLParser.COMMIT_SYMBOL);
            this.state = 3700;
            this.xid();
            this.state = 3703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ONE_SYMBOL) {
                this.state = 3701;
                this.match(MySQLParser.ONE_SYMBOL);
                this.state = 3702;
                this.match(MySQLParser.PHASE_SYMBOL);
            }

            break;
        case MySQLParser.ROLLBACK_SYMBOL:
            this.state = 3705;
            this.match(MySQLParser.ROLLBACK_SYMBOL);
            this.state = 3706;
            this.xid();
            break;
        case MySQLParser.RECOVER_SYMBOL:
            this.state = 3707;
            this.match(MySQLParser.RECOVER_SYMBOL);
            this.state = 3708;
            this.xaConvert();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaConvertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaConvert;
    return this;
}

XaConvertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaConvertContext.prototype.constructor = XaConvertContext;

XaConvertContext.prototype.CONVERT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
};

XaConvertContext.prototype.XID_SYMBOL = function() {
    return this.getToken(MySQLParser.XID_SYMBOL, 0);
};

XaConvertContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaConvert(this);
	}
};

XaConvertContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaConvert(this);
	}
};

XaConvertContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaConvert(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaConvertContext = XaConvertContext;

MySQLParser.prototype.xaConvert = function() {

    var localctx = new XaConvertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, MySQLParser.RULE_xaConvert);
    var _la = 0; // Token type
    try {
        this.state = 3717;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3711;
            if (!( serverVersion >= 50704)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
            }
            this.state = 3714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONVERT_SYMBOL) {
                this.state = 3712;
                this.match(MySQLParser.CONVERT_SYMBOL);
                this.state = 3713;
                this.match(MySQLParser.XID_SYMBOL);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xid;
    return this;
}

XidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XidContext.prototype.constructor = XidContext;

XidContext.prototype.textString = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextStringContext);
    } else {
        return this.getTypedRuleContext(TextStringContext,i);
    }
};

XidContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


XidContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

XidContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXid(this);
	}
};

XidContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXid(this);
	}
};

XidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XidContext = XidContext;

MySQLParser.prototype.xid = function() {

    var localctx = new XidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, MySQLParser.RULE_xid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3719;
        this.textString();
        this.state = 3726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 3720;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 3721;
            this.textString();
            this.state = 3724;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 3722;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3723;
                this.ulong_number();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplicationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replicationStatement;
    return this;
}

ReplicationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationStatementContext.prototype.constructor = ReplicationStatementContext;

ReplicationStatementContext.prototype.PURGE_SYMBOL = function() {
    return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
};

ReplicationStatementContext.prototype.LOGS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
};

ReplicationStatementContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

ReplicationStatementContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

ReplicationStatementContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

ReplicationStatementContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

ReplicationStatementContext.prototype.BEFORE_SYMBOL = function() {
    return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
};

ReplicationStatementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ReplicationStatementContext.prototype.changeMaster = function() {
    return this.getTypedRuleContext(ChangeMasterContext,0);
};

ReplicationStatementContext.prototype.RESET_SYMBOL = function() {
    return this.getToken(MySQLParser.RESET_SYMBOL, 0);
};

ReplicationStatementContext.prototype.resetOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResetOptionContext);
    } else {
        return this.getTypedRuleContext(ResetOptionContext,i);
    }
};

ReplicationStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ReplicationStatementContext.prototype.PERSIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
};

ReplicationStatementContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

ReplicationStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ReplicationStatementContext.prototype.slave = function() {
    return this.getTypedRuleContext(SlaveContext,0);
};

ReplicationStatementContext.prototype.changeReplication = function() {
    return this.getTypedRuleContext(ChangeReplicationContext,0);
};

ReplicationStatementContext.prototype.replicationLoad = function() {
    return this.getTypedRuleContext(ReplicationLoadContext,0);
};

ReplicationStatementContext.prototype.groupReplication = function() {
    return this.getTypedRuleContext(GroupReplicationContext,0);
};

ReplicationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReplicationStatement(this);
	}
};

ReplicationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReplicationStatement(this);
	}
};

ReplicationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReplicationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReplicationStatementContext = ReplicationStatementContext;

MySQLParser.prototype.replicationStatement = function() {

    var localctx = new ReplicationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, MySQLParser.RULE_replicationStatement);
    var _la = 0; // Token type
    try {
        this.state = 3761;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3728;
            this.match(MySQLParser.PURGE_SYMBOL);
            this.state = 3729;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.MASTER_SYMBOL || _la===MySQLParser.BINARY_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3730;
            this.match(MySQLParser.LOGS_SYMBOL);
            this.state = 3735;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.TO_SYMBOL:
                this.state = 3731;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 3732;
                this.textLiteral();
                break;
            case MySQLParser.BEFORE_SYMBOL:
                this.state = 3733;
                this.match(MySQLParser.BEFORE_SYMBOL);
                this.state = 3734;
                this.expr(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3737;
            this.changeMaster();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3738;
            this.match(MySQLParser.RESET_SYMBOL);
            this.state = 3739;
            this.resetOption();
            this.state = 3744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 3740;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3741;
                this.resetOption();
                this.state = 3746;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3747;
            if (!( serverVersion > 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 80000");
            }
            this.state = 3748;
            this.match(MySQLParser.RESET_SYMBOL);
            this.state = 3749;
            this.match(MySQLParser.PERSIST_SYMBOL);
            this.state = 3753;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF_SYMBOL) {
                this.state = 3750;
                this.ifExists();
                this.state = 3751;
                this.identifier();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3755;
            this.slave();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3756;
            if (!( serverVersion >= 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
            }
            this.state = 3757;
            this.changeReplication();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 3758;
            this.replicationLoad();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 3759;
            if (!( serverVersion > 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 50706");
            }
            this.state = 3760;
            this.groupReplication();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResetOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resetOption;
    this.option = null; // Token
    return this;
}

ResetOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResetOptionContext.prototype.constructor = ResetOptionContext;

ResetOptionContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

ResetOptionContext.prototype.masterResetOptions = function() {
    return this.getTypedRuleContext(MasterResetOptionsContext,0);
};

ResetOptionContext.prototype.CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
};

ResetOptionContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

ResetOptionContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

ResetOptionContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

ResetOptionContext.prototype.channel = function() {
    return this.getTypedRuleContext(ChannelContext,0);
};

ResetOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResetOption(this);
	}
};

ResetOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResetOption(this);
	}
};

ResetOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResetOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResetOptionContext = ResetOptionContext;

MySQLParser.prototype.resetOption = function() {

    var localctx = new ResetOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, MySQLParser.RULE_resetOption);
    try {
        this.state = 3777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3763;
            localctx.option = this.match(MySQLParser.MASTER_SYMBOL);
            this.state = 3765;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
            if(la_===1) {
                this.state = 3764;
                this.masterResetOptions();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3767;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 3768;
            localctx.option = this.match(MySQLParser.QUERY_SYMBOL);
            this.state = 3769;
            this.match(MySQLParser.CACHE_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3770;
            localctx.option = this.match(MySQLParser.SLAVE_SYMBOL);
            this.state = 3772;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
            if(la_===1) {
                this.state = 3771;
                this.match(MySQLParser.ALL_SYMBOL);

            }
            this.state = 3775;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
            if(la_===1) {
                this.state = 3774;
                this.channel();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MasterResetOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_masterResetOptions;
    return this;
}

MasterResetOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MasterResetOptionsContext.prototype.constructor = MasterResetOptionsContext;

MasterResetOptionsContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

MasterResetOptionsContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

MasterResetOptionsContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

MasterResetOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterResetOptions(this);
	}
};

MasterResetOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterResetOptions(this);
	}
};

MasterResetOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterResetOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MasterResetOptionsContext = MasterResetOptionsContext;

MySQLParser.prototype.masterResetOptions = function() {

    var localctx = new MasterResetOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, MySQLParser.RULE_masterResetOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3779;
        if (!( serverVersion >= 80000)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
        }
        this.state = 3780;
        this.match(MySQLParser.TO_SYMBOL);
        this.state = 3785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3781;
            if (!( serverVersion < 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
            }
            this.state = 3782;
            this.real_ulong_number();
            break;

        case 2:
            this.state = 3783;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 3784;
            this.real_ulonglong_number();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplicationLoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replicationLoad;
    return this;
}

ReplicationLoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationLoadContext.prototype.constructor = ReplicationLoadContext;

ReplicationLoadContext.prototype.LOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
};

ReplicationLoadContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

ReplicationLoadContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

ReplicationLoadContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

ReplicationLoadContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

ReplicationLoadContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

ReplicationLoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReplicationLoad(this);
	}
};

ReplicationLoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReplicationLoad(this);
	}
};

ReplicationLoadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReplicationLoad(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReplicationLoadContext = ReplicationLoadContext;

MySQLParser.prototype.replicationLoad = function() {

    var localctx = new ReplicationLoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, MySQLParser.RULE_replicationLoad);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3787;
        this.match(MySQLParser.LOAD_SYMBOL);
        this.state = 3791;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.DATA_SYMBOL:
            this.state = 3788;
            this.match(MySQLParser.DATA_SYMBOL);
            break;
        case MySQLParser.TABLE_SYMBOL:
            this.state = 3789;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 3790;
            this.tableRef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3793;
        this.match(MySQLParser.FROM_SYMBOL);
        this.state = 3794;
        this.match(MySQLParser.MASTER_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangeMasterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_changeMaster;
    return this;
}

ChangeMasterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangeMasterContext.prototype.constructor = ChangeMasterContext;

ChangeMasterContext.prototype.CHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
};

ChangeMasterContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

ChangeMasterContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

ChangeMasterContext.prototype.changeMasterOptions = function() {
    return this.getTypedRuleContext(ChangeMasterOptionsContext,0);
};

ChangeMasterContext.prototype.channel = function() {
    return this.getTypedRuleContext(ChannelContext,0);
};

ChangeMasterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChangeMaster(this);
	}
};

ChangeMasterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChangeMaster(this);
	}
};

ChangeMasterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChangeMaster(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChangeMasterContext = ChangeMasterContext;

MySQLParser.prototype.changeMaster = function() {

    var localctx = new ChangeMasterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, MySQLParser.RULE_changeMaster);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3796;
        this.match(MySQLParser.CHANGE_SYMBOL);
        this.state = 3797;
        this.match(MySQLParser.MASTER_SYMBOL);
        this.state = 3798;
        this.match(MySQLParser.TO_SYMBOL);
        this.state = 3799;
        this.changeMasterOptions();
        this.state = 3801;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
        if(la_===1) {
            this.state = 3800;
            this.channel();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangeMasterOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_changeMasterOptions;
    return this;
}

ChangeMasterOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangeMasterOptionsContext.prototype.constructor = ChangeMasterOptionsContext;

ChangeMasterOptionsContext.prototype.masterOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MasterOptionContext);
    } else {
        return this.getTypedRuleContext(MasterOptionContext,i);
    }
};

ChangeMasterOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ChangeMasterOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChangeMasterOptions(this);
	}
};

ChangeMasterOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChangeMasterOptions(this);
	}
};

ChangeMasterOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChangeMasterOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChangeMasterOptionsContext = ChangeMasterOptionsContext;

MySQLParser.prototype.changeMasterOptions = function() {

    var localctx = new ChangeMasterOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, MySQLParser.RULE_changeMasterOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3803;
        this.masterOption();
        this.state = 3808;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,442,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3804;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3805;
                this.masterOption(); 
            }
            this.state = 3810;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,442,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MasterOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_masterOption;
    return this;
}

MasterOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MasterOptionContext.prototype.constructor = MasterOptionContext;

MasterOptionContext.prototype.MASTER_HOST_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
};

MasterOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

MasterOptionContext.prototype.textStringNoLinebreak = function() {
    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
};

MasterOptionContext.prototype.NETWORK_NAMESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_BIND_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_PORT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
};

MasterOptionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

MasterOptionContext.prototype.MASTER_CONNECT_RETRY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_RETRY_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_DELAY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_CA_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_CAPATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_TLS_VERSION_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_CERT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_TLS_CIPHERSUITES_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
};

MasterOptionContext.prototype.masterTlsCiphersuitesDef = function() {
    return this.getTypedRuleContext(MasterTlsCiphersuitesDefContext,0);
};

MasterOptionContext.prototype.MASTER_SSL_CIPHER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_SSL_CRL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
};

MasterOptionContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

MasterOptionContext.prototype.MASTER_SSL_CRLPATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_PUBLIC_KEY_PATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
};

MasterOptionContext.prototype.GET_MASTER_PUBLIC_KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_HEARTBEAT_PERIOD_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
};

MasterOptionContext.prototype.IGNORE_SERVER_IDS_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
};

MasterOptionContext.prototype.serverIdList = function() {
    return this.getTypedRuleContext(ServerIdListContext,0);
};

MasterOptionContext.prototype.MASTER_COMPRESSION_ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
};

MasterOptionContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

MasterOptionContext.prototype.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
};

MasterOptionContext.prototype.MASTER_AUTO_POSITION_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
};

MasterOptionContext.prototype.PRIVILEGE_CHECKS_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
};

MasterOptionContext.prototype.privilegeCheckDef = function() {
    return this.getTypedRuleContext(PrivilegeCheckDefContext,0);
};

MasterOptionContext.prototype.masterFileDef = function() {
    return this.getTypedRuleContext(MasterFileDefContext,0);
};

MasterOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterOption(this);
	}
};

MasterOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterOption(this);
	}
};

MasterOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MasterOptionContext = MasterOptionContext;

MySQLParser.prototype.masterOption = function() {

    var localctx = new MasterOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, MySQLParser.RULE_masterOption);
    try {
        this.state = 3896;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.MASTER_HOST_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3811;
            this.match(MySQLParser.MASTER_HOST_SYMBOL);
            this.state = 3812;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3813;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3814;
            this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
            this.state = 3815;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3816;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_BIND_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 3817;
            this.match(MySQLParser.MASTER_BIND_SYMBOL);
            this.state = 3818;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3819;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_USER_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 3820;
            this.match(MySQLParser.MASTER_USER_SYMBOL);
            this.state = 3821;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3822;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_PASSWORD_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 3823;
            this.match(MySQLParser.MASTER_PASSWORD_SYMBOL);
            this.state = 3824;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3825;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_PORT_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 3826;
            this.match(MySQLParser.MASTER_PORT_SYMBOL);
            this.state = 3827;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3828;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
            this.enterOuterAlt(localctx, 7);
            this.state = 3829;
            this.match(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL);
            this.state = 3830;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3831;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
            this.enterOuterAlt(localctx, 8);
            this.state = 3832;
            this.match(MySQLParser.MASTER_RETRY_COUNT_SYMBOL);
            this.state = 3833;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3834;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_DELAY_SYMBOL:
            this.enterOuterAlt(localctx, 9);
            this.state = 3835;
            this.match(MySQLParser.MASTER_DELAY_SYMBOL);
            this.state = 3836;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3837;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_SSL_SYMBOL:
            this.enterOuterAlt(localctx, 10);
            this.state = 3838;
            this.match(MySQLParser.MASTER_SSL_SYMBOL);
            this.state = 3839;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3840;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_SSL_CA_SYMBOL:
            this.enterOuterAlt(localctx, 11);
            this.state = 3841;
            this.match(MySQLParser.MASTER_SSL_CA_SYMBOL);
            this.state = 3842;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3843;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
            this.enterOuterAlt(localctx, 12);
            this.state = 3844;
            this.match(MySQLParser.MASTER_SSL_CAPATH_SYMBOL);
            this.state = 3845;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3846;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
            this.enterOuterAlt(localctx, 13);
            this.state = 3847;
            this.match(MySQLParser.MASTER_TLS_VERSION_SYMBOL);
            this.state = 3848;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3849;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_SSL_CERT_SYMBOL:
            this.enterOuterAlt(localctx, 14);
            this.state = 3850;
            this.match(MySQLParser.MASTER_SSL_CERT_SYMBOL);
            this.state = 3851;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3852;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
            this.enterOuterAlt(localctx, 15);
            this.state = 3853;
            this.match(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL);
            this.state = 3854;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3855;
            this.masterTlsCiphersuitesDef();
            break;
        case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
            this.enterOuterAlt(localctx, 16);
            this.state = 3856;
            this.match(MySQLParser.MASTER_SSL_CIPHER_SYMBOL);
            this.state = 3857;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3858;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_SSL_KEY_SYMBOL:
            this.enterOuterAlt(localctx, 17);
            this.state = 3859;
            this.match(MySQLParser.MASTER_SSL_KEY_SYMBOL);
            this.state = 3860;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3861;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
            this.enterOuterAlt(localctx, 18);
            this.state = 3862;
            this.match(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
            this.state = 3863;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3864;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_SSL_CRL_SYMBOL:
            this.enterOuterAlt(localctx, 19);
            this.state = 3865;
            this.match(MySQLParser.MASTER_SSL_CRL_SYMBOL);
            this.state = 3866;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3867;
            this.textLiteral();
            break;
        case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
            this.enterOuterAlt(localctx, 20);
            this.state = 3868;
            this.match(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL);
            this.state = 3869;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3870;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
            this.enterOuterAlt(localctx, 21);
            this.state = 3871;
            this.match(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL);
            this.state = 3872;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3873;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
            this.enterOuterAlt(localctx, 22);
            this.state = 3874;
            this.match(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL);
            this.state = 3875;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3876;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
            this.enterOuterAlt(localctx, 23);
            this.state = 3877;
            this.match(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL);
            this.state = 3878;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3879;
            this.ulong_number();
            break;
        case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
            this.enterOuterAlt(localctx, 24);
            this.state = 3880;
            this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
            this.state = 3881;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3882;
            this.serverIdList();
            break;
        case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
            this.enterOuterAlt(localctx, 25);
            this.state = 3883;
            this.match(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL);
            this.state = 3884;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3885;
            this.textStringLiteral();
            break;
        case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
            this.enterOuterAlt(localctx, 26);
            this.state = 3886;
            this.match(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
            this.state = 3887;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3888;
            this.ulong_number();
            break;
        case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
            this.enterOuterAlt(localctx, 27);
            this.state = 3889;
            this.match(MySQLParser.MASTER_AUTO_POSITION_SYMBOL);
            this.state = 3890;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3891;
            this.ulong_number();
            break;
        case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
            this.enterOuterAlt(localctx, 28);
            this.state = 3892;
            this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
            this.state = 3893;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3894;
            this.privilegeCheckDef();
            break;
        case MySQLParser.MASTER_LOG_FILE_SYMBOL:
        case MySQLParser.MASTER_LOG_POS_SYMBOL:
        case MySQLParser.RELAY_LOG_FILE_SYMBOL:
        case MySQLParser.RELAY_LOG_POS_SYMBOL:
            this.enterOuterAlt(localctx, 29);
            this.state = 3895;
            this.masterFileDef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrivilegeCheckDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_privilegeCheckDef;
    return this;
}

PrivilegeCheckDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeCheckDefContext.prototype.constructor = PrivilegeCheckDefContext;

PrivilegeCheckDefContext.prototype.userIdentifierOrText = function() {
    return this.getTypedRuleContext(UserIdentifierOrTextContext,0);
};

PrivilegeCheckDefContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

PrivilegeCheckDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrivilegeCheckDef(this);
	}
};

PrivilegeCheckDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrivilegeCheckDef(this);
	}
};

PrivilegeCheckDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrivilegeCheckDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PrivilegeCheckDefContext = PrivilegeCheckDefContext;

MySQLParser.prototype.privilegeCheckDef = function() {

    var localctx = new PrivilegeCheckDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, MySQLParser.RULE_privilegeCheckDef);
    try {
        this.state = 3900;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,444,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3898;
            this.userIdentifierOrText();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3899;
            this.match(MySQLParser.NULL_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MasterTlsCiphersuitesDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_masterTlsCiphersuitesDef;
    return this;
}

MasterTlsCiphersuitesDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MasterTlsCiphersuitesDefContext.prototype.constructor = MasterTlsCiphersuitesDefContext;

MasterTlsCiphersuitesDefContext.prototype.textStringNoLinebreak = function() {
    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
};

MasterTlsCiphersuitesDefContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

MasterTlsCiphersuitesDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterTlsCiphersuitesDef(this);
	}
};

MasterTlsCiphersuitesDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterTlsCiphersuitesDef(this);
	}
};

MasterTlsCiphersuitesDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterTlsCiphersuitesDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MasterTlsCiphersuitesDefContext = MasterTlsCiphersuitesDefContext;

MySQLParser.prototype.masterTlsCiphersuitesDef = function() {

    var localctx = new MasterTlsCiphersuitesDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, MySQLParser.RULE_masterTlsCiphersuitesDef);
    try {
        this.state = 3904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3902;
            this.textStringNoLinebreak();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3903;
            this.match(MySQLParser.NULL_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MasterFileDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_masterFileDef;
    return this;
}

MasterFileDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MasterFileDefContext.prototype.constructor = MasterFileDefContext;

MasterFileDefContext.prototype.MASTER_LOG_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
};

MasterFileDefContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

MasterFileDefContext.prototype.textStringNoLinebreak = function() {
    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
};

MasterFileDefContext.prototype.MASTER_LOG_POS_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
};

MasterFileDefContext.prototype.ulonglong_number = function() {
    return this.getTypedRuleContext(Ulonglong_numberContext,0);
};

MasterFileDefContext.prototype.RELAY_LOG_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
};

MasterFileDefContext.prototype.RELAY_LOG_POS_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
};

MasterFileDefContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

MasterFileDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterFileDef(this);
	}
};

MasterFileDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterFileDef(this);
	}
};

MasterFileDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterFileDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MasterFileDefContext = MasterFileDefContext;

MySQLParser.prototype.masterFileDef = function() {

    var localctx = new MasterFileDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, MySQLParser.RULE_masterFileDef);
    try {
        this.state = 3918;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3906;
            this.match(MySQLParser.MASTER_LOG_FILE_SYMBOL);
            this.state = 3907;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3908;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.MASTER_LOG_POS_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3909;
            this.match(MySQLParser.MASTER_LOG_POS_SYMBOL);
            this.state = 3910;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3911;
            this.ulonglong_number();
            break;
        case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 3912;
            this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
            this.state = 3913;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3914;
            this.textStringNoLinebreak();
            break;
        case MySQLParser.RELAY_LOG_POS_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 3915;
            this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
            this.state = 3916;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3917;
            this.ulong_number();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ServerIdListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_serverIdList;
    return this;
}

ServerIdListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerIdListContext.prototype.constructor = ServerIdListContext;

ServerIdListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ServerIdListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ServerIdListContext.prototype.ulong_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ulong_numberContext);
    } else {
        return this.getTypedRuleContext(Ulong_numberContext,i);
    }
};

ServerIdListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ServerIdListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterServerIdList(this);
	}
};

ServerIdListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitServerIdList(this);
	}
};

ServerIdListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitServerIdList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ServerIdListContext = ServerIdListContext;

MySQLParser.prototype.serverIdList = function() {

    var localctx = new ServerIdListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, MySQLParser.RULE_serverIdList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3920;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 3929;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & ((1 << (MySQLParser.HEX_NUMBER - 421)) | (1 << (MySQLParser.DECIMAL_NUMBER - 421)) | (1 << (MySQLParser.FLOAT_NUMBER - 421)))) !== 0)) {
            this.state = 3921;
            this.ulong_number();
            this.state = 3926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 3922;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3923;
                this.ulong_number();
                this.state = 3928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 3931;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangeReplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_changeReplication;
    return this;
}

ChangeReplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangeReplicationContext.prototype.constructor = ChangeReplicationContext;

ChangeReplicationContext.prototype.CHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
};

ChangeReplicationContext.prototype.REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
};

ChangeReplicationContext.prototype.FILTER_SYMBOL = function() {
    return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
};

ChangeReplicationContext.prototype.filterDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FilterDefinitionContext);
    } else {
        return this.getTypedRuleContext(FilterDefinitionContext,i);
    }
};

ChangeReplicationContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ChangeReplicationContext.prototype.channel = function() {
    return this.getTypedRuleContext(ChannelContext,0);
};

ChangeReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChangeReplication(this);
	}
};

ChangeReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChangeReplication(this);
	}
};

ChangeReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChangeReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChangeReplicationContext = ChangeReplicationContext;

MySQLParser.prototype.changeReplication = function() {

    var localctx = new ChangeReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, MySQLParser.RULE_changeReplication);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3933;
        this.match(MySQLParser.CHANGE_SYMBOL);
        this.state = 3934;
        this.match(MySQLParser.REPLICATION_SYMBOL);
        this.state = 3935;
        this.match(MySQLParser.FILTER_SYMBOL);
        this.state = 3936;
        this.filterDefinition();
        this.state = 3941;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,449,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3937;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3938;
                this.filterDefinition(); 
            }
            this.state = 3943;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,449,this._ctx);
        }

        this.state = 3946;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,450,this._ctx);
        if(la_===1) {
            this.state = 3944;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 3945;
            this.channel();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterDefinition;
    return this;
}

FilterDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterDefinitionContext.prototype.constructor = FilterDefinitionContext;

FilterDefinitionContext.prototype.REPLICATE_DO_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
};

FilterDefinitionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

FilterDefinitionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

FilterDefinitionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

FilterDefinitionContext.prototype.filterDbList = function() {
    return this.getTypedRuleContext(FilterDbListContext,0);
};

FilterDefinitionContext.prototype.REPLICATE_IGNORE_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
};

FilterDefinitionContext.prototype.REPLICATE_DO_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
};

FilterDefinitionContext.prototype.filterTableList = function() {
    return this.getTypedRuleContext(FilterTableListContext,0);
};

FilterDefinitionContext.prototype.REPLICATE_IGNORE_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
};

FilterDefinitionContext.prototype.REPLICATE_WILD_DO_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
};

FilterDefinitionContext.prototype.filterStringList = function() {
    return this.getTypedRuleContext(FilterStringListContext,0);
};

FilterDefinitionContext.prototype.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
};

FilterDefinitionContext.prototype.REPLICATE_REWRITE_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
};

FilterDefinitionContext.prototype.filterDbPairList = function() {
    return this.getTypedRuleContext(FilterDbPairListContext,0);
};

FilterDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterDefinition(this);
	}
};

FilterDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterDefinition(this);
	}
};

FilterDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterDefinitionContext = FilterDefinitionContext;

MySQLParser.prototype.filterDefinition = function() {

    var localctx = new FilterDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, MySQLParser.RULE_filterDefinition);
    var _la = 0; // Token type
    try {
        this.state = 3997;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.REPLICATE_DO_DB_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3948;
            this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
            this.state = 3949;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3950;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3952;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
            if(la_===1) {
                this.state = 3951;
                this.filterDbList();

            }
            this.state = 3954;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3955;
            this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
            this.state = 3956;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3957;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3959;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
            if(la_===1) {
                this.state = 3958;
                this.filterDbList();

            }
            this.state = 3961;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 3962;
            this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
            this.state = 3963;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3964;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3966;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
            if(la_===1) {
                this.state = 3965;
                this.filterTableList();

            }
            this.state = 3968;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 3969;
            this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
            this.state = 3970;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3971;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3973;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
            if(la_===1) {
                this.state = 3972;
                this.filterTableList();

            }
            this.state = 3975;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 3976;
            this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
            this.state = 3977;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3978;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
            if(la_===1) {
                this.state = 3979;
                this.filterStringList();

            }
            this.state = 3982;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 3983;
            this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
            this.state = 3984;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3985;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3987;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
            if(la_===1) {
                this.state = 3986;
                this.filterStringList();

            }
            this.state = 3989;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
            this.enterOuterAlt(localctx, 7);
            this.state = 3990;
            this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
            this.state = 3991;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 3992;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 3994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
                this.state = 3993;
                this.filterDbPairList();
            }

            this.state = 3996;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterDbListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterDbList;
    return this;
}

FilterDbListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterDbListContext.prototype.constructor = FilterDbListContext;

FilterDbListContext.prototype.schemaRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SchemaRefContext);
    } else {
        return this.getTypedRuleContext(SchemaRefContext,i);
    }
};

FilterDbListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


FilterDbListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterDbList(this);
	}
};

FilterDbListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterDbList(this);
	}
};

FilterDbListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterDbList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterDbListContext = FilterDbListContext;

MySQLParser.prototype.filterDbList = function() {

    var localctx = new FilterDbListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, MySQLParser.RULE_filterDbList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3999;
        this.schemaRef();
        this.state = 4004;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4000;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4001;
            this.schemaRef();
            this.state = 4006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterTableListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterTableList;
    return this;
}

FilterTableListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterTableListContext.prototype.constructor = FilterTableListContext;

FilterTableListContext.prototype.filterTableRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FilterTableRefContext);
    } else {
        return this.getTypedRuleContext(FilterTableRefContext,i);
    }
};

FilterTableListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


FilterTableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterTableList(this);
	}
};

FilterTableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterTableList(this);
	}
};

FilterTableListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterTableList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterTableListContext = FilterTableListContext;

MySQLParser.prototype.filterTableList = function() {

    var localctx = new FilterTableListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, MySQLParser.RULE_filterTableList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4007;
        this.filterTableRef();
        this.state = 4012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4008;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4009;
            this.filterTableRef();
            this.state = 4014;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterStringListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterStringList;
    return this;
}

FilterStringListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterStringListContext.prototype.constructor = FilterStringListContext;

FilterStringListContext.prototype.filterWildDbTableString = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FilterWildDbTableStringContext);
    } else {
        return this.getTypedRuleContext(FilterWildDbTableStringContext,i);
    }
};

FilterStringListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


FilterStringListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterStringList(this);
	}
};

FilterStringListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterStringList(this);
	}
};

FilterStringListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterStringList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterStringListContext = FilterStringListContext;

MySQLParser.prototype.filterStringList = function() {

    var localctx = new FilterStringListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, MySQLParser.RULE_filterStringList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4015;
        this.filterWildDbTableString();
        this.state = 4020;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4016;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4017;
            this.filterWildDbTableString();
            this.state = 4022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterWildDbTableStringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterWildDbTableString;
    return this;
}

FilterWildDbTableStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterWildDbTableStringContext.prototype.constructor = FilterWildDbTableStringContext;

FilterWildDbTableStringContext.prototype.textStringNoLinebreak = function() {
    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
};

FilterWildDbTableStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterWildDbTableString(this);
	}
};

FilterWildDbTableStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterWildDbTableString(this);
	}
};

FilterWildDbTableStringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterWildDbTableString(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterWildDbTableStringContext = FilterWildDbTableStringContext;

MySQLParser.prototype.filterWildDbTableString = function() {

    var localctx = new FilterWildDbTableStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, MySQLParser.RULE_filterWildDbTableString);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4023;
        this.textStringNoLinebreak();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterDbPairListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterDbPairList;
    return this;
}

FilterDbPairListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterDbPairListContext.prototype.constructor = FilterDbPairListContext;

FilterDbPairListContext.prototype.schemaIdentifierPair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SchemaIdentifierPairContext);
    } else {
        return this.getTypedRuleContext(SchemaIdentifierPairContext,i);
    }
};

FilterDbPairListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


FilterDbPairListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterDbPairList(this);
	}
};

FilterDbPairListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterDbPairList(this);
	}
};

FilterDbPairListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterDbPairList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterDbPairListContext = FilterDbPairListContext;

MySQLParser.prototype.filterDbPairList = function() {

    var localctx = new FilterDbPairListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, MySQLParser.RULE_filterDbPairList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4025;
        this.schemaIdentifierPair();
        this.state = 4030;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4026;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4027;
            this.schemaIdentifierPair();
            this.state = 4032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SlaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_slave;
    return this;
}

SlaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SlaveContext.prototype.constructor = SlaveContext;

SlaveContext.prototype.START_SYMBOL = function() {
    return this.getToken(MySQLParser.START_SYMBOL, 0);
};

SlaveContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

SlaveContext.prototype.slaveConnectionOptions = function() {
    return this.getTypedRuleContext(SlaveConnectionOptionsContext,0);
};

SlaveContext.prototype.slaveThreadOptions = function() {
    return this.getTypedRuleContext(SlaveThreadOptionsContext,0);
};

SlaveContext.prototype.UNTIL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
};

SlaveContext.prototype.slaveUntilOptions = function() {
    return this.getTypedRuleContext(SlaveUntilOptionsContext,0);
};

SlaveContext.prototype.channel = function() {
    return this.getTypedRuleContext(ChannelContext,0);
};

SlaveContext.prototype.STOP_SYMBOL = function() {
    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
};

SlaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSlave(this);
	}
};

SlaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSlave(this);
	}
};

SlaveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSlave(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SlaveContext = SlaveContext;

MySQLParser.prototype.slave = function() {

    var localctx = new SlaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, MySQLParser.RULE_slave);
    try {
        this.state = 4054;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.START_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4033;
            this.match(MySQLParser.START_SYMBOL);
            this.state = 4034;
            this.match(MySQLParser.SLAVE_SYMBOL);
            this.state = 4036;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
            if(la_===1) {
                this.state = 4035;
                this.slaveThreadOptions();

            }
            this.state = 4040;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
            if(la_===1) {
                this.state = 4038;
                this.match(MySQLParser.UNTIL_SYMBOL);
                this.state = 4039;
                this.slaveUntilOptions();

            }
            this.state = 4042;
            this.slaveConnectionOptions();
            this.state = 4044;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
            if(la_===1) {
                this.state = 4043;
                this.channel();

            }
            break;
        case MySQLParser.STOP_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4046;
            this.match(MySQLParser.STOP_SYMBOL);
            this.state = 4047;
            this.match(MySQLParser.SLAVE_SYMBOL);
            this.state = 4049;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
            if(la_===1) {
                this.state = 4048;
                this.slaveThreadOptions();

            }
            this.state = 4052;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
            if(la_===1) {
                this.state = 4051;
                this.channel();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SlaveUntilOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_slaveUntilOptions;
    return this;
}

SlaveUntilOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SlaveUntilOptionsContext.prototype.constructor = SlaveUntilOptionsContext;

SlaveUntilOptionsContext.prototype.masterFileDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MasterFileDefContext);
    } else {
        return this.getTypedRuleContext(MasterFileDefContext,i);
    }
};

SlaveUntilOptionsContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

SlaveUntilOptionsContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

SlaveUntilOptionsContext.prototype.SQL_AFTER_MTS_GAPS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
};

SlaveUntilOptionsContext.prototype.SQL_BEFORE_GTIDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
};

SlaveUntilOptionsContext.prototype.SQL_AFTER_GTIDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
};

SlaveUntilOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


SlaveUntilOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSlaveUntilOptions(this);
	}
};

SlaveUntilOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSlaveUntilOptions(this);
	}
};

SlaveUntilOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSlaveUntilOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SlaveUntilOptionsContext = SlaveUntilOptionsContext;

MySQLParser.prototype.slaveUntilOptions = function() {

    var localctx = new SlaveUntilOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, MySQLParser.RULE_slaveUntilOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4063;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4056;
            this.masterFileDef();
            break;

        case 2:
            this.state = 4057;
            if (!( serverVersion >= 50606)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
            }
            this.state = 4058;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SQL_AFTER_GTIDS_SYMBOL || _la===MySQLParser.SQL_BEFORE_GTIDS_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4059;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 4060;
            this.textString();
            break;

        case 3:
            this.state = 4061;
            if (!( serverVersion >= 50606)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
            }
            this.state = 4062;
            this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
            break;

        }
        this.state = 4069;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,470,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4065;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4066;
                this.masterFileDef(); 
            }
            this.state = 4071;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,470,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SlaveConnectionOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_slaveConnectionOptions;
    return this;
}

SlaveConnectionOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SlaveConnectionOptionsContext.prototype.constructor = SlaveConnectionOptionsContext;

SlaveConnectionOptionsContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

SlaveConnectionOptionsContext.prototype.EQUAL_OPERATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_OPERATOR);
    } else {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, i);
    }
};


SlaveConnectionOptionsContext.prototype.textString = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextStringContext);
    } else {
        return this.getTypedRuleContext(TextStringContext,i);
    }
};

SlaveConnectionOptionsContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

SlaveConnectionOptionsContext.prototype.DEFAULT_AUTH_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
};

SlaveConnectionOptionsContext.prototype.PLUGIN_DIR_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
};

SlaveConnectionOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSlaveConnectionOptions(this);
	}
};

SlaveConnectionOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSlaveConnectionOptions(this);
	}
};

SlaveConnectionOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSlaveConnectionOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SlaveConnectionOptionsContext = SlaveConnectionOptionsContext;

MySQLParser.prototype.slaveConnectionOptions = function() {

    var localctx = new SlaveConnectionOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, MySQLParser.RULE_slaveConnectionOptions);
    try {
        this.state = 4094;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4072;
            if (!( serverVersion >= 50604)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50604");
            }
            this.state = 4076;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
            if(la_===1) {
                this.state = 4073;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4074;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4075;
                this.textString();

            }
            this.state = 4081;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
            if(la_===1) {
                this.state = 4078;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 4079;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4080;
                this.textString();

            }
            this.state = 4086;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
            if(la_===1) {
                this.state = 4083;
                this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
                this.state = 4084;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4085;
                this.textString();

            }
            this.state = 4091;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,474,this._ctx);
            if(la_===1) {
                this.state = 4088;
                this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
                this.state = 4089;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 4090;
                this.textString();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SlaveThreadOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_slaveThreadOptions;
    return this;
}

SlaveThreadOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SlaveThreadOptionsContext.prototype.constructor = SlaveThreadOptionsContext;

SlaveThreadOptionsContext.prototype.slaveThreadOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SlaveThreadOptionContext);
    } else {
        return this.getTypedRuleContext(SlaveThreadOptionContext,i);
    }
};

SlaveThreadOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


SlaveThreadOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSlaveThreadOptions(this);
	}
};

SlaveThreadOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSlaveThreadOptions(this);
	}
};

SlaveThreadOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSlaveThreadOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SlaveThreadOptionsContext = SlaveThreadOptionsContext;

MySQLParser.prototype.slaveThreadOptions = function() {

    var localctx = new SlaveThreadOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, MySQLParser.RULE_slaveThreadOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4096;
        this.slaveThreadOption();
        this.state = 4101;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,476,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4097;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4098;
                this.slaveThreadOption(); 
            }
            this.state = 4103;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,476,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SlaveThreadOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_slaveThreadOption;
    return this;
}

SlaveThreadOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SlaveThreadOptionContext.prototype.constructor = SlaveThreadOptionContext;

SlaveThreadOptionContext.prototype.RELAY_THREAD_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
};

SlaveThreadOptionContext.prototype.SQL_THREAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
};

SlaveThreadOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSlaveThreadOption(this);
	}
};

SlaveThreadOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSlaveThreadOption(this);
	}
};

SlaveThreadOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSlaveThreadOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SlaveThreadOptionContext = SlaveThreadOptionContext;

MySQLParser.prototype.slaveThreadOption = function() {

    var localctx = new SlaveThreadOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, MySQLParser.RULE_slaveThreadOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4104;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.RELAY_THREAD_SYMBOL || _la===MySQLParser.SQL_THREAD_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupReplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_groupReplication;
    return this;
}

GroupReplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupReplicationContext.prototype.constructor = GroupReplicationContext;

GroupReplicationContext.prototype.GROUP_REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
};

GroupReplicationContext.prototype.START_SYMBOL = function() {
    return this.getToken(MySQLParser.START_SYMBOL, 0);
};

GroupReplicationContext.prototype.STOP_SYMBOL = function() {
    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
};

GroupReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGroupReplication(this);
	}
};

GroupReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGroupReplication(this);
	}
};

GroupReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGroupReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GroupReplicationContext = GroupReplicationContext;

MySQLParser.prototype.groupReplication = function() {

    var localctx = new GroupReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, MySQLParser.RULE_groupReplication);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4106;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.START_SYMBOL || _la===MySQLParser.STOP_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4107;
        this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreparedStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_preparedStatement;
    this.type = null; // Token
    return this;
}

PreparedStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreparedStatementContext.prototype.constructor = PreparedStatementContext;

PreparedStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PreparedStatementContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

PreparedStatementContext.prototype.PREPARE_SYMBOL = function() {
    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
};

PreparedStatementContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

PreparedStatementContext.prototype.userVariable = function() {
    return this.getTypedRuleContext(UserVariableContext,0);
};

PreparedStatementContext.prototype.executeStatement = function() {
    return this.getTypedRuleContext(ExecuteStatementContext,0);
};

PreparedStatementContext.prototype.DEALLOCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
};

PreparedStatementContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

PreparedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPreparedStatement(this);
	}
};

PreparedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPreparedStatement(this);
	}
};

PreparedStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPreparedStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PreparedStatementContext = PreparedStatementContext;

MySQLParser.prototype.preparedStatement = function() {

    var localctx = new PreparedStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, MySQLParser.RULE_preparedStatement);
    var _la = 0; // Token type
    try {
        this.state = 4120;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.PREPARE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4109;
            localctx.type = this.match(MySQLParser.PREPARE_SYMBOL);
            this.state = 4110;
            this.identifier();
            this.state = 4111;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 4114;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4112;
                this.textLiteral();
                break;

            case 2:
                this.state = 4113;
                this.userVariable();
                break;

            }
            break;
        case MySQLParser.EXECUTE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4116;
            this.executeStatement();
            break;
        case MySQLParser.DEALLOCATE_SYMBOL:
        case MySQLParser.DROP_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 4117;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEALLOCATE_SYMBOL || _la===MySQLParser.DROP_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4118;
            this.match(MySQLParser.PREPARE_SYMBOL);
            this.state = 4119;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecuteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_executeStatement;
    return this;
}

ExecuteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecuteStatementContext.prototype.constructor = ExecuteStatementContext;

ExecuteStatementContext.prototype.EXECUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
};

ExecuteStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExecuteStatementContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

ExecuteStatementContext.prototype.executeVarList = function() {
    return this.getTypedRuleContext(ExecuteVarListContext,0);
};

ExecuteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExecuteStatement(this);
	}
};

ExecuteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExecuteStatement(this);
	}
};

ExecuteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExecuteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExecuteStatementContext = ExecuteStatementContext;

MySQLParser.prototype.executeStatement = function() {

    var localctx = new ExecuteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, MySQLParser.RULE_executeStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4122;
        this.match(MySQLParser.EXECUTE_SYMBOL);
        this.state = 4123;
        this.identifier();
        this.state = 4126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.USING_SYMBOL) {
            this.state = 4124;
            this.match(MySQLParser.USING_SYMBOL);
            this.state = 4125;
            this.executeVarList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecuteVarListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_executeVarList;
    return this;
}

ExecuteVarListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecuteVarListContext.prototype.constructor = ExecuteVarListContext;

ExecuteVarListContext.prototype.userVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserVariableContext);
    } else {
        return this.getTypedRuleContext(UserVariableContext,i);
    }
};

ExecuteVarListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ExecuteVarListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExecuteVarList(this);
	}
};

ExecuteVarListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExecuteVarList(this);
	}
};

ExecuteVarListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExecuteVarList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExecuteVarListContext = ExecuteVarListContext;

MySQLParser.prototype.executeVarList = function() {

    var localctx = new ExecuteVarListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, MySQLParser.RULE_executeVarList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4128;
        this.userVariable();
        this.state = 4133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4129;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4130;
            this.userVariable();
            this.state = 4135;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CloneStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cloneStatement;
    return this;
}

CloneStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CloneStatementContext.prototype.constructor = CloneStatementContext;

CloneStatementContext.prototype.CLONE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
};

CloneStatementContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

CloneStatementContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

CloneStatementContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

CloneStatementContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

CloneStatementContext.prototype.REMOTE_SYMBOL = function() {
    return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
};

CloneStatementContext.prototype.INSTANCE_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
};

CloneStatementContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

CloneStatementContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

CloneStatementContext.prototype.COLON_SYMBOL = function() {
    return this.getToken(MySQLParser.COLON_SYMBOL, 0);
};

CloneStatementContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

CloneStatementContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

CloneStatementContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

CloneStatementContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

CloneStatementContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

CloneStatementContext.prototype.REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
};

CloneStatementContext.prototype.dataDirSSL = function() {
    return this.getTypedRuleContext(DataDirSSLContext,0);
};

CloneStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCloneStatement(this);
	}
};

CloneStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCloneStatement(this);
	}
};

CloneStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCloneStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CloneStatementContext = CloneStatementContext;

MySQLParser.prototype.cloneStatement = function() {

    var localctx = new CloneStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, MySQLParser.RULE_cloneStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4136;
        this.match(MySQLParser.CLONE_SYMBOL);
        this.state = 4161;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4137;
            this.match(MySQLParser.LOCAL_SYMBOL);
            this.state = 4138;
            this.match(MySQLParser.DATA_SYMBOL);
            this.state = 4139;
            this.match(MySQLParser.DIRECTORY_SYMBOL);
            this.state = 4141;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,481,this._ctx);
            if(la_===1) {
                this.state = 4140;
                this.equal();

            }
            this.state = 4143;
            this.textStringLiteral();
            break;

        case 2:
            this.state = 4144;
            this.match(MySQLParser.REMOTE_SYMBOL);
            this.state = 4147;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 4145;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 4146;
                this.match(MySQLParser.REPLICATION_SYMBOL);
            }

            break;

        case 3:
            this.state = 4149;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 4150;
            this.match(MySQLParser.INSTANCE_SYMBOL);
            this.state = 4151;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 4152;
            this.user();
            this.state = 4153;
            this.match(MySQLParser.COLON_SYMBOL);
            this.state = 4154;
            this.ulong_number();
            this.state = 4155;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 4156;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 4157;
            this.textStringLiteral();
            this.state = 4159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DATA_SYMBOL || _la===MySQLParser.REQUIRE_SYMBOL) {
                this.state = 4158;
                this.dataDirSSL();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataDirSSLContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dataDirSSL;
    return this;
}

DataDirSSLContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataDirSSLContext.prototype.constructor = DataDirSSLContext;

DataDirSSLContext.prototype.ssl = function() {
    return this.getTypedRuleContext(SslContext,0);
};

DataDirSSLContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

DataDirSSLContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

DataDirSSLContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

DataDirSSLContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

DataDirSSLContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDataDirSSL(this);
	}
};

DataDirSSLContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDataDirSSL(this);
	}
};

DataDirSSLContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDataDirSSL(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DataDirSSLContext = DataDirSSLContext;

MySQLParser.prototype.dataDirSSL = function() {

    var localctx = new DataDirSSLContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, MySQLParser.RULE_dataDirSSL);
    var _la = 0; // Token type
    try {
        this.state = 4173;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.REQUIRE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4163;
            this.ssl();
            break;
        case MySQLParser.DATA_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4164;
            this.match(MySQLParser.DATA_SYMBOL);
            this.state = 4165;
            this.match(MySQLParser.DIRECTORY_SYMBOL);
            this.state = 4167;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
            if(la_===1) {
                this.state = 4166;
                this.equal();

            }
            this.state = 4169;
            this.textStringLiteral();
            this.state = 4171;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.REQUIRE_SYMBOL) {
                this.state = 4170;
                this.ssl();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SslContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ssl;
    return this;
}

SslContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SslContext.prototype.constructor = SslContext;

SslContext.prototype.REQUIRE_SYMBOL = function() {
    return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
};

SslContext.prototype.SSL_SYMBOL = function() {
    return this.getToken(MySQLParser.SSL_SYMBOL, 0);
};

SslContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

SslContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSsl(this);
	}
};

SslContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSsl(this);
	}
};

SslContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSsl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SslContext = SslContext;

MySQLParser.prototype.ssl = function() {

    var localctx = new SslContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, MySQLParser.RULE_ssl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4175;
        this.match(MySQLParser.REQUIRE_SYMBOL);
        this.state = 4177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NO_SYMBOL) {
            this.state = 4176;
            this.match(MySQLParser.NO_SYMBOL);
        }

        this.state = 4179;
        this.match(MySQLParser.SSL_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AccountManagementStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_accountManagementStatement;
    return this;
}

AccountManagementStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccountManagementStatementContext.prototype.constructor = AccountManagementStatementContext;

AccountManagementStatementContext.prototype.alterUser = function() {
    return this.getTypedRuleContext(AlterUserContext,0);
};

AccountManagementStatementContext.prototype.createUser = function() {
    return this.getTypedRuleContext(CreateUserContext,0);
};

AccountManagementStatementContext.prototype.dropUser = function() {
    return this.getTypedRuleContext(DropUserContext,0);
};

AccountManagementStatementContext.prototype.grant = function() {
    return this.getTypedRuleContext(GrantContext,0);
};

AccountManagementStatementContext.prototype.renameUser = function() {
    return this.getTypedRuleContext(RenameUserContext,0);
};

AccountManagementStatementContext.prototype.revoke = function() {
    return this.getTypedRuleContext(RevokeContext,0);
};

AccountManagementStatementContext.prototype.setRole = function() {
    return this.getTypedRuleContext(SetRoleContext,0);
};

AccountManagementStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAccountManagementStatement(this);
	}
};

AccountManagementStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAccountManagementStatement(this);
	}
};

AccountManagementStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAccountManagementStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AccountManagementStatementContext = AccountManagementStatementContext;

MySQLParser.prototype.accountManagementStatement = function() {

    var localctx = new AccountManagementStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, MySQLParser.RULE_accountManagementStatement);
    try {
        this.state = 4190;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4181;
            if (!( serverVersion >= 50606)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
            }
            this.state = 4182;
            this.alterUser();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4183;
            this.createUser();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4184;
            this.dropUser();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4185;
            this.grant();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4186;
            this.renameUser();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4187;
            this.revoke();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4188;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4189;
            this.setRole();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterUser;
    return this;
}

AlterUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserContext.prototype.constructor = AlterUserContext;

AlterUserContext.prototype.ALTER_SYMBOL = function() {
    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
};

AlterUserContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

AlterUserContext.prototype.alterUserTail = function() {
    return this.getTypedRuleContext(AlterUserTailContext,0);
};

AlterUserContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

AlterUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUser(this);
	}
};

AlterUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUser(this);
	}
};

AlterUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterUserContext = AlterUserContext;

MySQLParser.prototype.alterUser = function() {

    var localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, MySQLParser.RULE_alterUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4192;
        this.match(MySQLParser.ALTER_SYMBOL);
        this.state = 4193;
        this.match(MySQLParser.USER_SYMBOL);
        this.state = 4196;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
        if(la_===1) {
            this.state = 4194;
            if (!( serverVersion >= 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
            }
            this.state = 4195;
            this.ifExists();

        }
        this.state = 4198;
        this.alterUserTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUserTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterUserTail;
    return this;
}

AlterUserTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserTailContext.prototype.constructor = AlterUserTailContext;

AlterUserTailContext.prototype.createUserTail = function() {
    return this.getTypedRuleContext(CreateUserTailContext,0);
};

AlterUserTailContext.prototype.createUserList = function() {
    return this.getTypedRuleContext(CreateUserListContext,0);
};

AlterUserTailContext.prototype.alterUserList = function() {
    return this.getTypedRuleContext(AlterUserListContext,0);
};

AlterUserTailContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

AlterUserTailContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

AlterUserTailContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

AlterUserTailContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

AlterUserTailContext.prototype.replacePassword = function() {
    return this.getTypedRuleContext(ReplacePasswordContext,0);
};

AlterUserTailContext.prototype.retainCurrentPassword = function() {
    return this.getTypedRuleContext(RetainCurrentPasswordContext,0);
};

AlterUserTailContext.prototype.discardOldPassword = function() {
    return this.getTypedRuleContext(DiscardOldPasswordContext,0);
};

AlterUserTailContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

AlterUserTailContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

AlterUserTailContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

AlterUserTailContext.prototype.NONE_SYMBOL = function() {
    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
};

AlterUserTailContext.prototype.roleList = function() {
    return this.getTypedRuleContext(RoleListContext,0);
};

AlterUserTailContext.prototype.RANDOM_SYMBOL = function() {
    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
};

AlterUserTailContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

AlterUserTailContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

AlterUserTailContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

AlterUserTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUserTail(this);
	}
};

AlterUserTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUserTail(this);
	}
};

AlterUserTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUserTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterUserTailContext = AlterUserTailContext;

MySQLParser.prototype.alterUserTail = function() {

    var localctx = new AlterUserTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, MySQLParser.RULE_alterUserTail);
    var _la = 0; // Token type
    try {
        this.state = 4247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4204;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4200;
                if (!( serverVersion < 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80014");
                }
                this.state = 4201;
                this.createUserList();
                break;

            case 2:
                this.state = 4202;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 4203;
                this.alterUserList();
                break;

            }
            this.state = 4206;
            this.createUserTail();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4208;
            if (!( serverVersion >= 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
            }
            this.state = 4209;
            this.user();
            this.state = 4210;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 4211;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 4212;
            this.textString();
            this.state = 4215;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
            if(la_===1) {
                this.state = 4213;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 4214;
                this.replacePassword();

            }
            this.state = 4219;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
            if(la_===1) {
                this.state = 4217;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 4218;
                this.retainCurrentPassword();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4221;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 4222;
            this.user();
            this.state = 4223;
            this.discardOldPassword();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4225;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4226;
            this.user();
            this.state = 4227;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 4228;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 4232;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4229;
                this.match(MySQLParser.ALL_SYMBOL);
                break;

            case 2:
                this.state = 4230;
                this.match(MySQLParser.NONE_SYMBOL);
                break;

            case 3:
                this.state = 4231;
                this.roleList();
                break;

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4234;
            if (!( serverVersion >= 80018)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
            }
            this.state = 4235;
            this.user();
            this.state = 4236;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 4239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH_SYMBOL) {
                this.state = 4237;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4238;
                this.textOrIdentifier();
            }

            this.state = 4241;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 4242;
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.state = 4243;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 4245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.RETAIN_SYMBOL) {
                this.state = 4244;
                this.retainCurrentPassword();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userFunction;
    return this;
}

UserFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserFunctionContext.prototype.constructor = UserFunctionContext;

UserFunctionContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

UserFunctionContext.prototype.parentheses = function() {
    return this.getTypedRuleContext(ParenthesesContext,0);
};

UserFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserFunction(this);
	}
};

UserFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserFunction(this);
	}
};

UserFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserFunctionContext = UserFunctionContext;

MySQLParser.prototype.userFunction = function() {

    var localctx = new UserFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, MySQLParser.RULE_userFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4249;
        this.match(MySQLParser.USER_SYMBOL);
        this.state = 4250;
        this.parentheses();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUser;
    return this;
}

CreateUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserContext.prototype.constructor = CreateUserContext;

CreateUserContext.prototype.CREATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
};

CreateUserContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

CreateUserContext.prototype.createUserList = function() {
    return this.getTypedRuleContext(CreateUserListContext,0);
};

CreateUserContext.prototype.defaultRoleClause = function() {
    return this.getTypedRuleContext(DefaultRoleClauseContext,0);
};

CreateUserContext.prototype.createUserTail = function() {
    return this.getTypedRuleContext(CreateUserTailContext,0);
};

CreateUserContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUser(this);
	}
};

CreateUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUser(this);
	}
};

CreateUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUserContext = CreateUserContext;

MySQLParser.prototype.createUser = function() {

    var localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, MySQLParser.RULE_createUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4252;
        this.match(MySQLParser.CREATE_SYMBOL);
        this.state = 4253;
        this.match(MySQLParser.USER_SYMBOL);
        this.state = 4257;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4254;
            if (!( serverVersion >= 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
            }
            this.state = 4255;
            this.ifNotExists();
            break;

        case 2:
            break;

        }
        this.state = 4259;
        this.createUserList();
        this.state = 4260;
        this.defaultRoleClause();
        this.state = 4261;
        this.createUserTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUserTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUserTail;
    return this;
}

CreateUserTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserTailContext.prototype.constructor = CreateUserTailContext;

CreateUserTailContext.prototype.requireClause = function() {
    return this.getTypedRuleContext(RequireClauseContext,0);
};

CreateUserTailContext.prototype.connectOptions = function() {
    return this.getTypedRuleContext(ConnectOptionsContext,0);
};

CreateUserTailContext.prototype.accountLockPasswordExpireOptions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AccountLockPasswordExpireOptionsContext);
    } else {
        return this.getTypedRuleContext(AccountLockPasswordExpireOptionsContext,i);
    }
};

CreateUserTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUserTail(this);
	}
};

CreateUserTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUserTail(this);
	}
};

CreateUserTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUserTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUserTailContext = CreateUserTailContext;

MySQLParser.prototype.createUserTail = function() {

    var localctx = new CreateUserTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, MySQLParser.RULE_createUserTail);
    var _la = 0; // Token type
    try {
        this.state = 4277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4263;
            if (!( serverVersion >= 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
            }
            this.state = 4265;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.REQUIRE_SYMBOL) {
                this.state = 4264;
                this.requireClause();
            }

            this.state = 4268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH_SYMBOL) {
                this.state = 4267;
                this.connectOptions();
            }

            this.state = 4273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.ACCOUNT_SYMBOL || _la===MySQLParser.PASSWORD_SYMBOL) {
                this.state = 4270;
                this.accountLockPasswordExpireOptions();
                this.state = 4275;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultRoleClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_defaultRoleClause;
    return this;
}

DefaultRoleClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultRoleClauseContext.prototype.constructor = DefaultRoleClauseContext;

DefaultRoleClauseContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

DefaultRoleClauseContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

DefaultRoleClauseContext.prototype.roleList = function() {
    return this.getTypedRuleContext(RoleListContext,0);
};

DefaultRoleClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultRoleClause(this);
	}
};

DefaultRoleClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultRoleClause(this);
	}
};

DefaultRoleClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultRoleClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DefaultRoleClauseContext = DefaultRoleClauseContext;

MySQLParser.prototype.defaultRoleClause = function() {

    var localctx = new DefaultRoleClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, MySQLParser.RULE_defaultRoleClause);
    try {
        this.state = 4286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,504,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4279;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4283;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,503,this._ctx);
            if(la_===1) {
                this.state = 4280;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.state = 4281;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 4282;
                this.roleList();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequireClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_requireClause;
    this.option = null; // Token
    return this;
}

RequireClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequireClauseContext.prototype.constructor = RequireClauseContext;

RequireClauseContext.prototype.REQUIRE_SYMBOL = function() {
    return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
};

RequireClauseContext.prototype.requireList = function() {
    return this.getTypedRuleContext(RequireListContext,0);
};

RequireClauseContext.prototype.SSL_SYMBOL = function() {
    return this.getToken(MySQLParser.SSL_SYMBOL, 0);
};

RequireClauseContext.prototype.X509_SYMBOL = function() {
    return this.getToken(MySQLParser.X509_SYMBOL, 0);
};

RequireClauseContext.prototype.NONE_SYMBOL = function() {
    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
};

RequireClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRequireClause(this);
	}
};

RequireClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRequireClause(this);
	}
};

RequireClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRequireClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RequireClauseContext = RequireClauseContext;

MySQLParser.prototype.requireClause = function() {

    var localctx = new RequireClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, MySQLParser.RULE_requireClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4288;
        this.match(MySQLParser.REQUIRE_SYMBOL);
        this.state = 4291;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CIPHER_SYMBOL:
        case MySQLParser.ISSUER_SYMBOL:
        case MySQLParser.SUBJECT_SYMBOL:
            this.state = 4289;
            this.requireList();
            break;
        case MySQLParser.NONE_SYMBOL:
        case MySQLParser.X509_SYMBOL:
        case MySQLParser.SSL_SYMBOL:
            this.state = 4290;
            localctx.option = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NONE_SYMBOL || _la===MySQLParser.X509_SYMBOL || _la===MySQLParser.SSL_SYMBOL)) {
                localctx.option = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConnectOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_connectOptions;
    return this;
}

ConnectOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConnectOptionsContext.prototype.constructor = ConnectOptionsContext;

ConnectOptionsContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

ConnectOptionsContext.prototype.MAX_QUERIES_PER_HOUR_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
    } else {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
    }
};


ConnectOptionsContext.prototype.ulong_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ulong_numberContext);
    } else {
        return this.getTypedRuleContext(Ulong_numberContext,i);
    }
};

ConnectOptionsContext.prototype.MAX_UPDATES_PER_HOUR_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
    } else {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
    }
};


ConnectOptionsContext.prototype.MAX_CONNECTIONS_PER_HOUR_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
    } else {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
    }
};


ConnectOptionsContext.prototype.MAX_USER_CONNECTIONS_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
    } else {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
    }
};


ConnectOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConnectOptions(this);
	}
};

ConnectOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConnectOptions(this);
	}
};

ConnectOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConnectOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConnectOptionsContext = ConnectOptionsContext;

MySQLParser.prototype.connectOptions = function() {

    var localctx = new ConnectOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, MySQLParser.RULE_connectOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4293;
        this.match(MySQLParser.WITH_SYMBOL);
        this.state = 4302; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4302;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                this.state = 4294;
                this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                this.state = 4295;
                this.ulong_number();
                break;
            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                this.state = 4296;
                this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                this.state = 4297;
                this.ulong_number();
                break;
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                this.state = 4298;
                this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                this.state = 4299;
                this.ulong_number();
                break;
            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                this.state = 4300;
                this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                this.state = 4301;
                this.ulong_number();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4304; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 207)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AccountLockPasswordExpireOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_accountLockPasswordExpireOptions;
    return this;
}

AccountLockPasswordExpireOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccountLockPasswordExpireOptionsContext.prototype.constructor = AccountLockPasswordExpireOptionsContext;

AccountLockPasswordExpireOptionsContext.prototype.ACCOUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.UNLOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.EXPIRE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.HISTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.REUSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.INTERVAL_SYMBOL = function() {
    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.REQUIRE_SYMBOL = function() {
    return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

AccountLockPasswordExpireOptionsContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.DAY_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.NEVER_SYMBOL = function() {
    return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.OPTIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
};

AccountLockPasswordExpireOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAccountLockPasswordExpireOptions(this);
	}
};

AccountLockPasswordExpireOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAccountLockPasswordExpireOptions(this);
	}
};

AccountLockPasswordExpireOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAccountLockPasswordExpireOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AccountLockPasswordExpireOptionsContext = AccountLockPasswordExpireOptionsContext;

MySQLParser.prototype.accountLockPasswordExpireOptions = function() {

    var localctx = new AccountLockPasswordExpireOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, MySQLParser.RULE_accountLockPasswordExpireOptions);
    var _la = 0; // Token type
    try {
        this.state = 4339;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ACCOUNT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4306;
            this.match(MySQLParser.ACCOUNT_SYMBOL);
            this.state = 4307;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LOCK_SYMBOL || _la===MySQLParser.UNLOCK_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.PASSWORD_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4308;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 4337;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4309;
                this.match(MySQLParser.EXPIRE_SYMBOL);
                this.state = 4316;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case MySQLParser.INTERVAL_SYMBOL:
                	this.state = 4310;
                	this.match(MySQLParser.INTERVAL_SYMBOL);
                	this.state = 4311;
                	this.real_ulong_number();
                	this.state = 4312;
                	this.match(MySQLParser.DAY_SYMBOL);
                	break;
                case MySQLParser.NEVER_SYMBOL:
                	this.state = 4314;
                	this.match(MySQLParser.NEVER_SYMBOL);
                	break;
                case MySQLParser.DEFAULT_SYMBOL:
                	this.state = 4315;
                	this.match(MySQLParser.DEFAULT_SYMBOL);
                	break;
                case MySQLParser.EOF:
                case MySQLParser.ACCOUNT_SYMBOL:
                case MySQLParser.PASSWORD_SYMBOL:
                case MySQLParser.SEMICOLON_SYMBOL:
                	break;
                default:
                	break;
                }
                break;

            case 2:
                this.state = 4318;
                this.match(MySQLParser.HISTORY_SYMBOL);
                this.state = 4321;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                    this.state = 4319;
                    this.real_ulong_number();
                    break;
                case MySQLParser.DEFAULT_SYMBOL:
                    this.state = 4320;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 3:
                this.state = 4323;
                this.match(MySQLParser.REUSE_SYMBOL);
                this.state = 4324;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 4329;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                    this.state = 4325;
                    this.real_ulong_number();
                    this.state = 4326;
                    this.match(MySQLParser.DAY_SYMBOL);
                    break;
                case MySQLParser.DEFAULT_SYMBOL:
                    this.state = 4328;
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 4:
                this.state = 4331;
                if (!( serverVersion >= 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
                }
                this.state = 4332;
                this.match(MySQLParser.REQUIRE_SYMBOL);
                this.state = 4333;
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.state = 4335;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.DEFAULT_SYMBOL || _la===MySQLParser.OPTIONAL_SYMBOL) {
                    this.state = 4334;
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.DEFAULT_SYMBOL || _la===MySQLParser.OPTIONAL_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropUser;
    return this;
}

DropUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUserContext.prototype.constructor = DropUserContext;

DropUserContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

DropUserContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

DropUserContext.prototype.userList = function() {
    return this.getTypedRuleContext(UserListContext,0);
};

DropUserContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropUser(this);
	}
};

DropUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropUser(this);
	}
};

DropUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropUserContext = DropUserContext;

MySQLParser.prototype.dropUser = function() {

    var localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, MySQLParser.RULE_dropUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4341;
        this.match(MySQLParser.DROP_SYMBOL);
        this.state = 4342;
        this.match(MySQLParser.USER_SYMBOL);
        this.state = 4345;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
        if(la_===1) {
            this.state = 4343;
            if (!( serverVersion >= 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
            }
            this.state = 4344;
            this.ifExists();

        }
        this.state = 4347;
        this.userList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grant;
    return this;
}

GrantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantContext.prototype.constructor = GrantContext;

GrantContext.prototype.GRANT_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.GRANT_SYMBOL);
    } else {
        return this.getToken(MySQLParser.GRANT_SYMBOL, i);
    }
};


GrantContext.prototype.roleOrPrivilegesList = function() {
    return this.getTypedRuleContext(RoleOrPrivilegesListContext,0);
};

GrantContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

GrantContext.prototype.userList = function() {
    return this.getTypedRuleContext(UserListContext,0);
};

GrantContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

GrantContext.prototype.grantIdentifier = function() {
    return this.getTypedRuleContext(GrantIdentifierContext,0);
};

GrantContext.prototype.grantTargetList = function() {
    return this.getTypedRuleContext(GrantTargetListContext,0);
};

GrantContext.prototype.PROXY_SYMBOL = function() {
    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
};

GrantContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

GrantContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

GrantContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

GrantContext.prototype.ADMIN_SYMBOL = function() {
    return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
};

GrantContext.prototype.OPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
};

GrantContext.prototype.aclType = function() {
    return this.getTypedRuleContext(AclTypeContext,0);
};

GrantContext.prototype.versionedRequireClause = function() {
    return this.getTypedRuleContext(VersionedRequireClauseContext,0);
};

GrantContext.prototype.grantOptions = function() {
    return this.getTypedRuleContext(GrantOptionsContext,0);
};

GrantContext.prototype.grantAs = function() {
    return this.getTypedRuleContext(GrantAsContext,0);
};

GrantContext.prototype.PRIVILEGES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
};

GrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrant(this);
	}
};

GrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrant(this);
	}
};

GrantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantContext = GrantContext;

MySQLParser.prototype.grant = function() {

    var localctx = new GrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, MySQLParser.RULE_grant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4349;
        this.match(MySQLParser.GRANT_SYMBOL);
        this.state = 4392;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4350;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4351;
            this.roleOrPrivilegesList();
            this.state = 4352;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4353;
            this.userList();
            this.state = 4357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH_SYMBOL) {
                this.state = 4354;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4355;
                this.match(MySQLParser.ADMIN_SYMBOL);
                this.state = 4356;
                this.match(MySQLParser.OPTION_SYMBOL);
            }

            break;

        case 2:
            this.state = 4364;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4359;
                this.roleOrPrivilegesList();
                break;

            case 2:
                this.state = 4360;
                this.match(MySQLParser.ALL_SYMBOL);
                this.state = 4362;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.PRIVILEGES_SYMBOL) {
                    this.state = 4361;
                    this.match(MySQLParser.PRIVILEGES_SYMBOL);
                }

                break;

            }
            this.state = 4366;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 4368;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
            if(la_===1) {
                this.state = 4367;
                this.aclType();

            }
            this.state = 4370;
            this.grantIdentifier();
            this.state = 4371;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4372;
            this.grantTargetList();
            this.state = 4374;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,519,this._ctx);
            if(la_===1) {
                this.state = 4373;
                this.versionedRequireClause();

            }
            this.state = 4377;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
            if(la_===1) {
                this.state = 4376;
                this.grantOptions();

            }
            this.state = 4380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS_SYMBOL) {
                this.state = 4379;
                this.grantAs();
            }

            break;

        case 3:
            this.state = 4382;
            this.match(MySQLParser.PROXY_SYMBOL);
            this.state = 4383;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 4384;
            this.user();
            this.state = 4385;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4386;
            this.grantTargetList();
            this.state = 4390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH_SYMBOL) {
                this.state = 4387;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4388;
                this.match(MySQLParser.GRANT_SYMBOL);
                this.state = 4389;
                this.match(MySQLParser.OPTION_SYMBOL);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantTargetListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantTargetList;
    return this;
}

GrantTargetListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantTargetListContext.prototype.constructor = GrantTargetListContext;

GrantTargetListContext.prototype.createUserList = function() {
    return this.getTypedRuleContext(CreateUserListContext,0);
};

GrantTargetListContext.prototype.userList = function() {
    return this.getTypedRuleContext(UserListContext,0);
};

GrantTargetListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantTargetList(this);
	}
};

GrantTargetListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantTargetList(this);
	}
};

GrantTargetListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantTargetList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantTargetListContext = GrantTargetListContext;

MySQLParser.prototype.grantTargetList = function() {

    var localctx = new GrantTargetListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, MySQLParser.RULE_grantTargetList);
    try {
        this.state = 4398;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,524,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4394;
            if (!( serverVersion < 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
            }
            this.state = 4395;
            this.createUserList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4396;
            if (!( serverVersion >= 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
            }
            this.state = 4397;
            this.userList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantOptions;
    return this;
}

GrantOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantOptionsContext.prototype.constructor = GrantOptionsContext;

GrantOptionsContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

GrantOptionsContext.prototype.grantOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GrantOptionContext);
    } else {
        return this.getTypedRuleContext(GrantOptionContext,i);
    }
};

GrantOptionsContext.prototype.GRANT_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
};

GrantOptionsContext.prototype.OPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
};

GrantOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantOptions(this);
	}
};

GrantOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantOptions(this);
	}
};

GrantOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantOptionsContext = GrantOptionsContext;

MySQLParser.prototype.grantOptions = function() {

    var localctx = new GrantOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, MySQLParser.RULE_grantOptions);
    var _la = 0; // Token type
    try {
        this.state = 4411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,526,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4400;
            if (!( serverVersion < 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
            }
            this.state = 4401;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 4403; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 4402;
                this.grantOption();
                this.state = 4405; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 207)))) !== 0) || _la===MySQLParser.GRANT_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4407;
            if (!( serverVersion >= 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
            }
            this.state = 4408;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 4409;
            this.match(MySQLParser.GRANT_SYMBOL);
            this.state = 4410;
            this.match(MySQLParser.OPTION_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptRoleListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_exceptRoleList;
    return this;
}

ExceptRoleListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptRoleListContext.prototype.constructor = ExceptRoleListContext;

ExceptRoleListContext.prototype.EXCEPT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
};

ExceptRoleListContext.prototype.roleList = function() {
    return this.getTypedRuleContext(RoleListContext,0);
};

ExceptRoleListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExceptRoleList(this);
	}
};

ExceptRoleListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExceptRoleList(this);
	}
};

ExceptRoleListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExceptRoleList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExceptRoleListContext = ExceptRoleListContext;

MySQLParser.prototype.exceptRoleList = function() {

    var localctx = new ExceptRoleListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, MySQLParser.RULE_exceptRoleList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4413;
        this.match(MySQLParser.EXCEPT_SYMBOL);
        this.state = 4414;
        this.roleList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_withRoles;
    return this;
}

WithRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithRolesContext.prototype.constructor = WithRolesContext;

WithRolesContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

WithRolesContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

WithRolesContext.prototype.roleList = function() {
    return this.getTypedRuleContext(RoleListContext,0);
};

WithRolesContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

WithRolesContext.prototype.NONE_SYMBOL = function() {
    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
};

WithRolesContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

WithRolesContext.prototype.exceptRoleList = function() {
    return this.getTypedRuleContext(ExceptRoleListContext,0);
};

WithRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWithRoles(this);
	}
};

WithRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWithRoles(this);
	}
};

WithRolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWithRoles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WithRolesContext = WithRolesContext;

MySQLParser.prototype.withRoles = function() {

    var localctx = new WithRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, MySQLParser.RULE_withRoles);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4416;
        this.match(MySQLParser.WITH_SYMBOL);
        this.state = 4417;
        this.match(MySQLParser.ROLE_SYMBOL);
        this.state = 4425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,528,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4418;
            this.roleList();
            break;

        case 2:
            this.state = 4419;
            this.match(MySQLParser.ALL_SYMBOL);
            this.state = 4421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EXCEPT_SYMBOL) {
                this.state = 4420;
                this.exceptRoleList();
            }

            break;

        case 3:
            this.state = 4423;
            this.match(MySQLParser.NONE_SYMBOL);
            break;

        case 4:
            this.state = 4424;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantAsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantAs;
    return this;
}

GrantAsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantAsContext.prototype.constructor = GrantAsContext;

GrantAsContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

GrantAsContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

GrantAsContext.prototype.withRoles = function() {
    return this.getTypedRuleContext(WithRolesContext,0);
};

GrantAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantAs(this);
	}
};

GrantAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantAs(this);
	}
};

GrantAsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantAs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantAsContext = GrantAsContext;

MySQLParser.prototype.grantAs = function() {

    var localctx = new GrantAsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, MySQLParser.RULE_grantAs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4427;
        this.match(MySQLParser.AS_SYMBOL);
        this.state = 4428;
        this.match(MySQLParser.USER_SYMBOL);
        this.state = 4430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WITH_SYMBOL) {
            this.state = 4429;
            this.withRoles();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VersionedRequireClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_versionedRequireClause;
    return this;
}

VersionedRequireClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionedRequireClauseContext.prototype.constructor = VersionedRequireClauseContext;

VersionedRequireClauseContext.prototype.requireClause = function() {
    return this.getTypedRuleContext(RequireClauseContext,0);
};

VersionedRequireClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVersionedRequireClause(this);
	}
};

VersionedRequireClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVersionedRequireClause(this);
	}
};

VersionedRequireClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVersionedRequireClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VersionedRequireClauseContext = VersionedRequireClauseContext;

MySQLParser.prototype.versionedRequireClause = function() {

    var localctx = new VersionedRequireClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, MySQLParser.RULE_versionedRequireClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4432;
        if (!( serverVersion < 80011)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
        }
        this.state = 4433;
        this.requireClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renameUser;
    return this;
}

RenameUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameUserContext.prototype.constructor = RenameUserContext;

RenameUserContext.prototype.RENAME_SYMBOL = function() {
    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
};

RenameUserContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

RenameUserContext.prototype.user = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserContext);
    } else {
        return this.getTypedRuleContext(UserContext,i);
    }
};

RenameUserContext.prototype.TO_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.TO_SYMBOL);
    } else {
        return this.getToken(MySQLParser.TO_SYMBOL, i);
    }
};


RenameUserContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


RenameUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenameUser(this);
	}
};

RenameUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenameUser(this);
	}
};

RenameUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenameUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenameUserContext = RenameUserContext;

MySQLParser.prototype.renameUser = function() {

    var localctx = new RenameUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, MySQLParser.RULE_renameUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4435;
        this.match(MySQLParser.RENAME_SYMBOL);
        this.state = 4436;
        this.match(MySQLParser.USER_SYMBOL);
        this.state = 4437;
        this.user();
        this.state = 4438;
        this.match(MySQLParser.TO_SYMBOL);
        this.state = 4439;
        this.user();
        this.state = 4447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4440;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4441;
            this.user();
            this.state = 4442;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4443;
            this.user();
            this.state = 4449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RevokeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_revoke;
    return this;
}

RevokeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeContext.prototype.constructor = RevokeContext;

RevokeContext.prototype.REVOKE_SYMBOL = function() {
    return this.getToken(MySQLParser.REVOKE_SYMBOL, 0);
};

RevokeContext.prototype.roleOrPrivilegesList = function() {
    return this.getTypedRuleContext(RoleOrPrivilegesListContext,0);
};

RevokeContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

RevokeContext.prototype.userList = function() {
    return this.getTypedRuleContext(UserListContext,0);
};

RevokeContext.prototype.onTypeTo = function() {
    return this.getTypedRuleContext(OnTypeToContext,0);
};

RevokeContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

RevokeContext.prototype.PROXY_SYMBOL = function() {
    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
};

RevokeContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

RevokeContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

RevokeContext.prototype.grantIdentifier = function() {
    return this.getTypedRuleContext(GrantIdentifierContext,0);
};

RevokeContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

RevokeContext.prototype.GRANT_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
};

RevokeContext.prototype.OPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
};

RevokeContext.prototype.PRIVILEGES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
};

RevokeContext.prototype.aclType = function() {
    return this.getTypedRuleContext(AclTypeContext,0);
};

RevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRevoke(this);
	}
};

RevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRevoke(this);
	}
};

RevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RevokeContext = RevokeContext;

MySQLParser.prototype.revoke = function() {

    var localctx = new RevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, MySQLParser.RULE_revoke);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4450;
        this.match(MySQLParser.REVOKE_SYMBOL);
        this.state = 4484;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4451;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4452;
            this.roleOrPrivilegesList();
            this.state = 4453;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 4454;
            this.userList();
            break;

        case 2:
            this.state = 4456;
            this.roleOrPrivilegesList();
            this.state = 4457;
            this.onTypeTo();
            this.state = 4458;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 4459;
            this.userList();
            break;

        case 3:
            this.state = 4461;
            this.match(MySQLParser.ALL_SYMBOL);
            this.state = 4463;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
            if(la_===1) {
                this.state = 4462;
                this.match(MySQLParser.PRIVILEGES_SYMBOL);

            }
            this.state = 4476;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,533,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4465;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 4466;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 4468;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
                if(la_===1) {
                    this.state = 4467;
                    this.aclType();

                }
                this.state = 4470;
                this.grantIdentifier();
                break;

            case 2:
                this.state = 4471;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4472;
                this.match(MySQLParser.GRANT_SYMBOL);
                this.state = 4473;
                this.match(MySQLParser.OPTION_SYMBOL);
                this.state = 4474;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 4475;
                this.userList();
                break;

            }
            break;

        case 4:
            this.state = 4478;
            this.match(MySQLParser.PROXY_SYMBOL);
            this.state = 4479;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 4480;
            this.user();
            this.state = 4481;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 4482;
            this.userList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OnTypeToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_onTypeTo;
    return this;
}

OnTypeToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnTypeToContext.prototype.constructor = OnTypeToContext;

OnTypeToContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

OnTypeToContext.prototype.grantIdentifier = function() {
    return this.getTypedRuleContext(GrantIdentifierContext,0);
};

OnTypeToContext.prototype.aclType = function() {
    return this.getTypedRuleContext(AclTypeContext,0);
};

OnTypeToContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOnTypeTo(this);
	}
};

OnTypeToContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOnTypeTo(this);
	}
};

OnTypeToContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOnTypeTo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OnTypeToContext = OnTypeToContext;

MySQLParser.prototype.onTypeTo = function() {

    var localctx = new OnTypeToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, MySQLParser.RULE_onTypeTo);
    var _la = 0; // Token type
    try {
        this.state = 4500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,538,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4486;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 4487;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 4489;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,535,this._ctx);
            if(la_===1) {
                this.state = 4488;
                this.aclType();

            }
            this.state = 4491;
            this.grantIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4492;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ON_SYMBOL) {
                this.state = 4493;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 4495;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,536,this._ctx);
                if(la_===1) {
                    this.state = 4494;
                    this.aclType();

                }
                this.state = 4497;
                this.grantIdentifier();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AclTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_aclType;
    return this;
}

AclTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AclTypeContext.prototype.constructor = AclTypeContext;

AclTypeContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

AclTypeContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

AclTypeContext.prototype.PROCEDURE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
};

AclTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAclType(this);
	}
};

AclTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAclType(this);
	}
};

AclTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAclType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AclTypeContext = AclTypeContext;

MySQLParser.prototype.aclType = function() {

    var localctx = new AclTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, MySQLParser.RULE_aclType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4502;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FUNCTION_SYMBOL || _la===MySQLParser.PROCEDURE_SYMBOL || _la===MySQLParser.TABLE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleOrPrivilegesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleOrPrivilegesList;
    return this;
}

RoleOrPrivilegesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleOrPrivilegesListContext.prototype.constructor = RoleOrPrivilegesListContext;

RoleOrPrivilegesListContext.prototype.roleOrPrivilege = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoleOrPrivilegeContext);
    } else {
        return this.getTypedRuleContext(RoleOrPrivilegeContext,i);
    }
};

RoleOrPrivilegesListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


RoleOrPrivilegesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleOrPrivilegesList(this);
	}
};

RoleOrPrivilegesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleOrPrivilegesList(this);
	}
};

RoleOrPrivilegesListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleOrPrivilegesList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleOrPrivilegesListContext = RoleOrPrivilegesListContext;

MySQLParser.prototype.roleOrPrivilegesList = function() {

    var localctx = new RoleOrPrivilegesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, MySQLParser.RULE_roleOrPrivilegesList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4504;
        this.roleOrPrivilege();
        this.state = 4509;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,539,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4505;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4506;
                this.roleOrPrivilege(); 
            }
            this.state = 4511;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,539,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleOrPrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleOrPrivilege;
    this.object = null; // Token
    return this;
}

RoleOrPrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleOrPrivilegeContext.prototype.constructor = RoleOrPrivilegeContext;

RoleOrPrivilegeContext.prototype.roleIdentifierOrText = function() {
    return this.getTypedRuleContext(RoleIdentifierOrTextContext,0);
};

RoleOrPrivilegeContext.prototype.AT_TEXT_SUFFIX = function() {
    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
};

RoleOrPrivilegeContext.prototype.AT_SIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

RoleOrPrivilegeContext.prototype.columnInternalRefList = function() {
    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
};

RoleOrPrivilegeContext.prototype.SELECT_SYMBOL = function() {
    return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.INSERT_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.REFERENCES_SYMBOL = function() {
    return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.DELETE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.USAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.EXECUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.RELOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.SHUTDOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.PROCESS_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.FILE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.PROXY_SYMBOL = function() {
    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.SUPER_SYMBOL = function() {
    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.TRIGGER_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.GRANT_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.OPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.SHOW_SYMBOL = function() {
    return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.DATABASES_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.CREATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.TEMPORARY_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.ROUTINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.CLIENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.ALTER_SYMBOL = function() {
    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

RoleOrPrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleOrPrivilege(this);
	}
};

RoleOrPrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleOrPrivilege(this);
	}
};

RoleOrPrivilegeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleOrPrivilege(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleOrPrivilegeContext = RoleOrPrivilegeContext;

MySQLParser.prototype.roleOrPrivilege = function() {

    var localctx = new RoleOrPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, MySQLParser.RULE_roleOrPrivilege);
    var _la = 0; // Token type
    try {
        this.state = 4553;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,546,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4512;
            if (!( serverVersion > 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 80000");
            }
            this.state = 4523;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,542,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4513;
                this.roleIdentifierOrText();
                this.state = 4515;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,540,this._ctx);
                if(la_===1) {
                    this.state = 4514;
                    this.columnInternalRefList();

                }
                break;

            case 2:
                this.state = 4517;
                this.roleIdentifierOrText();
                this.state = 4521;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.AT_TEXT_SUFFIX:
                    this.state = 4518;
                    this.match(MySQLParser.AT_TEXT_SUFFIX);
                    break;
                case MySQLParser.AT_SIGN_SYMBOL:
                    this.state = 4519;
                    this.match(MySQLParser.AT_SIGN_SYMBOL);
                    this.state = 4520;
                    this.textOrIdentifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4525;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INSERT_SYMBOL || _la===MySQLParser.REFERENCES_SYMBOL || _la===MySQLParser.SELECT_SYMBOL || _la===MySQLParser.UPDATE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4527;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
            if(la_===1) {
                this.state = 4526;
                this.columnInternalRefList();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4529;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.EXECUTE_SYMBOL || _la===MySQLParser.SHUTDOWN_SYMBOL || _la===MySQLParser.EVENT_SYMBOL || _la===MySQLParser.FILE_SYMBOL || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (MySQLParser.PROCESS_SYMBOL - 261)) | (1 << (MySQLParser.PROXY_SYMBOL - 261)) | (1 << (MySQLParser.RELOAD_SYMBOL - 261)))) !== 0) || _la===MySQLParser.SUPER_SYMBOL || _la===MySQLParser.DELETE_SYMBOL || _la===MySQLParser.DROP_SYMBOL || _la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.TRIGGER_SYMBOL || _la===MySQLParser.USAGE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4530;
            this.match(MySQLParser.GRANT_SYMBOL);
            this.state = 4531;
            this.match(MySQLParser.OPTION_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4532;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 4533;
            this.match(MySQLParser.DATABASES_SYMBOL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4534;
            this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 4538;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,544,this._ctx);
            if(la_===1) {
                this.state = 4535;
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                this.state = 4536;
                localctx.object = this.match(MySQLParser.TABLES_SYMBOL);

            } else if(la_===2) {
                this.state = 4537;
                localctx.object = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.ROUTINE_SYMBOL || ((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (MySQLParser.TABLESPACE_SYMBOL - 342)) | (1 << (MySQLParser.USER_SYMBOL - 342)) | (1 << (MySQLParser.VIEW_SYMBOL - 342)))) !== 0))) {
                    localctx.object = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4540;
            this.match(MySQLParser.LOCK_SYMBOL);
            this.state = 4541;
            this.match(MySQLParser.TABLES_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4542;
            this.match(MySQLParser.REPLICATION_SYMBOL);
            this.state = 4543;
            localctx.object = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SLAVE_SYMBOL || _la===MySQLParser.CLIENT_SYMBOL)) {
                localctx.object = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4544;
            this.match(MySQLParser.SHOW_SYMBOL);
            this.state = 4545;
            this.match(MySQLParser.VIEW_SYMBOL);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4546;
            this.match(MySQLParser.ALTER_SYMBOL);
            this.state = 4548;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,545,this._ctx);
            if(la_===1) {
                this.state = 4547;
                this.match(MySQLParser.ROUTINE_SYMBOL);

            }
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 4550;
            if (!( serverVersion > 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 80000");
            }
            this.state = 4551;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CREATE_SYMBOL || _la===MySQLParser.DROP_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4552;
            this.match(MySQLParser.ROLE_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantIdentifier;
    return this;
}

GrantIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantIdentifierContext.prototype.constructor = GrantIdentifierContext;

GrantIdentifierContext.prototype.MULT_OPERATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MULT_OPERATOR);
    } else {
        return this.getToken(MySQLParser.MULT_OPERATOR, i);
    }
};


GrantIdentifierContext.prototype.DOT_SYMBOL = function() {
    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
};

GrantIdentifierContext.prototype.schemaRef = function() {
    return this.getTypedRuleContext(SchemaRefContext,0);
};

GrantIdentifierContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

GrantIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantIdentifier(this);
	}
};

GrantIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantIdentifier(this);
	}
};

GrantIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantIdentifierContext = GrantIdentifierContext;

MySQLParser.prototype.grantIdentifier = function() {

    var localctx = new GrantIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, MySQLParser.RULE_grantIdentifier);
    var _la = 0; // Token type
    try {
        this.state = 4571;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4555;
            this.match(MySQLParser.MULT_OPERATOR);
            this.state = 4558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DOT_SYMBOL) {
                this.state = 4556;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 4557;
                this.match(MySQLParser.MULT_OPERATOR);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4560;
            this.schemaRef();
            this.state = 4563;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DOT_SYMBOL) {
                this.state = 4561;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 4562;
                this.match(MySQLParser.MULT_OPERATOR);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4565;
            this.tableRef();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4566;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 4567;
            this.schemaRef();
            this.state = 4568;
            this.match(MySQLParser.DOT_SYMBOL);
            this.state = 4569;
            this.tableRef();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequireListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_requireList;
    return this;
}

RequireListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequireListContext.prototype.constructor = RequireListContext;

RequireListContext.prototype.requireListElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RequireListElementContext);
    } else {
        return this.getTypedRuleContext(RequireListElementContext,i);
    }
};

RequireListContext.prototype.AND_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.AND_SYMBOL);
    } else {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
};


RequireListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRequireList(this);
	}
};

RequireListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRequireList(this);
	}
};

RequireListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRequireList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RequireListContext = RequireListContext;

MySQLParser.prototype.requireList = function() {

    var localctx = new RequireListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, MySQLParser.RULE_requireList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4573;
        this.requireListElement();
        this.state = 4580;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,551,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4575;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AND_SYMBOL) {
                    this.state = 4574;
                    this.match(MySQLParser.AND_SYMBOL);
                }

                this.state = 4577;
                this.requireListElement(); 
            }
            this.state = 4582;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,551,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequireListElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_requireListElement;
    this.element = null; // Token
    return this;
}

RequireListElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequireListElementContext.prototype.constructor = RequireListElementContext;

RequireListElementContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

RequireListElementContext.prototype.CIPHER_SYMBOL = function() {
    return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
};

RequireListElementContext.prototype.ISSUER_SYMBOL = function() {
    return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
};

RequireListElementContext.prototype.SUBJECT_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
};

RequireListElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRequireListElement(this);
	}
};

RequireListElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRequireListElement(this);
	}
};

RequireListElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRequireListElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RequireListElementContext = RequireListElementContext;

MySQLParser.prototype.requireListElement = function() {

    var localctx = new RequireListElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, MySQLParser.RULE_requireListElement);
    try {
        this.state = 4589;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CIPHER_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4583;
            localctx.element = this.match(MySQLParser.CIPHER_SYMBOL);
            this.state = 4584;
            this.textString();
            break;
        case MySQLParser.ISSUER_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4585;
            localctx.element = this.match(MySQLParser.ISSUER_SYMBOL);
            this.state = 4586;
            this.textString();
            break;
        case MySQLParser.SUBJECT_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 4587;
            localctx.element = this.match(MySQLParser.SUBJECT_SYMBOL);
            this.state = 4588;
            this.textString();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantOption;
    this.option = null; // Token
    return this;
}

GrantOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantOptionContext.prototype.constructor = GrantOptionContext;

GrantOptionContext.prototype.OPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
};

GrantOptionContext.prototype.GRANT_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
};

GrantOptionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

GrantOptionContext.prototype.MAX_QUERIES_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
};

GrantOptionContext.prototype.MAX_UPDATES_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
};

GrantOptionContext.prototype.MAX_CONNECTIONS_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
};

GrantOptionContext.prototype.MAX_USER_CONNECTIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
};

GrantOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantOption(this);
	}
};

GrantOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantOption(this);
	}
};

GrantOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantOptionContext = GrantOptionContext;

MySQLParser.prototype.grantOption = function() {

    var localctx = new GrantOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, MySQLParser.RULE_grantOption);
    try {
        this.state = 4601;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.GRANT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4591;
            localctx.option = this.match(MySQLParser.GRANT_SYMBOL);
            this.state = 4592;
            this.match(MySQLParser.OPTION_SYMBOL);
            break;
        case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4593;
            localctx.option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
            this.state = 4594;
            this.ulong_number();
            break;
        case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 4595;
            localctx.option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
            this.state = 4596;
            this.ulong_number();
            break;
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 4597;
            localctx.option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
            this.state = 4598;
            this.ulong_number();
            break;
        case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 4599;
            localctx.option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
            this.state = 4600;
            this.ulong_number();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setRole;
    return this;
}

SetRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetRoleContext.prototype.constructor = SetRoleContext;

SetRoleContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

SetRoleContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

SetRoleContext.prototype.roleList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoleListContext);
    } else {
        return this.getTypedRuleContext(RoleListContext,i);
    }
};

SetRoleContext.prototype.NONE_SYMBOL = function() {
    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
};

SetRoleContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

SetRoleContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

SetRoleContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

SetRoleContext.prototype.EXCEPT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
};

SetRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetRole(this);
	}
};

SetRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetRole(this);
	}
};

SetRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetRoleContext = SetRoleContext;

MySQLParser.prototype.setRole = function() {

    var localctx = new SetRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, MySQLParser.RULE_setRole);
    var _la = 0; // Token type
    try {
        this.state = 4626;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,556,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4603;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 4604;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 4605;
            this.roleList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4606;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 4607;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 4608;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NONE_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4609;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 4610;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 4611;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 4615;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4612;
                this.roleList();
                break;

            case 2:
                this.state = 4613;
                this.match(MySQLParser.NONE_SYMBOL);
                break;

            case 3:
                this.state = 4614;
                this.match(MySQLParser.ALL_SYMBOL);
                break;

            }
            this.state = 4617;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4618;
            this.roleList();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4619;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 4620;
            this.match(MySQLParser.ROLE_SYMBOL);
            this.state = 4621;
            this.match(MySQLParser.ALL_SYMBOL);
            this.state = 4624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EXCEPT_SYMBOL) {
                this.state = 4622;
                this.match(MySQLParser.EXCEPT_SYMBOL);
                this.state = 4623;
                this.roleList();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleList;
    return this;
}

RoleListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleListContext.prototype.constructor = RoleListContext;

RoleListContext.prototype.role = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoleContext);
    } else {
        return this.getTypedRuleContext(RoleContext,i);
    }
};

RoleListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


RoleListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleList(this);
	}
};

RoleListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleList(this);
	}
};

RoleListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleListContext = RoleListContext;

MySQLParser.prototype.roleList = function() {

    var localctx = new RoleListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, MySQLParser.RULE_roleList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4628;
        this.role();
        this.state = 4633;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,557,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4629;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4630;
                this.role(); 
            }
            this.state = 4635;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,557,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_role;
    return this;
}

RoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleContext.prototype.constructor = RoleContext;

RoleContext.prototype.roleIdentifierOrText = function() {
    return this.getTypedRuleContext(RoleIdentifierOrTextContext,0);
};

RoleContext.prototype.AT_SIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
};

RoleContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

RoleContext.prototype.AT_TEXT_SUFFIX = function() {
    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
};

RoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRole(this);
	}
};

RoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRole(this);
	}
};

RoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleContext = RoleContext;

MySQLParser.prototype.role = function() {

    var localctx = new RoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, MySQLParser.RULE_role);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4636;
        this.roleIdentifierOrText();
        this.state = 4640;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
        if(la_===1) {
            this.state = 4637;
            this.match(MySQLParser.AT_SIGN_SYMBOL);
            this.state = 4638;
            this.textOrIdentifier();

        } else if(la_===2) {
            this.state = 4639;
            this.match(MySQLParser.AT_TEXT_SUFFIX);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableAdministrationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableAdministrationStatement;
    this.type = null; // Token
    return this;
}

TableAdministrationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAdministrationStatementContext.prototype.constructor = TableAdministrationStatementContext;

TableAdministrationStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.tableRefList = function() {
    return this.getTypedRuleContext(TableRefListContext,0);
};

TableAdministrationStatementContext.prototype.ANALYZE_SYMBOL = function() {
    return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.noWriteToBinLog = function() {
    return this.getTypedRuleContext(NoWriteToBinLogContext,0);
};

TableAdministrationStatementContext.prototype.histogram = function() {
    return this.getTypedRuleContext(HistogramContext,0);
};

TableAdministrationStatementContext.prototype.CHECK_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.checkOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CheckOptionContext);
    } else {
        return this.getTypedRuleContext(CheckOptionContext,i);
    }
};

TableAdministrationStatementContext.prototype.CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.QUICK_SYMBOL = function() {
    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.OPTIMIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.REPAIR_SYMBOL = function() {
    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
};

TableAdministrationStatementContext.prototype.repairType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RepairTypeContext);
    } else {
        return this.getTypedRuleContext(RepairTypeContext,i);
    }
};

TableAdministrationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableAdministrationStatement(this);
	}
};

TableAdministrationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableAdministrationStatement(this);
	}
};

TableAdministrationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableAdministrationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableAdministrationStatementContext = TableAdministrationStatementContext;

MySQLParser.prototype.tableAdministrationStatement = function() {

    var localctx = new TableAdministrationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, MySQLParser.RULE_tableAdministrationStatement);
    var _la = 0; // Token type
    try {
        this.state = 4685;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ANALYZE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4642;
            localctx.type = this.match(MySQLParser.ANALYZE_SYMBOL);
            this.state = 4644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                this.state = 4643;
                this.noWriteToBinLog();
            }

            this.state = 4646;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 4647;
            this.tableRefList();
            this.state = 4650;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,560,this._ctx);
            if(la_===1) {
                this.state = 4648;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 4649;
                this.histogram();

            }
            break;
        case MySQLParser.CHECK_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4652;
            localctx.type = this.match(MySQLParser.CHECK_SYMBOL);
            this.state = 4653;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 4654;
            this.tableRefList();
            this.state = 4658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.CHANGED_SYMBOL || _la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.FAST_SYMBOL || _la===MySQLParser.MEDIUM_SYMBOL || _la===MySQLParser.QUICK_SYMBOL || _la===MySQLParser.FOR_SYMBOL) {
                this.state = 4655;
                this.checkOption();
                this.state = 4660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case MySQLParser.CHECKSUM_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 4661;
            localctx.type = this.match(MySQLParser.CHECKSUM_SYMBOL);
            this.state = 4662;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 4663;
            this.tableRefList();
            this.state = 4665;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.QUICK_SYMBOL) {
                this.state = 4664;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.QUICK_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;
        case MySQLParser.OPTIMIZE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 4667;
            localctx.type = this.match(MySQLParser.OPTIMIZE_SYMBOL);
            this.state = 4669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                this.state = 4668;
                this.noWriteToBinLog();
            }

            this.state = 4671;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 4672;
            this.tableRefList();
            break;
        case MySQLParser.REPAIR_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 4673;
            localctx.type = this.match(MySQLParser.REPAIR_SYMBOL);
            this.state = 4675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                this.state = 4674;
                this.noWriteToBinLog();
            }

            this.state = 4677;
            this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 4678;
            this.tableRefList();
            this.state = 4682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.QUICK_SYMBOL || _la===MySQLParser.USE_FRM_SYMBOL) {
                this.state = 4679;
                this.repairType();
                this.state = 4684;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HistogramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_histogram;
    return this;
}

HistogramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HistogramContext.prototype.constructor = HistogramContext;

HistogramContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

HistogramContext.prototype.HISTOGRAM_SYMBOL = function() {
    return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
};

HistogramContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

HistogramContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

HistogramContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

HistogramContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

HistogramContext.prototype.BUCKETS_SYMBOL = function() {
    return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
};

HistogramContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

HistogramContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHistogram(this);
	}
};

HistogramContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHistogram(this);
	}
};

HistogramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHistogram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HistogramContext = HistogramContext;

MySQLParser.prototype.histogram = function() {

    var localctx = new HistogramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, MySQLParser.RULE_histogram);
    var _la = 0; // Token type
    try {
        this.state = 4700;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.UPDATE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4687;
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.state = 4688;
            this.match(MySQLParser.HISTOGRAM_SYMBOL);
            this.state = 4689;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 4690;
            this.identifierList();
            this.state = 4694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH_SYMBOL) {
                this.state = 4691;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4692;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 4693;
                this.match(MySQLParser.BUCKETS_SYMBOL);
            }

            break;
        case MySQLParser.DROP_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4696;
            this.match(MySQLParser.DROP_SYMBOL);
            this.state = 4697;
            this.match(MySQLParser.HISTOGRAM_SYMBOL);
            this.state = 4698;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 4699;
            this.identifierList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CheckOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_checkOption;
    return this;
}

CheckOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckOptionContext.prototype.constructor = CheckOptionContext;

CheckOptionContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

CheckOptionContext.prototype.UPGRADE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
};

CheckOptionContext.prototype.QUICK_SYMBOL = function() {
    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
};

CheckOptionContext.prototype.FAST_SYMBOL = function() {
    return this.getToken(MySQLParser.FAST_SYMBOL, 0);
};

CheckOptionContext.prototype.MEDIUM_SYMBOL = function() {
    return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
};

CheckOptionContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

CheckOptionContext.prototype.CHANGED_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
};

CheckOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckOption(this);
	}
};

CheckOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckOption(this);
	}
};

CheckOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CheckOptionContext = CheckOptionContext;

MySQLParser.prototype.checkOption = function() {

    var localctx = new CheckOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, MySQLParser.RULE_checkOption);
    var _la = 0; // Token type
    try {
        this.state = 4705;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.FOR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4702;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 4703;
            this.match(MySQLParser.UPGRADE_SYMBOL);
            break;
        case MySQLParser.CHANGED_SYMBOL:
        case MySQLParser.EXTENDED_SYMBOL:
        case MySQLParser.FAST_SYMBOL:
        case MySQLParser.MEDIUM_SYMBOL:
        case MySQLParser.QUICK_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4704;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CHANGED_SYMBOL || _la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.FAST_SYMBOL || _la===MySQLParser.MEDIUM_SYMBOL || _la===MySQLParser.QUICK_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepairTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_repairType;
    return this;
}

RepairTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepairTypeContext.prototype.constructor = RepairTypeContext;

RepairTypeContext.prototype.QUICK_SYMBOL = function() {
    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
};

RepairTypeContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

RepairTypeContext.prototype.USE_FRM_SYMBOL = function() {
    return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
};

RepairTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRepairType(this);
	}
};

RepairTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRepairType(this);
	}
};

RepairTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRepairType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RepairTypeContext = RepairTypeContext;

MySQLParser.prototype.repairType = function() {

    var localctx = new RepairTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, MySQLParser.RULE_repairType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4707;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.EXTENDED_SYMBOL || _la===MySQLParser.QUICK_SYMBOL || _la===MySQLParser.USE_FRM_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstallUninstallStatmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_installUninstallStatment;
    this.action = null; // Token
    this.type = null; // Token
    return this;
}

InstallUninstallStatmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstallUninstallStatmentContext.prototype.constructor = InstallUninstallStatmentContext;

InstallUninstallStatmentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

InstallUninstallStatmentContext.prototype.SONAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
};

InstallUninstallStatmentContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

InstallUninstallStatmentContext.prototype.INSTALL_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
};

InstallUninstallStatmentContext.prototype.PLUGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
};

InstallUninstallStatmentContext.prototype.textStringLiteralList = function() {
    return this.getTypedRuleContext(TextStringLiteralListContext,0);
};

InstallUninstallStatmentContext.prototype.COMPONENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
};

InstallUninstallStatmentContext.prototype.pluginRef = function() {
    return this.getTypedRuleContext(PluginRefContext,0);
};

InstallUninstallStatmentContext.prototype.UNINSTALL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
};

InstallUninstallStatmentContext.prototype.componentRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentRefContext);
    } else {
        return this.getTypedRuleContext(ComponentRefContext,i);
    }
};

InstallUninstallStatmentContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


InstallUninstallStatmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInstallUninstallStatment(this);
	}
};

InstallUninstallStatmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInstallUninstallStatment(this);
	}
};

InstallUninstallStatmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInstallUninstallStatment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InstallUninstallStatmentContext = InstallUninstallStatmentContext;

MySQLParser.prototype.installUninstallStatment = function() {

    var localctx = new InstallUninstallStatmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, MySQLParser.RULE_installUninstallStatment);
    var _la = 0; // Token type
    try {
        this.state = 4731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,571,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4709;
            localctx.action = this.match(MySQLParser.INSTALL_SYMBOL);
            this.state = 4710;
            localctx.type = this.match(MySQLParser.PLUGIN_SYMBOL);
            this.state = 4711;
            this.identifier();
            this.state = 4712;
            this.match(MySQLParser.SONAME_SYMBOL);
            this.state = 4713;
            this.textStringLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4715;
            localctx.action = this.match(MySQLParser.INSTALL_SYMBOL);
            this.state = 4716;
            localctx.type = this.match(MySQLParser.COMPONENT_SYMBOL);
            this.state = 4717;
            this.textStringLiteralList();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4718;
            localctx.action = this.match(MySQLParser.UNINSTALL_SYMBOL);
            this.state = 4719;
            localctx.type = this.match(MySQLParser.PLUGIN_SYMBOL);
            this.state = 4720;
            this.pluginRef();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4721;
            localctx.action = this.match(MySQLParser.UNINSTALL_SYMBOL);
            this.state = 4722;
            localctx.type = this.match(MySQLParser.COMPONENT_SYMBOL);
            this.state = 4723;
            this.componentRef();
            this.state = 4728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 4724;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4725;
                this.componentRef();
                this.state = 4730;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setStatement;
    return this;
}

SetStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetStatementContext.prototype.constructor = SetStatementContext;

SetStatementContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

SetStatementContext.prototype.startOptionValueList = function() {
    return this.getTypedRuleContext(StartOptionValueListContext,0);
};

SetStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetStatement(this);
	}
};

SetStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetStatement(this);
	}
};

SetStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetStatementContext = SetStatementContext;

MySQLParser.prototype.setStatement = function() {

    var localctx = new SetStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, MySQLParser.RULE_setStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4733;
        this.match(MySQLParser.SET_SYMBOL);
        this.state = 4734;
        this.startOptionValueList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StartOptionValueListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_startOptionValueList;
    return this;
}

StartOptionValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartOptionValueListContext.prototype.constructor = StartOptionValueListContext;

StartOptionValueListContext.prototype.optionValueNoOptionType = function() {
    return this.getTypedRuleContext(OptionValueNoOptionTypeContext,0);
};

StartOptionValueListContext.prototype.optionValueListContinued = function() {
    return this.getTypedRuleContext(OptionValueListContinuedContext,0);
};

StartOptionValueListContext.prototype.TRANSACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
};

StartOptionValueListContext.prototype.transactionCharacteristics = function() {
    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
};

StartOptionValueListContext.prototype.optionType = function() {
    return this.getTypedRuleContext(OptionTypeContext,0);
};

StartOptionValueListContext.prototype.startOptionValueListFollowingOptionType = function() {
    return this.getTypedRuleContext(StartOptionValueListFollowingOptionTypeContext,0);
};

StartOptionValueListContext.prototype.PASSWORD_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
    } else {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
    }
};


StartOptionValueListContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

StartOptionValueListContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

StartOptionValueListContext.prototype.OLD_PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
};

StartOptionValueListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

StartOptionValueListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

StartOptionValueListContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

StartOptionValueListContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

StartOptionValueListContext.prototype.replacePassword = function() {
    return this.getTypedRuleContext(ReplacePasswordContext,0);
};

StartOptionValueListContext.prototype.retainCurrentPassword = function() {
    return this.getTypedRuleContext(RetainCurrentPasswordContext,0);
};

StartOptionValueListContext.prototype.TO_SYMBOL = function() {
    return this.getToken(MySQLParser.TO_SYMBOL, 0);
};

StartOptionValueListContext.prototype.RANDOM_SYMBOL = function() {
    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
};

StartOptionValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStartOptionValueList(this);
	}
};

StartOptionValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStartOptionValueList(this);
	}
};

StartOptionValueListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStartOptionValueList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StartOptionValueListContext = StartOptionValueListContext;

MySQLParser.prototype.startOptionValueList = function() {

    var localctx = new StartOptionValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, MySQLParser.RULE_startOptionValueList);
    var _la = 0; // Token type
    try {
        this.state = 4792;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,581,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4736;
            this.optionValueNoOptionType();
            this.state = 4737;
            this.optionValueListContinued();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4739;
            this.match(MySQLParser.TRANSACTION_SYMBOL);
            this.state = 4740;
            this.transactionCharacteristics();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4741;
            this.optionType();
            this.state = 4742;
            this.startOptionValueListFollowingOptionType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4744;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 4747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 4745;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 4746;
                this.user();
            }

            this.state = 4749;
            this.equal();
            this.state = 4776;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,577,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4750;
                this.textString();
                this.state = 4752;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.REPLACE_SYMBOL) {
                    this.state = 4751;
                    this.replacePassword();
                }

                this.state = 4755;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.RETAIN_SYMBOL) {
                    this.state = 4754;
                    this.retainCurrentPassword();
                }

                break;

            case 2:
                this.state = 4757;
                this.textString();
                this.state = 4759;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.REPLACE_SYMBOL) {
                    this.state = 4758;
                    this.replacePassword();
                }

                this.state = 4762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.RETAIN_SYMBOL) {
                    this.state = 4761;
                    this.retainCurrentPassword();
                }

                break;

            case 3:
                this.state = 4764;
                if (!( serverVersion < 50706)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50706");
                }
                this.state = 4765;
                this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
                this.state = 4766;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4767;
                this.textString();
                this.state = 4768;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;

            case 4:
                this.state = 4770;
                if (!( serverVersion < 80014)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80014");
                }
                this.state = 4771;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.state = 4772;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 4773;
                this.textString();
                this.state = 4774;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4778;
            if (!( serverVersion >= 80018)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
            }
            this.state = 4779;
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 4782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 4780;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 4781;
                this.user();
            }

            this.state = 4784;
            this.match(MySQLParser.TO_SYMBOL);
            this.state = 4785;
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.state = 4787;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.REPLACE_SYMBOL) {
                this.state = 4786;
                this.replacePassword();
            }

            this.state = 4790;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.RETAIN_SYMBOL) {
                this.state = 4789;
                this.retainCurrentPassword();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionCharacteristicsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionCharacteristics;
    return this;
}

TransactionCharacteristicsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionCharacteristicsContext.prototype.constructor = TransactionCharacteristicsContext;

TransactionCharacteristicsContext.prototype.transactionAccessMode = function() {
    return this.getTypedRuleContext(TransactionAccessModeContext,0);
};

TransactionCharacteristicsContext.prototype.isolationLevel = function() {
    return this.getTypedRuleContext(IsolationLevelContext,0);
};

TransactionCharacteristicsContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

TransactionCharacteristicsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionCharacteristics(this);
	}
};

TransactionCharacteristicsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionCharacteristics(this);
	}
};

TransactionCharacteristicsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionCharacteristics(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext;

MySQLParser.prototype.transactionCharacteristics = function() {

    var localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, MySQLParser.RULE_transactionCharacteristics);
    var _la = 0; // Token type
    try {
        this.state = 4803;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.READ_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4794;
            this.transactionAccessMode();
            this.state = 4796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ISOLATION_SYMBOL) {
                this.state = 4795;
                this.isolationLevel();
            }

            break;
        case MySQLParser.ISOLATION_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4798;
            this.isolationLevel();
            this.state = 4801;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 4799;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 4800;
                this.transactionAccessMode();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionAccessModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionAccessMode;
    return this;
}

TransactionAccessModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionAccessModeContext.prototype.constructor = TransactionAccessModeContext;

TransactionAccessModeContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

TransactionAccessModeContext.prototype.WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
};

TransactionAccessModeContext.prototype.ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
};

TransactionAccessModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionAccessMode(this);
	}
};

TransactionAccessModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionAccessMode(this);
	}
};

TransactionAccessModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionAccessMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionAccessModeContext = TransactionAccessModeContext;

MySQLParser.prototype.transactionAccessMode = function() {

    var localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, MySQLParser.RULE_transactionAccessMode);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4805;
        this.match(MySQLParser.READ_SYMBOL);
        this.state = 4806;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ONLY_SYMBOL || _la===MySQLParser.WRITE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IsolationLevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_isolationLevel;
    return this;
}

IsolationLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsolationLevelContext.prototype.constructor = IsolationLevelContext;

IsolationLevelContext.prototype.ISOLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
};

IsolationLevelContext.prototype.LEVEL_SYMBOL = function() {
    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
};

IsolationLevelContext.prototype.REPEATABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
};

IsolationLevelContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

IsolationLevelContext.prototype.SERIALIZABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
};

IsolationLevelContext.prototype.COMMITTED_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
};

IsolationLevelContext.prototype.UNCOMMITTED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
};

IsolationLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIsolationLevel(this);
	}
};

IsolationLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIsolationLevel(this);
	}
};

IsolationLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIsolationLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IsolationLevelContext = IsolationLevelContext;

MySQLParser.prototype.isolationLevel = function() {

    var localctx = new IsolationLevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, MySQLParser.RULE_isolationLevel);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4808;
        this.match(MySQLParser.ISOLATION_SYMBOL);
        this.state = 4809;
        this.match(MySQLParser.LEVEL_SYMBOL);
        this.state = 4815;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.REPEATABLE_SYMBOL:
            this.state = 4810;
            this.match(MySQLParser.REPEATABLE_SYMBOL);
            this.state = 4811;
            this.match(MySQLParser.READ_SYMBOL);
            break;
        case MySQLParser.READ_SYMBOL:
            this.state = 4812;
            this.match(MySQLParser.READ_SYMBOL);
            this.state = 4813;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.COMMITTED_SYMBOL || _la===MySQLParser.UNCOMMITTED_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.SERIALIZABLE_SYMBOL:
            this.state = 4814;
            this.match(MySQLParser.SERIALIZABLE_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionValueListContinuedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_optionValueListContinued;
    return this;
}

OptionValueListContinuedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionValueListContinuedContext.prototype.constructor = OptionValueListContinuedContext;

OptionValueListContinuedContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


OptionValueListContinuedContext.prototype.optionValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionValueContext);
    } else {
        return this.getTypedRuleContext(OptionValueContext,i);
    }
};

OptionValueListContinuedContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOptionValueListContinued(this);
	}
};

OptionValueListContinuedContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOptionValueListContinued(this);
	}
};

OptionValueListContinuedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOptionValueListContinued(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OptionValueListContinuedContext = OptionValueListContinuedContext;

MySQLParser.prototype.optionValueListContinued = function() {

    var localctx = new OptionValueListContinuedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, MySQLParser.RULE_optionValueListContinued);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4821;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 4817;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 4818;
            this.optionValue();
            this.state = 4823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionValueNoOptionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_optionValueNoOptionType;
    return this;
}

OptionValueNoOptionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionValueNoOptionTypeContext.prototype.constructor = OptionValueNoOptionTypeContext;

OptionValueNoOptionTypeContext.prototype.internalVariableName = function() {
    return this.getTypedRuleContext(InternalVariableNameContext,0);
};

OptionValueNoOptionTypeContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

OptionValueNoOptionTypeContext.prototype.setExprOrDefault = function() {
    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
};

OptionValueNoOptionTypeContext.prototype.charsetClause = function() {
    return this.getTypedRuleContext(CharsetClauseContext,0);
};

OptionValueNoOptionTypeContext.prototype.userVariable = function() {
    return this.getTypedRuleContext(UserVariableContext,0);
};

OptionValueNoOptionTypeContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

OptionValueNoOptionTypeContext.prototype.setSystemVariable = function() {
    return this.getTypedRuleContext(SetSystemVariableContext,0);
};

OptionValueNoOptionTypeContext.prototype.NAMES_SYMBOL = function() {
    return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
};

OptionValueNoOptionTypeContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

OptionValueNoOptionTypeContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

OptionValueNoOptionTypeContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

OptionValueNoOptionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOptionValueNoOptionType(this);
	}
};

OptionValueNoOptionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOptionValueNoOptionType(this);
	}
};

OptionValueNoOptionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOptionValueNoOptionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OptionValueNoOptionTypeContext = OptionValueNoOptionTypeContext;

MySQLParser.prototype.optionValueNoOptionType = function() {

    var localctx = new OptionValueNoOptionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, MySQLParser.RULE_optionValueNoOptionType);
    var _la = 0; // Token type
    try {
        this.state = 4849;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4824;
            this.internalVariableName();
            this.state = 4825;
            this.equal();
            this.state = 4826;
            this.setExprOrDefault();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4828;
            this.charsetClause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4829;
            this.userVariable();
            this.state = 4830;
            this.equal();
            this.state = 4831;
            this.expr(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4833;
            this.setSystemVariable();
            this.state = 4834;
            this.equal();
            this.state = 4835;
            this.setExprOrDefault();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4837;
            this.match(MySQLParser.NAMES_SYMBOL);
            this.state = 4847;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,588,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4838;
                this.equal();
                this.state = 4839;
                this.expr(0);
                break;

            case 2:
                this.state = 4841;
                this.charsetName();
                this.state = 4843;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.COLLATE_SYMBOL) {
                    this.state = 4842;
                    this.collate();
                }

                break;

            case 3:
                this.state = 4845;
                if (!( serverVersion >= 80011)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
                }
                this.state = 4846;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_optionValue;
    return this;
}

OptionValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionValueContext.prototype.constructor = OptionValueContext;

OptionValueContext.prototype.optionType = function() {
    return this.getTypedRuleContext(OptionTypeContext,0);
};

OptionValueContext.prototype.internalVariableName = function() {
    return this.getTypedRuleContext(InternalVariableNameContext,0);
};

OptionValueContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

OptionValueContext.prototype.setExprOrDefault = function() {
    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
};

OptionValueContext.prototype.optionValueNoOptionType = function() {
    return this.getTypedRuleContext(OptionValueNoOptionTypeContext,0);
};

OptionValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOptionValue(this);
	}
};

OptionValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOptionValue(this);
	}
};

OptionValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOptionValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OptionValueContext = OptionValueContext;

MySQLParser.prototype.optionValue = function() {

    var localctx = new OptionValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, MySQLParser.RULE_optionValue);
    try {
        this.state = 4857;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4851;
            this.optionType();
            this.state = 4852;
            this.internalVariableName();
            this.state = 4853;
            this.equal();
            this.state = 4854;
            this.setExprOrDefault();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4856;
            this.optionValueNoOptionType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetSystemVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setSystemVariable;
    return this;
}

SetSystemVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetSystemVariableContext.prototype.constructor = SetSystemVariableContext;

SetSystemVariableContext.prototype.AT_AT_SIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
};

SetSystemVariableContext.prototype.internalVariableName = function() {
    return this.getTypedRuleContext(InternalVariableNameContext,0);
};

SetSystemVariableContext.prototype.setVarIdentType = function() {
    return this.getTypedRuleContext(SetVarIdentTypeContext,0);
};

SetSystemVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetSystemVariable(this);
	}
};

SetSystemVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetSystemVariable(this);
	}
};

SetSystemVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetSystemVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetSystemVariableContext = SetSystemVariableContext;

MySQLParser.prototype.setSystemVariable = function() {

    var localctx = new SetSystemVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, MySQLParser.RULE_setSystemVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4859;
        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
        this.state = 4861;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
        if(la_===1) {
            this.state = 4860;
            this.setVarIdentType();

        }
        this.state = 4863;
        this.internalVariableName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StartOptionValueListFollowingOptionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_startOptionValueListFollowingOptionType;
    return this;
}

StartOptionValueListFollowingOptionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartOptionValueListFollowingOptionTypeContext.prototype.constructor = StartOptionValueListFollowingOptionTypeContext;

StartOptionValueListFollowingOptionTypeContext.prototype.optionValueFollowingOptionType = function() {
    return this.getTypedRuleContext(OptionValueFollowingOptionTypeContext,0);
};

StartOptionValueListFollowingOptionTypeContext.prototype.optionValueListContinued = function() {
    return this.getTypedRuleContext(OptionValueListContinuedContext,0);
};

StartOptionValueListFollowingOptionTypeContext.prototype.TRANSACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
};

StartOptionValueListFollowingOptionTypeContext.prototype.transactionCharacteristics = function() {
    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
};

StartOptionValueListFollowingOptionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStartOptionValueListFollowingOptionType(this);
	}
};

StartOptionValueListFollowingOptionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStartOptionValueListFollowingOptionType(this);
	}
};

StartOptionValueListFollowingOptionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStartOptionValueListFollowingOptionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StartOptionValueListFollowingOptionTypeContext = StartOptionValueListFollowingOptionTypeContext;

MySQLParser.prototype.startOptionValueListFollowingOptionType = function() {

    var localctx = new StartOptionValueListFollowingOptionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, MySQLParser.RULE_startOptionValueListFollowingOptionType);
    try {
        this.state = 4870;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,592,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4865;
            this.optionValueFollowingOptionType();
            this.state = 4866;
            this.optionValueListContinued();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4868;
            this.match(MySQLParser.TRANSACTION_SYMBOL);
            this.state = 4869;
            this.transactionCharacteristics();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionValueFollowingOptionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_optionValueFollowingOptionType;
    return this;
}

OptionValueFollowingOptionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionValueFollowingOptionTypeContext.prototype.constructor = OptionValueFollowingOptionTypeContext;

OptionValueFollowingOptionTypeContext.prototype.internalVariableName = function() {
    return this.getTypedRuleContext(InternalVariableNameContext,0);
};

OptionValueFollowingOptionTypeContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

OptionValueFollowingOptionTypeContext.prototype.setExprOrDefault = function() {
    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
};

OptionValueFollowingOptionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOptionValueFollowingOptionType(this);
	}
};

OptionValueFollowingOptionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOptionValueFollowingOptionType(this);
	}
};

OptionValueFollowingOptionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOptionValueFollowingOptionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OptionValueFollowingOptionTypeContext = OptionValueFollowingOptionTypeContext;

MySQLParser.prototype.optionValueFollowingOptionType = function() {

    var localctx = new OptionValueFollowingOptionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, MySQLParser.RULE_optionValueFollowingOptionType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4872;
        this.internalVariableName();
        this.state = 4873;
        this.equal();
        this.state = 4874;
        this.setExprOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetExprOrDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setExprOrDefault;
    return this;
}

SetExprOrDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetExprOrDefaultContext.prototype.constructor = SetExprOrDefaultContext;

SetExprOrDefaultContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SetExprOrDefaultContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

SetExprOrDefaultContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

SetExprOrDefaultContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

SetExprOrDefaultContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

SetExprOrDefaultContext.prototype.ROW_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
};

SetExprOrDefaultContext.prototype.SYSTEM_SYMBOL = function() {
    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
};

SetExprOrDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetExprOrDefault(this);
	}
};

SetExprOrDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetExprOrDefault(this);
	}
};

SetExprOrDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetExprOrDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetExprOrDefaultContext = SetExprOrDefaultContext;

MySQLParser.prototype.setExprOrDefault = function() {

    var localctx = new SetExprOrDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, MySQLParser.RULE_setExprOrDefault);
    var _la = 0; // Token type
    try {
        this.state = 4880;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,593,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4876;
            this.expr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4877;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ALL_SYMBOL || _la===MySQLParser.BINARY_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL || _la===MySQLParser.ON_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4878;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 4879;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ROW_SYMBOL || _la===MySQLParser.SYSTEM_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showStatement;
    this.value = null; // Token
    this.object = null; // Token
    return this;
}

ShowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowStatementContext.prototype.constructor = ShowStatementContext;

ShowStatementContext.prototype.SHOW_SYMBOL = function() {
    return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
};

ShowStatementContext.prototype.STATUS_SYMBOL = function() {
    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
};

ShowStatementContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

ShowStatementContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

ShowStatementContext.prototype.EVENTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
};

ShowStatementContext.prototype.fromOrIn = function() {
    return this.getTypedRuleContext(FromOrInContext,0);
};

ShowStatementContext.prototype.COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
};

ShowStatementContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ShowStatementContext.prototype.MULT_OPERATOR = function() {
    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
};

ShowStatementContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ShowStatementContext.prototype.charset = function() {
    return this.getTypedRuleContext(CharsetContext,0);
};

ShowStatementContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

ShowStatementContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

ShowStatementContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

ShowStatementContext.prototype.userList = function() {
    return this.getTypedRuleContext(UserListContext,0);
};

ShowStatementContext.prototype.CODE_SYMBOL = function() {
    return this.getToken(MySQLParser.CODE_SYMBOL, 0);
};

ShowStatementContext.prototype.procedureRef = function() {
    return this.getTypedRuleContext(ProcedureRefContext,0);
};

ShowStatementContext.prototype.functionRef = function() {
    return this.getTypedRuleContext(FunctionRefContext,0);
};

ShowStatementContext.prototype.AUTHORS_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTHORS_SYMBOL, 0);
};

ShowStatementContext.prototype.DATABASES_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
};

ShowStatementContext.prototype.TRIGGERS_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
};

ShowStatementContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

ShowStatementContext.prototype.OPEN_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
};

ShowStatementContext.prototype.PLUGINS_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
};

ShowStatementContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

ShowStatementContext.prototype.MUTEX_SYMBOL = function() {
    return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
};

ShowStatementContext.prototype.LOGS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
};

ShowStatementContext.prototype.COLUMNS_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
};

ShowStatementContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

ShowStatementContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

ShowStatementContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

ShowStatementContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

ShowStatementContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

ShowStatementContext.prototype.ENGINES_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
};

ShowStatementContext.prototype.WARNINGS_SYMBOL = function() {
    return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
};

ShowStatementContext.prototype.ERRORS_SYMBOL = function() {
    return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
};

ShowStatementContext.prototype.PROFILES_SYMBOL = function() {
    return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
};

ShowStatementContext.prototype.PROFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
};

ShowStatementContext.prototype.PROCESSLIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
};

ShowStatementContext.prototype.COLLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
};

ShowStatementContext.prototype.CONTRIBUTORS_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0);
};

ShowStatementContext.prototype.PRIVILEGES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
};

ShowStatementContext.prototype.GRANTS_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
};

ShowStatementContext.prototype.CREATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
};

ShowStatementContext.prototype.PROCEDURE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
};

ShowStatementContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

ShowStatementContext.prototype.engineRef = function() {
    return this.getTypedRuleContext(EngineRefContext,0);
};

ShowStatementContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

ShowStatementContext.prototype.HOSTS_SYMBOL = function() {
    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
};

ShowStatementContext.prototype.nonBlocking = function() {
    return this.getTypedRuleContext(NonBlockingContext,0);
};

ShowStatementContext.prototype.BINLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
};

ShowStatementContext.prototype.RELAYLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
};

ShowStatementContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

ShowStatementContext.prototype.INDEXES_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
};

ShowStatementContext.prototype.KEYS_SYMBOL = function() {
    return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
};

ShowStatementContext.prototype.VARIABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
};

ShowStatementContext.prototype.schemaRef = function() {
    return this.getTypedRuleContext(SchemaRefContext,0);
};

ShowStatementContext.prototype.eventRef = function() {
    return this.getTypedRuleContext(EventRefContext,0);
};

ShowStatementContext.prototype.triggerRef = function() {
    return this.getTypedRuleContext(TriggerRefContext,0);
};

ShowStatementContext.prototype.viewRef = function() {
    return this.getTypedRuleContext(ViewRefContext,0);
};

ShowStatementContext.prototype.likeOrWhere = function() {
    return this.getTypedRuleContext(LikeOrWhereContext,0);
};

ShowStatementContext.prototype.showCommandType = function() {
    return this.getTypedRuleContext(ShowCommandTypeContext,0);
};

ShowStatementContext.prototype.inDb = function() {
    return this.getTypedRuleContext(InDbContext,0);
};

ShowStatementContext.prototype.FULL_SYMBOL = function() {
    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
};

ShowStatementContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

ShowStatementContext.prototype.ulonglong_number = function() {
    return this.getTypedRuleContext(Ulonglong_numberContext,0);
};

ShowStatementContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

ShowStatementContext.prototype.channel = function() {
    return this.getTypedRuleContext(ChannelContext,0);
};

ShowStatementContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

ShowStatementContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

ShowStatementContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

ShowStatementContext.prototype.profileType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProfileTypeContext);
    } else {
        return this.getTypedRuleContext(ProfileTypeContext,i);
    }
};

ShowStatementContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

ShowStatementContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

ShowStatementContext.prototype.optionType = function() {
    return this.getTypedRuleContext(OptionTypeContext,0);
};

ShowStatementContext.prototype.DATABASE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
};

ShowStatementContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

ShowStatementContext.prototype.TRIGGER_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
};

ShowStatementContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

ShowStatementContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

ShowStatementContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

ShowStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ShowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowStatement(this);
	}
};

ShowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowStatement(this);
	}
};

ShowStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowStatementContext = ShowStatementContext;

MySQLParser.prototype.showStatement = function() {

    var localctx = new ShowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, MySQLParser.RULE_showStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4882;
        this.match(MySQLParser.SHOW_SYMBOL);
        this.state = 5102;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,637,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4883;
            if (!( serverVersion < 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
            }
            this.state = 4884;
            localctx.value = this.match(MySQLParser.AUTHORS_SYMBOL);
            break;

        case 2:
            this.state = 4885;
            localctx.value = this.match(MySQLParser.DATABASES_SYMBOL);
            this.state = 4887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4886;
                this.likeOrWhere();
            }

            break;

        case 3:
            this.state = 4890;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
            if(la_===1) {
                this.state = 4889;
                this.showCommandType();

            }
            this.state = 4892;
            localctx.value = this.match(MySQLParser.TABLES_SYMBOL);
            this.state = 4894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4893;
                this.inDb();
            }

            this.state = 4897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4896;
                this.likeOrWhere();
            }

            break;

        case 4:
            this.state = 4900;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FULL_SYMBOL) {
                this.state = 4899;
                this.match(MySQLParser.FULL_SYMBOL);
            }

            this.state = 4902;
            localctx.value = this.match(MySQLParser.TRIGGERS_SYMBOL);
            this.state = 4904;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4903;
                this.inDb();
            }

            this.state = 4907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4906;
                this.likeOrWhere();
            }

            break;

        case 5:
            this.state = 4909;
            localctx.value = this.match(MySQLParser.EVENTS_SYMBOL);
            this.state = 4911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4910;
                this.inDb();
            }

            this.state = 4914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4913;
                this.likeOrWhere();
            }

            break;

        case 6:
            this.state = 4916;
            localctx.value = this.match(MySQLParser.TABLE_SYMBOL);
            this.state = 4917;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 4919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4918;
                this.inDb();
            }

            this.state = 4922;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4921;
                this.likeOrWhere();
            }

            break;

        case 7:
            this.state = 4924;
            localctx.value = this.match(MySQLParser.OPEN_SYMBOL);
            this.state = 4925;
            this.match(MySQLParser.TABLES_SYMBOL);
            this.state = 4927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4926;
                this.inDb();
            }

            this.state = 4930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4929;
                this.likeOrWhere();
            }

            break;

        case 8:
            this.state = 4932;
            localctx.value = this.match(MySQLParser.PLUGINS_SYMBOL);
            break;

        case 9:
            this.state = 4933;
            localctx.value = this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 4936;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,607,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4934;
                this.engineRef();
                break;

            case 2:
                this.state = 4935;
                this.match(MySQLParser.ALL_SYMBOL);
                break;

            }
            this.state = 4938;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LOGS_SYMBOL || _la===MySQLParser.MUTEX_SYMBOL || _la===MySQLParser.STATUS_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 10:
            this.state = 4940;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
            if(la_===1) {
                this.state = 4939;
                this.showCommandType();

            }
            this.state = 4942;
            localctx.value = this.match(MySQLParser.COLUMNS_SYMBOL);
            this.state = 4943;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4944;
            this.tableRef();
            this.state = 4946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4945;
                this.inDb();
            }

            this.state = 4949;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4948;
                this.likeOrWhere();
            }

            break;

        case 11:
            this.state = 4951;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.MASTER_SYMBOL || _la===MySQLParser.BINARY_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4952;
            localctx.value = this.match(MySQLParser.LOGS_SYMBOL);
            break;

        case 12:
            this.state = 4953;
            localctx.value = this.match(MySQLParser.SLAVE_SYMBOL);
            this.state = 4960;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.HOSTS_SYMBOL:
                this.state = 4954;
                this.match(MySQLParser.HOSTS_SYMBOL);
                break;
            case MySQLParser.STATUS_SYMBOL:
                this.state = 4955;
                this.match(MySQLParser.STATUS_SYMBOL);
                this.state = 4956;
                this.nonBlocking();
                this.state = 4958;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,611,this._ctx);
                if(la_===1) {
                    this.state = 4957;
                    this.channel();

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 13:
            this.state = 4962;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BINLOG_SYMBOL || _la===MySQLParser.RELAYLOG_SYMBOL)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4963;
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.state = 4966;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,613,this._ctx);
            if(la_===1) {
                this.state = 4964;
                this.match(MySQLParser.IN_SYMBOL);
                this.state = 4965;
                this.textString();

            }
            this.state = 4970;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,614,this._ctx);
            if(la_===1) {
                this.state = 4968;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 4969;
                this.ulonglong_number();

            }
            this.state = 4973;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,615,this._ctx);
            if(la_===1) {
                this.state = 4972;
                this.limitClause();

            }
            this.state = 4976;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
            if(la_===1) {
                this.state = 4975;
                this.channel();

            }
            break;

        case 14:
            this.state = 4980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,617,this._ctx);
            if(la_===1) {
                this.state = 4978;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 4979;
                this.match(MySQLParser.EXTENDED_SYMBOL);

            }
            this.state = 4982;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEXES_SYMBOL || _la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEYS_SYMBOL)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4983;
            this.fromOrIn();
            this.state = 4984;
            this.tableRef();
            this.state = 4986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL) {
                this.state = 4985;
                this.inDb();
            }

            this.state = 4989;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WHERE_SYMBOL) {
                this.state = 4988;
                this.whereClause();
            }

            break;

        case 15:
            this.state = 4992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STORAGE_SYMBOL) {
                this.state = 4991;
                this.match(MySQLParser.STORAGE_SYMBOL);
            }

            this.state = 4994;
            localctx.value = this.match(MySQLParser.ENGINES_SYMBOL);
            break;

        case 16:
            this.state = 4995;
            this.match(MySQLParser.COUNT_SYMBOL);
            this.state = 4996;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 4997;
            this.match(MySQLParser.MULT_OPERATOR);
            this.state = 4998;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 4999;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ERRORS_SYMBOL || _la===MySQLParser.WARNINGS_SYMBOL)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 17:
            this.state = 5000;
            localctx.value = this.match(MySQLParser.WARNINGS_SYMBOL);
            this.state = 5002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIMIT_SYMBOL) {
                this.state = 5001;
                this.limitClause();
            }

            break;

        case 18:
            this.state = 5004;
            localctx.value = this.match(MySQLParser.ERRORS_SYMBOL);
            this.state = 5006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIMIT_SYMBOL) {
                this.state = 5005;
                this.limitClause();
            }

            break;

        case 19:
            this.state = 5008;
            localctx.value = this.match(MySQLParser.PROFILES_SYMBOL);
            break;

        case 20:
            this.state = 5009;
            localctx.value = this.match(MySQLParser.PROFILE_SYMBOL);
            this.state = 5018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BLOCK_SYMBOL || _la===MySQLParser.CONTEXT_SYMBOL || _la===MySQLParser.CPU_SYMBOL || _la===MySQLParser.IPC_SYMBOL || _la===MySQLParser.MEMORY_SYMBOL || _la===MySQLParser.PAGE_SYMBOL || _la===MySQLParser.SOURCE_SYMBOL || _la===MySQLParser.SWAPS_SYMBOL || _la===MySQLParser.ALL_SYMBOL) {
                this.state = 5010;
                this.profileType();
                this.state = 5015;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.COMMA_SYMBOL) {
                    this.state = 5011;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 5012;
                    this.profileType();
                    this.state = 5017;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 5023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 5020;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 5021;
                this.match(MySQLParser.QUERY_SYMBOL);
                this.state = 5022;
                this.match(MySQLParser.INT_NUMBER);
            }

            this.state = 5026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIMIT_SYMBOL) {
                this.state = 5025;
                this.limitClause();
            }

            break;

        case 21:
            this.state = 5029;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.GLOBAL_SYMBOL || _la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.SESSION_SYMBOL || _la===MySQLParser.PERSIST_SYMBOL || _la===MySQLParser.PERSIST_ONLY_SYMBOL) {
                this.state = 5028;
                this.optionType();
            }

            this.state = 5031;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.STATUS_SYMBOL || _la===MySQLParser.VARIABLES_SYMBOL)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 5032;
                this.likeOrWhere();
            }

            break;

        case 22:
            this.state = 5036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FULL_SYMBOL) {
                this.state = 5035;
                this.match(MySQLParser.FULL_SYMBOL);
            }

            this.state = 5038;
            localctx.value = this.match(MySQLParser.PROCESSLIST_SYMBOL);
            break;

        case 23:
            this.state = 5039;
            this.charset();
            this.state = 5041;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 5040;
                this.likeOrWhere();
            }

            break;

        case 24:
            this.state = 5043;
            localctx.value = this.match(MySQLParser.COLLATION_SYMBOL);
            this.state = 5045;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 5044;
                this.likeOrWhere();
            }

            break;

        case 25:
            this.state = 5047;
            if (!( serverVersion < 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
            }
            this.state = 5048;
            localctx.value = this.match(MySQLParser.CONTRIBUTORS_SYMBOL);
            break;

        case 26:
            this.state = 5049;
            localctx.value = this.match(MySQLParser.PRIVILEGES_SYMBOL);
            break;

        case 27:
            this.state = 5050;
            localctx.value = this.match(MySQLParser.GRANTS_SYMBOL);
            this.state = 5053;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 5051;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 5052;
                this.user();
            }

            break;

        case 28:
            this.state = 5055;
            localctx.value = this.match(MySQLParser.GRANTS_SYMBOL);
            this.state = 5056;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 5057;
            this.user();
            this.state = 5058;
            this.match(MySQLParser.USING_SYMBOL);
            this.state = 5059;
            this.userList();
            break;

        case 29:
            this.state = 5061;
            localctx.value = this.match(MySQLParser.MASTER_SYMBOL);
            this.state = 5062;
            this.match(MySQLParser.STATUS_SYMBOL);
            break;

        case 30:
            this.state = 5063;
            localctx.value = this.match(MySQLParser.CREATE_SYMBOL);
            this.state = 5084;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,634,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5064;
                localctx.object = this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 5066;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,633,this._ctx);
                if(la_===1) {
                    this.state = 5065;
                    this.ifNotExists();

                }
                this.state = 5068;
                this.schemaRef();
                break;

            case 2:
                this.state = 5069;
                localctx.object = this.match(MySQLParser.EVENT_SYMBOL);
                this.state = 5070;
                this.eventRef();
                break;

            case 3:
                this.state = 5071;
                localctx.object = this.match(MySQLParser.FUNCTION_SYMBOL);
                this.state = 5072;
                this.functionRef();
                break;

            case 4:
                this.state = 5073;
                localctx.object = this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.state = 5074;
                this.procedureRef();
                break;

            case 5:
                this.state = 5075;
                localctx.object = this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 5076;
                this.tableRef();
                break;

            case 6:
                this.state = 5077;
                localctx.object = this.match(MySQLParser.TRIGGER_SYMBOL);
                this.state = 5078;
                this.triggerRef();
                break;

            case 7:
                this.state = 5079;
                localctx.object = this.match(MySQLParser.VIEW_SYMBOL);
                this.state = 5080;
                this.viewRef();
                break;

            case 8:
                this.state = 5081;
                if (!( serverVersion >= 50704)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
                }
                this.state = 5082;
                localctx.object = this.match(MySQLParser.USER_SYMBOL);
                this.state = 5083;
                this.user();
                break;

            }
            break;

        case 31:
            this.state = 5086;
            localctx.value = this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 5087;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5089;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 5088;
                this.likeOrWhere();
            }

            break;

        case 32:
            this.state = 5091;
            localctx.value = this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 5092;
            this.match(MySQLParser.STATUS_SYMBOL);
            this.state = 5094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE_SYMBOL || _la===MySQLParser.WHERE_SYMBOL) {
                this.state = 5093;
                this.likeOrWhere();
            }

            break;

        case 33:
            this.state = 5096;
            localctx.value = this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.state = 5097;
            this.match(MySQLParser.CODE_SYMBOL);
            this.state = 5098;
            this.procedureRef();
            break;

        case 34:
            this.state = 5099;
            localctx.value = this.match(MySQLParser.FUNCTION_SYMBOL);
            this.state = 5100;
            this.match(MySQLParser.CODE_SYMBOL);
            this.state = 5101;
            this.functionRef();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowCommandTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showCommandType;
    return this;
}

ShowCommandTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowCommandTypeContext.prototype.constructor = ShowCommandTypeContext;

ShowCommandTypeContext.prototype.FULL_SYMBOL = function() {
    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
};

ShowCommandTypeContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

ShowCommandTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowCommandType(this);
	}
};

ShowCommandTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowCommandType(this);
	}
};

ShowCommandTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowCommandType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowCommandTypeContext = ShowCommandTypeContext;

MySQLParser.prototype.showCommandType = function() {

    var localctx = new ShowCommandTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, MySQLParser.RULE_showCommandType);
    var _la = 0; // Token type
    try {
        this.state = 5110;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5104;
            this.match(MySQLParser.FULL_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5105;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 5106;
            this.match(MySQLParser.EXTENDED_SYMBOL);
            this.state = 5108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FULL_SYMBOL) {
                this.state = 5107;
                this.match(MySQLParser.FULL_SYMBOL);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonBlockingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_nonBlocking;
    return this;
}

NonBlockingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonBlockingContext.prototype.constructor = NonBlockingContext;

NonBlockingContext.prototype.NONBLOCKING_SYMBOL = function() {
    return this.getToken(MySQLParser.NONBLOCKING_SYMBOL, 0);
};

NonBlockingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNonBlocking(this);
	}
};

NonBlockingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNonBlocking(this);
	}
};

NonBlockingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNonBlocking(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NonBlockingContext = NonBlockingContext;

MySQLParser.prototype.nonBlocking = function() {

    var localctx = new NonBlockingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, MySQLParser.RULE_nonBlocking);
    try {
        this.state = 5117;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,641,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5112;
            if (!( serverVersion >= 50700 && serverVersion < 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
            }
            this.state = 5114;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,640,this._ctx);
            if(la_===1) {
                this.state = 5113;
                this.match(MySQLParser.NONBLOCKING_SYMBOL);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromOrInContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fromOrIn;
    return this;
}

FromOrInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromOrInContext.prototype.constructor = FromOrInContext;

FromOrInContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

FromOrInContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

FromOrInContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFromOrIn(this);
	}
};

FromOrInContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFromOrIn(this);
	}
};

FromOrInContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFromOrIn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FromOrInContext = FromOrInContext;

MySQLParser.prototype.fromOrIn = function() {

    var localctx = new FromOrInContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, MySQLParser.RULE_fromOrIn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5119;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FROM_SYMBOL || _la===MySQLParser.IN_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InDbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_inDb;
    return this;
}

InDbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InDbContext.prototype.constructor = InDbContext;

InDbContext.prototype.fromOrIn = function() {
    return this.getTypedRuleContext(FromOrInContext,0);
};

InDbContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

InDbContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInDb(this);
	}
};

InDbContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInDb(this);
	}
};

InDbContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInDb(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InDbContext = InDbContext;

MySQLParser.prototype.inDb = function() {

    var localctx = new InDbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, MySQLParser.RULE_inDb);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5121;
        this.fromOrIn();
        this.state = 5122;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProfileTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_profileType;
    return this;
}

ProfileTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProfileTypeContext.prototype.constructor = ProfileTypeContext;

ProfileTypeContext.prototype.BLOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
};

ProfileTypeContext.prototype.IO_SYMBOL = function() {
    return this.getToken(MySQLParser.IO_SYMBOL, 0);
};

ProfileTypeContext.prototype.CONTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
};

ProfileTypeContext.prototype.SWITCHES_SYMBOL = function() {
    return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
};

ProfileTypeContext.prototype.PAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
};

ProfileTypeContext.prototype.FAULTS_SYMBOL = function() {
    return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
};

ProfileTypeContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

ProfileTypeContext.prototype.CPU_SYMBOL = function() {
    return this.getToken(MySQLParser.CPU_SYMBOL, 0);
};

ProfileTypeContext.prototype.IPC_SYMBOL = function() {
    return this.getToken(MySQLParser.IPC_SYMBOL, 0);
};

ProfileTypeContext.prototype.MEMORY_SYMBOL = function() {
    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
};

ProfileTypeContext.prototype.SOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
};

ProfileTypeContext.prototype.SWAPS_SYMBOL = function() {
    return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
};

ProfileTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProfileType(this);
	}
};

ProfileTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProfileType(this);
	}
};

ProfileTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProfileType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProfileTypeContext = ProfileTypeContext;

MySQLParser.prototype.profileType = function() {

    var localctx = new ProfileTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, MySQLParser.RULE_profileType);
    var _la = 0; // Token type
    try {
        this.state = 5131;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.BLOCK_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5124;
            this.match(MySQLParser.BLOCK_SYMBOL);
            this.state = 5125;
            this.match(MySQLParser.IO_SYMBOL);
            break;
        case MySQLParser.CONTEXT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5126;
            this.match(MySQLParser.CONTEXT_SYMBOL);
            this.state = 5127;
            this.match(MySQLParser.SWITCHES_SYMBOL);
            break;
        case MySQLParser.PAGE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5128;
            this.match(MySQLParser.PAGE_SYMBOL);
            this.state = 5129;
            this.match(MySQLParser.FAULTS_SYMBOL);
            break;
        case MySQLParser.CPU_SYMBOL:
        case MySQLParser.IPC_SYMBOL:
        case MySQLParser.MEMORY_SYMBOL:
        case MySQLParser.SOURCE_SYMBOL:
        case MySQLParser.SWAPS_SYMBOL:
        case MySQLParser.ALL_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 5130;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CPU_SYMBOL || _la===MySQLParser.IPC_SYMBOL || _la===MySQLParser.MEMORY_SYMBOL || _la===MySQLParser.SOURCE_SYMBOL || _la===MySQLParser.SWAPS_SYMBOL || _la===MySQLParser.ALL_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OtherAdministrativeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_otherAdministrativeStatement;
    this.type = null; // Token
    return this;
}

OtherAdministrativeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OtherAdministrativeStatementContext.prototype.constructor = OtherAdministrativeStatementContext;

OtherAdministrativeStatementContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

OtherAdministrativeStatementContext.prototype.BINLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.keyCacheListOrParts = function() {
    return this.getTypedRuleContext(KeyCacheListOrPartsContext,0);
};

OtherAdministrativeStatementContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

OtherAdministrativeStatementContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.FLUSH_SYMBOL = function() {
    return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.flushTables = function() {
    return this.getTypedRuleContext(FlushTablesContext,0);
};

OtherAdministrativeStatementContext.prototype.flushOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FlushOptionContext);
    } else {
        return this.getTypedRuleContext(FlushOptionContext,i);
    }
};

OtherAdministrativeStatementContext.prototype.noWriteToBinLog = function() {
    return this.getTypedRuleContext(NoWriteToBinLogContext,0);
};

OtherAdministrativeStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


OtherAdministrativeStatementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

OtherAdministrativeStatementContext.prototype.KILL_SYMBOL = function() {
    return this.getToken(MySQLParser.KILL_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.CONNECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.preloadTail = function() {
    return this.getTypedRuleContext(PreloadTailContext,0);
};

OtherAdministrativeStatementContext.prototype.LOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.SHUTDOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
};

OtherAdministrativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOtherAdministrativeStatement(this);
	}
};

OtherAdministrativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOtherAdministrativeStatement(this);
	}
};

OtherAdministrativeStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOtherAdministrativeStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OtherAdministrativeStatementContext = OtherAdministrativeStatementContext;

MySQLParser.prototype.otherAdministrativeStatement = function() {

    var localctx = new OtherAdministrativeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, MySQLParser.RULE_otherAdministrativeStatement);
    var _la = 0; // Token type
    try {
        this.state = 5170;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,648,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5133;
            localctx.type = this.match(MySQLParser.BINLOG_SYMBOL);
            this.state = 5134;
            this.textLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5135;
            localctx.type = this.match(MySQLParser.CACHE_SYMBOL);
            this.state = 5136;
            this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 5137;
            this.keyCacheListOrParts();
            this.state = 5138;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 5141;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,643,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5139;
                this.identifier();
                break;

            case 2:
                this.state = 5140;
                this.match(MySQLParser.DEFAULT_SYMBOL);
                break;

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5143;
            localctx.type = this.match(MySQLParser.FLUSH_SYMBOL);
            this.state = 5145;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
            if(la_===1) {
                this.state = 5144;
                this.noWriteToBinLog();

            }
            this.state = 5156;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5147;
                this.flushTables();
                break;

            case 2:
                this.state = 5148;
                this.flushOption();
                this.state = 5153;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.COMMA_SYMBOL) {
                    this.state = 5149;
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.state = 5150;
                    this.flushOption();
                    this.state = 5155;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5158;
            localctx.type = this.match(MySQLParser.KILL_SYMBOL);
            this.state = 5160;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,647,this._ctx);
            if(la_===1) {
                this.state = 5159;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.CONNECTION_SYMBOL || _la===MySQLParser.QUERY_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 5162;
            this.expr(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5163;
            localctx.type = this.match(MySQLParser.LOAD_SYMBOL);
            this.state = 5164;
            this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 5165;
            this.match(MySQLParser.INTO_SYMBOL);
            this.state = 5166;
            this.match(MySQLParser.CACHE_SYMBOL);
            this.state = 5167;
            this.preloadTail();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 5168;
            if (!( serverVersion >= 50709)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
            }
            this.state = 5169;
            localctx.type = this.match(MySQLParser.SHUTDOWN_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyCacheListOrPartsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyCacheListOrParts;
    return this;
}

KeyCacheListOrPartsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyCacheListOrPartsContext.prototype.constructor = KeyCacheListOrPartsContext;

KeyCacheListOrPartsContext.prototype.keyCacheList = function() {
    return this.getTypedRuleContext(KeyCacheListContext,0);
};

KeyCacheListOrPartsContext.prototype.assignToKeycachePartition = function() {
    return this.getTypedRuleContext(AssignToKeycachePartitionContext,0);
};

KeyCacheListOrPartsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyCacheListOrParts(this);
	}
};

KeyCacheListOrPartsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyCacheListOrParts(this);
	}
};

KeyCacheListOrPartsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyCacheListOrParts(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyCacheListOrPartsContext = KeyCacheListOrPartsContext;

MySQLParser.prototype.keyCacheListOrParts = function() {

    var localctx = new KeyCacheListOrPartsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, MySQLParser.RULE_keyCacheListOrParts);
    try {
        this.state = 5174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,649,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5172;
            this.keyCacheList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5173;
            this.assignToKeycachePartition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyCacheListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyCacheList;
    return this;
}

KeyCacheListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyCacheListContext.prototype.constructor = KeyCacheListContext;

KeyCacheListContext.prototype.assignToKeycache = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignToKeycacheContext);
    } else {
        return this.getTypedRuleContext(AssignToKeycacheContext,i);
    }
};

KeyCacheListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


KeyCacheListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyCacheList(this);
	}
};

KeyCacheListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyCacheList(this);
	}
};

KeyCacheListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyCacheList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyCacheListContext = KeyCacheListContext;

MySQLParser.prototype.keyCacheList = function() {

    var localctx = new KeyCacheListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, MySQLParser.RULE_keyCacheList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5176;
        this.assignToKeycache();
        this.state = 5181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 5177;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5178;
            this.assignToKeycache();
            this.state = 5183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignToKeycacheContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_assignToKeycache;
    return this;
}

AssignToKeycacheContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignToKeycacheContext.prototype.constructor = AssignToKeycacheContext;

AssignToKeycacheContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

AssignToKeycacheContext.prototype.cacheKeyList = function() {
    return this.getTypedRuleContext(CacheKeyListContext,0);
};

AssignToKeycacheContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAssignToKeycache(this);
	}
};

AssignToKeycacheContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAssignToKeycache(this);
	}
};

AssignToKeycacheContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAssignToKeycache(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AssignToKeycacheContext = AssignToKeycacheContext;

MySQLParser.prototype.assignToKeycache = function() {

    var localctx = new AssignToKeycacheContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, MySQLParser.RULE_assignToKeycache);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5184;
        this.tableRef();
        this.state = 5186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL) {
            this.state = 5185;
            this.cacheKeyList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignToKeycachePartitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_assignToKeycachePartition;
    return this;
}

AssignToKeycachePartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignToKeycachePartitionContext.prototype.constructor = AssignToKeycachePartitionContext;

AssignToKeycachePartitionContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

AssignToKeycachePartitionContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

AssignToKeycachePartitionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

AssignToKeycachePartitionContext.prototype.allOrPartitionNameList = function() {
    return this.getTypedRuleContext(AllOrPartitionNameListContext,0);
};

AssignToKeycachePartitionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

AssignToKeycachePartitionContext.prototype.cacheKeyList = function() {
    return this.getTypedRuleContext(CacheKeyListContext,0);
};

AssignToKeycachePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAssignToKeycachePartition(this);
	}
};

AssignToKeycachePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAssignToKeycachePartition(this);
	}
};

AssignToKeycachePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAssignToKeycachePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AssignToKeycachePartitionContext = AssignToKeycachePartitionContext;

MySQLParser.prototype.assignToKeycachePartition = function() {

    var localctx = new AssignToKeycachePartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, MySQLParser.RULE_assignToKeycachePartition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5188;
        this.tableRef();
        this.state = 5189;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 5190;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 5191;
        this.allOrPartitionNameList();
        this.state = 5192;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        this.state = 5194;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL) {
            this.state = 5193;
            this.cacheKeyList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CacheKeyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cacheKeyList;
    return this;
}

CacheKeyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CacheKeyListContext.prototype.constructor = CacheKeyListContext;

CacheKeyListContext.prototype.keyOrIndex = function() {
    return this.getTypedRuleContext(KeyOrIndexContext,0);
};

CacheKeyListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

CacheKeyListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

CacheKeyListContext.prototype.keyUsageList = function() {
    return this.getTypedRuleContext(KeyUsageListContext,0);
};

CacheKeyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCacheKeyList(this);
	}
};

CacheKeyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCacheKeyList(this);
	}
};

CacheKeyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCacheKeyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CacheKeyListContext = CacheKeyListContext;

MySQLParser.prototype.cacheKeyList = function() {

    var localctx = new CacheKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, MySQLParser.RULE_cacheKeyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5196;
        this.keyOrIndex();
        this.state = 5197;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 5199;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,653,this._ctx);
        if(la_===1) {
            this.state = 5198;
            this.keyUsageList();

        }
        this.state = 5201;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyUsageElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyUsageElement;
    return this;
}

KeyUsageElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyUsageElementContext.prototype.constructor = KeyUsageElementContext;

KeyUsageElementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

KeyUsageElementContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

KeyUsageElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyUsageElement(this);
	}
};

KeyUsageElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyUsageElement(this);
	}
};

KeyUsageElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyUsageElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyUsageElementContext = KeyUsageElementContext;

MySQLParser.prototype.keyUsageElement = function() {

    var localctx = new KeyUsageElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, MySQLParser.RULE_keyUsageElement);
    try {
        this.state = 5205;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,654,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5203;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5204;
            this.match(MySQLParser.PRIMARY_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyUsageListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyUsageList;
    return this;
}

KeyUsageListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyUsageListContext.prototype.constructor = KeyUsageListContext;

KeyUsageListContext.prototype.keyUsageElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyUsageElementContext);
    } else {
        return this.getTypedRuleContext(KeyUsageElementContext,i);
    }
};

KeyUsageListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


KeyUsageListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyUsageList(this);
	}
};

KeyUsageListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyUsageList(this);
	}
};

KeyUsageListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyUsageList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyUsageListContext = KeyUsageListContext;

MySQLParser.prototype.keyUsageList = function() {

    var localctx = new KeyUsageListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, MySQLParser.RULE_keyUsageList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5207;
        this.keyUsageElement();
        this.state = 5212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 5208;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5209;
            this.keyUsageElement();
            this.state = 5214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FlushOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_flushOption;
    this.option = null; // Token
    return this;
}

FlushOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlushOptionContext.prototype.constructor = FlushOptionContext;

FlushOptionContext.prototype.DES_KEY_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0);
};

FlushOptionContext.prototype.HOSTS_SYMBOL = function() {
    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
};

FlushOptionContext.prototype.PRIVILEGES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
};

FlushOptionContext.prototype.STATUS_SYMBOL = function() {
    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
};

FlushOptionContext.prototype.USER_RESOURCES_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
};

FlushOptionContext.prototype.LOGS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
};

FlushOptionContext.prototype.logType = function() {
    return this.getTypedRuleContext(LogTypeContext,0);
};

FlushOptionContext.prototype.RELAY_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
};

FlushOptionContext.prototype.channel = function() {
    return this.getTypedRuleContext(ChannelContext,0);
};

FlushOptionContext.prototype.CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
};

FlushOptionContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

FlushOptionContext.prototype.OPTIMIZER_COSTS_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
};

FlushOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFlushOption(this);
	}
};

FlushOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFlushOption(this);
	}
};

FlushOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFlushOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FlushOptionContext = FlushOptionContext;

MySQLParser.prototype.flushOption = function() {

    var localctx = new FlushOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, MySQLParser.RULE_flushOption);
    var _la = 0; // Token type
    try {
        this.state = 5230;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,658,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5215;
            localctx.option = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DES_KEY_FILE_SYMBOL || _la===MySQLParser.HOSTS_SYMBOL || _la===MySQLParser.PRIVILEGES_SYMBOL || _la===MySQLParser.STATUS_SYMBOL || _la===MySQLParser.USER_RESOURCES_SYMBOL)) {
                localctx.option = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5217;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (MySQLParser.ENGINE_SYMBOL - 128)) | (1 << (MySQLParser.ERROR_SYMBOL - 128)) | (1 << (MySQLParser.GENERAL_SYMBOL - 128)))) !== 0) || _la===MySQLParser.SLOW_SYMBOL || _la===MySQLParser.BINARY_SYMBOL) {
                this.state = 5216;
                this.logType();
            }

            this.state = 5219;
            localctx.option = this.match(MySQLParser.LOGS_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5220;
            localctx.option = this.match(MySQLParser.RELAY_SYMBOL);
            this.state = 5221;
            this.match(MySQLParser.LOGS_SYMBOL);
            this.state = 5223;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,657,this._ctx);
            if(la_===1) {
                this.state = 5222;
                this.channel();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5225;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 5226;
            localctx.option = this.match(MySQLParser.QUERY_SYMBOL);
            this.state = 5227;
            this.match(MySQLParser.CACHE_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5228;
            if (!( serverVersion >= 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
            }
            this.state = 5229;
            localctx.option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_logType;
    return this;
}

LogTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogTypeContext.prototype.constructor = LogTypeContext;

LogTypeContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

LogTypeContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

LogTypeContext.prototype.ERROR_SYMBOL = function() {
    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
};

LogTypeContext.prototype.GENERAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
};

LogTypeContext.prototype.SLOW_SYMBOL = function() {
    return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
};

LogTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogType(this);
	}
};

LogTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogType(this);
	}
};

LogTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LogTypeContext = LogTypeContext;

MySQLParser.prototype.logType = function() {

    var localctx = new LogTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, MySQLParser.RULE_logType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5232;
        _la = this._input.LA(1);
        if(!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (MySQLParser.ENGINE_SYMBOL - 128)) | (1 << (MySQLParser.ERROR_SYMBOL - 128)) | (1 << (MySQLParser.GENERAL_SYMBOL - 128)))) !== 0) || _la===MySQLParser.SLOW_SYMBOL || _la===MySQLParser.BINARY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FlushTablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_flushTables;
    return this;
}

FlushTablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlushTablesContext.prototype.constructor = FlushTablesContext;

FlushTablesContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

FlushTablesContext.prototype.TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
};

FlushTablesContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

FlushTablesContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

FlushTablesContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

FlushTablesContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

FlushTablesContext.prototype.flushTablesOptions = function() {
    return this.getTypedRuleContext(FlushTablesOptionsContext,0);
};

FlushTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFlushTables(this);
	}
};

FlushTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFlushTables(this);
	}
};

FlushTablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFlushTables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FlushTablesContext = FlushTablesContext;

MySQLParser.prototype.flushTables = function() {

    var localctx = new FlushTablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, MySQLParser.RULE_flushTables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5234;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.TABLES_SYMBOL || _la===MySQLParser.TABLE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5242;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,660,this._ctx);
        if(la_===1) {
            this.state = 5235;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 5236;
            this.match(MySQLParser.READ_SYMBOL);
            this.state = 5237;
            this.match(MySQLParser.LOCK_SYMBOL);

        } else if(la_===2) {
            this.state = 5238;
            this.identifierList();
            this.state = 5240;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,659,this._ctx);
            if(la_===1) {
                this.state = 5239;
                this.flushTablesOptions();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FlushTablesOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_flushTablesOptions;
    return this;
}

FlushTablesOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlushTablesOptionsContext.prototype.constructor = FlushTablesOptionsContext;

FlushTablesOptionsContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

FlushTablesOptionsContext.prototype.EXPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
};

FlushTablesOptionsContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

FlushTablesOptionsContext.prototype.READ_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_SYMBOL, 0);
};

FlushTablesOptionsContext.prototype.LOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
};

FlushTablesOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFlushTablesOptions(this);
	}
};

FlushTablesOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFlushTablesOptions(this);
	}
};

FlushTablesOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFlushTablesOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FlushTablesOptionsContext = FlushTablesOptionsContext;

MySQLParser.prototype.flushTablesOptions = function() {

    var localctx = new FlushTablesOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, MySQLParser.RULE_flushTablesOptions);
    try {
        this.state = 5250;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,661,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5244;
            if (!( serverVersion >= 50606)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
            }
            this.state = 5245;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 5246;
            this.match(MySQLParser.EXPORT_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5247;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 5248;
            this.match(MySQLParser.READ_SYMBOL);
            this.state = 5249;
            this.match(MySQLParser.LOCK_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreloadTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_preloadTail;
    return this;
}

PreloadTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreloadTailContext.prototype.constructor = PreloadTailContext;

PreloadTailContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

PreloadTailContext.prototype.adminPartition = function() {
    return this.getTypedRuleContext(AdminPartitionContext,0);
};

PreloadTailContext.prototype.cacheKeyList = function() {
    return this.getTypedRuleContext(CacheKeyListContext,0);
};

PreloadTailContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

PreloadTailContext.prototype.LEAVES_SYMBOL = function() {
    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
};

PreloadTailContext.prototype.preloadList = function() {
    return this.getTypedRuleContext(PreloadListContext,0);
};

PreloadTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPreloadTail(this);
	}
};

PreloadTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPreloadTail(this);
	}
};

PreloadTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPreloadTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PreloadTailContext = PreloadTailContext;

MySQLParser.prototype.preloadTail = function() {

    var localctx = new PreloadTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, MySQLParser.RULE_preloadTail);
    var _la = 0; // Token type
    try {
        this.state = 5262;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,664,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5252;
            this.tableRef();
            this.state = 5253;
            this.adminPartition();
            this.state = 5255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL) {
                this.state = 5254;
                this.cacheKeyList();
            }

            this.state = 5259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IGNORE_SYMBOL) {
                this.state = 5257;
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.state = 5258;
                this.match(MySQLParser.LEAVES_SYMBOL);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5261;
            this.preloadList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreloadListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_preloadList;
    return this;
}

PreloadListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreloadListContext.prototype.constructor = PreloadListContext;

PreloadListContext.prototype.preloadKeys = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PreloadKeysContext);
    } else {
        return this.getTypedRuleContext(PreloadKeysContext,i);
    }
};

PreloadListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


PreloadListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPreloadList(this);
	}
};

PreloadListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPreloadList(this);
	}
};

PreloadListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPreloadList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PreloadListContext = PreloadListContext;

MySQLParser.prototype.preloadList = function() {

    var localctx = new PreloadListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, MySQLParser.RULE_preloadList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5264;
        this.preloadKeys();
        this.state = 5269;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 5265;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5266;
            this.preloadKeys();
            this.state = 5271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreloadKeysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_preloadKeys;
    return this;
}

PreloadKeysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreloadKeysContext.prototype.constructor = PreloadKeysContext;

PreloadKeysContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

PreloadKeysContext.prototype.cacheKeyList = function() {
    return this.getTypedRuleContext(CacheKeyListContext,0);
};

PreloadKeysContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

PreloadKeysContext.prototype.LEAVES_SYMBOL = function() {
    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
};

PreloadKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPreloadKeys(this);
	}
};

PreloadKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPreloadKeys(this);
	}
};

PreloadKeysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPreloadKeys(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PreloadKeysContext = PreloadKeysContext;

MySQLParser.prototype.preloadKeys = function() {

    var localctx = new PreloadKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, MySQLParser.RULE_preloadKeys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5272;
        this.tableRef();
        this.state = 5274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL) {
            this.state = 5273;
            this.cacheKeyList();
        }

        this.state = 5278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE_SYMBOL) {
            this.state = 5276;
            this.match(MySQLParser.IGNORE_SYMBOL);
            this.state = 5277;
            this.match(MySQLParser.LEAVES_SYMBOL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdminPartitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_adminPartition;
    return this;
}

AdminPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdminPartitionContext.prototype.constructor = AdminPartitionContext;

AdminPartitionContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

AdminPartitionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

AdminPartitionContext.prototype.allOrPartitionNameList = function() {
    return this.getTypedRuleContext(AllOrPartitionNameListContext,0);
};

AdminPartitionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

AdminPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAdminPartition(this);
	}
};

AdminPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAdminPartition(this);
	}
};

AdminPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAdminPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AdminPartitionContext = AdminPartitionContext;

MySQLParser.prototype.adminPartition = function() {

    var localctx = new AdminPartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, MySQLParser.RULE_adminPartition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5280;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 5281;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 5282;
        this.allOrPartitionNameList();
        this.state = 5283;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceGroupManagementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resourceGroupManagement;
    return this;
}

ResourceGroupManagementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceGroupManagementContext.prototype.constructor = ResourceGroupManagementContext;

ResourceGroupManagementContext.prototype.createResourceGroup = function() {
    return this.getTypedRuleContext(CreateResourceGroupContext,0);
};

ResourceGroupManagementContext.prototype.alterResourceGroup = function() {
    return this.getTypedRuleContext(AlterResourceGroupContext,0);
};

ResourceGroupManagementContext.prototype.setResourceGroup = function() {
    return this.getTypedRuleContext(SetResourceGroupContext,0);
};

ResourceGroupManagementContext.prototype.dropResourceGroup = function() {
    return this.getTypedRuleContext(DropResourceGroupContext,0);
};

ResourceGroupManagementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResourceGroupManagement(this);
	}
};

ResourceGroupManagementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResourceGroupManagement(this);
	}
};

ResourceGroupManagementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResourceGroupManagement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResourceGroupManagementContext = ResourceGroupManagementContext;

MySQLParser.prototype.resourceGroupManagement = function() {

    var localctx = new ResourceGroupManagementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, MySQLParser.RULE_resourceGroupManagement);
    try {
        this.state = 5289;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CREATE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5285;
            this.createResourceGroup();
            break;
        case MySQLParser.ALTER_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5286;
            this.alterResourceGroup();
            break;
        case MySQLParser.SET_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5287;
            this.setResourceGroup();
            break;
        case MySQLParser.DROP_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 5288;
            this.dropResourceGroup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateResourceGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createResourceGroup;
    return this;
}

CreateResourceGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateResourceGroupContext.prototype.constructor = CreateResourceGroupContext;

CreateResourceGroupContext.prototype.CREATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
};

CreateResourceGroupContext.prototype.RESOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
};

CreateResourceGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

CreateResourceGroupContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CreateResourceGroupContext.prototype.TYPE_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
};

CreateResourceGroupContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

CreateResourceGroupContext.prototype.SYSTEM_SYMBOL = function() {
    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
};

CreateResourceGroupContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

CreateResourceGroupContext.prototype.resourceGroupVcpuList = function() {
    return this.getTypedRuleContext(ResourceGroupVcpuListContext,0);
};

CreateResourceGroupContext.prototype.resourceGroupPriority = function() {
    return this.getTypedRuleContext(ResourceGroupPriorityContext,0);
};

CreateResourceGroupContext.prototype.resourceGroupEnableDisable = function() {
    return this.getTypedRuleContext(ResourceGroupEnableDisableContext,0);
};

CreateResourceGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateResourceGroup(this);
	}
};

CreateResourceGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateResourceGroup(this);
	}
};

CreateResourceGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateResourceGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateResourceGroupContext = CreateResourceGroupContext;

MySQLParser.prototype.createResourceGroup = function() {

    var localctx = new CreateResourceGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, MySQLParser.RULE_createResourceGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5291;
        this.match(MySQLParser.CREATE_SYMBOL);
        this.state = 5292;
        this.match(MySQLParser.RESOURCE_SYMBOL);
        this.state = 5293;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 5294;
        this.identifier();
        this.state = 5295;
        this.match(MySQLParser.TYPE_SYMBOL);
        this.state = 5297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_OPERATOR || _la===MySQLParser.ASSIGN_OPERATOR) {
            this.state = 5296;
            this.equal();
        }

        this.state = 5299;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.USER_SYMBOL || _la===MySQLParser.SYSTEM_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.VCPU_SYMBOL) {
            this.state = 5300;
            this.resourceGroupVcpuList();
        }

        this.state = 5304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.THREAD_PRIORITY_SYMBOL) {
            this.state = 5303;
            this.resourceGroupPriority();
        }

        this.state = 5307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DISABLE_SYMBOL || _la===MySQLParser.ENABLE_SYMBOL) {
            this.state = 5306;
            this.resourceGroupEnableDisable();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceGroupVcpuListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resourceGroupVcpuList;
    return this;
}

ResourceGroupVcpuListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceGroupVcpuListContext.prototype.constructor = ResourceGroupVcpuListContext;

ResourceGroupVcpuListContext.prototype.VCPU_SYMBOL = function() {
    return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
};

ResourceGroupVcpuListContext.prototype.vcpuNumOrRange = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VcpuNumOrRangeContext);
    } else {
        return this.getTypedRuleContext(VcpuNumOrRangeContext,i);
    }
};

ResourceGroupVcpuListContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

ResourceGroupVcpuListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ResourceGroupVcpuListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResourceGroupVcpuList(this);
	}
};

ResourceGroupVcpuListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResourceGroupVcpuList(this);
	}
};

ResourceGroupVcpuListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResourceGroupVcpuList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResourceGroupVcpuListContext = ResourceGroupVcpuListContext;

MySQLParser.prototype.resourceGroupVcpuList = function() {

    var localctx = new ResourceGroupVcpuListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, MySQLParser.RULE_resourceGroupVcpuList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5309;
        this.match(MySQLParser.VCPU_SYMBOL);
        this.state = 5311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_OPERATOR || _la===MySQLParser.ASSIGN_OPERATOR) {
            this.state = 5310;
            this.equal();
        }

        this.state = 5313;
        this.vcpuNumOrRange();
        this.state = 5320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.INT_NUMBER || _la===MySQLParser.COMMA_SYMBOL) {
            this.state = 5315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 5314;
                this.match(MySQLParser.COMMA_SYMBOL);
            }

            this.state = 5317;
            this.vcpuNumOrRange();
            this.state = 5322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VcpuNumOrRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_vcpuNumOrRange;
    return this;
}

VcpuNumOrRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VcpuNumOrRangeContext.prototype.constructor = VcpuNumOrRangeContext;

VcpuNumOrRangeContext.prototype.INT_NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.INT_NUMBER);
    } else {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
};


VcpuNumOrRangeContext.prototype.MINUS_OPERATOR = function() {
    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
};

VcpuNumOrRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVcpuNumOrRange(this);
	}
};

VcpuNumOrRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVcpuNumOrRange(this);
	}
};

VcpuNumOrRangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVcpuNumOrRange(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VcpuNumOrRangeContext = VcpuNumOrRangeContext;

MySQLParser.prototype.vcpuNumOrRange = function() {

    var localctx = new VcpuNumOrRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, MySQLParser.RULE_vcpuNumOrRange);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5323;
        this.match(MySQLParser.INT_NUMBER);
        this.state = 5326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.MINUS_OPERATOR) {
            this.state = 5324;
            this.match(MySQLParser.MINUS_OPERATOR);
            this.state = 5325;
            this.match(MySQLParser.INT_NUMBER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceGroupPriorityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resourceGroupPriority;
    return this;
}

ResourceGroupPriorityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceGroupPriorityContext.prototype.constructor = ResourceGroupPriorityContext;

ResourceGroupPriorityContext.prototype.THREAD_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
};

ResourceGroupPriorityContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

ResourceGroupPriorityContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

ResourceGroupPriorityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResourceGroupPriority(this);
	}
};

ResourceGroupPriorityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResourceGroupPriority(this);
	}
};

ResourceGroupPriorityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResourceGroupPriority(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResourceGroupPriorityContext = ResourceGroupPriorityContext;

MySQLParser.prototype.resourceGroupPriority = function() {

    var localctx = new ResourceGroupPriorityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, MySQLParser.RULE_resourceGroupPriority);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5328;
        this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
        this.state = 5330;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_OPERATOR || _la===MySQLParser.ASSIGN_OPERATOR) {
            this.state = 5329;
            this.equal();
        }

        this.state = 5332;
        this.match(MySQLParser.INT_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceGroupEnableDisableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resourceGroupEnableDisable;
    return this;
}

ResourceGroupEnableDisableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceGroupEnableDisableContext.prototype.constructor = ResourceGroupEnableDisableContext;

ResourceGroupEnableDisableContext.prototype.ENABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
};

ResourceGroupEnableDisableContext.prototype.DISABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
};

ResourceGroupEnableDisableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResourceGroupEnableDisable(this);
	}
};

ResourceGroupEnableDisableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResourceGroupEnableDisable(this);
	}
};

ResourceGroupEnableDisableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResourceGroupEnableDisable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResourceGroupEnableDisableContext = ResourceGroupEnableDisableContext;

MySQLParser.prototype.resourceGroupEnableDisable = function() {

    var localctx = new ResourceGroupEnableDisableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, MySQLParser.RULE_resourceGroupEnableDisable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5334;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DISABLE_SYMBOL || _la===MySQLParser.ENABLE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterResourceGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterResourceGroup;
    return this;
}

AlterResourceGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterResourceGroupContext.prototype.constructor = AlterResourceGroupContext;

AlterResourceGroupContext.prototype.ALTER_SYMBOL = function() {
    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
};

AlterResourceGroupContext.prototype.RESOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
};

AlterResourceGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

AlterResourceGroupContext.prototype.resourceGroupRef = function() {
    return this.getTypedRuleContext(ResourceGroupRefContext,0);
};

AlterResourceGroupContext.prototype.resourceGroupVcpuList = function() {
    return this.getTypedRuleContext(ResourceGroupVcpuListContext,0);
};

AlterResourceGroupContext.prototype.resourceGroupPriority = function() {
    return this.getTypedRuleContext(ResourceGroupPriorityContext,0);
};

AlterResourceGroupContext.prototype.resourceGroupEnableDisable = function() {
    return this.getTypedRuleContext(ResourceGroupEnableDisableContext,0);
};

AlterResourceGroupContext.prototype.FORCE_SYMBOL = function() {
    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
};

AlterResourceGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterResourceGroup(this);
	}
};

AlterResourceGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterResourceGroup(this);
	}
};

AlterResourceGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterResourceGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterResourceGroupContext = AlterResourceGroupContext;

MySQLParser.prototype.alterResourceGroup = function() {

    var localctx = new AlterResourceGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, MySQLParser.RULE_alterResourceGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5336;
        this.match(MySQLParser.ALTER_SYMBOL);
        this.state = 5337;
        this.match(MySQLParser.RESOURCE_SYMBOL);
        this.state = 5338;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 5339;
        this.resourceGroupRef();
        this.state = 5341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.VCPU_SYMBOL) {
            this.state = 5340;
            this.resourceGroupVcpuList();
        }

        this.state = 5344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.THREAD_PRIORITY_SYMBOL) {
            this.state = 5343;
            this.resourceGroupPriority();
        }

        this.state = 5347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DISABLE_SYMBOL || _la===MySQLParser.ENABLE_SYMBOL) {
            this.state = 5346;
            this.resourceGroupEnableDisable();
        }

        this.state = 5350;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FORCE_SYMBOL) {
            this.state = 5349;
            this.match(MySQLParser.FORCE_SYMBOL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetResourceGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setResourceGroup;
    return this;
}

SetResourceGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetResourceGroupContext.prototype.constructor = SetResourceGroupContext;

SetResourceGroupContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

SetResourceGroupContext.prototype.RESOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
};

SetResourceGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

SetResourceGroupContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SetResourceGroupContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

SetResourceGroupContext.prototype.threadIdList = function() {
    return this.getTypedRuleContext(ThreadIdListContext,0);
};

SetResourceGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetResourceGroup(this);
	}
};

SetResourceGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetResourceGroup(this);
	}
};

SetResourceGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetResourceGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetResourceGroupContext = SetResourceGroupContext;

MySQLParser.prototype.setResourceGroup = function() {

    var localctx = new SetResourceGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, MySQLParser.RULE_setResourceGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5352;
        this.match(MySQLParser.SET_SYMBOL);
        this.state = 5353;
        this.match(MySQLParser.RESOURCE_SYMBOL);
        this.state = 5354;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 5355;
        this.identifier();
        this.state = 5358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FOR_SYMBOL) {
            this.state = 5356;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 5357;
            this.threadIdList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThreadIdListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_threadIdList;
    return this;
}

ThreadIdListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThreadIdListContext.prototype.constructor = ThreadIdListContext;

ThreadIdListContext.prototype.real_ulong_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Real_ulong_numberContext);
    } else {
        return this.getTypedRuleContext(Real_ulong_numberContext,i);
    }
};

ThreadIdListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ThreadIdListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterThreadIdList(this);
	}
};

ThreadIdListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitThreadIdList(this);
	}
};

ThreadIdListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitThreadIdList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ThreadIdListContext = ThreadIdListContext;

MySQLParser.prototype.threadIdList = function() {

    var localctx = new ThreadIdListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, MySQLParser.RULE_threadIdList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5360;
        this.real_ulong_number();
        this.state = 5367;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)) | (1 << (MySQLParser.COMMA_SYMBOL - 380)))) !== 0) || _la===MySQLParser.HEX_NUMBER) {
            this.state = 5362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 5361;
                this.match(MySQLParser.COMMA_SYMBOL);
            }

            this.state = 5364;
            this.real_ulong_number();
            this.state = 5369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropResourceGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropResourceGroup;
    return this;
}

DropResourceGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropResourceGroupContext.prototype.constructor = DropResourceGroupContext;

DropResourceGroupContext.prototype.DROP_SYMBOL = function() {
    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
};

DropResourceGroupContext.prototype.RESOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
};

DropResourceGroupContext.prototype.GROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
};

DropResourceGroupContext.prototype.resourceGroupRef = function() {
    return this.getTypedRuleContext(ResourceGroupRefContext,0);
};

DropResourceGroupContext.prototype.FORCE_SYMBOL = function() {
    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
};

DropResourceGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropResourceGroup(this);
	}
};

DropResourceGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropResourceGroup(this);
	}
};

DropResourceGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropResourceGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropResourceGroupContext = DropResourceGroupContext;

MySQLParser.prototype.dropResourceGroup = function() {

    var localctx = new DropResourceGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, MySQLParser.RULE_dropResourceGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5370;
        this.match(MySQLParser.DROP_SYMBOL);
        this.state = 5371;
        this.match(MySQLParser.RESOURCE_SYMBOL);
        this.state = 5372;
        this.match(MySQLParser.GROUP_SYMBOL);
        this.state = 5373;
        this.resourceGroupRef();
        this.state = 5375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FORCE_SYMBOL) {
            this.state = 5374;
            this.match(MySQLParser.FORCE_SYMBOL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UtilityStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_utilityStatement;
    return this;
}

UtilityStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UtilityStatementContext.prototype.constructor = UtilityStatementContext;

UtilityStatementContext.prototype.describeCommand = function() {
    return this.getTypedRuleContext(DescribeCommandContext,0);
};

UtilityStatementContext.prototype.explainCommand = function() {
    return this.getTypedRuleContext(ExplainCommandContext,0);
};

UtilityStatementContext.prototype.helpCommand = function() {
    return this.getTypedRuleContext(HelpCommandContext,0);
};

UtilityStatementContext.prototype.useCommand = function() {
    return this.getTypedRuleContext(UseCommandContext,0);
};

UtilityStatementContext.prototype.restartServer = function() {
    return this.getTypedRuleContext(RestartServerContext,0);
};

UtilityStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUtilityStatement(this);
	}
};

UtilityStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUtilityStatement(this);
	}
};

UtilityStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUtilityStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UtilityStatementContext = UtilityStatementContext;

MySQLParser.prototype.utilityStatement = function() {

    var localctx = new UtilityStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, MySQLParser.RULE_utilityStatement);
    try {
        this.state = 5383;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,686,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5377;
            this.describeCommand();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5378;
            this.explainCommand();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5379;
            this.helpCommand();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5380;
            this.useCommand();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5381;
            if (!( serverVersion >= 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
            }
            this.state = 5382;
            this.restartServer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DescribeCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_describeCommand;
    return this;
}

DescribeCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeCommandContext.prototype.constructor = DescribeCommandContext;

DescribeCommandContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

DescribeCommandContext.prototype.EXPLAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
};

DescribeCommandContext.prototype.DESCRIBE_SYMBOL = function() {
    return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
};

DescribeCommandContext.prototype.DESC_SYMBOL = function() {
    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
};

DescribeCommandContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

DescribeCommandContext.prototype.columnRef = function() {
    return this.getTypedRuleContext(ColumnRefContext,0);
};

DescribeCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDescribeCommand(this);
	}
};

DescribeCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDescribeCommand(this);
	}
};

DescribeCommandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDescribeCommand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DescribeCommandContext = DescribeCommandContext;

MySQLParser.prototype.describeCommand = function() {

    var localctx = new DescribeCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, MySQLParser.RULE_describeCommand);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5385;
        _la = this._input.LA(1);
        if(!(((((_la - 481)) & ~0x1f) == 0 && ((1 << (_la - 481)) & ((1 << (MySQLParser.DESC_SYMBOL - 481)) | (1 << (MySQLParser.DESCRIBE_SYMBOL - 481)) | (1 << (MySQLParser.EXPLAIN_SYMBOL - 481)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5386;
        this.tableRef();
        this.state = 5389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,687,this._ctx);
        if(la_===1) {
            this.state = 5387;
            this.textString();

        } else if(la_===2) {
            this.state = 5388;
            this.columnRef();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_explainCommand;
    return this;
}

ExplainCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainCommandContext.prototype.constructor = ExplainCommandContext;

ExplainCommandContext.prototype.explainableStatement = function() {
    return this.getTypedRuleContext(ExplainableStatementContext,0);
};

ExplainCommandContext.prototype.EXPLAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
};

ExplainCommandContext.prototype.DESCRIBE_SYMBOL = function() {
    return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
};

ExplainCommandContext.prototype.DESC_SYMBOL = function() {
    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
};

ExplainCommandContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

ExplainCommandContext.prototype.PARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
};

ExplainCommandContext.prototype.FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
};

ExplainCommandContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

ExplainCommandContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

ExplainCommandContext.prototype.ANALYZE_SYMBOL = function() {
    return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
};

ExplainCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExplainCommand(this);
	}
};

ExplainCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExplainCommand(this);
	}
};

ExplainCommandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExplainCommand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExplainCommandContext = ExplainCommandContext;

MySQLParser.prototype.explainCommand = function() {

    var localctx = new ExplainCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, MySQLParser.RULE_explainCommand);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5391;
        _la = this._input.LA(1);
        if(!(((((_la - 481)) & ~0x1f) == 0 && ((1 << (_la - 481)) & ((1 << (MySQLParser.DESC_SYMBOL - 481)) | (1 << (MySQLParser.DESCRIBE_SYMBOL - 481)) | (1 << (MySQLParser.EXPLAIN_SYMBOL - 481)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5402;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,688,this._ctx);
        if(la_===1) {
            this.state = 5392;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 5393;
            this.match(MySQLParser.EXTENDED_SYMBOL);

        } else if(la_===2) {
            this.state = 5394;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 5395;
            this.match(MySQLParser.PARTITIONS_SYMBOL);

        } else if(la_===3) {
            this.state = 5396;
            if (!( serverVersion >= 50605)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50605");
            }
            this.state = 5397;
            this.match(MySQLParser.FORMAT_SYMBOL);
            this.state = 5398;
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.state = 5399;
            this.textOrIdentifier();

        } else if(la_===4) {
            this.state = 5400;
            if (!( serverVersion >= 80018)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
            }
            this.state = 5401;
            this.match(MySQLParser.ANALYZE_SYMBOL);

        }
        this.state = 5404;
        this.explainableStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_explainableStatement;
    return this;
}

ExplainableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainableStatementContext.prototype.constructor = ExplainableStatementContext;

ExplainableStatementContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

ExplainableStatementContext.prototype.deleteStatement = function() {
    return this.getTypedRuleContext(DeleteStatementContext,0);
};

ExplainableStatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

ExplainableStatementContext.prototype.replaceStatement = function() {
    return this.getTypedRuleContext(ReplaceStatementContext,0);
};

ExplainableStatementContext.prototype.updateStatement = function() {
    return this.getTypedRuleContext(UpdateStatementContext,0);
};

ExplainableStatementContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

ExplainableStatementContext.prototype.CONNECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
};

ExplainableStatementContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

ExplainableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExplainableStatement(this);
	}
};

ExplainableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExplainableStatement(this);
	}
};

ExplainableStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExplainableStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExplainableStatementContext = ExplainableStatementContext;

MySQLParser.prototype.explainableStatement = function() {

    var localctx = new ExplainableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, MySQLParser.RULE_explainableStatement);
    try {
        this.state = 5418;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5406;
            this.selectStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5407;
            if (!( serverVersion >= 50603)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50603");
            }
            this.state = 5412;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,689,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5408;
                this.deleteStatement();
                break;

            case 2:
                this.state = 5409;
                this.insertStatement();
                break;

            case 3:
                this.state = 5410;
                this.replaceStatement();
                break;

            case 4:
                this.state = 5411;
                this.updateStatement();
                break;

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5414;
            if (!( serverVersion >= 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
            }
            this.state = 5415;
            this.match(MySQLParser.FOR_SYMBOL);
            this.state = 5416;
            this.match(MySQLParser.CONNECTION_SYMBOL);
            this.state = 5417;
            this.real_ulong_number();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HelpCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_helpCommand;
    return this;
}

HelpCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HelpCommandContext.prototype.constructor = HelpCommandContext;

HelpCommandContext.prototype.HELP_SYMBOL = function() {
    return this.getToken(MySQLParser.HELP_SYMBOL, 0);
};

HelpCommandContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

HelpCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHelpCommand(this);
	}
};

HelpCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHelpCommand(this);
	}
};

HelpCommandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHelpCommand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HelpCommandContext = HelpCommandContext;

MySQLParser.prototype.helpCommand = function() {

    var localctx = new HelpCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, MySQLParser.RULE_helpCommand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5420;
        this.match(MySQLParser.HELP_SYMBOL);
        this.state = 5421;
        this.textOrIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_useCommand;
    return this;
}

UseCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseCommandContext.prototype.constructor = UseCommandContext;

UseCommandContext.prototype.USE_SYMBOL = function() {
    return this.getToken(MySQLParser.USE_SYMBOL, 0);
};

UseCommandContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UseCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUseCommand(this);
	}
};

UseCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUseCommand(this);
	}
};

UseCommandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUseCommand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UseCommandContext = UseCommandContext;

MySQLParser.prototype.useCommand = function() {

    var localctx = new UseCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, MySQLParser.RULE_useCommand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5423;
        this.match(MySQLParser.USE_SYMBOL);
        this.state = 5424;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RestartServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_restartServer;
    return this;
}

RestartServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RestartServerContext.prototype.constructor = RestartServerContext;

RestartServerContext.prototype.RESTART_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
};

RestartServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRestartServer(this);
	}
};

RestartServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRestartServer(this);
	}
};

RestartServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRestartServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RestartServerContext = RestartServerContext;

MySQLParser.prototype.restartServer = function() {

    var localctx = new RestartServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, MySQLParser.RULE_restartServer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5426;
        this.match(MySQLParser.RESTART_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;


 
ExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExprOrContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprOrContext.prototype = Object.create(ExprContext.prototype);
ExprOrContext.prototype.constructor = ExprOrContext;

MySQLParser.ExprOrContext = ExprOrContext;

ExprOrContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprOrContext.prototype.OR_SYMBOL = function() {
    return this.getToken(MySQLParser.OR_SYMBOL, 0);
};

ExprOrContext.prototype.LOGICAL_OR_OPERATOR = function() {
    return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
};
ExprOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprOr(this);
	}
};

ExprOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprOr(this);
	}
};

ExprOrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExprNotContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprNotContext.prototype = Object.create(ExprContext.prototype);
ExprNotContext.prototype.constructor = ExprNotContext;

MySQLParser.ExprNotContext = ExprNotContext;

ExprNotContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

ExprNotContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
ExprNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprNot(this);
	}
};

ExprNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprNot(this);
	}
};

ExprNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExprIsContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.type = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprIsContext.prototype = Object.create(ExprContext.prototype);
ExprIsContext.prototype.constructor = ExprIsContext;

MySQLParser.ExprIsContext = ExprIsContext;

ExprIsContext.prototype.boolPri = function() {
    return this.getTypedRuleContext(BoolPriContext,0);
};

ExprIsContext.prototype.IS_SYMBOL = function() {
    return this.getToken(MySQLParser.IS_SYMBOL, 0);
};

ExprIsContext.prototype.TRUE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
};

ExprIsContext.prototype.FALSE_SYMBOL = function() {
    return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
};

ExprIsContext.prototype.UNKNOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
};

ExprIsContext.prototype.notRule = function() {
    return this.getTypedRuleContext(NotRuleContext,0);
};
ExprIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprIs(this);
	}
};

ExprIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprIs(this);
	}
};

ExprIsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprIs(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExprAndContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprAndContext.prototype = Object.create(ExprContext.prototype);
ExprAndContext.prototype.constructor = ExprAndContext;

MySQLParser.ExprAndContext = ExprAndContext;

ExprAndContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprAndContext.prototype.AND_SYMBOL = function() {
    return this.getToken(MySQLParser.AND_SYMBOL, 0);
};

ExprAndContext.prototype.LOGICAL_AND_OPERATOR = function() {
    return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
};
ExprAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprAnd(this);
	}
};

ExprAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprAnd(this);
	}
};

ExprAndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExprXorContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprXorContext.prototype = Object.create(ExprContext.prototype);
ExprXorContext.prototype.constructor = ExprXorContext;

MySQLParser.ExprXorContext = ExprXorContext;

ExprXorContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprXorContext.prototype.XOR_SYMBOL = function() {
    return this.getToken(MySQLParser.XOR_SYMBOL, 0);
};
ExprXorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprXor(this);
	}
};

ExprXorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprXor(this);
	}
};

ExprXorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprXor(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 666;
    this.enterRecursionRule(localctx, 666, MySQLParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5439;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,693,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExprIsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 5429;
            this.boolPri(0);
            this.state = 5435;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,692,this._ctx);
            if(la_===1) {
                this.state = 5430;
                this.match(MySQLParser.IS_SYMBOL);
                this.state = 5432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.NOT2_SYMBOL || _la===MySQLParser.NOT_SYMBOL) {
                    this.state = 5431;
                    this.notRule();
                }

                this.state = 5434;
                localctx.type = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.UNKNOWN_SYMBOL || _la===MySQLParser.FALSE_SYMBOL || _la===MySQLParser.TRUE_SYMBOL)) {
                    localctx.type = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 2:
            localctx = new ExprNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5437;
            this.match(MySQLParser.NOT_SYMBOL);
            this.state = 5438;
            this.expr(4);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 5452;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,695,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 5450;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,694,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExprAndContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                    this.state = 5441;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 5442;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.LOGICAL_AND_OPERATOR || _la===MySQLParser.AND_SYMBOL)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5443;
                    this.expr(4);
                    break;

                case 2:
                    localctx = new ExprXorContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                    this.state = 5444;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 5445;
                    this.match(MySQLParser.XOR_SYMBOL);
                    this.state = 5446;
                    this.expr(3);
                    break;

                case 3:
                    localctx = new ExprOrContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                    this.state = 5447;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 5448;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.LOGICAL_OR_OPERATOR || _la===MySQLParser.OR_SYMBOL)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5449;
                    this.expr(2);
                    break;

                } 
            }
            this.state = 5454;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,695,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function BoolPriContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_boolPri;
    return this;
}

BoolPriContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolPriContext.prototype.constructor = BoolPriContext;


 
BoolPriContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PrimaryExprPredicateContext(parser, ctx) {
	BoolPriContext.call(this, parser);
    BoolPriContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExprPredicateContext.prototype = Object.create(BoolPriContext.prototype);
PrimaryExprPredicateContext.prototype.constructor = PrimaryExprPredicateContext;

MySQLParser.PrimaryExprPredicateContext = PrimaryExprPredicateContext;

PrimaryExprPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PrimaryExprPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrimaryExprPredicate(this);
	}
};

PrimaryExprPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrimaryExprPredicate(this);
	}
};

PrimaryExprPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrimaryExprPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryExprCompareContext(parser, ctx) {
	BoolPriContext.call(this, parser);
    BoolPriContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExprCompareContext.prototype = Object.create(BoolPriContext.prototype);
PrimaryExprCompareContext.prototype.constructor = PrimaryExprCompareContext;

MySQLParser.PrimaryExprCompareContext = PrimaryExprCompareContext;

PrimaryExprCompareContext.prototype.boolPri = function() {
    return this.getTypedRuleContext(BoolPriContext,0);
};

PrimaryExprCompareContext.prototype.compOp = function() {
    return this.getTypedRuleContext(CompOpContext,0);
};

PrimaryExprCompareContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PrimaryExprCompareContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrimaryExprCompare(this);
	}
};

PrimaryExprCompareContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrimaryExprCompare(this);
	}
};

PrimaryExprCompareContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrimaryExprCompare(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryExprAllAnyContext(parser, ctx) {
	BoolPriContext.call(this, parser);
    BoolPriContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExprAllAnyContext.prototype = Object.create(BoolPriContext.prototype);
PrimaryExprAllAnyContext.prototype.constructor = PrimaryExprAllAnyContext;

MySQLParser.PrimaryExprAllAnyContext = PrimaryExprAllAnyContext;

PrimaryExprAllAnyContext.prototype.boolPri = function() {
    return this.getTypedRuleContext(BoolPriContext,0);
};

PrimaryExprAllAnyContext.prototype.compOp = function() {
    return this.getTypedRuleContext(CompOpContext,0);
};

PrimaryExprAllAnyContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

PrimaryExprAllAnyContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

PrimaryExprAllAnyContext.prototype.ANY_SYMBOL = function() {
    return this.getToken(MySQLParser.ANY_SYMBOL, 0);
};
PrimaryExprAllAnyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrimaryExprAllAny(this);
	}
};

PrimaryExprAllAnyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrimaryExprAllAny(this);
	}
};

PrimaryExprAllAnyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrimaryExprAllAny(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryExprIsNullContext(parser, ctx) {
	BoolPriContext.call(this, parser);
    BoolPriContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExprIsNullContext.prototype = Object.create(BoolPriContext.prototype);
PrimaryExprIsNullContext.prototype.constructor = PrimaryExprIsNullContext;

MySQLParser.PrimaryExprIsNullContext = PrimaryExprIsNullContext;

PrimaryExprIsNullContext.prototype.boolPri = function() {
    return this.getTypedRuleContext(BoolPriContext,0);
};

PrimaryExprIsNullContext.prototype.IS_SYMBOL = function() {
    return this.getToken(MySQLParser.IS_SYMBOL, 0);
};

PrimaryExprIsNullContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

PrimaryExprIsNullContext.prototype.notRule = function() {
    return this.getTypedRuleContext(NotRuleContext,0);
};
PrimaryExprIsNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrimaryExprIsNull(this);
	}
};

PrimaryExprIsNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrimaryExprIsNull(this);
	}
};

PrimaryExprIsNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrimaryExprIsNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.boolPri = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BoolPriContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 668;
    this.enterRecursionRule(localctx, 668, MySQLParser.RULE_boolPri, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PrimaryExprPredicateContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 5456;
        this.predicate();
        this._ctx.stop = this._input.LT(-1);
        this.state = 5475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,698,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 5473;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,697,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PrimaryExprIsNullContext(this, new BoolPriContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                    this.state = 5458;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 5459;
                    this.match(MySQLParser.IS_SYMBOL);
                    this.state = 5461;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NOT2_SYMBOL || _la===MySQLParser.NOT_SYMBOL) {
                        this.state = 5460;
                        this.notRule();
                    }

                    this.state = 5463;
                    this.match(MySQLParser.NULL_SYMBOL);
                    break;

                case 2:
                    localctx = new PrimaryExprCompareContext(this, new BoolPriContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                    this.state = 5464;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 5465;
                    this.compOp();
                    this.state = 5466;
                    this.predicate();
                    break;

                case 3:
                    localctx = new PrimaryExprAllAnyContext(this, new BoolPriContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                    this.state = 5468;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 5469;
                    this.compOp();
                    this.state = 5470;
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.ANY_SYMBOL || _la===MySQLParser.ALL_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5471;
                    this.subquery();
                    break;

                } 
            }
            this.state = 5477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,698,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function CompOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_compOp;
    return this;
}

CompOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompOpContext.prototype.constructor = CompOpContext;

CompOpContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

CompOpContext.prototype.NULL_SAFE_EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
};

CompOpContext.prototype.GREATER_OR_EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
};

CompOpContext.prototype.GREATER_THAN_OPERATOR = function() {
    return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
};

CompOpContext.prototype.LESS_OR_EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
};

CompOpContext.prototype.LESS_THAN_OPERATOR = function() {
    return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
};

CompOpContext.prototype.NOT_EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
};

CompOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCompOp(this);
	}
};

CompOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCompOp(this);
	}
};

CompOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCompOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CompOpContext = CompOpContext;

MySQLParser.prototype.compOp = function() {

    var localctx = new CompOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, MySQLParser.RULE_compOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5478;
        _la = this._input.LA(1);
        if(!(((((_la - 383)) & ~0x1f) == 0 && ((1 << (_la - 383)) & ((1 << (MySQLParser.EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.NULL_SAFE_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_THAN_OPERATOR - 383)) | (1 << (MySQLParser.LESS_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.LESS_THAN_OPERATOR - 383)) | (1 << (MySQLParser.NOT_EQUAL_OPERATOR - 383)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.bitExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitExprContext);
    } else {
        return this.getTypedRuleContext(BitExprContext,i);
    }
};

PredicateContext.prototype.predicateOperations = function() {
    return this.getTypedRuleContext(PredicateOperationsContext,0);
};

PredicateContext.prototype.MEMBER_SYMBOL = function() {
    return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
};

PredicateContext.prototype.simpleExprWithParentheses = function() {
    return this.getTypedRuleContext(SimpleExprWithParenthesesContext,0);
};

PredicateContext.prototype.SOUNDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
};

PredicateContext.prototype.LIKE_SYMBOL = function() {
    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
};

PredicateContext.prototype.notRule = function() {
    return this.getTypedRuleContext(NotRuleContext,0);
};

PredicateContext.prototype.OF_SYMBOL = function() {
    return this.getToken(MySQLParser.OF_SYMBOL, 0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPredicate(this);
	}
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PredicateContext = PredicateContext;

MySQLParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, MySQLParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5480;
        this.bitExpr(0);
        this.state = 5494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,701,this._ctx);
        if(la_===1) {
            this.state = 5482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT2_SYMBOL || _la===MySQLParser.NOT_SYMBOL) {
                this.state = 5481;
                this.notRule();
            }

            this.state = 5484;
            this.predicateOperations();

        } else if(la_===2) {
            this.state = 5485;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 5486;
            this.match(MySQLParser.MEMBER_SYMBOL);
            this.state = 5488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.OF_SYMBOL) {
                this.state = 5487;
                this.match(MySQLParser.OF_SYMBOL);
            }

            this.state = 5490;
            this.simpleExprWithParentheses();

        } else if(la_===3) {
            this.state = 5491;
            this.match(MySQLParser.SOUNDS_SYMBOL);
            this.state = 5492;
            this.match(MySQLParser.LIKE_SYMBOL);
            this.state = 5493;
            this.bitExpr(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateOperationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_predicateOperations;
    return this;
}

PredicateOperationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateOperationsContext.prototype.constructor = PredicateOperationsContext;


 
PredicateOperationsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PredicateExprRegexContext(parser, ctx) {
	PredicateOperationsContext.call(this, parser);
    PredicateOperationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateExprRegexContext.prototype = Object.create(PredicateOperationsContext.prototype);
PredicateExprRegexContext.prototype.constructor = PredicateExprRegexContext;

MySQLParser.PredicateExprRegexContext = PredicateExprRegexContext;

PredicateExprRegexContext.prototype.REGEXP_SYMBOL = function() {
    return this.getToken(MySQLParser.REGEXP_SYMBOL, 0);
};

PredicateExprRegexContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};
PredicateExprRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPredicateExprRegex(this);
	}
};

PredicateExprRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPredicateExprRegex(this);
	}
};

PredicateExprRegexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPredicateExprRegex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicateExprBetweenContext(parser, ctx) {
	PredicateOperationsContext.call(this, parser);
    PredicateOperationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateExprBetweenContext.prototype = Object.create(PredicateOperationsContext.prototype);
PredicateExprBetweenContext.prototype.constructor = PredicateExprBetweenContext;

MySQLParser.PredicateExprBetweenContext = PredicateExprBetweenContext;

PredicateExprBetweenContext.prototype.BETWEEN_SYMBOL = function() {
    return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
};

PredicateExprBetweenContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

PredicateExprBetweenContext.prototype.AND_SYMBOL = function() {
    return this.getToken(MySQLParser.AND_SYMBOL, 0);
};

PredicateExprBetweenContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicateExprBetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPredicateExprBetween(this);
	}
};

PredicateExprBetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPredicateExprBetween(this);
	}
};

PredicateExprBetweenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPredicateExprBetween(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicateExprInContext(parser, ctx) {
	PredicateOperationsContext.call(this, parser);
    PredicateOperationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateExprInContext.prototype = Object.create(PredicateOperationsContext.prototype);
PredicateExprInContext.prototype.constructor = PredicateExprInContext;

MySQLParser.PredicateExprInContext = PredicateExprInContext;

PredicateExprInContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

PredicateExprInContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

PredicateExprInContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PredicateExprInContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

PredicateExprInContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};
PredicateExprInContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPredicateExprIn(this);
	}
};

PredicateExprInContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPredicateExprIn(this);
	}
};

PredicateExprInContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPredicateExprIn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicateExprLikeContext(parser, ctx) {
	PredicateOperationsContext.call(this, parser);
    PredicateOperationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateExprLikeContext.prototype = Object.create(PredicateOperationsContext.prototype);
PredicateExprLikeContext.prototype.constructor = PredicateExprLikeContext;

MySQLParser.PredicateExprLikeContext = PredicateExprLikeContext;

PredicateExprLikeContext.prototype.LIKE_SYMBOL = function() {
    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
};

PredicateExprLikeContext.prototype.simpleExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleExprContext);
    } else {
        return this.getTypedRuleContext(SimpleExprContext,i);
    }
};

PredicateExprLikeContext.prototype.ESCAPE_SYMBOL = function() {
    return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
};
PredicateExprLikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPredicateExprLike(this);
	}
};

PredicateExprLikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPredicateExprLike(this);
	}
};

PredicateExprLikeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPredicateExprLike(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.PredicateOperationsContext = PredicateOperationsContext;

MySQLParser.prototype.predicateOperations = function() {

    var localctx = new PredicateOperationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, MySQLParser.RULE_predicateOperations);
    try {
        this.state = 5517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.IN_SYMBOL:
            localctx = new PredicateExprInContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5496;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 5502;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,702,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5497;
                this.subquery();
                break;

            case 2:
                this.state = 5498;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 5499;
                this.exprList();
                this.state = 5500;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;

            }
            break;
        case MySQLParser.BETWEEN_SYMBOL:
            localctx = new PredicateExprBetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5504;
            this.match(MySQLParser.BETWEEN_SYMBOL);
            this.state = 5505;
            this.bitExpr(0);
            this.state = 5506;
            this.match(MySQLParser.AND_SYMBOL);
            this.state = 5507;
            this.predicate();
            break;
        case MySQLParser.LIKE_SYMBOL:
            localctx = new PredicateExprLikeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 5509;
            this.match(MySQLParser.LIKE_SYMBOL);
            this.state = 5510;
            this.simpleExpr(0);
            this.state = 5513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,703,this._ctx);
            if(la_===1) {
                this.state = 5511;
                this.match(MySQLParser.ESCAPE_SYMBOL);
                this.state = 5512;
                this.simpleExpr(0);

            }
            break;
        case MySQLParser.REGEXP_SYMBOL:
            localctx = new PredicateExprRegexContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 5515;
            this.match(MySQLParser.REGEXP_SYMBOL);
            this.state = 5516;
            this.bitExpr(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_bitExpr;
    this.op = null; // Token
    return this;
}

BitExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitExprContext.prototype.constructor = BitExprContext;

BitExprContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};

BitExprContext.prototype.bitExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitExprContext);
    } else {
        return this.getTypedRuleContext(BitExprContext,i);
    }
};

BitExprContext.prototype.BITWISE_XOR_OPERATOR = function() {
    return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
};

BitExprContext.prototype.MULT_OPERATOR = function() {
    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
};

BitExprContext.prototype.DIV_OPERATOR = function() {
    return this.getToken(MySQLParser.DIV_OPERATOR, 0);
};

BitExprContext.prototype.MOD_OPERATOR = function() {
    return this.getToken(MySQLParser.MOD_OPERATOR, 0);
};

BitExprContext.prototype.DIV_SYMBOL = function() {
    return this.getToken(MySQLParser.DIV_SYMBOL, 0);
};

BitExprContext.prototype.MOD_SYMBOL = function() {
    return this.getToken(MySQLParser.MOD_SYMBOL, 0);
};

BitExprContext.prototype.PLUS_OPERATOR = function() {
    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
};

BitExprContext.prototype.MINUS_OPERATOR = function() {
    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
};

BitExprContext.prototype.SHIFT_LEFT_OPERATOR = function() {
    return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
};

BitExprContext.prototype.SHIFT_RIGHT_OPERATOR = function() {
    return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
};

BitExprContext.prototype.BITWISE_AND_OPERATOR = function() {
    return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
};

BitExprContext.prototype.BITWISE_OR_OPERATOR = function() {
    return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
};

BitExprContext.prototype.INTERVAL_SYMBOL = function() {
    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
};

BitExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

BitExprContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

BitExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBitExpr(this);
	}
};

BitExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBitExpr(this);
	}
};

BitExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.bitExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BitExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 676;
    this.enterRecursionRule(localctx, 676, MySQLParser.RULE_bitExpr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5520;
        this.simpleExpr(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 5548;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,706,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 5546;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,705,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5522;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 5523;
                    localctx.op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
                    this.state = 5524;
                    this.bitExpr(8);
                    break;

                case 2:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5525;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 5526;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 393)) & ~0x1f) == 0 && ((1 << (_la - 393)) & ((1 << (MySQLParser.MULT_OPERATOR - 393)) | (1 << (MySQLParser.DIV_OPERATOR - 393)) | (1 << (MySQLParser.MOD_OPERATOR - 393)))) !== 0) || _la===MySQLParser.DIV_SYMBOL || _la===MySQLParser.MOD_SYMBOL)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5527;
                    this.bitExpr(7);
                    break;

                case 3:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5528;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 5529;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.PLUS_OPERATOR || _la===MySQLParser.MINUS_OPERATOR)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5530;
                    this.bitExpr(6);
                    break;

                case 4:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5531;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 5532;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.SHIFT_LEFT_OPERATOR || _la===MySQLParser.SHIFT_RIGHT_OPERATOR)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5533;
                    this.bitExpr(4);
                    break;

                case 5:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5534;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 5535;
                    localctx.op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
                    this.state = 5536;
                    this.bitExpr(3);
                    break;

                case 6:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5537;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 5538;
                    localctx.op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
                    this.state = 5539;
                    this.bitExpr(2);
                    break;

                case 7:
                    localctx = new BitExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                    this.state = 5540;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 5541;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.PLUS_OPERATOR || _la===MySQLParser.MINUS_OPERATOR)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5542;
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.state = 5543;
                    this.expr(0);
                    this.state = 5544;
                    this.interval();
                    break;

                } 
            }
            this.state = 5550;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,706,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SimpleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleExpr;
    return this;
}

SimpleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleExprContext.prototype.constructor = SimpleExprContext;


 
SimpleExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SimpleExprConvertContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprConvertContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprConvertContext.prototype.constructor = SimpleExprConvertContext;

MySQLParser.SimpleExprConvertContext = SimpleExprConvertContext;

SimpleExprConvertContext.prototype.CONVERT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
};

SimpleExprConvertContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprConvertContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SimpleExprConvertContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

SimpleExprConvertContext.prototype.castType = function() {
    return this.getTypedRuleContext(CastTypeContext,0);
};

SimpleExprConvertContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};
SimpleExprConvertContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprConvert(this);
	}
};

SimpleExprConvertContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprConvert(this);
	}
};

SimpleExprConvertContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprConvert(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprVariableContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprVariableContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprVariableContext.prototype.constructor = SimpleExprVariableContext;

MySQLParser.SimpleExprVariableContext = SimpleExprVariableContext;

SimpleExprVariableContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};
SimpleExprVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprVariable(this);
	}
};

SimpleExprVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprVariable(this);
	}
};

SimpleExprVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprCastContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprCastContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprCastContext.prototype.constructor = SimpleExprCastContext;

MySQLParser.SimpleExprCastContext = SimpleExprCastContext;

SimpleExprCastContext.prototype.CAST_SYMBOL = function() {
    return this.getToken(MySQLParser.CAST_SYMBOL, 0);
};

SimpleExprCastContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprCastContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SimpleExprCastContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

SimpleExprCastContext.prototype.castType = function() {
    return this.getTypedRuleContext(CastTypeContext,0);
};

SimpleExprCastContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SimpleExprCastContext.prototype.arrayCast = function() {
    return this.getTypedRuleContext(ArrayCastContext,0);
};
SimpleExprCastContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprCast(this);
	}
};

SimpleExprCastContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprCast(this);
	}
};

SimpleExprCastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprUnaryContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    this.op = null; // Token;
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprUnaryContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprUnaryContext.prototype.constructor = SimpleExprUnaryContext;

MySQLParser.SimpleExprUnaryContext = SimpleExprUnaryContext;

SimpleExprUnaryContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};

SimpleExprUnaryContext.prototype.PLUS_OPERATOR = function() {
    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
};

SimpleExprUnaryContext.prototype.MINUS_OPERATOR = function() {
    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
};

SimpleExprUnaryContext.prototype.BITWISE_NOT_OPERATOR = function() {
    return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
};
SimpleExprUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprUnary(this);
	}
};

SimpleExprUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprUnary(this);
	}
};

SimpleExprUnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprUnary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprOdbcContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprOdbcContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprOdbcContext.prototype.constructor = SimpleExprOdbcContext;

MySQLParser.SimpleExprOdbcContext = SimpleExprOdbcContext;

SimpleExprOdbcContext.prototype.OPEN_CURLY_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
};

SimpleExprOdbcContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SimpleExprOdbcContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SimpleExprOdbcContext.prototype.CLOSE_CURLY_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
};
SimpleExprOdbcContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprOdbc(this);
	}
};

SimpleExprOdbcContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprOdbc(this);
	}
};

SimpleExprOdbcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprOdbc(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprRuntimeFunctionContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprRuntimeFunctionContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprRuntimeFunctionContext.prototype.constructor = SimpleExprRuntimeFunctionContext;

MySQLParser.SimpleExprRuntimeFunctionContext = SimpleExprRuntimeFunctionContext;

SimpleExprRuntimeFunctionContext.prototype.runtimeFunctionCall = function() {
    return this.getTypedRuleContext(RuntimeFunctionCallContext,0);
};
SimpleExprRuntimeFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprRuntimeFunction(this);
	}
};

SimpleExprRuntimeFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprRuntimeFunction(this);
	}
};

SimpleExprRuntimeFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprRuntimeFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprFunctionContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprFunctionContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprFunctionContext.prototype.constructor = SimpleExprFunctionContext;

MySQLParser.SimpleExprFunctionContext = SimpleExprFunctionContext;

SimpleExprFunctionContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};
SimpleExprFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprFunction(this);
	}
};

SimpleExprFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprFunction(this);
	}
};

SimpleExprFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprCollateContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprCollateContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprCollateContext.prototype.constructor = SimpleExprCollateContext;

MySQLParser.SimpleExprCollateContext = SimpleExprCollateContext;

SimpleExprCollateContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};

SimpleExprCollateContext.prototype.COLLATE_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
};

SimpleExprCollateContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};
SimpleExprCollateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprCollate(this);
	}
};

SimpleExprCollateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprCollate(this);
	}
};

SimpleExprCollateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprCollate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprMatchContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprMatchContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprMatchContext.prototype.constructor = SimpleExprMatchContext;

MySQLParser.SimpleExprMatchContext = SimpleExprMatchContext;

SimpleExprMatchContext.prototype.MATCH_SYMBOL = function() {
    return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
};

SimpleExprMatchContext.prototype.identListArg = function() {
    return this.getTypedRuleContext(IdentListArgContext,0);
};

SimpleExprMatchContext.prototype.AGAINST_SYMBOL = function() {
    return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
};

SimpleExprMatchContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprMatchContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

SimpleExprMatchContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SimpleExprMatchContext.prototype.fulltextOptions = function() {
    return this.getTypedRuleContext(FulltextOptionsContext,0);
};
SimpleExprMatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprMatch(this);
	}
};

SimpleExprMatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprMatch(this);
	}
};

SimpleExprMatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprMatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprWindowingFunctionContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprWindowingFunctionContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprWindowingFunctionContext.prototype.constructor = SimpleExprWindowingFunctionContext;

MySQLParser.SimpleExprWindowingFunctionContext = SimpleExprWindowingFunctionContext;

SimpleExprWindowingFunctionContext.prototype.windowFunctionCall = function() {
    return this.getTypedRuleContext(WindowFunctionCallContext,0);
};
SimpleExprWindowingFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprWindowingFunction(this);
	}
};

SimpleExprWindowingFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprWindowingFunction(this);
	}
};

SimpleExprWindowingFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprWindowingFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprBinaryContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprBinaryContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprBinaryContext.prototype.constructor = SimpleExprBinaryContext;

MySQLParser.SimpleExprBinaryContext = SimpleExprBinaryContext;

SimpleExprBinaryContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

SimpleExprBinaryContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};
SimpleExprBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprBinary(this);
	}
};

SimpleExprBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprBinary(this);
	}
};

SimpleExprBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprColumnRefContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprColumnRefContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprColumnRefContext.prototype.constructor = SimpleExprColumnRefContext;

MySQLParser.SimpleExprColumnRefContext = SimpleExprColumnRefContext;

SimpleExprColumnRefContext.prototype.columnRef = function() {
    return this.getTypedRuleContext(ColumnRefContext,0);
};

SimpleExprColumnRefContext.prototype.jsonOperator = function() {
    return this.getTypedRuleContext(JsonOperatorContext,0);
};
SimpleExprColumnRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprColumnRef(this);
	}
};

SimpleExprColumnRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprColumnRef(this);
	}
};

SimpleExprColumnRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprColumnRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprParamMarkerContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprParamMarkerContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprParamMarkerContext.prototype.constructor = SimpleExprParamMarkerContext;

MySQLParser.SimpleExprParamMarkerContext = SimpleExprParamMarkerContext;

SimpleExprParamMarkerContext.prototype.PARAM_MARKER = function() {
    return this.getToken(MySQLParser.PARAM_MARKER, 0);
};
SimpleExprParamMarkerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprParamMarker(this);
	}
};

SimpleExprParamMarkerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprParamMarker(this);
	}
};

SimpleExprParamMarkerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprParamMarker(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprSumContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprSumContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprSumContext.prototype.constructor = SimpleExprSumContext;

MySQLParser.SimpleExprSumContext = SimpleExprSumContext;

SimpleExprSumContext.prototype.sumExpr = function() {
    return this.getTypedRuleContext(SumExprContext,0);
};
SimpleExprSumContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprSum(this);
	}
};

SimpleExprSumContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprSum(this);
	}
};

SimpleExprSumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprSum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprConvertUsingContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprConvertUsingContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprConvertUsingContext.prototype.constructor = SimpleExprConvertUsingContext;

MySQLParser.SimpleExprConvertUsingContext = SimpleExprConvertUsingContext;

SimpleExprConvertUsingContext.prototype.CONVERT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
};

SimpleExprConvertUsingContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprConvertUsingContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SimpleExprConvertUsingContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

SimpleExprConvertUsingContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

SimpleExprConvertUsingContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};
SimpleExprConvertUsingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprConvertUsing(this);
	}
};

SimpleExprConvertUsingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprConvertUsing(this);
	}
};

SimpleExprConvertUsingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprConvertUsing(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprSubQueryContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprSubQueryContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprSubQueryContext.prototype.constructor = SimpleExprSubQueryContext;

MySQLParser.SimpleExprSubQueryContext = SimpleExprSubQueryContext;

SimpleExprSubQueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

SimpleExprSubQueryContext.prototype.EXISTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
};
SimpleExprSubQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprSubQuery(this);
	}
};

SimpleExprSubQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprSubQuery(this);
	}
};

SimpleExprSubQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprSubQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprGroupingOperationContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprGroupingOperationContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprGroupingOperationContext.prototype.constructor = SimpleExprGroupingOperationContext;

MySQLParser.SimpleExprGroupingOperationContext = SimpleExprGroupingOperationContext;

SimpleExprGroupingOperationContext.prototype.groupingOperation = function() {
    return this.getTypedRuleContext(GroupingOperationContext,0);
};
SimpleExprGroupingOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprGroupingOperation(this);
	}
};

SimpleExprGroupingOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprGroupingOperation(this);
	}
};

SimpleExprGroupingOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprGroupingOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprNotContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprNotContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprNotContext.prototype.constructor = SimpleExprNotContext;

MySQLParser.SimpleExprNotContext = SimpleExprNotContext;

SimpleExprNotContext.prototype.not2Rule = function() {
    return this.getTypedRuleContext(Not2RuleContext,0);
};

SimpleExprNotContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};
SimpleExprNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprNot(this);
	}
};

SimpleExprNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprNot(this);
	}
};

SimpleExprNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprValuesContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprValuesContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprValuesContext.prototype.constructor = SimpleExprValuesContext;

MySQLParser.SimpleExprValuesContext = SimpleExprValuesContext;

SimpleExprValuesContext.prototype.VALUES_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
};

SimpleExprValuesContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprValuesContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

SimpleExprValuesContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};
SimpleExprValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprValues(this);
	}
};

SimpleExprValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprValues(this);
	}
};

SimpleExprValuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprValues(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprDefaultContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprDefaultContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprDefaultContext.prototype.constructor = SimpleExprDefaultContext;

MySQLParser.SimpleExprDefaultContext = SimpleExprDefaultContext;

SimpleExprDefaultContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

SimpleExprDefaultContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprDefaultContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

SimpleExprDefaultContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};
SimpleExprDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprDefault(this);
	}
};

SimpleExprDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprDefault(this);
	}
};

SimpleExprDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprListContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprListContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprListContext.prototype.constructor = SimpleExprListContext;

MySQLParser.SimpleExprListContext = SimpleExprListContext;

SimpleExprListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprListContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

SimpleExprListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SimpleExprListContext.prototype.ROW_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
};
SimpleExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprList(this);
	}
};

SimpleExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprList(this);
	}
};

SimpleExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprIntervalContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprIntervalContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprIntervalContext.prototype.constructor = SimpleExprIntervalContext;

MySQLParser.SimpleExprIntervalContext = SimpleExprIntervalContext;

SimpleExprIntervalContext.prototype.INTERVAL_SYMBOL = function() {
    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
};

SimpleExprIntervalContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

SimpleExprIntervalContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

SimpleExprIntervalContext.prototype.PLUS_OPERATOR = function() {
    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
};
SimpleExprIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprInterval(this);
	}
};

SimpleExprIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprInterval(this);
	}
};

SimpleExprIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprCaseContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprCaseContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprCaseContext.prototype.constructor = SimpleExprCaseContext;

MySQLParser.SimpleExprCaseContext = SimpleExprCaseContext;

SimpleExprCaseContext.prototype.CASE_SYMBOL = function() {
    return this.getToken(MySQLParser.CASE_SYMBOL, 0);
};

SimpleExprCaseContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

SimpleExprCaseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SimpleExprCaseContext.prototype.whenExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenExpressionContext);
    } else {
        return this.getTypedRuleContext(WhenExpressionContext,i);
    }
};

SimpleExprCaseContext.prototype.thenExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ThenExpressionContext);
    } else {
        return this.getTypedRuleContext(ThenExpressionContext,i);
    }
};

SimpleExprCaseContext.prototype.elseExpression = function() {
    return this.getTypedRuleContext(ElseExpressionContext,0);
};
SimpleExprCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprCase(this);
	}
};

SimpleExprCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprCase(this);
	}
};

SimpleExprCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprConcatContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprConcatContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprConcatContext.prototype.constructor = SimpleExprConcatContext;

MySQLParser.SimpleExprConcatContext = SimpleExprConcatContext;

SimpleExprConcatContext.prototype.simpleExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleExprContext);
    } else {
        return this.getTypedRuleContext(SimpleExprContext,i);
    }
};

SimpleExprConcatContext.prototype.CONCAT_PIPES_SYMBOL = function() {
    return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0);
};
SimpleExprConcatContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprConcat(this);
	}
};

SimpleExprConcatContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprConcat(this);
	}
};

SimpleExprConcatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprConcat(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleExprLiteralContext(parser, ctx) {
	SimpleExprContext.call(this, parser);
    SimpleExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleExprLiteralContext.prototype = Object.create(SimpleExprContext.prototype);
SimpleExprLiteralContext.prototype.constructor = SimpleExprLiteralContext;

MySQLParser.SimpleExprLiteralContext = SimpleExprLiteralContext;

SimpleExprLiteralContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
SimpleExprLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprLiteral(this);
	}
};

SimpleExprLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprLiteral(this);
	}
};

SimpleExprLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.simpleExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SimpleExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 678;
    this.enterRecursionRule(localctx, 678, MySQLParser.RULE_simpleExpr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5655;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SimpleExprVariableContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 5552;
            this.variable();
            break;

        case 2:
            localctx = new SimpleExprColumnRefContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5553;
            this.columnRef();
            this.state = 5555;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,707,this._ctx);
            if(la_===1) {
                this.state = 5554;
                this.jsonOperator();

            }
            break;

        case 3:
            localctx = new SimpleExprRuntimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5557;
            this.runtimeFunctionCall();
            break;

        case 4:
            localctx = new SimpleExprFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5558;
            this.functionCall();
            break;

        case 5:
            localctx = new SimpleExprLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5559;
            this.literal();
            break;

        case 6:
            localctx = new SimpleExprParamMarkerContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5560;
            this.match(MySQLParser.PARAM_MARKER);
            break;

        case 7:
            localctx = new SimpleExprSumContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5561;
            this.sumExpr();
            break;

        case 8:
            localctx = new SimpleExprGroupingOperationContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5562;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 5563;
            this.groupingOperation();
            break;

        case 9:
            localctx = new SimpleExprWindowingFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5564;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 5565;
            this.windowFunctionCall();
            break;

        case 10:
            localctx = new SimpleExprUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5566;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (MySQLParser.PLUS_OPERATOR - 391)) | (1 << (MySQLParser.MINUS_OPERATOR - 391)) | (1 << (MySQLParser.BITWISE_NOT_OPERATOR - 391)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5567;
            this.simpleExpr(14);
            break;

        case 11:
            localctx = new SimpleExprNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5568;
            this.not2Rule();
            this.state = 5569;
            this.simpleExpr(13);
            break;

        case 12:
            localctx = new SimpleExprListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ROW_SYMBOL) {
                this.state = 5571;
                this.match(MySQLParser.ROW_SYMBOL);
            }

            this.state = 5574;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5575;
            this.exprList();
            this.state = 5576;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 13:
            localctx = new SimpleExprSubQueryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EXISTS_SYMBOL) {
                this.state = 5578;
                this.match(MySQLParser.EXISTS_SYMBOL);
            }

            this.state = 5581;
            this.subquery();
            break;

        case 14:
            localctx = new SimpleExprOdbcContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5582;
            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
            this.state = 5583;
            this.identifier();
            this.state = 5584;
            this.expr(0);
            this.state = 5585;
            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
            break;

        case 15:
            localctx = new SimpleExprMatchContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5587;
            this.match(MySQLParser.MATCH_SYMBOL);
            this.state = 5588;
            this.identListArg();
            this.state = 5589;
            this.match(MySQLParser.AGAINST_SYMBOL);
            this.state = 5590;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5591;
            this.bitExpr(0);
            this.state = 5593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IN_SYMBOL || _la===MySQLParser.WITH_SYMBOL) {
                this.state = 5592;
                this.fulltextOptions();
            }

            this.state = 5595;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 16:
            localctx = new SimpleExprBinaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5597;
            this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 5598;
            this.simpleExpr(8);
            break;

        case 17:
            localctx = new SimpleExprCastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5599;
            this.match(MySQLParser.CAST_SYMBOL);
            this.state = 5600;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5601;
            this.expr(0);
            this.state = 5602;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 5603;
            this.castType();
            this.state = 5605;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,711,this._ctx);
            if(la_===1) {
                this.state = 5604;
                this.arrayCast();

            }
            this.state = 5607;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 18:
            localctx = new SimpleExprCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5609;
            this.match(MySQLParser.CASE_SYMBOL);
            this.state = 5611;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,712,this._ctx);
            if(la_===1) {
                this.state = 5610;
                this.expr(0);

            }
            this.state = 5616; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5613;
                this.whenExpression();
                this.state = 5614;
                this.thenExpression();
                this.state = 5618; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.WHEN_SYMBOL);
            this.state = 5621;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ELSE_SYMBOL) {
                this.state = 5620;
                this.elseExpression();
            }

            this.state = 5623;
            this.match(MySQLParser.END_SYMBOL);
            break;

        case 19:
            localctx = new SimpleExprConvertContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5625;
            this.match(MySQLParser.CONVERT_SYMBOL);
            this.state = 5626;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5627;
            this.expr(0);
            this.state = 5628;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5629;
            this.castType();
            this.state = 5630;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 20:
            localctx = new SimpleExprConvertUsingContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5632;
            this.match(MySQLParser.CONVERT_SYMBOL);
            this.state = 5633;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5634;
            this.expr(0);
            this.state = 5635;
            this.match(MySQLParser.USING_SYMBOL);
            this.state = 5636;
            this.charsetName();
            this.state = 5637;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 21:
            localctx = new SimpleExprDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5639;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 5640;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5641;
            this.simpleIdentifier();
            this.state = 5642;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 22:
            localctx = new SimpleExprValuesContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5644;
            this.match(MySQLParser.VALUES_SYMBOL);
            this.state = 5645;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5646;
            this.simpleIdentifier();
            this.state = 5647;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 23:
            localctx = new SimpleExprIntervalContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 5649;
            this.match(MySQLParser.INTERVAL_SYMBOL);
            this.state = 5650;
            this.expr(0);
            this.state = 5651;
            this.interval();
            this.state = 5652;
            this.match(MySQLParser.PLUS_OPERATOR);
            this.state = 5653;
            this.expr(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 5665;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,717,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 5663;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SimpleExprConcatContext(this, new SimpleExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                    this.state = 5657;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 5658;
                    this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
                    this.state = 5659;
                    this.simpleExpr(16);
                    break;

                case 2:
                    localctx = new SimpleExprCollateContext(this, new SimpleExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                    this.state = 5660;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 5661;
                    this.match(MySQLParser.COLLATE_SYMBOL);
                    this.state = 5662;
                    this.textOrIdentifier();
                    break;

                } 
            }
            this.state = 5667;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,717,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ArrayCastContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_arrayCast;
    return this;
}

ArrayCastContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCastContext.prototype.constructor = ArrayCastContext;

ArrayCastContext.prototype.ARRAY_SYMBOL = function() {
    return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
};

ArrayCastContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterArrayCast(this);
	}
};

ArrayCastContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitArrayCast(this);
	}
};

ArrayCastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitArrayCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ArrayCastContext = ArrayCastContext;

MySQLParser.prototype.arrayCast = function() {

    var localctx = new ArrayCastContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, MySQLParser.RULE_arrayCast);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5668;
        if (!( serverVersion >= 80017)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
        }
        this.state = 5669;
        this.match(MySQLParser.ARRAY_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JsonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_jsonOperator;
    return this;
}

JsonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JsonOperatorContext.prototype.constructor = JsonOperatorContext;

JsonOperatorContext.prototype.JSON_SEPARATOR_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
};

JsonOperatorContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

JsonOperatorContext.prototype.JSON_UNQUOTED_SEPARATOR_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
};

JsonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterJsonOperator(this);
	}
};

JsonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitJsonOperator(this);
	}
};

JsonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitJsonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.JsonOperatorContext = JsonOperatorContext;

MySQLParser.prototype.jsonOperator = function() {

    var localctx = new JsonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, MySQLParser.RULE_jsonOperator);
    try {
        this.state = 5677;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,718,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5671;
            if (!( serverVersion >= 50708)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
            }
            this.state = 5672;
            this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
            this.state = 5673;
            this.textStringLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5674;
            if (!( serverVersion >= 50713)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50713");
            }
            this.state = 5675;
            this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
            this.state = 5676;
            this.textStringLiteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SumExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_sumExpr;
    this.name = null; // Token
    return this;
}

SumExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SumExprContext.prototype.constructor = SumExprContext;

SumExprContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SumExprContext.prototype.inSumExpr = function() {
    return this.getTypedRuleContext(InSumExprContext,0);
};

SumExprContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SumExprContext.prototype.AVG_SYMBOL = function() {
    return this.getToken(MySQLParser.AVG_SYMBOL, 0);
};

SumExprContext.prototype.DISTINCT_SYMBOL = function() {
    return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
};

SumExprContext.prototype.windowingClause = function() {
    return this.getTypedRuleContext(WindowingClauseContext,0);
};

SumExprContext.prototype.BIT_AND_SYMBOL = function() {
    return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
};

SumExprContext.prototype.BIT_OR_SYMBOL = function() {
    return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
};

SumExprContext.prototype.BIT_XOR_SYMBOL = function() {
    return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
};

SumExprContext.prototype.jsonFunction = function() {
    return this.getTypedRuleContext(JsonFunctionContext,0);
};

SumExprContext.prototype.MULT_OPERATOR = function() {
    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
};

SumExprContext.prototype.COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
};

SumExprContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

SumExprContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

SumExprContext.prototype.MIN_SYMBOL = function() {
    return this.getToken(MySQLParser.MIN_SYMBOL, 0);
};

SumExprContext.prototype.MAX_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_SYMBOL, 0);
};

SumExprContext.prototype.STD_SYMBOL = function() {
    return this.getToken(MySQLParser.STD_SYMBOL, 0);
};

SumExprContext.prototype.VARIANCE_SYMBOL = function() {
    return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
};

SumExprContext.prototype.STDDEV_SAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
};

SumExprContext.prototype.VAR_SAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
};

SumExprContext.prototype.SUM_SYMBOL = function() {
    return this.getToken(MySQLParser.SUM_SYMBOL, 0);
};

SumExprContext.prototype.GROUP_CONCAT_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
};

SumExprContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

SumExprContext.prototype.SEPARATOR_SYMBOL = function() {
    return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
};

SumExprContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

SumExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSumExpr(this);
	}
};

SumExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSumExpr(this);
	}
};

SumExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSumExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SumExprContext = SumExprContext;

MySQLParser.prototype.sumExpr = function() {

    var localctx = new SumExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, MySQLParser.RULE_sumExpr);
    var _la = 0; // Token type
    try {
        this.state = 5810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,741,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5679;
            localctx.name = this.match(MySQLParser.AVG_SYMBOL);
            this.state = 5680;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5682;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,719,this._ctx);
            if(la_===1) {
                this.state = 5681;
                this.match(MySQLParser.DISTINCT_SYMBOL);

            }
            this.state = 5684;
            this.inSumExpr();
            this.state = 5685;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5688;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,720,this._ctx);
            if(la_===1) {
                this.state = 5686;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5687;
                this.windowingClause();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5690;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 439)) & ~0x1f) == 0 && ((1 << (_la - 439)) & ((1 << (MySQLParser.BIT_AND_SYMBOL - 439)) | (1 << (MySQLParser.BIT_OR_SYMBOL - 439)) | (1 << (MySQLParser.BIT_XOR_SYMBOL - 439)))) !== 0))) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5691;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5692;
            this.inSumExpr();
            this.state = 5693;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5696;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,721,this._ctx);
            if(la_===1) {
                this.state = 5694;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5695;
                this.windowingClause();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5698;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 5699;
            this.jsonFunction();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5700;
            localctx.name = this.match(MySQLParser.COUNT_SYMBOL);
            this.state = 5701;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALL_SYMBOL) {
                this.state = 5702;
                this.match(MySQLParser.ALL_SYMBOL);
            }

            this.state = 5705;
            this.match(MySQLParser.MULT_OPERATOR);
            this.state = 5706;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5709;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,723,this._ctx);
            if(la_===1) {
                this.state = 5707;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5708;
                this.windowingClause();

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5711;
            localctx.name = this.match(MySQLParser.COUNT_SYMBOL);
            this.state = 5712;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5720;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,725,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5714;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ALL_SYMBOL) {
                    this.state = 5713;
                    this.match(MySQLParser.ALL_SYMBOL);
                }

                this.state = 5716;
                this.match(MySQLParser.MULT_OPERATOR);
                break;

            case 2:
                this.state = 5717;
                this.inSumExpr();
                break;

            case 3:
                this.state = 5718;
                this.match(MySQLParser.DISTINCT_SYMBOL);
                this.state = 5719;
                this.exprList();
                break;

            }
            this.state = 5722;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5725;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,726,this._ctx);
            if(la_===1) {
                this.state = 5723;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5724;
                this.windowingClause();

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 5727;
            localctx.name = this.match(MySQLParser.MIN_SYMBOL);
            this.state = 5728;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5730;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
            if(la_===1) {
                this.state = 5729;
                this.match(MySQLParser.DISTINCT_SYMBOL);

            }
            this.state = 5732;
            this.inSumExpr();
            this.state = 5733;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5736;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,728,this._ctx);
            if(la_===1) {
                this.state = 5734;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5735;
                this.windowingClause();

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 5738;
            localctx.name = this.match(MySQLParser.MAX_SYMBOL);
            this.state = 5739;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5741;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,729,this._ctx);
            if(la_===1) {
                this.state = 5740;
                this.match(MySQLParser.DISTINCT_SYMBOL);

            }
            this.state = 5743;
            this.inSumExpr();
            this.state = 5744;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5747;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,730,this._ctx);
            if(la_===1) {
                this.state = 5745;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5746;
                this.windowingClause();

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 5749;
            localctx.name = this.match(MySQLParser.STD_SYMBOL);
            this.state = 5750;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5751;
            this.inSumExpr();
            this.state = 5752;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5755;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
            if(la_===1) {
                this.state = 5753;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5754;
                this.windowingClause();

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 5757;
            localctx.name = this.match(MySQLParser.VARIANCE_SYMBOL);
            this.state = 5758;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5759;
            this.inSumExpr();
            this.state = 5760;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5763;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,732,this._ctx);
            if(la_===1) {
                this.state = 5761;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5762;
                this.windowingClause();

            }
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 5765;
            localctx.name = this.match(MySQLParser.STDDEV_SAMP_SYMBOL);
            this.state = 5766;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5767;
            this.inSumExpr();
            this.state = 5768;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5771;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,733,this._ctx);
            if(la_===1) {
                this.state = 5769;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5770;
                this.windowingClause();

            }
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 5773;
            localctx.name = this.match(MySQLParser.VAR_SAMP_SYMBOL);
            this.state = 5774;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5775;
            this.inSumExpr();
            this.state = 5776;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5779;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,734,this._ctx);
            if(la_===1) {
                this.state = 5777;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5778;
                this.windowingClause();

            }
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 5781;
            localctx.name = this.match(MySQLParser.SUM_SYMBOL);
            this.state = 5782;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5784;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,735,this._ctx);
            if(la_===1) {
                this.state = 5783;
                this.match(MySQLParser.DISTINCT_SYMBOL);

            }
            this.state = 5786;
            this.inSumExpr();
            this.state = 5787;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5790;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,736,this._ctx);
            if(la_===1) {
                this.state = 5788;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5789;
                this.windowingClause();

            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 5792;
            localctx.name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
            this.state = 5793;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5795;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,737,this._ctx);
            if(la_===1) {
                this.state = 5794;
                this.match(MySQLParser.DISTINCT_SYMBOL);

            }
            this.state = 5797;
            this.exprList();
            this.state = 5799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ORDER_SYMBOL) {
                this.state = 5798;
                this.orderClause();
            }

            this.state = 5803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SEPARATOR_SYMBOL) {
                this.state = 5801;
                this.match(MySQLParser.SEPARATOR_SYMBOL);
                this.state = 5802;
                this.textString();
            }

            this.state = 5805;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5808;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,740,this._ctx);
            if(la_===1) {
                this.state = 5806;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 5807;
                this.windowingClause();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_groupingOperation;
    return this;
}

GroupingOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingOperationContext.prototype.constructor = GroupingOperationContext;

GroupingOperationContext.prototype.GROUPING_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUPING_SYMBOL, 0);
};

GroupingOperationContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

GroupingOperationContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

GroupingOperationContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

GroupingOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGroupingOperation(this);
	}
};

GroupingOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGroupingOperation(this);
	}
};

GroupingOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGroupingOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GroupingOperationContext = GroupingOperationContext;

MySQLParser.prototype.groupingOperation = function() {

    var localctx = new GroupingOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, MySQLParser.RULE_groupingOperation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5812;
        this.match(MySQLParser.GROUPING_SYMBOL);
        this.state = 5813;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 5814;
        this.exprList();
        this.state = 5815;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowFunctionCall;
    return this;
}

WindowFunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFunctionCallContext.prototype.constructor = WindowFunctionCallContext;

WindowFunctionCallContext.prototype.parentheses = function() {
    return this.getTypedRuleContext(ParenthesesContext,0);
};

WindowFunctionCallContext.prototype.windowingClause = function() {
    return this.getTypedRuleContext(WindowingClauseContext,0);
};

WindowFunctionCallContext.prototype.ROW_NUMBER_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.RANK_SYMBOL = function() {
    return this.getToken(MySQLParser.RANK_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.DENSE_RANK_SYMBOL = function() {
    return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.CUME_DIST_SYMBOL = function() {
    return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.PERCENT_RANK_SYMBOL = function() {
    return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.NTILE_SYMBOL = function() {
    return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.simpleExprWithParentheses = function() {
    return this.getTypedRuleContext(SimpleExprWithParenthesesContext,0);
};

WindowFunctionCallContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WindowFunctionCallContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.LEAD_SYMBOL = function() {
    return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.LAG_SYMBOL = function() {
    return this.getToken(MySQLParser.LAG_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.leadLagInfo = function() {
    return this.getTypedRuleContext(LeadLagInfoContext,0);
};

WindowFunctionCallContext.prototype.nullTreatment = function() {
    return this.getTypedRuleContext(NullTreatmentContext,0);
};

WindowFunctionCallContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

WindowFunctionCallContext.prototype.FIRST_VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.LAST_VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.NTH_VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};

WindowFunctionCallContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.FIRST_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.LAST_SYMBOL = function() {
    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
};

WindowFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowFunctionCall(this);
	}
};

WindowFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowFunctionCall(this);
	}
};

WindowFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowFunctionCallContext = WindowFunctionCallContext;

MySQLParser.prototype.windowFunctionCall = function() {

    var localctx = new WindowFunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, MySQLParser.RULE_windowFunctionCall);
    var _la = 0; // Token type
    try {
        this.state = 5859;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CUME_DIST_SYMBOL:
        case MySQLParser.DENSE_RANK_SYMBOL:
        case MySQLParser.PERCENT_RANK_SYMBOL:
        case MySQLParser.RANK_SYMBOL:
        case MySQLParser.ROW_NUMBER_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5817;
            _la = this._input.LA(1);
            if(!(((((_la - 708)) & ~0x1f) == 0 && ((1 << (_la - 708)) & ((1 << (MySQLParser.CUME_DIST_SYMBOL - 708)) | (1 << (MySQLParser.DENSE_RANK_SYMBOL - 708)) | (1 << (MySQLParser.PERCENT_RANK_SYMBOL - 708)) | (1 << (MySQLParser.RANK_SYMBOL - 708)) | (1 << (MySQLParser.ROW_NUMBER_SYMBOL - 708)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5818;
            this.parentheses();
            this.state = 5819;
            this.windowingClause();
            break;
        case MySQLParser.NTILE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5821;
            this.match(MySQLParser.NTILE_SYMBOL);
            this.state = 5822;
            this.simpleExprWithParentheses();
            this.state = 5823;
            this.windowingClause();
            break;
        case MySQLParser.LAG_SYMBOL:
        case MySQLParser.LEAD_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5825;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LAG_SYMBOL || _la===MySQLParser.LEAD_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5826;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5827;
            this.expr(0);
            this.state = 5829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 5828;
                this.leadLagInfo();
            }

            this.state = 5831;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.RESPECT_SYMBOL) {
                this.state = 5832;
                this.nullTreatment();
            }

            this.state = 5835;
            this.windowingClause();
            break;
        case MySQLParser.FIRST_VALUE_SYMBOL:
        case MySQLParser.LAST_VALUE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 5837;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FIRST_VALUE_SYMBOL || _la===MySQLParser.LAST_VALUE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5838;
            this.exprWithParentheses();
            this.state = 5840;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.RESPECT_SYMBOL) {
                this.state = 5839;
                this.nullTreatment();
            }

            this.state = 5842;
            this.windowingClause();
            break;
        case MySQLParser.NTH_VALUE_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 5844;
            this.match(MySQLParser.NTH_VALUE_SYMBOL);
            this.state = 5845;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5846;
            this.expr(0);
            this.state = 5847;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5848;
            this.simpleExpr(0);
            this.state = 5849;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5852;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL) {
                this.state = 5850;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 5851;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.FIRST_SYMBOL || _la===MySQLParser.LAST_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 5855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.RESPECT_SYMBOL) {
                this.state = 5854;
                this.nullTreatment();
            }

            this.state = 5857;
            this.windowingClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowingClause;
    return this;
}

WindowingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowingClauseContext.prototype.constructor = WindowingClauseContext;

WindowingClauseContext.prototype.OVER_SYMBOL = function() {
    return this.getToken(MySQLParser.OVER_SYMBOL, 0);
};

WindowingClauseContext.prototype.windowName = function() {
    return this.getTypedRuleContext(WindowNameContext,0);
};

WindowingClauseContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

WindowingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowingClause(this);
	}
};

WindowingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowingClause(this);
	}
};

WindowingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowingClauseContext = WindowingClauseContext;

MySQLParser.prototype.windowingClause = function() {

    var localctx = new WindowingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, MySQLParser.RULE_windowingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5861;
        this.match(MySQLParser.OVER_SYMBOL);
        this.state = 5864;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,748,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5862;
            this.windowName();
            break;

        case 2:
            this.state = 5863;
            this.windowSpec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LeadLagInfoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_leadLagInfo;
    return this;
}

LeadLagInfoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeadLagInfoContext.prototype.constructor = LeadLagInfoContext;

LeadLagInfoContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


LeadLagInfoContext.prototype.ulonglong_number = function() {
    return this.getTypedRuleContext(Ulonglong_numberContext,0);
};

LeadLagInfoContext.prototype.PARAM_MARKER = function() {
    return this.getToken(MySQLParser.PARAM_MARKER, 0);
};

LeadLagInfoContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LeadLagInfoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLeadLagInfo(this);
	}
};

LeadLagInfoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLeadLagInfo(this);
	}
};

LeadLagInfoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLeadLagInfo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LeadLagInfoContext = LeadLagInfoContext;

MySQLParser.prototype.leadLagInfo = function() {

    var localctx = new LeadLagInfoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, MySQLParser.RULE_leadLagInfo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5866;
        this.match(MySQLParser.COMMA_SYMBOL);
        this.state = 5869;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INT_NUMBER:
        case MySQLParser.LONG_NUMBER:
        case MySQLParser.ULONGLONG_NUMBER:
        case MySQLParser.DECIMAL_NUMBER:
        case MySQLParser.FLOAT_NUMBER:
            this.state = 5867;
            this.ulonglong_number();
            break;
        case MySQLParser.PARAM_MARKER:
            this.state = 5868;
            this.match(MySQLParser.PARAM_MARKER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 5871;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5872;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullTreatmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_nullTreatment;
    return this;
}

NullTreatmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullTreatmentContext.prototype.constructor = NullTreatmentContext;

NullTreatmentContext.prototype.NULLS_SYMBOL = function() {
    return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
};

NullTreatmentContext.prototype.RESPECT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
};

NullTreatmentContext.prototype.IGNORE_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
};

NullTreatmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNullTreatment(this);
	}
};

NullTreatmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNullTreatment(this);
	}
};

NullTreatmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNullTreatment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NullTreatmentContext = NullTreatmentContext;

MySQLParser.prototype.nullTreatment = function() {

    var localctx = new NullTreatmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, MySQLParser.RULE_nullTreatment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5875;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.IGNORE_SYMBOL || _la===MySQLParser.RESPECT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5876;
        this.match(MySQLParser.NULLS_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JsonFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_jsonFunction;
    return this;
}

JsonFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JsonFunctionContext.prototype.constructor = JsonFunctionContext;

JsonFunctionContext.prototype.JSON_ARRAYAGG_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
};

JsonFunctionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

JsonFunctionContext.prototype.inSumExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InSumExprContext);
    } else {
        return this.getTypedRuleContext(InSumExprContext,i);
    }
};

JsonFunctionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

JsonFunctionContext.prototype.windowingClause = function() {
    return this.getTypedRuleContext(WindowingClauseContext,0);
};

JsonFunctionContext.prototype.JSON_OBJECTAGG_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
};

JsonFunctionContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

JsonFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterJsonFunction(this);
	}
};

JsonFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitJsonFunction(this);
	}
};

JsonFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitJsonFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.JsonFunctionContext = JsonFunctionContext;

MySQLParser.prototype.jsonFunction = function() {

    var localctx = new JsonFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, MySQLParser.RULE_jsonFunction);
    try {
        this.state = 5894;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.JSON_ARRAYAGG_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5878;
            this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
            this.state = 5879;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5880;
            this.inSumExpr();
            this.state = 5881;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5883;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,751,this._ctx);
            if(la_===1) {
                this.state = 5882;
                this.windowingClause();

            }
            break;
        case MySQLParser.JSON_OBJECTAGG_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5885;
            this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
            this.state = 5886;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5887;
            this.inSumExpr();
            this.state = 5888;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5889;
            this.inSumExpr();
            this.state = 5890;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.state = 5892;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,752,this._ctx);
            if(la_===1) {
                this.state = 5891;
                this.windowingClause();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InSumExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_inSumExpr;
    return this;
}

InSumExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InSumExprContext.prototype.constructor = InSumExprContext;

InSumExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

InSumExprContext.prototype.ALL_SYMBOL = function() {
    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
};

InSumExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInSumExpr(this);
	}
};

InSumExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInSumExpr(this);
	}
};

InSumExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInSumExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InSumExprContext = InSumExprContext;

MySQLParser.prototype.inSumExpr = function() {

    var localctx = new InSumExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, MySQLParser.RULE_inSumExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5897;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,754,this._ctx);
        if(la_===1) {
            this.state = 5896;
            this.match(MySQLParser.ALL_SYMBOL);

        }
        this.state = 5899;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentListArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identListArg;
    return this;
}

IdentListArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentListArgContext.prototype.constructor = IdentListArgContext;

IdentListArgContext.prototype.identList = function() {
    return this.getTypedRuleContext(IdentListContext,0);
};

IdentListArgContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

IdentListArgContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

IdentListArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentListArg(this);
	}
};

IdentListArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentListArg(this);
	}
};

IdentListArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentListArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentListArgContext = IdentListArgContext;

MySQLParser.prototype.identListArg = function() {

    var localctx = new IdentListArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, MySQLParser.RULE_identListArg);
    try {
        this.state = 5906;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5901;
            this.identList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5902;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5903;
            this.identList();
            this.state = 5904;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identList;
    return this;
}

IdentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentListContext.prototype.constructor = IdentListContext;

IdentListContext.prototype.simpleIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleIdentifierContext);
    } else {
        return this.getTypedRuleContext(SimpleIdentifierContext,i);
    }
};

IdentListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


IdentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentList(this);
	}
};

IdentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentList(this);
	}
};

IdentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentListContext = IdentListContext;

MySQLParser.prototype.identList = function() {

    var localctx = new IdentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, MySQLParser.RULE_identList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5908;
        this.simpleIdentifier();
        this.state = 5913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 5909;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5910;
            this.simpleIdentifier();
            this.state = 5915;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FulltextOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fulltextOptions;
    return this;
}

FulltextOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltextOptionsContext.prototype.constructor = FulltextOptionsContext;

FulltextOptionsContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

FulltextOptionsContext.prototype.BOOLEAN_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
};

FulltextOptionsContext.prototype.MODE_SYMBOL = function() {
    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
};

FulltextOptionsContext.prototype.NATURAL_SYMBOL = function() {
    return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
};

FulltextOptionsContext.prototype.LANGUAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
};

FulltextOptionsContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

FulltextOptionsContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

FulltextOptionsContext.prototype.EXPANSION_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
};

FulltextOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFulltextOptions(this);
	}
};

FulltextOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFulltextOptions(this);
	}
};

FulltextOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFulltextOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FulltextOptionsContext = FulltextOptionsContext;

MySQLParser.prototype.fulltextOptions = function() {

    var localctx = new FulltextOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, MySQLParser.RULE_fulltextOptions);
    var _la = 0; // Token type
    try {
        this.state = 5931;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,758,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5916;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 5917;
            this.match(MySQLParser.BOOLEAN_SYMBOL);
            this.state = 5918;
            this.match(MySQLParser.MODE_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5919;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 5920;
            this.match(MySQLParser.NATURAL_SYMBOL);
            this.state = 5921;
            this.match(MySQLParser.LANGUAGE_SYMBOL);
            this.state = 5922;
            this.match(MySQLParser.MODE_SYMBOL);
            this.state = 5926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH_SYMBOL) {
                this.state = 5923;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 5924;
                this.match(MySQLParser.QUERY_SYMBOL);
                this.state = 5925;
                this.match(MySQLParser.EXPANSION_SYMBOL);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5928;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 5929;
            this.match(MySQLParser.QUERY_SYMBOL);
            this.state = 5930;
            this.match(MySQLParser.EXPANSION_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuntimeFunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_runtimeFunctionCall;
    this.name = null; // Token
    return this;
}

RuntimeFunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuntimeFunctionCallContext.prototype.constructor = RuntimeFunctionCallContext;

RuntimeFunctionCallContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

RuntimeFunctionCallContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.CHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

RuntimeFunctionCallContext.prototype.CURRENT_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.parentheses = function() {
    return this.getTypedRuleContext(ParenthesesContext,0);
};

RuntimeFunctionCallContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

RuntimeFunctionCallContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.DAY_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

RuntimeFunctionCallContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


RuntimeFunctionCallContext.prototype.INSERT_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.INTERVAL_SYMBOL = function() {
    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.LEFT_SYMBOL = function() {
    return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.MINUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.MONTH_SYMBOL = function() {
    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.RIGHT_SYMBOL = function() {
    return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.trimFunction = function() {
    return this.getTypedRuleContext(TrimFunctionContext,0);
};

RuntimeFunctionCallContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.VALUES_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.YEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.ADDDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.SUBDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

RuntimeFunctionCallContext.prototype.CURDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.CURTIME_SYMBOL = function() {
    return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.timeFunctionParameters = function() {
    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
};

RuntimeFunctionCallContext.prototype.DATE_ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.DATE_SUB_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.EXTRACT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.dateTimeTtype = function() {
    return this.getTypedRuleContext(DateTimeTtypeContext,0);
};

RuntimeFunctionCallContext.prototype.GET_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.NOW_SYMBOL = function() {
    return this.getToken(MySQLParser.NOW_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

RuntimeFunctionCallContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.POSITION_SYMBOL = function() {
    return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.substringFunction = function() {
    return this.getTypedRuleContext(SubstringFunctionContext,0);
};

RuntimeFunctionCallContext.prototype.SYSDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.intervalTimeStamp = function() {
    return this.getTypedRuleContext(IntervalTimeStampContext,0);
};

RuntimeFunctionCallContext.prototype.TIMESTAMP_ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.TIMESTAMP_DIFF_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.UTC_DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.UTC_TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.UTC_TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.ASCII_SYMBOL = function() {
    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.CHARSET_SYMBOL = function() {
    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.exprListWithParentheses = function() {
    return this.getTypedRuleContext(ExprListWithParenthesesContext,0);
};

RuntimeFunctionCallContext.prototype.COALESCE_SYMBOL = function() {
    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.COLLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.DATABASE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.IF_SYMBOL = function() {
    return this.getToken(MySQLParser.IF_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.MOD_SYMBOL = function() {
    return this.getToken(MySQLParser.MOD_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

RuntimeFunctionCallContext.prototype.OLD_PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.QUARTER_SYMBOL = function() {
    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.REPEAT_SYMBOL = function() {
    return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.REVERSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.ROW_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.TRUNCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.WEEK_SYMBOL = function() {
    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.WEIGHT_STRING_SYMBOL = function() {
    return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

RuntimeFunctionCallContext.prototype.wsNumCodepoints = function() {
    return this.getTypedRuleContext(WsNumCodepointsContext,0);
};

RuntimeFunctionCallContext.prototype.ulong_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ulong_numberContext);
    } else {
        return this.getTypedRuleContext(Ulong_numberContext,i);
    }
};

RuntimeFunctionCallContext.prototype.weightStringLevels = function() {
    return this.getTypedRuleContext(WeightStringLevelsContext,0);
};

RuntimeFunctionCallContext.prototype.geometryFunction = function() {
    return this.getTypedRuleContext(GeometryFunctionContext,0);
};

RuntimeFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRuntimeFunctionCall(this);
	}
};

RuntimeFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRuntimeFunctionCall(this);
	}
};

RuntimeFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRuntimeFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RuntimeFunctionCallContext = RuntimeFunctionCallContext;

MySQLParser.prototype.runtimeFunctionCall = function() {

    var localctx = new RuntimeFunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, MySQLParser.RULE_runtimeFunctionCall);
    var _la = 0; // Token type
    try {
        this.state = 6206;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,776,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5933;
            localctx.name = this.match(MySQLParser.CHAR_SYMBOL);
            this.state = 5934;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5935;
            this.exprList();
            this.state = 5938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING_SYMBOL) {
                this.state = 5936;
                this.match(MySQLParser.USING_SYMBOL);
                this.state = 5937;
                this.charsetName();
            }

            this.state = 5940;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5942;
            localctx.name = this.match(MySQLParser.CURRENT_USER_SYMBOL);
            this.state = 5944;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
            if(la_===1) {
                this.state = 5943;
                this.parentheses();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5946;
            localctx.name = this.match(MySQLParser.DATE_SYMBOL);
            this.state = 5947;
            this.exprWithParentheses();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5948;
            localctx.name = this.match(MySQLParser.DAY_SYMBOL);
            this.state = 5949;
            this.exprWithParentheses();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5950;
            localctx.name = this.match(MySQLParser.HOUR_SYMBOL);
            this.state = 5951;
            this.exprWithParentheses();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 5952;
            localctx.name = this.match(MySQLParser.INSERT_SYMBOL);
            this.state = 5953;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5954;
            this.expr(0);
            this.state = 5955;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5956;
            this.expr(0);
            this.state = 5957;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5958;
            this.expr(0);
            this.state = 5959;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5960;
            this.expr(0);
            this.state = 5961;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 5963;
            localctx.name = this.match(MySQLParser.INTERVAL_SYMBOL);
            this.state = 5964;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5965;
            this.expr(0);
            this.state = 5968; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5966;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5967;
                this.expr(0);
                this.state = 5970; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.COMMA_SYMBOL);
            this.state = 5972;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 5974;
            localctx.name = this.match(MySQLParser.LEFT_SYMBOL);
            this.state = 5975;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5976;
            this.expr(0);
            this.state = 5977;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5978;
            this.expr(0);
            this.state = 5979;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 5981;
            localctx.name = this.match(MySQLParser.MINUTE_SYMBOL);
            this.state = 5982;
            this.exprWithParentheses();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 5983;
            localctx.name = this.match(MySQLParser.MONTH_SYMBOL);
            this.state = 5984;
            this.exprWithParentheses();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 5985;
            localctx.name = this.match(MySQLParser.RIGHT_SYMBOL);
            this.state = 5986;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5987;
            this.expr(0);
            this.state = 5988;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 5989;
            this.expr(0);
            this.state = 5990;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 5992;
            localctx.name = this.match(MySQLParser.SECOND_SYMBOL);
            this.state = 5993;
            this.exprWithParentheses();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 5994;
            localctx.name = this.match(MySQLParser.TIME_SYMBOL);
            this.state = 5995;
            this.exprWithParentheses();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 5996;
            localctx.name = this.match(MySQLParser.TIMESTAMP_SYMBOL);
            this.state = 5997;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 5998;
            this.expr(0);
            this.state = 6001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 5999;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6000;
                this.expr(0);
            }

            this.state = 6003;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 6005;
            this.trimFunction();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 6006;
            localctx.name = this.match(MySQLParser.USER_SYMBOL);
            this.state = 6007;
            this.parentheses();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 6008;
            localctx.name = this.match(MySQLParser.VALUES_SYMBOL);
            this.state = 6009;
            this.exprWithParentheses();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 6010;
            localctx.name = this.match(MySQLParser.YEAR_SYMBOL);
            this.state = 6011;
            this.exprWithParentheses();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 6012;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ADDDATE_SYMBOL || _la===MySQLParser.SUBDATE_SYMBOL)) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6013;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6014;
            this.expr(0);
            this.state = 6015;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6021;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,763,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6016;
                this.expr(0);
                break;

            case 2:
                this.state = 6017;
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.state = 6018;
                this.expr(0);
                this.state = 6019;
                this.interval();
                break;

            }
            this.state = 6023;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 6025;
            localctx.name = this.match(MySQLParser.CURDATE_SYMBOL);
            this.state = 6027;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,764,this._ctx);
            if(la_===1) {
                this.state = 6026;
                this.parentheses();

            }
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 6029;
            localctx.name = this.match(MySQLParser.CURTIME_SYMBOL);
            this.state = 6031;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,765,this._ctx);
            if(la_===1) {
                this.state = 6030;
                this.timeFunctionParameters();

            }
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 6033;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DATE_ADD_SYMBOL || _la===MySQLParser.DATE_SUB_SYMBOL)) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6034;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6035;
            this.expr(0);
            this.state = 6036;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6037;
            this.match(MySQLParser.INTERVAL_SYMBOL);
            this.state = 6038;
            this.expr(0);
            this.state = 6039;
            this.interval();
            this.state = 6040;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 6042;
            localctx.name = this.match(MySQLParser.EXTRACT_SYMBOL);
            this.state = 6043;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6044;
            this.interval();
            this.state = 6045;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 6046;
            this.expr(0);
            this.state = 6047;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 6049;
            localctx.name = this.match(MySQLParser.GET_FORMAT_SYMBOL);
            this.state = 6050;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6051;
            this.dateTimeTtype();
            this.state = 6052;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6053;
            this.expr(0);
            this.state = 6054;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 6056;
            localctx.name = this.match(MySQLParser.NOW_SYMBOL);
            this.state = 6058;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,766,this._ctx);
            if(la_===1) {
                this.state = 6057;
                this.timeFunctionParameters();

            }
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 6060;
            localctx.name = this.match(MySQLParser.POSITION_SYMBOL);
            this.state = 6061;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6062;
            this.bitExpr(0);
            this.state = 6063;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 6064;
            this.expr(0);
            this.state = 6065;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 6067;
            this.substringFunction();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 6068;
            localctx.name = this.match(MySQLParser.SYSDATE_SYMBOL);
            this.state = 6070;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,767,this._ctx);
            if(la_===1) {
                this.state = 6069;
                this.timeFunctionParameters();

            }
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 6072;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.TIMESTAMP_ADD_SYMBOL || _la===MySQLParser.TIMESTAMP_DIFF_SYMBOL)) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6073;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6074;
            this.intervalTimeStamp();
            this.state = 6075;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6076;
            this.expr(0);
            this.state = 6077;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6078;
            this.expr(0);
            this.state = 6079;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 6081;
            localctx.name = this.match(MySQLParser.UTC_DATE_SYMBOL);
            this.state = 6083;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,768,this._ctx);
            if(la_===1) {
                this.state = 6082;
                this.parentheses();

            }
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 6085;
            localctx.name = this.match(MySQLParser.UTC_TIME_SYMBOL);
            this.state = 6087;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,769,this._ctx);
            if(la_===1) {
                this.state = 6086;
                this.timeFunctionParameters();

            }
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 6089;
            localctx.name = this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
            this.state = 6091;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,770,this._ctx);
            if(la_===1) {
                this.state = 6090;
                this.timeFunctionParameters();

            }
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 6093;
            localctx.name = this.match(MySQLParser.ASCII_SYMBOL);
            this.state = 6094;
            this.exprWithParentheses();
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 6095;
            localctx.name = this.match(MySQLParser.CHARSET_SYMBOL);
            this.state = 6096;
            this.exprWithParentheses();
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 6097;
            localctx.name = this.match(MySQLParser.COALESCE_SYMBOL);
            this.state = 6098;
            this.exprListWithParentheses();
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 6099;
            localctx.name = this.match(MySQLParser.COLLATION_SYMBOL);
            this.state = 6100;
            this.exprWithParentheses();
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 6101;
            localctx.name = this.match(MySQLParser.DATABASE_SYMBOL);
            this.state = 6102;
            this.parentheses();
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 6103;
            localctx.name = this.match(MySQLParser.IF_SYMBOL);
            this.state = 6104;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6105;
            this.expr(0);
            this.state = 6106;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6107;
            this.expr(0);
            this.state = 6108;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6109;
            this.expr(0);
            this.state = 6110;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 6112;
            localctx.name = this.match(MySQLParser.FORMAT_SYMBOL);
            this.state = 6113;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6114;
            this.expr(0);
            this.state = 6115;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6116;
            this.expr(0);
            this.state = 6119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6117;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6118;
                this.expr(0);
            }

            this.state = 6121;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 6123;
            localctx.name = this.match(MySQLParser.MICROSECOND_SYMBOL);
            this.state = 6124;
            this.exprWithParentheses();
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 6125;
            localctx.name = this.match(MySQLParser.MOD_SYMBOL);
            this.state = 6126;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6127;
            this.expr(0);
            this.state = 6128;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6129;
            this.expr(0);
            this.state = 6130;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 6132;
            if (!( serverVersion < 50607)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50607");
            }
            this.state = 6133;
            localctx.name = this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
            this.state = 6134;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6135;
            this.textLiteral();
            this.state = 6136;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 43:
            this.enterOuterAlt(localctx, 43);
            this.state = 6138;
            if (!( serverVersion < 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
            }
            this.state = 6139;
            localctx.name = this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 6140;
            this.exprWithParentheses();
            break;

        case 44:
            this.enterOuterAlt(localctx, 44);
            this.state = 6141;
            localctx.name = this.match(MySQLParser.QUARTER_SYMBOL);
            this.state = 6142;
            this.exprWithParentheses();
            break;

        case 45:
            this.enterOuterAlt(localctx, 45);
            this.state = 6143;
            localctx.name = this.match(MySQLParser.REPEAT_SYMBOL);
            this.state = 6144;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6145;
            this.expr(0);
            this.state = 6146;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6147;
            this.expr(0);
            this.state = 6148;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 46:
            this.enterOuterAlt(localctx, 46);
            this.state = 6150;
            localctx.name = this.match(MySQLParser.REPLACE_SYMBOL);
            this.state = 6151;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6152;
            this.expr(0);
            this.state = 6153;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6154;
            this.expr(0);
            this.state = 6155;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6156;
            this.expr(0);
            this.state = 6157;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 47:
            this.enterOuterAlt(localctx, 47);
            this.state = 6159;
            localctx.name = this.match(MySQLParser.REVERSE_SYMBOL);
            this.state = 6160;
            this.exprWithParentheses();
            break;

        case 48:
            this.enterOuterAlt(localctx, 48);
            this.state = 6161;
            localctx.name = this.match(MySQLParser.ROW_COUNT_SYMBOL);
            this.state = 6162;
            this.parentheses();
            break;

        case 49:
            this.enterOuterAlt(localctx, 49);
            this.state = 6163;
            localctx.name = this.match(MySQLParser.TRUNCATE_SYMBOL);
            this.state = 6164;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6165;
            this.expr(0);
            this.state = 6166;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6167;
            this.expr(0);
            this.state = 6168;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 50:
            this.enterOuterAlt(localctx, 50);
            this.state = 6170;
            localctx.name = this.match(MySQLParser.WEEK_SYMBOL);
            this.state = 6171;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6172;
            this.expr(0);
            this.state = 6175;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6173;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6174;
                this.expr(0);
            }

            this.state = 6177;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 51:
            this.enterOuterAlt(localctx, 51);
            this.state = 6179;
            localctx.name = this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
            this.state = 6180;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6181;
            this.expr(0);
            this.state = 6201;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,775,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6185;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,773,this._ctx);
                if(la_===1) {
                    this.state = 6182;
                    this.match(MySQLParser.AS_SYMBOL);
                    this.state = 6183;
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.state = 6184;
                    this.wsNumCodepoints();

                }
                this.state = 6189;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,774,this._ctx);
                if(la_===1) {
                    this.state = 6187;
                    if (!( serverVersion < 80000)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
                    }
                    this.state = 6188;
                    this.weightStringLevels();

                }
                break;

            case 2:
                this.state = 6191;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 6192;
                this.match(MySQLParser.BINARY_SYMBOL);
                this.state = 6193;
                this.wsNumCodepoints();
                break;

            case 3:
                this.state = 6194;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6195;
                this.ulong_number();
                this.state = 6196;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6197;
                this.ulong_number();
                this.state = 6198;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6199;
                this.ulong_number();
                break;

            }
            this.state = 6203;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 52:
            this.enterOuterAlt(localctx, 52);
            this.state = 6205;
            this.geometryFunction();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GeometryFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_geometryFunction;
    this.name = null; // Token
    return this;
}

GeometryFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeometryFunctionContext.prototype.constructor = GeometryFunctionContext;

GeometryFunctionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

GeometryFunctionContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

GeometryFunctionContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

GeometryFunctionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

GeometryFunctionContext.prototype.CONTAINS_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
};

GeometryFunctionContext.prototype.GEOMETRYCOLLECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
};

GeometryFunctionContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

GeometryFunctionContext.prototype.exprListWithParentheses = function() {
    return this.getTypedRuleContext(ExprListWithParenthesesContext,0);
};

GeometryFunctionContext.prototype.LINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
};

GeometryFunctionContext.prototype.MULTILINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
};

GeometryFunctionContext.prototype.MULTIPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
};

GeometryFunctionContext.prototype.MULTIPOLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
};

GeometryFunctionContext.prototype.POINT_SYMBOL = function() {
    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
};

GeometryFunctionContext.prototype.POLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
};

GeometryFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGeometryFunction(this);
	}
};

GeometryFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGeometryFunction(this);
	}
};

GeometryFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGeometryFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GeometryFunctionContext = GeometryFunctionContext;

MySQLParser.prototype.geometryFunction = function() {

    var localctx = new GeometryFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, MySQLParser.RULE_geometryFunction);
    try {
        this.state = 6239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,778,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6208;
            if (!( serverVersion < 50706)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50706");
            }
            this.state = 6209;
            localctx.name = this.match(MySQLParser.CONTAINS_SYMBOL);
            this.state = 6210;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6211;
            this.expr(0);
            this.state = 6212;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6213;
            this.expr(0);
            this.state = 6214;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6216;
            localctx.name = this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
            this.state = 6217;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6219;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,777,this._ctx);
            if(la_===1) {
                this.state = 6218;
                this.exprList();

            }
            this.state = 6221;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6222;
            localctx.name = this.match(MySQLParser.LINESTRING_SYMBOL);
            this.state = 6223;
            this.exprListWithParentheses();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6224;
            localctx.name = this.match(MySQLParser.MULTILINESTRING_SYMBOL);
            this.state = 6225;
            this.exprListWithParentheses();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6226;
            localctx.name = this.match(MySQLParser.MULTIPOINT_SYMBOL);
            this.state = 6227;
            this.exprListWithParentheses();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 6228;
            localctx.name = this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
            this.state = 6229;
            this.exprListWithParentheses();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 6230;
            localctx.name = this.match(MySQLParser.POINT_SYMBOL);
            this.state = 6231;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6232;
            this.expr(0);
            this.state = 6233;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6234;
            this.expr(0);
            this.state = 6235;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 6237;
            localctx.name = this.match(MySQLParser.POLYGON_SYMBOL);
            this.state = 6238;
            this.exprListWithParentheses();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeFunctionParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_timeFunctionParameters;
    return this;
}

TimeFunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeFunctionParametersContext.prototype.constructor = TimeFunctionParametersContext;

TimeFunctionParametersContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

TimeFunctionParametersContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

TimeFunctionParametersContext.prototype.fractionalPrecision = function() {
    return this.getTypedRuleContext(FractionalPrecisionContext,0);
};

TimeFunctionParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTimeFunctionParameters(this);
	}
};

TimeFunctionParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTimeFunctionParameters(this);
	}
};

TimeFunctionParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTimeFunctionParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TimeFunctionParametersContext = TimeFunctionParametersContext;

MySQLParser.prototype.timeFunctionParameters = function() {

    var localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, MySQLParser.RULE_timeFunctionParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6241;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 6243;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,779,this._ctx);
        if(la_===1) {
            this.state = 6242;
            this.fractionalPrecision();

        }
        this.state = 6245;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FractionalPrecisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fractionalPrecision;
    return this;
}

FractionalPrecisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FractionalPrecisionContext.prototype.constructor = FractionalPrecisionContext;

FractionalPrecisionContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

FractionalPrecisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFractionalPrecision(this);
	}
};

FractionalPrecisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFractionalPrecision(this);
	}
};

FractionalPrecisionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFractionalPrecision(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FractionalPrecisionContext = FractionalPrecisionContext;

MySQLParser.prototype.fractionalPrecision = function() {

    var localctx = new FractionalPrecisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, MySQLParser.RULE_fractionalPrecision);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6247;
        if (!( serverVersion >= 50604)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50604");
        }
        this.state = 6248;
        this.match(MySQLParser.INT_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WeightStringLevelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_weightStringLevels;
    return this;
}

WeightStringLevelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WeightStringLevelsContext.prototype.constructor = WeightStringLevelsContext;

WeightStringLevelsContext.prototype.LEVEL_SYMBOL = function() {
    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
};

WeightStringLevelsContext.prototype.real_ulong_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Real_ulong_numberContext);
    } else {
        return this.getTypedRuleContext(Real_ulong_numberContext,i);
    }
};

WeightStringLevelsContext.prototype.MINUS_OPERATOR = function() {
    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
};

WeightStringLevelsContext.prototype.weightStringLevelListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WeightStringLevelListItemContext);
    } else {
        return this.getTypedRuleContext(WeightStringLevelListItemContext,i);
    }
};

WeightStringLevelsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


WeightStringLevelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWeightStringLevels(this);
	}
};

WeightStringLevelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWeightStringLevels(this);
	}
};

WeightStringLevelsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWeightStringLevels(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WeightStringLevelsContext = WeightStringLevelsContext;

MySQLParser.prototype.weightStringLevels = function() {

    var localctx = new WeightStringLevelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, MySQLParser.RULE_weightStringLevels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6250;
        this.match(MySQLParser.LEVEL_SYMBOL);
        this.state = 6263;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6251;
            this.real_ulong_number();
            this.state = 6252;
            this.match(MySQLParser.MINUS_OPERATOR);
            this.state = 6253;
            this.real_ulong_number();
            break;

        case 2:
            this.state = 6255;
            this.weightStringLevelListItem();
            this.state = 6260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6256;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6257;
                this.weightStringLevelListItem();
                this.state = 6262;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WeightStringLevelListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_weightStringLevelListItem;
    return this;
}

WeightStringLevelListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WeightStringLevelListItemContext.prototype.constructor = WeightStringLevelListItemContext;

WeightStringLevelListItemContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

WeightStringLevelListItemContext.prototype.REVERSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
};

WeightStringLevelListItemContext.prototype.ASC_SYMBOL = function() {
    return this.getToken(MySQLParser.ASC_SYMBOL, 0);
};

WeightStringLevelListItemContext.prototype.DESC_SYMBOL = function() {
    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
};

WeightStringLevelListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWeightStringLevelListItem(this);
	}
};

WeightStringLevelListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWeightStringLevelListItem(this);
	}
};

WeightStringLevelListItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWeightStringLevelListItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WeightStringLevelListItemContext = WeightStringLevelListItemContext;

MySQLParser.prototype.weightStringLevelListItem = function() {

    var localctx = new WeightStringLevelListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 716, MySQLParser.RULE_weightStringLevelListItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6265;
        this.real_ulong_number();
        this.state = 6271;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case MySQLParser.ASC_SYMBOL:
        case MySQLParser.DESC_SYMBOL:
        	this.state = 6266;
        	_la = this._input.LA(1);
        	if(!(_la===MySQLParser.ASC_SYMBOL || _la===MySQLParser.DESC_SYMBOL)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	this.state = 6268;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===MySQLParser.REVERSE_SYMBOL) {
        	    this.state = 6267;
        	    this.match(MySQLParser.REVERSE_SYMBOL);
        	}

        	break;
        case MySQLParser.REVERSE_SYMBOL:
        	this.state = 6270;
        	this.match(MySQLParser.REVERSE_SYMBOL);
        	break;
        case MySQLParser.COMMA_SYMBOL:
        case MySQLParser.CLOSE_PAR_SYMBOL:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DateTimeTtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dateTimeTtype;
    return this;
}

DateTimeTtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateTimeTtypeContext.prototype.constructor = DateTimeTtypeContext;

DateTimeTtypeContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

DateTimeTtypeContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

DateTimeTtypeContext.prototype.DATETIME_SYMBOL = function() {
    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
};

DateTimeTtypeContext.prototype.TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
};

DateTimeTtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDateTimeTtype(this);
	}
};

DateTimeTtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDateTimeTtype(this);
	}
};

DateTimeTtypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDateTimeTtype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DateTimeTtypeContext = DateTimeTtypeContext;

MySQLParser.prototype.dateTimeTtype = function() {

    var localctx = new DateTimeTtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, MySQLParser.RULE_dateTimeTtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6273;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DATETIME_SYMBOL || _la===MySQLParser.DATE_SYMBOL || _la===MySQLParser.TIMESTAMP_SYMBOL || _la===MySQLParser.TIME_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TrimFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_trimFunction;
    return this;
}

TrimFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrimFunctionContext.prototype.constructor = TrimFunctionContext;

TrimFunctionContext.prototype.TRIM_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIM_SYMBOL, 0);
};

TrimFunctionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

TrimFunctionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

TrimFunctionContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

TrimFunctionContext.prototype.LEADING_SYMBOL = function() {
    return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
};

TrimFunctionContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

TrimFunctionContext.prototype.TRAILING_SYMBOL = function() {
    return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
};

TrimFunctionContext.prototype.BOTH_SYMBOL = function() {
    return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
};

TrimFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTrimFunction(this);
	}
};

TrimFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTrimFunction(this);
	}
};

TrimFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTrimFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TrimFunctionContext = TrimFunctionContext;

MySQLParser.prototype.trimFunction = function() {

    var localctx = new TrimFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, MySQLParser.RULE_trimFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6275;
        this.match(MySQLParser.TRIM_SYMBOL);
        this.state = 6276;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 6300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,788,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6277;
            this.expr(0);
            this.state = 6280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM_SYMBOL) {
                this.state = 6278;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 6279;
                this.expr(0);
            }

            break;

        case 2:
            this.state = 6282;
            this.match(MySQLParser.LEADING_SYMBOL);
            this.state = 6284;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,785,this._ctx);
            if(la_===1) {
                this.state = 6283;
                this.expr(0);

            }
            this.state = 6286;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 6287;
            this.expr(0);
            break;

        case 3:
            this.state = 6288;
            this.match(MySQLParser.TRAILING_SYMBOL);
            this.state = 6290;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,786,this._ctx);
            if(la_===1) {
                this.state = 6289;
                this.expr(0);

            }
            this.state = 6292;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 6293;
            this.expr(0);
            break;

        case 4:
            this.state = 6294;
            this.match(MySQLParser.BOTH_SYMBOL);
            this.state = 6296;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,787,this._ctx);
            if(la_===1) {
                this.state = 6295;
                this.expr(0);

            }
            this.state = 6298;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 6299;
            this.expr(0);
            break;

        }
        this.state = 6302;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubstringFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_substringFunction;
    return this;
}

SubstringFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubstringFunctionContext.prototype.constructor = SubstringFunctionContext;

SubstringFunctionContext.prototype.SUBSTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0);
};

SubstringFunctionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SubstringFunctionContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

SubstringFunctionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SubstringFunctionContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


SubstringFunctionContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

SubstringFunctionContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

SubstringFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubstringFunction(this);
	}
};

SubstringFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubstringFunction(this);
	}
};

SubstringFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubstringFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SubstringFunctionContext = SubstringFunctionContext;

MySQLParser.prototype.substringFunction = function() {

    var localctx = new SubstringFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, MySQLParser.RULE_substringFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6304;
        this.match(MySQLParser.SUBSTRING_SYMBOL);
        this.state = 6305;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 6306;
        this.expr(0);
        this.state = 6319;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.COMMA_SYMBOL:
            this.state = 6307;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6308;
            this.expr(0);
            this.state = 6311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6309;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6310;
                this.expr(0);
            }

            break;
        case MySQLParser.FROM_SYMBOL:
            this.state = 6313;
            this.match(MySQLParser.FROM_SYMBOL);
            this.state = 6314;
            this.expr(0);
            this.state = 6317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR_SYMBOL) {
                this.state = 6315;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6316;
                this.expr(0);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6321;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.pureIdentifier = function() {
    return this.getTypedRuleContext(PureIdentifierContext,0);
};

FunctionCallContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

FunctionCallContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

FunctionCallContext.prototype.udfExprList = function() {
    return this.getTypedRuleContext(UdfExprListContext,0);
};

FunctionCallContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

FunctionCallContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionCall(this);
	}
};

FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionCallContext = FunctionCallContext;

MySQLParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 724, MySQLParser.RULE_functionCall);
    try {
        this.state = 6337;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,794,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6323;
            this.pureIdentifier();
            this.state = 6324;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6326;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,792,this._ctx);
            if(la_===1) {
                this.state = 6325;
                this.udfExprList();

            }
            this.state = 6328;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6330;
            this.qualifiedIdentifier();
            this.state = 6331;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 6333;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,793,this._ctx);
            if(la_===1) {
                this.state = 6332;
                this.exprList();

            }
            this.state = 6335;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UdfExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_udfExprList;
    return this;
}

UdfExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UdfExprListContext.prototype.constructor = UdfExprListContext;

UdfExprListContext.prototype.udfExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UdfExprContext);
    } else {
        return this.getTypedRuleContext(UdfExprContext,i);
    }
};

UdfExprListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


UdfExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUdfExprList(this);
	}
};

UdfExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUdfExprList(this);
	}
};

UdfExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUdfExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UdfExprListContext = UdfExprListContext;

MySQLParser.prototype.udfExprList = function() {

    var localctx = new UdfExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, MySQLParser.RULE_udfExprList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6339;
        this.udfExpr();
        this.state = 6344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 6340;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6341;
            this.udfExpr();
            this.state = 6346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UdfExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_udfExpr;
    return this;
}

UdfExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UdfExprContext.prototype.constructor = UdfExprContext;

UdfExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UdfExprContext.prototype.selectAlias = function() {
    return this.getTypedRuleContext(SelectAliasContext,0);
};

UdfExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUdfExpr(this);
	}
};

UdfExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUdfExpr(this);
	}
};

UdfExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUdfExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UdfExprContext = UdfExprContext;

MySQLParser.prototype.udfExpr = function() {

    var localctx = new UdfExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, MySQLParser.RULE_udfExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6347;
        this.expr(0);
        this.state = 6349;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,796,this._ctx);
        if(la_===1) {
            this.state = 6348;
            this.selectAlias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.userVariable = function() {
    return this.getTypedRuleContext(UserVariableContext,0);
};

VariableContext.prototype.ASSIGN_OPERATOR = function() {
    return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
};

VariableContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

VariableContext.prototype.systemVariable = function() {
    return this.getTypedRuleContext(SystemVariableContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVariable(this);
	}
};

VariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VariableContext = VariableContext;

MySQLParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, MySQLParser.RULE_variable);
    try {
        this.state = 6357;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.AT_SIGN_SYMBOL:
        case MySQLParser.AT_TEXT_SUFFIX:
            this.enterOuterAlt(localctx, 1);
            this.state = 6351;
            this.userVariable();
            this.state = 6354;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,797,this._ctx);
            if(la_===1) {
                this.state = 6352;
                this.match(MySQLParser.ASSIGN_OPERATOR);
                this.state = 6353;
                this.expr(0);

            }
            break;
        case MySQLParser.AT_AT_SIGN_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6356;
            this.systemVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userVariable;
    return this;
}

UserVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserVariableContext.prototype.constructor = UserVariableContext;

UserVariableContext.prototype.AT_SIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
};

UserVariableContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

UserVariableContext.prototype.AT_TEXT_SUFFIX = function() {
    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
};

UserVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserVariable(this);
	}
};

UserVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserVariable(this);
	}
};

UserVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserVariableContext = UserVariableContext;

MySQLParser.prototype.userVariable = function() {

    var localctx = new UserVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, MySQLParser.RULE_userVariable);
    try {
        this.state = 6362;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.AT_SIGN_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6359;
            this.match(MySQLParser.AT_SIGN_SYMBOL);
            this.state = 6360;
            this.textOrIdentifier();
            break;
        case MySQLParser.AT_TEXT_SUFFIX:
            this.enterOuterAlt(localctx, 2);
            this.state = 6361;
            this.match(MySQLParser.AT_TEXT_SUFFIX);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SystemVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_systemVariable;
    return this;
}

SystemVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SystemVariableContext.prototype.constructor = SystemVariableContext;

SystemVariableContext.prototype.AT_AT_SIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
};

SystemVariableContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

SystemVariableContext.prototype.varIdentType = function() {
    return this.getTypedRuleContext(VarIdentTypeContext,0);
};

SystemVariableContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

SystemVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSystemVariable(this);
	}
};

SystemVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSystemVariable(this);
	}
};

SystemVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSystemVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SystemVariableContext = SystemVariableContext;

MySQLParser.prototype.systemVariable = function() {

    var localctx = new SystemVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, MySQLParser.RULE_systemVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6364;
        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
        this.state = 6366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,800,this._ctx);
        if(la_===1) {
            this.state = 6365;
            this.varIdentType();

        }
        this.state = 6368;
        this.textOrIdentifier();
        this.state = 6370;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,801,this._ctx);
        if(la_===1) {
            this.state = 6369;
            this.dotIdentifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InternalVariableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_internalVariableName;
    return this;
}

InternalVariableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InternalVariableNameContext.prototype.constructor = InternalVariableNameContext;

InternalVariableNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

InternalVariableNameContext.prototype.lValueIdentifier = function() {
    return this.getTypedRuleContext(LValueIdentifierContext,0);
};

InternalVariableNameContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

InternalVariableNameContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

InternalVariableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInternalVariableName(this);
	}
};

InternalVariableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInternalVariableName(this);
	}
};

InternalVariableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInternalVariableName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InternalVariableNameContext = InternalVariableNameContext;

MySQLParser.prototype.internalVariableName = function() {

    var localctx = new InternalVariableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 736, MySQLParser.RULE_internalVariableName);
    var _la = 0; // Token type
    try {
        this.state = 6386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,805,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6382;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,804,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6372;
                if (!( serverVersion < 80017)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
                }
                this.state = 6373;
                this.identifier();
                this.state = 6375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.DOT_SYMBOL) {
                    this.state = 6374;
                    this.dotIdentifier();
                }

                break;

            case 2:
                this.state = 6377;
                if (!( serverVersion >= 80017)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
                }
                this.state = 6378;
                this.lValueIdentifier();
                this.state = 6380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.DOT_SYMBOL) {
                    this.state = 6379;
                    this.dotIdentifier();
                }

                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6384;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 6385;
            this.dotIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_whenExpression;
    return this;
}

WhenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenExpressionContext.prototype.constructor = WhenExpressionContext;

WhenExpressionContext.prototype.WHEN_SYMBOL = function() {
    return this.getToken(MySQLParser.WHEN_SYMBOL, 0);
};

WhenExpressionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WhenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWhenExpression(this);
	}
};

WhenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWhenExpression(this);
	}
};

WhenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWhenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WhenExpressionContext = WhenExpressionContext;

MySQLParser.prototype.whenExpression = function() {

    var localctx = new WhenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, MySQLParser.RULE_whenExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6388;
        this.match(MySQLParser.WHEN_SYMBOL);
        this.state = 6389;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThenExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_thenExpression;
    return this;
}

ThenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThenExpressionContext.prototype.constructor = ThenExpressionContext;

ThenExpressionContext.prototype.THEN_SYMBOL = function() {
    return this.getToken(MySQLParser.THEN_SYMBOL, 0);
};

ThenExpressionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ThenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterThenExpression(this);
	}
};

ThenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitThenExpression(this);
	}
};

ThenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitThenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ThenExpressionContext = ThenExpressionContext;

MySQLParser.prototype.thenExpression = function() {

    var localctx = new ThenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 740, MySQLParser.RULE_thenExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6391;
        this.match(MySQLParser.THEN_SYMBOL);
        this.state = 6392;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElseExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_elseExpression;
    return this;
}

ElseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseExpressionContext.prototype.constructor = ElseExpressionContext;

ElseExpressionContext.prototype.ELSE_SYMBOL = function() {
    return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
};

ElseExpressionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ElseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterElseExpression(this);
	}
};

ElseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitElseExpression(this);
	}
};

ElseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitElseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ElseExpressionContext = ElseExpressionContext;

MySQLParser.prototype.elseExpression = function() {

    var localctx = new ElseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 742, MySQLParser.RULE_elseExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6394;
        this.match(MySQLParser.ELSE_SYMBOL);
        this.state = 6395;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CastTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_castType;
    return this;
}

CastTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastTypeContext.prototype.constructor = CastTypeContext;

CastTypeContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

CastTypeContext.prototype.fieldLength = function() {
    return this.getTypedRuleContext(FieldLengthContext,0);
};

CastTypeContext.prototype.CHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
};

CastTypeContext.prototype.charsetWithOptBinary = function() {
    return this.getTypedRuleContext(CharsetWithOptBinaryContext,0);
};

CastTypeContext.prototype.nchar = function() {
    return this.getTypedRuleContext(NcharContext,0);
};

CastTypeContext.prototype.SIGNED_SYMBOL = function() {
    return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
};

CastTypeContext.prototype.INT_SYMBOL = function() {
    return this.getToken(MySQLParser.INT_SYMBOL, 0);
};

CastTypeContext.prototype.UNSIGNED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
};

CastTypeContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

CastTypeContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

CastTypeContext.prototype.typeDatetimePrecision = function() {
    return this.getTypedRuleContext(TypeDatetimePrecisionContext,0);
};

CastTypeContext.prototype.DATETIME_SYMBOL = function() {
    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
};

CastTypeContext.prototype.DECIMAL_SYMBOL = function() {
    return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
};

CastTypeContext.prototype.floatOptions = function() {
    return this.getTypedRuleContext(FloatOptionsContext,0);
};

CastTypeContext.prototype.JSON_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
};

CastTypeContext.prototype.realType = function() {
    return this.getTypedRuleContext(RealTypeContext,0);
};

CastTypeContext.prototype.FLOAT_SYMBOL = function() {
    return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
};

CastTypeContext.prototype.standardFloatOptions = function() {
    return this.getTypedRuleContext(StandardFloatOptionsContext,0);
};

CastTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCastType(this);
	}
};

CastTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCastType(this);
	}
};

CastTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCastType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CastTypeContext = CastTypeContext;

MySQLParser.prototype.castType = function() {

    var localctx = new CastTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 744, MySQLParser.RULE_castType);
    try {
        this.state = 6442;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6397;
            this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 6399;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,806,this._ctx);
            if(la_===1) {
                this.state = 6398;
                this.fieldLength();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6401;
            this.match(MySQLParser.CHAR_SYMBOL);
            this.state = 6403;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,807,this._ctx);
            if(la_===1) {
                this.state = 6402;
                this.fieldLength();

            }
            this.state = 6406;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,808,this._ctx);
            if(la_===1) {
                this.state = 6405;
                this.charsetWithOptBinary();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6408;
            this.nchar();
            this.state = 6410;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,809,this._ctx);
            if(la_===1) {
                this.state = 6409;
                this.fieldLength();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6412;
            this.match(MySQLParser.SIGNED_SYMBOL);
            this.state = 6414;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,810,this._ctx);
            if(la_===1) {
                this.state = 6413;
                this.match(MySQLParser.INT_SYMBOL);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6416;
            this.match(MySQLParser.UNSIGNED_SYMBOL);
            this.state = 6418;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,811,this._ctx);
            if(la_===1) {
                this.state = 6417;
                this.match(MySQLParser.INT_SYMBOL);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 6420;
            this.match(MySQLParser.DATE_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 6421;
            this.match(MySQLParser.TIME_SYMBOL);
            this.state = 6423;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,812,this._ctx);
            if(la_===1) {
                this.state = 6422;
                this.typeDatetimePrecision();

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 6425;
            this.match(MySQLParser.DATETIME_SYMBOL);
            this.state = 6427;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
            if(la_===1) {
                this.state = 6426;
                this.typeDatetimePrecision();

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 6429;
            this.match(MySQLParser.DECIMAL_SYMBOL);
            this.state = 6431;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,814,this._ctx);
            if(la_===1) {
                this.state = 6430;
                this.floatOptions();

            }
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 6433;
            if (!( serverVersion >= 50708)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
            }
            this.state = 6434;
            this.match(MySQLParser.JSON_SYMBOL);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 6435;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 6436;
            this.realType();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 6437;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 6438;
            this.match(MySQLParser.FLOAT_SYMBOL);
            this.state = 6440;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,815,this._ctx);
            if(la_===1) {
                this.state = 6439;
                this.standardFloatOptions();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_exprList;
    return this;
}

ExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprListContext.prototype.constructor = ExprListContext;

ExprListContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprList(this);
	}
};

ExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprList(this);
	}
};

ExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExprListContext = ExprListContext;

MySQLParser.prototype.exprList = function() {

    var localctx = new ExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 746, MySQLParser.RULE_exprList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6444;
        this.expr(0);
        this.state = 6449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 6445;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6446;
            this.expr(0);
            this.state = 6451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_charset;
    return this;
}

CharsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetContext.prototype.constructor = CharsetContext;

CharsetContext.prototype.CHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
};

CharsetContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

CharsetContext.prototype.CHARSET_SYMBOL = function() {
    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
};

CharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharset(this);
	}
};

CharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharset(this);
	}
};

CharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CharsetContext = CharsetContext;

MySQLParser.prototype.charset = function() {

    var localctx = new CharsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 748, MySQLParser.RULE_charset);
    try {
        this.state = 6455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CHAR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6452;
            this.match(MySQLParser.CHAR_SYMBOL);
            this.state = 6453;
            this.match(MySQLParser.SET_SYMBOL);
            break;
        case MySQLParser.CHARSET_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6454;
            this.match(MySQLParser.CHARSET_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NotRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_notRule;
    return this;
}

NotRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotRuleContext.prototype.constructor = NotRuleContext;

NotRuleContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

NotRuleContext.prototype.NOT2_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
};

NotRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNotRule(this);
	}
};

NotRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNotRule(this);
	}
};

NotRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNotRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NotRuleContext = NotRuleContext;

MySQLParser.prototype.notRule = function() {

    var localctx = new NotRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 750, MySQLParser.RULE_notRule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6457;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NOT2_SYMBOL || _la===MySQLParser.NOT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Not2RuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_not2Rule;
    return this;
}

Not2RuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not2RuleContext.prototype.constructor = Not2RuleContext;

Not2RuleContext.prototype.LOGICAL_NOT_OPERATOR = function() {
    return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
};

Not2RuleContext.prototype.NOT2_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
};

Not2RuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNot2Rule(this);
	}
};

Not2RuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNot2Rule(this);
	}
};

Not2RuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNot2Rule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.Not2RuleContext = Not2RuleContext;

MySQLParser.prototype.not2Rule = function() {

    var localctx = new Not2RuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 752, MySQLParser.RULE_not2Rule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6459;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NOT2_SYMBOL || _la===MySQLParser.LOGICAL_NOT_OPERATOR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.intervalTimeStamp = function() {
    return this.getTypedRuleContext(IntervalTimeStampContext,0);
};

IntervalContext.prototype.SECOND_MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
};

IntervalContext.prototype.MINUTE_MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
};

IntervalContext.prototype.MINUTE_SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
};

IntervalContext.prototype.HOUR_MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
};

IntervalContext.prototype.HOUR_SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
};

IntervalContext.prototype.HOUR_MINUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
};

IntervalContext.prototype.DAY_MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
};

IntervalContext.prototype.DAY_SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
};

IntervalContext.prototype.DAY_MINUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
};

IntervalContext.prototype.DAY_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
};

IntervalContext.prototype.YEAR_MONTH_SYMBOL = function() {
    return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInterval(this);
	}
};

IntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IntervalContext = IntervalContext;

MySQLParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 754, MySQLParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.state = 6463;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.DAY_SYMBOL:
        case MySQLParser.HOUR_SYMBOL:
        case MySQLParser.MICROSECOND_SYMBOL:
        case MySQLParser.MINUTE_SYMBOL:
        case MySQLParser.MONTH_SYMBOL:
        case MySQLParser.QUARTER_SYMBOL:
        case MySQLParser.SECOND_SYMBOL:
        case MySQLParser.WEEK_SYMBOL:
        case MySQLParser.YEAR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6461;
            this.intervalTimeStamp();
            break;
        case MySQLParser.DAY_HOUR_SYMBOL:
        case MySQLParser.DAY_MICROSECOND_SYMBOL:
        case MySQLParser.DAY_MINUTE_SYMBOL:
        case MySQLParser.DAY_SECOND_SYMBOL:
        case MySQLParser.HOUR_MICROSECOND_SYMBOL:
        case MySQLParser.HOUR_MINUTE_SYMBOL:
        case MySQLParser.HOUR_SECOND_SYMBOL:
        case MySQLParser.MINUTE_MICROSECOND_SYMBOL:
        case MySQLParser.MINUTE_SECOND_SYMBOL:
        case MySQLParser.SECOND_MICROSECOND_SYMBOL:
        case MySQLParser.YEAR_MONTH_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6462;
            _la = this._input.LA(1);
            if(!(((((_la - 471)) & ~0x1f) == 0 && ((1 << (_la - 471)) & ((1 << (MySQLParser.DAY_HOUR_SYMBOL - 471)) | (1 << (MySQLParser.DAY_MICROSECOND_SYMBOL - 471)) | (1 << (MySQLParser.DAY_MINUTE_SYMBOL - 471)) | (1 << (MySQLParser.DAY_SECOND_SYMBOL - 471)))) !== 0) || ((((_la - 516)) & ~0x1f) == 0 && ((1 << (_la - 516)) & ((1 << (MySQLParser.HOUR_MICROSECOND_SYMBOL - 516)) | (1 << (MySQLParser.HOUR_MINUTE_SYMBOL - 516)) | (1 << (MySQLParser.HOUR_SECOND_SYMBOL - 516)))) !== 0) || _la===MySQLParser.MINUTE_MICROSECOND_SYMBOL || _la===MySQLParser.MINUTE_SECOND_SYMBOL || _la===MySQLParser.SECOND_MICROSECOND_SYMBOL || _la===MySQLParser.YEAR_MONTH_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalTimeStampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_intervalTimeStamp;
    return this;
}

IntervalTimeStampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalTimeStampContext.prototype.constructor = IntervalTimeStampContext;

IntervalTimeStampContext.prototype.MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.MINUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.DAY_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.WEEK_SYMBOL = function() {
    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.MONTH_SYMBOL = function() {
    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.QUARTER_SYMBOL = function() {
    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.YEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
};

IntervalTimeStampContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntervalTimeStamp(this);
	}
};

IntervalTimeStampContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntervalTimeStamp(this);
	}
};

IntervalTimeStampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntervalTimeStamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IntervalTimeStampContext = IntervalTimeStampContext;

MySQLParser.prototype.intervalTimeStamp = function() {

    var localctx = new IntervalTimeStampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 756, MySQLParser.RULE_intervalTimeStamp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6465;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DAY_SYMBOL || _la===MySQLParser.HOUR_SYMBOL || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (MySQLParser.MICROSECOND_SYMBOL - 217)) | (1 << (MySQLParser.MINUTE_SYMBOL - 217)) | (1 << (MySQLParser.MONTH_SYMBOL - 217)))) !== 0) || _la===MySQLParser.QUARTER_SYMBOL || _la===MySQLParser.SECOND_SYMBOL || _la===MySQLParser.WEEK_SYMBOL || _la===MySQLParser.YEAR_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprListWithParenthesesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_exprListWithParentheses;
    return this;
}

ExprListWithParenthesesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprListWithParenthesesContext.prototype.constructor = ExprListWithParenthesesContext;

ExprListWithParenthesesContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ExprListWithParenthesesContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

ExprListWithParenthesesContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ExprListWithParenthesesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprListWithParentheses(this);
	}
};

ExprListWithParenthesesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprListWithParentheses(this);
	}
};

ExprListWithParenthesesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprListWithParentheses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExprListWithParenthesesContext = ExprListWithParenthesesContext;

MySQLParser.prototype.exprListWithParentheses = function() {

    var localctx = new ExprListWithParenthesesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 758, MySQLParser.RULE_exprListWithParentheses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6467;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 6468;
        this.exprList();
        this.state = 6469;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprWithParenthesesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_exprWithParentheses;
    return this;
}

ExprWithParenthesesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprWithParenthesesContext.prototype.constructor = ExprWithParenthesesContext;

ExprWithParenthesesContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ExprWithParenthesesContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ExprWithParenthesesContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ExprWithParenthesesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExprWithParentheses(this);
	}
};

ExprWithParenthesesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExprWithParentheses(this);
	}
};

ExprWithParenthesesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExprWithParentheses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExprWithParenthesesContext = ExprWithParenthesesContext;

MySQLParser.prototype.exprWithParentheses = function() {

    var localctx = new ExprWithParenthesesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 760, MySQLParser.RULE_exprWithParentheses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6471;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 6472;
        this.expr(0);
        this.state = 6473;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleExprWithParenthesesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleExprWithParentheses;
    return this;
}

SimpleExprWithParenthesesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleExprWithParenthesesContext.prototype.constructor = SimpleExprWithParenthesesContext;

SimpleExprWithParenthesesContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SimpleExprWithParenthesesContext.prototype.simpleExpr = function() {
    return this.getTypedRuleContext(SimpleExprContext,0);
};

SimpleExprWithParenthesesContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SimpleExprWithParenthesesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleExprWithParentheses(this);
	}
};

SimpleExprWithParenthesesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleExprWithParentheses(this);
	}
};

SimpleExprWithParenthesesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleExprWithParentheses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleExprWithParenthesesContext = SimpleExprWithParenthesesContext;

MySQLParser.prototype.simpleExprWithParentheses = function() {

    var localctx = new SimpleExprWithParenthesesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 762, MySQLParser.RULE_simpleExprWithParentheses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6475;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 6476;
        this.simpleExpr(0);
        this.state = 6477;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_orderList;
    return this;
}

OrderListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderListContext.prototype.constructor = OrderListContext;

OrderListContext.prototype.orderExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderExpressionContext);
    } else {
        return this.getTypedRuleContext(OrderExpressionContext,i);
    }
};

OrderListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


OrderListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOrderList(this);
	}
};

OrderListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOrderList(this);
	}
};

OrderListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOrderList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OrderListContext = OrderListContext;

MySQLParser.prototype.orderList = function() {

    var localctx = new OrderListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 764, MySQLParser.RULE_orderList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6479;
        this.orderExpression();
        this.state = 6484;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,820,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 6480;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6481;
                this.orderExpression(); 
            }
            this.state = 6486;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,820,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_orderExpression;
    return this;
}

OrderExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderExpressionContext.prototype.constructor = OrderExpressionContext;

OrderExpressionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

OrderExpressionContext.prototype.direction = function() {
    return this.getTypedRuleContext(DirectionContext,0);
};

OrderExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOrderExpression(this);
	}
};

OrderExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOrderExpression(this);
	}
};

OrderExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOrderExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OrderExpressionContext = OrderExpressionContext;

MySQLParser.prototype.orderExpression = function() {

    var localctx = new OrderExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 766, MySQLParser.RULE_orderExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6487;
        this.expr(0);
        this.state = 6489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
        if(la_===1) {
            this.state = 6488;
            this.direction();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_groupList;
    return this;
}

GroupListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupListContext.prototype.constructor = GroupListContext;

GroupListContext.prototype.groupingExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingExpressionContext);
    } else {
        return this.getTypedRuleContext(GroupingExpressionContext,i);
    }
};

GroupListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


GroupListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGroupList(this);
	}
};

GroupListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGroupList(this);
	}
};

GroupListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGroupList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GroupListContext = GroupListContext;

MySQLParser.prototype.groupList = function() {

    var localctx = new GroupListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 768, MySQLParser.RULE_groupList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6491;
        this.groupingExpression();
        this.state = 6496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 6492;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 6493;
            this.groupingExpression();
            this.state = 6498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_groupingExpression;
    return this;
}

GroupingExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingExpressionContext.prototype.constructor = GroupingExpressionContext;

GroupingExpressionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

GroupingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGroupingExpression(this);
	}
};

GroupingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGroupingExpression(this);
	}
};

GroupingExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGroupingExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GroupingExpressionContext = GroupingExpressionContext;

MySQLParser.prototype.groupingExpression = function() {

    var localctx = new GroupingExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 770, MySQLParser.RULE_groupingExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6499;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChannelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_channel;
    return this;
}

ChannelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChannelContext.prototype.constructor = ChannelContext;

ChannelContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

ChannelContext.prototype.CHANNEL_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
};

ChannelContext.prototype.textStringNoLinebreak = function() {
    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
};

ChannelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChannel(this);
	}
};

ChannelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChannel(this);
	}
};

ChannelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChannel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChannelContext = ChannelContext;

MySQLParser.prototype.channel = function() {

    var localctx = new ChannelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 772, MySQLParser.RULE_channel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6501;
        if (!( serverVersion >= 50706)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
        }
        this.state = 6502;
        this.match(MySQLParser.FOR_SYMBOL);
        this.state = 6503;
        this.match(MySQLParser.CHANNEL_SYMBOL);
        this.state = 6504;
        this.textStringNoLinebreak();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

CompoundStatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

CompoundStatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

CompoundStatementContext.prototype.caseStatement = function() {
    return this.getTypedRuleContext(CaseStatementContext,0);
};

CompoundStatementContext.prototype.labeledBlock = function() {
    return this.getTypedRuleContext(LabeledBlockContext,0);
};

CompoundStatementContext.prototype.unlabeledBlock = function() {
    return this.getTypedRuleContext(UnlabeledBlockContext,0);
};

CompoundStatementContext.prototype.labeledControl = function() {
    return this.getTypedRuleContext(LabeledControlContext,0);
};

CompoundStatementContext.prototype.unlabeledControl = function() {
    return this.getTypedRuleContext(UnlabeledControlContext,0);
};

CompoundStatementContext.prototype.leaveStatement = function() {
    return this.getTypedRuleContext(LeaveStatementContext,0);
};

CompoundStatementContext.prototype.iterateStatement = function() {
    return this.getTypedRuleContext(IterateStatementContext,0);
};

CompoundStatementContext.prototype.cursorOpen = function() {
    return this.getTypedRuleContext(CursorOpenContext,0);
};

CompoundStatementContext.prototype.cursorFetch = function() {
    return this.getTypedRuleContext(CursorFetchContext,0);
};

CompoundStatementContext.prototype.cursorClose = function() {
    return this.getTypedRuleContext(CursorCloseContext,0);
};

CompoundStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCompoundStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CompoundStatementContext = CompoundStatementContext;

MySQLParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 774, MySQLParser.RULE_compoundStatement);
    try {
        this.state = 6519;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,823,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6506;
            this.simpleStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6507;
            this.returnStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6508;
            this.ifStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6509;
            this.caseStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6510;
            this.labeledBlock();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 6511;
            this.unlabeledBlock();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 6512;
            this.labeledControl();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 6513;
            this.unlabeledControl();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 6514;
            this.leaveStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 6515;
            this.iterateStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 6516;
            this.cursorOpen();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 6517;
            this.cursorFetch();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 6518;
            this.cursorClose();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURN_SYMBOL, 0);
};

ReturnStatementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReturnStatement(this);
	}
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReturnStatementContext = ReturnStatementContext;

MySQLParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 776, MySQLParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6521;
        this.match(MySQLParser.RETURN_SYMBOL);
        this.state = 6522;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.IF_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.IF_SYMBOL);
    } else {
        return this.getToken(MySQLParser.IF_SYMBOL, i);
    }
};


IfStatementContext.prototype.ifBody = function() {
    return this.getTypedRuleContext(IfBodyContext,0);
};

IfStatementContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfStatement(this);
	}
};

IfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfStatementContext = IfStatementContext;

MySQLParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 778, MySQLParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6524;
        this.match(MySQLParser.IF_SYMBOL);
        this.state = 6525;
        this.ifBody();
        this.state = 6526;
        this.match(MySQLParser.END_SYMBOL);
        this.state = 6527;
        this.match(MySQLParser.IF_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifBody;
    return this;
}

IfBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfBodyContext.prototype.constructor = IfBodyContext;

IfBodyContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IfBodyContext.prototype.thenStatement = function() {
    return this.getTypedRuleContext(ThenStatementContext,0);
};

IfBodyContext.prototype.ELSEIF_SYMBOL = function() {
    return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
};

IfBodyContext.prototype.ifBody = function() {
    return this.getTypedRuleContext(IfBodyContext,0);
};

IfBodyContext.prototype.ELSE_SYMBOL = function() {
    return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
};

IfBodyContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

IfBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfBody(this);
	}
};

IfBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfBody(this);
	}
};

IfBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfBodyContext = IfBodyContext;

MySQLParser.prototype.ifBody = function() {

    var localctx = new IfBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 780, MySQLParser.RULE_ifBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6529;
        this.expr(0);
        this.state = 6530;
        this.thenStatement();
        this.state = 6535;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case MySQLParser.ELSEIF_SYMBOL:
        	this.state = 6531;
        	this.match(MySQLParser.ELSEIF_SYMBOL);
        	this.state = 6532;
        	this.ifBody();
        	break;
        case MySQLParser.ELSE_SYMBOL:
        	this.state = 6533;
        	this.match(MySQLParser.ELSE_SYMBOL);
        	this.state = 6534;
        	this.compoundStatementList();
        	break;
        case MySQLParser.END_SYMBOL:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThenStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_thenStatement;
    return this;
}

ThenStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThenStatementContext.prototype.constructor = ThenStatementContext;

ThenStatementContext.prototype.THEN_SYMBOL = function() {
    return this.getToken(MySQLParser.THEN_SYMBOL, 0);
};

ThenStatementContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

ThenStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterThenStatement(this);
	}
};

ThenStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitThenStatement(this);
	}
};

ThenStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitThenStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ThenStatementContext = ThenStatementContext;

MySQLParser.prototype.thenStatement = function() {

    var localctx = new ThenStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 782, MySQLParser.RULE_thenStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6537;
        this.match(MySQLParser.THEN_SYMBOL);
        this.state = 6538;
        this.compoundStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundStatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_compoundStatementList;
    return this;
}

CompoundStatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementListContext.prototype.constructor = CompoundStatementListContext;

CompoundStatementListContext.prototype.compoundStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CompoundStatementContext);
    } else {
        return this.getTypedRuleContext(CompoundStatementContext,i);
    }
};

CompoundStatementListContext.prototype.SEMICOLON_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    } else {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
};


CompoundStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCompoundStatementList(this);
	}
};

CompoundStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCompoundStatementList(this);
	}
};

CompoundStatementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCompoundStatementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CompoundStatementListContext = CompoundStatementListContext;

MySQLParser.prototype.compoundStatementList = function() {

    var localctx = new CompoundStatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 784, MySQLParser.RULE_compoundStatementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6543; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 6540;
        		this.compoundStatement();
        		this.state = 6541;
        		this.match(MySQLParser.SEMICOLON_SYMBOL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 6545; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,825, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_caseStatement;
    return this;
}

CaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseStatementContext.prototype.constructor = CaseStatementContext;

CaseStatementContext.prototype.CASE_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.CASE_SYMBOL);
    } else {
        return this.getToken(MySQLParser.CASE_SYMBOL, i);
    }
};


CaseStatementContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

CaseStatementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CaseStatementContext.prototype.whenExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenExpressionContext);
    } else {
        return this.getTypedRuleContext(WhenExpressionContext,i);
    }
};

CaseStatementContext.prototype.thenStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ThenStatementContext);
    } else {
        return this.getTypedRuleContext(ThenStatementContext,i);
    }
};

CaseStatementContext.prototype.elseStatement = function() {
    return this.getTypedRuleContext(ElseStatementContext,0);
};

CaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCaseStatement(this);
	}
};

CaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCaseStatement(this);
	}
};

CaseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCaseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CaseStatementContext = CaseStatementContext;

MySQLParser.prototype.caseStatement = function() {

    var localctx = new CaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 786, MySQLParser.RULE_caseStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6547;
        this.match(MySQLParser.CASE_SYMBOL);
        this.state = 6549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
        if(la_===1) {
            this.state = 6548;
            this.expr(0);

        }
        this.state = 6554; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 6551;
            this.whenExpression();
            this.state = 6552;
            this.thenStatement();
            this.state = 6556; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MySQLParser.WHEN_SYMBOL);
        this.state = 6559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ELSE_SYMBOL) {
            this.state = 6558;
            this.elseStatement();
        }

        this.state = 6561;
        this.match(MySQLParser.END_SYMBOL);
        this.state = 6562;
        this.match(MySQLParser.CASE_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_elseStatement;
    return this;
}

ElseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseStatementContext.prototype.constructor = ElseStatementContext;

ElseStatementContext.prototype.ELSE_SYMBOL = function() {
    return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
};

ElseStatementContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

ElseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterElseStatement(this);
	}
};

ElseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitElseStatement(this);
	}
};

ElseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitElseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ElseStatementContext = ElseStatementContext;

MySQLParser.prototype.elseStatement = function() {

    var localctx = new ElseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 788, MySQLParser.RULE_elseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6564;
        this.match(MySQLParser.ELSE_SYMBOL);
        this.state = 6565;
        this.compoundStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_labeledBlock;
    return this;
}

LabeledBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledBlockContext.prototype.constructor = LabeledBlockContext;

LabeledBlockContext.prototype.label = function() {
    return this.getTypedRuleContext(LabelContext,0);
};

LabeledBlockContext.prototype.beginEndBlock = function() {
    return this.getTypedRuleContext(BeginEndBlockContext,0);
};

LabeledBlockContext.prototype.labelRef = function() {
    return this.getTypedRuleContext(LabelRefContext,0);
};

LabeledBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLabeledBlock(this);
	}
};

LabeledBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLabeledBlock(this);
	}
};

LabeledBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLabeledBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LabeledBlockContext = LabeledBlockContext;

MySQLParser.prototype.labeledBlock = function() {

    var localctx = new LabeledBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 790, MySQLParser.RULE_labeledBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6567;
        this.label();
        this.state = 6568;
        this.beginEndBlock();
        this.state = 6570;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,829,this._ctx);
        if(la_===1) {
            this.state = 6569;
            this.labelRef();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnlabeledBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unlabeledBlock;
    return this;
}

UnlabeledBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnlabeledBlockContext.prototype.constructor = UnlabeledBlockContext;

UnlabeledBlockContext.prototype.beginEndBlock = function() {
    return this.getTypedRuleContext(BeginEndBlockContext,0);
};

UnlabeledBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnlabeledBlock(this);
	}
};

UnlabeledBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnlabeledBlock(this);
	}
};

UnlabeledBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnlabeledBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnlabeledBlockContext = UnlabeledBlockContext;

MySQLParser.prototype.unlabeledBlock = function() {

    var localctx = new UnlabeledBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 792, MySQLParser.RULE_unlabeledBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6572;
        this.beginEndBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_label;
    return this;
}

LabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelContext.prototype.constructor = LabelContext;

LabelContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

LabelContext.prototype.COLON_SYMBOL = function() {
    return this.getToken(MySQLParser.COLON_SYMBOL, 0);
};

LabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLabel(this);
	}
};

LabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLabel(this);
	}
};

LabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LabelContext = LabelContext;

MySQLParser.prototype.label = function() {

    var localctx = new LabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 794, MySQLParser.RULE_label);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6574;
        this.labelIdentifier();
        this.state = 6575;
        this.match(MySQLParser.COLON_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BeginEndBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_beginEndBlock;
    return this;
}

BeginEndBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginEndBlockContext.prototype.constructor = BeginEndBlockContext;

BeginEndBlockContext.prototype.BEGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
};

BeginEndBlockContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

BeginEndBlockContext.prototype.spDeclarations = function() {
    return this.getTypedRuleContext(SpDeclarationsContext,0);
};

BeginEndBlockContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

BeginEndBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBeginEndBlock(this);
	}
};

BeginEndBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBeginEndBlock(this);
	}
};

BeginEndBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBeginEndBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BeginEndBlockContext = BeginEndBlockContext;

MySQLParser.prototype.beginEndBlock = function() {

    var localctx = new BeginEndBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 796, MySQLParser.RULE_beginEndBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6577;
        this.match(MySQLParser.BEGIN_SYMBOL);
        this.state = 6579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,830,this._ctx);
        if(la_===1) {
            this.state = 6578;
            this.spDeclarations();

        }
        this.state = 6582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,831,this._ctx);
        if(la_===1) {
            this.state = 6581;
            this.compoundStatementList();

        }
        this.state = 6584;
        this.match(MySQLParser.END_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_labeledControl;
    return this;
}

LabeledControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledControlContext.prototype.constructor = LabeledControlContext;

LabeledControlContext.prototype.label = function() {
    return this.getTypedRuleContext(LabelContext,0);
};

LabeledControlContext.prototype.unlabeledControl = function() {
    return this.getTypedRuleContext(UnlabeledControlContext,0);
};

LabeledControlContext.prototype.labelRef = function() {
    return this.getTypedRuleContext(LabelRefContext,0);
};

LabeledControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLabeledControl(this);
	}
};

LabeledControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLabeledControl(this);
	}
};

LabeledControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLabeledControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LabeledControlContext = LabeledControlContext;

MySQLParser.prototype.labeledControl = function() {

    var localctx = new LabeledControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 798, MySQLParser.RULE_labeledControl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6586;
        this.label();
        this.state = 6587;
        this.unlabeledControl();
        this.state = 6589;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,832,this._ctx);
        if(la_===1) {
            this.state = 6588;
            this.labelRef();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnlabeledControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unlabeledControl;
    return this;
}

UnlabeledControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnlabeledControlContext.prototype.constructor = UnlabeledControlContext;

UnlabeledControlContext.prototype.loopBlock = function() {
    return this.getTypedRuleContext(LoopBlockContext,0);
};

UnlabeledControlContext.prototype.whileDoBlock = function() {
    return this.getTypedRuleContext(WhileDoBlockContext,0);
};

UnlabeledControlContext.prototype.repeatUntilBlock = function() {
    return this.getTypedRuleContext(RepeatUntilBlockContext,0);
};

UnlabeledControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnlabeledControl(this);
	}
};

UnlabeledControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnlabeledControl(this);
	}
};

UnlabeledControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnlabeledControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnlabeledControlContext = UnlabeledControlContext;

MySQLParser.prototype.unlabeledControl = function() {

    var localctx = new UnlabeledControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 800, MySQLParser.RULE_unlabeledControl);
    try {
        this.state = 6594;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.LOOP_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6591;
            this.loopBlock();
            break;
        case MySQLParser.WHILE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6592;
            this.whileDoBlock();
            break;
        case MySQLParser.REPEAT_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 6593;
            this.repeatUntilBlock();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loopBlock;
    return this;
}

LoopBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopBlockContext.prototype.constructor = LoopBlockContext;

LoopBlockContext.prototype.LOOP_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LOOP_SYMBOL);
    } else {
        return this.getToken(MySQLParser.LOOP_SYMBOL, i);
    }
};


LoopBlockContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

LoopBlockContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

LoopBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoopBlock(this);
	}
};

LoopBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoopBlock(this);
	}
};

LoopBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoopBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoopBlockContext = LoopBlockContext;

MySQLParser.prototype.loopBlock = function() {

    var localctx = new LoopBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 802, MySQLParser.RULE_loopBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6596;
        this.match(MySQLParser.LOOP_SYMBOL);
        this.state = 6597;
        this.compoundStatementList();
        this.state = 6598;
        this.match(MySQLParser.END_SYMBOL);
        this.state = 6599;
        this.match(MySQLParser.LOOP_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileDoBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_whileDoBlock;
    return this;
}

WhileDoBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileDoBlockContext.prototype.constructor = WhileDoBlockContext;

WhileDoBlockContext.prototype.WHILE_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.WHILE_SYMBOL);
    } else {
        return this.getToken(MySQLParser.WHILE_SYMBOL, i);
    }
};


WhileDoBlockContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WhileDoBlockContext.prototype.DO_SYMBOL = function() {
    return this.getToken(MySQLParser.DO_SYMBOL, 0);
};

WhileDoBlockContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

WhileDoBlockContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

WhileDoBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWhileDoBlock(this);
	}
};

WhileDoBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWhileDoBlock(this);
	}
};

WhileDoBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWhileDoBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WhileDoBlockContext = WhileDoBlockContext;

MySQLParser.prototype.whileDoBlock = function() {

    var localctx = new WhileDoBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 804, MySQLParser.RULE_whileDoBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6601;
        this.match(MySQLParser.WHILE_SYMBOL);
        this.state = 6602;
        this.expr(0);
        this.state = 6603;
        this.match(MySQLParser.DO_SYMBOL);
        this.state = 6604;
        this.compoundStatementList();
        this.state = 6605;
        this.match(MySQLParser.END_SYMBOL);
        this.state = 6606;
        this.match(MySQLParser.WHILE_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepeatUntilBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_repeatUntilBlock;
    return this;
}

RepeatUntilBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepeatUntilBlockContext.prototype.constructor = RepeatUntilBlockContext;

RepeatUntilBlockContext.prototype.REPEAT_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.REPEAT_SYMBOL);
    } else {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
    }
};


RepeatUntilBlockContext.prototype.compoundStatementList = function() {
    return this.getTypedRuleContext(CompoundStatementListContext,0);
};

RepeatUntilBlockContext.prototype.UNTIL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
};

RepeatUntilBlockContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

RepeatUntilBlockContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

RepeatUntilBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRepeatUntilBlock(this);
	}
};

RepeatUntilBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRepeatUntilBlock(this);
	}
};

RepeatUntilBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRepeatUntilBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RepeatUntilBlockContext = RepeatUntilBlockContext;

MySQLParser.prototype.repeatUntilBlock = function() {

    var localctx = new RepeatUntilBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 806, MySQLParser.RULE_repeatUntilBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6608;
        this.match(MySQLParser.REPEAT_SYMBOL);
        this.state = 6609;
        this.compoundStatementList();
        this.state = 6610;
        this.match(MySQLParser.UNTIL_SYMBOL);
        this.state = 6611;
        this.expr(0);
        this.state = 6612;
        this.match(MySQLParser.END_SYMBOL);
        this.state = 6613;
        this.match(MySQLParser.REPEAT_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_spDeclarations;
    return this;
}

SpDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpDeclarationsContext.prototype.constructor = SpDeclarationsContext;

SpDeclarationsContext.prototype.spDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpDeclarationContext);
    } else {
        return this.getTypedRuleContext(SpDeclarationContext,i);
    }
};

SpDeclarationsContext.prototype.SEMICOLON_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    } else {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
};


SpDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpDeclarations(this);
	}
};

SpDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpDeclarations(this);
	}
};

SpDeclarationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpDeclarations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SpDeclarationsContext = SpDeclarationsContext;

MySQLParser.prototype.spDeclarations = function() {

    var localctx = new SpDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 808, MySQLParser.RULE_spDeclarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6618; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 6615;
        		this.spDeclaration();
        		this.state = 6616;
        		this.match(MySQLParser.SEMICOLON_SYMBOL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 6620; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,834, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_spDeclaration;
    return this;
}

SpDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpDeclarationContext.prototype.constructor = SpDeclarationContext;

SpDeclarationContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

SpDeclarationContext.prototype.conditionDeclaration = function() {
    return this.getTypedRuleContext(ConditionDeclarationContext,0);
};

SpDeclarationContext.prototype.handlerDeclaration = function() {
    return this.getTypedRuleContext(HandlerDeclarationContext,0);
};

SpDeclarationContext.prototype.cursorDeclaration = function() {
    return this.getTypedRuleContext(CursorDeclarationContext,0);
};

SpDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpDeclaration(this);
	}
};

SpDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpDeclaration(this);
	}
};

SpDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SpDeclarationContext = SpDeclarationContext;

MySQLParser.prototype.spDeclaration = function() {

    var localctx = new SpDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 810, MySQLParser.RULE_spDeclaration);
    try {
        this.state = 6626;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,835,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6622;
            this.variableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6623;
            this.conditionDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6624;
            this.handlerDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6625;
            this.cursorDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.DECLARE_SYMBOL = function() {
    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
};

VariableDeclarationContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

VariableDeclarationContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

VariableDeclarationContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

VariableDeclarationContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

VariableDeclarationContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VariableDeclarationContext = VariableDeclarationContext;

MySQLParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 812, MySQLParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6628;
        this.match(MySQLParser.DECLARE_SYMBOL);
        this.state = 6629;
        this.identifierList();
        this.state = 6630;
        this.dataType();
        this.state = 6632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COLLATE_SYMBOL) {
            this.state = 6631;
            this.collate();
        }

        this.state = 6636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFAULT_SYMBOL) {
            this.state = 6634;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 6635;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_conditionDeclaration;
    return this;
}

ConditionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionDeclarationContext.prototype.constructor = ConditionDeclarationContext;

ConditionDeclarationContext.prototype.DECLARE_SYMBOL = function() {
    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
};

ConditionDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConditionDeclarationContext.prototype.CONDITION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
};

ConditionDeclarationContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

ConditionDeclarationContext.prototype.spCondition = function() {
    return this.getTypedRuleContext(SpConditionContext,0);
};

ConditionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConditionDeclaration(this);
	}
};

ConditionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConditionDeclaration(this);
	}
};

ConditionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConditionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConditionDeclarationContext = ConditionDeclarationContext;

MySQLParser.prototype.conditionDeclaration = function() {

    var localctx = new ConditionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 814, MySQLParser.RULE_conditionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6638;
        this.match(MySQLParser.DECLARE_SYMBOL);
        this.state = 6639;
        this.identifier();
        this.state = 6640;
        this.match(MySQLParser.CONDITION_SYMBOL);
        this.state = 6641;
        this.match(MySQLParser.FOR_SYMBOL);
        this.state = 6642;
        this.spCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_spCondition;
    return this;
}

SpConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpConditionContext.prototype.constructor = SpConditionContext;

SpConditionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

SpConditionContext.prototype.sqlstate = function() {
    return this.getTypedRuleContext(SqlstateContext,0);
};

SpConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpCondition(this);
	}
};

SpConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpCondition(this);
	}
};

SpConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SpConditionContext = SpConditionContext;

MySQLParser.prototype.spCondition = function() {

    var localctx = new SpConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 816, MySQLParser.RULE_spCondition);
    try {
        this.state = 6646;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INT_NUMBER:
        case MySQLParser.LONG_NUMBER:
        case MySQLParser.ULONGLONG_NUMBER:
        case MySQLParser.HEX_NUMBER:
        case MySQLParser.DECIMAL_NUMBER:
        case MySQLParser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 6644;
            this.ulong_number();
            break;
        case MySQLParser.SQLSTATE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6645;
            this.sqlstate();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlstateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_sqlstate;
    return this;
}

SqlstateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlstateContext.prototype.constructor = SqlstateContext;

SqlstateContext.prototype.SQLSTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
};

SqlstateContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

SqlstateContext.prototype.VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
};

SqlstateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSqlstate(this);
	}
};

SqlstateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSqlstate(this);
	}
};

SqlstateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSqlstate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SqlstateContext = SqlstateContext;

MySQLParser.prototype.sqlstate = function() {

    var localctx = new SqlstateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 818, MySQLParser.RULE_sqlstate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6648;
        this.match(MySQLParser.SQLSTATE_SYMBOL);
        this.state = 6650;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,839,this._ctx);
        if(la_===1) {
            this.state = 6649;
            this.match(MySQLParser.VALUE_SYMBOL);

        }
        this.state = 6652;
        this.textLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerDeclaration;
    return this;
}

HandlerDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerDeclarationContext.prototype.constructor = HandlerDeclarationContext;

HandlerDeclarationContext.prototype.DECLARE_SYMBOL = function() {
    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
};

HandlerDeclarationContext.prototype.HANDLER_SYMBOL = function() {
    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
};

HandlerDeclarationContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

HandlerDeclarationContext.prototype.handlerCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlerConditionContext);
    } else {
        return this.getTypedRuleContext(HandlerConditionContext,i);
    }
};

HandlerDeclarationContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

HandlerDeclarationContext.prototype.CONTINUE_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
};

HandlerDeclarationContext.prototype.EXIT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
};

HandlerDeclarationContext.prototype.UNDO_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
};

HandlerDeclarationContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


HandlerDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerDeclaration(this);
	}
};

HandlerDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerDeclaration(this);
	}
};

HandlerDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerDeclarationContext = HandlerDeclarationContext;

MySQLParser.prototype.handlerDeclaration = function() {

    var localctx = new HandlerDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 820, MySQLParser.RULE_handlerDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6654;
        this.match(MySQLParser.DECLARE_SYMBOL);
        this.state = 6655;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.CONTINUE_SYMBOL || _la===MySQLParser.EXIT_SYMBOL || _la===MySQLParser.UNDO_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 6656;
        this.match(MySQLParser.HANDLER_SYMBOL);
        this.state = 6657;
        this.match(MySQLParser.FOR_SYMBOL);
        this.state = 6658;
        this.handlerCondition();
        this.state = 6663;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,840,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 6659;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6660;
                this.handlerCondition(); 
            }
            this.state = 6665;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,840,this._ctx);
        }

        this.state = 6666;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerCondition;
    return this;
}

HandlerConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerConditionContext.prototype.constructor = HandlerConditionContext;

HandlerConditionContext.prototype.spCondition = function() {
    return this.getTypedRuleContext(SpConditionContext,0);
};

HandlerConditionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

HandlerConditionContext.prototype.SQLWARNING_SYMBOL = function() {
    return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
};

HandlerConditionContext.prototype.notRule = function() {
    return this.getTypedRuleContext(NotRuleContext,0);
};

HandlerConditionContext.prototype.FOUND_SYMBOL = function() {
    return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
};

HandlerConditionContext.prototype.SQLEXCEPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
};

HandlerConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerCondition(this);
	}
};

HandlerConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerCondition(this);
	}
};

HandlerConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerConditionContext = HandlerConditionContext;

MySQLParser.prototype.handlerCondition = function() {

    var localctx = new HandlerConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 822, MySQLParser.RULE_handlerCondition);
    try {
        this.state = 6675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,841,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6668;
            this.spCondition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6669;
            this.identifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6670;
            this.match(MySQLParser.SQLWARNING_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6671;
            this.notRule();
            this.state = 6672;
            this.match(MySQLParser.FOUND_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6674;
            this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CursorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cursorDeclaration;
    return this;
}

CursorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CursorDeclarationContext.prototype.constructor = CursorDeclarationContext;

CursorDeclarationContext.prototype.DECLARE_SYMBOL = function() {
    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
};

CursorDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CursorDeclarationContext.prototype.CURSOR_SYMBOL = function() {
    return this.getToken(MySQLParser.CURSOR_SYMBOL, 0);
};

CursorDeclarationContext.prototype.FOR_SYMBOL = function() {
    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
};

CursorDeclarationContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

CursorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCursorDeclaration(this);
	}
};

CursorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCursorDeclaration(this);
	}
};

CursorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCursorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CursorDeclarationContext = CursorDeclarationContext;

MySQLParser.prototype.cursorDeclaration = function() {

    var localctx = new CursorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 824, MySQLParser.RULE_cursorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6677;
        this.match(MySQLParser.DECLARE_SYMBOL);
        this.state = 6678;
        this.identifier();
        this.state = 6679;
        this.match(MySQLParser.CURSOR_SYMBOL);
        this.state = 6680;
        this.match(MySQLParser.FOR_SYMBOL);
        this.state = 6681;
        this.selectStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IterateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_iterateStatement;
    return this;
}

IterateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterateStatementContext.prototype.constructor = IterateStatementContext;

IterateStatementContext.prototype.ITERATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ITERATE_SYMBOL, 0);
};

IterateStatementContext.prototype.labelRef = function() {
    return this.getTypedRuleContext(LabelRefContext,0);
};

IterateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIterateStatement(this);
	}
};

IterateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIterateStatement(this);
	}
};

IterateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIterateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IterateStatementContext = IterateStatementContext;

MySQLParser.prototype.iterateStatement = function() {

    var localctx = new IterateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 826, MySQLParser.RULE_iterateStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6683;
        this.match(MySQLParser.ITERATE_SYMBOL);
        this.state = 6684;
        this.labelRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LeaveStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_leaveStatement;
    return this;
}

LeaveStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeaveStatementContext.prototype.constructor = LeaveStatementContext;

LeaveStatementContext.prototype.LEAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.LEAVE_SYMBOL, 0);
};

LeaveStatementContext.prototype.labelRef = function() {
    return this.getTypedRuleContext(LabelRefContext,0);
};

LeaveStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLeaveStatement(this);
	}
};

LeaveStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLeaveStatement(this);
	}
};

LeaveStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLeaveStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LeaveStatementContext = LeaveStatementContext;

MySQLParser.prototype.leaveStatement = function() {

    var localctx = new LeaveStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 828, MySQLParser.RULE_leaveStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6686;
        this.match(MySQLParser.LEAVE_SYMBOL);
        this.state = 6687;
        this.labelRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetDiagnosticsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_getDiagnostics;
    return this;
}

GetDiagnosticsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetDiagnosticsContext.prototype.constructor = GetDiagnosticsContext;

GetDiagnosticsContext.prototype.GET_SYMBOL = function() {
    return this.getToken(MySQLParser.GET_SYMBOL, 0);
};

GetDiagnosticsContext.prototype.DIAGNOSTICS_SYMBOL = function() {
    return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
};

GetDiagnosticsContext.prototype.statementInformationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementInformationItemContext);
    } else {
        return this.getTypedRuleContext(StatementInformationItemContext,i);
    }
};

GetDiagnosticsContext.prototype.CONDITION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
};

GetDiagnosticsContext.prototype.signalAllowedExpr = function() {
    return this.getTypedRuleContext(SignalAllowedExprContext,0);
};

GetDiagnosticsContext.prototype.conditionInformationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionInformationItemContext);
    } else {
        return this.getTypedRuleContext(ConditionInformationItemContext,i);
    }
};

GetDiagnosticsContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

GetDiagnosticsContext.prototype.STACKED_SYMBOL = function() {
    return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
};

GetDiagnosticsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


GetDiagnosticsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGetDiagnostics(this);
	}
};

GetDiagnosticsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGetDiagnostics(this);
	}
};

GetDiagnosticsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGetDiagnostics(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GetDiagnosticsContext = GetDiagnosticsContext;

MySQLParser.prototype.getDiagnostics = function() {

    var localctx = new GetDiagnosticsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 830, MySQLParser.RULE_getDiagnostics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6689;
        this.match(MySQLParser.GET_SYMBOL);
        this.state = 6693;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,842,this._ctx);
        if(la_===1) {
            this.state = 6690;
            this.match(MySQLParser.CURRENT_SYMBOL);

        } else if(la_===2) {
            this.state = 6691;
            if (!( serverVersion >= 50700)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
            }
            this.state = 6692;
            this.match(MySQLParser.STACKED_SYMBOL);

        }
        this.state = 6695;
        this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
        this.state = 6714;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,845,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6696;
            this.statementInformationItem();
            this.state = 6701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6697;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6698;
                this.statementInformationItem();
                this.state = 6703;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 6704;
            this.match(MySQLParser.CONDITION_SYMBOL);
            this.state = 6705;
            this.signalAllowedExpr();
            this.state = 6706;
            this.conditionInformationItem();
            this.state = 6711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6707;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6708;
                this.conditionInformationItem();
                this.state = 6713;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignalAllowedExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signalAllowedExpr;
    return this;
}

SignalAllowedExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignalAllowedExprContext.prototype.constructor = SignalAllowedExprContext;

SignalAllowedExprContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

SignalAllowedExprContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

SignalAllowedExprContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

SignalAllowedExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignalAllowedExpr(this);
	}
};

SignalAllowedExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignalAllowedExpr(this);
	}
};

SignalAllowedExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignalAllowedExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignalAllowedExprContext = SignalAllowedExprContext;

MySQLParser.prototype.signalAllowedExpr = function() {

    var localctx = new SignalAllowedExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 832, MySQLParser.RULE_signalAllowedExpr);
    try {
        this.state = 6719;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,846,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6716;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6717;
            this.variable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6718;
            this.qualifiedIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementInformationItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_statementInformationItem;
    return this;
}

StatementInformationItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementInformationItemContext.prototype.constructor = StatementInformationItemContext;

StatementInformationItemContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

StatementInformationItemContext.prototype.NUMBER_SYMBOL = function() {
    return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
};

StatementInformationItemContext.prototype.ROW_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
};

StatementInformationItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

StatementInformationItemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StatementInformationItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStatementInformationItem(this);
	}
};

StatementInformationItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStatementInformationItem(this);
	}
};

StatementInformationItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStatementInformationItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StatementInformationItemContext = StatementInformationItemContext;

MySQLParser.prototype.statementInformationItem = function() {

    var localctx = new StatementInformationItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 834, MySQLParser.RULE_statementInformationItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6723;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,847,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6721;
            this.variable();
            break;

        case 2:
            this.state = 6722;
            this.identifier();
            break;

        }
        this.state = 6725;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 6726;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NUMBER_SYMBOL || _la===MySQLParser.ROW_COUNT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionInformationItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_conditionInformationItem;
    return this;
}

ConditionInformationItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionInformationItemContext.prototype.constructor = ConditionInformationItemContext;

ConditionInformationItemContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

ConditionInformationItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ConditionInformationItemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConditionInformationItemContext.prototype.signalInformationItemName = function() {
    return this.getTypedRuleContext(SignalInformationItemNameContext,0);
};

ConditionInformationItemContext.prototype.RETURNED_SQLSTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
};

ConditionInformationItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConditionInformationItem(this);
	}
};

ConditionInformationItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConditionInformationItem(this);
	}
};

ConditionInformationItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConditionInformationItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConditionInformationItemContext = ConditionInformationItemContext;

MySQLParser.prototype.conditionInformationItem = function() {

    var localctx = new ConditionInformationItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 836, MySQLParser.RULE_conditionInformationItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,848,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6728;
            this.variable();
            break;

        case 2:
            this.state = 6729;
            this.identifier();
            break;

        }
        this.state = 6732;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 6735;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CATALOG_NAME_SYMBOL:
        case MySQLParser.CLASS_ORIGIN_SYMBOL:
        case MySQLParser.COLUMN_NAME_SYMBOL:
        case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
        case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
        case MySQLParser.CONSTRAINT_NAME_SYMBOL:
        case MySQLParser.CURSOR_NAME_SYMBOL:
        case MySQLParser.MESSAGE_TEXT_SYMBOL:
        case MySQLParser.MYSQL_ERRNO_SYMBOL:
        case MySQLParser.SCHEMA_NAME_SYMBOL:
        case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
        case MySQLParser.TABLE_NAME_SYMBOL:
            this.state = 6733;
            this.signalInformationItemName();
            break;
        case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
            this.state = 6734;
            this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignalInformationItemNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signalInformationItemName;
    return this;
}

SignalInformationItemNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignalInformationItemNameContext.prototype.constructor = SignalInformationItemNameContext;

SignalInformationItemNameContext.prototype.CLASS_ORIGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.SUBCLASS_ORIGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.CONSTRAINT_CATALOG_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.CONSTRAINT_SCHEMA_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.CONSTRAINT_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.CATALOG_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.SCHEMA_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.TABLE_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.COLUMN_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.CURSOR_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.MESSAGE_TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.MYSQL_ERRNO_SYMBOL = function() {
    return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
};

SignalInformationItemNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignalInformationItemName(this);
	}
};

SignalInformationItemNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignalInformationItemName(this);
	}
};

SignalInformationItemNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignalInformationItemName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignalInformationItemNameContext = SignalInformationItemNameContext;

MySQLParser.prototype.signalInformationItemName = function() {

    var localctx = new SignalInformationItemNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 838, MySQLParser.RULE_signalInformationItemName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6737;
        _la = this._input.LA(1);
        if(!(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (MySQLParser.CATALOG_NAME_SYMBOL - 78)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 78)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 78)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 78)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 78)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 78)))) !== 0) || _la===MySQLParser.MESSAGE_TEXT_SYMBOL || _la===MySQLParser.MYSQL_ERRNO_SYMBOL || _la===MySQLParser.SCHEMA_NAME_SYMBOL || _la===MySQLParser.SUBCLASS_ORIGIN_SYMBOL || _la===MySQLParser.TABLE_NAME_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signalStatement;
    return this;
}

SignalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignalStatementContext.prototype.constructor = SignalStatementContext;

SignalStatementContext.prototype.SIGNAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0);
};

SignalStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SignalStatementContext.prototype.sqlstate = function() {
    return this.getTypedRuleContext(SqlstateContext,0);
};

SignalStatementContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

SignalStatementContext.prototype.signalInformationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignalInformationItemContext);
    } else {
        return this.getTypedRuleContext(SignalInformationItemContext,i);
    }
};

SignalStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


SignalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignalStatement(this);
	}
};

SignalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignalStatement(this);
	}
};

SignalStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignalStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignalStatementContext = SignalStatementContext;

MySQLParser.prototype.signalStatement = function() {

    var localctx = new SignalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 840, MySQLParser.RULE_signalStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6739;
        this.match(MySQLParser.SIGNAL_SYMBOL);
        this.state = 6742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,850,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6740;
            this.identifier();
            break;

        case 2:
            this.state = 6741;
            this.sqlstate();
            break;

        }
        this.state = 6753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SET_SYMBOL) {
            this.state = 6744;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 6745;
            this.signalInformationItem();
            this.state = 6750;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6746;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6747;
                this.signalInformationItem();
                this.state = 6752;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResignalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resignalStatement;
    return this;
}

ResignalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResignalStatementContext.prototype.constructor = ResignalStatementContext;

ResignalStatementContext.prototype.RESIGNAL_SYMBOL = function() {
    return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0);
};

ResignalStatementContext.prototype.SQLSTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
};

ResignalStatementContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

ResignalStatementContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

ResignalStatementContext.prototype.signalInformationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignalInformationItemContext);
    } else {
        return this.getTypedRuleContext(SignalInformationItemContext,i);
    }
};

ResignalStatementContext.prototype.VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
};

ResignalStatementContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ResignalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResignalStatement(this);
	}
};

ResignalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResignalStatement(this);
	}
};

ResignalStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResignalStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResignalStatementContext = ResignalStatementContext;

MySQLParser.prototype.resignalStatement = function() {

    var localctx = new ResignalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 842, MySQLParser.RULE_resignalStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6755;
        this.match(MySQLParser.RESIGNAL_SYMBOL);
        this.state = 6761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SQLSTATE_SYMBOL) {
            this.state = 6756;
            this.match(MySQLParser.SQLSTATE_SYMBOL);
            this.state = 6758;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,853,this._ctx);
            if(la_===1) {
                this.state = 6757;
                this.match(MySQLParser.VALUE_SYMBOL);

            }
            this.state = 6760;
            this.textOrIdentifier();
        }

        this.state = 6772;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SET_SYMBOL) {
            this.state = 6763;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 6764;
            this.signalInformationItem();
            this.state = 6769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 6765;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 6766;
                this.signalInformationItem();
                this.state = 6771;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignalInformationItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signalInformationItem;
    return this;
}

SignalInformationItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignalInformationItemContext.prototype.constructor = SignalInformationItemContext;

SignalInformationItemContext.prototype.signalInformationItemName = function() {
    return this.getTypedRuleContext(SignalInformationItemNameContext,0);
};

SignalInformationItemContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

SignalInformationItemContext.prototype.signalAllowedExpr = function() {
    return this.getTypedRuleContext(SignalAllowedExprContext,0);
};

SignalInformationItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignalInformationItem(this);
	}
};

SignalInformationItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignalInformationItem(this);
	}
};

SignalInformationItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignalInformationItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignalInformationItemContext = SignalInformationItemContext;

MySQLParser.prototype.signalInformationItem = function() {

    var localctx = new SignalInformationItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 844, MySQLParser.RULE_signalInformationItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6774;
        this.signalInformationItemName();
        this.state = 6775;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 6776;
        this.signalAllowedExpr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CursorOpenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cursorOpen;
    return this;
}

CursorOpenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CursorOpenContext.prototype.constructor = CursorOpenContext;

CursorOpenContext.prototype.OPEN_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
};

CursorOpenContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CursorOpenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCursorOpen(this);
	}
};

CursorOpenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCursorOpen(this);
	}
};

CursorOpenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCursorOpen(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CursorOpenContext = CursorOpenContext;

MySQLParser.prototype.cursorOpen = function() {

    var localctx = new CursorOpenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 846, MySQLParser.RULE_cursorOpen);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6778;
        this.match(MySQLParser.OPEN_SYMBOL);
        this.state = 6779;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CursorCloseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cursorClose;
    return this;
}

CursorCloseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CursorCloseContext.prototype.constructor = CursorCloseContext;

CursorCloseContext.prototype.CLOSE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
};

CursorCloseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CursorCloseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCursorClose(this);
	}
};

CursorCloseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCursorClose(this);
	}
};

CursorCloseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCursorClose(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CursorCloseContext = CursorCloseContext;

MySQLParser.prototype.cursorClose = function() {

    var localctx = new CursorCloseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 848, MySQLParser.RULE_cursorClose);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6781;
        this.match(MySQLParser.CLOSE_SYMBOL);
        this.state = 6782;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CursorFetchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cursorFetch;
    return this;
}

CursorFetchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CursorFetchContext.prototype.constructor = CursorFetchContext;

CursorFetchContext.prototype.FETCH_SYMBOL = function() {
    return this.getToken(MySQLParser.FETCH_SYMBOL, 0);
};

CursorFetchContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CursorFetchContext.prototype.INTO_SYMBOL = function() {
    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
};

CursorFetchContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

CursorFetchContext.prototype.FROM_SYMBOL = function() {
    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
};

CursorFetchContext.prototype.NEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
};

CursorFetchContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCursorFetch(this);
	}
};

CursorFetchContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCursorFetch(this);
	}
};

CursorFetchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCursorFetch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CursorFetchContext = CursorFetchContext;

MySQLParser.prototype.cursorFetch = function() {

    var localctx = new CursorFetchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 850, MySQLParser.RULE_cursorFetch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6784;
        this.match(MySQLParser.FETCH_SYMBOL);
        this.state = 6789;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,858,this._ctx);
        if(la_===1) {
            this.state = 6786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NEXT_SYMBOL) {
                this.state = 6785;
                this.match(MySQLParser.NEXT_SYMBOL);
            }

            this.state = 6788;
            this.match(MySQLParser.FROM_SYMBOL);

        }
        this.state = 6791;
        this.identifier();
        this.state = 6792;
        this.match(MySQLParser.INTO_SYMBOL);
        this.state = 6793;
        this.identifierList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScheduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_schedule;
    return this;
}

ScheduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScheduleContext.prototype.constructor = ScheduleContext;

ScheduleContext.prototype.AT_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SYMBOL, 0);
};

ScheduleContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ScheduleContext.prototype.EVERY_SYMBOL = function() {
    return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
};

ScheduleContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

ScheduleContext.prototype.STARTS_SYMBOL = function() {
    return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
};

ScheduleContext.prototype.ENDS_SYMBOL = function() {
    return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
};

ScheduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSchedule(this);
	}
};

ScheduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSchedule(this);
	}
};

ScheduleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSchedule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ScheduleContext = ScheduleContext;

MySQLParser.prototype.schedule = function() {

    var localctx = new ScheduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 852, MySQLParser.RULE_schedule);
    var _la = 0; // Token type
    try {
        this.state = 6808;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.AT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6795;
            this.match(MySQLParser.AT_SYMBOL);
            this.state = 6796;
            this.expr(0);
            break;
        case MySQLParser.EVERY_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6797;
            this.match(MySQLParser.EVERY_SYMBOL);
            this.state = 6798;
            this.expr(0);
            this.state = 6799;
            this.interval();
            this.state = 6802;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STARTS_SYMBOL) {
                this.state = 6800;
                this.match(MySQLParser.STARTS_SYMBOL);
                this.state = 6801;
                this.expr(0);
            }

            this.state = 6806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ENDS_SYMBOL) {
                this.state = 6804;
                this.match(MySQLParser.ENDS_SYMBOL);
                this.state = 6805;
                this.expr(0);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnDefinition;
    return this;
}

ColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

ColumnDefinitionContext.prototype.fieldDefinition = function() {
    return this.getTypedRuleContext(FieldDefinitionContext,0);
};

ColumnDefinitionContext.prototype.checkOrReferences = function() {
    return this.getTypedRuleContext(CheckOrReferencesContext,0);
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnDefinitionContext = ColumnDefinitionContext;

MySQLParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 854, MySQLParser.RULE_columnDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6810;
        this.columnName();
        this.state = 6811;
        this.fieldDefinition();
        this.state = 6813;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,862,this._ctx);
        if(la_===1) {
            this.state = 6812;
            this.checkOrReferences();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CheckOrReferencesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_checkOrReferences;
    return this;
}

CheckOrReferencesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckOrReferencesContext.prototype.constructor = CheckOrReferencesContext;

CheckOrReferencesContext.prototype.checkConstraint = function() {
    return this.getTypedRuleContext(CheckConstraintContext,0);
};

CheckOrReferencesContext.prototype.references = function() {
    return this.getTypedRuleContext(ReferencesContext,0);
};

CheckOrReferencesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckOrReferences(this);
	}
};

CheckOrReferencesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckOrReferences(this);
	}
};

CheckOrReferencesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckOrReferences(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CheckOrReferencesContext = CheckOrReferencesContext;

MySQLParser.prototype.checkOrReferences = function() {

    var localctx = new CheckOrReferencesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 856, MySQLParser.RULE_checkOrReferences);
    try {
        this.state = 6818;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,863,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6815;
            if (!( serverVersion < 80016)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80016");
            }
            this.state = 6816;
            this.checkConstraint();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6817;
            this.references();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CheckConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_checkConstraint;
    return this;
}

CheckConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckConstraintContext.prototype.constructor = CheckConstraintContext;

CheckConstraintContext.prototype.CHECK_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
};

CheckConstraintContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

CheckConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckConstraint(this);
	}
};

CheckConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckConstraint(this);
	}
};

CheckConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CheckConstraintContext = CheckConstraintContext;

MySQLParser.prototype.checkConstraint = function() {

    var localctx = new CheckConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 858, MySQLParser.RULE_checkConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6820;
        this.match(MySQLParser.CHECK_SYMBOL);
        this.state = 6821;
        this.exprWithParentheses();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintEnforcementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_constraintEnforcement;
    return this;
}

ConstraintEnforcementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintEnforcementContext.prototype.constructor = ConstraintEnforcementContext;

ConstraintEnforcementContext.prototype.ENFORCED_SYMBOL = function() {
    return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
};

ConstraintEnforcementContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

ConstraintEnforcementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstraintEnforcement(this);
	}
};

ConstraintEnforcementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstraintEnforcement(this);
	}
};

ConstraintEnforcementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstraintEnforcement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConstraintEnforcementContext = ConstraintEnforcementContext;

MySQLParser.prototype.constraintEnforcement = function() {

    var localctx = new ConstraintEnforcementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 860, MySQLParser.RULE_constraintEnforcement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NOT_SYMBOL) {
            this.state = 6823;
            this.match(MySQLParser.NOT_SYMBOL);
        }

        this.state = 6826;
        this.match(MySQLParser.ENFORCED_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableConstraintDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableConstraintDef;
    this.type = null; // Token
    return this;
}

TableConstraintDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintDefContext.prototype.constructor = TableConstraintDefContext;

TableConstraintDefContext.prototype.keyListVariants = function() {
    return this.getTypedRuleContext(KeyListVariantsContext,0);
};

TableConstraintDefContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

TableConstraintDefContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

TableConstraintDefContext.prototype.indexNameAndType = function() {
    return this.getTypedRuleContext(IndexNameAndTypeContext,0);
};

TableConstraintDefContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

TableConstraintDefContext.prototype.FULLTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
};

TableConstraintDefContext.prototype.keyOrIndex = function() {
    return this.getTypedRuleContext(KeyOrIndexContext,0);
};

TableConstraintDefContext.prototype.indexName = function() {
    return this.getTypedRuleContext(IndexNameContext,0);
};

TableConstraintDefContext.prototype.fulltextIndexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltextIndexOptionContext);
    } else {
        return this.getTypedRuleContext(FulltextIndexOptionContext,i);
    }
};

TableConstraintDefContext.prototype.SPATIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
};

TableConstraintDefContext.prototype.spatialIndexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpatialIndexOptionContext);
    } else {
        return this.getTypedRuleContext(SpatialIndexOptionContext,i);
    }
};

TableConstraintDefContext.prototype.keyList = function() {
    return this.getTypedRuleContext(KeyListContext,0);
};

TableConstraintDefContext.prototype.references = function() {
    return this.getTypedRuleContext(ReferencesContext,0);
};

TableConstraintDefContext.prototype.checkConstraint = function() {
    return this.getTypedRuleContext(CheckConstraintContext,0);
};

TableConstraintDefContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};

TableConstraintDefContext.prototype.FOREIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
};

TableConstraintDefContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

TableConstraintDefContext.prototype.UNIQUE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
};

TableConstraintDefContext.prototype.constraintEnforcement = function() {
    return this.getTypedRuleContext(ConstraintEnforcementContext,0);
};

TableConstraintDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableConstraintDef(this);
	}
};

TableConstraintDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableConstraintDef(this);
	}
};

TableConstraintDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableConstraintDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableConstraintDefContext = TableConstraintDefContext;

MySQLParser.prototype.tableConstraintDef = function() {

    var localctx = new TableConstraintDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 862, MySQLParser.RULE_tableConstraintDef);
    var _la = 0; // Token type
    try {
        this.state = 6903;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INDEX_SYMBOL:
        case MySQLParser.KEY_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6828;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEX_SYMBOL || _la===MySQLParser.KEY_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6830;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,865,this._ctx);
            if(la_===1) {
                this.state = 6829;
                this.indexNameAndType();

            }
            this.state = 6832;
            this.keyListVariants();
            this.state = 6836;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,866,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 6833;
                    this.indexOption(); 
                }
                this.state = 6838;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,866,this._ctx);
            }

            break;
        case MySQLParser.FULLTEXT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6839;
            localctx.type = this.match(MySQLParser.FULLTEXT_SYMBOL);
            this.state = 6841;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,867,this._ctx);
            if(la_===1) {
                this.state = 6840;
                this.keyOrIndex();

            }
            this.state = 6844;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,868,this._ctx);
            if(la_===1) {
                this.state = 6843;
                this.indexName();

            }
            this.state = 6846;
            this.keyListVariants();
            this.state = 6850;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,869,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 6847;
                    this.fulltextIndexOption(); 
                }
                this.state = 6852;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,869,this._ctx);
            }

            break;
        case MySQLParser.SPATIAL_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 6853;
            localctx.type = this.match(MySQLParser.SPATIAL_SYMBOL);
            this.state = 6855;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,870,this._ctx);
            if(la_===1) {
                this.state = 6854;
                this.keyOrIndex();

            }
            this.state = 6858;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,871,this._ctx);
            if(la_===1) {
                this.state = 6857;
                this.indexName();

            }
            this.state = 6860;
            this.keyListVariants();
            this.state = 6864;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,872,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 6861;
                    this.spatialIndexOption(); 
                }
                this.state = 6866;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,872,this._ctx);
            }

            break;
        case MySQLParser.CHECK_SYMBOL:
        case MySQLParser.CONSTRAINT_SYMBOL:
        case MySQLParser.FOREIGN_SYMBOL:
        case MySQLParser.PRIMARY_SYMBOL:
        case MySQLParser.UNIQUE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 6868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT_SYMBOL) {
                this.state = 6867;
                this.constraintName();
            }

            this.state = 6901;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.PRIMARY_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                this.state = 6876;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.PRIMARY_SYMBOL:
                    this.state = 6870;
                    localctx.type = this.match(MySQLParser.PRIMARY_SYMBOL);
                    this.state = 6871;
                    this.match(MySQLParser.KEY_SYMBOL);
                    break;
                case MySQLParser.UNIQUE_SYMBOL:
                    this.state = 6872;
                    localctx.type = this.match(MySQLParser.UNIQUE_SYMBOL);
                    this.state = 6874;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,874,this._ctx);
                    if(la_===1) {
                        this.state = 6873;
                        this.keyOrIndex();

                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 6879;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,876,this._ctx);
                if(la_===1) {
                    this.state = 6878;
                    this.indexNameAndType();

                }
                this.state = 6881;
                this.keyListVariants();
                this.state = 6885;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,877,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 6882;
                        this.indexOption(); 
                    }
                    this.state = 6887;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,877,this._ctx);
                }

                break;
            case MySQLParser.FOREIGN_SYMBOL:
                this.state = 6888;
                localctx.type = this.match(MySQLParser.FOREIGN_SYMBOL);
                this.state = 6889;
                this.match(MySQLParser.KEY_SYMBOL);
                this.state = 6891;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,878,this._ctx);
                if(la_===1) {
                    this.state = 6890;
                    this.indexName();

                }
                this.state = 6893;
                this.keyList();
                this.state = 6894;
                this.references();
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.state = 6896;
                this.checkConstraint();
                this.state = 6899;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,879,this._ctx);
                if(la_===1) {
                    this.state = 6897;
                    if (!( serverVersion >= 80017)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
                    }
                    this.state = 6898;
                    this.constraintEnforcement();

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_constraintName;
    return this;
}

ConstraintNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintNameContext.prototype.constructor = ConstraintNameContext;

ConstraintNameContext.prototype.CONSTRAINT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
};

ConstraintNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstraintNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstraintName(this);
	}
};

ConstraintNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstraintName(this);
	}
};

ConstraintNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstraintName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConstraintNameContext = ConstraintNameContext;

MySQLParser.prototype.constraintName = function() {

    var localctx = new ConstraintNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 864, MySQLParser.RULE_constraintName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6905;
        this.match(MySQLParser.CONSTRAINT_SYMBOL);
        this.state = 6907;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,882,this._ctx);
        if(la_===1) {
            this.state = 6906;
            this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldDefinition;
    return this;
}

FieldDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDefinitionContext.prototype.constructor = FieldDefinitionContext;

FieldDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

FieldDefinitionContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

FieldDefinitionContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

FieldDefinitionContext.prototype.columnAttribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnAttributeContext);
    } else {
        return this.getTypedRuleContext(ColumnAttributeContext,i);
    }
};

FieldDefinitionContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

FieldDefinitionContext.prototype.GENERATED_SYMBOL = function() {
    return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
};

FieldDefinitionContext.prototype.ALWAYS_SYMBOL = function() {
    return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
};

FieldDefinitionContext.prototype.VIRTUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
};

FieldDefinitionContext.prototype.STORED_SYMBOL = function() {
    return this.getToken(MySQLParser.STORED_SYMBOL, 0);
};

FieldDefinitionContext.prototype.gcolAttribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GcolAttributeContext);
    } else {
        return this.getTypedRuleContext(GcolAttributeContext,i);
    }
};

FieldDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldDefinition(this);
	}
};

FieldDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldDefinition(this);
	}
};

FieldDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldDefinitionContext = FieldDefinitionContext;

MySQLParser.prototype.fieldDefinition = function() {

    var localctx = new FieldDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 866, MySQLParser.RULE_fieldDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6909;
        this.dataType();
        this.state = 6945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,890,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6913;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,883,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 6910;
                    this.columnAttribute(); 
                }
                this.state = 6915;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,883,this._ctx);
            }

            break;

        case 2:
            this.state = 6916;
            if (!( serverVersion >= 50707)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50707");
            }
            this.state = 6918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLLATE_SYMBOL) {
                this.state = 6917;
                this.collate();
            }

            this.state = 6922;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.GENERATED_SYMBOL) {
                this.state = 6920;
                this.match(MySQLParser.GENERATED_SYMBOL);
                this.state = 6921;
                this.match(MySQLParser.ALWAYS_SYMBOL);
            }

            this.state = 6924;
            this.match(MySQLParser.AS_SYMBOL);
            this.state = 6925;
            this.exprWithParentheses();
            this.state = 6927;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,886,this._ctx);
            if(la_===1) {
                this.state = 6926;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.STORED_SYMBOL || _la===MySQLParser.VIRTUAL_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 6943;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,889,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6929;
                if (!( serverVersion < 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
                }
                this.state = 6933;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,887,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 6930;
                        this.gcolAttribute(); 
                    }
                    this.state = 6935;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,887,this._ctx);
                }

                break;

            case 2:
                this.state = 6936;
                if (!( serverVersion >= 80000)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
                }
                this.state = 6940;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,888,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 6937;
                        this.columnAttribute(); 
                    }
                    this.state = 6942;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,888,this._ctx);
                }

                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnAttribute;
    this.value = null; // Token
    return this;
}

ColumnAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnAttributeContext.prototype.constructor = ColumnAttributeContext;

ColumnAttributeContext.prototype.nullLiteral = function() {
    return this.getTypedRuleContext(NullLiteralContext,0);
};

ColumnAttributeContext.prototype.NOT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
};

ColumnAttributeContext.prototype.SECONDARY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
};

ColumnAttributeContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

ColumnAttributeContext.prototype.signedLiteral = function() {
    return this.getTypedRuleContext(SignedLiteralContext,0);
};

ColumnAttributeContext.prototype.NOW_SYMBOL = function() {
    return this.getToken(MySQLParser.NOW_SYMBOL, 0);
};

ColumnAttributeContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

ColumnAttributeContext.prototype.timeFunctionParameters = function() {
    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
};

ColumnAttributeContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

ColumnAttributeContext.prototype.ON_SYMBOL = function() {
    return this.getToken(MySQLParser.ON_SYMBOL, 0);
};

ColumnAttributeContext.prototype.AUTO_INCREMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
};

ColumnAttributeContext.prototype.VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
};

ColumnAttributeContext.prototype.SERIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
};

ColumnAttributeContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

ColumnAttributeContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

ColumnAttributeContext.prototype.UNIQUE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
};

ColumnAttributeContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

ColumnAttributeContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

ColumnAttributeContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

ColumnAttributeContext.prototype.columnFormat = function() {
    return this.getTypedRuleContext(ColumnFormatContext,0);
};

ColumnAttributeContext.prototype.COLUMN_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
};

ColumnAttributeContext.prototype.storageMedia = function() {
    return this.getTypedRuleContext(StorageMediaContext,0);
};

ColumnAttributeContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

ColumnAttributeContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

ColumnAttributeContext.prototype.SRID_SYMBOL = function() {
    return this.getToken(MySQLParser.SRID_SYMBOL, 0);
};

ColumnAttributeContext.prototype.checkConstraint = function() {
    return this.getTypedRuleContext(CheckConstraintContext,0);
};

ColumnAttributeContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};

ColumnAttributeContext.prototype.constraintEnforcement = function() {
    return this.getTypedRuleContext(ConstraintEnforcementContext,0);
};

ColumnAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnAttribute(this);
	}
};

ColumnAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnAttribute(this);
	}
};

ColumnAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnAttributeContext = ColumnAttributeContext;

MySQLParser.prototype.columnAttribute = function() {

    var localctx = new ColumnAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 868, MySQLParser.RULE_columnAttribute);
    var _la = 0; // Token type
    try {
        this.state = 6999;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,898,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT_SYMBOL) {
                this.state = 6947;
                this.match(MySQLParser.NOT_SYMBOL);
            }

            this.state = 6950;
            this.nullLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6951;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 6952;
            this.match(MySQLParser.NOT_SYMBOL);
            this.state = 6953;
            this.match(MySQLParser.SECONDARY_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6954;
            localctx.value = this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 6962;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,893,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6955;
                this.signedLiteral();
                break;

            case 2:
                this.state = 6956;
                this.match(MySQLParser.NOW_SYMBOL);
                this.state = 6958;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,892,this._ctx);
                if(la_===1) {
                    this.state = 6957;
                    this.timeFunctionParameters();

                }
                break;

            case 3:
                this.state = 6960;
                if (!( serverVersion >= 80013)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80013");
                }
                this.state = 6961;
                this.exprWithParentheses();
                break;

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6964;
            localctx.value = this.match(MySQLParser.ON_SYMBOL);
            this.state = 6965;
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.state = 6966;
            this.match(MySQLParser.NOW_SYMBOL);
            this.state = 6968;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,894,this._ctx);
            if(la_===1) {
                this.state = 6967;
                this.timeFunctionParameters();

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6970;
            localctx.value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 6971;
            localctx.value = this.match(MySQLParser.SERIAL_SYMBOL);
            this.state = 6972;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.state = 6973;
            this.match(MySQLParser.VALUE_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 6975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PRIMARY_SYMBOL) {
                this.state = 6974;
                this.match(MySQLParser.PRIMARY_SYMBOL);
            }

            this.state = 6977;
            localctx.value = this.match(MySQLParser.KEY_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 6978;
            localctx.value = this.match(MySQLParser.UNIQUE_SYMBOL);
            this.state = 6980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,896,this._ctx);
            if(la_===1) {
                this.state = 6979;
                this.match(MySQLParser.KEY_SYMBOL);

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 6982;
            localctx.value = this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 6983;
            this.textLiteral();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 6984;
            this.collate();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 6985;
            localctx.value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
            this.state = 6986;
            this.columnFormat();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 6987;
            localctx.value = this.match(MySQLParser.STORAGE_SYMBOL);
            this.state = 6988;
            this.storageMedia();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 6989;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 6990;
            localctx.value = this.match(MySQLParser.SRID_SYMBOL);
            this.state = 6991;
            this.real_ulonglong_number();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 6992;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 6994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT_SYMBOL) {
                this.state = 6993;
                this.constraintName();
            }

            this.state = 6996;
            this.checkConstraint();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 6997;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 6998;
            this.constraintEnforcement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnFormat;
    return this;
}

ColumnFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnFormatContext.prototype.constructor = ColumnFormatContext;

ColumnFormatContext.prototype.FIXED_SYMBOL = function() {
    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
};

ColumnFormatContext.prototype.DYNAMIC_SYMBOL = function() {
    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
};

ColumnFormatContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

ColumnFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnFormat(this);
	}
};

ColumnFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnFormat(this);
	}
};

ColumnFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnFormatContext = ColumnFormatContext;

MySQLParser.prototype.columnFormat = function() {

    var localctx = new ColumnFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 870, MySQLParser.RULE_columnFormat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7001;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DYNAMIC_SYMBOL || _la===MySQLParser.FIXED_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StorageMediaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_storageMedia;
    return this;
}

StorageMediaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageMediaContext.prototype.constructor = StorageMediaContext;

StorageMediaContext.prototype.DISK_SYMBOL = function() {
    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
};

StorageMediaContext.prototype.MEMORY_SYMBOL = function() {
    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
};

StorageMediaContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

StorageMediaContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStorageMedia(this);
	}
};

StorageMediaContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStorageMedia(this);
	}
};

StorageMediaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStorageMedia(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StorageMediaContext = StorageMediaContext;

MySQLParser.prototype.storageMedia = function() {

    var localctx = new StorageMediaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 872, MySQLParser.RULE_storageMedia);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7003;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DISK_SYMBOL || _la===MySQLParser.MEMORY_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GcolAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_gcolAttribute;
    return this;
}

GcolAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GcolAttributeContext.prototype.constructor = GcolAttributeContext;

GcolAttributeContext.prototype.UNIQUE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
};

GcolAttributeContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

GcolAttributeContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

GcolAttributeContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

GcolAttributeContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

GcolAttributeContext.prototype.notRule = function() {
    return this.getTypedRuleContext(NotRuleContext,0);
};

GcolAttributeContext.prototype.PRIMARY_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
};

GcolAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGcolAttribute(this);
	}
};

GcolAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGcolAttribute(this);
	}
};

GcolAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGcolAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GcolAttributeContext = GcolAttributeContext;

MySQLParser.prototype.gcolAttribute = function() {

    var localctx = new GcolAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 874, MySQLParser.RULE_gcolAttribute);
    var _la = 0; // Token type
    try {
        this.state = 7019;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.UNIQUE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7005;
            this.match(MySQLParser.UNIQUE_SYMBOL);
            this.state = 7007;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,899,this._ctx);
            if(la_===1) {
                this.state = 7006;
                this.match(MySQLParser.KEY_SYMBOL);

            }
            break;
        case MySQLParser.COMMENT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7009;
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 7010;
            this.textString();
            break;
        case MySQLParser.NOT2_SYMBOL:
        case MySQLParser.NOT_SYMBOL:
        case MySQLParser.NULL_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 7012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT2_SYMBOL || _la===MySQLParser.NOT_SYMBOL) {
                this.state = 7011;
                this.notRule();
            }

            this.state = 7014;
            this.match(MySQLParser.NULL_SYMBOL);
            break;
        case MySQLParser.KEY_SYMBOL:
        case MySQLParser.PRIMARY_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 7016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PRIMARY_SYMBOL) {
                this.state = 7015;
                this.match(MySQLParser.PRIMARY_SYMBOL);
            }

            this.state = 7018;
            this.match(MySQLParser.KEY_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferencesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_references;
    this.match = null; // Token
    this.option = null; // Token
    return this;
}

ReferencesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferencesContext.prototype.constructor = ReferencesContext;

ReferencesContext.prototype.REFERENCES_SYMBOL = function() {
    return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
};

ReferencesContext.prototype.tableRef = function() {
    return this.getTypedRuleContext(TableRefContext,0);
};

ReferencesContext.prototype.identifierListWithParentheses = function() {
    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
};

ReferencesContext.prototype.MATCH_SYMBOL = function() {
    return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
};

ReferencesContext.prototype.ON_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ON_SYMBOL);
    } else {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
};


ReferencesContext.prototype.deleteOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeleteOptionContext);
    } else {
        return this.getTypedRuleContext(DeleteOptionContext,i);
    }
};

ReferencesContext.prototype.UPDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
};

ReferencesContext.prototype.DELETE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
};

ReferencesContext.prototype.FULL_SYMBOL = function() {
    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
};

ReferencesContext.prototype.PARTIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
};

ReferencesContext.prototype.SIMPLE_SYMBOL = function() {
    return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
};

ReferencesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReferences(this);
	}
};

ReferencesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReferences(this);
	}
};

ReferencesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReferences(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReferencesContext = ReferencesContext;

MySQLParser.prototype.references = function() {

    var localctx = new ReferencesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 876, MySQLParser.RULE_references);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7021;
        this.match(MySQLParser.REFERENCES_SYMBOL);
        this.state = 7022;
        this.tableRef();
        this.state = 7024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 7023;
            this.identifierListWithParentheses();
        }

        this.state = 7028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.MATCH_SYMBOL) {
            this.state = 7026;
            this.match(MySQLParser.MATCH_SYMBOL);
            this.state = 7027;
            localctx.match = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FULL_SYMBOL || _la===MySQLParser.PARTIAL_SYMBOL || _la===MySQLParser.SIMPLE_SYMBOL)) {
                localctx.match = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 7046;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,907,this._ctx);
        if(la_===1) {
            this.state = 7030;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 7031;
            localctx.option = this.match(MySQLParser.UPDATE_SYMBOL);
            this.state = 7032;
            this.deleteOption();
            this.state = 7036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ON_SYMBOL) {
                this.state = 7033;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 7034;
                this.match(MySQLParser.DELETE_SYMBOL);
                this.state = 7035;
                this.deleteOption();
            }


        } else if(la_===2) {
            this.state = 7038;
            this.match(MySQLParser.ON_SYMBOL);
            this.state = 7039;
            localctx.option = this.match(MySQLParser.DELETE_SYMBOL);
            this.state = 7040;
            this.deleteOption();
            this.state = 7044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ON_SYMBOL) {
                this.state = 7041;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 7042;
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.state = 7043;
                this.deleteOption();
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_deleteOption;
    return this;
}

DeleteOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteOptionContext.prototype.constructor = DeleteOptionContext;

DeleteOptionContext.prototype.RESTRICT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
};

DeleteOptionContext.prototype.CASCADE_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
};

DeleteOptionContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

DeleteOptionContext.prototype.nullLiteral = function() {
    return this.getTypedRuleContext(NullLiteralContext,0);
};

DeleteOptionContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

DeleteOptionContext.prototype.ACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
};

DeleteOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeleteOption(this);
	}
};

DeleteOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeleteOption(this);
	}
};

DeleteOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeleteOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeleteOptionContext = DeleteOptionContext;

MySQLParser.prototype.deleteOption = function() {

    var localctx = new DeleteOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 878, MySQLParser.RULE_deleteOption);
    var _la = 0; // Token type
    try {
        this.state = 7053;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CASCADE_SYMBOL:
        case MySQLParser.RESTRICT_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7048;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CASCADE_SYMBOL || _la===MySQLParser.RESTRICT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.SET_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7049;
            this.match(MySQLParser.SET_SYMBOL);
            this.state = 7050;
            this.nullLiteral();
            break;
        case MySQLParser.NO_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 7051;
            this.match(MySQLParser.NO_SYMBOL);
            this.state = 7052;
            this.match(MySQLParser.ACTION_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyList;
    return this;
}

KeyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyListContext.prototype.constructor = KeyListContext;

KeyListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

KeyListContext.prototype.keyPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyPartContext);
    } else {
        return this.getTypedRuleContext(KeyPartContext,i);
    }
};

KeyListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

KeyListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


KeyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyList(this);
	}
};

KeyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyList(this);
	}
};

KeyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyListContext = KeyListContext;

MySQLParser.prototype.keyList = function() {

    var localctx = new KeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 880, MySQLParser.RULE_keyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7055;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7056;
        this.keyPart();
        this.state = 7061;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 7057;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 7058;
            this.keyPart();
            this.state = 7063;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7064;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyPart;
    return this;
}

KeyPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyPartContext.prototype.constructor = KeyPartContext;

KeyPartContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

KeyPartContext.prototype.fieldLength = function() {
    return this.getTypedRuleContext(FieldLengthContext,0);
};

KeyPartContext.prototype.direction = function() {
    return this.getTypedRuleContext(DirectionContext,0);
};

KeyPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyPart(this);
	}
};

KeyPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyPart(this);
	}
};

KeyPartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyPart(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyPartContext = KeyPartContext;

MySQLParser.prototype.keyPart = function() {

    var localctx = new KeyPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 882, MySQLParser.RULE_keyPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7066;
        this.identifier();
        this.state = 7068;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 7067;
            this.fieldLength();
        }

        this.state = 7071;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ASC_SYMBOL || _la===MySQLParser.DESC_SYMBOL) {
            this.state = 7070;
            this.direction();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyListWithExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyListWithExpression;
    return this;
}

KeyListWithExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyListWithExpressionContext.prototype.constructor = KeyListWithExpressionContext;

KeyListWithExpressionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

KeyListWithExpressionContext.prototype.keyPartOrExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyPartOrExpressionContext);
    } else {
        return this.getTypedRuleContext(KeyPartOrExpressionContext,i);
    }
};

KeyListWithExpressionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

KeyListWithExpressionContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


KeyListWithExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyListWithExpression(this);
	}
};

KeyListWithExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyListWithExpression(this);
	}
};

KeyListWithExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyListWithExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyListWithExpressionContext = KeyListWithExpressionContext;

MySQLParser.prototype.keyListWithExpression = function() {

    var localctx = new KeyListWithExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 884, MySQLParser.RULE_keyListWithExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7073;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7074;
        this.keyPartOrExpression();
        this.state = 7079;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 7075;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 7076;
            this.keyPartOrExpression();
            this.state = 7081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7082;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyPartOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyPartOrExpression;
    return this;
}

KeyPartOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyPartOrExpressionContext.prototype.constructor = KeyPartOrExpressionContext;

KeyPartOrExpressionContext.prototype.keyPart = function() {
    return this.getTypedRuleContext(KeyPartContext,0);
};

KeyPartOrExpressionContext.prototype.exprWithParentheses = function() {
    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
};

KeyPartOrExpressionContext.prototype.direction = function() {
    return this.getTypedRuleContext(DirectionContext,0);
};

KeyPartOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyPartOrExpression(this);
	}
};

KeyPartOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyPartOrExpression(this);
	}
};

KeyPartOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyPartOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyPartOrExpressionContext = KeyPartOrExpressionContext;

MySQLParser.prototype.keyPartOrExpression = function() {

    var localctx = new KeyPartOrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 886, MySQLParser.RULE_keyPartOrExpression);
    var _la = 0; // Token type
    try {
        this.state = 7089;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7084;
            this.keyPart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7085;
            this.exprWithParentheses();
            this.state = 7087;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ASC_SYMBOL || _la===MySQLParser.DESC_SYMBOL) {
                this.state = 7086;
                this.direction();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyListVariantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keyListVariants;
    return this;
}

KeyListVariantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyListVariantsContext.prototype.constructor = KeyListVariantsContext;

KeyListVariantsContext.prototype.keyListWithExpression = function() {
    return this.getTypedRuleContext(KeyListWithExpressionContext,0);
};

KeyListVariantsContext.prototype.keyList = function() {
    return this.getTypedRuleContext(KeyListContext,0);
};

KeyListVariantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeyListVariants(this);
	}
};

KeyListVariantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeyListVariants(this);
	}
};

KeyListVariantsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeyListVariants(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeyListVariantsContext = KeyListVariantsContext;

MySQLParser.prototype.keyListVariants = function() {

    var localctx = new KeyListVariantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 888, MySQLParser.RULE_keyListVariants);
    try {
        this.state = 7095;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,915,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7091;
            if (!( serverVersion >= 80013)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80013");
            }
            this.state = 7092;
            this.keyListWithExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7093;
            if (!( serverVersion < 80013)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80013");
            }
            this.state = 7094;
            this.keyList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexType;
    this.algorithm = null; // Token
    return this;
}

IndexTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexTypeContext.prototype.constructor = IndexTypeContext;

IndexTypeContext.prototype.BTREE_SYMBOL = function() {
    return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
};

IndexTypeContext.prototype.RTREE_SYMBOL = function() {
    return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
};

IndexTypeContext.prototype.HASH_SYMBOL = function() {
    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
};

IndexTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexType(this);
	}
};

IndexTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexType(this);
	}
};

IndexTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexTypeContext = IndexTypeContext;

MySQLParser.prototype.indexType = function() {

    var localctx = new IndexTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 890, MySQLParser.RULE_indexType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7097;
        localctx.algorithm = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.BTREE_SYMBOL || _la===MySQLParser.HASH_SYMBOL || _la===MySQLParser.RTREE_SYMBOL)) {
            localctx.algorithm = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexOption;
    return this;
}

IndexOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexOptionContext.prototype.constructor = IndexOptionContext;

IndexOptionContext.prototype.commonIndexOption = function() {
    return this.getTypedRuleContext(CommonIndexOptionContext,0);
};

IndexOptionContext.prototype.indexTypeClause = function() {
    return this.getTypedRuleContext(IndexTypeClauseContext,0);
};

IndexOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexOption(this);
	}
};

IndexOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexOption(this);
	}
};

IndexOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexOptionContext = IndexOptionContext;

MySQLParser.prototype.indexOption = function() {

    var localctx = new IndexOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 892, MySQLParser.RULE_indexOption);
    try {
        this.state = 7101;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,916,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7099;
            this.commonIndexOption();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7100;
            this.indexTypeClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommonIndexOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_commonIndexOption;
    return this;
}

CommonIndexOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonIndexOptionContext.prototype.constructor = CommonIndexOptionContext;

CommonIndexOptionContext.prototype.KEY_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
};

CommonIndexOptionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

CommonIndexOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

CommonIndexOptionContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

CommonIndexOptionContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

CommonIndexOptionContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

CommonIndexOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCommonIndexOption(this);
	}
};

CommonIndexOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCommonIndexOption(this);
	}
};

CommonIndexOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCommonIndexOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CommonIndexOptionContext = CommonIndexOptionContext;

MySQLParser.prototype.commonIndexOption = function() {

    var localctx = new CommonIndexOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 894, MySQLParser.RULE_commonIndexOption);
    var _la = 0; // Token type
    try {
        this.state = 7112;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7103;
            this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
            this.state = 7105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7104;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7107;
            this.ulong_number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7108;
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 7109;
            this.textLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7110;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 7111;
            this.visibility();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_visibility;
    return this;
}

VisibilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityContext.prototype.constructor = VisibilityContext;

VisibilityContext.prototype.VISIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
};

VisibilityContext.prototype.INVISIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
};

VisibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVisibility(this);
	}
};

VisibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVisibility(this);
	}
};

VisibilityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVisibility(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VisibilityContext = VisibilityContext;

MySQLParser.prototype.visibility = function() {

    var localctx = new VisibilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 896, MySQLParser.RULE_visibility);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7114;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.INVISIBLE_SYMBOL || _la===MySQLParser.VISIBLE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexTypeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexTypeClause;
    return this;
}

IndexTypeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexTypeClauseContext.prototype.constructor = IndexTypeClauseContext;

IndexTypeClauseContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

IndexTypeClauseContext.prototype.USING_SYMBOL = function() {
    return this.getToken(MySQLParser.USING_SYMBOL, 0);
};

IndexTypeClauseContext.prototype.TYPE_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
};

IndexTypeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexTypeClause(this);
	}
};

IndexTypeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexTypeClause(this);
	}
};

IndexTypeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexTypeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexTypeClauseContext = IndexTypeClauseContext;

MySQLParser.prototype.indexTypeClause = function() {

    var localctx = new IndexTypeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 898, MySQLParser.RULE_indexTypeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7116;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.TYPE_SYMBOL || _la===MySQLParser.USING_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 7117;
        this.indexType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FulltextIndexOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fulltextIndexOption;
    return this;
}

FulltextIndexOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltextIndexOptionContext.prototype.constructor = FulltextIndexOptionContext;

FulltextIndexOptionContext.prototype.commonIndexOption = function() {
    return this.getTypedRuleContext(CommonIndexOptionContext,0);
};

FulltextIndexOptionContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

FulltextIndexOptionContext.prototype.PARSER_SYMBOL = function() {
    return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
};

FulltextIndexOptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FulltextIndexOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFulltextIndexOption(this);
	}
};

FulltextIndexOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFulltextIndexOption(this);
	}
};

FulltextIndexOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFulltextIndexOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FulltextIndexOptionContext = FulltextIndexOptionContext;

MySQLParser.prototype.fulltextIndexOption = function() {

    var localctx = new FulltextIndexOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 900, MySQLParser.RULE_fulltextIndexOption);
    try {
        this.state = 7123;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,919,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7119;
            this.commonIndexOption();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7120;
            this.match(MySQLParser.WITH_SYMBOL);
            this.state = 7121;
            this.match(MySQLParser.PARSER_SYMBOL);
            this.state = 7122;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpatialIndexOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_spatialIndexOption;
    return this;
}

SpatialIndexOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpatialIndexOptionContext.prototype.constructor = SpatialIndexOptionContext;

SpatialIndexOptionContext.prototype.commonIndexOption = function() {
    return this.getTypedRuleContext(CommonIndexOptionContext,0);
};

SpatialIndexOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpatialIndexOption(this);
	}
};

SpatialIndexOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpatialIndexOption(this);
	}
};

SpatialIndexOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpatialIndexOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SpatialIndexOptionContext = SpatialIndexOptionContext;

MySQLParser.prototype.spatialIndexOption = function() {

    var localctx = new SpatialIndexOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 902, MySQLParser.RULE_spatialIndexOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7125;
        this.commonIndexOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dataTypeDefinition;
    return this;
}

DataTypeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeDefinitionContext.prototype.constructor = DataTypeDefinitionContext;

DataTypeDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

DataTypeDefinitionContext.prototype.EOF = function() {
    return this.getToken(MySQLParser.EOF, 0);
};

DataTypeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDataTypeDefinition(this);
	}
};

DataTypeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDataTypeDefinition(this);
	}
};

DataTypeDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDataTypeDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DataTypeDefinitionContext = DataTypeDefinitionContext;

MySQLParser.prototype.dataTypeDefinition = function() {

    var localctx = new DataTypeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 904, MySQLParser.RULE_dataTypeDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7127;
        this.dataType();
        this.state = 7128;
        this.match(MySQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dataType;
    this.type = null; // Token
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;

DataTypeContext.prototype.INT_SYMBOL = function() {
    return this.getToken(MySQLParser.INT_SYMBOL, 0);
};

DataTypeContext.prototype.TINYINT_SYMBOL = function() {
    return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
};

DataTypeContext.prototype.SMALLINT_SYMBOL = function() {
    return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
};

DataTypeContext.prototype.MEDIUMINT_SYMBOL = function() {
    return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
};

DataTypeContext.prototype.BIGINT_SYMBOL = function() {
    return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
};

DataTypeContext.prototype.fieldLength = function() {
    return this.getTypedRuleContext(FieldLengthContext,0);
};

DataTypeContext.prototype.fieldOptions = function() {
    return this.getTypedRuleContext(FieldOptionsContext,0);
};

DataTypeContext.prototype.REAL_SYMBOL = function() {
    return this.getToken(MySQLParser.REAL_SYMBOL, 0);
};

DataTypeContext.prototype.DOUBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
};

DataTypeContext.prototype.precision = function() {
    return this.getTypedRuleContext(PrecisionContext,0);
};

DataTypeContext.prototype.PRECISION_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
};

DataTypeContext.prototype.FLOAT_SYMBOL = function() {
    return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
};

DataTypeContext.prototype.DECIMAL_SYMBOL = function() {
    return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
};

DataTypeContext.prototype.NUMERIC_SYMBOL = function() {
    return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
};

DataTypeContext.prototype.FIXED_SYMBOL = function() {
    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
};

DataTypeContext.prototype.floatOptions = function() {
    return this.getTypedRuleContext(FloatOptionsContext,0);
};

DataTypeContext.prototype.BIT_SYMBOL = function() {
    return this.getToken(MySQLParser.BIT_SYMBOL, 0);
};

DataTypeContext.prototype.BOOL_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
};

DataTypeContext.prototype.BOOLEAN_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
};

DataTypeContext.prototype.CHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
};

DataTypeContext.prototype.charsetWithOptBinary = function() {
    return this.getTypedRuleContext(CharsetWithOptBinaryContext,0);
};

DataTypeContext.prototype.nchar = function() {
    return this.getTypedRuleContext(NcharContext,0);
};

DataTypeContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

DataTypeContext.prototype.VARYING_SYMBOL = function() {
    return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
};

DataTypeContext.prototype.VARCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
};

DataTypeContext.prototype.NATIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
};

DataTypeContext.prototype.NVARCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
};

DataTypeContext.prototype.NCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
};

DataTypeContext.prototype.VARBINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
};

DataTypeContext.prototype.YEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
};

DataTypeContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

DataTypeContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

DataTypeContext.prototype.typeDatetimePrecision = function() {
    return this.getTypedRuleContext(TypeDatetimePrecisionContext,0);
};

DataTypeContext.prototype.TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
};

DataTypeContext.prototype.DATETIME_SYMBOL = function() {
    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
};

DataTypeContext.prototype.TINYBLOB_SYMBOL = function() {
    return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
};

DataTypeContext.prototype.BLOB_SYMBOL = function() {
    return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
};

DataTypeContext.prototype.MEDIUMBLOB_SYMBOL = function() {
    return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
};

DataTypeContext.prototype.LONGBLOB_SYMBOL = function() {
    return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
};

DataTypeContext.prototype.LONG_SYMBOL = function() {
    return this.getToken(MySQLParser.LONG_SYMBOL, 0);
};

DataTypeContext.prototype.TINYTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
};

DataTypeContext.prototype.TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
};

DataTypeContext.prototype.MEDIUMTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
};

DataTypeContext.prototype.LONGTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
};

DataTypeContext.prototype.stringList = function() {
    return this.getTypedRuleContext(StringListContext,0);
};

DataTypeContext.prototype.ENUM_SYMBOL = function() {
    return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
};

DataTypeContext.prototype.SET_SYMBOL = function() {
    return this.getToken(MySQLParser.SET_SYMBOL, 0);
};

DataTypeContext.prototype.SERIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
};

DataTypeContext.prototype.JSON_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
};

DataTypeContext.prototype.GEOMETRY_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
};

DataTypeContext.prototype.GEOMETRYCOLLECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
};

DataTypeContext.prototype.POINT_SYMBOL = function() {
    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
};

DataTypeContext.prototype.MULTIPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
};

DataTypeContext.prototype.LINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
};

DataTypeContext.prototype.MULTILINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
};

DataTypeContext.prototype.POLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
};

DataTypeContext.prototype.MULTIPOLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
};

DataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDataType(this);
	}
};

DataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDataType(this);
	}
};

DataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DataTypeContext = DataTypeContext;

MySQLParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 906, MySQLParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.state = 7277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7130;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BIGINT_SYMBOL || _la===MySQLParser.INT_SYMBOL || _la===MySQLParser.MEDIUMINT_SYMBOL || _la===MySQLParser.SMALLINT_SYMBOL || _la===MySQLParser.TINYINT_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7132;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,920,this._ctx);
            if(la_===1) {
                this.state = 7131;
                this.fieldLength();

            }
            this.state = 7135;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,921,this._ctx);
            if(la_===1) {
                this.state = 7134;
                this.fieldOptions();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7142;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.REAL_SYMBOL:
                this.state = 7137;
                localctx.type = this.match(MySQLParser.REAL_SYMBOL);
                break;
            case MySQLParser.DOUBLE_SYMBOL:
                this.state = 7138;
                localctx.type = this.match(MySQLParser.DOUBLE_SYMBOL);
                this.state = 7140;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,922,this._ctx);
                if(la_===1) {
                    this.state = 7139;
                    this.match(MySQLParser.PRECISION_SYMBOL);

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 7145;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,924,this._ctx);
            if(la_===1) {
                this.state = 7144;
                this.precision();

            }
            this.state = 7148;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,925,this._ctx);
            if(la_===1) {
                this.state = 7147;
                this.fieldOptions();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7150;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FIXED_SYMBOL || _la===MySQLParser.DECIMAL_SYMBOL || _la===MySQLParser.FLOAT_SYMBOL || _la===MySQLParser.NUMERIC_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7152;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,926,this._ctx);
            if(la_===1) {
                this.state = 7151;
                this.floatOptions();

            }
            this.state = 7155;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,927,this._ctx);
            if(la_===1) {
                this.state = 7154;
                this.fieldOptions();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 7157;
            localctx.type = this.match(MySQLParser.BIT_SYMBOL);
            this.state = 7159;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,928,this._ctx);
            if(la_===1) {
                this.state = 7158;
                this.fieldLength();

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 7161;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BOOL_SYMBOL || _la===MySQLParser.BOOLEAN_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 7162;
            localctx.type = this.match(MySQLParser.CHAR_SYMBOL);
            this.state = 7164;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,929,this._ctx);
            if(la_===1) {
                this.state = 7163;
                this.fieldLength();

            }
            this.state = 7167;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,930,this._ctx);
            if(la_===1) {
                this.state = 7166;
                this.charsetWithOptBinary();

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 7169;
            this.nchar();
            this.state = 7171;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,931,this._ctx);
            if(la_===1) {
                this.state = 7170;
                this.fieldLength();

            }
            this.state = 7174;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,932,this._ctx);
            if(la_===1) {
                this.state = 7173;
                this.match(MySQLParser.BINARY_SYMBOL);

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 7176;
            localctx.type = this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 7178;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,933,this._ctx);
            if(la_===1) {
                this.state = 7177;
                this.fieldLength();

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 7183;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CHAR_SYMBOL:
                this.state = 7180;
                localctx.type = this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 7181;
                this.match(MySQLParser.VARYING_SYMBOL);
                break;
            case MySQLParser.VARCHAR_SYMBOL:
                this.state = 7182;
                localctx.type = this.match(MySQLParser.VARCHAR_SYMBOL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 7185;
            this.fieldLength();
            this.state = 7187;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,935,this._ctx);
            if(la_===1) {
                this.state = 7186;
                this.charsetWithOptBinary();

            }
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 7199;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,936,this._ctx);
            switch(la_) {
            case 1:
                this.state = 7189;
                localctx.type = this.match(MySQLParser.NATIONAL_SYMBOL);
                this.state = 7190;
                this.match(MySQLParser.VARCHAR_SYMBOL);
                break;

            case 2:
                this.state = 7191;
                localctx.type = this.match(MySQLParser.NVARCHAR_SYMBOL);
                break;

            case 3:
                this.state = 7192;
                localctx.type = this.match(MySQLParser.NCHAR_SYMBOL);
                this.state = 7193;
                this.match(MySQLParser.VARCHAR_SYMBOL);
                break;

            case 4:
                this.state = 7194;
                localctx.type = this.match(MySQLParser.NATIONAL_SYMBOL);
                this.state = 7195;
                this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 7196;
                this.match(MySQLParser.VARYING_SYMBOL);
                break;

            case 5:
                this.state = 7197;
                localctx.type = this.match(MySQLParser.NCHAR_SYMBOL);
                this.state = 7198;
                this.match(MySQLParser.VARYING_SYMBOL);
                break;

            }
            this.state = 7201;
            this.fieldLength();
            this.state = 7203;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,937,this._ctx);
            if(la_===1) {
                this.state = 7202;
                this.match(MySQLParser.BINARY_SYMBOL);

            }
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 7205;
            localctx.type = this.match(MySQLParser.VARBINARY_SYMBOL);
            this.state = 7206;
            this.fieldLength();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 7207;
            localctx.type = this.match(MySQLParser.YEAR_SYMBOL);
            this.state = 7209;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,938,this._ctx);
            if(la_===1) {
                this.state = 7208;
                this.fieldLength();

            }
            this.state = 7212;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,939,this._ctx);
            if(la_===1) {
                this.state = 7211;
                this.fieldOptions();

            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 7214;
            localctx.type = this.match(MySQLParser.DATE_SYMBOL);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 7215;
            localctx.type = this.match(MySQLParser.TIME_SYMBOL);
            this.state = 7217;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,940,this._ctx);
            if(la_===1) {
                this.state = 7216;
                this.typeDatetimePrecision();

            }
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 7219;
            localctx.type = this.match(MySQLParser.TIMESTAMP_SYMBOL);
            this.state = 7221;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,941,this._ctx);
            if(la_===1) {
                this.state = 7220;
                this.typeDatetimePrecision();

            }
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 7223;
            localctx.type = this.match(MySQLParser.DATETIME_SYMBOL);
            this.state = 7225;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,942,this._ctx);
            if(la_===1) {
                this.state = 7224;
                this.typeDatetimePrecision();

            }
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 7227;
            localctx.type = this.match(MySQLParser.TINYBLOB_SYMBOL);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 7228;
            localctx.type = this.match(MySQLParser.BLOB_SYMBOL);
            this.state = 7230;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,943,this._ctx);
            if(la_===1) {
                this.state = 7229;
                this.fieldLength();

            }
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 7232;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LONGBLOB_SYMBOL || _la===MySQLParser.MEDIUMBLOB_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 7233;
            localctx.type = this.match(MySQLParser.LONG_SYMBOL);
            this.state = 7234;
            this.match(MySQLParser.VARBINARY_SYMBOL);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 7235;
            localctx.type = this.match(MySQLParser.LONG_SYMBOL);
            this.state = 7239;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,944,this._ctx);
            if(la_===1) {
                this.state = 7236;
                this.match(MySQLParser.CHAR_SYMBOL);
                this.state = 7237;
                this.match(MySQLParser.VARYING_SYMBOL);

            } else if(la_===2) {
                this.state = 7238;
                this.match(MySQLParser.VARCHAR_SYMBOL);

            }
            this.state = 7242;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,945,this._ctx);
            if(la_===1) {
                this.state = 7241;
                this.charsetWithOptBinary();

            }
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 7244;
            localctx.type = this.match(MySQLParser.TINYTEXT_SYMBOL);
            this.state = 7246;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,946,this._ctx);
            if(la_===1) {
                this.state = 7245;
                this.charsetWithOptBinary();

            }
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 7248;
            localctx.type = this.match(MySQLParser.TEXT_SYMBOL);
            this.state = 7250;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,947,this._ctx);
            if(la_===1) {
                this.state = 7249;
                this.fieldLength();

            }
            this.state = 7253;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,948,this._ctx);
            if(la_===1) {
                this.state = 7252;
                this.charsetWithOptBinary();

            }
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 7255;
            localctx.type = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
            this.state = 7257;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,949,this._ctx);
            if(la_===1) {
                this.state = 7256;
                this.charsetWithOptBinary();

            }
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 7259;
            localctx.type = this.match(MySQLParser.LONGTEXT_SYMBOL);
            this.state = 7261;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,950,this._ctx);
            if(la_===1) {
                this.state = 7260;
                this.charsetWithOptBinary();

            }
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 7263;
            localctx.type = this.match(MySQLParser.ENUM_SYMBOL);
            this.state = 7264;
            this.stringList();
            this.state = 7266;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,951,this._ctx);
            if(la_===1) {
                this.state = 7265;
                this.charsetWithOptBinary();

            }
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 7268;
            localctx.type = this.match(MySQLParser.SET_SYMBOL);
            this.state = 7269;
            this.stringList();
            this.state = 7271;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,952,this._ctx);
            if(la_===1) {
                this.state = 7270;
                this.charsetWithOptBinary();

            }
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 7273;
            localctx.type = this.match(MySQLParser.SERIAL_SYMBOL);
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 7274;
            if (!( serverVersion >= 50708)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
            }
            this.state = 7275;
            localctx.type = this.match(MySQLParser.JSON_SYMBOL);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 7276;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (MySQLParser.GEOMETRY_SYMBOL - 151)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 151)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 151)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (MySQLParser.MULTILINESTRING_SYMBOL - 224)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 224)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 224)))) !== 0) || _la===MySQLParser.POINT_SYMBOL || _la===MySQLParser.POLYGON_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NcharContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_nchar;
    this.type = null; // Token
    return this;
}

NcharContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NcharContext.prototype.constructor = NcharContext;

NcharContext.prototype.NCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
};

NcharContext.prototype.CHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
};

NcharContext.prototype.NATIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
};

NcharContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNchar(this);
	}
};

NcharContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNchar(this);
	}
};

NcharContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNchar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NcharContext = NcharContext;

MySQLParser.prototype.nchar = function() {

    var localctx = new NcharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 908, MySQLParser.RULE_nchar);
    try {
        this.state = 7282;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.NCHAR_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7279;
            localctx.type = this.match(MySQLParser.NCHAR_SYMBOL);
            break;
        case MySQLParser.NATIONAL_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7280;
            localctx.type = this.match(MySQLParser.NATIONAL_SYMBOL);
            this.state = 7281;
            this.match(MySQLParser.CHAR_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RealTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_realType;
    this.type = null; // Token
    return this;
}

RealTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RealTypeContext.prototype.constructor = RealTypeContext;

RealTypeContext.prototype.REAL_SYMBOL = function() {
    return this.getToken(MySQLParser.REAL_SYMBOL, 0);
};

RealTypeContext.prototype.DOUBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
};

RealTypeContext.prototype.PRECISION_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
};

RealTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRealType(this);
	}
};

RealTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRealType(this);
	}
};

RealTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRealType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RealTypeContext = RealTypeContext;

MySQLParser.prototype.realType = function() {

    var localctx = new RealTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 910, MySQLParser.RULE_realType);
    try {
        this.state = 7289;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.REAL_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7284;
            localctx.type = this.match(MySQLParser.REAL_SYMBOL);
            break;
        case MySQLParser.DOUBLE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7285;
            localctx.type = this.match(MySQLParser.DOUBLE_SYMBOL);
            this.state = 7287;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,955,this._ctx);
            if(la_===1) {
                this.state = 7286;
                this.match(MySQLParser.PRECISION_SYMBOL);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldLength;
    return this;
}

FieldLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldLengthContext.prototype.constructor = FieldLengthContext;

FieldLengthContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

FieldLengthContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

FieldLengthContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

FieldLengthContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
};

FieldLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldLength(this);
	}
};

FieldLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldLength(this);
	}
};

FieldLengthContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldLength(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldLengthContext = FieldLengthContext;

MySQLParser.prototype.fieldLength = function() {

    var localctx = new FieldLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 912, MySQLParser.RULE_fieldLength);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7291;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7294;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,957,this._ctx);
        switch(la_) {
        case 1:
            this.state = 7292;
            this.real_ulonglong_number();
            break;

        case 2:
            this.state = 7293;
            this.match(MySQLParser.DECIMAL_NUMBER);
            break;

        }
        this.state = 7296;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldOptions;
    return this;
}

FieldOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldOptionsContext.prototype.constructor = FieldOptionsContext;

FieldOptionsContext.prototype.SIGNED_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SIGNED_SYMBOL);
    } else {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
    }
};


FieldOptionsContext.prototype.UNSIGNED_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
    } else {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
    }
};


FieldOptionsContext.prototype.ZEROFILL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
    }
};


FieldOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldOptions(this);
	}
};

FieldOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldOptions(this);
	}
};

FieldOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldOptionsContext = FieldOptionsContext;

MySQLParser.prototype.fieldOptions = function() {

    var localctx = new FieldOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 914, MySQLParser.RULE_fieldOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7299; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 7298;
        		_la = this._input.LA(1);
        		if(!(_la===MySQLParser.SIGNED_SYMBOL || _la===MySQLParser.UNSIGNED_SYMBOL || _la===MySQLParser.ZEROFILL_SYMBOL)) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 7301; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,958, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetWithOptBinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_charsetWithOptBinary;
    return this;
}

CharsetWithOptBinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetWithOptBinaryContext.prototype.constructor = CharsetWithOptBinaryContext;

CharsetWithOptBinaryContext.prototype.ascii = function() {
    return this.getTypedRuleContext(AsciiContext,0);
};

CharsetWithOptBinaryContext.prototype.unicode = function() {
    return this.getTypedRuleContext(UnicodeContext,0);
};

CharsetWithOptBinaryContext.prototype.BYTE_SYMBOL = function() {
    return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
};

CharsetWithOptBinaryContext.prototype.charset = function() {
    return this.getTypedRuleContext(CharsetContext,0);
};

CharsetWithOptBinaryContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

CharsetWithOptBinaryContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

CharsetWithOptBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharsetWithOptBinary(this);
	}
};

CharsetWithOptBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharsetWithOptBinary(this);
	}
};

CharsetWithOptBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharsetWithOptBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CharsetWithOptBinaryContext = CharsetWithOptBinaryContext;

MySQLParser.prototype.charsetWithOptBinary = function() {

    var localctx = new CharsetWithOptBinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 916, MySQLParser.RULE_charsetWithOptBinary);
    try {
        this.state = 7317;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,961,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7303;
            this.ascii();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7304;
            this.unicode();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7305;
            this.match(MySQLParser.BYTE_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 7306;
            this.charset();
            this.state = 7307;
            this.charsetName();
            this.state = 7309;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,959,this._ctx);
            if(la_===1) {
                this.state = 7308;
                this.match(MySQLParser.BINARY_SYMBOL);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 7311;
            this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 7315;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,960,this._ctx);
            if(la_===1) {
                this.state = 7312;
                this.charset();
                this.state = 7313;
                this.charsetName();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AsciiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ascii;
    return this;
}

AsciiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsciiContext.prototype.constructor = AsciiContext;

AsciiContext.prototype.ASCII_SYMBOL = function() {
    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
};

AsciiContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

AsciiContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAscii(this);
	}
};

AsciiContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAscii(this);
	}
};

AsciiContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAscii(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AsciiContext = AsciiContext;

MySQLParser.prototype.ascii = function() {

    var localctx = new AsciiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 918, MySQLParser.RULE_ascii);
    try {
        this.state = 7325;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ASCII_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7319;
            this.match(MySQLParser.ASCII_SYMBOL);
            this.state = 7321;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,962,this._ctx);
            if(la_===1) {
                this.state = 7320;
                this.match(MySQLParser.BINARY_SYMBOL);

            }
            break;
        case MySQLParser.BINARY_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7323;
            this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 7324;
            this.match(MySQLParser.ASCII_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnicodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unicode;
    return this;
}

UnicodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnicodeContext.prototype.constructor = UnicodeContext;

UnicodeContext.prototype.UNICODE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
};

UnicodeContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

UnicodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnicode(this);
	}
};

UnicodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnicode(this);
	}
};

UnicodeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnicode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnicodeContext = UnicodeContext;

MySQLParser.prototype.unicode = function() {

    var localctx = new UnicodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 920, MySQLParser.RULE_unicode);
    try {
        this.state = 7333;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.UNICODE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7327;
            this.match(MySQLParser.UNICODE_SYMBOL);
            this.state = 7329;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,964,this._ctx);
            if(la_===1) {
                this.state = 7328;
                this.match(MySQLParser.BINARY_SYMBOL);

            }
            break;
        case MySQLParser.BINARY_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7331;
            this.match(MySQLParser.BINARY_SYMBOL);
            this.state = 7332;
            this.match(MySQLParser.UNICODE_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WsNumCodepointsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_wsNumCodepoints;
    return this;
}

WsNumCodepointsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsNumCodepointsContext.prototype.constructor = WsNumCodepointsContext;

WsNumCodepointsContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

WsNumCodepointsContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

WsNumCodepointsContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

WsNumCodepointsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWsNumCodepoints(this);
	}
};

WsNumCodepointsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWsNumCodepoints(this);
	}
};

WsNumCodepointsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWsNumCodepoints(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WsNumCodepointsContext = WsNumCodepointsContext;

MySQLParser.prototype.wsNumCodepoints = function() {

    var localctx = new WsNumCodepointsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 922, MySQLParser.RULE_wsNumCodepoints);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7335;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7336;
        this.real_ulong_number();
        this.state = 7337;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDatetimePrecisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_typeDatetimePrecision;
    return this;
}

TypeDatetimePrecisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDatetimePrecisionContext.prototype.constructor = TypeDatetimePrecisionContext;

TypeDatetimePrecisionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

TypeDatetimePrecisionContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

TypeDatetimePrecisionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

TypeDatetimePrecisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTypeDatetimePrecision(this);
	}
};

TypeDatetimePrecisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTypeDatetimePrecision(this);
	}
};

TypeDatetimePrecisionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTypeDatetimePrecision(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TypeDatetimePrecisionContext = TypeDatetimePrecisionContext;

MySQLParser.prototype.typeDatetimePrecision = function() {

    var localctx = new TypeDatetimePrecisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 924, MySQLParser.RULE_typeDatetimePrecision);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7339;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7340;
        this.match(MySQLParser.INT_NUMBER);
        this.state = 7341;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_charsetName;
    return this;
}

CharsetNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetNameContext.prototype.constructor = CharsetNameContext;

CharsetNameContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

CharsetNameContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

CharsetNameContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

CharsetNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharsetName(this);
	}
};

CharsetNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharsetName(this);
	}
};

CharsetNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharsetName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CharsetNameContext = CharsetNameContext;

MySQLParser.prototype.charsetName = function() {

    var localctx = new CharsetNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 926, MySQLParser.RULE_charsetName);
    try {
        this.state = 7347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,966,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7343;
            this.textOrIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7344;
            this.match(MySQLParser.BINARY_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7345;
            if (!( serverVersion < 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
            }
            this.state = 7346;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_collationName;
    return this;
}

CollationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollationNameContext.prototype.constructor = CollationNameContext;

CollationNameContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

CollationNameContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

CollationNameContext.prototype.BINARY_SYMBOL = function() {
    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
};

CollationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollationName(this);
	}
};

CollationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollationName(this);
	}
};

CollationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CollationNameContext = CollationNameContext;

MySQLParser.prototype.collationName = function() {

    var localctx = new CollationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 928, MySQLParser.RULE_collationName);
    try {
        this.state = 7354;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,967,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7349;
            this.textOrIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7350;
            if (!( serverVersion < 80011)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
            }
            this.state = 7351;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7352;
            if (!( serverVersion >= 80018)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
            }
            this.state = 7353;
            this.match(MySQLParser.BINARY_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTableOptions;
    return this;
}

CreateTableOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableOptionsContext.prototype.constructor = CreateTableOptionsContext;

CreateTableOptionsContext.prototype.createTableOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateTableOptionContext);
    } else {
        return this.getTypedRuleContext(CreateTableOptionContext,i);
    }
};

CreateTableOptionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


CreateTableOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTableOptions(this);
	}
};

CreateTableOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTableOptions(this);
	}
};

CreateTableOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTableOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTableOptionsContext = CreateTableOptionsContext;

MySQLParser.prototype.createTableOptions = function() {

    var localctx = new CreateTableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 930, MySQLParser.RULE_createTableOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7356;
        this.createTableOption();
        this.state = 7363;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,969,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 7358;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,968,this._ctx);
                if(la_===1) {
                    this.state = 7357;
                    this.match(MySQLParser.COMMA_SYMBOL);

                }
                this.state = 7360;
                this.createTableOption(); 
            }
            this.state = 7365;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,969,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableOptionsSpaceSeparatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTableOptionsSpaceSeparated;
    return this;
}

CreateTableOptionsSpaceSeparatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableOptionsSpaceSeparatedContext.prototype.constructor = CreateTableOptionsSpaceSeparatedContext;

CreateTableOptionsSpaceSeparatedContext.prototype.createTableOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateTableOptionContext);
    } else {
        return this.getTypedRuleContext(CreateTableOptionContext,i);
    }
};

CreateTableOptionsSpaceSeparatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTableOptionsSpaceSeparated(this);
	}
};

CreateTableOptionsSpaceSeparatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTableOptionsSpaceSeparated(this);
	}
};

CreateTableOptionsSpaceSeparatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTableOptionsSpaceSeparated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTableOptionsSpaceSeparatedContext = CreateTableOptionsSpaceSeparatedContext;

MySQLParser.prototype.createTableOptionsSpaceSeparated = function() {

    var localctx = new CreateTableOptionsSpaceSeparatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 932, MySQLParser.RULE_createTableOptionsSpaceSeparated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7367; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 7366;
        		this.createTableOption();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 7369; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,970, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTableOption;
    this.option = null; // Token
    this.format = null; // Token
    this.method = null; // Token
    return this;
}

CreateTableOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableOptionContext.prototype.constructor = CreateTableOptionContext;

CreateTableOptionContext.prototype.engineRef = function() {
    return this.getTypedRuleContext(EngineRefContext,0);
};

CreateTableOptionContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

CreateTableOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

CreateTableOptionContext.prototype.SECONDARY_ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
};

CreateTableOptionContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

CreateTableOptionContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

CreateTableOptionContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

CreateTableOptionContext.prototype.ulonglong_number = function() {
    return this.getTypedRuleContext(Ulonglong_numberContext,0);
};

CreateTableOptionContext.prototype.MAX_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
};

CreateTableOptionContext.prototype.MIN_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
};

CreateTableOptionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

CreateTableOptionContext.prototype.AVG_ROW_LENGTH_SYMBOL = function() {
    return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
};

CreateTableOptionContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

CreateTableOptionContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

CreateTableOptionContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

CreateTableOptionContext.prototype.COMPRESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
};

CreateTableOptionContext.prototype.ENCRYPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
};

CreateTableOptionContext.prototype.AUTO_INCREMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.ternaryOption = function() {
    return this.getTypedRuleContext(TernaryOptionContext,0);
};

CreateTableOptionContext.prototype.PACK_KEYS_SYMBOL = function() {
    return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
};

CreateTableOptionContext.prototype.STATS_AUTO_RECALC_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
};

CreateTableOptionContext.prototype.STATS_PERSISTENT_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.STATS_SAMPLE_PAGES_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
};

CreateTableOptionContext.prototype.CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
};

CreateTableOptionContext.prototype.TABLE_CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
};

CreateTableOptionContext.prototype.DELAY_KEY_WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
};

CreateTableOptionContext.prototype.ROW_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.DYNAMIC_SYMBOL = function() {
    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
};

CreateTableOptionContext.prototype.FIXED_SYMBOL = function() {
    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
};

CreateTableOptionContext.prototype.COMPRESSED_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
};

CreateTableOptionContext.prototype.REDUNDANT_SYMBOL = function() {
    return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.COMPACT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
};

CreateTableOptionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

CreateTableOptionContext.prototype.tableRefList = function() {
    return this.getTypedRuleContext(TableRefListContext,0);
};

CreateTableOptionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

CreateTableOptionContext.prototype.UNION_SYMBOL = function() {
    return this.getToken(MySQLParser.UNION_SYMBOL, 0);
};

CreateTableOptionContext.prototype.defaultCharset = function() {
    return this.getTypedRuleContext(DefaultCharsetContext,0);
};

CreateTableOptionContext.prototype.defaultCollation = function() {
    return this.getTypedRuleContext(DefaultCollationContext,0);
};

CreateTableOptionContext.prototype.INSERT_METHOD_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
};

CreateTableOptionContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

CreateTableOptionContext.prototype.FIRST_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
};

CreateTableOptionContext.prototype.LAST_SYMBOL = function() {
    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
};

CreateTableOptionContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

CreateTableOptionContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

CreateTableOptionContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

CreateTableOptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CreateTableOptionContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

CreateTableOptionContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

CreateTableOptionContext.prototype.DISK_SYMBOL = function() {
    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
};

CreateTableOptionContext.prototype.MEMORY_SYMBOL = function() {
    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
};

CreateTableOptionContext.prototype.CONNECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
};

CreateTableOptionContext.prototype.KEY_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
};

CreateTableOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTableOption(this);
	}
};

CreateTableOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTableOption(this);
	}
};

CreateTableOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTableOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTableOptionContext = CreateTableOptionContext;

MySQLParser.prototype.createTableOption = function() {

    var localctx = new CreateTableOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 934, MySQLParser.RULE_createTableOption);
    var _la = 0; // Token type
    try {
        this.state = 7500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,995,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7371;
            localctx.option = this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 7373;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,971,this._ctx);
            if(la_===1) {
                this.state = 7372;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7375;
            this.engineRef();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7376;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 7377;
            localctx.option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
            this.state = 7379;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,972,this._ctx);
            if(la_===1) {
                this.state = 7378;
                this.equal();

            }
            this.state = 7383;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,973,this._ctx);
            switch(la_) {
            case 1:
                this.state = 7381;
                this.match(MySQLParser.NULL_SYMBOL);
                break;

            case 2:
                this.state = 7382;
                this.textOrIdentifier();
                break;

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7385;
            localctx.option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
            this.state = 7387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7386;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7389;
            this.ulonglong_number();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 7390;
            localctx.option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
            this.state = 7392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7391;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7394;
            this.ulonglong_number();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 7395;
            localctx.option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
            this.state = 7397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7396;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7399;
            this.ulong_number();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 7400;
            localctx.option = this.match(MySQLParser.PASSWORD_SYMBOL);
            this.state = 7402;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,977,this._ctx);
            if(la_===1) {
                this.state = 7401;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7404;
            this.textStringLiteral();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 7405;
            localctx.option = this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 7407;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,978,this._ctx);
            if(la_===1) {
                this.state = 7406;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7409;
            this.textStringLiteral();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 7410;
            if (!( serverVersion >= 50708)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
            }
            this.state = 7411;
            localctx.option = this.match(MySQLParser.COMPRESSION_SYMBOL);
            this.state = 7413;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,979,this._ctx);
            if(la_===1) {
                this.state = 7412;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7415;
            this.textString();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 7416;
            if (!( serverVersion >= 50711)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50711");
            }
            this.state = 7417;
            localctx.option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.state = 7419;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,980,this._ctx);
            if(la_===1) {
                this.state = 7418;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7421;
            this.textString();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 7422;
            localctx.option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
            this.state = 7424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7423;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7426;
            this.ulonglong_number();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 7427;
            localctx.option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
            this.state = 7429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7428;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7431;
            this.ternaryOption();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 7432;
            localctx.option = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & ((1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 324)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 324)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 324)))) !== 0))) {
                localctx.option = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7433;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7436;
            this.ternaryOption();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 7437;
            localctx.option = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CHECKSUM_SYMBOL || _la===MySQLParser.TABLE_CHECKSUM_SYMBOL)) {
                localctx.option = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7438;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7441;
            this.ulong_number();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 7442;
            localctx.option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
            this.state = 7444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7443;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7446;
            this.ulong_number();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 7447;
            localctx.option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
            this.state = 7449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7448;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7451;
            localctx.format = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.COMPACT_SYMBOL || _la===MySQLParser.COMPRESSED_SYMBOL || _la===MySQLParser.DYNAMIC_SYMBOL || _la===MySQLParser.FIXED_SYMBOL || _la===MySQLParser.REDUNDANT_SYMBOL || _la===MySQLParser.DEFAULT_SYMBOL)) {
                localctx.format = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 7452;
            localctx.option = this.match(MySQLParser.UNION_SYMBOL);
            this.state = 7454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7453;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7456;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7457;
            this.tableRefList();
            this.state = 7458;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 7460;
            this.defaultCharset();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 7461;
            this.defaultCollation();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 7462;
            localctx.option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
            this.state = 7464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7463;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7466;
            localctx.method = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NO_SYMBOL || _la===MySQLParser.FIRST_SYMBOL || _la===MySQLParser.LAST_SYMBOL)) {
                localctx.method = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 7467;
            localctx.option = this.match(MySQLParser.DATA_SYMBOL);
            this.state = 7468;
            this.match(MySQLParser.DIRECTORY_SYMBOL);
            this.state = 7470;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,989,this._ctx);
            if(la_===1) {
                this.state = 7469;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7472;
            this.textString();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 7473;
            localctx.option = this.match(MySQLParser.INDEX_SYMBOL);
            this.state = 7474;
            this.match(MySQLParser.DIRECTORY_SYMBOL);
            this.state = 7476;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,990,this._ctx);
            if(la_===1) {
                this.state = 7475;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7478;
            this.textString();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 7479;
            localctx.option = this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 7485;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,992,this._ctx);
            switch(la_) {
            case 1:
                this.state = 7480;
                if (!( serverVersion >= 50707)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50707");
                }
                this.state = 7482;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,991,this._ctx);
                if(la_===1) {
                    this.state = 7481;
                    this.match(MySQLParser.EQUAL_OPERATOR);

                }
                break;

            case 2:
                break;

            }
            this.state = 7487;
            this.identifier();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 7488;
            localctx.option = this.match(MySQLParser.STORAGE_SYMBOL);
            this.state = 7489;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DISK_SYMBOL || _la===MySQLParser.MEMORY_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 7490;
            localctx.option = this.match(MySQLParser.CONNECTION_SYMBOL);
            this.state = 7492;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,993,this._ctx);
            if(la_===1) {
                this.state = 7491;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7494;
            this.textString();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 7495;
            localctx.option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
            this.state = 7497;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7496;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7499;
            this.ulong_number();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TernaryOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ternaryOption;
    return this;
}

TernaryOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TernaryOptionContext.prototype.constructor = TernaryOptionContext;

TernaryOptionContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

TernaryOptionContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

TernaryOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTernaryOption(this);
	}
};

TernaryOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTernaryOption(this);
	}
};

TernaryOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTernaryOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TernaryOptionContext = TernaryOptionContext;

MySQLParser.prototype.ternaryOption = function() {

    var localctx = new TernaryOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 936, MySQLParser.RULE_ternaryOption);
    try {
        this.state = 7504;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INT_NUMBER:
        case MySQLParser.LONG_NUMBER:
        case MySQLParser.ULONGLONG_NUMBER:
        case MySQLParser.HEX_NUMBER:
        case MySQLParser.DECIMAL_NUMBER:
        case MySQLParser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 7502;
            this.ulong_number();
            break;
        case MySQLParser.DEFAULT_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7503;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultCollationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_defaultCollation;
    return this;
}

DefaultCollationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultCollationContext.prototype.constructor = DefaultCollationContext;

DefaultCollationContext.prototype.COLLATE_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
};

DefaultCollationContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

DefaultCollationContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

DefaultCollationContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

DefaultCollationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultCollation(this);
	}
};

DefaultCollationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultCollation(this);
	}
};

DefaultCollationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultCollation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DefaultCollationContext = DefaultCollationContext;

MySQLParser.prototype.defaultCollation = function() {

    var localctx = new DefaultCollationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 938, MySQLParser.RULE_defaultCollation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFAULT_SYMBOL) {
            this.state = 7506;
            this.match(MySQLParser.DEFAULT_SYMBOL);
        }

        this.state = 7509;
        this.match(MySQLParser.COLLATE_SYMBOL);
        this.state = 7511;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,998,this._ctx);
        if(la_===1) {
            this.state = 7510;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 7513;
        this.collationName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultEncryptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_defaultEncryption;
    return this;
}

DefaultEncryptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultEncryptionContext.prototype.constructor = DefaultEncryptionContext;

DefaultEncryptionContext.prototype.ENCRYPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
};

DefaultEncryptionContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

DefaultEncryptionContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

DefaultEncryptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

DefaultEncryptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultEncryption(this);
	}
};

DefaultEncryptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultEncryption(this);
	}
};

DefaultEncryptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultEncryption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DefaultEncryptionContext = DefaultEncryptionContext;

MySQLParser.prototype.defaultEncryption = function() {

    var localctx = new DefaultEncryptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 940, MySQLParser.RULE_defaultEncryption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFAULT_SYMBOL) {
            this.state = 7515;
            this.match(MySQLParser.DEFAULT_SYMBOL);
        }

        this.state = 7518;
        this.match(MySQLParser.ENCRYPTION_SYMBOL);
        this.state = 7520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1000,this._ctx);
        if(la_===1) {
            this.state = 7519;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 7522;
        this.textStringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultCharsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_defaultCharset;
    return this;
}

DefaultCharsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultCharsetContext.prototype.constructor = DefaultCharsetContext;

DefaultCharsetContext.prototype.charset = function() {
    return this.getTypedRuleContext(CharsetContext,0);
};

DefaultCharsetContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

DefaultCharsetContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

DefaultCharsetContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

DefaultCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultCharset(this);
	}
};

DefaultCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultCharset(this);
	}
};

DefaultCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DefaultCharsetContext = DefaultCharsetContext;

MySQLParser.prototype.defaultCharset = function() {

    var localctx = new DefaultCharsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 942, MySQLParser.RULE_defaultCharset);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFAULT_SYMBOL) {
            this.state = 7524;
            this.match(MySQLParser.DEFAULT_SYMBOL);
        }

        this.state = 7527;
        this.charset();
        this.state = 7529;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1002,this._ctx);
        if(la_===1) {
            this.state = 7528;
            this.match(MySQLParser.EQUAL_OPERATOR);

        }
        this.state = 7531;
        this.charsetName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionClause;
    return this;
}

PartitionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionClauseContext.prototype.constructor = PartitionClauseContext;

PartitionClauseContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

PartitionClauseContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

PartitionClauseContext.prototype.partitionTypeDef = function() {
    return this.getTypedRuleContext(PartitionTypeDefContext,0);
};

PartitionClauseContext.prototype.PARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
};

PartitionClauseContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

PartitionClauseContext.prototype.subPartitions = function() {
    return this.getTypedRuleContext(SubPartitionsContext,0);
};

PartitionClauseContext.prototype.partitionDefinitions = function() {
    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
};

PartitionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionClause(this);
	}
};

PartitionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionClause(this);
	}
};

PartitionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionClauseContext = PartitionClauseContext;

MySQLParser.prototype.partitionClause = function() {

    var localctx = new PartitionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 944, MySQLParser.RULE_partitionClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7533;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 7534;
        this.match(MySQLParser.BY_SYMBOL);
        this.state = 7535;
        this.partitionTypeDef();
        this.state = 7538;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1003,this._ctx);
        if(la_===1) {
            this.state = 7536;
            this.match(MySQLParser.PARTITIONS_SYMBOL);
            this.state = 7537;
            this.real_ulong_number();

        }
        this.state = 7541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1004,this._ctx);
        if(la_===1) {
            this.state = 7540;
            this.subPartitions();

        }
        this.state = 7544;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1005,this._ctx);
        if(la_===1) {
            this.state = 7543;
            this.partitionDefinitions();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionTypeDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionTypeDef;
    return this;
}

PartitionTypeDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionTypeDefContext.prototype.constructor = PartitionTypeDefContext;


 
PartitionTypeDefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PartitionDefRangeListContext(parser, ctx) {
	PartitionTypeDefContext.call(this, parser);
    PartitionTypeDefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionDefRangeListContext.prototype = Object.create(PartitionTypeDefContext.prototype);
PartitionDefRangeListContext.prototype.constructor = PartitionDefRangeListContext;

MySQLParser.PartitionDefRangeListContext = PartitionDefRangeListContext;

PartitionDefRangeListContext.prototype.RANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
};

PartitionDefRangeListContext.prototype.LIST_SYMBOL = function() {
    return this.getToken(MySQLParser.LIST_SYMBOL, 0);
};

PartitionDefRangeListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionDefRangeListContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

PartitionDefRangeListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionDefRangeListContext.prototype.COLUMNS_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
};

PartitionDefRangeListContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};
PartitionDefRangeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefRangeList(this);
	}
};

PartitionDefRangeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefRangeList(this);
	}
};

PartitionDefRangeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefRangeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionDefKeyContext(parser, ctx) {
	PartitionTypeDefContext.call(this, parser);
    PartitionTypeDefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionDefKeyContext.prototype = Object.create(PartitionTypeDefContext.prototype);
PartitionDefKeyContext.prototype.constructor = PartitionDefKeyContext;

MySQLParser.PartitionDefKeyContext = PartitionDefKeyContext;

PartitionDefKeyContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

PartitionDefKeyContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionDefKeyContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionDefKeyContext.prototype.LINEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
};

PartitionDefKeyContext.prototype.partitionKeyAlgorithm = function() {
    return this.getTypedRuleContext(PartitionKeyAlgorithmContext,0);
};

PartitionDefKeyContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};
PartitionDefKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefKey(this);
	}
};

PartitionDefKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefKey(this);
	}
};

PartitionDefKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionDefHashContext(parser, ctx) {
	PartitionTypeDefContext.call(this, parser);
    PartitionTypeDefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionDefHashContext.prototype = Object.create(PartitionTypeDefContext.prototype);
PartitionDefHashContext.prototype.constructor = PartitionDefHashContext;

MySQLParser.PartitionDefHashContext = PartitionDefHashContext;

PartitionDefHashContext.prototype.HASH_SYMBOL = function() {
    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
};

PartitionDefHashContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionDefHashContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

PartitionDefHashContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionDefHashContext.prototype.LINEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
};
PartitionDefHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefHash(this);
	}
};

PartitionDefHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefHash(this);
	}
};

PartitionDefHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.PartitionTypeDefContext = PartitionTypeDefContext;

MySQLParser.prototype.partitionTypeDef = function() {

    var localctx = new PartitionTypeDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 946, MySQLParser.RULE_partitionTypeDef);
    var _la = 0; // Token type
    try {
        this.state = 7579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1012,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PartitionDefKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 7547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINEAR_SYMBOL) {
                this.state = 7546;
                this.match(MySQLParser.LINEAR_SYMBOL);
            }

            this.state = 7549;
            this.match(MySQLParser.KEY_SYMBOL);
            this.state = 7551;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1007,this._ctx);
            if(la_===1) {
                this.state = 7550;
                this.partitionKeyAlgorithm();

            }
            this.state = 7553;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7555;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1008,this._ctx);
            if(la_===1) {
                this.state = 7554;
                this.identifierList();

            }
            this.state = 7557;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 2:
            localctx = new PartitionDefHashContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 7559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINEAR_SYMBOL) {
                this.state = 7558;
                this.match(MySQLParser.LINEAR_SYMBOL);
            }

            this.state = 7561;
            this.match(MySQLParser.HASH_SYMBOL);
            this.state = 7562;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7563;
            this.bitExpr(0);
            this.state = 7564;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        case 3:
            localctx = new PartitionDefRangeListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 7566;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LIST_SYMBOL || _la===MySQLParser.RANGE_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7577;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.OPEN_PAR_SYMBOL:
                this.state = 7567;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7568;
                this.bitExpr(0);
                this.state = 7569;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;
            case MySQLParser.COLUMNS_SYMBOL:
                this.state = 7571;
                this.match(MySQLParser.COLUMNS_SYMBOL);
                this.state = 7572;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7574;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1010,this._ctx);
                if(la_===1) {
                    this.state = 7573;
                    this.identifierList();

                }
                this.state = 7576;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubPartitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_subPartitions;
    return this;
}

SubPartitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubPartitionsContext.prototype.constructor = SubPartitionsContext;

SubPartitionsContext.prototype.SUBPARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
};

SubPartitionsContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

SubPartitionsContext.prototype.HASH_SYMBOL = function() {
    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
};

SubPartitionsContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SubPartitionsContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

SubPartitionsContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SubPartitionsContext.prototype.KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
};

SubPartitionsContext.prototype.identifierListWithParentheses = function() {
    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
};

SubPartitionsContext.prototype.LINEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
};

SubPartitionsContext.prototype.SUBPARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
};

SubPartitionsContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

SubPartitionsContext.prototype.partitionKeyAlgorithm = function() {
    return this.getTypedRuleContext(PartitionKeyAlgorithmContext,0);
};

SubPartitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubPartitions(this);
	}
};

SubPartitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubPartitions(this);
	}
};

SubPartitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubPartitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SubPartitionsContext = SubPartitionsContext;

MySQLParser.prototype.subPartitions = function() {

    var localctx = new SubPartitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 948, MySQLParser.RULE_subPartitions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7581;
        this.match(MySQLParser.SUBPARTITION_SYMBOL);
        this.state = 7582;
        this.match(MySQLParser.BY_SYMBOL);
        this.state = 7584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LINEAR_SYMBOL) {
            this.state = 7583;
            this.match(MySQLParser.LINEAR_SYMBOL);
        }

        this.state = 7596;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.HASH_SYMBOL:
            this.state = 7586;
            this.match(MySQLParser.HASH_SYMBOL);
            this.state = 7587;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7588;
            this.bitExpr(0);
            this.state = 7589;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;
        case MySQLParser.KEY_SYMBOL:
            this.state = 7591;
            this.match(MySQLParser.KEY_SYMBOL);
            this.state = 7593;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1014,this._ctx);
            if(la_===1) {
                this.state = 7592;
                this.partitionKeyAlgorithm();

            }
            this.state = 7595;
            this.identifierListWithParentheses();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 7600;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1016,this._ctx);
        if(la_===1) {
            this.state = 7598;
            this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
            this.state = 7599;
            this.real_ulong_number();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionKeyAlgorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionKeyAlgorithm;
    return this;
}

PartitionKeyAlgorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionKeyAlgorithmContext.prototype.constructor = PartitionKeyAlgorithmContext;

PartitionKeyAlgorithmContext.prototype.ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
};

PartitionKeyAlgorithmContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

PartitionKeyAlgorithmContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

PartitionKeyAlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionKeyAlgorithm(this);
	}
};

PartitionKeyAlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionKeyAlgorithm(this);
	}
};

PartitionKeyAlgorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionKeyAlgorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionKeyAlgorithmContext = PartitionKeyAlgorithmContext;

MySQLParser.prototype.partitionKeyAlgorithm = function() {

    var localctx = new PartitionKeyAlgorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 950, MySQLParser.RULE_partitionKeyAlgorithm);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7602;
        if (!( serverVersion >= 50700)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
        }
        this.state = 7603;
        this.match(MySQLParser.ALGORITHM_SYMBOL);
        this.state = 7604;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 7605;
        this.real_ulong_number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDefinitions;
    return this;
}

PartitionDefinitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionsContext.prototype.constructor = PartitionDefinitionsContext;

PartitionDefinitionsContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionDefinitionsContext.prototype.partitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinitionContext,i);
    }
};

PartitionDefinitionsContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionDefinitionsContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


PartitionDefinitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefinitions(this);
	}
};

PartitionDefinitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefinitions(this);
	}
};

PartitionDefinitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefinitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionDefinitionsContext = PartitionDefinitionsContext;

MySQLParser.prototype.partitionDefinitions = function() {

    var localctx = new PartitionDefinitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 952, MySQLParser.RULE_partitionDefinitions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7607;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7608;
        this.partitionDefinition();
        this.state = 7613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 7609;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 7610;
            this.partitionDefinition();
            this.state = 7615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7616;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDefinition;
    return this;
}

PartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionContext.prototype.constructor = PartitionDefinitionContext;

PartitionDefinitionContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PartitionDefinitionContext.prototype.VALUES_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.THAN_SYMBOL = function() {
    return this.getToken(MySQLParser.THAN_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.partitionValuesIn = function() {
    return this.getTypedRuleContext(PartitionValuesInContext,0);
};

PartitionDefinitionContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

PartitionDefinitionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.subpartitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
    }
};

PartitionDefinitionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.partitionValueItemListParen = function() {
    return this.getTypedRuleContext(PartitionValueItemListParenContext,0);
};

PartitionDefinitionContext.prototype.MAXVALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
};

PartitionDefinitionContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


PartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionDefinitionContext = PartitionDefinitionContext;

MySQLParser.prototype.partitionDefinition = function() {

    var localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 954, MySQLParser.RULE_partitionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7618;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 7619;
        this.identifier();
        this.state = 7630;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1019,this._ctx);
        if(la_===1) {
            this.state = 7620;
            this.match(MySQLParser.VALUES_SYMBOL);
            this.state = 7621;
            this.match(MySQLParser.LESS_SYMBOL);
            this.state = 7622;
            this.match(MySQLParser.THAN_SYMBOL);
            this.state = 7625;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.OPEN_PAR_SYMBOL:
                this.state = 7623;
                this.partitionValueItemListParen();
                break;
            case MySQLParser.MAXVALUE_SYMBOL:
                this.state = 7624;
                this.match(MySQLParser.MAXVALUE_SYMBOL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        } else if(la_===2) {
            this.state = 7627;
            this.match(MySQLParser.VALUES_SYMBOL);
            this.state = 7628;
            this.match(MySQLParser.IN_SYMBOL);
            this.state = 7629;
            this.partitionValuesIn();

        }
        this.state = 7635;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMENT_SYMBOL || _la===MySQLParser.DATA_SYMBOL || _la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.MAX_ROWS_SYMBOL || _la===MySQLParser.MIN_ROWS_SYMBOL || _la===MySQLParser.NODEGROUP_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.TABLESPACE_SYMBOL || _la===MySQLParser.INDEX_SYMBOL) {
            this.state = 7632;
            this.partitionOption();
            this.state = 7637;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OPEN_PAR_SYMBOL) {
            this.state = 7638;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7639;
            this.subpartitionDefinition();
            this.state = 7644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 7640;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7641;
                this.subpartitionDefinition();
                this.state = 7646;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 7647;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionValuesInContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionValuesIn;
    return this;
}

PartitionValuesInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValuesInContext.prototype.constructor = PartitionValuesInContext;

PartitionValuesInContext.prototype.partitionValueItemListParen = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionValueItemListParenContext);
    } else {
        return this.getTypedRuleContext(PartitionValueItemListParenContext,i);
    }
};

PartitionValuesInContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionValuesInContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionValuesInContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


PartitionValuesInContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionValuesIn(this);
	}
};

PartitionValuesInContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionValuesIn(this);
	}
};

PartitionValuesInContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionValuesIn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionValuesInContext = PartitionValuesInContext;

MySQLParser.prototype.partitionValuesIn = function() {

    var localctx = new PartitionValuesInContext(this, this._ctx, this.state);
    this.enterRule(localctx, 956, MySQLParser.RULE_partitionValuesIn);
    var _la = 0; // Token type
    try {
        this.state = 7663;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1024,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7651;
            this.partitionValueItemListParen();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7652;
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.state = 7653;
            this.partitionValueItemListParen();
            this.state = 7658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA_SYMBOL) {
                this.state = 7654;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7655;
                this.partitionValueItemListParen();
                this.state = 7660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 7661;
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionOption;
    this.option = null; // Token
    return this;
}

PartitionOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionOptionContext.prototype.constructor = PartitionOptionContext;

PartitionOptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PartitionOptionContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

PartitionOptionContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

PartitionOptionContext.prototype.engineRef = function() {
    return this.getTypedRuleContext(EngineRefContext,0);
};

PartitionOptionContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

PartitionOptionContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

PartitionOptionContext.prototype.real_ulong_number = function() {
    return this.getTypedRuleContext(Real_ulong_numberContext,0);
};

PartitionOptionContext.prototype.NODEGROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
};

PartitionOptionContext.prototype.MAX_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
};

PartitionOptionContext.prototype.MIN_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
};

PartitionOptionContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

PartitionOptionContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

PartitionOptionContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

PartitionOptionContext.prototype.INDEX_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
};

PartitionOptionContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

PartitionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOption(this);
	}
};

PartitionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOption(this);
	}
};

PartitionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionOptionContext = PartitionOptionContext;

MySQLParser.prototype.partitionOption = function() {

    var localctx = new PartitionOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 958, MySQLParser.RULE_partitionOption);
    var _la = 0; // Token type
    try {
        this.state = 7699;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.TABLESPACE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7665;
            localctx.option = this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.state = 7667;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1025,this._ctx);
            if(la_===1) {
                this.state = 7666;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7669;
            this.identifier();
            break;
        case MySQLParser.ENGINE_SYMBOL:
        case MySQLParser.STORAGE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STORAGE_SYMBOL) {
                this.state = 7670;
                this.match(MySQLParser.STORAGE_SYMBOL);
            }

            this.state = 7673;
            localctx.option = this.match(MySQLParser.ENGINE_SYMBOL);
            this.state = 7675;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1027,this._ctx);
            if(la_===1) {
                this.state = 7674;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7677;
            this.engineRef();
            break;
        case MySQLParser.NODEGROUP_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 7678;
            localctx.option = this.match(MySQLParser.NODEGROUP_SYMBOL);
            this.state = 7680;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7679;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7682;
            this.real_ulong_number();
            break;
        case MySQLParser.MAX_ROWS_SYMBOL:
        case MySQLParser.MIN_ROWS_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 7683;
            localctx.option = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.MAX_ROWS_SYMBOL || _la===MySQLParser.MIN_ROWS_SYMBOL)) {
                localctx.option = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7685;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_OPERATOR) {
                this.state = 7684;
                this.match(MySQLParser.EQUAL_OPERATOR);
            }

            this.state = 7687;
            this.real_ulong_number();
            break;
        case MySQLParser.DATA_SYMBOL:
        case MySQLParser.INDEX_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 7688;
            localctx.option = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DATA_SYMBOL || _la===MySQLParser.INDEX_SYMBOL)) {
                localctx.option = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7689;
            this.match(MySQLParser.DIRECTORY_SYMBOL);
            this.state = 7691;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1030,this._ctx);
            if(la_===1) {
                this.state = 7690;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7693;
            this.textLiteral();
            break;
        case MySQLParser.COMMENT_SYMBOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 7694;
            localctx.option = this.match(MySQLParser.COMMENT_SYMBOL);
            this.state = 7696;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1031,this._ctx);
            if(la_===1) {
                this.state = 7695;
                this.match(MySQLParser.EQUAL_OPERATOR);

            }
            this.state = 7698;
            this.textLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubpartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_subpartitionDefinition;
    return this;
}

SubpartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubpartitionDefinitionContext.prototype.constructor = SubpartitionDefinitionContext;

SubpartitionDefinitionContext.prototype.SUBPARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
};

SubpartitionDefinitionContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

SubpartitionDefinitionContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

SubpartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubpartitionDefinition(this);
	}
};

SubpartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubpartitionDefinition(this);
	}
};

SubpartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubpartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SubpartitionDefinitionContext = SubpartitionDefinitionContext;

MySQLParser.prototype.subpartitionDefinition = function() {

    var localctx = new SubpartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 960, MySQLParser.RULE_subpartitionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7701;
        this.match(MySQLParser.SUBPARTITION_SYMBOL);
        this.state = 7702;
        this.textOrIdentifier();
        this.state = 7706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMENT_SYMBOL || _la===MySQLParser.DATA_SYMBOL || _la===MySQLParser.ENGINE_SYMBOL || _la===MySQLParser.MAX_ROWS_SYMBOL || _la===MySQLParser.MIN_ROWS_SYMBOL || _la===MySQLParser.NODEGROUP_SYMBOL || _la===MySQLParser.STORAGE_SYMBOL || _la===MySQLParser.TABLESPACE_SYMBOL || _la===MySQLParser.INDEX_SYMBOL) {
            this.state = 7703;
            this.partitionOption();
            this.state = 7708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionValueItemListParenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionValueItemListParen;
    return this;
}

PartitionValueItemListParenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValueItemListParenContext.prototype.constructor = PartitionValueItemListParenContext;

PartitionValueItemListParenContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PartitionValueItemListParenContext.prototype.partitionValueItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionValueItemContext);
    } else {
        return this.getTypedRuleContext(PartitionValueItemContext,i);
    }
};

PartitionValueItemListParenContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PartitionValueItemListParenContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


PartitionValueItemListParenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionValueItemListParen(this);
	}
};

PartitionValueItemListParenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionValueItemListParen(this);
	}
};

PartitionValueItemListParenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionValueItemListParen(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionValueItemListParenContext = PartitionValueItemListParenContext;

MySQLParser.prototype.partitionValueItemListParen = function() {

    var localctx = new PartitionValueItemListParenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 962, MySQLParser.RULE_partitionValueItemListParen);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7709;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7710;
        this.partitionValueItem();
        this.state = 7715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 7711;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 7712;
            this.partitionValueItem();
            this.state = 7717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7718;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionValueItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionValueItem;
    return this;
}

PartitionValueItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValueItemContext.prototype.constructor = PartitionValueItemContext;

PartitionValueItemContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

PartitionValueItemContext.prototype.MAXVALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
};

PartitionValueItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionValueItem(this);
	}
};

PartitionValueItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionValueItem(this);
	}
};

PartitionValueItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionValueItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionValueItemContext = PartitionValueItemContext;

MySQLParser.prototype.partitionValueItem = function() {

    var localctx = new PartitionValueItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 964, MySQLParser.RULE_partitionValueItem);
    try {
        this.state = 7722;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1035,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7720;
            this.bitExpr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7721;
            this.match(MySQLParser.MAXVALUE_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinerClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_definerClause;
    return this;
}

DefinerClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinerClauseContext.prototype.constructor = DefinerClauseContext;

DefinerClauseContext.prototype.DEFINER_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
};

DefinerClauseContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

DefinerClauseContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

DefinerClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefinerClause(this);
	}
};

DefinerClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefinerClause(this);
	}
};

DefinerClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefinerClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DefinerClauseContext = DefinerClauseContext;

MySQLParser.prototype.definerClause = function() {

    var localctx = new DefinerClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 966, MySQLParser.RULE_definerClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7724;
        this.match(MySQLParser.DEFINER_SYMBOL);
        this.state = 7725;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 7726;
        this.user();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifExists;
    return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.IF_SYMBOL = function() {
    return this.getToken(MySQLParser.IF_SYMBOL, 0);
};

IfExistsContext.prototype.EXISTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
};

IfExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfExists(this);
	}
};

IfExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfExists(this);
	}
};

IfExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfExistsContext = IfExistsContext;

MySQLParser.prototype.ifExists = function() {

    var localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 968, MySQLParser.RULE_ifExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7728;
        this.match(MySQLParser.IF_SYMBOL);
        this.state = 7729;
        this.match(MySQLParser.EXISTS_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfNotExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifNotExists;
    return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.IF_SYMBOL = function() {
    return this.getToken(MySQLParser.IF_SYMBOL, 0);
};

IfNotExistsContext.prototype.notRule = function() {
    return this.getTypedRuleContext(NotRuleContext,0);
};

IfNotExistsContext.prototype.EXISTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
};

IfNotExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfNotExists(this);
	}
};

IfNotExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfNotExists(this);
	}
};

IfNotExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfNotExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfNotExistsContext = IfNotExistsContext;

MySQLParser.prototype.ifNotExists = function() {

    var localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 970, MySQLParser.RULE_ifNotExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7731;
        this.match(MySQLParser.IF_SYMBOL);
        this.state = 7732;
        this.notRule();
        this.state = 7733;
        this.match(MySQLParser.EXISTS_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_procedureParameter;
    this.type = null; // Token
    return this;
}

ProcedureParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureParameterContext.prototype.constructor = ProcedureParameterContext;

ProcedureParameterContext.prototype.functionParameter = function() {
    return this.getTypedRuleContext(FunctionParameterContext,0);
};

ProcedureParameterContext.prototype.IN_SYMBOL = function() {
    return this.getToken(MySQLParser.IN_SYMBOL, 0);
};

ProcedureParameterContext.prototype.OUT_SYMBOL = function() {
    return this.getToken(MySQLParser.OUT_SYMBOL, 0);
};

ProcedureParameterContext.prototype.INOUT_SYMBOL = function() {
    return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
};

ProcedureParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProcedureParameter(this);
	}
};

ProcedureParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProcedureParameter(this);
	}
};

ProcedureParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProcedureParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProcedureParameterContext = ProcedureParameterContext;

MySQLParser.prototype.procedureParameter = function() {

    var localctx = new ProcedureParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 972, MySQLParser.RULE_procedureParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7736;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1036,this._ctx);
        if(la_===1) {
            this.state = 7735;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INOUT_SYMBOL || _la===MySQLParser.IN_SYMBOL || _la===MySQLParser.OUT_SYMBOL)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 7738;
        this.functionParameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionParameter;
    return this;
}

FunctionParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionParameterContext.prototype.constructor = FunctionParameterContext;

FunctionParameterContext.prototype.parameterName = function() {
    return this.getTypedRuleContext(ParameterNameContext,0);
};

FunctionParameterContext.prototype.typeWithOptCollate = function() {
    return this.getTypedRuleContext(TypeWithOptCollateContext,0);
};

FunctionParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionParameter(this);
	}
};

FunctionParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionParameter(this);
	}
};

FunctionParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionParameterContext = FunctionParameterContext;

MySQLParser.prototype.functionParameter = function() {

    var localctx = new FunctionParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 974, MySQLParser.RULE_functionParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7740;
        this.parameterName();
        this.state = 7741;
        this.typeWithOptCollate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_collate;
    return this;
}

CollateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollateContext.prototype.constructor = CollateContext;

CollateContext.prototype.COLLATE_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
};

CollateContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

CollateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollate(this);
	}
};

CollateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollate(this);
	}
};

CollateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CollateContext = CollateContext;

MySQLParser.prototype.collate = function() {

    var localctx = new CollateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 976, MySQLParser.RULE_collate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7743;
        this.match(MySQLParser.COLLATE_SYMBOL);
        this.state = 7744;
        this.collationName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeWithOptCollateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_typeWithOptCollate;
    return this;
}

TypeWithOptCollateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeWithOptCollateContext.prototype.constructor = TypeWithOptCollateContext;

TypeWithOptCollateContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

TypeWithOptCollateContext.prototype.collate = function() {
    return this.getTypedRuleContext(CollateContext,0);
};

TypeWithOptCollateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTypeWithOptCollate(this);
	}
};

TypeWithOptCollateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTypeWithOptCollate(this);
	}
};

TypeWithOptCollateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTypeWithOptCollate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TypeWithOptCollateContext = TypeWithOptCollateContext;

MySQLParser.prototype.typeWithOptCollate = function() {

    var localctx = new TypeWithOptCollateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 978, MySQLParser.RULE_typeWithOptCollate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7746;
        this.dataType();
        this.state = 7748;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1037,this._ctx);
        if(la_===1) {
            this.state = 7747;
            this.collate();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SchemaIdentifierPairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_schemaIdentifierPair;
    return this;
}

SchemaIdentifierPairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SchemaIdentifierPairContext.prototype.constructor = SchemaIdentifierPairContext;

SchemaIdentifierPairContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

SchemaIdentifierPairContext.prototype.schemaRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SchemaRefContext);
    } else {
        return this.getTypedRuleContext(SchemaRefContext,i);
    }
};

SchemaIdentifierPairContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

SchemaIdentifierPairContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

SchemaIdentifierPairContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSchemaIdentifierPair(this);
	}
};

SchemaIdentifierPairContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSchemaIdentifierPair(this);
	}
};

SchemaIdentifierPairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSchemaIdentifierPair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SchemaIdentifierPairContext = SchemaIdentifierPairContext;

MySQLParser.prototype.schemaIdentifierPair = function() {

    var localctx = new SchemaIdentifierPairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 980, MySQLParser.RULE_schemaIdentifierPair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7750;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7751;
        this.schemaRef();
        this.state = 7752;
        this.match(MySQLParser.COMMA_SYMBOL);
        this.state = 7753;
        this.schemaRef();
        this.state = 7754;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewRefListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewRefList;
    return this;
}

ViewRefListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewRefListContext.prototype.constructor = ViewRefListContext;

ViewRefListContext.prototype.viewRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ViewRefContext);
    } else {
        return this.getTypedRuleContext(ViewRefContext,i);
    }
};

ViewRefListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ViewRefListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewRefList(this);
	}
};

ViewRefListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewRefList(this);
	}
};

ViewRefListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewRefList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewRefListContext = ViewRefListContext;

MySQLParser.prototype.viewRefList = function() {

    var localctx = new ViewRefListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 982, MySQLParser.RULE_viewRefList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7756;
        this.viewRef();
        this.state = 7761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 7757;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 7758;
            this.viewRef();
            this.state = 7763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdateListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_updateList;
    return this;
}

UpdateListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateListContext.prototype.constructor = UpdateListContext;

UpdateListContext.prototype.updateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdateElementContext);
    } else {
        return this.getTypedRuleContext(UpdateElementContext,i);
    }
};

UpdateListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


UpdateListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUpdateList(this);
	}
};

UpdateListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUpdateList(this);
	}
};

UpdateListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUpdateList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UpdateListContext = UpdateListContext;

MySQLParser.prototype.updateList = function() {

    var localctx = new UpdateListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 984, MySQLParser.RULE_updateList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7764;
        this.updateElement();
        this.state = 7769;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1039,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 7765;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7766;
                this.updateElement(); 
            }
            this.state = 7771;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1039,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdateElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_updateElement;
    return this;
}

UpdateElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateElementContext.prototype.constructor = UpdateElementContext;

UpdateElementContext.prototype.columnRef = function() {
    return this.getTypedRuleContext(ColumnRefContext,0);
};

UpdateElementContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

UpdateElementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UpdateElementContext.prototype.DEFAULT_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
};

UpdateElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUpdateElement(this);
	}
};

UpdateElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUpdateElement(this);
	}
};

UpdateElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUpdateElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UpdateElementContext = UpdateElementContext;

MySQLParser.prototype.updateElement = function() {

    var localctx = new UpdateElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 986, MySQLParser.RULE_updateElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7772;
        this.columnRef();
        this.state = 7773;
        this.match(MySQLParser.EQUAL_OPERATOR);
        this.state = 7776;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1040,this._ctx);
        switch(la_) {
        case 1:
            this.state = 7774;
            this.expr(0);
            break;

        case 2:
            this.state = 7775;
            this.match(MySQLParser.DEFAULT_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_charsetClause;
    return this;
}

CharsetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetClauseContext.prototype.constructor = CharsetClauseContext;

CharsetClauseContext.prototype.charset = function() {
    return this.getTypedRuleContext(CharsetContext,0);
};

CharsetClauseContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

CharsetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharsetClause(this);
	}
};

CharsetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharsetClause(this);
	}
};

CharsetClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharsetClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CharsetClauseContext = CharsetClauseContext;

MySQLParser.prototype.charsetClause = function() {

    var localctx = new CharsetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 988, MySQLParser.RULE_charsetClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7778;
        this.charset();
        this.state = 7779;
        this.charsetName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldsClause;
    return this;
}

FieldsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldsClauseContext.prototype.constructor = FieldsClauseContext;

FieldsClauseContext.prototype.COLUMNS_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
};

FieldsClauseContext.prototype.fieldTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldTermContext);
    } else {
        return this.getTypedRuleContext(FieldTermContext,i);
    }
};

FieldsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldsClause(this);
	}
};

FieldsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldsClause(this);
	}
};

FieldsClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldsClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldsClauseContext = FieldsClauseContext;

MySQLParser.prototype.fieldsClause = function() {

    var localctx = new FieldsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 990, MySQLParser.RULE_fieldsClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7781;
        this.match(MySQLParser.COLUMNS_SYMBOL);
        this.state = 7783; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 7782;
        		this.fieldTerm();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 7785; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,1041, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldTerm;
    return this;
}

FieldTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldTermContext.prototype.constructor = FieldTermContext;

FieldTermContext.prototype.TERMINATED_SYMBOL = function() {
    return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
};

FieldTermContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

FieldTermContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

FieldTermContext.prototype.ENCLOSED_SYMBOL = function() {
    return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
};

FieldTermContext.prototype.OPTIONALLY_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
};

FieldTermContext.prototype.ESCAPED_SYMBOL = function() {
    return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
};

FieldTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldTerm(this);
	}
};

FieldTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldTerm(this);
	}
};

FieldTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldTermContext = FieldTermContext;

MySQLParser.prototype.fieldTerm = function() {

    var localctx = new FieldTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 992, MySQLParser.RULE_fieldTerm);
    var _la = 0; // Token type
    try {
        this.state = 7799;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.TERMINATED_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7787;
            this.match(MySQLParser.TERMINATED_SYMBOL);
            this.state = 7788;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 7789;
            this.textString();
            break;
        case MySQLParser.ENCLOSED_SYMBOL:
        case MySQLParser.OPTIONALLY_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.OPTIONALLY_SYMBOL) {
                this.state = 7790;
                this.match(MySQLParser.OPTIONALLY_SYMBOL);
            }

            this.state = 7793;
            this.match(MySQLParser.ENCLOSED_SYMBOL);
            this.state = 7794;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 7795;
            this.textString();
            break;
        case MySQLParser.ESCAPED_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 7796;
            this.match(MySQLParser.ESCAPED_SYMBOL);
            this.state = 7797;
            this.match(MySQLParser.BY_SYMBOL);
            this.state = 7798;
            this.textString();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LinesClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_linesClause;
    return this;
}

LinesClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinesClauseContext.prototype.constructor = LinesClauseContext;

LinesClauseContext.prototype.LINES_SYMBOL = function() {
    return this.getToken(MySQLParser.LINES_SYMBOL, 0);
};

LinesClauseContext.prototype.lineTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineTermContext);
    } else {
        return this.getTypedRuleContext(LineTermContext,i);
    }
};

LinesClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLinesClause(this);
	}
};

LinesClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLinesClause(this);
	}
};

LinesClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLinesClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LinesClauseContext = LinesClauseContext;

MySQLParser.prototype.linesClause = function() {

    var localctx = new LinesClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 994, MySQLParser.RULE_linesClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7801;
        this.match(MySQLParser.LINES_SYMBOL);
        this.state = 7803; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 7802;
        		this.lineTerm();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 7805; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,1044, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lineTerm;
    return this;
}

LineTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineTermContext.prototype.constructor = LineTermContext;

LineTermContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

LineTermContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

LineTermContext.prototype.TERMINATED_SYMBOL = function() {
    return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
};

LineTermContext.prototype.STARTING_SYMBOL = function() {
    return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
};

LineTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLineTerm(this);
	}
};

LineTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLineTerm(this);
	}
};

LineTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLineTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LineTermContext = LineTermContext;

MySQLParser.prototype.lineTerm = function() {

    var localctx = new LineTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 996, MySQLParser.RULE_lineTerm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7807;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.STARTING_SYMBOL || _la===MySQLParser.TERMINATED_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 7808;
        this.match(MySQLParser.BY_SYMBOL);
        this.state = 7809;
        this.textString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userList;
    return this;
}

UserListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserListContext.prototype.constructor = UserListContext;

UserListContext.prototype.user = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserContext);
    } else {
        return this.getTypedRuleContext(UserContext,i);
    }
};

UserListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


UserListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserList(this);
	}
};

UserListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserList(this);
	}
};

UserListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserListContext = UserListContext;

MySQLParser.prototype.userList = function() {

    var localctx = new UserListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 998, MySQLParser.RULE_userList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7811;
        this.user();
        this.state = 7816;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1045,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 7812;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7813;
                this.user(); 
            }
            this.state = 7818;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1045,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUserListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUserList;
    return this;
}

CreateUserListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserListContext.prototype.constructor = CreateUserListContext;

CreateUserListContext.prototype.createUserEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateUserEntryContext);
    } else {
        return this.getTypedRuleContext(CreateUserEntryContext,i);
    }
};

CreateUserListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


CreateUserListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUserList(this);
	}
};

CreateUserListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUserList(this);
	}
};

CreateUserListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUserList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUserListContext = CreateUserListContext;

MySQLParser.prototype.createUserList = function() {

    var localctx = new CreateUserListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1000, MySQLParser.RULE_createUserList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7819;
        this.createUserEntry();
        this.state = 7824;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1046,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 7820;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7821;
                this.createUserEntry(); 
            }
            this.state = 7826;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1046,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUserListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterUserList;
    return this;
}

AlterUserListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserListContext.prototype.constructor = AlterUserListContext;

AlterUserListContext.prototype.alterUserEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterUserEntryContext);
    } else {
        return this.getTypedRuleContext(AlterUserEntryContext,i);
    }
};

AlterUserListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


AlterUserListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUserList(this);
	}
};

AlterUserListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUserList(this);
	}
};

AlterUserListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUserList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterUserListContext = AlterUserListContext;

MySQLParser.prototype.alterUserList = function() {

    var localctx = new AlterUserListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1002, MySQLParser.RULE_alterUserList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7827;
        this.alterUserEntry();
        this.state = 7832;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1047,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 7828;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7829;
                this.alterUserEntry(); 
            }
            this.state = 7834;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1047,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUserEntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUserEntry;
    return this;
}

CreateUserEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserEntryContext.prototype.constructor = CreateUserEntryContext;

CreateUserEntryContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

CreateUserEntryContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

CreateUserEntryContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

CreateUserEntryContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

CreateUserEntryContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

CreateUserEntryContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

CreateUserEntryContext.prototype.RANDOM_SYMBOL = function() {
    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
};

CreateUserEntryContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

CreateUserEntryContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

CreateUserEntryContext.prototype.textStringHash = function() {
    return this.getTypedRuleContext(TextStringHashContext,0);
};

CreateUserEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUserEntry(this);
	}
};

CreateUserEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUserEntry(this);
	}
};

CreateUserEntryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUserEntry(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUserEntryContext = CreateUserEntryContext;

MySQLParser.prototype.createUserEntry = function() {

    var localctx = new CreateUserEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1004, MySQLParser.RULE_createUserEntry);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7835;
        this.user();
        this.state = 7862;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1052,this._ctx);
        if(la_===1) {
            this.state = 7836;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 7860;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1051,this._ctx);
            switch(la_) {
            case 1:
                this.state = 7837;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 7840;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1048,this._ctx);
                if(la_===1) {
                    this.state = 7838;
                    if (!( serverVersion < 80011)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
                    }
                    this.state = 7839;
                    this.match(MySQLParser.PASSWORD_SYMBOL);

                }
                this.state = 7842;
                this.textString();
                break;

            case 2:
                this.state = 7843;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 7844;
                this.textOrIdentifier();
                this.state = 7850;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1049,this._ctx);
                if(la_===1) {
                    this.state = 7845;
                    this.match(MySQLParser.AS_SYMBOL);
                    this.state = 7846;
                    this.textStringHash();

                } else if(la_===2) {
                    this.state = 7847;
                    if (!( serverVersion >= 50706)) {
                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
                    }
                    this.state = 7848;
                    this.match(MySQLParser.BY_SYMBOL);
                    this.state = 7849;
                    this.textString();

                }
                break;

            case 3:
                this.state = 7852;
                if (!( serverVersion >= 80018)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
                }
                this.state = 7855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.WITH_SYMBOL) {
                    this.state = 7853;
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.state = 7854;
                    this.textOrIdentifier();
                }

                this.state = 7857;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 7858;
                this.match(MySQLParser.RANDOM_SYMBOL);
                this.state = 7859;
                this.match(MySQLParser.PASSWORD_SYMBOL);
                break;

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUserEntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterUserEntry;
    return this;
}

AlterUserEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserEntryContext.prototype.constructor = AlterUserEntryContext;

AlterUserEntryContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

AlterUserEntryContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

AlterUserEntryContext.prototype.BY_SYMBOL = function() {
    return this.getToken(MySQLParser.BY_SYMBOL, 0);
};

AlterUserEntryContext.prototype.textString = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextStringContext);
    } else {
        return this.getTypedRuleContext(TextStringContext,i);
    }
};

AlterUserEntryContext.prototype.WITH_SYMBOL = function() {
    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
};

AlterUserEntryContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

AlterUserEntryContext.prototype.discardOldPassword = function() {
    return this.getTypedRuleContext(DiscardOldPasswordContext,0);
};

AlterUserEntryContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

AlterUserEntryContext.prototype.retainCurrentPassword = function() {
    return this.getTypedRuleContext(RetainCurrentPasswordContext,0);
};

AlterUserEntryContext.prototype.AS_SYMBOL = function() {
    return this.getToken(MySQLParser.AS_SYMBOL, 0);
};

AlterUserEntryContext.prototype.textStringHash = function() {
    return this.getTypedRuleContext(TextStringHashContext,0);
};

AlterUserEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUserEntry(this);
	}
};

AlterUserEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUserEntry(this);
	}
};

AlterUserEntryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUserEntry(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterUserEntryContext = AlterUserEntryContext;

MySQLParser.prototype.alterUserEntry = function() {

    var localctx = new AlterUserEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1006, MySQLParser.RULE_alterUserEntry);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7864;
        this.user();
        this.state = 7893;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1060,this._ctx);
        switch(la_) {
        case 1:
            this.state = 7865;
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.state = 7888;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1058,this._ctx);
            if(la_===1) {
                this.state = 7868;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.WITH_SYMBOL) {
                    this.state = 7866;
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.state = 7867;
                    this.textOrIdentifier();
                }

                this.state = 7870;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 7871;
                this.textString();
                this.state = 7874;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1054,this._ctx);
                if(la_===1) {
                    this.state = 7872;
                    this.match(MySQLParser.REPLACE_SYMBOL);
                    this.state = 7873;
                    this.textString();

                }
                this.state = 7877;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1055,this._ctx);
                if(la_===1) {
                    this.state = 7876;
                    this.retainCurrentPassword();

                }

            } else if(la_===2) {
                this.state = 7879;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 7880;
                this.textOrIdentifier();
                this.state = 7886;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1057,this._ctx);
                if(la_===1) {
                    this.state = 7881;
                    this.match(MySQLParser.AS_SYMBOL);
                    this.state = 7882;
                    this.textStringHash();
                    this.state = 7884;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,1056,this._ctx);
                    if(la_===1) {
                        this.state = 7883;
                        this.retainCurrentPassword();

                    }

                }

            }
            break;

        case 2:
            this.state = 7891;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1059,this._ctx);
            if(la_===1) {
                this.state = 7890;
                this.discardOldPassword();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RetainCurrentPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_retainCurrentPassword;
    return this;
}

RetainCurrentPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetainCurrentPasswordContext.prototype.constructor = RetainCurrentPasswordContext;

RetainCurrentPasswordContext.prototype.RETAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
};

RetainCurrentPasswordContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

RetainCurrentPasswordContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

RetainCurrentPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRetainCurrentPassword(this);
	}
};

RetainCurrentPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRetainCurrentPassword(this);
	}
};

RetainCurrentPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRetainCurrentPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RetainCurrentPasswordContext = RetainCurrentPasswordContext;

MySQLParser.prototype.retainCurrentPassword = function() {

    var localctx = new RetainCurrentPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1008, MySQLParser.RULE_retainCurrentPassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7895;
        this.match(MySQLParser.RETAIN_SYMBOL);
        this.state = 7896;
        this.match(MySQLParser.CURRENT_SYMBOL);
        this.state = 7897;
        this.match(MySQLParser.PASSWORD_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DiscardOldPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_discardOldPassword;
    return this;
}

DiscardOldPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiscardOldPasswordContext.prototype.constructor = DiscardOldPasswordContext;

DiscardOldPasswordContext.prototype.DISCARD_SYMBOL = function() {
    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
};

DiscardOldPasswordContext.prototype.OLD_SYMBOL = function() {
    return this.getToken(MySQLParser.OLD_SYMBOL, 0);
};

DiscardOldPasswordContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

DiscardOldPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDiscardOldPassword(this);
	}
};

DiscardOldPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDiscardOldPassword(this);
	}
};

DiscardOldPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDiscardOldPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DiscardOldPasswordContext = DiscardOldPasswordContext;

MySQLParser.prototype.discardOldPassword = function() {

    var localctx = new DiscardOldPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1010, MySQLParser.RULE_discardOldPassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7899;
        this.match(MySQLParser.DISCARD_SYMBOL);
        this.state = 7900;
        this.match(MySQLParser.OLD_SYMBOL);
        this.state = 7901;
        this.match(MySQLParser.PASSWORD_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplacePasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replacePassword;
    return this;
}

ReplacePasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplacePasswordContext.prototype.constructor = ReplacePasswordContext;

ReplacePasswordContext.prototype.REPLACE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
};

ReplacePasswordContext.prototype.textString = function() {
    return this.getTypedRuleContext(TextStringContext,0);
};

ReplacePasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReplacePassword(this);
	}
};

ReplacePasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReplacePassword(this);
	}
};

ReplacePasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReplacePassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReplacePasswordContext = ReplacePasswordContext;

MySQLParser.prototype.replacePassword = function() {

    var localctx = new ReplacePasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1012, MySQLParser.RULE_replacePassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7903;
        this.match(MySQLParser.REPLACE_SYMBOL);
        this.state = 7904;
        this.textString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserIdentifierOrTextContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userIdentifierOrText;
    return this;
}

UserIdentifierOrTextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserIdentifierOrTextContext.prototype.constructor = UserIdentifierOrTextContext;

UserIdentifierOrTextContext.prototype.textOrIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextOrIdentifierContext);
    } else {
        return this.getTypedRuleContext(TextOrIdentifierContext,i);
    }
};

UserIdentifierOrTextContext.prototype.AT_SIGN_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
};

UserIdentifierOrTextContext.prototype.AT_TEXT_SUFFIX = function() {
    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
};

UserIdentifierOrTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserIdentifierOrText(this);
	}
};

UserIdentifierOrTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserIdentifierOrText(this);
	}
};

UserIdentifierOrTextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserIdentifierOrText(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserIdentifierOrTextContext = UserIdentifierOrTextContext;

MySQLParser.prototype.userIdentifierOrText = function() {

    var localctx = new UserIdentifierOrTextContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1014, MySQLParser.RULE_userIdentifierOrText);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7906;
        this.textOrIdentifier();
        this.state = 7910;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1061,this._ctx);
        if(la_===1) {
            this.state = 7907;
            this.match(MySQLParser.AT_SIGN_SYMBOL);
            this.state = 7908;
            this.textOrIdentifier();

        } else if(la_===2) {
            this.state = 7909;
            this.match(MySQLParser.AT_TEXT_SUFFIX);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_user;
    return this;
}

UserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserContext.prototype.constructor = UserContext;

UserContext.prototype.userIdentifierOrText = function() {
    return this.getTypedRuleContext(UserIdentifierOrTextContext,0);
};

UserContext.prototype.CURRENT_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
};

UserContext.prototype.parentheses = function() {
    return this.getTypedRuleContext(ParenthesesContext,0);
};

UserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUser(this);
	}
};

UserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUser(this);
	}
};

UserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserContext = UserContext;

MySQLParser.prototype.user = function() {

    var localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1016, MySQLParser.RULE_user);
    try {
        this.state = 7917;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1063,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7912;
            this.userIdentifierOrText();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7913;
            this.match(MySQLParser.CURRENT_USER_SYMBOL);
            this.state = 7915;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1062,this._ctx);
            if(la_===1) {
                this.state = 7914;
                this.parentheses();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LikeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_likeClause;
    return this;
}

LikeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LikeClauseContext.prototype.constructor = LikeClauseContext;

LikeClauseContext.prototype.LIKE_SYMBOL = function() {
    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
};

LikeClauseContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

LikeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLikeClause(this);
	}
};

LikeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLikeClause(this);
	}
};

LikeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLikeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LikeClauseContext = LikeClauseContext;

MySQLParser.prototype.likeClause = function() {

    var localctx = new LikeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1018, MySQLParser.RULE_likeClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7919;
        this.match(MySQLParser.LIKE_SYMBOL);
        this.state = 7920;
        this.textStringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LikeOrWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_likeOrWhere;
    return this;
}

LikeOrWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LikeOrWhereContext.prototype.constructor = LikeOrWhereContext;

LikeOrWhereContext.prototype.likeClause = function() {
    return this.getTypedRuleContext(LikeClauseContext,0);
};

LikeOrWhereContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

LikeOrWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLikeOrWhere(this);
	}
};

LikeOrWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLikeOrWhere(this);
	}
};

LikeOrWhereContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLikeOrWhere(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LikeOrWhereContext = LikeOrWhereContext;

MySQLParser.prototype.likeOrWhere = function() {

    var localctx = new LikeOrWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1020, MySQLParser.RULE_likeOrWhere);
    try {
        this.state = 7924;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.LIKE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 7922;
            this.likeClause();
            break;
        case MySQLParser.WHERE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 7923;
            this.whereClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OnlineOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_onlineOption;
    return this;
}

OnlineOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnlineOptionContext.prototype.constructor = OnlineOptionContext;

OnlineOptionContext.prototype.ONLINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
};

OnlineOptionContext.prototype.OFFLINE_SYMBOL = function() {
    return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
};

OnlineOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOnlineOption(this);
	}
};

OnlineOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOnlineOption(this);
	}
};

OnlineOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOnlineOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OnlineOptionContext = OnlineOptionContext;

MySQLParser.prototype.onlineOption = function() {

    var localctx = new OnlineOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1022, MySQLParser.RULE_onlineOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7926;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.OFFLINE_SYMBOL || _la===MySQLParser.ONLINE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoWriteToBinLogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_noWriteToBinLog;
    return this;
}

NoWriteToBinLogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoWriteToBinLogContext.prototype.constructor = NoWriteToBinLogContext;

NoWriteToBinLogContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

NoWriteToBinLogContext.prototype.NO_WRITE_TO_BINLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
};

NoWriteToBinLogContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNoWriteToBinLog(this);
	}
};

NoWriteToBinLogContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNoWriteToBinLog(this);
	}
};

NoWriteToBinLogContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNoWriteToBinLog(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NoWriteToBinLogContext = NoWriteToBinLogContext;

MySQLParser.prototype.noWriteToBinLog = function() {

    var localctx = new NoWriteToBinLogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1024, MySQLParser.RULE_noWriteToBinLog);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7928;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsePartitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_usePartition;
    return this;
}

UsePartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsePartitionContext.prototype.constructor = UsePartitionContext;

UsePartitionContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

UsePartitionContext.prototype.identifierListWithParentheses = function() {
    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
};

UsePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUsePartition(this);
	}
};

UsePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUsePartition(this);
	}
};

UsePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUsePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UsePartitionContext = UsePartitionContext;

MySQLParser.prototype.usePartition = function() {

    var localctx = new UsePartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1026, MySQLParser.RULE_usePartition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7930;
        if (!( serverVersion >= 50602)) {
            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50602");
        }
        this.state = 7931;
        this.match(MySQLParser.PARTITION_SYMBOL);
        this.state = 7932;
        this.identifierListWithParentheses();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fieldIdentifier;
    return this;
}

FieldIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldIdentifierContext.prototype.constructor = FieldIdentifierContext;

FieldIdentifierContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

FieldIdentifierContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

FieldIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFieldIdentifier(this);
	}
};

FieldIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFieldIdentifier(this);
	}
};

FieldIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFieldIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FieldIdentifierContext = FieldIdentifierContext;

MySQLParser.prototype.fieldIdentifier = function() {

    var localctx = new FieldIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1028, MySQLParser.RULE_fieldIdentifier);
    try {
        this.state = 7939;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1066,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7934;
            this.dotIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7935;
            this.qualifiedIdentifier();
            this.state = 7937;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1065,this._ctx);
            if(la_===1) {
                this.state = 7936;
                this.dotIdentifier();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnName;
    return this;
}

ColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameContext.prototype.constructor = ColumnNameContext;

ColumnNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnNameContext.prototype.fieldIdentifier = function() {
    return this.getTypedRuleContext(FieldIdentifierContext,0);
};

ColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnName(this);
	}
};

ColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnName(this);
	}
};

ColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnNameContext = ColumnNameContext;

MySQLParser.prototype.columnName = function() {

    var localctx = new ColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1030, MySQLParser.RULE_columnName);
    try {
        this.state = 7945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1067,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7941;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 7942;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7943;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 7944;
            this.fieldIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnInternalRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnInternalRef;
    return this;
}

ColumnInternalRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnInternalRefContext.prototype.constructor = ColumnInternalRefContext;

ColumnInternalRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnInternalRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnInternalRef(this);
	}
};

ColumnInternalRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnInternalRef(this);
	}
};

ColumnInternalRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnInternalRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnInternalRefContext = ColumnInternalRefContext;

MySQLParser.prototype.columnInternalRef = function() {

    var localctx = new ColumnInternalRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1032, MySQLParser.RULE_columnInternalRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7947;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnInternalRefListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnInternalRefList;
    return this;
}

ColumnInternalRefListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnInternalRefListContext.prototype.constructor = ColumnInternalRefListContext;

ColumnInternalRefListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ColumnInternalRefListContext.prototype.columnInternalRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnInternalRefContext);
    } else {
        return this.getTypedRuleContext(ColumnInternalRefContext,i);
    }
};

ColumnInternalRefListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ColumnInternalRefListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


ColumnInternalRefListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnInternalRefList(this);
	}
};

ColumnInternalRefListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnInternalRefList(this);
	}
};

ColumnInternalRefListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnInternalRefList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnInternalRefListContext = ColumnInternalRefListContext;

MySQLParser.prototype.columnInternalRefList = function() {

    var localctx = new ColumnInternalRefListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1034, MySQLParser.RULE_columnInternalRefList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7949;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 7950;
        this.columnInternalRef();
        this.state = 7955;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 7951;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 7952;
            this.columnInternalRef();
            this.state = 7957;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7958;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnRef;
    return this;
}

ColumnRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnRefContext.prototype.constructor = ColumnRefContext;

ColumnRefContext.prototype.fieldIdentifier = function() {
    return this.getTypedRuleContext(FieldIdentifierContext,0);
};

ColumnRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnRef(this);
	}
};

ColumnRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnRef(this);
	}
};

ColumnRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnRefContext = ColumnRefContext;

MySQLParser.prototype.columnRef = function() {

    var localctx = new ColumnRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1036, MySQLParser.RULE_columnRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7960;
        this.fieldIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertIdentifier;
    return this;
}

InsertIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertIdentifierContext.prototype.constructor = InsertIdentifierContext;

InsertIdentifierContext.prototype.columnRef = function() {
    return this.getTypedRuleContext(ColumnRefContext,0);
};

InsertIdentifierContext.prototype.tableWild = function() {
    return this.getTypedRuleContext(TableWildContext,0);
};

InsertIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertIdentifier(this);
	}
};

InsertIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertIdentifier(this);
	}
};

InsertIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertIdentifierContext = InsertIdentifierContext;

MySQLParser.prototype.insertIdentifier = function() {

    var localctx = new InsertIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1038, MySQLParser.RULE_insertIdentifier);
    try {
        this.state = 7964;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1069,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7962;
            this.columnRef();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7963;
            this.tableWild();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexName;
    return this;
}

IndexNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexNameContext.prototype.constructor = IndexNameContext;

IndexNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IndexNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexName(this);
	}
};

IndexNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexName(this);
	}
};

IndexNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexNameContext = IndexNameContext;

MySQLParser.prototype.indexName = function() {

    var localctx = new IndexNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1040, MySQLParser.RULE_indexName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7966;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexRef;
    return this;
}

IndexRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexRefContext.prototype.constructor = IndexRefContext;

IndexRefContext.prototype.fieldIdentifier = function() {
    return this.getTypedRuleContext(FieldIdentifierContext,0);
};

IndexRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexRef(this);
	}
};

IndexRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexRef(this);
	}
};

IndexRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexRefContext = IndexRefContext;

MySQLParser.prototype.indexRef = function() {

    var localctx = new IndexRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1042, MySQLParser.RULE_indexRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7968;
        this.fieldIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableWildContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableWild;
    return this;
}

TableWildContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableWildContext.prototype.constructor = TableWildContext;

TableWildContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TableWildContext.prototype.DOT_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DOT_SYMBOL);
    } else {
        return this.getToken(MySQLParser.DOT_SYMBOL, i);
    }
};


TableWildContext.prototype.MULT_OPERATOR = function() {
    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
};

TableWildContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableWild(this);
	}
};

TableWildContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableWild(this);
	}
};

TableWildContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableWild(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableWildContext = TableWildContext;

MySQLParser.prototype.tableWild = function() {

    var localctx = new TableWildContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1044, MySQLParser.RULE_tableWild);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7970;
        this.identifier();
        this.state = 7971;
        this.match(MySQLParser.DOT_SYMBOL);
        this.state = 7975;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1070,this._ctx);
        if(la_===1) {
            this.state = 7972;
            this.identifier();
            this.state = 7973;
            this.match(MySQLParser.DOT_SYMBOL);

        }
        this.state = 7977;
        this.match(MySQLParser.MULT_OPERATOR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SchemaNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_schemaName;
    return this;
}

SchemaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SchemaNameContext.prototype.constructor = SchemaNameContext;

SchemaNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SchemaNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSchemaName(this);
	}
};

SchemaNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSchemaName(this);
	}
};

SchemaNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSchemaName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SchemaNameContext = SchemaNameContext;

MySQLParser.prototype.schemaName = function() {

    var localctx = new SchemaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1046, MySQLParser.RULE_schemaName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7979;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SchemaRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_schemaRef;
    return this;
}

SchemaRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SchemaRefContext.prototype.constructor = SchemaRefContext;

SchemaRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SchemaRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSchemaRef(this);
	}
};

SchemaRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSchemaRef(this);
	}
};

SchemaRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSchemaRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SchemaRefContext = SchemaRefContext;

MySQLParser.prototype.schemaRef = function() {

    var localctx = new SchemaRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1048, MySQLParser.RULE_schemaRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7981;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_procedureName;
    return this;
}

ProcedureNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureNameContext.prototype.constructor = ProcedureNameContext;

ProcedureNameContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

ProcedureNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProcedureName(this);
	}
};

ProcedureNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProcedureName(this);
	}
};

ProcedureNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProcedureName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProcedureNameContext = ProcedureNameContext;

MySQLParser.prototype.procedureName = function() {

    var localctx = new ProcedureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1050, MySQLParser.RULE_procedureName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7983;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_procedureRef;
    return this;
}

ProcedureRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureRefContext.prototype.constructor = ProcedureRefContext;

ProcedureRefContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

ProcedureRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProcedureRef(this);
	}
};

ProcedureRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProcedureRef(this);
	}
};

ProcedureRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProcedureRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProcedureRefContext = ProcedureRefContext;

MySQLParser.prototype.procedureRef = function() {

    var localctx = new ProcedureRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1052, MySQLParser.RULE_procedureRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7985;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionName;
    return this;
}

FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameContext.prototype.constructor = FunctionNameContext;

FunctionNameContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

FunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionName(this);
	}
};

FunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionName(this);
	}
};

FunctionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionNameContext = FunctionNameContext;

MySQLParser.prototype.functionName = function() {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1054, MySQLParser.RULE_functionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7987;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionRef;
    return this;
}

FunctionRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionRefContext.prototype.constructor = FunctionRefContext;

FunctionRefContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

FunctionRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionRef(this);
	}
};

FunctionRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionRef(this);
	}
};

FunctionRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionRefContext = FunctionRefContext;

MySQLParser.prototype.functionRef = function() {

    var localctx = new FunctionRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1056, MySQLParser.RULE_functionRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7989;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TriggerNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_triggerName;
    return this;
}

TriggerNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerNameContext.prototype.constructor = TriggerNameContext;

TriggerNameContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

TriggerNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTriggerName(this);
	}
};

TriggerNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTriggerName(this);
	}
};

TriggerNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTriggerName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TriggerNameContext = TriggerNameContext;

MySQLParser.prototype.triggerName = function() {

    var localctx = new TriggerNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1058, MySQLParser.RULE_triggerName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7991;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TriggerRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_triggerRef;
    return this;
}

TriggerRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerRefContext.prototype.constructor = TriggerRefContext;

TriggerRefContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

TriggerRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTriggerRef(this);
	}
};

TriggerRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTriggerRef(this);
	}
};

TriggerRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTriggerRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TriggerRefContext = TriggerRefContext;

MySQLParser.prototype.triggerRef = function() {

    var localctx = new TriggerRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1060, MySQLParser.RULE_triggerRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7993;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewName;
    return this;
}

ViewNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewNameContext.prototype.constructor = ViewNameContext;

ViewNameContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

ViewNameContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

ViewNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewName(this);
	}
};

ViewNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewName(this);
	}
};

ViewNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewNameContext = ViewNameContext;

MySQLParser.prototype.viewName = function() {

    var localctx = new ViewNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1062, MySQLParser.RULE_viewName);
    try {
        this.state = 7997;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1071,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7995;
            this.qualifiedIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7996;
            this.dotIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_viewRef;
    return this;
}

ViewRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewRefContext.prototype.constructor = ViewRefContext;

ViewRefContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

ViewRefContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

ViewRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterViewRef(this);
	}
};

ViewRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitViewRef(this);
	}
};

ViewRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitViewRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ViewRefContext = ViewRefContext;

MySQLParser.prototype.viewRef = function() {

    var localctx = new ViewRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1064, MySQLParser.RULE_viewRef);
    try {
        this.state = 8001;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1072,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7999;
            this.qualifiedIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8000;
            this.dotIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablespaceNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tablespaceName;
    return this;
}

TablespaceNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablespaceNameContext.prototype.constructor = TablespaceNameContext;

TablespaceNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablespaceNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTablespaceName(this);
	}
};

TablespaceNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTablespaceName(this);
	}
};

TablespaceNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTablespaceName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablespaceNameContext = TablespaceNameContext;

MySQLParser.prototype.tablespaceName = function() {

    var localctx = new TablespaceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1066, MySQLParser.RULE_tablespaceName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8003;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablespaceRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tablespaceRef;
    return this;
}

TablespaceRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablespaceRefContext.prototype.constructor = TablespaceRefContext;

TablespaceRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablespaceRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTablespaceRef(this);
	}
};

TablespaceRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTablespaceRef(this);
	}
};

TablespaceRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTablespaceRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablespaceRefContext = TablespaceRefContext;

MySQLParser.prototype.tablespaceRef = function() {

    var localctx = new TablespaceRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1068, MySQLParser.RULE_tablespaceRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8005;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogfileGroupNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_logfileGroupName;
    return this;
}

LogfileGroupNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogfileGroupNameContext.prototype.constructor = LogfileGroupNameContext;

LogfileGroupNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LogfileGroupNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogfileGroupName(this);
	}
};

LogfileGroupNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogfileGroupName(this);
	}
};

LogfileGroupNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogfileGroupName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LogfileGroupNameContext = LogfileGroupNameContext;

MySQLParser.prototype.logfileGroupName = function() {

    var localctx = new LogfileGroupNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1070, MySQLParser.RULE_logfileGroupName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8007;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogfileGroupRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_logfileGroupRef;
    return this;
}

LogfileGroupRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogfileGroupRefContext.prototype.constructor = LogfileGroupRefContext;

LogfileGroupRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LogfileGroupRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogfileGroupRef(this);
	}
};

LogfileGroupRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogfileGroupRef(this);
	}
};

LogfileGroupRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogfileGroupRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LogfileGroupRefContext = LogfileGroupRefContext;

MySQLParser.prototype.logfileGroupRef = function() {

    var localctx = new LogfileGroupRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1072, MySQLParser.RULE_logfileGroupRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8009;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_eventName;
    return this;
}

EventNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventNameContext.prototype.constructor = EventNameContext;

EventNameContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

EventNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEventName(this);
	}
};

EventNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEventName(this);
	}
};

EventNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEventName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EventNameContext = EventNameContext;

MySQLParser.prototype.eventName = function() {

    var localctx = new EventNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1074, MySQLParser.RULE_eventName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8011;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_eventRef;
    return this;
}

EventRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventRefContext.prototype.constructor = EventRefContext;

EventRefContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

EventRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEventRef(this);
	}
};

EventRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEventRef(this);
	}
};

EventRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEventRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EventRefContext = EventRefContext;

MySQLParser.prototype.eventRef = function() {

    var localctx = new EventRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1076, MySQLParser.RULE_eventRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8013;
        this.qualifiedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UdfNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_udfName;
    return this;
}

UdfNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UdfNameContext.prototype.constructor = UdfNameContext;

UdfNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UdfNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUdfName(this);
	}
};

UdfNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUdfName(this);
	}
};

UdfNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUdfName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UdfNameContext = UdfNameContext;

MySQLParser.prototype.udfName = function() {

    var localctx = new UdfNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1078, MySQLParser.RULE_udfName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8015;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ServerNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_serverName;
    return this;
}

ServerNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerNameContext.prototype.constructor = ServerNameContext;

ServerNameContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

ServerNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterServerName(this);
	}
};

ServerNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitServerName(this);
	}
};

ServerNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitServerName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ServerNameContext = ServerNameContext;

MySQLParser.prototype.serverName = function() {

    var localctx = new ServerNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1080, MySQLParser.RULE_serverName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8017;
        this.textOrIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ServerRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_serverRef;
    return this;
}

ServerRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerRefContext.prototype.constructor = ServerRefContext;

ServerRefContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

ServerRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterServerRef(this);
	}
};

ServerRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitServerRef(this);
	}
};

ServerRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitServerRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ServerRefContext = ServerRefContext;

MySQLParser.prototype.serverRef = function() {

    var localctx = new ServerRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1082, MySQLParser.RULE_serverRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8019;
        this.textOrIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EngineRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_engineRef;
    return this;
}

EngineRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EngineRefContext.prototype.constructor = EngineRefContext;

EngineRefContext.prototype.textOrIdentifier = function() {
    return this.getTypedRuleContext(TextOrIdentifierContext,0);
};

EngineRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEngineRef(this);
	}
};

EngineRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEngineRef(this);
	}
};

EngineRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEngineRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EngineRefContext = EngineRefContext;

MySQLParser.prototype.engineRef = function() {

    var localctx = new EngineRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1084, MySQLParser.RULE_engineRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8021;
        this.textOrIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableName;
    return this;
}

TableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

TableNameContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

TableNameContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableName(this);
	}
};

TableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableNameContext = TableNameContext;

MySQLParser.prototype.tableName = function() {

    var localctx = new TableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1086, MySQLParser.RULE_tableName);
    try {
        this.state = 8025;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1073,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8023;
            this.qualifiedIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8024;
            this.dotIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterTableRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_filterTableRef;
    return this;
}

FilterTableRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterTableRefContext.prototype.constructor = FilterTableRefContext;

FilterTableRefContext.prototype.schemaRef = function() {
    return this.getTypedRuleContext(SchemaRefContext,0);
};

FilterTableRefContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

FilterTableRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFilterTableRef(this);
	}
};

FilterTableRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFilterTableRef(this);
	}
};

FilterTableRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFilterTableRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FilterTableRefContext = FilterTableRefContext;

MySQLParser.prototype.filterTableRef = function() {

    var localctx = new FilterTableRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1088, MySQLParser.RULE_filterTableRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8027;
        this.schemaRef();
        this.state = 8028;
        this.dotIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableRefWithWildcardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableRefWithWildcard;
    return this;
}

TableRefWithWildcardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRefWithWildcardContext.prototype.constructor = TableRefWithWildcardContext;

TableRefWithWildcardContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableRefWithWildcardContext.prototype.DOT_SYMBOL = function() {
    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
};

TableRefWithWildcardContext.prototype.MULT_OPERATOR = function() {
    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
};

TableRefWithWildcardContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

TableRefWithWildcardContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableRefWithWildcard(this);
	}
};

TableRefWithWildcardContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableRefWithWildcard(this);
	}
};

TableRefWithWildcardContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableRefWithWildcard(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableRefWithWildcardContext = TableRefWithWildcardContext;

MySQLParser.prototype.tableRefWithWildcard = function() {

    var localctx = new TableRefWithWildcardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1090, MySQLParser.RULE_tableRefWithWildcard);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8030;
        this.identifier();
        this.state = 8038;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1075,this._ctx);
        if(la_===1) {
            this.state = 8031;
            this.match(MySQLParser.DOT_SYMBOL);
            this.state = 8032;
            this.match(MySQLParser.MULT_OPERATOR);

        } else if(la_===2) {
            this.state = 8033;
            this.dotIdentifier();
            this.state = 8036;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1074,this._ctx);
            if(la_===1) {
                this.state = 8034;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 8035;
                this.match(MySQLParser.MULT_OPERATOR);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableRef;
    return this;
}

TableRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRefContext.prototype.constructor = TableRefContext;

TableRefContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

TableRefContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

TableRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableRef(this);
	}
};

TableRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableRef(this);
	}
};

TableRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableRefContext = TableRefContext;

MySQLParser.prototype.tableRef = function() {

    var localctx = new TableRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1092, MySQLParser.RULE_tableRef);
    try {
        this.state = 8042;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1076,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8040;
            this.qualifiedIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8041;
            this.dotIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableRefListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableRefList;
    return this;
}

TableRefListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRefListContext.prototype.constructor = TableRefListContext;

TableRefListContext.prototype.tableRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableRefContext);
    } else {
        return this.getTypedRuleContext(TableRefContext,i);
    }
};

TableRefListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


TableRefListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableRefList(this);
	}
};

TableRefListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableRefList(this);
	}
};

TableRefListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableRefList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableRefListContext = TableRefListContext;

MySQLParser.prototype.tableRefList = function() {

    var localctx = new TableRefListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1094, MySQLParser.RULE_tableRefList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8044;
        this.tableRef();
        this.state = 8049;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1077,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8045;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8046;
                this.tableRef(); 
            }
            this.state = 8051;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1077,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableAliasRefListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableAliasRefList;
    return this;
}

TableAliasRefListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasRefListContext.prototype.constructor = TableAliasRefListContext;

TableAliasRefListContext.prototype.tableRefWithWildcard = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableRefWithWildcardContext);
    } else {
        return this.getTypedRuleContext(TableRefWithWildcardContext,i);
    }
};

TableAliasRefListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


TableAliasRefListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableAliasRefList(this);
	}
};

TableAliasRefListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableAliasRefList(this);
	}
};

TableAliasRefListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableAliasRefList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableAliasRefListContext = TableAliasRefListContext;

MySQLParser.prototype.tableAliasRefList = function() {

    var localctx = new TableAliasRefListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1096, MySQLParser.RULE_tableAliasRefList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8052;
        this.tableRefWithWildcard();
        this.state = 8057;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1078,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8053;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8054;
                this.tableRefWithWildcard(); 
            }
            this.state = 8059;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1078,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_parameterName;
    return this;
}

ParameterNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterNameContext.prototype.constructor = ParameterNameContext;

ParameterNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterParameterName(this);
	}
};

ParameterNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitParameterName(this);
	}
};

ParameterNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitParameterName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ParameterNameContext = ParameterNameContext;

MySQLParser.prototype.parameterName = function() {

    var localctx = new ParameterNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1098, MySQLParser.RULE_parameterName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8060;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_labelIdentifier;
    return this;
}

LabelIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelIdentifierContext.prototype.constructor = LabelIdentifierContext;

LabelIdentifierContext.prototype.pureIdentifier = function() {
    return this.getTypedRuleContext(PureIdentifierContext,0);
};

LabelIdentifierContext.prototype.labelKeyword = function() {
    return this.getTypedRuleContext(LabelKeywordContext,0);
};

LabelIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLabelIdentifier(this);
	}
};

LabelIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLabelIdentifier(this);
	}
};

LabelIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLabelIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LabelIdentifierContext = LabelIdentifierContext;

MySQLParser.prototype.labelIdentifier = function() {

    var localctx = new LabelIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1100, MySQLParser.RULE_labelIdentifier);
    try {
        this.state = 8064;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1079,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8062;
            this.pureIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8063;
            this.labelKeyword();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_labelRef;
    return this;
}

LabelRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelRefContext.prototype.constructor = LabelRefContext;

LabelRefContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

LabelRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLabelRef(this);
	}
};

LabelRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLabelRef(this);
	}
};

LabelRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLabelRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LabelRefContext = LabelRefContext;

MySQLParser.prototype.labelRef = function() {

    var localctx = new LabelRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1102, MySQLParser.RULE_labelRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8066;
        this.labelIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleIdentifier;
    return this;
}

RoleIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleIdentifierContext.prototype.constructor = RoleIdentifierContext;

RoleIdentifierContext.prototype.pureIdentifier = function() {
    return this.getTypedRuleContext(PureIdentifierContext,0);
};

RoleIdentifierContext.prototype.roleKeyword = function() {
    return this.getTypedRuleContext(RoleKeywordContext,0);
};

RoleIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleIdentifier(this);
	}
};

RoleIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleIdentifier(this);
	}
};

RoleIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleIdentifierContext = RoleIdentifierContext;

MySQLParser.prototype.roleIdentifier = function() {

    var localctx = new RoleIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1104, MySQLParser.RULE_roleIdentifier);
    try {
        this.state = 8070;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1080,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8068;
            this.pureIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8069;
            this.roleKeyword();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleRef;
    return this;
}

RoleRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleRefContext.prototype.constructor = RoleRefContext;

RoleRefContext.prototype.roleIdentifier = function() {
    return this.getTypedRuleContext(RoleIdentifierContext,0);
};

RoleRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleRef(this);
	}
};

RoleRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleRef(this);
	}
};

RoleRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleRefContext = RoleRefContext;

MySQLParser.prototype.roleRef = function() {

    var localctx = new RoleRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1106, MySQLParser.RULE_roleRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8072;
        this.roleIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PluginRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_pluginRef;
    return this;
}

PluginRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PluginRefContext.prototype.constructor = PluginRefContext;

PluginRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PluginRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPluginRef(this);
	}
};

PluginRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPluginRef(this);
	}
};

PluginRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPluginRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PluginRefContext = PluginRefContext;

MySQLParser.prototype.pluginRef = function() {

    var localctx = new PluginRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1108, MySQLParser.RULE_pluginRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8074;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_componentRef;
    return this;
}

ComponentRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentRefContext.prototype.constructor = ComponentRefContext;

ComponentRefContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

ComponentRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterComponentRef(this);
	}
};

ComponentRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitComponentRef(this);
	}
};

ComponentRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitComponentRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ComponentRefContext = ComponentRefContext;

MySQLParser.prototype.componentRef = function() {

    var localctx = new ComponentRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1110, MySQLParser.RULE_componentRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8076;
        this.textStringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceGroupRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resourceGroupRef;
    return this;
}

ResourceGroupRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceGroupRefContext.prototype.constructor = ResourceGroupRefContext;

ResourceGroupRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ResourceGroupRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResourceGroupRef(this);
	}
};

ResourceGroupRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResourceGroupRef(this);
	}
};

ResourceGroupRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResourceGroupRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResourceGroupRefContext = ResourceGroupRefContext;

MySQLParser.prototype.resourceGroupRef = function() {

    var localctx = new ResourceGroupRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1112, MySQLParser.RULE_resourceGroupRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8078;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_windowName;
    return this;
}

WindowNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowNameContext.prototype.constructor = WindowNameContext;

WindowNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WindowNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWindowName(this);
	}
};

WindowNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWindowName(this);
	}
};

WindowNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWindowName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WindowNameContext = WindowNameContext;

MySQLParser.prototype.windowName = function() {

    var localctx = new WindowNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1114, MySQLParser.RULE_windowName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8080;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PureIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_pureIdentifier;
    return this;
}

PureIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PureIdentifierContext.prototype.constructor = PureIdentifierContext;

PureIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(MySQLParser.IDENTIFIER, 0);
};

PureIdentifierContext.prototype.BACK_TICK_QUOTED_ID = function() {
    return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
};

PureIdentifierContext.prototype.DOUBLE_QUOTED_TEXT = function() {
    return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
};

PureIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPureIdentifier(this);
	}
};

PureIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPureIdentifier(this);
	}
};

PureIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPureIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PureIdentifierContext = PureIdentifierContext;

MySQLParser.prototype.pureIdentifier = function() {

    var localctx = new PureIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1116, MySQLParser.RULE_pureIdentifier);
    var _la = 0; // Token type
    try {
        this.state = 8085;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1081,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8082;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.IDENTIFIER || _la===MySQLParser.BACK_TICK_QUOTED_ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8083;
            if (!( isSqlModeActive(AnsiQuotes))) {
                throw new antlr4.error.FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
            }
            this.state = 8084;
            this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.pureIdentifier = function() {
    return this.getTypedRuleContext(PureIdentifierContext,0);
};

IdentifierContext.prototype.identifierKeyword = function() {
    return this.getTypedRuleContext(IdentifierKeywordContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierContext = IdentifierContext;

MySQLParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1118, MySQLParser.RULE_identifier);
    try {
        this.state = 8089;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1082,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8087;
            this.pureIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8088;
            this.identifierKeyword();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierList(this);
	}
};

IdentifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierListContext = IdentifierListContext;

MySQLParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1120, MySQLParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8091;
        this.identifier();
        this.state = 8096;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1083,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8092;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8093;
                this.identifier(); 
            }
            this.state = 8098;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1083,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListWithParenthesesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierListWithParentheses;
    return this;
}

IdentifierListWithParenthesesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListWithParenthesesContext.prototype.constructor = IdentifierListWithParenthesesContext;

IdentifierListWithParenthesesContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

IdentifierListWithParenthesesContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

IdentifierListWithParenthesesContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

IdentifierListWithParenthesesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierListWithParentheses(this);
	}
};

IdentifierListWithParenthesesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierListWithParentheses(this);
	}
};

IdentifierListWithParenthesesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierListWithParentheses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierListWithParenthesesContext = IdentifierListWithParenthesesContext;

MySQLParser.prototype.identifierListWithParentheses = function() {

    var localctx = new IdentifierListWithParenthesesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1122, MySQLParser.RULE_identifierListWithParentheses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8099;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 8100;
        this.identifierList();
        this.state = 8101;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_qualifiedIdentifier;
    return this;
}

QualifiedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedIdentifierContext.prototype.constructor = QualifiedIdentifierContext;

QualifiedIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

QualifiedIdentifierContext.prototype.dotIdentifier = function() {
    return this.getTypedRuleContext(DotIdentifierContext,0);
};

QualifiedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQualifiedIdentifier(this);
	}
};

QualifiedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQualifiedIdentifier(this);
	}
};

QualifiedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQualifiedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QualifiedIdentifierContext = QualifiedIdentifierContext;

MySQLParser.prototype.qualifiedIdentifier = function() {

    var localctx = new QualifiedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1124, MySQLParser.RULE_qualifiedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8103;
        this.identifier();
        this.state = 8105;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1084,this._ctx);
        if(la_===1) {
            this.state = 8104;
            this.dotIdentifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleIdentifier;
    return this;
}

SimpleIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleIdentifierContext.prototype.constructor = SimpleIdentifierContext;

SimpleIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SimpleIdentifierContext.prototype.dotIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DotIdentifierContext);
    } else {
        return this.getTypedRuleContext(DotIdentifierContext,i);
    }
};

SimpleIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleIdentifier(this);
	}
};

SimpleIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleIdentifier(this);
	}
};

SimpleIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleIdentifierContext = SimpleIdentifierContext;

MySQLParser.prototype.simpleIdentifier = function() {

    var localctx = new SimpleIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1126, MySQLParser.RULE_simpleIdentifier);
    var _la = 0; // Token type
    try {
        this.state = 8118;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1087,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8107;
            this.identifier();
            this.state = 8112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DOT_SYMBOL) {
                this.state = 8108;
                this.dotIdentifier();
                this.state = 8110;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.DOT_SYMBOL) {
                    this.state = 8109;
                    this.dotIdentifier();
                }

            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8114;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 8115;
            this.dotIdentifier();
            this.state = 8116;
            this.dotIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DotIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dotIdentifier;
    return this;
}

DotIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DotIdentifierContext.prototype.constructor = DotIdentifierContext;

DotIdentifierContext.prototype.DOT_SYMBOL = function() {
    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
};

DotIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DotIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDotIdentifier(this);
	}
};

DotIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDotIdentifier(this);
	}
};

DotIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDotIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DotIdentifierContext = DotIdentifierContext;

MySQLParser.prototype.dotIdentifier = function() {

    var localctx = new DotIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1128, MySQLParser.RULE_dotIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8120;
        this.match(MySQLParser.DOT_SYMBOL);
        this.state = 8121;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ulong_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ulong_number;
    return this;
}

Ulong_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ulong_numberContext.prototype.constructor = Ulong_numberContext;

Ulong_numberContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

Ulong_numberContext.prototype.HEX_NUMBER = function() {
    return this.getToken(MySQLParser.HEX_NUMBER, 0);
};

Ulong_numberContext.prototype.LONG_NUMBER = function() {
    return this.getToken(MySQLParser.LONG_NUMBER, 0);
};

Ulong_numberContext.prototype.ULONGLONG_NUMBER = function() {
    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
};

Ulong_numberContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
};

Ulong_numberContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
};

Ulong_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUlong_number(this);
	}
};

Ulong_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUlong_number(this);
	}
};

Ulong_numberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUlong_number(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.Ulong_numberContext = Ulong_numberContext;

MySQLParser.prototype.ulong_number = function() {

    var localctx = new Ulong_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1130, MySQLParser.RULE_ulong_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8123;
        _la = this._input.LA(1);
        if(!(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & ((1 << (MySQLParser.HEX_NUMBER - 421)) | (1 << (MySQLParser.DECIMAL_NUMBER - 421)) | (1 << (MySQLParser.FLOAT_NUMBER - 421)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Real_ulong_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_real_ulong_number;
    return this;
}

Real_ulong_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_ulong_numberContext.prototype.constructor = Real_ulong_numberContext;

Real_ulong_numberContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

Real_ulong_numberContext.prototype.HEX_NUMBER = function() {
    return this.getToken(MySQLParser.HEX_NUMBER, 0);
};

Real_ulong_numberContext.prototype.LONG_NUMBER = function() {
    return this.getToken(MySQLParser.LONG_NUMBER, 0);
};

Real_ulong_numberContext.prototype.ULONGLONG_NUMBER = function() {
    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
};

Real_ulong_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReal_ulong_number(this);
	}
};

Real_ulong_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReal_ulong_number(this);
	}
};

Real_ulong_numberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReal_ulong_number(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.Real_ulong_numberContext = Real_ulong_numberContext;

MySQLParser.prototype.real_ulong_number = function() {

    var localctx = new Real_ulong_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1132, MySQLParser.RULE_real_ulong_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8125;
        _la = this._input.LA(1);
        if(!(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la===MySQLParser.HEX_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ulonglong_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ulonglong_number;
    return this;
}

Ulonglong_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ulonglong_numberContext.prototype.constructor = Ulonglong_numberContext;

Ulonglong_numberContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

Ulonglong_numberContext.prototype.LONG_NUMBER = function() {
    return this.getToken(MySQLParser.LONG_NUMBER, 0);
};

Ulonglong_numberContext.prototype.ULONGLONG_NUMBER = function() {
    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
};

Ulonglong_numberContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
};

Ulonglong_numberContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
};

Ulonglong_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUlonglong_number(this);
	}
};

Ulonglong_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUlonglong_number(this);
	}
};

Ulonglong_numberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUlonglong_number(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.Ulonglong_numberContext = Ulonglong_numberContext;

MySQLParser.prototype.ulonglong_number = function() {

    var localctx = new Ulonglong_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1134, MySQLParser.RULE_ulonglong_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8127;
        _la = this._input.LA(1);
        if(!(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la===MySQLParser.DECIMAL_NUMBER || _la===MySQLParser.FLOAT_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Real_ulonglong_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_real_ulonglong_number;
    return this;
}

Real_ulonglong_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_ulonglong_numberContext.prototype.constructor = Real_ulonglong_numberContext;

Real_ulonglong_numberContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

Real_ulonglong_numberContext.prototype.HEX_NUMBER = function() {
    return this.getToken(MySQLParser.HEX_NUMBER, 0);
};

Real_ulonglong_numberContext.prototype.ULONGLONG_NUMBER = function() {
    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
};

Real_ulonglong_numberContext.prototype.LONG_NUMBER = function() {
    return this.getToken(MySQLParser.LONG_NUMBER, 0);
};

Real_ulonglong_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReal_ulonglong_number(this);
	}
};

Real_ulonglong_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReal_ulonglong_number(this);
	}
};

Real_ulonglong_numberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReal_ulonglong_number(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.Real_ulonglong_numberContext = Real_ulonglong_numberContext;

MySQLParser.prototype.real_ulonglong_number = function() {

    var localctx = new Real_ulonglong_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1136, MySQLParser.RULE_real_ulonglong_number);
    try {
        this.state = 8134;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1088,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8129;
            this.match(MySQLParser.INT_NUMBER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8130;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 8131;
            this.match(MySQLParser.HEX_NUMBER);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8132;
            this.match(MySQLParser.ULONGLONG_NUMBER);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8133;
            this.match(MySQLParser.LONG_NUMBER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.textLiteral = function() {
    return this.getTypedRuleContext(TextLiteralContext,0);
};

LiteralContext.prototype.numLiteral = function() {
    return this.getTypedRuleContext(NumLiteralContext,0);
};

LiteralContext.prototype.temporalLiteral = function() {
    return this.getTypedRuleContext(TemporalLiteralContext,0);
};

LiteralContext.prototype.nullLiteral = function() {
    return this.getTypedRuleContext(NullLiteralContext,0);
};

LiteralContext.prototype.boolLiteral = function() {
    return this.getTypedRuleContext(BoolLiteralContext,0);
};

LiteralContext.prototype.HEX_NUMBER = function() {
    return this.getToken(MySQLParser.HEX_NUMBER, 0);
};

LiteralContext.prototype.BIN_NUMBER = function() {
    return this.getToken(MySQLParser.BIN_NUMBER, 0);
};

LiteralContext.prototype.UNDERSCORE_CHARSET = function() {
    return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LiteralContext = LiteralContext;

MySQLParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1138, MySQLParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.state = 8145;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1090,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8136;
            this.textLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8137;
            this.numLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8138;
            this.temporalLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8139;
            this.nullLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 8140;
            this.boolLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 8142;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.UNDERSCORE_CHARSET) {
                this.state = 8141;
                this.match(MySQLParser.UNDERSCORE_CHARSET);
            }

            this.state = 8144;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.HEX_NUMBER || _la===MySQLParser.BIN_NUMBER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignedLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signedLiteral;
    return this;
}

SignedLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedLiteralContext.prototype.constructor = SignedLiteralContext;

SignedLiteralContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

SignedLiteralContext.prototype.PLUS_OPERATOR = function() {
    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
};

SignedLiteralContext.prototype.ulong_number = function() {
    return this.getTypedRuleContext(Ulong_numberContext,0);
};

SignedLiteralContext.prototype.MINUS_OPERATOR = function() {
    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
};

SignedLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignedLiteral(this);
	}
};

SignedLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignedLiteral(this);
	}
};

SignedLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignedLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignedLiteralContext = SignedLiteralContext;

MySQLParser.prototype.signedLiteral = function() {

    var localctx = new SignedLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1140, MySQLParser.RULE_signedLiteral);
    try {
        this.state = 8152;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1091,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8147;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8148;
            this.match(MySQLParser.PLUS_OPERATOR);
            this.state = 8149;
            this.ulong_number();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8150;
            this.match(MySQLParser.MINUS_OPERATOR);
            this.state = 8151;
            this.ulong_number();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_stringList;
    return this;
}

StringListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringListContext.prototype.constructor = StringListContext;

StringListContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

StringListContext.prototype.textString = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextStringContext);
    } else {
        return this.getTypedRuleContext(TextStringContext,i);
    }
};

StringListContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

StringListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


StringListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStringList(this);
	}
};

StringListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStringList(this);
	}
};

StringListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStringList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StringListContext = StringListContext;

MySQLParser.prototype.stringList = function() {

    var localctx = new StringListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1142, MySQLParser.RULE_stringList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8154;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 8155;
        this.textString();
        this.state = 8160;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 8156;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 8157;
            this.textString();
            this.state = 8162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 8163;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextStringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textStringLiteral;
    this.value = null; // Token
    return this;
}

TextStringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextStringLiteralContext.prototype.constructor = TextStringLiteralContext;

TextStringLiteralContext.prototype.SINGLE_QUOTED_TEXT = function() {
    return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
};

TextStringLiteralContext.prototype.DOUBLE_QUOTED_TEXT = function() {
    return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
};

TextStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextStringLiteral(this);
	}
};

TextStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextStringLiteral(this);
	}
};

TextStringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextStringLiteralContext = TextStringLiteralContext;

MySQLParser.prototype.textStringLiteral = function() {

    var localctx = new TextStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1144, MySQLParser.RULE_textStringLiteral);
    try {
        this.state = 8168;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1093,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8165;
            localctx.value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8166;
            if (!( !isSqlModeActive(AnsiQuotes))) {
                throw new antlr4.error.FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
            }
            this.state = 8167;
            localctx.value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextStringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textString;
    return this;
}

TextStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextStringContext.prototype.constructor = TextStringContext;

TextStringContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

TextStringContext.prototype.HEX_NUMBER = function() {
    return this.getToken(MySQLParser.HEX_NUMBER, 0);
};

TextStringContext.prototype.BIN_NUMBER = function() {
    return this.getToken(MySQLParser.BIN_NUMBER, 0);
};

TextStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextString(this);
	}
};

TextStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextString(this);
	}
};

TextStringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextString(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextStringContext = TextStringContext;

MySQLParser.prototype.textString = function() {

    var localctx = new TextStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1146, MySQLParser.RULE_textString);
    try {
        this.state = 8173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1094,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8170;
            this.textStringLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8171;
            this.match(MySQLParser.HEX_NUMBER);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8172;
            this.match(MySQLParser.BIN_NUMBER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextStringHashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textStringHash;
    return this;
}

TextStringHashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextStringHashContext.prototype.constructor = TextStringHashContext;

TextStringHashContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

TextStringHashContext.prototype.HEX_NUMBER = function() {
    return this.getToken(MySQLParser.HEX_NUMBER, 0);
};

TextStringHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextStringHash(this);
	}
};

TextStringHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextStringHash(this);
	}
};

TextStringHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextStringHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextStringHashContext = TextStringHashContext;

MySQLParser.prototype.textStringHash = function() {

    var localctx = new TextStringHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1148, MySQLParser.RULE_textStringHash);
    try {
        this.state = 8178;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1095,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8175;
            this.textStringLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8176;
            if (!( serverVersion >= 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
            }
            this.state = 8177;
            this.match(MySQLParser.HEX_NUMBER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textLiteral;
    return this;
}

TextLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextLiteralContext.prototype.constructor = TextLiteralContext;

TextLiteralContext.prototype.textStringLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextStringLiteralContext);
    } else {
        return this.getTypedRuleContext(TextStringLiteralContext,i);
    }
};

TextLiteralContext.prototype.NCHAR_TEXT = function() {
    return this.getToken(MySQLParser.NCHAR_TEXT, 0);
};

TextLiteralContext.prototype.UNDERSCORE_CHARSET = function() {
    return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
};

TextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextLiteral(this);
	}
};

TextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextLiteral(this);
	}
};

TextLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextLiteralContext = TextLiteralContext;

MySQLParser.prototype.textLiteral = function() {

    var localctx = new TextLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1150, MySQLParser.RULE_textLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8185;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1097,this._ctx);
        switch(la_) {
        case 1:
            this.state = 8181;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1096,this._ctx);
            if(la_===1) {
                this.state = 8180;
                this.match(MySQLParser.UNDERSCORE_CHARSET);

            }
            this.state = 8183;
            this.textStringLiteral();
            break;

        case 2:
            this.state = 8184;
            this.match(MySQLParser.NCHAR_TEXT);
            break;

        }
        this.state = 8190;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1098,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8187;
                this.textStringLiteral(); 
            }
            this.state = 8192;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1098,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextStringNoLinebreakContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textStringNoLinebreak;
    return this;
}

TextStringNoLinebreakContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextStringNoLinebreakContext.prototype.constructor = TextStringNoLinebreakContext;

TextStringNoLinebreakContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

TextStringNoLinebreakContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextStringNoLinebreak(this);
	}
};

TextStringNoLinebreakContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextStringNoLinebreak(this);
	}
};

TextStringNoLinebreakContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextStringNoLinebreak(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextStringNoLinebreakContext = TextStringNoLinebreakContext;

MySQLParser.prototype.textStringNoLinebreak = function() {

    var localctx = new TextStringNoLinebreakContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1152, MySQLParser.RULE_textStringNoLinebreak);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8193;
        this.textStringLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextStringLiteralListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textStringLiteralList;
    return this;
}

TextStringLiteralListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextStringLiteralListContext.prototype.constructor = TextStringLiteralListContext;

TextStringLiteralListContext.prototype.textStringLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TextStringLiteralContext);
    } else {
        return this.getTypedRuleContext(TextStringLiteralContext,i);
    }
};

TextStringLiteralListContext.prototype.COMMA_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    } else {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
};


TextStringLiteralListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextStringLiteralList(this);
	}
};

TextStringLiteralListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextStringLiteralList(this);
	}
};

TextStringLiteralListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextStringLiteralList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextStringLiteralListContext = TextStringLiteralListContext;

MySQLParser.prototype.textStringLiteralList = function() {

    var localctx = new TextStringLiteralListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1154, MySQLParser.RULE_textStringLiteralList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8195;
        this.textStringLiteral();
        this.state = 8200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA_SYMBOL) {
            this.state = 8196;
            this.match(MySQLParser.COMMA_SYMBOL);
            this.state = 8197;
            this.textStringLiteral();
            this.state = 8202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_numLiteral;
    return this;
}

NumLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumLiteralContext.prototype.constructor = NumLiteralContext;

NumLiteralContext.prototype.INT_NUMBER = function() {
    return this.getToken(MySQLParser.INT_NUMBER, 0);
};

NumLiteralContext.prototype.LONG_NUMBER = function() {
    return this.getToken(MySQLParser.LONG_NUMBER, 0);
};

NumLiteralContext.prototype.ULONGLONG_NUMBER = function() {
    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
};

NumLiteralContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
};

NumLiteralContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
};

NumLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNumLiteral(this);
	}
};

NumLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNumLiteral(this);
	}
};

NumLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNumLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NumLiteralContext = NumLiteralContext;

MySQLParser.prototype.numLiteral = function() {

    var localctx = new NumLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1156, MySQLParser.RULE_numLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8203;
        _la = this._input.LA(1);
        if(!(((((_la - 380)) & ~0x1f) == 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la===MySQLParser.DECIMAL_NUMBER || _la===MySQLParser.FLOAT_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoolLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_boolLiteral;
    return this;
}

BoolLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolLiteralContext.prototype.constructor = BoolLiteralContext;

BoolLiteralContext.prototype.TRUE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
};

BoolLiteralContext.prototype.FALSE_SYMBOL = function() {
    return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
};

BoolLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBoolLiteral(this);
	}
};

BoolLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBoolLiteral(this);
	}
};

BoolLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBoolLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BoolLiteralContext = BoolLiteralContext;

MySQLParser.prototype.boolLiteral = function() {

    var localctx = new BoolLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1158, MySQLParser.RULE_boolLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8205;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FALSE_SYMBOL || _la===MySQLParser.TRUE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_nullLiteral;
    return this;
}

NullLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

NullLiteralContext.prototype.NULL_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
};

NullLiteralContext.prototype.NULL2_SYMBOL = function() {
    return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
};

NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNullLiteral(this);
	}
};

NullLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNullLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NullLiteralContext = NullLiteralContext;

MySQLParser.prototype.nullLiteral = function() {

    var localctx = new NullLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1160, MySQLParser.RULE_nullLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8207;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NULL2_SYMBOL || _la===MySQLParser.NULL_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemporalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_temporalLiteral;
    return this;
}

TemporalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemporalLiteralContext.prototype.constructor = TemporalLiteralContext;

TemporalLiteralContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

TemporalLiteralContext.prototype.SINGLE_QUOTED_TEXT = function() {
    return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
};

TemporalLiteralContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

TemporalLiteralContext.prototype.TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
};

TemporalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTemporalLiteral(this);
	}
};

TemporalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTemporalLiteral(this);
	}
};

TemporalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTemporalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TemporalLiteralContext = TemporalLiteralContext;

MySQLParser.prototype.temporalLiteral = function() {

    var localctx = new TemporalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1162, MySQLParser.RULE_temporalLiteral);
    try {
        this.state = 8215;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.DATE_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 8209;
            this.match(MySQLParser.DATE_SYMBOL);
            this.state = 8210;
            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
            break;
        case MySQLParser.TIME_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 8211;
            this.match(MySQLParser.TIME_SYMBOL);
            this.state = 8212;
            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
            break;
        case MySQLParser.TIMESTAMP_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 8213;
            this.match(MySQLParser.TIMESTAMP_SYMBOL);
            this.state = 8214;
            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FloatOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_floatOptions;
    return this;
}

FloatOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatOptionsContext.prototype.constructor = FloatOptionsContext;

FloatOptionsContext.prototype.fieldLength = function() {
    return this.getTypedRuleContext(FieldLengthContext,0);
};

FloatOptionsContext.prototype.precision = function() {
    return this.getTypedRuleContext(PrecisionContext,0);
};

FloatOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFloatOptions(this);
	}
};

FloatOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFloatOptions(this);
	}
};

FloatOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFloatOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FloatOptionsContext = FloatOptionsContext;

MySQLParser.prototype.floatOptions = function() {

    var localctx = new FloatOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1164, MySQLParser.RULE_floatOptions);
    try {
        this.state = 8219;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1101,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8217;
            this.fieldLength();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8218;
            this.precision();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandardFloatOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_standardFloatOptions;
    return this;
}

StandardFloatOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardFloatOptionsContext.prototype.constructor = StandardFloatOptionsContext;

StandardFloatOptionsContext.prototype.precision = function() {
    return this.getTypedRuleContext(PrecisionContext,0);
};

StandardFloatOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStandardFloatOptions(this);
	}
};

StandardFloatOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStandardFloatOptions(this);
	}
};

StandardFloatOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStandardFloatOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StandardFloatOptionsContext = StandardFloatOptionsContext;

MySQLParser.prototype.standardFloatOptions = function() {

    var localctx = new StandardFloatOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1166, MySQLParser.RULE_standardFloatOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8221;
        this.precision();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrecisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_precision;
    return this;
}

PrecisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecisionContext.prototype.constructor = PrecisionContext;

PrecisionContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

PrecisionContext.prototype.INT_NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.INT_NUMBER);
    } else {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
};


PrecisionContext.prototype.COMMA_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
};

PrecisionContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

PrecisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrecision(this);
	}
};

PrecisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrecision(this);
	}
};

PrecisionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrecision(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PrecisionContext = PrecisionContext;

MySQLParser.prototype.precision = function() {

    var localctx = new PrecisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1168, MySQLParser.RULE_precision);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8223;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 8224;
        this.match(MySQLParser.INT_NUMBER);
        this.state = 8225;
        this.match(MySQLParser.COMMA_SYMBOL);
        this.state = 8226;
        this.match(MySQLParser.INT_NUMBER);
        this.state = 8227;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextOrIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_textOrIdentifier;
    return this;
}

TextOrIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextOrIdentifierContext.prototype.constructor = TextOrIdentifierContext;

TextOrIdentifierContext.prototype.SINGLE_QUOTED_TEXT = function() {
    return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
};

TextOrIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TextOrIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTextOrIdentifier(this);
	}
};

TextOrIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTextOrIdentifier(this);
	}
};

TextOrIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTextOrIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TextOrIdentifierContext = TextOrIdentifierContext;

MySQLParser.prototype.textOrIdentifier = function() {

    var localctx = new TextOrIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1170, MySQLParser.RULE_textOrIdentifier);
    try {
        this.state = 8231;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8229;
            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8230;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LValueIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lValueIdentifier;
    return this;
}

LValueIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LValueIdentifierContext.prototype.constructor = LValueIdentifierContext;

LValueIdentifierContext.prototype.pureIdentifier = function() {
    return this.getTypedRuleContext(PureIdentifierContext,0);
};

LValueIdentifierContext.prototype.lValueKeyword = function() {
    return this.getTypedRuleContext(LValueKeywordContext,0);
};

LValueIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLValueIdentifier(this);
	}
};

LValueIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLValueIdentifier(this);
	}
};

LValueIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLValueIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LValueIdentifierContext = LValueIdentifierContext;

MySQLParser.prototype.lValueIdentifier = function() {

    var localctx = new LValueIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1172, MySQLParser.RULE_lValueIdentifier);
    try {
        this.state = 8235;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8233;
            this.pureIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8234;
            this.lValueKeyword();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleIdentifierOrTextContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleIdentifierOrText;
    return this;
}

RoleIdentifierOrTextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleIdentifierOrTextContext.prototype.constructor = RoleIdentifierOrTextContext;

RoleIdentifierOrTextContext.prototype.roleIdentifier = function() {
    return this.getTypedRuleContext(RoleIdentifierContext,0);
};

RoleIdentifierOrTextContext.prototype.textStringLiteral = function() {
    return this.getTypedRuleContext(TextStringLiteralContext,0);
};

RoleIdentifierOrTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleIdentifierOrText(this);
	}
};

RoleIdentifierOrTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleIdentifierOrText(this);
	}
};

RoleIdentifierOrTextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleIdentifierOrText(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleIdentifierOrTextContext = RoleIdentifierOrTextContext;

MySQLParser.prototype.roleIdentifierOrText = function() {

    var localctx = new RoleIdentifierOrTextContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1174, MySQLParser.RULE_roleIdentifierOrText);
    try {
        this.state = 8239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1104,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8237;
            this.roleIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8238;
            this.textStringLiteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SizeNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_sizeNumber;
    return this;
}

SizeNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SizeNumberContext.prototype.constructor = SizeNumberContext;

SizeNumberContext.prototype.real_ulonglong_number = function() {
    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
};

SizeNumberContext.prototype.pureIdentifier = function() {
    return this.getTypedRuleContext(PureIdentifierContext,0);
};

SizeNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSizeNumber(this);
	}
};

SizeNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSizeNumber(this);
	}
};

SizeNumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSizeNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SizeNumberContext = SizeNumberContext;

MySQLParser.prototype.sizeNumber = function() {

    var localctx = new SizeNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1176, MySQLParser.RULE_sizeNumber);
    try {
        this.state = 8243;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8241;
            this.real_ulonglong_number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8242;
            this.pureIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParenthesesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_parentheses;
    return this;
}

ParenthesesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesesContext.prototype.constructor = ParenthesesContext;

ParenthesesContext.prototype.OPEN_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
};

ParenthesesContext.prototype.CLOSE_PAR_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
};

ParenthesesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterParentheses(this);
	}
};

ParenthesesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitParentheses(this);
	}
};

ParenthesesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitParentheses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ParenthesesContext = ParenthesesContext;

MySQLParser.prototype.parentheses = function() {

    var localctx = new ParenthesesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1178, MySQLParser.RULE_parentheses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8245;
        this.match(MySQLParser.OPEN_PAR_SYMBOL);
        this.state = 8246;
        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EqualContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_equal;
    return this;
}

EqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualContext.prototype.constructor = EqualContext;

EqualContext.prototype.EQUAL_OPERATOR = function() {
    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
};

EqualContext.prototype.ASSIGN_OPERATOR = function() {
    return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
};

EqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEqual(this);
	}
};

EqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEqual(this);
	}
};

EqualContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEqual(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EqualContext = EqualContext;

MySQLParser.prototype.equal = function() {

    var localctx = new EqualContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1180, MySQLParser.RULE_equal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8248;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.EQUAL_OPERATOR || _la===MySQLParser.ASSIGN_OPERATOR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_optionType;
    return this;
}

OptionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionTypeContext.prototype.constructor = OptionTypeContext;

OptionTypeContext.prototype.PERSIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
};

OptionTypeContext.prototype.PERSIST_ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
};

OptionTypeContext.prototype.GLOBAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
};

OptionTypeContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

OptionTypeContext.prototype.SESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
};

OptionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOptionType(this);
	}
};

OptionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOptionType(this);
	}
};

OptionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOptionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OptionTypeContext = OptionTypeContext;

MySQLParser.prototype.optionType = function() {

    var localctx = new OptionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1182, MySQLParser.RULE_optionType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8250;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.GLOBAL_SYMBOL || _la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.SESSION_SYMBOL || _la===MySQLParser.PERSIST_SYMBOL || _la===MySQLParser.PERSIST_ONLY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarIdentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_varIdentType;
    return this;
}

VarIdentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarIdentTypeContext.prototype.constructor = VarIdentTypeContext;

VarIdentTypeContext.prototype.GLOBAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
};

VarIdentTypeContext.prototype.DOT_SYMBOL = function() {
    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
};

VarIdentTypeContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

VarIdentTypeContext.prototype.SESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
};

VarIdentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVarIdentType(this);
	}
};

VarIdentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVarIdentType(this);
	}
};

VarIdentTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVarIdentType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VarIdentTypeContext = VarIdentTypeContext;

MySQLParser.prototype.varIdentType = function() {

    var localctx = new VarIdentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1184, MySQLParser.RULE_varIdentType);
    try {
        this.state = 8258;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.GLOBAL_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 8252;
            this.match(MySQLParser.GLOBAL_SYMBOL);
            this.state = 8253;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        case MySQLParser.LOCAL_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 8254;
            this.match(MySQLParser.LOCAL_SYMBOL);
            this.state = 8255;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        case MySQLParser.SESSION_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 8256;
            this.match(MySQLParser.SESSION_SYMBOL);
            this.state = 8257;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetVarIdentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setVarIdentType;
    return this;
}

SetVarIdentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetVarIdentTypeContext.prototype.constructor = SetVarIdentTypeContext;

SetVarIdentTypeContext.prototype.PERSIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
};

SetVarIdentTypeContext.prototype.DOT_SYMBOL = function() {
    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
};

SetVarIdentTypeContext.prototype.PERSIST_ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
};

SetVarIdentTypeContext.prototype.GLOBAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
};

SetVarIdentTypeContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

SetVarIdentTypeContext.prototype.SESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
};

SetVarIdentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetVarIdentType(this);
	}
};

SetVarIdentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetVarIdentType(this);
	}
};

SetVarIdentTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetVarIdentType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetVarIdentTypeContext = SetVarIdentTypeContext;

MySQLParser.prototype.setVarIdentType = function() {

    var localctx = new SetVarIdentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1186, MySQLParser.RULE_setVarIdentType);
    try {
        this.state = 8270;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.PERSIST_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 8260;
            this.match(MySQLParser.PERSIST_SYMBOL);
            this.state = 8261;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        case MySQLParser.PERSIST_ONLY_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 8262;
            this.match(MySQLParser.PERSIST_ONLY_SYMBOL);
            this.state = 8263;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        case MySQLParser.GLOBAL_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 8264;
            this.match(MySQLParser.GLOBAL_SYMBOL);
            this.state = 8265;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        case MySQLParser.LOCAL_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 8266;
            this.match(MySQLParser.LOCAL_SYMBOL);
            this.state = 8267;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        case MySQLParser.SESSION_SYMBOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 8268;
            this.match(MySQLParser.SESSION_SYMBOL);
            this.state = 8269;
            this.match(MySQLParser.DOT_SYMBOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierKeyword;
    return this;
}

IdentifierKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierKeywordContext.prototype.constructor = IdentifierKeywordContext;

IdentifierKeywordContext.prototype.labelKeyword = function() {
    return this.getTypedRuleContext(LabelKeywordContext,0);
};

IdentifierKeywordContext.prototype.roleOrIdentifierKeyword = function() {
    return this.getTypedRuleContext(RoleOrIdentifierKeywordContext,0);
};

IdentifierKeywordContext.prototype.EXECUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
};

IdentifierKeywordContext.prototype.SHUTDOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
};

IdentifierKeywordContext.prototype.RESTART_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
};

IdentifierKeywordContext.prototype.identifierKeywordsUnambiguous = function() {
    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
};

IdentifierKeywordContext.prototype.identifierKeywordsAmbiguous1RolesAndLabels = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0);
};

IdentifierKeywordContext.prototype.identifierKeywordsAmbiguous2Labels = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
};

IdentifierKeywordContext.prototype.identifierKeywordsAmbiguous3Roles = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
};

IdentifierKeywordContext.prototype.identifierKeywordsAmbiguous4SystemVariables = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
};

IdentifierKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierKeyword(this);
	}
};

IdentifierKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierKeyword(this);
	}
};

IdentifierKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierKeywordContext = IdentifierKeywordContext;

MySQLParser.prototype.identifierKeyword = function() {

    var localctx = new IdentifierKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1188, MySQLParser.RULE_identifierKeyword);
    try {
        this.state = 8289;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1110,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8272;
            if (!( serverVersion < 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
            }
            this.state = 8280;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1108,this._ctx);
            switch(la_) {
            case 1:
                this.state = 8273;
                this.labelKeyword();
                break;

            case 2:
                this.state = 8274;
                this.roleOrIdentifierKeyword();
                break;

            case 3:
                this.state = 8275;
                this.match(MySQLParser.EXECUTE_SYMBOL);
                break;

            case 4:
                this.state = 8276;
                if (!( serverVersion >= 50709)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
                }
                this.state = 8277;
                this.match(MySQLParser.SHUTDOWN_SYMBOL);
                break;

            case 5:
                this.state = 8278;
                if (!( serverVersion >= 80011)) {
                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
                }
                this.state = 8279;
                this.match(MySQLParser.RESTART_SYMBOL);
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8287;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.ACCOUNT_SYMBOL:
            case MySQLParser.ALWAYS_SYMBOL:
            case MySQLParser.BACKUP_SYMBOL:
            case MySQLParser.CLOSE_SYMBOL:
            case MySQLParser.FORMAT_SYMBOL:
            case MySQLParser.GROUP_REPLICATION_SYMBOL:
            case MySQLParser.HOST_SYMBOL:
            case MySQLParser.OPEN_SYMBOL:
            case MySQLParser.OPTIONS_SYMBOL:
            case MySQLParser.OWNER_SYMBOL:
            case MySQLParser.PARSER_SYMBOL:
            case MySQLParser.PORT_SYMBOL:
            case MySQLParser.REMOVE_SYMBOL:
            case MySQLParser.RESTORE_SYMBOL:
            case MySQLParser.SECURITY_SYMBOL:
            case MySQLParser.SERVER_SYMBOL:
            case MySQLParser.SOCKET_SYMBOL:
            case MySQLParser.SONAME_SYMBOL:
            case MySQLParser.UPGRADE_SYMBOL:
            case MySQLParser.WRAPPER_SYMBOL:
            case MySQLParser.ACTION_SYMBOL:
            case MySQLParser.ADDDATE_SYMBOL:
            case MySQLParser.AFTER_SYMBOL:
            case MySQLParser.AGAINST_SYMBOL:
            case MySQLParser.AGGREGATE_SYMBOL:
            case MySQLParser.ALGORITHM_SYMBOL:
            case MySQLParser.ANY_SYMBOL:
            case MySQLParser.AT_SYMBOL:
            case MySQLParser.AUTO_INCREMENT_SYMBOL:
            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
            case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
            case MySQLParser.AVG_SYMBOL:
            case MySQLParser.BINLOG_SYMBOL:
            case MySQLParser.BIT_SYMBOL:
            case MySQLParser.BLOCK_SYMBOL:
            case MySQLParser.BOOL_SYMBOL:
            case MySQLParser.BOOLEAN_SYMBOL:
            case MySQLParser.BTREE_SYMBOL:
            case MySQLParser.CASCADED_SYMBOL:
            case MySQLParser.CATALOG_NAME_SYMBOL:
            case MySQLParser.CHAIN_SYMBOL:
            case MySQLParser.CHANGED_SYMBOL:
            case MySQLParser.CHANNEL_SYMBOL:
            case MySQLParser.CIPHER_SYMBOL:
            case MySQLParser.CLIENT_SYMBOL:
            case MySQLParser.CLASS_ORIGIN_SYMBOL:
            case MySQLParser.COALESCE_SYMBOL:
            case MySQLParser.CODE_SYMBOL:
            case MySQLParser.COLLATION_SYMBOL:
            case MySQLParser.COLUMN_NAME_SYMBOL:
            case MySQLParser.COLUMN_FORMAT_SYMBOL:
            case MySQLParser.COLUMNS_SYMBOL:
            case MySQLParser.COMMITTED_SYMBOL:
            case MySQLParser.COMPACT_SYMBOL:
            case MySQLParser.COMPLETION_SYMBOL:
            case MySQLParser.COMPRESSED_SYMBOL:
            case MySQLParser.COMPRESSION_SYMBOL:
            case MySQLParser.ENCRYPTION_SYMBOL:
            case MySQLParser.CONCURRENT_SYMBOL:
            case MySQLParser.CONNECTION_SYMBOL:
            case MySQLParser.CONSISTENT_SYMBOL:
            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
            case MySQLParser.CONTEXT_SYMBOL:
            case MySQLParser.CPU_SYMBOL:
            case MySQLParser.CURRENT_SYMBOL:
            case MySQLParser.CURSOR_NAME_SYMBOL:
            case MySQLParser.DATA_SYMBOL:
            case MySQLParser.DATAFILE_SYMBOL:
            case MySQLParser.DATETIME_SYMBOL:
            case MySQLParser.DATE_SYMBOL:
            case MySQLParser.DAY_SYMBOL:
            case MySQLParser.DEFAULT_AUTH_SYMBOL:
            case MySQLParser.DEFINER_SYMBOL:
            case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
            case MySQLParser.DIAGNOSTICS_SYMBOL:
            case MySQLParser.DIRECTORY_SYMBOL:
            case MySQLParser.DISABLE_SYMBOL:
            case MySQLParser.DISCARD_SYMBOL:
            case MySQLParser.DISK_SYMBOL:
            case MySQLParser.DUMPFILE_SYMBOL:
            case MySQLParser.DUPLICATE_SYMBOL:
            case MySQLParser.DYNAMIC_SYMBOL:
            case MySQLParser.ENDS_SYMBOL:
            case MySQLParser.ENUM_SYMBOL:
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.ENGINES_SYMBOL:
            case MySQLParser.ERROR_SYMBOL:
            case MySQLParser.ERRORS_SYMBOL:
            case MySQLParser.ESCAPE_SYMBOL:
            case MySQLParser.EVENTS_SYMBOL:
            case MySQLParser.EVERY_SYMBOL:
            case MySQLParser.EXPANSION_SYMBOL:
            case MySQLParser.EXPORT_SYMBOL:
            case MySQLParser.EXTENDED_SYMBOL:
            case MySQLParser.EXTENT_SIZE_SYMBOL:
            case MySQLParser.FAULTS_SYMBOL:
            case MySQLParser.FAST_SYMBOL:
            case MySQLParser.FOUND_SYMBOL:
            case MySQLParser.ENABLE_SYMBOL:
            case MySQLParser.FULL_SYMBOL:
            case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
            case MySQLParser.FILTER_SYMBOL:
            case MySQLParser.FIRST_SYMBOL:
            case MySQLParser.FIXED_SYMBOL:
            case MySQLParser.GENERAL_SYMBOL:
            case MySQLParser.GEOMETRY_SYMBOL:
            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
            case MySQLParser.GET_FORMAT_SYMBOL:
            case MySQLParser.GRANTS_SYMBOL:
            case MySQLParser.HASH_SYMBOL:
            case MySQLParser.HOSTS_SYMBOL:
            case MySQLParser.HOUR_SYMBOL:
            case MySQLParser.IDENTIFIED_SYMBOL:
            case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
            case MySQLParser.INVOKER_SYMBOL:
            case MySQLParser.INDEXES_SYMBOL:
            case MySQLParser.INITIAL_SIZE_SYMBOL:
            case MySQLParser.INSTANCE_SYMBOL:
            case MySQLParser.IO_SYMBOL:
            case MySQLParser.IPC_SYMBOL:
            case MySQLParser.ISOLATION_SYMBOL:
            case MySQLParser.ISSUER_SYMBOL:
            case MySQLParser.INSERT_METHOD_SYMBOL:
            case MySQLParser.JSON_SYMBOL:
            case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
            case MySQLParser.LAST_SYMBOL:
            case MySQLParser.LEAVES_SYMBOL:
            case MySQLParser.LESS_SYMBOL:
            case MySQLParser.LEVEL_SYMBOL:
            case MySQLParser.LINESTRING_SYMBOL:
            case MySQLParser.LIST_SYMBOL:
            case MySQLParser.LOCKS_SYMBOL:
            case MySQLParser.LOGFILE_SYMBOL:
            case MySQLParser.LOGS_SYMBOL:
            case MySQLParser.MAX_ROWS_SYMBOL:
            case MySQLParser.MASTER_SYMBOL:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
            case MySQLParser.MASTER_HOST_SYMBOL:
            case MySQLParser.MASTER_PORT_SYMBOL:
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.MASTER_USER_SYMBOL:
            case MySQLParser.MASTER_PASSWORD_SYMBOL:
            case MySQLParser.MASTER_SERVER_ID_SYMBOL:
            case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
            case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
            case MySQLParser.MASTER_DELAY_SYMBOL:
            case MySQLParser.MASTER_SSL_SYMBOL:
            case MySQLParser.MASTER_SSL_CA_SYMBOL:
            case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
            case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
            case MySQLParser.MASTER_SSL_CERT_SYMBOL:
            case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
            case MySQLParser.MASTER_SSL_CRL_SYMBOL:
            case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
            case MySQLParser.MASTER_SSL_KEY_SYMBOL:
            case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_SIZE_SYMBOL:
            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
            case MySQLParser.MEDIUM_SYMBOL:
            case MySQLParser.MEMORY_SYMBOL:
            case MySQLParser.MERGE_SYMBOL:
            case MySQLParser.MESSAGE_TEXT_SYMBOL:
            case MySQLParser.MICROSECOND_SYMBOL:
            case MySQLParser.MIGRATE_SYMBOL:
            case MySQLParser.MINUTE_SYMBOL:
            case MySQLParser.MIN_ROWS_SYMBOL:
            case MySQLParser.MODIFY_SYMBOL:
            case MySQLParser.MODE_SYMBOL:
            case MySQLParser.MONTH_SYMBOL:
            case MySQLParser.MULTILINESTRING_SYMBOL:
            case MySQLParser.MULTIPOINT_SYMBOL:
            case MySQLParser.MULTIPOLYGON_SYMBOL:
            case MySQLParser.MUTEX_SYMBOL:
            case MySQLParser.MYSQL_ERRNO_SYMBOL:
            case MySQLParser.NAME_SYMBOL:
            case MySQLParser.NAMES_SYMBOL:
            case MySQLParser.NATIONAL_SYMBOL:
            case MySQLParser.NCHAR_SYMBOL:
            case MySQLParser.NDBCLUSTER_SYMBOL:
            case MySQLParser.NEVER_SYMBOL:
            case MySQLParser.NEXT_SYMBOL:
            case MySQLParser.NEW_SYMBOL:
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.NODEGROUP_SYMBOL:
            case MySQLParser.NUMBER_SYMBOL:
            case MySQLParser.NVARCHAR_SYMBOL:
            case MySQLParser.OFFSET_SYMBOL:
            case MySQLParser.ONE_SYMBOL:
            case MySQLParser.PACK_KEYS_SYMBOL:
            case MySQLParser.PAGE_SYMBOL:
            case MySQLParser.PARTIAL_SYMBOL:
            case MySQLParser.PARTITIONING_SYMBOL:
            case MySQLParser.PARTITIONS_SYMBOL:
            case MySQLParser.PASSWORD_SYMBOL:
            case MySQLParser.PHASE_SYMBOL:
            case MySQLParser.PLUGIN_DIR_SYMBOL:
            case MySQLParser.PLUGIN_SYMBOL:
            case MySQLParser.PLUGINS_SYMBOL:
            case MySQLParser.POINT_SYMBOL:
            case MySQLParser.POLYGON_SYMBOL:
            case MySQLParser.PRESERVE_SYMBOL:
            case MySQLParser.PREV_SYMBOL:
            case MySQLParser.PRIVILEGES_SYMBOL:
            case MySQLParser.PROCESSLIST_SYMBOL:
            case MySQLParser.PROFILE_SYMBOL:
            case MySQLParser.PROFILES_SYMBOL:
            case MySQLParser.QUARTER_SYMBOL:
            case MySQLParser.QUERY_SYMBOL:
            case MySQLParser.QUICK_SYMBOL:
            case MySQLParser.READ_ONLY_SYMBOL:
            case MySQLParser.REBUILD_SYMBOL:
            case MySQLParser.RECOVER_SYMBOL:
            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.REDUNDANT_SYMBOL:
            case MySQLParser.RELAY_SYMBOL:
            case MySQLParser.RELAYLOG_SYMBOL:
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
            case MySQLParser.RELAY_THREAD_SYMBOL:
            case MySQLParser.REORGANIZE_SYMBOL:
            case MySQLParser.REPEATABLE_SYMBOL:
            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
            case MySQLParser.RESUME_SYMBOL:
            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
            case MySQLParser.RETURNS_SYMBOL:
            case MySQLParser.REVERSE_SYMBOL:
            case MySQLParser.ROLLUP_SYMBOL:
            case MySQLParser.ROTATE_SYMBOL:
            case MySQLParser.ROUTINE_SYMBOL:
            case MySQLParser.ROW_COUNT_SYMBOL:
            case MySQLParser.ROW_FORMAT_SYMBOL:
            case MySQLParser.RTREE_SYMBOL:
            case MySQLParser.SCHEDULE_SYMBOL:
            case MySQLParser.SCHEMA_NAME_SYMBOL:
            case MySQLParser.SECOND_SYMBOL:
            case MySQLParser.SERIAL_SYMBOL:
            case MySQLParser.SERIALIZABLE_SYMBOL:
            case MySQLParser.SIMPLE_SYMBOL:
            case MySQLParser.SHARE_SYMBOL:
            case MySQLParser.SLOW_SYMBOL:
            case MySQLParser.SNAPSHOT_SYMBOL:
            case MySQLParser.SOUNDS_SYMBOL:
            case MySQLParser.SOURCE_SYMBOL:
            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
            case MySQLParser.SQL_NO_CACHE_SYMBOL:
            case MySQLParser.SQL_THREAD_SYMBOL:
            case MySQLParser.STACKED_SYMBOL:
            case MySQLParser.STARTS_SYMBOL:
            case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
            case MySQLParser.STATS_PERSISTENT_SYMBOL:
            case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
            case MySQLParser.STATUS_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
            case MySQLParser.STRING_SYMBOL:
            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
            case MySQLParser.SUBDATE_SYMBOL:
            case MySQLParser.SUBJECT_SYMBOL:
            case MySQLParser.SUBPARTITION_SYMBOL:
            case MySQLParser.SUBPARTITIONS_SYMBOL:
            case MySQLParser.SUSPEND_SYMBOL:
            case MySQLParser.SWAPS_SYMBOL:
            case MySQLParser.SWITCHES_SYMBOL:
            case MySQLParser.TABLE_NAME_SYMBOL:
            case MySQLParser.TABLES_SYMBOL:
            case MySQLParser.TABLE_CHECKSUM_SYMBOL:
            case MySQLParser.TABLESPACE_SYMBOL:
            case MySQLParser.TEMPORARY_SYMBOL:
            case MySQLParser.TEMPTABLE_SYMBOL:
            case MySQLParser.TEXT_SYMBOL:
            case MySQLParser.THAN_SYMBOL:
            case MySQLParser.TRANSACTION_SYMBOL:
            case MySQLParser.TRIGGERS_SYMBOL:
            case MySQLParser.TIMESTAMP_SYMBOL:
            case MySQLParser.TIMESTAMP_ADD_SYMBOL:
            case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
            case MySQLParser.TIME_SYMBOL:
            case MySQLParser.TYPES_SYMBOL:
            case MySQLParser.TYPE_SYMBOL:
            case MySQLParser.UNCOMMITTED_SYMBOL:
            case MySQLParser.UNDEFINED_SYMBOL:
            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.UNDOFILE_SYMBOL:
            case MySQLParser.UNKNOWN_SYMBOL:
            case MySQLParser.UNTIL_SYMBOL:
            case MySQLParser.USER_RESOURCES_SYMBOL:
            case MySQLParser.USER_SYMBOL:
            case MySQLParser.USE_FRM_SYMBOL:
            case MySQLParser.VARIABLES_SYMBOL:
            case MySQLParser.VIEW_SYMBOL:
            case MySQLParser.VALUE_SYMBOL:
            case MySQLParser.WARNINGS_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
            case MySQLParser.WEEK_SYMBOL:
            case MySQLParser.WORK_SYMBOL:
            case MySQLParser.WEIGHT_STRING_SYMBOL:
            case MySQLParser.X509_SYMBOL:
            case MySQLParser.XID_SYMBOL:
            case MySQLParser.XML_SYMBOL:
            case MySQLParser.YEAR_SYMBOL:
            case MySQLParser.EXCHANGE_SYMBOL:
            case MySQLParser.EXPIRE_SYMBOL:
            case MySQLParser.ONLY_SYMBOL:
            case MySQLParser.VALIDATION_SYMBOL:
            case MySQLParser.WITHOUT_SYMBOL:
            case MySQLParser.ROLE_SYMBOL:
            case MySQLParser.ADMIN_SYMBOL:
            case MySQLParser.INVISIBLE_SYMBOL:
            case MySQLParser.VISIBLE_SYMBOL:
            case MySQLParser.COMPONENT_SYMBOL:
            case MySQLParser.SKIP_SYMBOL:
            case MySQLParser.LOCKED_SYMBOL:
            case MySQLParser.NOWAIT_SYMBOL:
            case MySQLParser.HISTOGRAM_SYMBOL:
            case MySQLParser.BUCKETS_SYMBOL:
            case MySQLParser.EXCLUDE_SYMBOL:
            case MySQLParser.FOLLOWING_SYMBOL:
            case MySQLParser.NULLS_SYMBOL:
            case MySQLParser.OTHERS_SYMBOL:
            case MySQLParser.PRECEDING_SYMBOL:
            case MySQLParser.RESPECT_SYMBOL:
            case MySQLParser.TIES_SYMBOL:
            case MySQLParser.UNBOUNDED_SYMBOL:
            case MySQLParser.NESTED_SYMBOL:
            case MySQLParser.ORDINALITY_SYMBOL:
            case MySQLParser.PATH_SYMBOL:
            case MySQLParser.HISTORY_SYMBOL:
            case MySQLParser.REUSE_SYMBOL:
            case MySQLParser.SRID_SYMBOL:
            case MySQLParser.THREAD_PRIORITY_SYMBOL:
            case MySQLParser.VCPU_SYMBOL:
            case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
            case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
            case MySQLParser.DEFINITION_SYMBOL:
            case MySQLParser.DESCRIPTION_SYMBOL:
            case MySQLParser.ORGANIZATION_SYMBOL:
            case MySQLParser.REFERENCE_SYMBOL:
            case MySQLParser.OPTIONAL_SYMBOL:
            case MySQLParser.SECONDARY_SYMBOL:
            case MySQLParser.SECONDARY_ENGINE_SYMBOL:
            case MySQLParser.SECONDARY_LOAD_SYMBOL:
            case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
            case MySQLParser.ACTIVE_SYMBOL:
            case MySQLParser.INACTIVE_SYMBOL:
            case MySQLParser.RETAIN_SYMBOL:
            case MySQLParser.OLD_SYMBOL:
            case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
            case MySQLParser.ENFORCED_SYMBOL:
            case MySQLParser.OJ_SYMBOL:
            case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
            case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
            case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
            case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                this.state = 8282;
                this.identifierKeywordsUnambiguous();
                break;
            case MySQLParser.EXECUTE_SYMBOL:
            case MySQLParser.SHUTDOWN_SYMBOL:
            case MySQLParser.RESTART_SYMBOL:
                this.state = 8283;
                this.identifierKeywordsAmbiguous1RolesAndLabels();
                break;
            case MySQLParser.ASCII_SYMBOL:
            case MySQLParser.BEGIN_SYMBOL:
            case MySQLParser.BYTE_SYMBOL:
            case MySQLParser.CACHE_SYMBOL:
            case MySQLParser.CHARSET_SYMBOL:
            case MySQLParser.CHECKSUM_SYMBOL:
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.COMMIT_SYMBOL:
            case MySQLParser.CONTAINS_SYMBOL:
            case MySQLParser.DEALLOCATE_SYMBOL:
            case MySQLParser.DO_SYMBOL:
            case MySQLParser.END_SYMBOL:
            case MySQLParser.FLUSH_SYMBOL:
            case MySQLParser.FOLLOWS_SYMBOL:
            case MySQLParser.HANDLER_SYMBOL:
            case MySQLParser.HELP_SYMBOL:
            case MySQLParser.INSTALL_SYMBOL:
            case MySQLParser.LANGUAGE_SYMBOL:
            case MySQLParser.NO_SYMBOL:
            case MySQLParser.PRECEDES_SYMBOL:
            case MySQLParser.PREPARE_SYMBOL:
            case MySQLParser.REPAIR_SYMBOL:
            case MySQLParser.RESET_SYMBOL:
            case MySQLParser.ROLLBACK_SYMBOL:
            case MySQLParser.SAVEPOINT_SYMBOL:
            case MySQLParser.SIGNED_SYMBOL:
            case MySQLParser.SLAVE_SYMBOL:
            case MySQLParser.START_SYMBOL:
            case MySQLParser.STOP_SYMBOL:
            case MySQLParser.TRUNCATE_SYMBOL:
            case MySQLParser.UNICODE_SYMBOL:
            case MySQLParser.UNINSTALL_SYMBOL:
            case MySQLParser.XA_SYMBOL:
            case MySQLParser.IMPORT_SYMBOL:
            case MySQLParser.CLONE_SYMBOL:
                this.state = 8284;
                this.identifierKeywordsAmbiguous2Labels();
                break;
            case MySQLParser.EVENT_SYMBOL:
            case MySQLParser.FILE_SYMBOL:
            case MySQLParser.NONE_SYMBOL:
            case MySQLParser.PROCESS_SYMBOL:
            case MySQLParser.PROXY_SYMBOL:
            case MySQLParser.RELOAD_SYMBOL:
            case MySQLParser.REPLICATION_SYMBOL:
            case MySQLParser.SUPER_SYMBOL:
            case MySQLParser.RESOURCE_SYMBOL:
                this.state = 8285;
                this.identifierKeywordsAmbiguous3Roles();
                break;
            case MySQLParser.GLOBAL_SYMBOL:
            case MySQLParser.LOCAL_SYMBOL:
            case MySQLParser.SESSION_SYMBOL:
            case MySQLParser.PERSIST_SYMBOL:
            case MySQLParser.PERSIST_ONLY_SYMBOL:
                this.state = 8286;
                this.identifierKeywordsAmbiguous4SystemVariables();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierKeywordsAmbiguous1RolesAndLabelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    return this;
}

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.constructor = IdentifierKeywordsAmbiguous1RolesAndLabelsContext;

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.EXECUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.RESTART_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.SHUTDOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
	}
};

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
	}
};

IdentifierKeywordsAmbiguous1RolesAndLabelsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext = IdentifierKeywordsAmbiguous1RolesAndLabelsContext;

MySQLParser.prototype.identifierKeywordsAmbiguous1RolesAndLabels = function() {

    var localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1190, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8291;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.EXECUTE_SYMBOL || _la===MySQLParser.SHUTDOWN_SYMBOL || _la===MySQLParser.RESTART_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierKeywordsAmbiguous2LabelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
    return this;
}

IdentifierKeywordsAmbiguous2LabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierKeywordsAmbiguous2LabelsContext.prototype.constructor = IdentifierKeywordsAmbiguous2LabelsContext;

IdentifierKeywordsAmbiguous2LabelsContext.prototype.ASCII_SYMBOL = function() {
    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.BEGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.BYTE_SYMBOL = function() {
    return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.CHARSET_SYMBOL = function() {
    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.CLONE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.COMMIT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.CONTAINS_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.DEALLOCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.DO_SYMBOL = function() {
    return this.getToken(MySQLParser.DO_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.FLUSH_SYMBOL = function() {
    return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.FOLLOWS_SYMBOL = function() {
    return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.HANDLER_SYMBOL = function() {
    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.HELP_SYMBOL = function() {
    return this.getToken(MySQLParser.HELP_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.IMPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.INSTALL_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.LANGUAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.PRECEDES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.PREPARE_SYMBOL = function() {
    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.REPAIR_SYMBOL = function() {
    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.RESET_SYMBOL = function() {
    return this.getToken(MySQLParser.RESET_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.ROLLBACK_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.SAVEPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.SIGNED_SYMBOL = function() {
    return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.START_SYMBOL = function() {
    return this.getToken(MySQLParser.START_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.STOP_SYMBOL = function() {
    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.TRUNCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.UNICODE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.UNINSTALL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.XA_SYMBOL = function() {
    return this.getToken(MySQLParser.XA_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierKeywordsAmbiguous2Labels(this);
	}
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierKeywordsAmbiguous2Labels(this);
	}
};

IdentifierKeywordsAmbiguous2LabelsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierKeywordsAmbiguous2Labels(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext = IdentifierKeywordsAmbiguous2LabelsContext;

MySQLParser.prototype.identifierKeywordsAmbiguous2Labels = function() {

    var localctx = new IdentifierKeywordsAmbiguous2LabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1192, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8293;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.ASCII_SYMBOL) | (1 << MySQLParser.BEGIN_SYMBOL) | (1 << MySQLParser.BYTE_SYMBOL) | (1 << MySQLParser.CACHE_SYMBOL) | (1 << MySQLParser.CHARSET_SYMBOL) | (1 << MySQLParser.CHECKSUM_SYMBOL) | (1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.COMMIT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.DEALLOCATE_SYMBOL) | (1 << MySQLParser.DO_SYMBOL) | (1 << MySQLParser.END_SYMBOL) | (1 << MySQLParser.FLUSH_SYMBOL) | (1 << MySQLParser.FOLLOWS_SYMBOL) | (1 << MySQLParser.HANDLER_SYMBOL) | (1 << MySQLParser.HELP_SYMBOL) | (1 << MySQLParser.INSTALL_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (MySQLParser.PRECEDES_SYMBOL - 34)) | (1 << (MySQLParser.PREPARE_SYMBOL - 34)) | (1 << (MySQLParser.REPAIR_SYMBOL - 34)) | (1 << (MySQLParser.RESET_SYMBOL - 34)) | (1 << (MySQLParser.ROLLBACK_SYMBOL - 34)) | (1 << (MySQLParser.SAVEPOINT_SYMBOL - 34)) | (1 << (MySQLParser.SIGNED_SYMBOL - 34)) | (1 << (MySQLParser.SLAVE_SYMBOL - 34)) | (1 << (MySQLParser.START_SYMBOL - 34)) | (1 << (MySQLParser.STOP_SYMBOL - 34)) | (1 << (MySQLParser.TRUNCATE_SYMBOL - 34)) | (1 << (MySQLParser.UNICODE_SYMBOL - 34)) | (1 << (MySQLParser.UNINSTALL_SYMBOL - 34)) | (1 << (MySQLParser.XA_SYMBOL - 34)))) !== 0) || _la===MySQLParser.IMPORT_SYMBOL || _la===MySQLParser.CLONE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_labelKeyword;
    return this;
}

LabelKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelKeywordContext.prototype.constructor = LabelKeywordContext;

LabelKeywordContext.prototype.roleOrLabelKeyword = function() {
    return this.getTypedRuleContext(RoleOrLabelKeywordContext,0);
};

LabelKeywordContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

LabelKeywordContext.prototype.FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.FILE_SYMBOL, 0);
};

LabelKeywordContext.prototype.NONE_SYMBOL = function() {
    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
};

LabelKeywordContext.prototype.PROCESS_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
};

LabelKeywordContext.prototype.PROXY_SYMBOL = function() {
    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
};

LabelKeywordContext.prototype.RELOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
};

LabelKeywordContext.prototype.REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
};

LabelKeywordContext.prototype.RESOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
};

LabelKeywordContext.prototype.SUPER_SYMBOL = function() {
    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
};

LabelKeywordContext.prototype.identifierKeywordsUnambiguous = function() {
    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
};

LabelKeywordContext.prototype.identifierKeywordsAmbiguous3Roles = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
};

LabelKeywordContext.prototype.identifierKeywordsAmbiguous4SystemVariables = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
};

LabelKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLabelKeyword(this);
	}
};

LabelKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLabelKeyword(this);
	}
};

LabelKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLabelKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LabelKeywordContext = LabelKeywordContext;

MySQLParser.prototype.labelKeyword = function() {

    var localctx = new LabelKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1194, MySQLParser.RULE_labelKeyword);
    try {
        this.state = 8313;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8295;
            if (!( serverVersion < 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
            }
            this.state = 8306;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1111,this._ctx);
            switch(la_) {
            case 1:
                this.state = 8296;
                this.roleOrLabelKeyword();
                break;

            case 2:
                this.state = 8297;
                this.match(MySQLParser.EVENT_SYMBOL);
                break;

            case 3:
                this.state = 8298;
                this.match(MySQLParser.FILE_SYMBOL);
                break;

            case 4:
                this.state = 8299;
                this.match(MySQLParser.NONE_SYMBOL);
                break;

            case 5:
                this.state = 8300;
                this.match(MySQLParser.PROCESS_SYMBOL);
                break;

            case 6:
                this.state = 8301;
                this.match(MySQLParser.PROXY_SYMBOL);
                break;

            case 7:
                this.state = 8302;
                this.match(MySQLParser.RELOAD_SYMBOL);
                break;

            case 8:
                this.state = 8303;
                this.match(MySQLParser.REPLICATION_SYMBOL);
                break;

            case 9:
                this.state = 8304;
                this.match(MySQLParser.RESOURCE_SYMBOL);
                break;

            case 10:
                this.state = 8305;
                this.match(MySQLParser.SUPER_SYMBOL);
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8311;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.ACCOUNT_SYMBOL:
            case MySQLParser.ALWAYS_SYMBOL:
            case MySQLParser.BACKUP_SYMBOL:
            case MySQLParser.CLOSE_SYMBOL:
            case MySQLParser.FORMAT_SYMBOL:
            case MySQLParser.GROUP_REPLICATION_SYMBOL:
            case MySQLParser.HOST_SYMBOL:
            case MySQLParser.OPEN_SYMBOL:
            case MySQLParser.OPTIONS_SYMBOL:
            case MySQLParser.OWNER_SYMBOL:
            case MySQLParser.PARSER_SYMBOL:
            case MySQLParser.PORT_SYMBOL:
            case MySQLParser.REMOVE_SYMBOL:
            case MySQLParser.RESTORE_SYMBOL:
            case MySQLParser.SECURITY_SYMBOL:
            case MySQLParser.SERVER_SYMBOL:
            case MySQLParser.SOCKET_SYMBOL:
            case MySQLParser.SONAME_SYMBOL:
            case MySQLParser.UPGRADE_SYMBOL:
            case MySQLParser.WRAPPER_SYMBOL:
            case MySQLParser.ACTION_SYMBOL:
            case MySQLParser.ADDDATE_SYMBOL:
            case MySQLParser.AFTER_SYMBOL:
            case MySQLParser.AGAINST_SYMBOL:
            case MySQLParser.AGGREGATE_SYMBOL:
            case MySQLParser.ALGORITHM_SYMBOL:
            case MySQLParser.ANY_SYMBOL:
            case MySQLParser.AT_SYMBOL:
            case MySQLParser.AUTO_INCREMENT_SYMBOL:
            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
            case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
            case MySQLParser.AVG_SYMBOL:
            case MySQLParser.BINLOG_SYMBOL:
            case MySQLParser.BIT_SYMBOL:
            case MySQLParser.BLOCK_SYMBOL:
            case MySQLParser.BOOL_SYMBOL:
            case MySQLParser.BOOLEAN_SYMBOL:
            case MySQLParser.BTREE_SYMBOL:
            case MySQLParser.CASCADED_SYMBOL:
            case MySQLParser.CATALOG_NAME_SYMBOL:
            case MySQLParser.CHAIN_SYMBOL:
            case MySQLParser.CHANGED_SYMBOL:
            case MySQLParser.CHANNEL_SYMBOL:
            case MySQLParser.CIPHER_SYMBOL:
            case MySQLParser.CLIENT_SYMBOL:
            case MySQLParser.CLASS_ORIGIN_SYMBOL:
            case MySQLParser.COALESCE_SYMBOL:
            case MySQLParser.CODE_SYMBOL:
            case MySQLParser.COLLATION_SYMBOL:
            case MySQLParser.COLUMN_NAME_SYMBOL:
            case MySQLParser.COLUMN_FORMAT_SYMBOL:
            case MySQLParser.COLUMNS_SYMBOL:
            case MySQLParser.COMMITTED_SYMBOL:
            case MySQLParser.COMPACT_SYMBOL:
            case MySQLParser.COMPLETION_SYMBOL:
            case MySQLParser.COMPRESSED_SYMBOL:
            case MySQLParser.COMPRESSION_SYMBOL:
            case MySQLParser.ENCRYPTION_SYMBOL:
            case MySQLParser.CONCURRENT_SYMBOL:
            case MySQLParser.CONNECTION_SYMBOL:
            case MySQLParser.CONSISTENT_SYMBOL:
            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
            case MySQLParser.CONTEXT_SYMBOL:
            case MySQLParser.CPU_SYMBOL:
            case MySQLParser.CURRENT_SYMBOL:
            case MySQLParser.CURSOR_NAME_SYMBOL:
            case MySQLParser.DATA_SYMBOL:
            case MySQLParser.DATAFILE_SYMBOL:
            case MySQLParser.DATETIME_SYMBOL:
            case MySQLParser.DATE_SYMBOL:
            case MySQLParser.DAY_SYMBOL:
            case MySQLParser.DEFAULT_AUTH_SYMBOL:
            case MySQLParser.DEFINER_SYMBOL:
            case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
            case MySQLParser.DIAGNOSTICS_SYMBOL:
            case MySQLParser.DIRECTORY_SYMBOL:
            case MySQLParser.DISABLE_SYMBOL:
            case MySQLParser.DISCARD_SYMBOL:
            case MySQLParser.DISK_SYMBOL:
            case MySQLParser.DUMPFILE_SYMBOL:
            case MySQLParser.DUPLICATE_SYMBOL:
            case MySQLParser.DYNAMIC_SYMBOL:
            case MySQLParser.ENDS_SYMBOL:
            case MySQLParser.ENUM_SYMBOL:
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.ENGINES_SYMBOL:
            case MySQLParser.ERROR_SYMBOL:
            case MySQLParser.ERRORS_SYMBOL:
            case MySQLParser.ESCAPE_SYMBOL:
            case MySQLParser.EVENTS_SYMBOL:
            case MySQLParser.EVERY_SYMBOL:
            case MySQLParser.EXPANSION_SYMBOL:
            case MySQLParser.EXPORT_SYMBOL:
            case MySQLParser.EXTENDED_SYMBOL:
            case MySQLParser.EXTENT_SIZE_SYMBOL:
            case MySQLParser.FAULTS_SYMBOL:
            case MySQLParser.FAST_SYMBOL:
            case MySQLParser.FOUND_SYMBOL:
            case MySQLParser.ENABLE_SYMBOL:
            case MySQLParser.FULL_SYMBOL:
            case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
            case MySQLParser.FILTER_SYMBOL:
            case MySQLParser.FIRST_SYMBOL:
            case MySQLParser.FIXED_SYMBOL:
            case MySQLParser.GENERAL_SYMBOL:
            case MySQLParser.GEOMETRY_SYMBOL:
            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
            case MySQLParser.GET_FORMAT_SYMBOL:
            case MySQLParser.GRANTS_SYMBOL:
            case MySQLParser.HASH_SYMBOL:
            case MySQLParser.HOSTS_SYMBOL:
            case MySQLParser.HOUR_SYMBOL:
            case MySQLParser.IDENTIFIED_SYMBOL:
            case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
            case MySQLParser.INVOKER_SYMBOL:
            case MySQLParser.INDEXES_SYMBOL:
            case MySQLParser.INITIAL_SIZE_SYMBOL:
            case MySQLParser.INSTANCE_SYMBOL:
            case MySQLParser.IO_SYMBOL:
            case MySQLParser.IPC_SYMBOL:
            case MySQLParser.ISOLATION_SYMBOL:
            case MySQLParser.ISSUER_SYMBOL:
            case MySQLParser.INSERT_METHOD_SYMBOL:
            case MySQLParser.JSON_SYMBOL:
            case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
            case MySQLParser.LAST_SYMBOL:
            case MySQLParser.LEAVES_SYMBOL:
            case MySQLParser.LESS_SYMBOL:
            case MySQLParser.LEVEL_SYMBOL:
            case MySQLParser.LINESTRING_SYMBOL:
            case MySQLParser.LIST_SYMBOL:
            case MySQLParser.LOCKS_SYMBOL:
            case MySQLParser.LOGFILE_SYMBOL:
            case MySQLParser.LOGS_SYMBOL:
            case MySQLParser.MAX_ROWS_SYMBOL:
            case MySQLParser.MASTER_SYMBOL:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
            case MySQLParser.MASTER_HOST_SYMBOL:
            case MySQLParser.MASTER_PORT_SYMBOL:
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.MASTER_USER_SYMBOL:
            case MySQLParser.MASTER_PASSWORD_SYMBOL:
            case MySQLParser.MASTER_SERVER_ID_SYMBOL:
            case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
            case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
            case MySQLParser.MASTER_DELAY_SYMBOL:
            case MySQLParser.MASTER_SSL_SYMBOL:
            case MySQLParser.MASTER_SSL_CA_SYMBOL:
            case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
            case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
            case MySQLParser.MASTER_SSL_CERT_SYMBOL:
            case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
            case MySQLParser.MASTER_SSL_CRL_SYMBOL:
            case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
            case MySQLParser.MASTER_SSL_KEY_SYMBOL:
            case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_SIZE_SYMBOL:
            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
            case MySQLParser.MEDIUM_SYMBOL:
            case MySQLParser.MEMORY_SYMBOL:
            case MySQLParser.MERGE_SYMBOL:
            case MySQLParser.MESSAGE_TEXT_SYMBOL:
            case MySQLParser.MICROSECOND_SYMBOL:
            case MySQLParser.MIGRATE_SYMBOL:
            case MySQLParser.MINUTE_SYMBOL:
            case MySQLParser.MIN_ROWS_SYMBOL:
            case MySQLParser.MODIFY_SYMBOL:
            case MySQLParser.MODE_SYMBOL:
            case MySQLParser.MONTH_SYMBOL:
            case MySQLParser.MULTILINESTRING_SYMBOL:
            case MySQLParser.MULTIPOINT_SYMBOL:
            case MySQLParser.MULTIPOLYGON_SYMBOL:
            case MySQLParser.MUTEX_SYMBOL:
            case MySQLParser.MYSQL_ERRNO_SYMBOL:
            case MySQLParser.NAME_SYMBOL:
            case MySQLParser.NAMES_SYMBOL:
            case MySQLParser.NATIONAL_SYMBOL:
            case MySQLParser.NCHAR_SYMBOL:
            case MySQLParser.NDBCLUSTER_SYMBOL:
            case MySQLParser.NEVER_SYMBOL:
            case MySQLParser.NEXT_SYMBOL:
            case MySQLParser.NEW_SYMBOL:
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.NODEGROUP_SYMBOL:
            case MySQLParser.NUMBER_SYMBOL:
            case MySQLParser.NVARCHAR_SYMBOL:
            case MySQLParser.OFFSET_SYMBOL:
            case MySQLParser.ONE_SYMBOL:
            case MySQLParser.PACK_KEYS_SYMBOL:
            case MySQLParser.PAGE_SYMBOL:
            case MySQLParser.PARTIAL_SYMBOL:
            case MySQLParser.PARTITIONING_SYMBOL:
            case MySQLParser.PARTITIONS_SYMBOL:
            case MySQLParser.PASSWORD_SYMBOL:
            case MySQLParser.PHASE_SYMBOL:
            case MySQLParser.PLUGIN_DIR_SYMBOL:
            case MySQLParser.PLUGIN_SYMBOL:
            case MySQLParser.PLUGINS_SYMBOL:
            case MySQLParser.POINT_SYMBOL:
            case MySQLParser.POLYGON_SYMBOL:
            case MySQLParser.PRESERVE_SYMBOL:
            case MySQLParser.PREV_SYMBOL:
            case MySQLParser.PRIVILEGES_SYMBOL:
            case MySQLParser.PROCESSLIST_SYMBOL:
            case MySQLParser.PROFILE_SYMBOL:
            case MySQLParser.PROFILES_SYMBOL:
            case MySQLParser.QUARTER_SYMBOL:
            case MySQLParser.QUERY_SYMBOL:
            case MySQLParser.QUICK_SYMBOL:
            case MySQLParser.READ_ONLY_SYMBOL:
            case MySQLParser.REBUILD_SYMBOL:
            case MySQLParser.RECOVER_SYMBOL:
            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.REDUNDANT_SYMBOL:
            case MySQLParser.RELAY_SYMBOL:
            case MySQLParser.RELAYLOG_SYMBOL:
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
            case MySQLParser.RELAY_THREAD_SYMBOL:
            case MySQLParser.REORGANIZE_SYMBOL:
            case MySQLParser.REPEATABLE_SYMBOL:
            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
            case MySQLParser.RESUME_SYMBOL:
            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
            case MySQLParser.RETURNS_SYMBOL:
            case MySQLParser.REVERSE_SYMBOL:
            case MySQLParser.ROLLUP_SYMBOL:
            case MySQLParser.ROTATE_SYMBOL:
            case MySQLParser.ROUTINE_SYMBOL:
            case MySQLParser.ROW_COUNT_SYMBOL:
            case MySQLParser.ROW_FORMAT_SYMBOL:
            case MySQLParser.RTREE_SYMBOL:
            case MySQLParser.SCHEDULE_SYMBOL:
            case MySQLParser.SCHEMA_NAME_SYMBOL:
            case MySQLParser.SECOND_SYMBOL:
            case MySQLParser.SERIAL_SYMBOL:
            case MySQLParser.SERIALIZABLE_SYMBOL:
            case MySQLParser.SIMPLE_SYMBOL:
            case MySQLParser.SHARE_SYMBOL:
            case MySQLParser.SLOW_SYMBOL:
            case MySQLParser.SNAPSHOT_SYMBOL:
            case MySQLParser.SOUNDS_SYMBOL:
            case MySQLParser.SOURCE_SYMBOL:
            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
            case MySQLParser.SQL_NO_CACHE_SYMBOL:
            case MySQLParser.SQL_THREAD_SYMBOL:
            case MySQLParser.STACKED_SYMBOL:
            case MySQLParser.STARTS_SYMBOL:
            case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
            case MySQLParser.STATS_PERSISTENT_SYMBOL:
            case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
            case MySQLParser.STATUS_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
            case MySQLParser.STRING_SYMBOL:
            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
            case MySQLParser.SUBDATE_SYMBOL:
            case MySQLParser.SUBJECT_SYMBOL:
            case MySQLParser.SUBPARTITION_SYMBOL:
            case MySQLParser.SUBPARTITIONS_SYMBOL:
            case MySQLParser.SUSPEND_SYMBOL:
            case MySQLParser.SWAPS_SYMBOL:
            case MySQLParser.SWITCHES_SYMBOL:
            case MySQLParser.TABLE_NAME_SYMBOL:
            case MySQLParser.TABLES_SYMBOL:
            case MySQLParser.TABLE_CHECKSUM_SYMBOL:
            case MySQLParser.TABLESPACE_SYMBOL:
            case MySQLParser.TEMPORARY_SYMBOL:
            case MySQLParser.TEMPTABLE_SYMBOL:
            case MySQLParser.TEXT_SYMBOL:
            case MySQLParser.THAN_SYMBOL:
            case MySQLParser.TRANSACTION_SYMBOL:
            case MySQLParser.TRIGGERS_SYMBOL:
            case MySQLParser.TIMESTAMP_SYMBOL:
            case MySQLParser.TIMESTAMP_ADD_SYMBOL:
            case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
            case MySQLParser.TIME_SYMBOL:
            case MySQLParser.TYPES_SYMBOL:
            case MySQLParser.TYPE_SYMBOL:
            case MySQLParser.UNCOMMITTED_SYMBOL:
            case MySQLParser.UNDEFINED_SYMBOL:
            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.UNDOFILE_SYMBOL:
            case MySQLParser.UNKNOWN_SYMBOL:
            case MySQLParser.UNTIL_SYMBOL:
            case MySQLParser.USER_RESOURCES_SYMBOL:
            case MySQLParser.USER_SYMBOL:
            case MySQLParser.USE_FRM_SYMBOL:
            case MySQLParser.VARIABLES_SYMBOL:
            case MySQLParser.VIEW_SYMBOL:
            case MySQLParser.VALUE_SYMBOL:
            case MySQLParser.WARNINGS_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
            case MySQLParser.WEEK_SYMBOL:
            case MySQLParser.WORK_SYMBOL:
            case MySQLParser.WEIGHT_STRING_SYMBOL:
            case MySQLParser.X509_SYMBOL:
            case MySQLParser.XID_SYMBOL:
            case MySQLParser.XML_SYMBOL:
            case MySQLParser.YEAR_SYMBOL:
            case MySQLParser.EXCHANGE_SYMBOL:
            case MySQLParser.EXPIRE_SYMBOL:
            case MySQLParser.ONLY_SYMBOL:
            case MySQLParser.VALIDATION_SYMBOL:
            case MySQLParser.WITHOUT_SYMBOL:
            case MySQLParser.ROLE_SYMBOL:
            case MySQLParser.ADMIN_SYMBOL:
            case MySQLParser.INVISIBLE_SYMBOL:
            case MySQLParser.VISIBLE_SYMBOL:
            case MySQLParser.COMPONENT_SYMBOL:
            case MySQLParser.SKIP_SYMBOL:
            case MySQLParser.LOCKED_SYMBOL:
            case MySQLParser.NOWAIT_SYMBOL:
            case MySQLParser.HISTOGRAM_SYMBOL:
            case MySQLParser.BUCKETS_SYMBOL:
            case MySQLParser.EXCLUDE_SYMBOL:
            case MySQLParser.FOLLOWING_SYMBOL:
            case MySQLParser.NULLS_SYMBOL:
            case MySQLParser.OTHERS_SYMBOL:
            case MySQLParser.PRECEDING_SYMBOL:
            case MySQLParser.RESPECT_SYMBOL:
            case MySQLParser.TIES_SYMBOL:
            case MySQLParser.UNBOUNDED_SYMBOL:
            case MySQLParser.NESTED_SYMBOL:
            case MySQLParser.ORDINALITY_SYMBOL:
            case MySQLParser.PATH_SYMBOL:
            case MySQLParser.HISTORY_SYMBOL:
            case MySQLParser.REUSE_SYMBOL:
            case MySQLParser.SRID_SYMBOL:
            case MySQLParser.THREAD_PRIORITY_SYMBOL:
            case MySQLParser.VCPU_SYMBOL:
            case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
            case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
            case MySQLParser.DEFINITION_SYMBOL:
            case MySQLParser.DESCRIPTION_SYMBOL:
            case MySQLParser.ORGANIZATION_SYMBOL:
            case MySQLParser.REFERENCE_SYMBOL:
            case MySQLParser.OPTIONAL_SYMBOL:
            case MySQLParser.SECONDARY_SYMBOL:
            case MySQLParser.SECONDARY_ENGINE_SYMBOL:
            case MySQLParser.SECONDARY_LOAD_SYMBOL:
            case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
            case MySQLParser.ACTIVE_SYMBOL:
            case MySQLParser.INACTIVE_SYMBOL:
            case MySQLParser.RETAIN_SYMBOL:
            case MySQLParser.OLD_SYMBOL:
            case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
            case MySQLParser.ENFORCED_SYMBOL:
            case MySQLParser.OJ_SYMBOL:
            case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
            case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
            case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
            case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                this.state = 8308;
                this.identifierKeywordsUnambiguous();
                break;
            case MySQLParser.EVENT_SYMBOL:
            case MySQLParser.FILE_SYMBOL:
            case MySQLParser.NONE_SYMBOL:
            case MySQLParser.PROCESS_SYMBOL:
            case MySQLParser.PROXY_SYMBOL:
            case MySQLParser.RELOAD_SYMBOL:
            case MySQLParser.REPLICATION_SYMBOL:
            case MySQLParser.SUPER_SYMBOL:
            case MySQLParser.RESOURCE_SYMBOL:
                this.state = 8309;
                this.identifierKeywordsAmbiguous3Roles();
                break;
            case MySQLParser.GLOBAL_SYMBOL:
            case MySQLParser.LOCAL_SYMBOL:
            case MySQLParser.SESSION_SYMBOL:
            case MySQLParser.PERSIST_SYMBOL:
            case MySQLParser.PERSIST_ONLY_SYMBOL:
                this.state = 8310;
                this.identifierKeywordsAmbiguous4SystemVariables();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierKeywordsAmbiguous3RolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
    return this;
}

IdentifierKeywordsAmbiguous3RolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierKeywordsAmbiguous3RolesContext.prototype.constructor = IdentifierKeywordsAmbiguous3RolesContext;

IdentifierKeywordsAmbiguous3RolesContext.prototype.EVENT_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.FILE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.NONE_SYMBOL = function() {
    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.PROCESS_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.PROXY_SYMBOL = function() {
    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.RELOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.RESOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.SUPER_SYMBOL = function() {
    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierKeywordsAmbiguous3Roles(this);
	}
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierKeywordsAmbiguous3Roles(this);
	}
};

IdentifierKeywordsAmbiguous3RolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierKeywordsAmbiguous3Roles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierKeywordsAmbiguous3RolesContext = IdentifierKeywordsAmbiguous3RolesContext;

MySQLParser.prototype.identifierKeywordsAmbiguous3Roles = function() {

    var localctx = new IdentifierKeywordsAmbiguous3RolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1196, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8315;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.EVENT_SYMBOL || _la===MySQLParser.FILE_SYMBOL || ((((_la - 239)) & ~0x1f) == 0 && ((1 << (_la - 239)) & ((1 << (MySQLParser.NONE_SYMBOL - 239)) | (1 << (MySQLParser.PROCESS_SYMBOL - 239)) | (1 << (MySQLParser.PROXY_SYMBOL - 239)))) !== 0) || _la===MySQLParser.RELOAD_SYMBOL || _la===MySQLParser.REPLICATION_SYMBOL || _la===MySQLParser.SUPER_SYMBOL || _la===MySQLParser.RESOURCE_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierKeywordsUnambiguousContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierKeywordsUnambiguous;
    return this;
}

IdentifierKeywordsUnambiguousContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierKeywordsUnambiguousContext.prototype.constructor = IdentifierKeywordsUnambiguousContext;

IdentifierKeywordsUnambiguousContext.prototype.ACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ACCOUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ACTIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ADDDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ADMIN_SYMBOL = function() {
    return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AFTER_SYMBOL = function() {
    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AGAINST_SYMBOL = function() {
    return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AGGREGATE_SYMBOL = function() {
    return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ALWAYS_SYMBOL = function() {
    return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ANY_SYMBOL = function() {
    return this.getToken(MySQLParser.ANY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AT_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AUTOEXTEND_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AUTO_INCREMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AVG_ROW_LENGTH_SYMBOL = function() {
    return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.AVG_SYMBOL = function() {
    return this.getToken(MySQLParser.AVG_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BACKUP_SYMBOL = function() {
    return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BINLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BIT_SYMBOL = function() {
    return this.getToken(MySQLParser.BIT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BLOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BOOLEAN_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BOOL_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BTREE_SYMBOL = function() {
    return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.BUCKETS_SYMBOL = function() {
    return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CASCADED_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CATALOG_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CHAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CHANGED_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CHANNEL_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CIPHER_SYMBOL = function() {
    return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CLASS_ORIGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CLIENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CLOSE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COALESCE_SYMBOL = function() {
    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CODE_SYMBOL = function() {
    return this.getToken(MySQLParser.CODE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COLLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COLUMNS_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COLUMN_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COLUMN_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COMMITTED_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COMPACT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COMPLETION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COMPONENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COMPRESSED_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.COMPRESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONCURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONNECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONSISTENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONSTRAINT_CATALOG_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONSTRAINT_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONSTRAINT_SCHEMA_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CONTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CPU_SYMBOL = function() {
    return this.getToken(MySQLParser.CPU_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.CURSOR_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DATAFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DATETIME_SYMBOL = function() {
    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DAY_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DEFAULT_AUTH_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DEFINER_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DEFINITION_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DELAY_KEY_WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DESCRIPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DIAGNOSTICS_SYMBOL = function() {
    return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DISABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DISCARD_SYMBOL = function() {
    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DISK_SYMBOL = function() {
    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DUMPFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DUPLICATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.DYNAMIC_SYMBOL = function() {
    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENCRYPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENDS_SYMBOL = function() {
    return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENFORCED_SYMBOL = function() {
    return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENGINES_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ENUM_SYMBOL = function() {
    return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ERRORS_SYMBOL = function() {
    return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ERROR_SYMBOL = function() {
    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ESCAPE_SYMBOL = function() {
    return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EVENTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EVERY_SYMBOL = function() {
    return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXCHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXCLUDE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXPANSION_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXPIRE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.EXTENT_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FAST_SYMBOL = function() {
    return this.getToken(MySQLParser.FAST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FAULTS_SYMBOL = function() {
    return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FILE_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FILTER_SYMBOL = function() {
    return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FIRST_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FIXED_SYMBOL = function() {
    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FOLLOWING_SYMBOL = function() {
    return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FOUND_SYMBOL = function() {
    return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.FULL_SYMBOL = function() {
    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GENERAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GEOMETRYCOLLECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GEOMETRY_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GET_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GET_MASTER_PUBLIC_KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GRANTS_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.GROUP_REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.HASH_SYMBOL = function() {
    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.HISTOGRAM_SYMBOL = function() {
    return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.HISTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.HOSTS_SYMBOL = function() {
    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.HOST_SYMBOL = function() {
    return this.getToken(MySQLParser.HOST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.IGNORE_SERVER_IDS_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INACTIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INDEXES_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INITIAL_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INSERT_METHOD_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INSTANCE_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INVISIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.INVOKER_SYMBOL = function() {
    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.IO_SYMBOL = function() {
    return this.getToken(MySQLParser.IO_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.IPC_SYMBOL = function() {
    return this.getToken(MySQLParser.IPC_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ISOLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ISSUER_SYMBOL = function() {
    return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.JSON_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.KEY_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LAST_SYMBOL = function() {
    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LEAVES_SYMBOL = function() {
    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LEVEL_SYMBOL = function() {
    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LIST_SYMBOL = function() {
    return this.getToken(MySQLParser.LIST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LOCKED_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LOCKS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LOGFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.LOGS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_AUTO_POSITION_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_COMPRESSION_ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_CONNECT_RETRY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_DELAY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_HEARTBEAT_PERIOD_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_HOST_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NETWORK_NAMESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_LOG_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_LOG_POS_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_PORT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_PUBLIC_KEY_PATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_RETRY_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SERVER_ID_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_CAPATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_CA_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_CERT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_CIPHER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_CRLPATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_CRL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SSL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_TLS_CIPHERSUITES_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_TLS_VERSION_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MAX_CONNECTIONS_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MAX_QUERIES_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MAX_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MAX_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MAX_UPDATES_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MAX_USER_CONNECTIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MEDIUM_SYMBOL = function() {
    return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MEMORY_SYMBOL = function() {
    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MERGE_SYMBOL = function() {
    return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MESSAGE_TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MIGRATE_SYMBOL = function() {
    return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MINUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MIN_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MODE_SYMBOL = function() {
    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MODIFY_SYMBOL = function() {
    return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MONTH_SYMBOL = function() {
    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MULTILINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MULTIPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MULTIPOLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MUTEX_SYMBOL = function() {
    return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.MYSQL_ERRNO_SYMBOL = function() {
    return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NAMES_SYMBOL = function() {
    return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NATIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NDBCLUSTER_SYMBOL = function() {
    return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NESTED_SYMBOL = function() {
    return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NEVER_SYMBOL = function() {
    return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NEW_SYMBOL = function() {
    return this.getToken(MySQLParser.NEW_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NODEGROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NOWAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NO_WAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NULLS_SYMBOL = function() {
    return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NUMBER_SYMBOL = function() {
    return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.NVARCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OFFSET_SYMBOL = function() {
    return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OJ_SYMBOL = function() {
    return this.getToken(MySQLParser.OJ_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OLD_SYMBOL = function() {
    return this.getToken(MySQLParser.OLD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ONE_SYMBOL = function() {
    return this.getToken(MySQLParser.ONE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OPEN_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OPTIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OPTIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ORDINALITY_SYMBOL = function() {
    return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ORGANIZATION_SYMBOL = function() {
    return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OTHERS_SYMBOL = function() {
    return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.OWNER_SYMBOL = function() {
    return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PACK_KEYS_SYMBOL = function() {
    return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PARSER_SYMBOL = function() {
    return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PARTIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PARTITIONING_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PATH_SYMBOL = function() {
    return this.getToken(MySQLParser.PATH_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PHASE_SYMBOL = function() {
    return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PLUGINS_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PLUGIN_DIR_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PLUGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.POINT_SYMBOL = function() {
    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.POLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PORT_SYMBOL = function() {
    return this.getToken(MySQLParser.PORT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PRECEDING_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PRESERVE_SYMBOL = function() {
    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PREV_SYMBOL = function() {
    return this.getToken(MySQLParser.PREV_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PRIVILEGES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PRIVILEGE_CHECKS_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PROCESSLIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PROFILES_SYMBOL = function() {
    return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.PROFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.QUARTER_SYMBOL = function() {
    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.QUICK_SYMBOL = function() {
    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.READ_ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REBUILD_SYMBOL = function() {
    return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RECOVER_SYMBOL = function() {
    return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REDO_BUFFER_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REDUNDANT_SYMBOL = function() {
    return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REFERENCE_SYMBOL = function() {
    return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RELAY_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RELAYLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RELAY_LOG_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RELAY_LOG_POS_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RELAY_THREAD_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REMOVE_SYMBOL = function() {
    return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REORGANIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPEATABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_DO_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_DO_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_IGNORE_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_IGNORE_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_REWRITE_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_WILD_DO_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.USER_RESOURCES_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RESPECT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RESTORE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RESUME_SYMBOL = function() {
    return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RETAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RETURNED_SQLSTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RETURNS_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REUSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.REVERSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ROLLUP_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ROTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ROUTINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ROW_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.ROW_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.RTREE_SYMBOL = function() {
    return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SCHEDULE_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SCHEMA_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SECONDARY_ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SECONDARY_LOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SECONDARY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SECONDARY_UNLOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SECURITY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SERIALIZABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SERIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SERVER_SYMBOL = function() {
    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SHARE_SYMBOL = function() {
    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SIMPLE_SYMBOL = function() {
    return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SKIP_SYMBOL = function() {
    return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SLOW_SYMBOL = function() {
    return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SNAPSHOT_SYMBOL = function() {
    return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SOCKET_SYMBOL = function() {
    return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SONAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SOUNDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SQL_AFTER_GTIDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SQL_AFTER_MTS_GAPS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SQL_BEFORE_GTIDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SQL_BUFFER_RESULT_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SQL_NO_CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SQL_THREAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SRID_SYMBOL = function() {
    return this.getToken(MySQLParser.SRID_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STACKED_SYMBOL = function() {
    return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STARTS_SYMBOL = function() {
    return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STATS_AUTO_RECALC_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STATS_PERSISTENT_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STATS_SAMPLE_PAGES_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STATUS_SYMBOL = function() {
    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.STRING_SYMBOL = function() {
    return this.getToken(MySQLParser.STRING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SUBCLASS_ORIGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SUBDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SUBJECT_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SUBPARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SUBPARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SUSPEND_SYMBOL = function() {
    return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SWAPS_SYMBOL = function() {
    return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.SWITCHES_SYMBOL = function() {
    return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TABLE_CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TABLE_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TEMPORARY_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TEMPTABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.THAN_SYMBOL = function() {
    return this.getToken(MySQLParser.THAN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.THREAD_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TIES_SYMBOL = function() {
    return this.getToken(MySQLParser.TIES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TIMESTAMP_ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TIMESTAMP_DIFF_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TRANSACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TRIGGERS_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TYPES_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.TYPE_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNBOUNDED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNCOMMITTED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNDEFINED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNDOFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNDO_BUFFER_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNKNOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UNTIL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.UPGRADE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.USE_FRM_SYMBOL = function() {
    return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.VALIDATION_SYMBOL = function() {
    return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.VARIABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.VCPU_SYMBOL = function() {
    return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.VISIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WARNINGS_SYMBOL = function() {
    return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WEEK_SYMBOL = function() {
    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WEIGHT_STRING_SYMBOL = function() {
    return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WITHOUT_SYMBOL = function() {
    return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WORK_SYMBOL = function() {
    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.WRAPPER_SYMBOL = function() {
    return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.X509_SYMBOL = function() {
    return this.getToken(MySQLParser.X509_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.XID_SYMBOL = function() {
    return this.getToken(MySQLParser.XID_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.XML_SYMBOL = function() {
    return this.getToken(MySQLParser.XML_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.YEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
};

IdentifierKeywordsUnambiguousContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierKeywordsUnambiguous(this);
	}
};

IdentifierKeywordsUnambiguousContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierKeywordsUnambiguous(this);
	}
};

IdentifierKeywordsUnambiguousContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierKeywordsUnambiguous(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierKeywordsUnambiguousContext = IdentifierKeywordsUnambiguousContext;

MySQLParser.prototype.identifierKeywordsUnambiguous = function() {

    var localctx = new IdentifierKeywordsUnambiguousContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1198, MySQLParser.RULE_identifierKeywordsUnambiguous);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8317;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.ACCOUNT_SYMBOL) | (1 << MySQLParser.ALWAYS_SYMBOL) | (1 << MySQLParser.BACKUP_SYMBOL) | (1 << MySQLParser.CLOSE_SYMBOL) | (1 << MySQLParser.FORMAT_SYMBOL) | (1 << MySQLParser.GROUP_REPLICATION_SYMBOL) | (1 << MySQLParser.HOST_SYMBOL) | (1 << MySQLParser.OPEN_SYMBOL) | (1 << MySQLParser.OPTIONS_SYMBOL) | (1 << MySQLParser.OWNER_SYMBOL) | (1 << MySQLParser.PARSER_SYMBOL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (MySQLParser.PORT_SYMBOL - 33)) | (1 << (MySQLParser.REMOVE_SYMBOL - 33)) | (1 << (MySQLParser.RESTORE_SYMBOL - 33)) | (1 << (MySQLParser.SECURITY_SYMBOL - 33)) | (1 << (MySQLParser.SERVER_SYMBOL - 33)) | (1 << (MySQLParser.SOCKET_SYMBOL - 33)) | (1 << (MySQLParser.SONAME_SYMBOL - 33)) | (1 << (MySQLParser.UPGRADE_SYMBOL - 33)) | (1 << (MySQLParser.WRAPPER_SYMBOL - 33)) | (1 << (MySQLParser.ACTION_SYMBOL - 33)) | (1 << (MySQLParser.ADDDATE_SYMBOL - 33)) | (1 << (MySQLParser.AFTER_SYMBOL - 33)) | (1 << (MySQLParser.AGAINST_SYMBOL - 33)) | (1 << (MySQLParser.AGGREGATE_SYMBOL - 33)) | (1 << (MySQLParser.ALGORITHM_SYMBOL - 33)) | (1 << (MySQLParser.ANY_SYMBOL - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MySQLParser.AT_SYMBOL - 65)) | (1 << (MySQLParser.AUTO_INCREMENT_SYMBOL - 65)) | (1 << (MySQLParser.AUTOEXTEND_SIZE_SYMBOL - 65)) | (1 << (MySQLParser.AVG_ROW_LENGTH_SYMBOL - 65)) | (1 << (MySQLParser.AVG_SYMBOL - 65)) | (1 << (MySQLParser.BINLOG_SYMBOL - 65)) | (1 << (MySQLParser.BIT_SYMBOL - 65)) | (1 << (MySQLParser.BLOCK_SYMBOL - 65)) | (1 << (MySQLParser.BOOL_SYMBOL - 65)) | (1 << (MySQLParser.BOOLEAN_SYMBOL - 65)) | (1 << (MySQLParser.BTREE_SYMBOL - 65)) | (1 << (MySQLParser.CASCADED_SYMBOL - 65)) | (1 << (MySQLParser.CATALOG_NAME_SYMBOL - 65)) | (1 << (MySQLParser.CHAIN_SYMBOL - 65)) | (1 << (MySQLParser.CHANGED_SYMBOL - 65)) | (1 << (MySQLParser.CHANNEL_SYMBOL - 65)) | (1 << (MySQLParser.CIPHER_SYMBOL - 65)) | (1 << (MySQLParser.CLIENT_SYMBOL - 65)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 65)) | (1 << (MySQLParser.COALESCE_SYMBOL - 65)) | (1 << (MySQLParser.CODE_SYMBOL - 65)) | (1 << (MySQLParser.COLLATION_SYMBOL - 65)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 65)) | (1 << (MySQLParser.COLUMN_FORMAT_SYMBOL - 65)) | (1 << (MySQLParser.COLUMNS_SYMBOL - 65)) | (1 << (MySQLParser.COMMITTED_SYMBOL - 65)) | (1 << (MySQLParser.COMPACT_SYMBOL - 65)) | (1 << (MySQLParser.COMPLETION_SYMBOL - 65)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 65)) | (1 << (MySQLParser.COMPRESSION_SYMBOL - 65)) | (1 << (MySQLParser.ENCRYPTION_SYMBOL - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (MySQLParser.CONCURRENT_SYMBOL - 97)) | (1 << (MySQLParser.CONNECTION_SYMBOL - 97)) | (1 << (MySQLParser.CONSISTENT_SYMBOL - 97)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 97)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 97)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 97)) | (1 << (MySQLParser.CONTEXT_SYMBOL - 97)) | (1 << (MySQLParser.CPU_SYMBOL - 97)) | (1 << (MySQLParser.CURRENT_SYMBOL - 97)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 97)) | (1 << (MySQLParser.DATA_SYMBOL - 97)) | (1 << (MySQLParser.DATAFILE_SYMBOL - 97)) | (1 << (MySQLParser.DATETIME_SYMBOL - 97)) | (1 << (MySQLParser.DATE_SYMBOL - 97)) | (1 << (MySQLParser.DAY_SYMBOL - 97)) | (1 << (MySQLParser.DEFAULT_AUTH_SYMBOL - 97)) | (1 << (MySQLParser.DEFINER_SYMBOL - 97)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYMBOL - 97)) | (1 << (MySQLParser.DIAGNOSTICS_SYMBOL - 97)) | (1 << (MySQLParser.DIRECTORY_SYMBOL - 97)) | (1 << (MySQLParser.DISABLE_SYMBOL - 97)) | (1 << (MySQLParser.DISCARD_SYMBOL - 97)) | (1 << (MySQLParser.DISK_SYMBOL - 97)) | (1 << (MySQLParser.DUMPFILE_SYMBOL - 97)) | (1 << (MySQLParser.DUPLICATE_SYMBOL - 97)) | (1 << (MySQLParser.DYNAMIC_SYMBOL - 97)) | (1 << (MySQLParser.ENDS_SYMBOL - 97)) | (1 << (MySQLParser.ENUM_SYMBOL - 97)) | (1 << (MySQLParser.ENGINE_SYMBOL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (MySQLParser.ENGINES_SYMBOL - 129)) | (1 << (MySQLParser.ERROR_SYMBOL - 129)) | (1 << (MySQLParser.ERRORS_SYMBOL - 129)) | (1 << (MySQLParser.ESCAPE_SYMBOL - 129)) | (1 << (MySQLParser.EVENTS_SYMBOL - 129)) | (1 << (MySQLParser.EVERY_SYMBOL - 129)) | (1 << (MySQLParser.EXPANSION_SYMBOL - 129)) | (1 << (MySQLParser.EXPORT_SYMBOL - 129)) | (1 << (MySQLParser.EXTENDED_SYMBOL - 129)) | (1 << (MySQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FAULTS_SYMBOL - 129)) | (1 << (MySQLParser.FAST_SYMBOL - 129)) | (1 << (MySQLParser.FOUND_SYMBOL - 129)) | (1 << (MySQLParser.ENABLE_SYMBOL - 129)) | (1 << (MySQLParser.FULL_SYMBOL - 129)) | (1 << (MySQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FILTER_SYMBOL - 129)) | (1 << (MySQLParser.FIRST_SYMBOL - 129)) | (1 << (MySQLParser.FIXED_SYMBOL - 129)) | (1 << (MySQLParser.GENERAL_SYMBOL - 129)) | (1 << (MySQLParser.GEOMETRY_SYMBOL - 129)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 129)) | (1 << (MySQLParser.GET_FORMAT_SYMBOL - 129)) | (1 << (MySQLParser.GRANTS_SYMBOL - 129)) | (1 << (MySQLParser.HASH_SYMBOL - 129)) | (1 << (MySQLParser.HOSTS_SYMBOL - 129)) | (1 << (MySQLParser.HOUR_SYMBOL - 129)) | (1 << (MySQLParser.IDENTIFIED_SYMBOL - 129)) | (1 << (MySQLParser.IGNORE_SERVER_IDS_SYMBOL - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (MySQLParser.INVOKER_SYMBOL - 161)) | (1 << (MySQLParser.INDEXES_SYMBOL - 161)) | (1 << (MySQLParser.INITIAL_SIZE_SYMBOL - 161)) | (1 << (MySQLParser.INSTANCE_SYMBOL - 161)) | (1 << (MySQLParser.IO_SYMBOL - 161)) | (1 << (MySQLParser.IPC_SYMBOL - 161)) | (1 << (MySQLParser.ISOLATION_SYMBOL - 161)) | (1 << (MySQLParser.ISSUER_SYMBOL - 161)) | (1 << (MySQLParser.INSERT_METHOD_SYMBOL - 161)) | (1 << (MySQLParser.JSON_SYMBOL - 161)) | (1 << (MySQLParser.KEY_BLOCK_SIZE_SYMBOL - 161)) | (1 << (MySQLParser.LAST_SYMBOL - 161)) | (1 << (MySQLParser.LEAVES_SYMBOL - 161)) | (1 << (MySQLParser.LESS_SYMBOL - 161)) | (1 << (MySQLParser.LEVEL_SYMBOL - 161)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 161)) | (1 << (MySQLParser.LIST_SYMBOL - 161)) | (1 << (MySQLParser.LOCKS_SYMBOL - 161)) | (1 << (MySQLParser.LOGFILE_SYMBOL - 161)) | (1 << (MySQLParser.LOGS_SYMBOL - 161)) | (1 << (MySQLParser.MAX_ROWS_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_HOST_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_PORT_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_LOG_POS_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_USER_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_PASSWORD_SYMBOL - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (MySQLParser.MASTER_SERVER_ID_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_RETRY_COUNT_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_DELAY_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CA_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_TLS_VERSION_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CRL_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_AUTO_POSITION_SYMBOL - 193)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 193)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 193)) | (1 << (MySQLParser.MAX_SIZE_SYMBOL - 193)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 193)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 193)) | (1 << (MySQLParser.MEDIUM_SYMBOL - 193)) | (1 << (MySQLParser.MEMORY_SYMBOL - 193)) | (1 << (MySQLParser.MERGE_SYMBOL - 193)) | (1 << (MySQLParser.MESSAGE_TEXT_SYMBOL - 193)) | (1 << (MySQLParser.MICROSECOND_SYMBOL - 193)) | (1 << (MySQLParser.MIGRATE_SYMBOL - 193)) | (1 << (MySQLParser.MINUTE_SYMBOL - 193)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 193)) | (1 << (MySQLParser.MODIFY_SYMBOL - 193)) | (1 << (MySQLParser.MODE_SYMBOL - 193)) | (1 << (MySQLParser.MONTH_SYMBOL - 193)) | (1 << (MySQLParser.MULTILINESTRING_SYMBOL - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (MySQLParser.MULTIPOINT_SYMBOL - 225)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 225)) | (1 << (MySQLParser.MUTEX_SYMBOL - 225)) | (1 << (MySQLParser.MYSQL_ERRNO_SYMBOL - 225)) | (1 << (MySQLParser.NAME_SYMBOL - 225)) | (1 << (MySQLParser.NAMES_SYMBOL - 225)) | (1 << (MySQLParser.NATIONAL_SYMBOL - 225)) | (1 << (MySQLParser.NCHAR_SYMBOL - 225)) | (1 << (MySQLParser.NDBCLUSTER_SYMBOL - 225)) | (1 << (MySQLParser.NEVER_SYMBOL - 225)) | (1 << (MySQLParser.NEXT_SYMBOL - 225)) | (1 << (MySQLParser.NEW_SYMBOL - 225)) | (1 << (MySQLParser.NO_WAIT_SYMBOL - 225)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 225)) | (1 << (MySQLParser.NUMBER_SYMBOL - 225)) | (1 << (MySQLParser.NVARCHAR_SYMBOL - 225)) | (1 << (MySQLParser.OFFSET_SYMBOL - 225)) | (1 << (MySQLParser.ONE_SYMBOL - 225)) | (1 << (MySQLParser.PACK_KEYS_SYMBOL - 225)) | (1 << (MySQLParser.PAGE_SYMBOL - 225)) | (1 << (MySQLParser.PARTIAL_SYMBOL - 225)) | (1 << (MySQLParser.PARTITIONING_SYMBOL - 225)) | (1 << (MySQLParser.PARTITIONS_SYMBOL - 225)) | (1 << (MySQLParser.PASSWORD_SYMBOL - 225)) | (1 << (MySQLParser.PHASE_SYMBOL - 225)) | (1 << (MySQLParser.PLUGIN_DIR_SYMBOL - 225)) | (1 << (MySQLParser.PLUGIN_SYMBOL - 225)) | (1 << (MySQLParser.PLUGINS_SYMBOL - 225)) | (1 << (MySQLParser.POINT_SYMBOL - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (MySQLParser.POLYGON_SYMBOL - 257)) | (1 << (MySQLParser.PRESERVE_SYMBOL - 257)) | (1 << (MySQLParser.PREV_SYMBOL - 257)) | (1 << (MySQLParser.PRIVILEGES_SYMBOL - 257)) | (1 << (MySQLParser.PROCESSLIST_SYMBOL - 257)) | (1 << (MySQLParser.PROFILE_SYMBOL - 257)) | (1 << (MySQLParser.PROFILES_SYMBOL - 257)) | (1 << (MySQLParser.QUARTER_SYMBOL - 257)) | (1 << (MySQLParser.QUERY_SYMBOL - 257)) | (1 << (MySQLParser.QUICK_SYMBOL - 257)) | (1 << (MySQLParser.READ_ONLY_SYMBOL - 257)) | (1 << (MySQLParser.REBUILD_SYMBOL - 257)) | (1 << (MySQLParser.RECOVER_SYMBOL - 257)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYMBOL - 257)) | (1 << (MySQLParser.REDUNDANT_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_SYMBOL - 257)) | (1 << (MySQLParser.RELAYLOG_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_LOG_POS_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_THREAD_SYMBOL - 257)) | (1 << (MySQLParser.REORGANIZE_SYMBOL - 257)) | (1 << (MySQLParser.REPEATABLE_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_DO_DB_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_DO_TABLE_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 289)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 289)) | (1 << (MySQLParser.RESUME_SYMBOL - 289)) | (1 << (MySQLParser.RETURNED_SQLSTATE_SYMBOL - 289)) | (1 << (MySQLParser.RETURNS_SYMBOL - 289)) | (1 << (MySQLParser.REVERSE_SYMBOL - 289)) | (1 << (MySQLParser.ROLLUP_SYMBOL - 289)) | (1 << (MySQLParser.ROTATE_SYMBOL - 289)) | (1 << (MySQLParser.ROUTINE_SYMBOL - 289)) | (1 << (MySQLParser.ROW_COUNT_SYMBOL - 289)) | (1 << (MySQLParser.ROW_FORMAT_SYMBOL - 289)) | (1 << (MySQLParser.RTREE_SYMBOL - 289)) | (1 << (MySQLParser.SCHEDULE_SYMBOL - 289)) | (1 << (MySQLParser.SCHEMA_NAME_SYMBOL - 289)) | (1 << (MySQLParser.SECOND_SYMBOL - 289)) | (1 << (MySQLParser.SERIAL_SYMBOL - 289)) | (1 << (MySQLParser.SERIALIZABLE_SYMBOL - 289)) | (1 << (MySQLParser.SIMPLE_SYMBOL - 289)) | (1 << (MySQLParser.SHARE_SYMBOL - 289)) | (1 << (MySQLParser.SLOW_SYMBOL - 289)) | (1 << (MySQLParser.SNAPSHOT_SYMBOL - 289)) | (1 << (MySQLParser.SOUNDS_SYMBOL - 289)) | (1 << (MySQLParser.SOURCE_SYMBOL - 289)) | (1 << (MySQLParser.SQL_AFTER_GTIDS_SYMBOL - 289)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 289)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 289)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 289)) | (1 << (MySQLParser.SQL_NO_CACHE_SYMBOL - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (MySQLParser.SQL_THREAD_SYMBOL - 321)) | (1 << (MySQLParser.STACKED_SYMBOL - 321)) | (1 << (MySQLParser.STARTS_SYMBOL - 321)) | (1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 321)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 321)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 321)) | (1 << (MySQLParser.STATUS_SYMBOL - 321)) | (1 << (MySQLParser.STORAGE_SYMBOL - 321)) | (1 << (MySQLParser.STRING_SYMBOL - 321)) | (1 << (MySQLParser.SUBCLASS_ORIGIN_SYMBOL - 321)) | (1 << (MySQLParser.SUBDATE_SYMBOL - 321)) | (1 << (MySQLParser.SUBJECT_SYMBOL - 321)) | (1 << (MySQLParser.SUBPARTITION_SYMBOL - 321)) | (1 << (MySQLParser.SUBPARTITIONS_SYMBOL - 321)) | (1 << (MySQLParser.SUSPEND_SYMBOL - 321)) | (1 << (MySQLParser.SWAPS_SYMBOL - 321)) | (1 << (MySQLParser.SWITCHES_SYMBOL - 321)) | (1 << (MySQLParser.TABLE_NAME_SYMBOL - 321)) | (1 << (MySQLParser.TABLES_SYMBOL - 321)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYMBOL - 321)) | (1 << (MySQLParser.TABLESPACE_SYMBOL - 321)) | (1 << (MySQLParser.TEMPORARY_SYMBOL - 321)) | (1 << (MySQLParser.TEMPTABLE_SYMBOL - 321)) | (1 << (MySQLParser.TEXT_SYMBOL - 321)) | (1 << (MySQLParser.THAN_SYMBOL - 321)) | (1 << (MySQLParser.TRANSACTION_SYMBOL - 321)) | (1 << (MySQLParser.TRIGGERS_SYMBOL - 321)) | (1 << (MySQLParser.TIMESTAMP_SYMBOL - 321)) | (1 << (MySQLParser.TIMESTAMP_ADD_SYMBOL - 321)) | (1 << (MySQLParser.TIMESTAMP_DIFF_SYMBOL - 321)) | (1 << (MySQLParser.TIME_SYMBOL - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (MySQLParser.TYPES_SYMBOL - 353)) | (1 << (MySQLParser.TYPE_SYMBOL - 353)) | (1 << (MySQLParser.UNCOMMITTED_SYMBOL - 353)) | (1 << (MySQLParser.UNDEFINED_SYMBOL - 353)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 353)) | (1 << (MySQLParser.UNDOFILE_SYMBOL - 353)) | (1 << (MySQLParser.UNKNOWN_SYMBOL - 353)) | (1 << (MySQLParser.UNTIL_SYMBOL - 353)) | (1 << (MySQLParser.USER_RESOURCES_SYMBOL - 353)) | (1 << (MySQLParser.USER_SYMBOL - 353)) | (1 << (MySQLParser.USE_FRM_SYMBOL - 353)) | (1 << (MySQLParser.VARIABLES_SYMBOL - 353)) | (1 << (MySQLParser.VIEW_SYMBOL - 353)) | (1 << (MySQLParser.VALUE_SYMBOL - 353)) | (1 << (MySQLParser.WARNINGS_SYMBOL - 353)) | (1 << (MySQLParser.WAIT_SYMBOL - 353)) | (1 << (MySQLParser.WEEK_SYMBOL - 353)) | (1 << (MySQLParser.WORK_SYMBOL - 353)) | (1 << (MySQLParser.WEIGHT_STRING_SYMBOL - 353)) | (1 << (MySQLParser.X509_SYMBOL - 353)) | (1 << (MySQLParser.XID_SYMBOL - 353)) | (1 << (MySQLParser.XML_SYMBOL - 353)) | (1 << (MySQLParser.YEAR_SYMBOL - 353)))) !== 0) || _la===MySQLParser.EXCHANGE_SYMBOL || _la===MySQLParser.EXPIRE_SYMBOL || _la===MySQLParser.ONLY_SYMBOL || ((((_la - 670)) & ~0x1f) == 0 && ((1 << (_la - 670)) & ((1 << (MySQLParser.VALIDATION_SYMBOL - 670)) | (1 << (MySQLParser.WITHOUT_SYMBOL - 670)) | (1 << (MySQLParser.ROLE_SYMBOL - 670)) | (1 << (MySQLParser.ADMIN_SYMBOL - 670)) | (1 << (MySQLParser.INVISIBLE_SYMBOL - 670)) | (1 << (MySQLParser.VISIBLE_SYMBOL - 670)) | (1 << (MySQLParser.COMPONENT_SYMBOL - 670)) | (1 << (MySQLParser.SKIP_SYMBOL - 670)) | (1 << (MySQLParser.LOCKED_SYMBOL - 670)) | (1 << (MySQLParser.NOWAIT_SYMBOL - 670)))) !== 0) || ((((_la - 704)) & ~0x1f) == 0 && ((1 << (_la - 704)) & ((1 << (MySQLParser.HISTOGRAM_SYMBOL - 704)) | (1 << (MySQLParser.BUCKETS_SYMBOL - 704)) | (1 << (MySQLParser.EXCLUDE_SYMBOL - 704)) | (1 << (MySQLParser.FOLLOWING_SYMBOL - 704)) | (1 << (MySQLParser.NULLS_SYMBOL - 704)) | (1 << (MySQLParser.OTHERS_SYMBOL - 704)) | (1 << (MySQLParser.PRECEDING_SYMBOL - 704)) | (1 << (MySQLParser.RESPECT_SYMBOL - 704)) | (1 << (MySQLParser.TIES_SYMBOL - 704)) | (1 << (MySQLParser.UNBOUNDED_SYMBOL - 704)) | (1 << (MySQLParser.NESTED_SYMBOL - 704)) | (1 << (MySQLParser.ORDINALITY_SYMBOL - 704)) | (1 << (MySQLParser.PATH_SYMBOL - 704)) | (1 << (MySQLParser.HISTORY_SYMBOL - 704)))) !== 0) || ((((_la - 736)) & ~0x1f) == 0 && ((1 << (_la - 736)) & ((1 << (MySQLParser.REUSE_SYMBOL - 736)) | (1 << (MySQLParser.SRID_SYMBOL - 736)) | (1 << (MySQLParser.THREAD_PRIORITY_SYMBOL - 736)) | (1 << (MySQLParser.VCPU_SYMBOL - 736)) | (1 << (MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 736)) | (1 << (MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL - 736)) | (1 << (MySQLParser.DEFINITION_SYMBOL - 736)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 736)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 736)) | (1 << (MySQLParser.REFERENCE_SYMBOL - 736)) | (1 << (MySQLParser.OPTIONAL_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_ENGINE_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_LOAD_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_UNLOAD_SYMBOL - 736)) | (1 << (MySQLParser.ACTIVE_SYMBOL - 736)) | (1 << (MySQLParser.INACTIVE_SYMBOL - 736)) | (1 << (MySQLParser.RETAIN_SYMBOL - 736)) | (1 << (MySQLParser.OLD_SYMBOL - 736)) | (1 << (MySQLParser.NETWORK_NAMESPACE_SYMBOL - 736)) | (1 << (MySQLParser.ENFORCED_SYMBOL - 736)) | (1 << (MySQLParser.OJ_SYMBOL - 736)) | (1 << (MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 736)) | (1 << (MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 736)) | (1 << (MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 736)))) !== 0) || _la===MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleKeyword;
    return this;
}

RoleKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleKeywordContext.prototype.constructor = RoleKeywordContext;

RoleKeywordContext.prototype.roleOrLabelKeyword = function() {
    return this.getTypedRuleContext(RoleOrLabelKeywordContext,0);
};

RoleKeywordContext.prototype.roleOrIdentifierKeyword = function() {
    return this.getTypedRuleContext(RoleOrIdentifierKeywordContext,0);
};

RoleKeywordContext.prototype.identifierKeywordsUnambiguous = function() {
    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
};

RoleKeywordContext.prototype.identifierKeywordsAmbiguous2Labels = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
};

RoleKeywordContext.prototype.identifierKeywordsAmbiguous4SystemVariables = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
};

RoleKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleKeyword(this);
	}
};

RoleKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleKeyword(this);
	}
};

RoleKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleKeywordContext = RoleKeywordContext;

MySQLParser.prototype.roleKeyword = function() {

    var localctx = new RoleKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1200, MySQLParser.RULE_roleKeyword);
    try {
        this.state = 8329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8319;
            if (!( serverVersion < 80017)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
            }
            this.state = 8322;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1114,this._ctx);
            switch(la_) {
            case 1:
                this.state = 8320;
                this.roleOrLabelKeyword();
                break;

            case 2:
                this.state = 8321;
                this.roleOrIdentifierKeyword();
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8327;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.ACCOUNT_SYMBOL:
            case MySQLParser.ALWAYS_SYMBOL:
            case MySQLParser.BACKUP_SYMBOL:
            case MySQLParser.CLOSE_SYMBOL:
            case MySQLParser.FORMAT_SYMBOL:
            case MySQLParser.GROUP_REPLICATION_SYMBOL:
            case MySQLParser.HOST_SYMBOL:
            case MySQLParser.OPEN_SYMBOL:
            case MySQLParser.OPTIONS_SYMBOL:
            case MySQLParser.OWNER_SYMBOL:
            case MySQLParser.PARSER_SYMBOL:
            case MySQLParser.PORT_SYMBOL:
            case MySQLParser.REMOVE_SYMBOL:
            case MySQLParser.RESTORE_SYMBOL:
            case MySQLParser.SECURITY_SYMBOL:
            case MySQLParser.SERVER_SYMBOL:
            case MySQLParser.SOCKET_SYMBOL:
            case MySQLParser.SONAME_SYMBOL:
            case MySQLParser.UPGRADE_SYMBOL:
            case MySQLParser.WRAPPER_SYMBOL:
            case MySQLParser.ACTION_SYMBOL:
            case MySQLParser.ADDDATE_SYMBOL:
            case MySQLParser.AFTER_SYMBOL:
            case MySQLParser.AGAINST_SYMBOL:
            case MySQLParser.AGGREGATE_SYMBOL:
            case MySQLParser.ALGORITHM_SYMBOL:
            case MySQLParser.ANY_SYMBOL:
            case MySQLParser.AT_SYMBOL:
            case MySQLParser.AUTO_INCREMENT_SYMBOL:
            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
            case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
            case MySQLParser.AVG_SYMBOL:
            case MySQLParser.BINLOG_SYMBOL:
            case MySQLParser.BIT_SYMBOL:
            case MySQLParser.BLOCK_SYMBOL:
            case MySQLParser.BOOL_SYMBOL:
            case MySQLParser.BOOLEAN_SYMBOL:
            case MySQLParser.BTREE_SYMBOL:
            case MySQLParser.CASCADED_SYMBOL:
            case MySQLParser.CATALOG_NAME_SYMBOL:
            case MySQLParser.CHAIN_SYMBOL:
            case MySQLParser.CHANGED_SYMBOL:
            case MySQLParser.CHANNEL_SYMBOL:
            case MySQLParser.CIPHER_SYMBOL:
            case MySQLParser.CLIENT_SYMBOL:
            case MySQLParser.CLASS_ORIGIN_SYMBOL:
            case MySQLParser.COALESCE_SYMBOL:
            case MySQLParser.CODE_SYMBOL:
            case MySQLParser.COLLATION_SYMBOL:
            case MySQLParser.COLUMN_NAME_SYMBOL:
            case MySQLParser.COLUMN_FORMAT_SYMBOL:
            case MySQLParser.COLUMNS_SYMBOL:
            case MySQLParser.COMMITTED_SYMBOL:
            case MySQLParser.COMPACT_SYMBOL:
            case MySQLParser.COMPLETION_SYMBOL:
            case MySQLParser.COMPRESSED_SYMBOL:
            case MySQLParser.COMPRESSION_SYMBOL:
            case MySQLParser.ENCRYPTION_SYMBOL:
            case MySQLParser.CONCURRENT_SYMBOL:
            case MySQLParser.CONNECTION_SYMBOL:
            case MySQLParser.CONSISTENT_SYMBOL:
            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
            case MySQLParser.CONTEXT_SYMBOL:
            case MySQLParser.CPU_SYMBOL:
            case MySQLParser.CURRENT_SYMBOL:
            case MySQLParser.CURSOR_NAME_SYMBOL:
            case MySQLParser.DATA_SYMBOL:
            case MySQLParser.DATAFILE_SYMBOL:
            case MySQLParser.DATETIME_SYMBOL:
            case MySQLParser.DATE_SYMBOL:
            case MySQLParser.DAY_SYMBOL:
            case MySQLParser.DEFAULT_AUTH_SYMBOL:
            case MySQLParser.DEFINER_SYMBOL:
            case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
            case MySQLParser.DIAGNOSTICS_SYMBOL:
            case MySQLParser.DIRECTORY_SYMBOL:
            case MySQLParser.DISABLE_SYMBOL:
            case MySQLParser.DISCARD_SYMBOL:
            case MySQLParser.DISK_SYMBOL:
            case MySQLParser.DUMPFILE_SYMBOL:
            case MySQLParser.DUPLICATE_SYMBOL:
            case MySQLParser.DYNAMIC_SYMBOL:
            case MySQLParser.ENDS_SYMBOL:
            case MySQLParser.ENUM_SYMBOL:
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.ENGINES_SYMBOL:
            case MySQLParser.ERROR_SYMBOL:
            case MySQLParser.ERRORS_SYMBOL:
            case MySQLParser.ESCAPE_SYMBOL:
            case MySQLParser.EVENTS_SYMBOL:
            case MySQLParser.EVERY_SYMBOL:
            case MySQLParser.EXPANSION_SYMBOL:
            case MySQLParser.EXPORT_SYMBOL:
            case MySQLParser.EXTENDED_SYMBOL:
            case MySQLParser.EXTENT_SIZE_SYMBOL:
            case MySQLParser.FAULTS_SYMBOL:
            case MySQLParser.FAST_SYMBOL:
            case MySQLParser.FOUND_SYMBOL:
            case MySQLParser.ENABLE_SYMBOL:
            case MySQLParser.FULL_SYMBOL:
            case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
            case MySQLParser.FILTER_SYMBOL:
            case MySQLParser.FIRST_SYMBOL:
            case MySQLParser.FIXED_SYMBOL:
            case MySQLParser.GENERAL_SYMBOL:
            case MySQLParser.GEOMETRY_SYMBOL:
            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
            case MySQLParser.GET_FORMAT_SYMBOL:
            case MySQLParser.GRANTS_SYMBOL:
            case MySQLParser.HASH_SYMBOL:
            case MySQLParser.HOSTS_SYMBOL:
            case MySQLParser.HOUR_SYMBOL:
            case MySQLParser.IDENTIFIED_SYMBOL:
            case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
            case MySQLParser.INVOKER_SYMBOL:
            case MySQLParser.INDEXES_SYMBOL:
            case MySQLParser.INITIAL_SIZE_SYMBOL:
            case MySQLParser.INSTANCE_SYMBOL:
            case MySQLParser.IO_SYMBOL:
            case MySQLParser.IPC_SYMBOL:
            case MySQLParser.ISOLATION_SYMBOL:
            case MySQLParser.ISSUER_SYMBOL:
            case MySQLParser.INSERT_METHOD_SYMBOL:
            case MySQLParser.JSON_SYMBOL:
            case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
            case MySQLParser.LAST_SYMBOL:
            case MySQLParser.LEAVES_SYMBOL:
            case MySQLParser.LESS_SYMBOL:
            case MySQLParser.LEVEL_SYMBOL:
            case MySQLParser.LINESTRING_SYMBOL:
            case MySQLParser.LIST_SYMBOL:
            case MySQLParser.LOCKS_SYMBOL:
            case MySQLParser.LOGFILE_SYMBOL:
            case MySQLParser.LOGS_SYMBOL:
            case MySQLParser.MAX_ROWS_SYMBOL:
            case MySQLParser.MASTER_SYMBOL:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
            case MySQLParser.MASTER_HOST_SYMBOL:
            case MySQLParser.MASTER_PORT_SYMBOL:
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.MASTER_USER_SYMBOL:
            case MySQLParser.MASTER_PASSWORD_SYMBOL:
            case MySQLParser.MASTER_SERVER_ID_SYMBOL:
            case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
            case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
            case MySQLParser.MASTER_DELAY_SYMBOL:
            case MySQLParser.MASTER_SSL_SYMBOL:
            case MySQLParser.MASTER_SSL_CA_SYMBOL:
            case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
            case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
            case MySQLParser.MASTER_SSL_CERT_SYMBOL:
            case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
            case MySQLParser.MASTER_SSL_CRL_SYMBOL:
            case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
            case MySQLParser.MASTER_SSL_KEY_SYMBOL:
            case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_SIZE_SYMBOL:
            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
            case MySQLParser.MEDIUM_SYMBOL:
            case MySQLParser.MEMORY_SYMBOL:
            case MySQLParser.MERGE_SYMBOL:
            case MySQLParser.MESSAGE_TEXT_SYMBOL:
            case MySQLParser.MICROSECOND_SYMBOL:
            case MySQLParser.MIGRATE_SYMBOL:
            case MySQLParser.MINUTE_SYMBOL:
            case MySQLParser.MIN_ROWS_SYMBOL:
            case MySQLParser.MODIFY_SYMBOL:
            case MySQLParser.MODE_SYMBOL:
            case MySQLParser.MONTH_SYMBOL:
            case MySQLParser.MULTILINESTRING_SYMBOL:
            case MySQLParser.MULTIPOINT_SYMBOL:
            case MySQLParser.MULTIPOLYGON_SYMBOL:
            case MySQLParser.MUTEX_SYMBOL:
            case MySQLParser.MYSQL_ERRNO_SYMBOL:
            case MySQLParser.NAME_SYMBOL:
            case MySQLParser.NAMES_SYMBOL:
            case MySQLParser.NATIONAL_SYMBOL:
            case MySQLParser.NCHAR_SYMBOL:
            case MySQLParser.NDBCLUSTER_SYMBOL:
            case MySQLParser.NEVER_SYMBOL:
            case MySQLParser.NEXT_SYMBOL:
            case MySQLParser.NEW_SYMBOL:
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.NODEGROUP_SYMBOL:
            case MySQLParser.NUMBER_SYMBOL:
            case MySQLParser.NVARCHAR_SYMBOL:
            case MySQLParser.OFFSET_SYMBOL:
            case MySQLParser.ONE_SYMBOL:
            case MySQLParser.PACK_KEYS_SYMBOL:
            case MySQLParser.PAGE_SYMBOL:
            case MySQLParser.PARTIAL_SYMBOL:
            case MySQLParser.PARTITIONING_SYMBOL:
            case MySQLParser.PARTITIONS_SYMBOL:
            case MySQLParser.PASSWORD_SYMBOL:
            case MySQLParser.PHASE_SYMBOL:
            case MySQLParser.PLUGIN_DIR_SYMBOL:
            case MySQLParser.PLUGIN_SYMBOL:
            case MySQLParser.PLUGINS_SYMBOL:
            case MySQLParser.POINT_SYMBOL:
            case MySQLParser.POLYGON_SYMBOL:
            case MySQLParser.PRESERVE_SYMBOL:
            case MySQLParser.PREV_SYMBOL:
            case MySQLParser.PRIVILEGES_SYMBOL:
            case MySQLParser.PROCESSLIST_SYMBOL:
            case MySQLParser.PROFILE_SYMBOL:
            case MySQLParser.PROFILES_SYMBOL:
            case MySQLParser.QUARTER_SYMBOL:
            case MySQLParser.QUERY_SYMBOL:
            case MySQLParser.QUICK_SYMBOL:
            case MySQLParser.READ_ONLY_SYMBOL:
            case MySQLParser.REBUILD_SYMBOL:
            case MySQLParser.RECOVER_SYMBOL:
            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.REDUNDANT_SYMBOL:
            case MySQLParser.RELAY_SYMBOL:
            case MySQLParser.RELAYLOG_SYMBOL:
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
            case MySQLParser.RELAY_THREAD_SYMBOL:
            case MySQLParser.REORGANIZE_SYMBOL:
            case MySQLParser.REPEATABLE_SYMBOL:
            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
            case MySQLParser.RESUME_SYMBOL:
            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
            case MySQLParser.RETURNS_SYMBOL:
            case MySQLParser.REVERSE_SYMBOL:
            case MySQLParser.ROLLUP_SYMBOL:
            case MySQLParser.ROTATE_SYMBOL:
            case MySQLParser.ROUTINE_SYMBOL:
            case MySQLParser.ROW_COUNT_SYMBOL:
            case MySQLParser.ROW_FORMAT_SYMBOL:
            case MySQLParser.RTREE_SYMBOL:
            case MySQLParser.SCHEDULE_SYMBOL:
            case MySQLParser.SCHEMA_NAME_SYMBOL:
            case MySQLParser.SECOND_SYMBOL:
            case MySQLParser.SERIAL_SYMBOL:
            case MySQLParser.SERIALIZABLE_SYMBOL:
            case MySQLParser.SIMPLE_SYMBOL:
            case MySQLParser.SHARE_SYMBOL:
            case MySQLParser.SLOW_SYMBOL:
            case MySQLParser.SNAPSHOT_SYMBOL:
            case MySQLParser.SOUNDS_SYMBOL:
            case MySQLParser.SOURCE_SYMBOL:
            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
            case MySQLParser.SQL_NO_CACHE_SYMBOL:
            case MySQLParser.SQL_THREAD_SYMBOL:
            case MySQLParser.STACKED_SYMBOL:
            case MySQLParser.STARTS_SYMBOL:
            case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
            case MySQLParser.STATS_PERSISTENT_SYMBOL:
            case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
            case MySQLParser.STATUS_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
            case MySQLParser.STRING_SYMBOL:
            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
            case MySQLParser.SUBDATE_SYMBOL:
            case MySQLParser.SUBJECT_SYMBOL:
            case MySQLParser.SUBPARTITION_SYMBOL:
            case MySQLParser.SUBPARTITIONS_SYMBOL:
            case MySQLParser.SUSPEND_SYMBOL:
            case MySQLParser.SWAPS_SYMBOL:
            case MySQLParser.SWITCHES_SYMBOL:
            case MySQLParser.TABLE_NAME_SYMBOL:
            case MySQLParser.TABLES_SYMBOL:
            case MySQLParser.TABLE_CHECKSUM_SYMBOL:
            case MySQLParser.TABLESPACE_SYMBOL:
            case MySQLParser.TEMPORARY_SYMBOL:
            case MySQLParser.TEMPTABLE_SYMBOL:
            case MySQLParser.TEXT_SYMBOL:
            case MySQLParser.THAN_SYMBOL:
            case MySQLParser.TRANSACTION_SYMBOL:
            case MySQLParser.TRIGGERS_SYMBOL:
            case MySQLParser.TIMESTAMP_SYMBOL:
            case MySQLParser.TIMESTAMP_ADD_SYMBOL:
            case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
            case MySQLParser.TIME_SYMBOL:
            case MySQLParser.TYPES_SYMBOL:
            case MySQLParser.TYPE_SYMBOL:
            case MySQLParser.UNCOMMITTED_SYMBOL:
            case MySQLParser.UNDEFINED_SYMBOL:
            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.UNDOFILE_SYMBOL:
            case MySQLParser.UNKNOWN_SYMBOL:
            case MySQLParser.UNTIL_SYMBOL:
            case MySQLParser.USER_RESOURCES_SYMBOL:
            case MySQLParser.USER_SYMBOL:
            case MySQLParser.USE_FRM_SYMBOL:
            case MySQLParser.VARIABLES_SYMBOL:
            case MySQLParser.VIEW_SYMBOL:
            case MySQLParser.VALUE_SYMBOL:
            case MySQLParser.WARNINGS_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
            case MySQLParser.WEEK_SYMBOL:
            case MySQLParser.WORK_SYMBOL:
            case MySQLParser.WEIGHT_STRING_SYMBOL:
            case MySQLParser.X509_SYMBOL:
            case MySQLParser.XID_SYMBOL:
            case MySQLParser.XML_SYMBOL:
            case MySQLParser.YEAR_SYMBOL:
            case MySQLParser.EXCHANGE_SYMBOL:
            case MySQLParser.EXPIRE_SYMBOL:
            case MySQLParser.ONLY_SYMBOL:
            case MySQLParser.VALIDATION_SYMBOL:
            case MySQLParser.WITHOUT_SYMBOL:
            case MySQLParser.ROLE_SYMBOL:
            case MySQLParser.ADMIN_SYMBOL:
            case MySQLParser.INVISIBLE_SYMBOL:
            case MySQLParser.VISIBLE_SYMBOL:
            case MySQLParser.COMPONENT_SYMBOL:
            case MySQLParser.SKIP_SYMBOL:
            case MySQLParser.LOCKED_SYMBOL:
            case MySQLParser.NOWAIT_SYMBOL:
            case MySQLParser.HISTOGRAM_SYMBOL:
            case MySQLParser.BUCKETS_SYMBOL:
            case MySQLParser.EXCLUDE_SYMBOL:
            case MySQLParser.FOLLOWING_SYMBOL:
            case MySQLParser.NULLS_SYMBOL:
            case MySQLParser.OTHERS_SYMBOL:
            case MySQLParser.PRECEDING_SYMBOL:
            case MySQLParser.RESPECT_SYMBOL:
            case MySQLParser.TIES_SYMBOL:
            case MySQLParser.UNBOUNDED_SYMBOL:
            case MySQLParser.NESTED_SYMBOL:
            case MySQLParser.ORDINALITY_SYMBOL:
            case MySQLParser.PATH_SYMBOL:
            case MySQLParser.HISTORY_SYMBOL:
            case MySQLParser.REUSE_SYMBOL:
            case MySQLParser.SRID_SYMBOL:
            case MySQLParser.THREAD_PRIORITY_SYMBOL:
            case MySQLParser.VCPU_SYMBOL:
            case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
            case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
            case MySQLParser.DEFINITION_SYMBOL:
            case MySQLParser.DESCRIPTION_SYMBOL:
            case MySQLParser.ORGANIZATION_SYMBOL:
            case MySQLParser.REFERENCE_SYMBOL:
            case MySQLParser.OPTIONAL_SYMBOL:
            case MySQLParser.SECONDARY_SYMBOL:
            case MySQLParser.SECONDARY_ENGINE_SYMBOL:
            case MySQLParser.SECONDARY_LOAD_SYMBOL:
            case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
            case MySQLParser.ACTIVE_SYMBOL:
            case MySQLParser.INACTIVE_SYMBOL:
            case MySQLParser.RETAIN_SYMBOL:
            case MySQLParser.OLD_SYMBOL:
            case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
            case MySQLParser.ENFORCED_SYMBOL:
            case MySQLParser.OJ_SYMBOL:
            case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
            case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
            case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
            case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                this.state = 8324;
                this.identifierKeywordsUnambiguous();
                break;
            case MySQLParser.ASCII_SYMBOL:
            case MySQLParser.BEGIN_SYMBOL:
            case MySQLParser.BYTE_SYMBOL:
            case MySQLParser.CACHE_SYMBOL:
            case MySQLParser.CHARSET_SYMBOL:
            case MySQLParser.CHECKSUM_SYMBOL:
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.COMMIT_SYMBOL:
            case MySQLParser.CONTAINS_SYMBOL:
            case MySQLParser.DEALLOCATE_SYMBOL:
            case MySQLParser.DO_SYMBOL:
            case MySQLParser.END_SYMBOL:
            case MySQLParser.FLUSH_SYMBOL:
            case MySQLParser.FOLLOWS_SYMBOL:
            case MySQLParser.HANDLER_SYMBOL:
            case MySQLParser.HELP_SYMBOL:
            case MySQLParser.INSTALL_SYMBOL:
            case MySQLParser.LANGUAGE_SYMBOL:
            case MySQLParser.NO_SYMBOL:
            case MySQLParser.PRECEDES_SYMBOL:
            case MySQLParser.PREPARE_SYMBOL:
            case MySQLParser.REPAIR_SYMBOL:
            case MySQLParser.RESET_SYMBOL:
            case MySQLParser.ROLLBACK_SYMBOL:
            case MySQLParser.SAVEPOINT_SYMBOL:
            case MySQLParser.SIGNED_SYMBOL:
            case MySQLParser.SLAVE_SYMBOL:
            case MySQLParser.START_SYMBOL:
            case MySQLParser.STOP_SYMBOL:
            case MySQLParser.TRUNCATE_SYMBOL:
            case MySQLParser.UNICODE_SYMBOL:
            case MySQLParser.UNINSTALL_SYMBOL:
            case MySQLParser.XA_SYMBOL:
            case MySQLParser.IMPORT_SYMBOL:
            case MySQLParser.CLONE_SYMBOL:
                this.state = 8325;
                this.identifierKeywordsAmbiguous2Labels();
                break;
            case MySQLParser.GLOBAL_SYMBOL:
            case MySQLParser.LOCAL_SYMBOL:
            case MySQLParser.SESSION_SYMBOL:
            case MySQLParser.PERSIST_SYMBOL:
            case MySQLParser.PERSIST_ONLY_SYMBOL:
                this.state = 8326;
                this.identifierKeywordsAmbiguous4SystemVariables();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LValueKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lValueKeyword;
    return this;
}

LValueKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LValueKeywordContext.prototype.constructor = LValueKeywordContext;

LValueKeywordContext.prototype.identifierKeywordsUnambiguous = function() {
    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
};

LValueKeywordContext.prototype.identifierKeywordsAmbiguous1RolesAndLabels = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0);
};

LValueKeywordContext.prototype.identifierKeywordsAmbiguous2Labels = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
};

LValueKeywordContext.prototype.identifierKeywordsAmbiguous3Roles = function() {
    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
};

LValueKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLValueKeyword(this);
	}
};

LValueKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLValueKeyword(this);
	}
};

LValueKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLValueKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LValueKeywordContext = LValueKeywordContext;

MySQLParser.prototype.lValueKeyword = function() {

    var localctx = new LValueKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1202, MySQLParser.RULE_lValueKeyword);
    try {
        this.state = 8335;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ACCOUNT_SYMBOL:
        case MySQLParser.ALWAYS_SYMBOL:
        case MySQLParser.BACKUP_SYMBOL:
        case MySQLParser.CLOSE_SYMBOL:
        case MySQLParser.FORMAT_SYMBOL:
        case MySQLParser.GROUP_REPLICATION_SYMBOL:
        case MySQLParser.HOST_SYMBOL:
        case MySQLParser.OPEN_SYMBOL:
        case MySQLParser.OPTIONS_SYMBOL:
        case MySQLParser.OWNER_SYMBOL:
        case MySQLParser.PARSER_SYMBOL:
        case MySQLParser.PORT_SYMBOL:
        case MySQLParser.REMOVE_SYMBOL:
        case MySQLParser.RESTORE_SYMBOL:
        case MySQLParser.SECURITY_SYMBOL:
        case MySQLParser.SERVER_SYMBOL:
        case MySQLParser.SOCKET_SYMBOL:
        case MySQLParser.SONAME_SYMBOL:
        case MySQLParser.UPGRADE_SYMBOL:
        case MySQLParser.WRAPPER_SYMBOL:
        case MySQLParser.ACTION_SYMBOL:
        case MySQLParser.ADDDATE_SYMBOL:
        case MySQLParser.AFTER_SYMBOL:
        case MySQLParser.AGAINST_SYMBOL:
        case MySQLParser.AGGREGATE_SYMBOL:
        case MySQLParser.ALGORITHM_SYMBOL:
        case MySQLParser.ANY_SYMBOL:
        case MySQLParser.AT_SYMBOL:
        case MySQLParser.AUTO_INCREMENT_SYMBOL:
        case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
        case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
        case MySQLParser.AVG_SYMBOL:
        case MySQLParser.BINLOG_SYMBOL:
        case MySQLParser.BIT_SYMBOL:
        case MySQLParser.BLOCK_SYMBOL:
        case MySQLParser.BOOL_SYMBOL:
        case MySQLParser.BOOLEAN_SYMBOL:
        case MySQLParser.BTREE_SYMBOL:
        case MySQLParser.CASCADED_SYMBOL:
        case MySQLParser.CATALOG_NAME_SYMBOL:
        case MySQLParser.CHAIN_SYMBOL:
        case MySQLParser.CHANGED_SYMBOL:
        case MySQLParser.CHANNEL_SYMBOL:
        case MySQLParser.CIPHER_SYMBOL:
        case MySQLParser.CLIENT_SYMBOL:
        case MySQLParser.CLASS_ORIGIN_SYMBOL:
        case MySQLParser.COALESCE_SYMBOL:
        case MySQLParser.CODE_SYMBOL:
        case MySQLParser.COLLATION_SYMBOL:
        case MySQLParser.COLUMN_NAME_SYMBOL:
        case MySQLParser.COLUMN_FORMAT_SYMBOL:
        case MySQLParser.COLUMNS_SYMBOL:
        case MySQLParser.COMMITTED_SYMBOL:
        case MySQLParser.COMPACT_SYMBOL:
        case MySQLParser.COMPLETION_SYMBOL:
        case MySQLParser.COMPRESSED_SYMBOL:
        case MySQLParser.COMPRESSION_SYMBOL:
        case MySQLParser.ENCRYPTION_SYMBOL:
        case MySQLParser.CONCURRENT_SYMBOL:
        case MySQLParser.CONNECTION_SYMBOL:
        case MySQLParser.CONSISTENT_SYMBOL:
        case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
        case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
        case MySQLParser.CONSTRAINT_NAME_SYMBOL:
        case MySQLParser.CONTEXT_SYMBOL:
        case MySQLParser.CPU_SYMBOL:
        case MySQLParser.CURRENT_SYMBOL:
        case MySQLParser.CURSOR_NAME_SYMBOL:
        case MySQLParser.DATA_SYMBOL:
        case MySQLParser.DATAFILE_SYMBOL:
        case MySQLParser.DATETIME_SYMBOL:
        case MySQLParser.DATE_SYMBOL:
        case MySQLParser.DAY_SYMBOL:
        case MySQLParser.DEFAULT_AUTH_SYMBOL:
        case MySQLParser.DEFINER_SYMBOL:
        case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
        case MySQLParser.DIAGNOSTICS_SYMBOL:
        case MySQLParser.DIRECTORY_SYMBOL:
        case MySQLParser.DISABLE_SYMBOL:
        case MySQLParser.DISCARD_SYMBOL:
        case MySQLParser.DISK_SYMBOL:
        case MySQLParser.DUMPFILE_SYMBOL:
        case MySQLParser.DUPLICATE_SYMBOL:
        case MySQLParser.DYNAMIC_SYMBOL:
        case MySQLParser.ENDS_SYMBOL:
        case MySQLParser.ENUM_SYMBOL:
        case MySQLParser.ENGINE_SYMBOL:
        case MySQLParser.ENGINES_SYMBOL:
        case MySQLParser.ERROR_SYMBOL:
        case MySQLParser.ERRORS_SYMBOL:
        case MySQLParser.ESCAPE_SYMBOL:
        case MySQLParser.EVENTS_SYMBOL:
        case MySQLParser.EVERY_SYMBOL:
        case MySQLParser.EXPANSION_SYMBOL:
        case MySQLParser.EXPORT_SYMBOL:
        case MySQLParser.EXTENDED_SYMBOL:
        case MySQLParser.EXTENT_SIZE_SYMBOL:
        case MySQLParser.FAULTS_SYMBOL:
        case MySQLParser.FAST_SYMBOL:
        case MySQLParser.FOUND_SYMBOL:
        case MySQLParser.ENABLE_SYMBOL:
        case MySQLParser.FULL_SYMBOL:
        case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
        case MySQLParser.FILTER_SYMBOL:
        case MySQLParser.FIRST_SYMBOL:
        case MySQLParser.FIXED_SYMBOL:
        case MySQLParser.GENERAL_SYMBOL:
        case MySQLParser.GEOMETRY_SYMBOL:
        case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
        case MySQLParser.GET_FORMAT_SYMBOL:
        case MySQLParser.GRANTS_SYMBOL:
        case MySQLParser.HASH_SYMBOL:
        case MySQLParser.HOSTS_SYMBOL:
        case MySQLParser.HOUR_SYMBOL:
        case MySQLParser.IDENTIFIED_SYMBOL:
        case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
        case MySQLParser.INVOKER_SYMBOL:
        case MySQLParser.INDEXES_SYMBOL:
        case MySQLParser.INITIAL_SIZE_SYMBOL:
        case MySQLParser.INSTANCE_SYMBOL:
        case MySQLParser.IO_SYMBOL:
        case MySQLParser.IPC_SYMBOL:
        case MySQLParser.ISOLATION_SYMBOL:
        case MySQLParser.ISSUER_SYMBOL:
        case MySQLParser.INSERT_METHOD_SYMBOL:
        case MySQLParser.JSON_SYMBOL:
        case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
        case MySQLParser.LAST_SYMBOL:
        case MySQLParser.LEAVES_SYMBOL:
        case MySQLParser.LESS_SYMBOL:
        case MySQLParser.LEVEL_SYMBOL:
        case MySQLParser.LINESTRING_SYMBOL:
        case MySQLParser.LIST_SYMBOL:
        case MySQLParser.LOCKS_SYMBOL:
        case MySQLParser.LOGFILE_SYMBOL:
        case MySQLParser.LOGS_SYMBOL:
        case MySQLParser.MAX_ROWS_SYMBOL:
        case MySQLParser.MASTER_SYMBOL:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
        case MySQLParser.MASTER_HOST_SYMBOL:
        case MySQLParser.MASTER_PORT_SYMBOL:
        case MySQLParser.MASTER_LOG_FILE_SYMBOL:
        case MySQLParser.MASTER_LOG_POS_SYMBOL:
        case MySQLParser.MASTER_USER_SYMBOL:
        case MySQLParser.MASTER_PASSWORD_SYMBOL:
        case MySQLParser.MASTER_SERVER_ID_SYMBOL:
        case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
        case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
        case MySQLParser.MASTER_DELAY_SYMBOL:
        case MySQLParser.MASTER_SSL_SYMBOL:
        case MySQLParser.MASTER_SSL_CA_SYMBOL:
        case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
        case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
        case MySQLParser.MASTER_SSL_CERT_SYMBOL:
        case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
        case MySQLParser.MASTER_SSL_CRL_SYMBOL:
        case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
        case MySQLParser.MASTER_SSL_KEY_SYMBOL:
        case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
        case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
        case MySQLParser.MAX_SIZE_SYMBOL:
        case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
        case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
        case MySQLParser.MEDIUM_SYMBOL:
        case MySQLParser.MEMORY_SYMBOL:
        case MySQLParser.MERGE_SYMBOL:
        case MySQLParser.MESSAGE_TEXT_SYMBOL:
        case MySQLParser.MICROSECOND_SYMBOL:
        case MySQLParser.MIGRATE_SYMBOL:
        case MySQLParser.MINUTE_SYMBOL:
        case MySQLParser.MIN_ROWS_SYMBOL:
        case MySQLParser.MODIFY_SYMBOL:
        case MySQLParser.MODE_SYMBOL:
        case MySQLParser.MONTH_SYMBOL:
        case MySQLParser.MULTILINESTRING_SYMBOL:
        case MySQLParser.MULTIPOINT_SYMBOL:
        case MySQLParser.MULTIPOLYGON_SYMBOL:
        case MySQLParser.MUTEX_SYMBOL:
        case MySQLParser.MYSQL_ERRNO_SYMBOL:
        case MySQLParser.NAME_SYMBOL:
        case MySQLParser.NAMES_SYMBOL:
        case MySQLParser.NATIONAL_SYMBOL:
        case MySQLParser.NCHAR_SYMBOL:
        case MySQLParser.NDBCLUSTER_SYMBOL:
        case MySQLParser.NEVER_SYMBOL:
        case MySQLParser.NEXT_SYMBOL:
        case MySQLParser.NEW_SYMBOL:
        case MySQLParser.NO_WAIT_SYMBOL:
        case MySQLParser.NODEGROUP_SYMBOL:
        case MySQLParser.NUMBER_SYMBOL:
        case MySQLParser.NVARCHAR_SYMBOL:
        case MySQLParser.OFFSET_SYMBOL:
        case MySQLParser.ONE_SYMBOL:
        case MySQLParser.PACK_KEYS_SYMBOL:
        case MySQLParser.PAGE_SYMBOL:
        case MySQLParser.PARTIAL_SYMBOL:
        case MySQLParser.PARTITIONING_SYMBOL:
        case MySQLParser.PARTITIONS_SYMBOL:
        case MySQLParser.PASSWORD_SYMBOL:
        case MySQLParser.PHASE_SYMBOL:
        case MySQLParser.PLUGIN_DIR_SYMBOL:
        case MySQLParser.PLUGIN_SYMBOL:
        case MySQLParser.PLUGINS_SYMBOL:
        case MySQLParser.POINT_SYMBOL:
        case MySQLParser.POLYGON_SYMBOL:
        case MySQLParser.PRESERVE_SYMBOL:
        case MySQLParser.PREV_SYMBOL:
        case MySQLParser.PRIVILEGES_SYMBOL:
        case MySQLParser.PROCESSLIST_SYMBOL:
        case MySQLParser.PROFILE_SYMBOL:
        case MySQLParser.PROFILES_SYMBOL:
        case MySQLParser.QUARTER_SYMBOL:
        case MySQLParser.QUERY_SYMBOL:
        case MySQLParser.QUICK_SYMBOL:
        case MySQLParser.READ_ONLY_SYMBOL:
        case MySQLParser.REBUILD_SYMBOL:
        case MySQLParser.RECOVER_SYMBOL:
        case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
        case MySQLParser.REDUNDANT_SYMBOL:
        case MySQLParser.RELAY_SYMBOL:
        case MySQLParser.RELAYLOG_SYMBOL:
        case MySQLParser.RELAY_LOG_FILE_SYMBOL:
        case MySQLParser.RELAY_LOG_POS_SYMBOL:
        case MySQLParser.RELAY_THREAD_SYMBOL:
        case MySQLParser.REORGANIZE_SYMBOL:
        case MySQLParser.REPEATABLE_SYMBOL:
        case MySQLParser.REPLICATE_DO_DB_SYMBOL:
        case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
        case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
        case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
        case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
        case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
        case MySQLParser.RESUME_SYMBOL:
        case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
        case MySQLParser.RETURNS_SYMBOL:
        case MySQLParser.REVERSE_SYMBOL:
        case MySQLParser.ROLLUP_SYMBOL:
        case MySQLParser.ROTATE_SYMBOL:
        case MySQLParser.ROUTINE_SYMBOL:
        case MySQLParser.ROW_COUNT_SYMBOL:
        case MySQLParser.ROW_FORMAT_SYMBOL:
        case MySQLParser.RTREE_SYMBOL:
        case MySQLParser.SCHEDULE_SYMBOL:
        case MySQLParser.SCHEMA_NAME_SYMBOL:
        case MySQLParser.SECOND_SYMBOL:
        case MySQLParser.SERIAL_SYMBOL:
        case MySQLParser.SERIALIZABLE_SYMBOL:
        case MySQLParser.SIMPLE_SYMBOL:
        case MySQLParser.SHARE_SYMBOL:
        case MySQLParser.SLOW_SYMBOL:
        case MySQLParser.SNAPSHOT_SYMBOL:
        case MySQLParser.SOUNDS_SYMBOL:
        case MySQLParser.SOURCE_SYMBOL:
        case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
        case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
        case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
        case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
        case MySQLParser.SQL_NO_CACHE_SYMBOL:
        case MySQLParser.SQL_THREAD_SYMBOL:
        case MySQLParser.STACKED_SYMBOL:
        case MySQLParser.STARTS_SYMBOL:
        case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
        case MySQLParser.STATS_PERSISTENT_SYMBOL:
        case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
        case MySQLParser.STATUS_SYMBOL:
        case MySQLParser.STORAGE_SYMBOL:
        case MySQLParser.STRING_SYMBOL:
        case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
        case MySQLParser.SUBDATE_SYMBOL:
        case MySQLParser.SUBJECT_SYMBOL:
        case MySQLParser.SUBPARTITION_SYMBOL:
        case MySQLParser.SUBPARTITIONS_SYMBOL:
        case MySQLParser.SUSPEND_SYMBOL:
        case MySQLParser.SWAPS_SYMBOL:
        case MySQLParser.SWITCHES_SYMBOL:
        case MySQLParser.TABLE_NAME_SYMBOL:
        case MySQLParser.TABLES_SYMBOL:
        case MySQLParser.TABLE_CHECKSUM_SYMBOL:
        case MySQLParser.TABLESPACE_SYMBOL:
        case MySQLParser.TEMPORARY_SYMBOL:
        case MySQLParser.TEMPTABLE_SYMBOL:
        case MySQLParser.TEXT_SYMBOL:
        case MySQLParser.THAN_SYMBOL:
        case MySQLParser.TRANSACTION_SYMBOL:
        case MySQLParser.TRIGGERS_SYMBOL:
        case MySQLParser.TIMESTAMP_SYMBOL:
        case MySQLParser.TIMESTAMP_ADD_SYMBOL:
        case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
        case MySQLParser.TIME_SYMBOL:
        case MySQLParser.TYPES_SYMBOL:
        case MySQLParser.TYPE_SYMBOL:
        case MySQLParser.UNCOMMITTED_SYMBOL:
        case MySQLParser.UNDEFINED_SYMBOL:
        case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
        case MySQLParser.UNDOFILE_SYMBOL:
        case MySQLParser.UNKNOWN_SYMBOL:
        case MySQLParser.UNTIL_SYMBOL:
        case MySQLParser.USER_RESOURCES_SYMBOL:
        case MySQLParser.USER_SYMBOL:
        case MySQLParser.USE_FRM_SYMBOL:
        case MySQLParser.VARIABLES_SYMBOL:
        case MySQLParser.VIEW_SYMBOL:
        case MySQLParser.VALUE_SYMBOL:
        case MySQLParser.WARNINGS_SYMBOL:
        case MySQLParser.WAIT_SYMBOL:
        case MySQLParser.WEEK_SYMBOL:
        case MySQLParser.WORK_SYMBOL:
        case MySQLParser.WEIGHT_STRING_SYMBOL:
        case MySQLParser.X509_SYMBOL:
        case MySQLParser.XID_SYMBOL:
        case MySQLParser.XML_SYMBOL:
        case MySQLParser.YEAR_SYMBOL:
        case MySQLParser.EXCHANGE_SYMBOL:
        case MySQLParser.EXPIRE_SYMBOL:
        case MySQLParser.ONLY_SYMBOL:
        case MySQLParser.VALIDATION_SYMBOL:
        case MySQLParser.WITHOUT_SYMBOL:
        case MySQLParser.ROLE_SYMBOL:
        case MySQLParser.ADMIN_SYMBOL:
        case MySQLParser.INVISIBLE_SYMBOL:
        case MySQLParser.VISIBLE_SYMBOL:
        case MySQLParser.COMPONENT_SYMBOL:
        case MySQLParser.SKIP_SYMBOL:
        case MySQLParser.LOCKED_SYMBOL:
        case MySQLParser.NOWAIT_SYMBOL:
        case MySQLParser.HISTOGRAM_SYMBOL:
        case MySQLParser.BUCKETS_SYMBOL:
        case MySQLParser.EXCLUDE_SYMBOL:
        case MySQLParser.FOLLOWING_SYMBOL:
        case MySQLParser.NULLS_SYMBOL:
        case MySQLParser.OTHERS_SYMBOL:
        case MySQLParser.PRECEDING_SYMBOL:
        case MySQLParser.RESPECT_SYMBOL:
        case MySQLParser.TIES_SYMBOL:
        case MySQLParser.UNBOUNDED_SYMBOL:
        case MySQLParser.NESTED_SYMBOL:
        case MySQLParser.ORDINALITY_SYMBOL:
        case MySQLParser.PATH_SYMBOL:
        case MySQLParser.HISTORY_SYMBOL:
        case MySQLParser.REUSE_SYMBOL:
        case MySQLParser.SRID_SYMBOL:
        case MySQLParser.THREAD_PRIORITY_SYMBOL:
        case MySQLParser.VCPU_SYMBOL:
        case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
        case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
        case MySQLParser.DEFINITION_SYMBOL:
        case MySQLParser.DESCRIPTION_SYMBOL:
        case MySQLParser.ORGANIZATION_SYMBOL:
        case MySQLParser.REFERENCE_SYMBOL:
        case MySQLParser.OPTIONAL_SYMBOL:
        case MySQLParser.SECONDARY_SYMBOL:
        case MySQLParser.SECONDARY_ENGINE_SYMBOL:
        case MySQLParser.SECONDARY_LOAD_SYMBOL:
        case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
        case MySQLParser.ACTIVE_SYMBOL:
        case MySQLParser.INACTIVE_SYMBOL:
        case MySQLParser.RETAIN_SYMBOL:
        case MySQLParser.OLD_SYMBOL:
        case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
        case MySQLParser.ENFORCED_SYMBOL:
        case MySQLParser.OJ_SYMBOL:
        case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
        case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
        case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
        case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 8331;
            this.identifierKeywordsUnambiguous();
            break;
        case MySQLParser.EXECUTE_SYMBOL:
        case MySQLParser.SHUTDOWN_SYMBOL:
        case MySQLParser.RESTART_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 8332;
            this.identifierKeywordsAmbiguous1RolesAndLabels();
            break;
        case MySQLParser.ASCII_SYMBOL:
        case MySQLParser.BEGIN_SYMBOL:
        case MySQLParser.BYTE_SYMBOL:
        case MySQLParser.CACHE_SYMBOL:
        case MySQLParser.CHARSET_SYMBOL:
        case MySQLParser.CHECKSUM_SYMBOL:
        case MySQLParser.COMMENT_SYMBOL:
        case MySQLParser.COMMIT_SYMBOL:
        case MySQLParser.CONTAINS_SYMBOL:
        case MySQLParser.DEALLOCATE_SYMBOL:
        case MySQLParser.DO_SYMBOL:
        case MySQLParser.END_SYMBOL:
        case MySQLParser.FLUSH_SYMBOL:
        case MySQLParser.FOLLOWS_SYMBOL:
        case MySQLParser.HANDLER_SYMBOL:
        case MySQLParser.HELP_SYMBOL:
        case MySQLParser.INSTALL_SYMBOL:
        case MySQLParser.LANGUAGE_SYMBOL:
        case MySQLParser.NO_SYMBOL:
        case MySQLParser.PRECEDES_SYMBOL:
        case MySQLParser.PREPARE_SYMBOL:
        case MySQLParser.REPAIR_SYMBOL:
        case MySQLParser.RESET_SYMBOL:
        case MySQLParser.ROLLBACK_SYMBOL:
        case MySQLParser.SAVEPOINT_SYMBOL:
        case MySQLParser.SIGNED_SYMBOL:
        case MySQLParser.SLAVE_SYMBOL:
        case MySQLParser.START_SYMBOL:
        case MySQLParser.STOP_SYMBOL:
        case MySQLParser.TRUNCATE_SYMBOL:
        case MySQLParser.UNICODE_SYMBOL:
        case MySQLParser.UNINSTALL_SYMBOL:
        case MySQLParser.XA_SYMBOL:
        case MySQLParser.IMPORT_SYMBOL:
        case MySQLParser.CLONE_SYMBOL:
            this.enterOuterAlt(localctx, 3);
            this.state = 8333;
            this.identifierKeywordsAmbiguous2Labels();
            break;
        case MySQLParser.EVENT_SYMBOL:
        case MySQLParser.FILE_SYMBOL:
        case MySQLParser.NONE_SYMBOL:
        case MySQLParser.PROCESS_SYMBOL:
        case MySQLParser.PROXY_SYMBOL:
        case MySQLParser.RELOAD_SYMBOL:
        case MySQLParser.REPLICATION_SYMBOL:
        case MySQLParser.SUPER_SYMBOL:
        case MySQLParser.RESOURCE_SYMBOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 8334;
            this.identifierKeywordsAmbiguous3Roles();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierKeywordsAmbiguous4SystemVariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    return this;
}

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.constructor = IdentifierKeywordsAmbiguous4SystemVariablesContext;

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.GLOBAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.PERSIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.PERSIST_ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.SESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
	}
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
	}
};

IdentifierKeywordsAmbiguous4SystemVariablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIdentifierKeywordsAmbiguous4SystemVariables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext = IdentifierKeywordsAmbiguous4SystemVariablesContext;

MySQLParser.prototype.identifierKeywordsAmbiguous4SystemVariables = function() {

    var localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1204, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8337;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.GLOBAL_SYMBOL || _la===MySQLParser.LOCAL_SYMBOL || _la===MySQLParser.SESSION_SYMBOL || _la===MySQLParser.PERSIST_SYMBOL || _la===MySQLParser.PERSIST_ONLY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleOrIdentifierKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleOrIdentifierKeyword;
    return this;
}

RoleOrIdentifierKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleOrIdentifierKeywordContext.prototype.constructor = RoleOrIdentifierKeywordContext;

RoleOrIdentifierKeywordContext.prototype.ACCOUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.ASCII_SYMBOL = function() {
    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.ALWAYS_SYMBOL = function() {
    return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.BACKUP_SYMBOL = function() {
    return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.BEGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.BYTE_SYMBOL = function() {
    return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.CHARSET_SYMBOL = function() {
    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.CLONE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.CLOSE_SYMBOL = function() {
    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.COMMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.COMMIT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.CONTAINS_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.DEALLOCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.DO_SYMBOL = function() {
    return this.getToken(MySQLParser.DO_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.END_SYMBOL = function() {
    return this.getToken(MySQLParser.END_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.FLUSH_SYMBOL = function() {
    return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.FOLLOWS_SYMBOL = function() {
    return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.GROUP_REPLICATION_SYMBOL = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.HANDLER_SYMBOL = function() {
    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.HELP_SYMBOL = function() {
    return this.getToken(MySQLParser.HELP_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.HOST_SYMBOL = function() {
    return this.getToken(MySQLParser.HOST_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.INSTALL_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.INVISIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.LANGUAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.NO_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.OPEN_SYMBOL = function() {
    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.OPTIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.OWNER_SYMBOL = function() {
    return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.PARSER_SYMBOL = function() {
    return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.PARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.PORT_SYMBOL = function() {
    return this.getToken(MySQLParser.PORT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.PRECEDES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.PREPARE_SYMBOL = function() {
    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.REMOVE_SYMBOL = function() {
    return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.REPAIR_SYMBOL = function() {
    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.RESET_SYMBOL = function() {
    return this.getToken(MySQLParser.RESET_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.RESTORE_SYMBOL = function() {
    return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.ROLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.ROLLBACK_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SAVEPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SECONDARY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SECONDARY_ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SECONDARY_LOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SECONDARY_UNLOAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SECURITY_SYMBOL = function() {
    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SERVER_SYMBOL = function() {
    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SIGNED_SYMBOL = function() {
    return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SOCKET_SYMBOL = function() {
    return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SLAVE_SYMBOL = function() {
    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SONAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.START_SYMBOL = function() {
    return this.getToken(MySQLParser.START_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.STOP_SYMBOL = function() {
    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.TRUNCATE_SYMBOL = function() {
    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.UNICODE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.UNINSTALL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.UPGRADE_SYMBOL = function() {
    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.VISIBLE_SYMBOL = function() {
    return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.WRAPPER_SYMBOL = function() {
    return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.XA_SYMBOL = function() {
    return this.getToken(MySQLParser.XA_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.SHUTDOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.IMPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
};

RoleOrIdentifierKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleOrIdentifierKeyword(this);
	}
};

RoleOrIdentifierKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleOrIdentifierKeyword(this);
	}
};

RoleOrIdentifierKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleOrIdentifierKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleOrIdentifierKeywordContext = RoleOrIdentifierKeywordContext;

MySQLParser.prototype.roleOrIdentifierKeyword = function() {

    var localctx = new RoleOrIdentifierKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1206, MySQLParser.RULE_roleOrIdentifierKeyword);
    var _la = 0; // Token type
    try {
        this.state = 8344;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8339;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.ACCOUNT_SYMBOL) | (1 << MySQLParser.ASCII_SYMBOL) | (1 << MySQLParser.ALWAYS_SYMBOL) | (1 << MySQLParser.BACKUP_SYMBOL) | (1 << MySQLParser.BEGIN_SYMBOL) | (1 << MySQLParser.BYTE_SYMBOL) | (1 << MySQLParser.CACHE_SYMBOL) | (1 << MySQLParser.CHARSET_SYMBOL) | (1 << MySQLParser.CHECKSUM_SYMBOL) | (1 << MySQLParser.CLOSE_SYMBOL) | (1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.COMMIT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.DEALLOCATE_SYMBOL) | (1 << MySQLParser.DO_SYMBOL) | (1 << MySQLParser.END_SYMBOL) | (1 << MySQLParser.FLUSH_SYMBOL) | (1 << MySQLParser.FOLLOWS_SYMBOL) | (1 << MySQLParser.FORMAT_SYMBOL) | (1 << MySQLParser.GROUP_REPLICATION_SYMBOL) | (1 << MySQLParser.HANDLER_SYMBOL) | (1 << MySQLParser.HELP_SYMBOL) | (1 << MySQLParser.HOST_SYMBOL) | (1 << MySQLParser.INSTALL_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL) | (1 << MySQLParser.OPEN_SYMBOL) | (1 << MySQLParser.OPTIONS_SYMBOL) | (1 << MySQLParser.OWNER_SYMBOL) | (1 << MySQLParser.PARSER_SYMBOL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.PARTITION_SYMBOL - 32)) | (1 << (MySQLParser.PORT_SYMBOL - 32)) | (1 << (MySQLParser.PRECEDES_SYMBOL - 32)) | (1 << (MySQLParser.PREPARE_SYMBOL - 32)) | (1 << (MySQLParser.REMOVE_SYMBOL - 32)) | (1 << (MySQLParser.REPAIR_SYMBOL - 32)) | (1 << (MySQLParser.RESET_SYMBOL - 32)) | (1 << (MySQLParser.RESTORE_SYMBOL - 32)) | (1 << (MySQLParser.ROLLBACK_SYMBOL - 32)) | (1 << (MySQLParser.SAVEPOINT_SYMBOL - 32)) | (1 << (MySQLParser.SECURITY_SYMBOL - 32)) | (1 << (MySQLParser.SERVER_SYMBOL - 32)) | (1 << (MySQLParser.SIGNED_SYMBOL - 32)) | (1 << (MySQLParser.SLAVE_SYMBOL - 32)) | (1 << (MySQLParser.SOCKET_SYMBOL - 32)) | (1 << (MySQLParser.SONAME_SYMBOL - 32)) | (1 << (MySQLParser.START_SYMBOL - 32)) | (1 << (MySQLParser.STOP_SYMBOL - 32)) | (1 << (MySQLParser.TRUNCATE_SYMBOL - 32)) | (1 << (MySQLParser.UNICODE_SYMBOL - 32)) | (1 << (MySQLParser.UNINSTALL_SYMBOL - 32)) | (1 << (MySQLParser.UPGRADE_SYMBOL - 32)) | (1 << (MySQLParser.WRAPPER_SYMBOL - 32)) | (1 << (MySQLParser.XA_SYMBOL - 32)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.ROLE_SYMBOL - 689)) | (1 << (MySQLParser.INVISIBLE_SYMBOL - 689)) | (1 << (MySQLParser.VISIBLE_SYMBOL - 689)) | (1 << (MySQLParser.CLONE_SYMBOL - 689)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySQLParser.SECONDARY_SYMBOL - 750)) | (1 << (MySQLParser.SECONDARY_ENGINE_SYMBOL - 750)) | (1 << (MySQLParser.SECONDARY_LOAD_SYMBOL - 750)) | (1 << (MySQLParser.SECONDARY_UNLOAD_SYMBOL - 750)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8340;
            if (!( serverVersion >= 50709)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
            }
            this.state = 8341;
            this.match(MySQLParser.SHUTDOWN_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8342;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 8343;
            this.match(MySQLParser.IMPORT_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoleOrLabelKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_roleOrLabelKeyword;
    return this;
}

RoleOrLabelKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleOrLabelKeywordContext.prototype.constructor = RoleOrLabelKeywordContext;

RoleOrLabelKeywordContext.prototype.ACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ACTIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ADDDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AFTER_SYMBOL = function() {
    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AGAINST_SYMBOL = function() {
    return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AGGREGATE_SYMBOL = function() {
    return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ALGORITHM_SYMBOL = function() {
    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ANALYSE_SYMBOL = function() {
    return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ANY_SYMBOL = function() {
    return this.getToken(MySQLParser.ANY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AT_SYMBOL = function() {
    return this.getToken(MySQLParser.AT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AUTHORS_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTHORS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AUTO_INCREMENT_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AUTOEXTEND_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AVG_ROW_LENGTH_SYMBOL = function() {
    return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.AVG_SYMBOL = function() {
    return this.getToken(MySQLParser.AVG_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BINLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BIT_SYMBOL = function() {
    return this.getToken(MySQLParser.BIT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BLOCK_SYMBOL = function() {
    return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BOOL_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BOOLEAN_SYMBOL = function() {
    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BTREE_SYMBOL = function() {
    return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.BUCKETS_SYMBOL = function() {
    return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CASCADED_SYMBOL = function() {
    return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CATALOG_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CHAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CHANGED_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CHANNEL_SYMBOL = function() {
    return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CIPHER_SYMBOL = function() {
    return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CLIENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CLASS_ORIGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COALESCE_SYMBOL = function() {
    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CODE_SYMBOL = function() {
    return this.getToken(MySQLParser.CODE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COLLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COLUMN_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COLUMN_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COLUMNS_SYMBOL = function() {
    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COMMITTED_SYMBOL = function() {
    return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COMPACT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COMPLETION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COMPONENT_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COMPRESSED_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.COMPRESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONCURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONNECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONSISTENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONSTRAINT_CATALOG_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONSTRAINT_SCHEMA_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONSTRAINT_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONTEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CONTRIBUTORS_SYMBOL = function() {
    return this.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CPU_SYMBOL = function() {
    return this.getToken(MySQLParser.CPU_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CURRENT_SYMBOL = function() {
    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CURSOR_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DATA_SYMBOL = function() {
    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DATAFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DATETIME_SYMBOL = function() {
    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DAY_SYMBOL = function() {
    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DEFAULT_AUTH_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DEFINER_SYMBOL = function() {
    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DELAY_KEY_WRITE_SYMBOL = function() {
    return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DES_KEY_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DESCRIPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DIAGNOSTICS_SYMBOL = function() {
    return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DIRECTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DISABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DISCARD_SYMBOL = function() {
    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DISK_SYMBOL = function() {
    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DUMPFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DUPLICATE_SYMBOL = function() {
    return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.DYNAMIC_SYMBOL = function() {
    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ENCRYPTION_SYMBOL = function() {
    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ENDS_SYMBOL = function() {
    return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ENUM_SYMBOL = function() {
    return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ENGINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ENGINES_SYMBOL = function() {
    return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ERROR_SYMBOL = function() {
    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ERRORS_SYMBOL = function() {
    return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ESCAPE_SYMBOL = function() {
    return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EVENTS_SYMBOL = function() {
    return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EVERY_SYMBOL = function() {
    return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXCLUDE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXPANSION_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXTENDED_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXTENT_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FAULTS_SYMBOL = function() {
    return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FAST_SYMBOL = function() {
    return this.getToken(MySQLParser.FAST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FOLLOWING_SYMBOL = function() {
    return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FOUND_SYMBOL = function() {
    return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ENABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FULL_SYMBOL = function() {
    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FILE_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FILTER_SYMBOL = function() {
    return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FIRST_SYMBOL = function() {
    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FIXED_SYMBOL = function() {
    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.GENERAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.GEOMETRY_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.GEOMETRYCOLLECTION_SYMBOL = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.GET_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.GRANTS_SYMBOL = function() {
    return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.GLOBAL_SYMBOL = function() {
    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.HASH_SYMBOL = function() {
    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.HISTOGRAM_SYMBOL = function() {
    return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.HISTORY_SYMBOL = function() {
    return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.HOSTS_SYMBOL = function() {
    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.IDENTIFIED_SYMBOL = function() {
    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.IGNORE_SERVER_IDS_SYMBOL = function() {
    return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.INVOKER_SYMBOL = function() {
    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.INDEXES_SYMBOL = function() {
    return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.INITIAL_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.INSTANCE_SYMBOL = function() {
    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.INACTIVE_SYMBOL = function() {
    return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.IO_SYMBOL = function() {
    return this.getToken(MySQLParser.IO_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.IPC_SYMBOL = function() {
    return this.getToken(MySQLParser.IPC_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ISOLATION_SYMBOL = function() {
    return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ISSUER_SYMBOL = function() {
    return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.INSERT_METHOD_SYMBOL = function() {
    return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.JSON_SYMBOL = function() {
    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.KEY_BLOCK_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LAST_SYMBOL = function() {
    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LEAVES_SYMBOL = function() {
    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LEVEL_SYMBOL = function() {
    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LIST_SYMBOL = function() {
    return this.getToken(MySQLParser.LIST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LOCAL_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LOCKED_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LOCKS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LOGFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.LOGS_SYMBOL = function() {
    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_HEARTBEAT_PERIOD_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_HOST_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_PORT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_LOG_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_LOG_POS_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_USER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_PUBLIC_KEY_PATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SERVER_ID_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_CONNECT_RETRY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_RETRY_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_DELAY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_CA_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_CAPATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_TLS_VERSION_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_CERT_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_CIPHER_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_CRL_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_CRLPATH_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_SSL_KEY_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MASTER_AUTO_POSITION_SYMBOL = function() {
    return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_CONNECTIONS_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_QUERIES_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_STATEMENT_TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_UPDATES_PER_HOUR_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MAX_USER_CONNECTIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MEDIUM_SYMBOL = function() {
    return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MEMORY_SYMBOL = function() {
    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MERGE_SYMBOL = function() {
    return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MESSAGE_TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MICROSECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MIGRATE_SYMBOL = function() {
    return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MINUTE_SYMBOL = function() {
    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MIN_ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MODIFY_SYMBOL = function() {
    return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MODE_SYMBOL = function() {
    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MONTH_SYMBOL = function() {
    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MULTILINESTRING_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MULTIPOINT_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MULTIPOLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MUTEX_SYMBOL = function() {
    return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.MYSQL_ERRNO_SYMBOL = function() {
    return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NAMES_SYMBOL = function() {
    return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NATIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NDBCLUSTER_SYMBOL = function() {
    return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NESTED_SYMBOL = function() {
    return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NEVER_SYMBOL = function() {
    return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NEW_SYMBOL = function() {
    return this.getToken(MySQLParser.NEW_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NO_WAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NODEGROUP_SYMBOL = function() {
    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NULLS_SYMBOL = function() {
    return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NOWAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NUMBER_SYMBOL = function() {
    return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.NVARCHAR_SYMBOL = function() {
    return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.OFFSET_SYMBOL = function() {
    return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.OLD_SYMBOL = function() {
    return this.getToken(MySQLParser.OLD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.OLD_PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ONE_SYMBOL = function() {
    return this.getToken(MySQLParser.ONE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.OPTIONAL_SYMBOL = function() {
    return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ORDINALITY_SYMBOL = function() {
    return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ORGANIZATION_SYMBOL = function() {
    return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.OTHERS_SYMBOL = function() {
    return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PACK_KEYS_SYMBOL = function() {
    return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PARTIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PARTITIONING_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PASSWORD_SYMBOL = function() {
    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PATH_SYMBOL = function() {
    return this.getToken(MySQLParser.PATH_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PHASE_SYMBOL = function() {
    return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PLUGIN_DIR_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PLUGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PLUGINS_SYMBOL = function() {
    return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.POINT_SYMBOL = function() {
    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.POLYGON_SYMBOL = function() {
    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PRECEDING_SYMBOL = function() {
    return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PRESERVE_SYMBOL = function() {
    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PREV_SYMBOL = function() {
    return this.getToken(MySQLParser.PREV_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.THREAD_PRIORITY_SYMBOL = function() {
    return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PRIVILEGES_SYMBOL = function() {
    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PROCESSLIST_SYMBOL = function() {
    return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PROFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.PROFILES_SYMBOL = function() {
    return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.QUARTER_SYMBOL = function() {
    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.QUERY_SYMBOL = function() {
    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.QUICK_SYMBOL = function() {
    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.READ_ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REBUILD_SYMBOL = function() {
    return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RECOVER_SYMBOL = function() {
    return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REDO_BUFFER_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REDOFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.REDOFILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REDUNDANT_SYMBOL = function() {
    return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RELAY_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RELAYLOG_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RELAY_LOG_FILE_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RELAY_LOG_POS_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RELAY_THREAD_SYMBOL = function() {
    return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REMOTE_SYMBOL = function() {
    return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REORGANIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPEATABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_DO_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_IGNORE_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_DO_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_IGNORE_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_WILD_DO_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REPLICATE_REWRITE_DB_SYMBOL = function() {
    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.USER_RESOURCES_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RESPECT_SYMBOL = function() {
    return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RESUME_SYMBOL = function() {
    return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RETAIN_SYMBOL = function() {
    return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RETURNED_SQLSTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RETURNS_SYMBOL = function() {
    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REUSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.REVERSE_SYMBOL = function() {
    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROLLUP_SYMBOL = function() {
    return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROTATE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROUTINE_SYMBOL = function() {
    return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROW_COUNT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROW_FORMAT_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.RTREE_SYMBOL = function() {
    return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SCHEDULE_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SCHEMA_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SECOND_SYMBOL = function() {
    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SERIAL_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SERIALIZABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SESSION_SYMBOL = function() {
    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SHARE_SYMBOL = function() {
    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SIMPLE_SYMBOL = function() {
    return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SKIP_SYMBOL = function() {
    return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SLOW_SYMBOL = function() {
    return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SNAPSHOT_SYMBOL = function() {
    return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SOUNDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SOURCE_SYMBOL = function() {
    return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_AFTER_GTIDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_AFTER_MTS_GAPS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_BEFORE_GTIDS_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_BUFFER_RESULT_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_NO_CACHE_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SQL_THREAD_SYMBOL = function() {
    return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SRID_SYMBOL = function() {
    return this.getToken(MySQLParser.SRID_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STACKED_SYMBOL = function() {
    return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STARTS_SYMBOL = function() {
    return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STATS_AUTO_RECALC_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STATS_PERSISTENT_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STATS_SAMPLE_PAGES_SYMBOL = function() {
    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STATUS_SYMBOL = function() {
    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STORAGE_SYMBOL = function() {
    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.STRING_SYMBOL = function() {
    return this.getToken(MySQLParser.STRING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUBCLASS_ORIGIN_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUBDATE_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUBJECT_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUBPARTITION_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUBPARTITIONS_SYMBOL = function() {
    return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUPER_SYMBOL = function() {
    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SUSPEND_SYMBOL = function() {
    return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SWAPS_SYMBOL = function() {
    return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SWITCHES_SYMBOL = function() {
    return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TABLE_NAME_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TABLE_CHECKSUM_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TABLESPACE_SYMBOL = function() {
    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TEMPORARY_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TEMPTABLE_SYMBOL = function() {
    return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TEXT_SYMBOL = function() {
    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.THAN_SYMBOL = function() {
    return this.getToken(MySQLParser.THAN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TIES_SYMBOL = function() {
    return this.getToken(MySQLParser.TIES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TRANSACTION_SYMBOL = function() {
    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TRIGGERS_SYMBOL = function() {
    return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TIMESTAMP_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TIMESTAMP_ADD_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TIMESTAMP_DIFF_SYMBOL = function() {
    return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TIME_SYMBOL = function() {
    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TYPES_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.TYPE_SYMBOL = function() {
    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UDF_RETURNS_SYMBOL = function() {
    return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNBOUNDED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNCOMMITTED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNDEFINED_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNDO_BUFFER_SIZE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNDOFILE_SYMBOL = function() {
    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNKNOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.UNTIL_SYMBOL = function() {
    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.USER_SYMBOL = function() {
    return this.getToken(MySQLParser.USER_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.USE_FRM_SYMBOL = function() {
    return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.VARIABLES_SYMBOL = function() {
    return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.VCPU_SYMBOL = function() {
    return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.VIEW_SYMBOL = function() {
    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.VALUE_SYMBOL = function() {
    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.WARNINGS_SYMBOL = function() {
    return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.WAIT_SYMBOL = function() {
    return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.WEEK_SYMBOL = function() {
    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.WORK_SYMBOL = function() {
    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.WEIGHT_STRING_SYMBOL = function() {
    return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.X509_SYMBOL = function() {
    return this.getToken(MySQLParser.X509_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.XID_SYMBOL = function() {
    return this.getToken(MySQLParser.XID_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.XML_SYMBOL = function() {
    return this.getToken(MySQLParser.XML_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.YEAR_SYMBOL = function() {
    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.SHUTDOWN_SYMBOL = function() {
    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.CUBE_SYMBOL = function() {
    return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.IMPORT_SYMBOL = function() {
    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.FUNCTION_SYMBOL = function() {
    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROWS_SYMBOL = function() {
    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ROW_SYMBOL = function() {
    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXCHANGE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.EXPIRE_SYMBOL = function() {
    return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ONLY_SYMBOL = function() {
    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.VALIDATION_SYMBOL = function() {
    return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.WITHOUT_SYMBOL = function() {
    return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.ADMIN_SYMBOL = function() {
    return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
};

RoleOrLabelKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoleOrLabelKeyword(this);
	}
};

RoleOrLabelKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoleOrLabelKeyword(this);
	}
};

RoleOrLabelKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoleOrLabelKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoleOrLabelKeywordContext = RoleOrLabelKeywordContext;

MySQLParser.prototype.roleOrLabelKeyword = function() {

    var localctx = new RoleOrLabelKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 1208, MySQLParser.RULE_roleOrLabelKeyword);
    var _la = 0; // Token type
    try {
        this.state = 8355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8346;
            _la = this._input.LA(1);
            if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (MySQLParser.ACTION_SYMBOL - 57)) | (1 << (MySQLParser.ADDDATE_SYMBOL - 57)) | (1 << (MySQLParser.AFTER_SYMBOL - 57)) | (1 << (MySQLParser.AGAINST_SYMBOL - 57)) | (1 << (MySQLParser.AGGREGATE_SYMBOL - 57)) | (1 << (MySQLParser.ALGORITHM_SYMBOL - 57)) | (1 << (MySQLParser.ANY_SYMBOL - 57)) | (1 << (MySQLParser.AT_SYMBOL - 57)) | (1 << (MySQLParser.AUTHORS_SYMBOL - 57)) | (1 << (MySQLParser.AUTO_INCREMENT_SYMBOL - 57)) | (1 << (MySQLParser.AUTOEXTEND_SIZE_SYMBOL - 57)) | (1 << (MySQLParser.AVG_ROW_LENGTH_SYMBOL - 57)) | (1 << (MySQLParser.AVG_SYMBOL - 57)) | (1 << (MySQLParser.BINLOG_SYMBOL - 57)) | (1 << (MySQLParser.BIT_SYMBOL - 57)) | (1 << (MySQLParser.BLOCK_SYMBOL - 57)) | (1 << (MySQLParser.BOOL_SYMBOL - 57)) | (1 << (MySQLParser.BOOLEAN_SYMBOL - 57)) | (1 << (MySQLParser.BTREE_SYMBOL - 57)) | (1 << (MySQLParser.CASCADED_SYMBOL - 57)) | (1 << (MySQLParser.CATALOG_NAME_SYMBOL - 57)) | (1 << (MySQLParser.CHAIN_SYMBOL - 57)) | (1 << (MySQLParser.CHANGED_SYMBOL - 57)) | (1 << (MySQLParser.CHANNEL_SYMBOL - 57)) | (1 << (MySQLParser.CIPHER_SYMBOL - 57)) | (1 << (MySQLParser.CLIENT_SYMBOL - 57)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 57)) | (1 << (MySQLParser.COALESCE_SYMBOL - 57)) | (1 << (MySQLParser.CODE_SYMBOL - 57)) | (1 << (MySQLParser.COLLATION_SYMBOL - 57)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (MySQLParser.COLUMN_FORMAT_SYMBOL - 89)) | (1 << (MySQLParser.COLUMNS_SYMBOL - 89)) | (1 << (MySQLParser.COMMITTED_SYMBOL - 89)) | (1 << (MySQLParser.COMPACT_SYMBOL - 89)) | (1 << (MySQLParser.COMPLETION_SYMBOL - 89)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 89)) | (1 << (MySQLParser.COMPRESSION_SYMBOL - 89)) | (1 << (MySQLParser.ENCRYPTION_SYMBOL - 89)) | (1 << (MySQLParser.CONCURRENT_SYMBOL - 89)) | (1 << (MySQLParser.CONNECTION_SYMBOL - 89)) | (1 << (MySQLParser.CONSISTENT_SYMBOL - 89)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 89)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 89)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 89)) | (1 << (MySQLParser.CONTEXT_SYMBOL - 89)) | (1 << (MySQLParser.CONTRIBUTORS_SYMBOL - 89)) | (1 << (MySQLParser.CPU_SYMBOL - 89)) | (1 << (MySQLParser.CURRENT_SYMBOL - 89)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 89)) | (1 << (MySQLParser.DATA_SYMBOL - 89)) | (1 << (MySQLParser.DATAFILE_SYMBOL - 89)) | (1 << (MySQLParser.DATETIME_SYMBOL - 89)) | (1 << (MySQLParser.DATE_SYMBOL - 89)) | (1 << (MySQLParser.DAY_SYMBOL - 89)) | (1 << (MySQLParser.DEFAULT_AUTH_SYMBOL - 89)) | (1 << (MySQLParser.DEFINER_SYMBOL - 89)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYMBOL - 89)) | (1 << (MySQLParser.DES_KEY_FILE_SYMBOL - 89)) | (1 << (MySQLParser.DIAGNOSTICS_SYMBOL - 89)) | (1 << (MySQLParser.DIRECTORY_SYMBOL - 89)) | (1 << (MySQLParser.DISABLE_SYMBOL - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (MySQLParser.DISCARD_SYMBOL - 121)) | (1 << (MySQLParser.DISK_SYMBOL - 121)) | (1 << (MySQLParser.DUMPFILE_SYMBOL - 121)) | (1 << (MySQLParser.DUPLICATE_SYMBOL - 121)) | (1 << (MySQLParser.DYNAMIC_SYMBOL - 121)) | (1 << (MySQLParser.ENDS_SYMBOL - 121)) | (1 << (MySQLParser.ENUM_SYMBOL - 121)) | (1 << (MySQLParser.ENGINE_SYMBOL - 121)) | (1 << (MySQLParser.ENGINES_SYMBOL - 121)) | (1 << (MySQLParser.ERROR_SYMBOL - 121)) | (1 << (MySQLParser.ERRORS_SYMBOL - 121)) | (1 << (MySQLParser.ESCAPE_SYMBOL - 121)) | (1 << (MySQLParser.EVENTS_SYMBOL - 121)) | (1 << (MySQLParser.EVERY_SYMBOL - 121)) | (1 << (MySQLParser.EXPANSION_SYMBOL - 121)) | (1 << (MySQLParser.EXPORT_SYMBOL - 121)) | (1 << (MySQLParser.EXTENDED_SYMBOL - 121)) | (1 << (MySQLParser.EXTENT_SIZE_SYMBOL - 121)) | (1 << (MySQLParser.FAULTS_SYMBOL - 121)) | (1 << (MySQLParser.FAST_SYMBOL - 121)) | (1 << (MySQLParser.FOUND_SYMBOL - 121)) | (1 << (MySQLParser.ENABLE_SYMBOL - 121)) | (1 << (MySQLParser.FULL_SYMBOL - 121)) | (1 << (MySQLParser.FILE_BLOCK_SIZE_SYMBOL - 121)) | (1 << (MySQLParser.FILTER_SYMBOL - 121)) | (1 << (MySQLParser.FIRST_SYMBOL - 121)) | (1 << (MySQLParser.FIXED_SYMBOL - 121)) | (1 << (MySQLParser.GENERAL_SYMBOL - 121)) | (1 << (MySQLParser.GEOMETRY_SYMBOL - 121)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 121)))) !== 0) || ((((_la - 153)) & ~0x1f) == 0 && ((1 << (_la - 153)) & ((1 << (MySQLParser.GET_FORMAT_SYMBOL - 153)) | (1 << (MySQLParser.GRANTS_SYMBOL - 153)) | (1 << (MySQLParser.GLOBAL_SYMBOL - 153)) | (1 << (MySQLParser.HASH_SYMBOL - 153)) | (1 << (MySQLParser.HOSTS_SYMBOL - 153)) | (1 << (MySQLParser.HOUR_SYMBOL - 153)) | (1 << (MySQLParser.IDENTIFIED_SYMBOL - 153)) | (1 << (MySQLParser.IGNORE_SERVER_IDS_SYMBOL - 153)) | (1 << (MySQLParser.INVOKER_SYMBOL - 153)) | (1 << (MySQLParser.INDEXES_SYMBOL - 153)) | (1 << (MySQLParser.INITIAL_SIZE_SYMBOL - 153)) | (1 << (MySQLParser.INSTANCE_SYMBOL - 153)) | (1 << (MySQLParser.IO_SYMBOL - 153)) | (1 << (MySQLParser.IPC_SYMBOL - 153)) | (1 << (MySQLParser.ISOLATION_SYMBOL - 153)) | (1 << (MySQLParser.ISSUER_SYMBOL - 153)) | (1 << (MySQLParser.INSERT_METHOD_SYMBOL - 153)) | (1 << (MySQLParser.JSON_SYMBOL - 153)) | (1 << (MySQLParser.KEY_BLOCK_SIZE_SYMBOL - 153)) | (1 << (MySQLParser.LAST_SYMBOL - 153)) | (1 << (MySQLParser.LEAVES_SYMBOL - 153)) | (1 << (MySQLParser.LESS_SYMBOL - 153)) | (1 << (MySQLParser.LEVEL_SYMBOL - 153)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 153)) | (1 << (MySQLParser.LIST_SYMBOL - 153)) | (1 << (MySQLParser.LOCAL_SYMBOL - 153)) | (1 << (MySQLParser.LOCKS_SYMBOL - 153)) | (1 << (MySQLParser.LOGFILE_SYMBOL - 153)) | (1 << (MySQLParser.LOGS_SYMBOL - 153)) | (1 << (MySQLParser.MAX_ROWS_SYMBOL - 153)))) !== 0) || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (MySQLParser.MASTER_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_HOST_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_PORT_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_LOG_POS_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_USER_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_PASSWORD_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SERVER_ID_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_RETRY_COUNT_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_DELAY_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CA_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_TLS_VERSION_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CRL_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_AUTO_POSITION_SYMBOL - 185)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1 << (MySQLParser.MAX_STATEMENT_TIME_SYMBOL - 185)) | (1 << (MySQLParser.MAX_SIZE_SYMBOL - 185)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1 << (MySQLParser.MEDIUM_SYMBOL - 185)) | (1 << (MySQLParser.MEMORY_SYMBOL - 185)) | (1 << (MySQLParser.MERGE_SYMBOL - 185)) | (1 << (MySQLParser.MESSAGE_TEXT_SYMBOL - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (MySQLParser.MICROSECOND_SYMBOL - 217)) | (1 << (MySQLParser.MIGRATE_SYMBOL - 217)) | (1 << (MySQLParser.MINUTE_SYMBOL - 217)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 217)) | (1 << (MySQLParser.MODIFY_SYMBOL - 217)) | (1 << (MySQLParser.MODE_SYMBOL - 217)) | (1 << (MySQLParser.MONTH_SYMBOL - 217)) | (1 << (MySQLParser.MULTILINESTRING_SYMBOL - 217)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 217)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 217)) | (1 << (MySQLParser.MUTEX_SYMBOL - 217)) | (1 << (MySQLParser.MYSQL_ERRNO_SYMBOL - 217)) | (1 << (MySQLParser.NAME_SYMBOL - 217)) | (1 << (MySQLParser.NAMES_SYMBOL - 217)) | (1 << (MySQLParser.NATIONAL_SYMBOL - 217)) | (1 << (MySQLParser.NCHAR_SYMBOL - 217)) | (1 << (MySQLParser.NDBCLUSTER_SYMBOL - 217)) | (1 << (MySQLParser.NEVER_SYMBOL - 217)) | (1 << (MySQLParser.NEXT_SYMBOL - 217)) | (1 << (MySQLParser.NEW_SYMBOL - 217)) | (1 << (MySQLParser.NO_WAIT_SYMBOL - 217)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 217)) | (1 << (MySQLParser.NUMBER_SYMBOL - 217)) | (1 << (MySQLParser.NVARCHAR_SYMBOL - 217)) | (1 << (MySQLParser.OFFSET_SYMBOL - 217)) | (1 << (MySQLParser.OLD_PASSWORD_SYMBOL - 217)) | (1 << (MySQLParser.ONE_SYMBOL - 217)) | (1 << (MySQLParser.PACK_KEYS_SYMBOL - 217)) | (1 << (MySQLParser.PAGE_SYMBOL - 217)) | (1 << (MySQLParser.PARTIAL_SYMBOL - 217)))) !== 0) || ((((_la - 249)) & ~0x1f) == 0 && ((1 << (_la - 249)) & ((1 << (MySQLParser.PARTITIONING_SYMBOL - 249)) | (1 << (MySQLParser.PARTITIONS_SYMBOL - 249)) | (1 << (MySQLParser.PASSWORD_SYMBOL - 249)) | (1 << (MySQLParser.PHASE_SYMBOL - 249)) | (1 << (MySQLParser.PLUGIN_DIR_SYMBOL - 249)) | (1 << (MySQLParser.PLUGIN_SYMBOL - 249)) | (1 << (MySQLParser.PLUGINS_SYMBOL - 249)) | (1 << (MySQLParser.POINT_SYMBOL - 249)) | (1 << (MySQLParser.POLYGON_SYMBOL - 249)) | (1 << (MySQLParser.PRESERVE_SYMBOL - 249)) | (1 << (MySQLParser.PREV_SYMBOL - 249)) | (1 << (MySQLParser.PRIVILEGES_SYMBOL - 249)) | (1 << (MySQLParser.PROCESSLIST_SYMBOL - 249)) | (1 << (MySQLParser.PROFILE_SYMBOL - 249)) | (1 << (MySQLParser.PROFILES_SYMBOL - 249)) | (1 << (MySQLParser.QUARTER_SYMBOL - 249)) | (1 << (MySQLParser.QUERY_SYMBOL - 249)) | (1 << (MySQLParser.QUICK_SYMBOL - 249)) | (1 << (MySQLParser.READ_ONLY_SYMBOL - 249)) | (1 << (MySQLParser.REBUILD_SYMBOL - 249)) | (1 << (MySQLParser.RECOVER_SYMBOL - 249)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYMBOL - 249)) | (1 << (MySQLParser.REDOFILE_SYMBOL - 249)) | (1 << (MySQLParser.REDUNDANT_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_SYMBOL - 249)) | (1 << (MySQLParser.RELAYLOG_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_LOG_POS_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_THREAD_SYMBOL - 249)))) !== 0) || ((((_la - 281)) & ~0x1f) == 0 && ((1 << (_la - 281)) & ((1 << (MySQLParser.REORGANIZE_SYMBOL - 281)) | (1 << (MySQLParser.REPEATABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_DO_DB_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_DO_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 281)) | (1 << (MySQLParser.RESUME_SYMBOL - 281)) | (1 << (MySQLParser.RETURNED_SQLSTATE_SYMBOL - 281)) | (1 << (MySQLParser.RETURNS_SYMBOL - 281)) | (1 << (MySQLParser.REVERSE_SYMBOL - 281)) | (1 << (MySQLParser.ROLLUP_SYMBOL - 281)) | (1 << (MySQLParser.ROTATE_SYMBOL - 281)) | (1 << (MySQLParser.ROUTINE_SYMBOL - 281)) | (1 << (MySQLParser.ROW_COUNT_SYMBOL - 281)) | (1 << (MySQLParser.ROW_FORMAT_SYMBOL - 281)) | (1 << (MySQLParser.RTREE_SYMBOL - 281)) | (1 << (MySQLParser.SCHEDULE_SYMBOL - 281)) | (1 << (MySQLParser.SCHEMA_NAME_SYMBOL - 281)) | (1 << (MySQLParser.SECOND_SYMBOL - 281)) | (1 << (MySQLParser.SERIAL_SYMBOL - 281)) | (1 << (MySQLParser.SERIALIZABLE_SYMBOL - 281)) | (1 << (MySQLParser.SESSION_SYMBOL - 281)) | (1 << (MySQLParser.SIMPLE_SYMBOL - 281)) | (1 << (MySQLParser.SHARE_SYMBOL - 281)) | (1 << (MySQLParser.SLOW_SYMBOL - 281)) | (1 << (MySQLParser.SNAPSHOT_SYMBOL - 281)))) !== 0) || ((((_la - 313)) & ~0x1f) == 0 && ((1 << (_la - 313)) & ((1 << (MySQLParser.SOUNDS_SYMBOL - 313)) | (1 << (MySQLParser.SOURCE_SYMBOL - 313)) | (1 << (MySQLParser.SQL_AFTER_GTIDS_SYMBOL - 313)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1 << (MySQLParser.SQL_CACHE_SYMBOL - 313)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 313)) | (1 << (MySQLParser.SQL_NO_CACHE_SYMBOL - 313)) | (1 << (MySQLParser.SQL_THREAD_SYMBOL - 313)) | (1 << (MySQLParser.STACKED_SYMBOL - 313)) | (1 << (MySQLParser.STARTS_SYMBOL - 313)) | (1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 313)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 313)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1 << (MySQLParser.STATUS_SYMBOL - 313)) | (1 << (MySQLParser.STORAGE_SYMBOL - 313)) | (1 << (MySQLParser.STRING_SYMBOL - 313)) | (1 << (MySQLParser.SUBCLASS_ORIGIN_SYMBOL - 313)) | (1 << (MySQLParser.SUBDATE_SYMBOL - 313)) | (1 << (MySQLParser.SUBJECT_SYMBOL - 313)) | (1 << (MySQLParser.SUBPARTITION_SYMBOL - 313)) | (1 << (MySQLParser.SUBPARTITIONS_SYMBOL - 313)) | (1 << (MySQLParser.SUPER_SYMBOL - 313)) | (1 << (MySQLParser.SUSPEND_SYMBOL - 313)) | (1 << (MySQLParser.SWAPS_SYMBOL - 313)) | (1 << (MySQLParser.SWITCHES_SYMBOL - 313)) | (1 << (MySQLParser.TABLE_NAME_SYMBOL - 313)) | (1 << (MySQLParser.TABLES_SYMBOL - 313)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYMBOL - 313)) | (1 << (MySQLParser.TABLESPACE_SYMBOL - 313)) | (1 << (MySQLParser.TEMPORARY_SYMBOL - 313)) | (1 << (MySQLParser.TEMPTABLE_SYMBOL - 313)))) !== 0) || ((((_la - 345)) & ~0x1f) == 0 && ((1 << (_la - 345)) & ((1 << (MySQLParser.TEXT_SYMBOL - 345)) | (1 << (MySQLParser.THAN_SYMBOL - 345)) | (1 << (MySQLParser.TRANSACTION_SYMBOL - 345)) | (1 << (MySQLParser.TRIGGERS_SYMBOL - 345)) | (1 << (MySQLParser.TIMESTAMP_SYMBOL - 345)) | (1 << (MySQLParser.TIMESTAMP_ADD_SYMBOL - 345)) | (1 << (MySQLParser.TIMESTAMP_DIFF_SYMBOL - 345)) | (1 << (MySQLParser.TIME_SYMBOL - 345)) | (1 << (MySQLParser.TYPES_SYMBOL - 345)) | (1 << (MySQLParser.TYPE_SYMBOL - 345)) | (1 << (MySQLParser.UDF_RETURNS_SYMBOL - 345)) | (1 << (MySQLParser.UNCOMMITTED_SYMBOL - 345)) | (1 << (MySQLParser.UNDEFINED_SYMBOL - 345)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 345)) | (1 << (MySQLParser.UNDOFILE_SYMBOL - 345)) | (1 << (MySQLParser.UNKNOWN_SYMBOL - 345)) | (1 << (MySQLParser.UNTIL_SYMBOL - 345)) | (1 << (MySQLParser.USER_RESOURCES_SYMBOL - 345)) | (1 << (MySQLParser.USER_SYMBOL - 345)) | (1 << (MySQLParser.USE_FRM_SYMBOL - 345)) | (1 << (MySQLParser.VARIABLES_SYMBOL - 345)) | (1 << (MySQLParser.VIEW_SYMBOL - 345)) | (1 << (MySQLParser.VALUE_SYMBOL - 345)) | (1 << (MySQLParser.WARNINGS_SYMBOL - 345)) | (1 << (MySQLParser.WAIT_SYMBOL - 345)) | (1 << (MySQLParser.WEEK_SYMBOL - 345)) | (1 << (MySQLParser.WORK_SYMBOL - 345)) | (1 << (MySQLParser.WEIGHT_STRING_SYMBOL - 345)) | (1 << (MySQLParser.X509_SYMBOL - 345)) | (1 << (MySQLParser.XID_SYMBOL - 345)) | (1 << (MySQLParser.XML_SYMBOL - 345)))) !== 0) || _la===MySQLParser.YEAR_SYMBOL || _la===MySQLParser.ANALYSE_SYMBOL || ((((_la - 694)) & ~0x1f) == 0 && ((1 << (_la - 694)) & ((1 << (MySQLParser.COMPONENT_SYMBOL - 694)) | (1 << (MySQLParser.SKIP_SYMBOL - 694)) | (1 << (MySQLParser.LOCKED_SYMBOL - 694)) | (1 << (MySQLParser.NOWAIT_SYMBOL - 694)) | (1 << (MySQLParser.HISTOGRAM_SYMBOL - 694)) | (1 << (MySQLParser.BUCKETS_SYMBOL - 694)) | (1 << (MySQLParser.REMOTE_SYMBOL - 694)) | (1 << (MySQLParser.EXCLUDE_SYMBOL - 694)) | (1 << (MySQLParser.FOLLOWING_SYMBOL - 694)) | (1 << (MySQLParser.NULLS_SYMBOL - 694)) | (1 << (MySQLParser.OTHERS_SYMBOL - 694)) | (1 << (MySQLParser.PRECEDING_SYMBOL - 694)) | (1 << (MySQLParser.RESPECT_SYMBOL - 694)))) !== 0) || ((((_la - 727)) & ~0x1f) == 0 && ((1 << (_la - 727)) & ((1 << (MySQLParser.TIES_SYMBOL - 727)) | (1 << (MySQLParser.UNBOUNDED_SYMBOL - 727)) | (1 << (MySQLParser.NESTED_SYMBOL - 727)) | (1 << (MySQLParser.ORDINALITY_SYMBOL - 727)) | (1 << (MySQLParser.PATH_SYMBOL - 727)) | (1 << (MySQLParser.HISTORY_SYMBOL - 727)) | (1 << (MySQLParser.REUSE_SYMBOL - 727)) | (1 << (MySQLParser.SRID_SYMBOL - 727)) | (1 << (MySQLParser.THREAD_PRIORITY_SYMBOL - 727)) | (1 << (MySQLParser.VCPU_SYMBOL - 727)) | (1 << (MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 727)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 727)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 727)) | (1 << (MySQLParser.OPTIONAL_SYMBOL - 727)) | (1 << (MySQLParser.ACTIVE_SYMBOL - 727)) | (1 << (MySQLParser.INACTIVE_SYMBOL - 727)) | (1 << (MySQLParser.RETAIN_SYMBOL - 727)) | (1 << (MySQLParser.OLD_SYMBOL - 727)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8347;
            if (!( serverVersion < 50709)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50709");
            }
            this.state = 8348;
            this.match(MySQLParser.SHUTDOWN_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8349;
            if (!( serverVersion < 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
            }
            this.state = 8350;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CUBE_SYMBOL || _la===MySQLParser.IMPORT_SYMBOL || _la===MySQLParser.ROWS_SYMBOL || _la===MySQLParser.ROW_SYMBOL || _la===MySQLParser.FUNCTION_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8351;
            if (!( serverVersion >= 80000)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
            }
            this.state = 8352;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SUPER_SYMBOL || _la===MySQLParser.EXCHANGE_SYMBOL || _la===MySQLParser.EXPIRE_SYMBOL || _la===MySQLParser.ONLY_SYMBOL || _la===MySQLParser.VALIDATION_SYMBOL || _la===MySQLParser.WITHOUT_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 8353;
            if (!( serverVersion >= 80014)) {
                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
            }
            this.state = 8354;
            this.match(MySQLParser.ADMIN_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


MySQLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.simpleStatement_sempred(localctx, predIndex);
	case 2:
			return this.alterStatement_sempred(localctx, predIndex);
	case 3:
			return this.alterDatabase_sempred(localctx, predIndex);
	case 9:
			return this.alterTable_sempred(localctx, predIndex);
	case 13:
			return this.standaloneAlterCommands_sempred(localctx, predIndex);
	case 14:
			return this.alterPartition_sempred(localctx, predIndex);
	case 17:
			return this.alterListItem_sempred(localctx, predIndex);
	case 24:
			return this.withValidation_sempred(localctx, predIndex);
	case 28:
			return this.alterTablespace_sempred(localctx, predIndex);
	case 39:
			return this.createStatement_sempred(localctx, predIndex);
	case 41:
			return this.createDatabaseOption_sempred(localctx, predIndex);
	case 54:
			return this.createIndex_sempred(localctx, predIndex);
	case 65:
			return this.tsDataFileName_sempred(localctx, predIndex);
	case 68:
			return this.tablespaceOption_sempred(localctx, predIndex);
	case 85:
			return this.triggerFollowsPrecedesClause_sempred(localctx, predIndex);
	case 90:
			return this.dropStatement_sempred(localctx, predIndex);
	case 111:
			return this.deleteStatement_sempred(localctx, predIndex);
	case 112:
			return this.partitionDelete_sempred(localctx, predIndex);
	case 114:
			return this.doStatement_sempred(localctx, predIndex);
	case 117:
			return this.insertStatement_sempred(localctx, predIndex);
	case 136:
			return this.queryExpression_sempred(localctx, predIndex);
	case 137:
			return this.queryExpressionBody_sempred(localctx, predIndex);
	case 139:
			return this.querySpecification_sempred(localctx, predIndex);
	case 163:
			return this.olapOption_sempred(localctx, predIndex);
	case 168:
			return this.selectOption_sempred(localctx, predIndex);
	case 169:
			return this.lockingClause_sempred(localctx, predIndex);
	case 170:
			return this.lockStrengh_sempred(localctx, predIndex);
	case 176:
			return this.tableReference_sempred(localctx, predIndex);
	case 182:
			return this.tableFactor_sempred(localctx, predIndex);
	case 185:
			return this.derivedTable_sempred(localctx, predIndex);
	case 189:
			return this.jtColumn_sempred(localctx, predIndex);
	case 195:
			return this.tableAlias_sempred(localctx, predIndex);
	case 204:
			return this.updateStatement_sempred(localctx, predIndex);
	case 208:
			return this.transactionCharacteristic_sempred(localctx, predIndex);
	case 210:
			return this.lockStatement_sempred(localctx, predIndex);
	case 214:
			return this.xaConvert_sempred(localctx, predIndex);
	case 216:
			return this.replicationStatement_sempred(localctx, predIndex);
	case 217:
			return this.resetOption_sempred(localctx, predIndex);
	case 218:
			return this.masterResetOptions_sempred(localctx, predIndex);
	case 227:
			return this.changeReplication_sempred(localctx, predIndex);
	case 235:
			return this.slaveUntilOptions_sempred(localctx, predIndex);
	case 236:
			return this.slaveConnectionOptions_sempred(localctx, predIndex);
	case 243:
			return this.cloneStatement_sempred(localctx, predIndex);
	case 246:
			return this.accountManagementStatement_sempred(localctx, predIndex);
	case 247:
			return this.alterUser_sempred(localctx, predIndex);
	case 248:
			return this.alterUserTail_sempred(localctx, predIndex);
	case 250:
			return this.createUser_sempred(localctx, predIndex);
	case 251:
			return this.createUserTail_sempred(localctx, predIndex);
	case 252:
			return this.defaultRoleClause_sempred(localctx, predIndex);
	case 255:
			return this.accountLockPasswordExpireOptions_sempred(localctx, predIndex);
	case 256:
			return this.dropUser_sempred(localctx, predIndex);
	case 257:
			return this.grant_sempred(localctx, predIndex);
	case 258:
			return this.grantTargetList_sempred(localctx, predIndex);
	case 259:
			return this.grantOptions_sempred(localctx, predIndex);
	case 263:
			return this.versionedRequireClause_sempred(localctx, predIndex);
	case 265:
			return this.revoke_sempred(localctx, predIndex);
	case 266:
			return this.onTypeTo_sempred(localctx, predIndex);
	case 269:
			return this.roleOrPrivilege_sempred(localctx, predIndex);
	case 270:
			return this.grantIdentifier_sempred(localctx, predIndex);
	case 277:
			return this.tableAdministrationStatement_sempred(localctx, predIndex);
	case 283:
			return this.startOptionValueList_sempred(localctx, predIndex);
	case 288:
			return this.optionValueNoOptionType_sempred(localctx, predIndex);
	case 293:
			return this.setExprOrDefault_sempred(localctx, predIndex);
	case 294:
			return this.showStatement_sempred(localctx, predIndex);
	case 295:
			return this.showCommandType_sempred(localctx, predIndex);
	case 296:
			return this.nonBlocking_sempred(localctx, predIndex);
	case 300:
			return this.otherAdministrativeStatement_sempred(localctx, predIndex);
	case 308:
			return this.flushOption_sempred(localctx, predIndex);
	case 311:
			return this.flushTablesOptions_sempred(localctx, predIndex);
	case 326:
			return this.utilityStatement_sempred(localctx, predIndex);
	case 328:
			return this.explainCommand_sempred(localctx, predIndex);
	case 329:
			return this.explainableStatement_sempred(localctx, predIndex);
	case 333:
			return this.expr_sempred(localctx, predIndex);
	case 334:
			return this.boolPri_sempred(localctx, predIndex);
	case 336:
			return this.predicate_sempred(localctx, predIndex);
	case 338:
			return this.bitExpr_sempred(localctx, predIndex);
	case 339:
			return this.simpleExpr_sempred(localctx, predIndex);
	case 340:
			return this.arrayCast_sempred(localctx, predIndex);
	case 341:
			return this.jsonOperator_sempred(localctx, predIndex);
	case 342:
			return this.sumExpr_sempred(localctx, predIndex);
	case 353:
			return this.runtimeFunctionCall_sempred(localctx, predIndex);
	case 354:
			return this.geometryFunction_sempred(localctx, predIndex);
	case 356:
			return this.fractionalPrecision_sempred(localctx, predIndex);
	case 368:
			return this.internalVariableName_sempred(localctx, predIndex);
	case 372:
			return this.castType_sempred(localctx, predIndex);
	case 386:
			return this.channel_sempred(localctx, predIndex);
	case 415:
			return this.getDiagnostics_sempred(localctx, predIndex);
	case 428:
			return this.checkOrReferences_sempred(localctx, predIndex);
	case 431:
			return this.tableConstraintDef_sempred(localctx, predIndex);
	case 433:
			return this.fieldDefinition_sempred(localctx, predIndex);
	case 434:
			return this.columnAttribute_sempred(localctx, predIndex);
	case 444:
			return this.keyListVariants_sempred(localctx, predIndex);
	case 447:
			return this.commonIndexOption_sempred(localctx, predIndex);
	case 453:
			return this.dataType_sempred(localctx, predIndex);
	case 463:
			return this.charsetName_sempred(localctx, predIndex);
	case 464:
			return this.collationName_sempred(localctx, predIndex);
	case 467:
			return this.createTableOption_sempred(localctx, predIndex);
	case 475:
			return this.partitionKeyAlgorithm_sempred(localctx, predIndex);
	case 502:
			return this.createUserEntry_sempred(localctx, predIndex);
	case 513:
			return this.usePartition_sempred(localctx, predIndex);
	case 515:
			return this.columnName_sempred(localctx, predIndex);
	case 558:
			return this.pureIdentifier_sempred(localctx, predIndex);
	case 563:
			return this.simpleIdentifier_sempred(localctx, predIndex);
	case 568:
			return this.real_ulonglong_number_sempred(localctx, predIndex);
	case 572:
			return this.textStringLiteral_sempred(localctx, predIndex);
	case 574:
			return this.textStringHash_sempred(localctx, predIndex);
	case 594:
			return this.identifierKeyword_sempred(localctx, predIndex);
	case 597:
			return this.labelKeyword_sempred(localctx, predIndex);
	case 600:
			return this.roleKeyword_sempred(localctx, predIndex);
	case 603:
			return this.roleOrIdentifierKeyword_sempred(localctx, predIndex);
	case 604:
			return this.roleOrLabelKeyword_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

MySQLParser.prototype.simpleStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return serverVersion >= 80000;
		case 1:
			return serverVersion >= 80000;
		case 2:
			return serverVersion >= 80000;
		case 3:
			return serverVersion >= 50604;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return serverVersion >= 80014;
		case 5:
			return serverVersion >= 50713;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterDatabase_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterTable_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return serverVersion < 50700;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.standaloneAlterCommands_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterPartition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return serverVersion >= 50704;
		case 10:
			return serverVersion >= 50704;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterListItem_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return serverVersion >= 50700;
		case 12:
			return serverVersion < 50700;
		case 13:
			return serverVersion >= 80014;
		case 14:
			return serverVersion >= 80000;
		case 15:
			return serverVersion >= 80017;
		case 16:
			return serverVersion >= 80000;
		case 17:
			return serverVersion >= 50700;
		case 18:
			return serverVersion >= 80014;
		case 19:
			return serverVersion >= 50708 && serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.withValidation_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterTablespace_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return serverVersion < 80000;
		case 22:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 23:
			return serverVersion >= 80000;
		case 24:
			return serverVersion >= 80011;
		case 25:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createDatabaseOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return serverVersion >= 80016;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createIndex_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tsDataFileName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tablespaceOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return serverVersion >= 50707;
		case 30:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.triggerFollowsPrecedesClause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return serverVersion >= 50700;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.dropStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return serverVersion >= 80000;
		case 33:
			return serverVersion >= 80011;
		case 34:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.deleteStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return serverVersion >= 80000;
		case 36:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.partitionDelete_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return serverVersion >= 50602;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.doStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 38:
			return serverVersion < 50709;
		case 39:
			return serverVersion >= 50709;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.insertStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 40:
			return  serverVersion >= 80018;
		case 41:
			return  serverVersion >= 80018;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.queryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return serverVersion >= 80000;
		case 43:
			return serverVersion < 80000;
		case 44:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.queryExpressionBody_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 45:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.querySpecification_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.olapOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.selectOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return serverVersion < 80000;
		case 49:
			return serverVersion >= 50704 && serverVersion < 50708;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.lockingClause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return serverVersion >= 80000;
		case 51:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.lockStrengh_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tableReference_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return serverVersion < 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tableFactor_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return serverVersion >= 80004;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.derivedTable_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return serverVersion >= 80000;
		case 56:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.jtColumn_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 57:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tableAlias_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 58:
			return serverVersion < 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.updateStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 59:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.transactionCharacteristic_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 60:
			return serverVersion >= 50605;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.lockStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 61:
			return serverVersion >= 80000;
		case 62:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.xaConvert_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 63:
			return serverVersion >= 50704;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.replicationStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 64:
			return serverVersion > 80000;
		case 65:
			return serverVersion >= 50700;
		case 66:
			return serverVersion > 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.resetOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 67:
			return serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.masterResetOptions_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 68:
			return serverVersion >= 80000;
		case 69:
			return serverVersion < 80017;
		case 70:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.changeReplication_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 71:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.slaveUntilOptions_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 72:
			return serverVersion >= 50606;
		case 73:
			return serverVersion >= 50606;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.slaveConnectionOptions_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 74:
			return serverVersion >= 50604;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.cloneStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 75:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.accountManagementStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 76:
			return serverVersion >= 50606;
		case 77:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterUser_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 78:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.alterUserTail_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 79:
			return serverVersion < 80014;
		case 80:
			return serverVersion >= 80014;
		case 81:
			return serverVersion >= 50706;
		case 82:
			return serverVersion >= 80014;
		case 83:
			return serverVersion >= 80014;
		case 84:
			return serverVersion >= 80014;
		case 85:
			return serverVersion >= 80000;
		case 86:
			return serverVersion >= 80018;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createUser_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 87:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createUserTail_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 88:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.defaultRoleClause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 89:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.accountLockPasswordExpireOptions_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 90:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.dropUser_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 91:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.grant_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 92:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.grantTargetList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 93:
			return serverVersion < 80011;
		case 94:
			return serverVersion >= 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.grantOptions_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 95:
			return serverVersion < 80011;
		case 96:
			return serverVersion >= 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.versionedRequireClause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 97:
			return serverVersion < 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.revoke_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 98:
			return serverVersion >= 80000;
		case 99:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.onTypeTo_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 100:
			return serverVersion < 80000;
		case 101:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.roleOrPrivilege_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 102:
			return serverVersion > 80000;
		case 103:
			return serverVersion > 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.grantIdentifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 104:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tableAdministrationStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 105:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.startOptionValueList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 106:
			return serverVersion < 50706;
		case 107:
			return serverVersion < 80014;
		case 108:
			return serverVersion >= 80018;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.optionValueNoOptionType_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 109:
			return serverVersion >= 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.setExprOrDefault_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 110:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.showStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 111:
			return serverVersion < 50700;
		case 112:
			return serverVersion >= 80000;
		case 113:
			return serverVersion < 50700;
		case 114:
			return serverVersion >= 50704;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.showCommandType_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 115:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.nonBlocking_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 116:
			return serverVersion >= 50700 && serverVersion < 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.otherAdministrativeStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 117:
			return serverVersion >= 50709;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.flushOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 118:
			return serverVersion < 80000;
		case 119:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.flushTablesOptions_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 120:
			return serverVersion >= 50606;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.utilityStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 121:
			return serverVersion >= 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.explainCommand_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 122:
			return serverVersion < 80000;
		case 123:
			return serverVersion < 80000;
		case 124:
			return serverVersion >= 50605;
		case 125:
			return serverVersion >= 80018;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.explainableStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 126:
			return serverVersion >= 50603;
		case 127:
			return serverVersion >= 50700;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 128:
			return this.precpred(this._ctx, 3);
		case 129:
			return this.precpred(this._ctx, 2);
		case 130:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.boolPri_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 131:
			return this.precpred(this._ctx, 3);
		case 132:
			return this.precpred(this._ctx, 2);
		case 133:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.predicate_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 134:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.bitExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 135:
			return this.precpred(this._ctx, 7);
		case 136:
			return this.precpred(this._ctx, 6);
		case 137:
			return this.precpred(this._ctx, 5);
		case 138:
			return this.precpred(this._ctx, 3);
		case 139:
			return this.precpred(this._ctx, 2);
		case 140:
			return this.precpred(this._ctx, 1);
		case 141:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.simpleExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 142:
			return serverVersion >= 80000;
		case 143:
			return serverVersion >= 80000;
		case 144:
			return this.precpred(this._ctx, 15);
		case 145:
			return this.precpred(this._ctx, 21);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.arrayCast_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 146:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.jsonOperator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 147:
			return serverVersion >= 50708;
		case 148:
			return serverVersion >= 50713;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.sumExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 149:
			return serverVersion >= 80000;
		case 150:
			return serverVersion >= 80000;
		case 151:
			return serverVersion >= 80000;
		case 152:
			return serverVersion >= 80000;
		case 153:
			return serverVersion >= 80000;
		case 154:
			return serverVersion >= 80000;
		case 155:
			return serverVersion >= 80000;
		case 156:
			return serverVersion >= 80000;
		case 157:
			return serverVersion >= 80000;
		case 158:
			return serverVersion >= 80000;
		case 159:
			return serverVersion >= 80000;
		case 160:
			return serverVersion >= 80000;
		case 161:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.runtimeFunctionCall_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 162:
			return serverVersion < 50607;
		case 163:
			return serverVersion < 80011;
		case 164:
			return serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.geometryFunction_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 165:
			return serverVersion < 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.fractionalPrecision_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 166:
			return serverVersion >= 50604;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.internalVariableName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 167:
			return serverVersion < 80017;
		case 168:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.castType_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 169:
			return serverVersion >= 50708;
		case 170:
			return serverVersion >= 80017;
		case 171:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.channel_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 172:
			return serverVersion >= 50706;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.getDiagnostics_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 173:
			return serverVersion >= 50700;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.checkOrReferences_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 174:
			return serverVersion < 80016;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.tableConstraintDef_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 175:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.fieldDefinition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 176:
			return serverVersion >= 50707;
		case 177:
			return serverVersion < 80000;
		case 178:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.columnAttribute_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 179:
			return serverVersion >= 80014;
		case 180:
			return serverVersion >= 80013;
		case 181:
			return serverVersion >= 80000;
		case 182:
			return serverVersion >= 80017;
		case 183:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.keyListVariants_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 184:
			return serverVersion >= 80013;
		case 185:
			return serverVersion < 80013;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.commonIndexOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 186:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.dataType_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 187:
			return serverVersion >= 50708;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.charsetName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 188:
			return serverVersion < 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.collationName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 189:
			return serverVersion < 80011;
		case 190:
			return serverVersion >= 80018;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createTableOption_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 191:
			return serverVersion >= 80014;
		case 192:
			return serverVersion >= 50708;
		case 193:
			return serverVersion >= 50711;
		case 194:
			return serverVersion >= 50707;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.partitionKeyAlgorithm_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 195:
			return serverVersion >= 50700;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.createUserEntry_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 196:
			return serverVersion < 80011;
		case 197:
			return serverVersion >= 50706;
		case 198:
			return serverVersion >= 80018;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.usePartition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 199:
			return serverVersion >= 50602;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.columnName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 200:
			return serverVersion >= 80000;
		case 201:
			return serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.pureIdentifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 202:
			return isSqlModeActive(AnsiQuotes);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.simpleIdentifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 203:
			return serverVersion < 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.real_ulonglong_number_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 204:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.textStringLiteral_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 205:
			return !isSqlModeActive(AnsiQuotes);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.textStringHash_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 206:
			return serverVersion >= 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.identifierKeyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 207:
			return serverVersion < 80017;
		case 208:
			return serverVersion >= 50709;
		case 209:
			return serverVersion >= 80011;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.labelKeyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 210:
			return serverVersion < 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.roleKeyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 211:
			return serverVersion < 80017;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.roleOrIdentifierKeyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 212:
			return serverVersion >= 50709;
		case 213:
			return serverVersion >= 80000;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.roleOrLabelKeyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 214:
			return serverVersion < 50709;
		case 215:
			return serverVersion < 80000;
		case 216:
			return serverVersion >= 80000;
		case 217:
			return serverVersion >= 80014;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.MySQLParser = MySQLParser;
