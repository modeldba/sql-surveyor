// Generated from grammars/mysql/MultiQueryMySQLParser.g4 by ANTLR 4.7.3-SNAPSHOT

/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";
import { MySQLBaseParser } from "./MySQLBaseParser";
import { SqlMode } from "./common";


import { MultiQueryMySQLParserListener } from "./MultiQueryMySQLParserListener";

export class MultiQueryMySQLParser extends MySQLBaseParser {
	public static readonly ACCOUNT_SYMBOL = 1;
	public static readonly ASCII_SYMBOL = 2;
	public static readonly ALWAYS_SYMBOL = 3;
	public static readonly BACKUP_SYMBOL = 4;
	public static readonly BEGIN_SYMBOL = 5;
	public static readonly BYTE_SYMBOL = 6;
	public static readonly CACHE_SYMBOL = 7;
	public static readonly CHARSET_SYMBOL = 8;
	public static readonly CHECKSUM_SYMBOL = 9;
	public static readonly CLOSE_SYMBOL = 10;
	public static readonly COMMENT_SYMBOL = 11;
	public static readonly COMMIT_SYMBOL = 12;
	public static readonly CONTAINS_SYMBOL = 13;
	public static readonly DEALLOCATE_SYMBOL = 14;
	public static readonly DO_SYMBOL = 15;
	public static readonly END_SYMBOL = 16;
	public static readonly EXECUTE_SYMBOL = 17;
	public static readonly FLUSH_SYMBOL = 18;
	public static readonly FOLLOWS_SYMBOL = 19;
	public static readonly FORMAT_SYMBOL = 20;
	public static readonly GROUP_REPLICATION_SYMBOL = 21;
	public static readonly HANDLER_SYMBOL = 22;
	public static readonly HELP_SYMBOL = 23;
	public static readonly HOST_SYMBOL = 24;
	public static readonly INSTALL_SYMBOL = 25;
	public static readonly LANGUAGE_SYMBOL = 26;
	public static readonly NO_SYMBOL = 27;
	public static readonly OPEN_SYMBOL = 28;
	public static readonly OPTIONS_SYMBOL = 29;
	public static readonly OWNER_SYMBOL = 30;
	public static readonly PARSER_SYMBOL = 31;
	public static readonly PARTITION_SYMBOL = 32;
	public static readonly PORT_SYMBOL = 33;
	public static readonly PRECEDES_SYMBOL = 34;
	public static readonly PREPARE_SYMBOL = 35;
	public static readonly REMOVE_SYMBOL = 36;
	public static readonly REPAIR_SYMBOL = 37;
	public static readonly RESET_SYMBOL = 38;
	public static readonly RESTORE_SYMBOL = 39;
	public static readonly ROLLBACK_SYMBOL = 40;
	public static readonly SAVEPOINT_SYMBOL = 41;
	public static readonly SECURITY_SYMBOL = 42;
	public static readonly SERVER_SYMBOL = 43;
	public static readonly SIGNED_SYMBOL = 44;
	public static readonly SLAVE_SYMBOL = 45;
	public static readonly SOCKET_SYMBOL = 46;
	public static readonly SONAME_SYMBOL = 47;
	public static readonly START_SYMBOL = 48;
	public static readonly STOP_SYMBOL = 49;
	public static readonly TRUNCATE_SYMBOL = 50;
	public static readonly UNICODE_SYMBOL = 51;
	public static readonly UNINSTALL_SYMBOL = 52;
	public static readonly UPGRADE_SYMBOL = 53;
	public static readonly WRAPPER_SYMBOL = 54;
	public static readonly XA_SYMBOL = 55;
	public static readonly SHUTDOWN_SYMBOL = 56;
	public static readonly ACTION_SYMBOL = 57;
	public static readonly ADDDATE_SYMBOL = 58;
	public static readonly AFTER_SYMBOL = 59;
	public static readonly AGAINST_SYMBOL = 60;
	public static readonly AGGREGATE_SYMBOL = 61;
	public static readonly ALGORITHM_SYMBOL = 62;
	public static readonly ANALYZE_SYMBOL = 63;
	public static readonly ANY_SYMBOL = 64;
	public static readonly AT_SYMBOL = 65;
	public static readonly AUTHORS_SYMBOL = 66;
	public static readonly AUTO_INCREMENT_SYMBOL = 67;
	public static readonly AUTOEXTEND_SIZE_SYMBOL = 68;
	public static readonly AVG_ROW_LENGTH_SYMBOL = 69;
	public static readonly AVG_SYMBOL = 70;
	public static readonly BINLOG_SYMBOL = 71;
	public static readonly BIT_SYMBOL = 72;
	public static readonly BLOCK_SYMBOL = 73;
	public static readonly BOOL_SYMBOL = 74;
	public static readonly BOOLEAN_SYMBOL = 75;
	public static readonly BTREE_SYMBOL = 76;
	public static readonly CASCADED_SYMBOL = 77;
	public static readonly CATALOG_NAME_SYMBOL = 78;
	public static readonly CHAIN_SYMBOL = 79;
	public static readonly CHANGED_SYMBOL = 80;
	public static readonly CHANNEL_SYMBOL = 81;
	public static readonly CIPHER_SYMBOL = 82;
	public static readonly CLIENT_SYMBOL = 83;
	public static readonly CLASS_ORIGIN_SYMBOL = 84;
	public static readonly COALESCE_SYMBOL = 85;
	public static readonly CODE_SYMBOL = 86;
	public static readonly COLLATION_SYMBOL = 87;
	public static readonly COLUMN_NAME_SYMBOL = 88;
	public static readonly COLUMN_FORMAT_SYMBOL = 89;
	public static readonly COLUMNS_SYMBOL = 90;
	public static readonly COMMITTED_SYMBOL = 91;
	public static readonly COMPACT_SYMBOL = 92;
	public static readonly COMPLETION_SYMBOL = 93;
	public static readonly COMPRESSED_SYMBOL = 94;
	public static readonly COMPRESSION_SYMBOL = 95;
	public static readonly ENCRYPTION_SYMBOL = 96;
	public static readonly CONCURRENT_SYMBOL = 97;
	public static readonly CONNECTION_SYMBOL = 98;
	public static readonly CONSISTENT_SYMBOL = 99;
	public static readonly CONSTRAINT_CATALOG_SYMBOL = 100;
	public static readonly CONSTRAINT_SCHEMA_SYMBOL = 101;
	public static readonly CONSTRAINT_NAME_SYMBOL = 102;
	public static readonly CONTEXT_SYMBOL = 103;
	public static readonly CONTRIBUTORS_SYMBOL = 104;
	public static readonly CPU_SYMBOL = 105;
	public static readonly CUBE_SYMBOL = 106;
	public static readonly CURRENT_SYMBOL = 107;
	public static readonly CURSOR_NAME_SYMBOL = 108;
	public static readonly DATA_SYMBOL = 109;
	public static readonly DATAFILE_SYMBOL = 110;
	public static readonly DATETIME_SYMBOL = 111;
	public static readonly DATE_SYMBOL = 112;
	public static readonly DAY_SYMBOL = 113;
	public static readonly DEFAULT_AUTH_SYMBOL = 114;
	public static readonly DEFINER_SYMBOL = 115;
	public static readonly DELAY_KEY_WRITE_SYMBOL = 116;
	public static readonly DES_KEY_FILE_SYMBOL = 117;
	public static readonly DIAGNOSTICS_SYMBOL = 118;
	public static readonly DIRECTORY_SYMBOL = 119;
	public static readonly DISABLE_SYMBOL = 120;
	public static readonly DISCARD_SYMBOL = 121;
	public static readonly DISK_SYMBOL = 122;
	public static readonly DUMPFILE_SYMBOL = 123;
	public static readonly DUPLICATE_SYMBOL = 124;
	public static readonly DYNAMIC_SYMBOL = 125;
	public static readonly ENDS_SYMBOL = 126;
	public static readonly ENUM_SYMBOL = 127;
	public static readonly ENGINE_SYMBOL = 128;
	public static readonly ENGINES_SYMBOL = 129;
	public static readonly ERROR_SYMBOL = 130;
	public static readonly ERRORS_SYMBOL = 131;
	public static readonly ESCAPE_SYMBOL = 132;
	public static readonly EVENT_SYMBOL = 133;
	public static readonly EVENTS_SYMBOL = 134;
	public static readonly EVERY_SYMBOL = 135;
	public static readonly EXPANSION_SYMBOL = 136;
	public static readonly EXPORT_SYMBOL = 137;
	public static readonly EXTENDED_SYMBOL = 138;
	public static readonly EXTENT_SIZE_SYMBOL = 139;
	public static readonly FAULTS_SYMBOL = 140;
	public static readonly FAST_SYMBOL = 141;
	public static readonly FOUND_SYMBOL = 142;
	public static readonly ENABLE_SYMBOL = 143;
	public static readonly FULL_SYMBOL = 144;
	public static readonly FILE_SYMBOL = 145;
	public static readonly FILE_BLOCK_SIZE_SYMBOL = 146;
	public static readonly FILTER_SYMBOL = 147;
	public static readonly FIRST_SYMBOL = 148;
	public static readonly FIXED_SYMBOL = 149;
	public static readonly GENERAL_SYMBOL = 150;
	public static readonly GEOMETRY_SYMBOL = 151;
	public static readonly GEOMETRYCOLLECTION_SYMBOL = 152;
	public static readonly GET_FORMAT_SYMBOL = 153;
	public static readonly GRANTS_SYMBOL = 154;
	public static readonly GLOBAL_SYMBOL = 155;
	public static readonly HASH_SYMBOL = 156;
	public static readonly HOSTS_SYMBOL = 157;
	public static readonly HOUR_SYMBOL = 158;
	public static readonly IDENTIFIED_SYMBOL = 159;
	public static readonly IGNORE_SERVER_IDS_SYMBOL = 160;
	public static readonly INVOKER_SYMBOL = 161;
	public static readonly IMPORT_SYMBOL = 162;
	public static readonly INDEXES_SYMBOL = 163;
	public static readonly INITIAL_SIZE_SYMBOL = 164;
	public static readonly INSTANCE_SYMBOL = 165;
	public static readonly INNODB_SYMBOL = 166;
	public static readonly IO_SYMBOL = 167;
	public static readonly IPC_SYMBOL = 168;
	public static readonly ISOLATION_SYMBOL = 169;
	public static readonly ISSUER_SYMBOL = 170;
	public static readonly INSERT_METHOD_SYMBOL = 171;
	public static readonly JSON_SYMBOL = 172;
	public static readonly KEY_BLOCK_SIZE_SYMBOL = 173;
	public static readonly LAST_SYMBOL = 174;
	public static readonly LEAVES_SYMBOL = 175;
	public static readonly LESS_SYMBOL = 176;
	public static readonly LEVEL_SYMBOL = 177;
	public static readonly LINESTRING_SYMBOL = 178;
	public static readonly LIST_SYMBOL = 179;
	public static readonly LOCAL_SYMBOL = 180;
	public static readonly LOCKS_SYMBOL = 181;
	public static readonly LOGFILE_SYMBOL = 182;
	public static readonly LOGS_SYMBOL = 183;
	public static readonly MAX_ROWS_SYMBOL = 184;
	public static readonly MASTER_SYMBOL = 185;
	public static readonly MASTER_HEARTBEAT_PERIOD_SYMBOL = 186;
	public static readonly MASTER_HOST_SYMBOL = 187;
	public static readonly MASTER_PORT_SYMBOL = 188;
	public static readonly MASTER_LOG_FILE_SYMBOL = 189;
	public static readonly MASTER_LOG_POS_SYMBOL = 190;
	public static readonly MASTER_USER_SYMBOL = 191;
	public static readonly MASTER_PASSWORD_SYMBOL = 192;
	public static readonly MASTER_SERVER_ID_SYMBOL = 193;
	public static readonly MASTER_CONNECT_RETRY_SYMBOL = 194;
	public static readonly MASTER_RETRY_COUNT_SYMBOL = 195;
	public static readonly MASTER_DELAY_SYMBOL = 196;
	public static readonly MASTER_SSL_SYMBOL = 197;
	public static readonly MASTER_SSL_CA_SYMBOL = 198;
	public static readonly MASTER_SSL_CAPATH_SYMBOL = 199;
	public static readonly MASTER_TLS_VERSION_SYMBOL = 200;
	public static readonly MASTER_SSL_CERT_SYMBOL = 201;
	public static readonly MASTER_SSL_CIPHER_SYMBOL = 202;
	public static readonly MASTER_SSL_CRL_SYMBOL = 203;
	public static readonly MASTER_SSL_CRLPATH_SYMBOL = 204;
	public static readonly MASTER_SSL_KEY_SYMBOL = 205;
	public static readonly MASTER_AUTO_POSITION_SYMBOL = 206;
	public static readonly MAX_CONNECTIONS_PER_HOUR_SYMBOL = 207;
	public static readonly MAX_QUERIES_PER_HOUR_SYMBOL = 208;
	public static readonly MAX_STATEMENT_TIME_SYMBOL = 209;
	public static readonly MAX_SIZE_SYMBOL = 210;
	public static readonly MAX_UPDATES_PER_HOUR_SYMBOL = 211;
	public static readonly MAX_USER_CONNECTIONS_SYMBOL = 212;
	public static readonly MEDIUM_SYMBOL = 213;
	public static readonly MEMORY_SYMBOL = 214;
	public static readonly MERGE_SYMBOL = 215;
	public static readonly MESSAGE_TEXT_SYMBOL = 216;
	public static readonly MICROSECOND_SYMBOL = 217;
	public static readonly MIGRATE_SYMBOL = 218;
	public static readonly MINUTE_SYMBOL = 219;
	public static readonly MIN_ROWS_SYMBOL = 220;
	public static readonly MODIFY_SYMBOL = 221;
	public static readonly MODE_SYMBOL = 222;
	public static readonly MONTH_SYMBOL = 223;
	public static readonly MULTILINESTRING_SYMBOL = 224;
	public static readonly MULTIPOINT_SYMBOL = 225;
	public static readonly MULTIPOLYGON_SYMBOL = 226;
	public static readonly MUTEX_SYMBOL = 227;
	public static readonly MYSQL_ERRNO_SYMBOL = 228;
	public static readonly NAME_SYMBOL = 229;
	public static readonly NAMES_SYMBOL = 230;
	public static readonly NATIONAL_SYMBOL = 231;
	public static readonly NCHAR_SYMBOL = 232;
	public static readonly NDBCLUSTER_SYMBOL = 233;
	public static readonly NEVER_SYMBOL = 234;
	public static readonly NEXT_SYMBOL = 235;
	public static readonly NEW_SYMBOL = 236;
	public static readonly NO_WAIT_SYMBOL = 237;
	public static readonly NODEGROUP_SYMBOL = 238;
	public static readonly NONE_SYMBOL = 239;
	public static readonly NUMBER_SYMBOL = 240;
	public static readonly NVARCHAR_SYMBOL = 241;
	public static readonly OFFSET_SYMBOL = 242;
	public static readonly OLD_PASSWORD_SYMBOL = 243;
	public static readonly ONE_SHOT_SYMBOL = 244;
	public static readonly ONE_SYMBOL = 245;
	public static readonly PACK_KEYS_SYMBOL = 246;
	public static readonly PAGE_SYMBOL = 247;
	public static readonly PARTIAL_SYMBOL = 248;
	public static readonly PARTITIONING_SYMBOL = 249;
	public static readonly PARTITIONS_SYMBOL = 250;
	public static readonly PASSWORD_SYMBOL = 251;
	public static readonly PHASE_SYMBOL = 252;
	public static readonly PLUGIN_DIR_SYMBOL = 253;
	public static readonly PLUGIN_SYMBOL = 254;
	public static readonly PLUGINS_SYMBOL = 255;
	public static readonly POINT_SYMBOL = 256;
	public static readonly POLYGON_SYMBOL = 257;
	public static readonly PRESERVE_SYMBOL = 258;
	public static readonly PREV_SYMBOL = 259;
	public static readonly PRIVILEGES_SYMBOL = 260;
	public static readonly PROCESS_SYMBOL = 261;
	public static readonly PROCESSLIST_SYMBOL = 262;
	public static readonly PROFILE_SYMBOL = 263;
	public static readonly PROFILES_SYMBOL = 264;
	public static readonly PROXY_SYMBOL = 265;
	public static readonly QUARTER_SYMBOL = 266;
	public static readonly QUERY_SYMBOL = 267;
	public static readonly QUICK_SYMBOL = 268;
	public static readonly READ_ONLY_SYMBOL = 269;
	public static readonly REBUILD_SYMBOL = 270;
	public static readonly RECOVER_SYMBOL = 271;
	public static readonly REDO_BUFFER_SIZE_SYMBOL = 272;
	public static readonly REDOFILE_SYMBOL = 273;
	public static readonly REDUNDANT_SYMBOL = 274;
	public static readonly RELAY_SYMBOL = 275;
	public static readonly RELAYLOG_SYMBOL = 276;
	public static readonly RELAY_LOG_FILE_SYMBOL = 277;
	public static readonly RELAY_LOG_POS_SYMBOL = 278;
	public static readonly RELAY_THREAD_SYMBOL = 279;
	public static readonly RELOAD_SYMBOL = 280;
	public static readonly REORGANIZE_SYMBOL = 281;
	public static readonly REPEATABLE_SYMBOL = 282;
	public static readonly REPLICATION_SYMBOL = 283;
	public static readonly REPLICATE_DO_DB_SYMBOL = 284;
	public static readonly REPLICATE_IGNORE_DB_SYMBOL = 285;
	public static readonly REPLICATE_DO_TABLE_SYMBOL = 286;
	public static readonly REPLICATE_IGNORE_TABLE_SYMBOL = 287;
	public static readonly REPLICATE_WILD_DO_TABLE_SYMBOL = 288;
	public static readonly REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 289;
	public static readonly REPLICATE_REWRITE_DB_SYMBOL = 290;
	public static readonly RESUME_SYMBOL = 291;
	public static readonly RETURNED_SQLSTATE_SYMBOL = 292;
	public static readonly RETURNS_SYMBOL = 293;
	public static readonly REVERSE_SYMBOL = 294;
	public static readonly ROLLUP_SYMBOL = 295;
	public static readonly ROTATE_SYMBOL = 296;
	public static readonly ROUTINE_SYMBOL = 297;
	public static readonly ROWS_SYMBOL = 298;
	public static readonly ROW_COUNT_SYMBOL = 299;
	public static readonly ROW_FORMAT_SYMBOL = 300;
	public static readonly ROW_SYMBOL = 301;
	public static readonly RTREE_SYMBOL = 302;
	public static readonly SCHEDULE_SYMBOL = 303;
	public static readonly SCHEMA_NAME_SYMBOL = 304;
	public static readonly SECOND_SYMBOL = 305;
	public static readonly SERIAL_SYMBOL = 306;
	public static readonly SERIALIZABLE_SYMBOL = 307;
	public static readonly SESSION_SYMBOL = 308;
	public static readonly SIMPLE_SYMBOL = 309;
	public static readonly SHARE_SYMBOL = 310;
	public static readonly SLOW_SYMBOL = 311;
	public static readonly SNAPSHOT_SYMBOL = 312;
	public static readonly SOUNDS_SYMBOL = 313;
	public static readonly SOURCE_SYMBOL = 314;
	public static readonly SQL_AFTER_GTIDS_SYMBOL = 315;
	public static readonly SQL_AFTER_MTS_GAPS_SYMBOL = 316;
	public static readonly SQL_BEFORE_GTIDS_SYMBOL = 317;
	public static readonly SQL_CACHE_SYMBOL = 318;
	public static readonly SQL_BUFFER_RESULT_SYMBOL = 319;
	public static readonly SQL_NO_CACHE_SYMBOL = 320;
	public static readonly SQL_THREAD_SYMBOL = 321;
	public static readonly STACKED_SYMBOL = 322;
	public static readonly STARTS_SYMBOL = 323;
	public static readonly STATS_AUTO_RECALC_SYMBOL = 324;
	public static readonly STATS_PERSISTENT_SYMBOL = 325;
	public static readonly STATS_SAMPLE_PAGES_SYMBOL = 326;
	public static readonly STATUS_SYMBOL = 327;
	public static readonly STORAGE_SYMBOL = 328;
	public static readonly STRING_SYMBOL = 329;
	public static readonly SUBCLASS_ORIGIN_SYMBOL = 330;
	public static readonly SUBDATE_SYMBOL = 331;
	public static readonly SUBJECT_SYMBOL = 332;
	public static readonly SUBPARTITION_SYMBOL = 333;
	public static readonly SUBPARTITIONS_SYMBOL = 334;
	public static readonly SUPER_SYMBOL = 335;
	public static readonly SUSPEND_SYMBOL = 336;
	public static readonly SWAPS_SYMBOL = 337;
	public static readonly SWITCHES_SYMBOL = 338;
	public static readonly TABLE_NAME_SYMBOL = 339;
	public static readonly TABLES_SYMBOL = 340;
	public static readonly TABLE_CHECKSUM_SYMBOL = 341;
	public static readonly TABLESPACE_SYMBOL = 342;
	public static readonly TEMPORARY_SYMBOL = 343;
	public static readonly TEMPTABLE_SYMBOL = 344;
	public static readonly TEXT_SYMBOL = 345;
	public static readonly THAN_SYMBOL = 346;
	public static readonly TRANSACTION_SYMBOL = 347;
	public static readonly TRIGGERS_SYMBOL = 348;
	public static readonly TIMESTAMP_SYMBOL = 349;
	public static readonly TIMESTAMP_ADD_SYMBOL = 350;
	public static readonly TIMESTAMP_DIFF_SYMBOL = 351;
	public static readonly TIME_SYMBOL = 352;
	public static readonly TYPES_SYMBOL = 353;
	public static readonly TYPE_SYMBOL = 354;
	public static readonly UDF_RETURNS_SYMBOL = 355;
	public static readonly FUNCTION_SYMBOL = 356;
	public static readonly UNCOMMITTED_SYMBOL = 357;
	public static readonly UNDEFINED_SYMBOL = 358;
	public static readonly UNDO_BUFFER_SIZE_SYMBOL = 359;
	public static readonly UNDOFILE_SYMBOL = 360;
	public static readonly UNKNOWN_SYMBOL = 361;
	public static readonly UNTIL_SYMBOL = 362;
	public static readonly USER_RESOURCES_SYMBOL = 363;
	public static readonly USER_SYMBOL = 364;
	public static readonly USE_FRM_SYMBOL = 365;
	public static readonly VARIABLES_SYMBOL = 366;
	public static readonly VIEW_SYMBOL = 367;
	public static readonly VALUE_SYMBOL = 368;
	public static readonly WARNINGS_SYMBOL = 369;
	public static readonly WAIT_SYMBOL = 370;
	public static readonly WEEK_SYMBOL = 371;
	public static readonly WORK_SYMBOL = 372;
	public static readonly WEIGHT_STRING_SYMBOL = 373;
	public static readonly X509_SYMBOL = 374;
	public static readonly XID_SYMBOL = 375;
	public static readonly XML_SYMBOL = 376;
	public static readonly YEAR_SYMBOL = 377;
	public static readonly NOT2_SYMBOL = 378;
	public static readonly CONCAT_PIPES_SYMBOL = 379;
	public static readonly INT_NUMBER = 380;
	public static readonly LONG_NUMBER = 381;
	public static readonly ULONGLONG_NUMBER = 382;
	public static readonly EQUAL_OPERATOR = 383;
	public static readonly ASSIGN_OPERATOR = 384;
	public static readonly NULL_SAFE_EQUAL_OPERATOR = 385;
	public static readonly GREATER_OR_EQUAL_OPERATOR = 386;
	public static readonly GREATER_THAN_OPERATOR = 387;
	public static readonly LESS_OR_EQUAL_OPERATOR = 388;
	public static readonly LESS_THAN_OPERATOR = 389;
	public static readonly NOT_EQUAL_OPERATOR = 390;
	public static readonly PLUS_OPERATOR = 391;
	public static readonly MINUS_OPERATOR = 392;
	public static readonly MULT_OPERATOR = 393;
	public static readonly DIV_OPERATOR = 394;
	public static readonly MOD_OPERATOR = 395;
	public static readonly LOGICAL_NOT_OPERATOR = 396;
	public static readonly BITWISE_NOT_OPERATOR = 397;
	public static readonly SHIFT_LEFT_OPERATOR = 398;
	public static readonly SHIFT_RIGHT_OPERATOR = 399;
	public static readonly LOGICAL_AND_OPERATOR = 400;
	public static readonly BITWISE_AND_OPERATOR = 401;
	public static readonly BITWISE_XOR_OPERATOR = 402;
	public static readonly LOGICAL_OR_OPERATOR = 403;
	public static readonly BITWISE_OR_OPERATOR = 404;
	public static readonly DOT_SYMBOL = 405;
	public static readonly COMMA_SYMBOL = 406;
	public static readonly SEMICOLON_SYMBOL = 407;
	public static readonly COLON_SYMBOL = 408;
	public static readonly OPEN_PAR_SYMBOL = 409;
	public static readonly CLOSE_PAR_SYMBOL = 410;
	public static readonly OPEN_CURLY_SYMBOL = 411;
	public static readonly CLOSE_CURLY_SYMBOL = 412;
	public static readonly UNDERLINE_SYMBOL = 413;
	public static readonly JSON_SEPARATOR_SYMBOL = 414;
	public static readonly JSON_UNQUOTED_SEPARATOR_SYMBOL = 415;
	public static readonly AT_SIGN_SYMBOL = 416;
	public static readonly AT_TEXT_SUFFIX = 417;
	public static readonly AT_AT_SIGN_SYMBOL = 418;
	public static readonly NULL2_SYMBOL = 419;
	public static readonly PARAM_MARKER = 420;
	public static readonly HEX_NUMBER = 421;
	public static readonly BIN_NUMBER = 422;
	public static readonly DECIMAL_NUMBER = 423;
	public static readonly FLOAT_NUMBER = 424;
	public static readonly ACCESSIBLE_SYMBOL = 425;
	public static readonly ADD_SYMBOL = 426;
	public static readonly ALL_SYMBOL = 427;
	public static readonly ALTER_SYMBOL = 428;
	public static readonly ANALYSE_SYMBOL = 429;
	public static readonly AND_SYMBOL = 430;
	public static readonly AS_SYMBOL = 431;
	public static readonly ASC_SYMBOL = 432;
	public static readonly ASENSITIVE_SYMBOL = 433;
	public static readonly BEFORE_SYMBOL = 434;
	public static readonly BETWEEN_SYMBOL = 435;
	public static readonly BIGINT_SYMBOL = 436;
	public static readonly BINARY_SYMBOL = 437;
	public static readonly BIN_NUM_SYMBOL = 438;
	public static readonly BIT_AND_SYMBOL = 439;
	public static readonly BIT_OR_SYMBOL = 440;
	public static readonly BIT_XOR_SYMBOL = 441;
	public static readonly BLOB_SYMBOL = 442;
	public static readonly BOTH_SYMBOL = 443;
	public static readonly BY_SYMBOL = 444;
	public static readonly CALL_SYMBOL = 445;
	public static readonly CASCADE_SYMBOL = 446;
	public static readonly CASE_SYMBOL = 447;
	public static readonly CAST_SYMBOL = 448;
	public static readonly CHANGE_SYMBOL = 449;
	public static readonly CHAR_SYMBOL = 450;
	public static readonly CHECK_SYMBOL = 451;
	public static readonly COLLATE_SYMBOL = 452;
	public static readonly COLUMN_SYMBOL = 453;
	public static readonly CONDITION_SYMBOL = 454;
	public static readonly CONSTRAINT_SYMBOL = 455;
	public static readonly CONTINUE_SYMBOL = 456;
	public static readonly CONVERT_SYMBOL = 457;
	public static readonly COUNT_SYMBOL = 458;
	public static readonly CREATE_SYMBOL = 459;
	public static readonly CROSS_SYMBOL = 460;
	public static readonly CURDATE_SYMBOL = 461;
	public static readonly CURRENT_DATE_SYMBOL = 462;
	public static readonly CURRENT_TIME_SYMBOL = 463;
	public static readonly CURRENT_USER_SYMBOL = 464;
	public static readonly CURSOR_SYMBOL = 465;
	public static readonly CURTIME_SYMBOL = 466;
	public static readonly DATABASE_SYMBOL = 467;
	public static readonly DATABASES_SYMBOL = 468;
	public static readonly DATE_ADD_SYMBOL = 469;
	public static readonly DATE_SUB_SYMBOL = 470;
	public static readonly DAY_HOUR_SYMBOL = 471;
	public static readonly DAY_MICROSECOND_SYMBOL = 472;
	public static readonly DAY_MINUTE_SYMBOL = 473;
	public static readonly DAY_SECOND_SYMBOL = 474;
	public static readonly DECIMAL_NUM_SYMBOL = 475;
	public static readonly DECIMAL_SYMBOL = 476;
	public static readonly DECLARE_SYMBOL = 477;
	public static readonly DEFAULT_SYMBOL = 478;
	public static readonly DELAYED_SYMBOL = 479;
	public static readonly DELETE_SYMBOL = 480;
	public static readonly DESC_SYMBOL = 481;
	public static readonly DESCRIBE_SYMBOL = 482;
	public static readonly DETERMINISTIC_SYMBOL = 483;
	public static readonly DISTINCT_SYMBOL = 484;
	public static readonly DIV_SYMBOL = 485;
	public static readonly DOUBLE_SYMBOL = 486;
	public static readonly DROP_SYMBOL = 487;
	public static readonly DUAL_SYMBOL = 488;
	public static readonly EACH_SYMBOL = 489;
	public static readonly ELSE_SYMBOL = 490;
	public static readonly ELSEIF_SYMBOL = 491;
	public static readonly ENCLOSED_SYMBOL = 492;
	public static readonly END_OF_INPUT_SYMBOL = 493;
	public static readonly ESCAPED_SYMBOL = 494;
	public static readonly EXCHANGE_SYMBOL = 495;
	public static readonly EXISTS_SYMBOL = 496;
	public static readonly EXIT_SYMBOL = 497;
	public static readonly EXPIRE_SYMBOL = 498;
	public static readonly EXPLAIN_SYMBOL = 499;
	public static readonly EXTRACT_SYMBOL = 500;
	public static readonly FALSE_SYMBOL = 501;
	public static readonly FETCH_SYMBOL = 502;
	public static readonly FLOAT_SYMBOL = 503;
	public static readonly FORCE_SYMBOL = 504;
	public static readonly FOREIGN_SYMBOL = 505;
	public static readonly FOR_SYMBOL = 506;
	public static readonly FROM_SYMBOL = 507;
	public static readonly FULLTEXT_SYMBOL = 508;
	public static readonly GET_SYMBOL = 509;
	public static readonly GENERATED_SYMBOL = 510;
	public static readonly GRANT_SYMBOL = 511;
	public static readonly GROUP_SYMBOL = 512;
	public static readonly GROUP_CONCAT_SYMBOL = 513;
	public static readonly HAVING_SYMBOL = 514;
	public static readonly HIGH_PRIORITY_SYMBOL = 515;
	public static readonly HOUR_MICROSECOND_SYMBOL = 516;
	public static readonly HOUR_MINUTE_SYMBOL = 517;
	public static readonly HOUR_SECOND_SYMBOL = 518;
	public static readonly IF_SYMBOL = 519;
	public static readonly IGNORE_SYMBOL = 520;
	public static readonly INDEX_SYMBOL = 521;
	public static readonly INFILE_SYMBOL = 522;
	public static readonly INNER_SYMBOL = 523;
	public static readonly INOUT_SYMBOL = 524;
	public static readonly INSENSITIVE_SYMBOL = 525;
	public static readonly INSERT_SYMBOL = 526;
	public static readonly INTERVAL_SYMBOL = 527;
	public static readonly INTO_SYMBOL = 528;
	public static readonly INT_SYMBOL = 529;
	public static readonly IN_SYMBOL = 530;
	public static readonly IO_AFTER_GTIDS_SYMBOL = 531;
	public static readonly IO_BEFORE_GTIDS_SYMBOL = 532;
	public static readonly IS_SYMBOL = 533;
	public static readonly ITERATE_SYMBOL = 534;
	public static readonly JOIN_SYMBOL = 535;
	public static readonly KEYS_SYMBOL = 536;
	public static readonly KEY_SYMBOL = 537;
	public static readonly KILL_SYMBOL = 538;
	public static readonly LEADING_SYMBOL = 539;
	public static readonly LEAVE_SYMBOL = 540;
	public static readonly LEFT_SYMBOL = 541;
	public static readonly LIKE_SYMBOL = 542;
	public static readonly LIMIT_SYMBOL = 543;
	public static readonly LINEAR_SYMBOL = 544;
	public static readonly LINES_SYMBOL = 545;
	public static readonly LOAD_SYMBOL = 546;
	public static readonly LOCATOR_SYMBOL = 547;
	public static readonly LOCK_SYMBOL = 548;
	public static readonly LONGBLOB_SYMBOL = 549;
	public static readonly LONGTEXT_SYMBOL = 550;
	public static readonly LONG_NUM_SYMBOL = 551;
	public static readonly LONG_SYMBOL = 552;
	public static readonly LOOP_SYMBOL = 553;
	public static readonly LOW_PRIORITY_SYMBOL = 554;
	public static readonly MASTER_BIND_SYMBOL = 555;
	public static readonly MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 556;
	public static readonly MATCH_SYMBOL = 557;
	public static readonly MAX_SYMBOL = 558;
	public static readonly MAXVALUE_SYMBOL = 559;
	public static readonly MEDIUMBLOB_SYMBOL = 560;
	public static readonly MEDIUMINT_SYMBOL = 561;
	public static readonly MEDIUMTEXT_SYMBOL = 562;
	public static readonly MID_SYMBOL = 563;
	public static readonly MINUTE_MICROSECOND_SYMBOL = 564;
	public static readonly MINUTE_SECOND_SYMBOL = 565;
	public static readonly MIN_SYMBOL = 566;
	public static readonly MODIFIES_SYMBOL = 567;
	public static readonly MOD_SYMBOL = 568;
	public static readonly NATURAL_SYMBOL = 569;
	public static readonly NCHAR_STRING_SYMBOL = 570;
	public static readonly NEG_SYMBOL = 571;
	public static readonly NONBLOCKING_SYMBOL = 572;
	public static readonly NOT_SYMBOL = 573;
	public static readonly NOW_SYMBOL = 574;
	public static readonly NO_WRITE_TO_BINLOG_SYMBOL = 575;
	public static readonly NULL_SYMBOL = 576;
	public static readonly NUMERIC_SYMBOL = 577;
	public static readonly OFFLINE_SYMBOL = 578;
	public static readonly ON_SYMBOL = 579;
	public static readonly ONLINE_SYMBOL = 580;
	public static readonly ONLY_SYMBOL = 581;
	public static readonly OPTIMIZE_SYMBOL = 582;
	public static readonly OPTIMIZER_COSTS_SYMBOL = 583;
	public static readonly OPTION_SYMBOL = 584;
	public static readonly OPTIONALLY_SYMBOL = 585;
	public static readonly ORDER_SYMBOL = 586;
	public static readonly OR_SYMBOL = 587;
	public static readonly OUTER_SYMBOL = 588;
	public static readonly OUTFILE_SYMBOL = 589;
	public static readonly OUT_SYMBOL = 590;
	public static readonly POSITION_SYMBOL = 591;
	public static readonly PRECISION_SYMBOL = 592;
	public static readonly PRIMARY_SYMBOL = 593;
	public static readonly PROCEDURE_SYMBOL = 594;
	public static readonly PURGE_SYMBOL = 595;
	public static readonly RANGE_SYMBOL = 596;
	public static readonly READS_SYMBOL = 597;
	public static readonly READ_SYMBOL = 598;
	public static readonly READ_WRITE_SYMBOL = 599;
	public static readonly REAL_SYMBOL = 600;
	public static readonly REFERENCES_SYMBOL = 601;
	public static readonly REGEXP_SYMBOL = 602;
	public static readonly RELEASE_SYMBOL = 603;
	public static readonly RENAME_SYMBOL = 604;
	public static readonly REPEAT_SYMBOL = 605;
	public static readonly REPLACE_SYMBOL = 606;
	public static readonly REQUIRE_SYMBOL = 607;
	public static readonly RESIGNAL_SYMBOL = 608;
	public static readonly RESTRICT_SYMBOL = 609;
	public static readonly RETURN_SYMBOL = 610;
	public static readonly REVOKE_SYMBOL = 611;
	public static readonly RIGHT_SYMBOL = 612;
	public static readonly SECOND_MICROSECOND_SYMBOL = 613;
	public static readonly SELECT_SYMBOL = 614;
	public static readonly SENSITIVE_SYMBOL = 615;
	public static readonly SEPARATOR_SYMBOL = 616;
	public static readonly SERVER_OPTIONS_SYMBOL = 617;
	public static readonly SESSION_USER_SYMBOL = 618;
	public static readonly SET_SYMBOL = 619;
	public static readonly SET_VAR_SYMBOL = 620;
	public static readonly SHOW_SYMBOL = 621;
	public static readonly SIGNAL_SYMBOL = 622;
	public static readonly SMALLINT_SYMBOL = 623;
	public static readonly SPATIAL_SYMBOL = 624;
	public static readonly SPECIFIC_SYMBOL = 625;
	public static readonly SQLEXCEPTION_SYMBOL = 626;
	public static readonly SQLSTATE_SYMBOL = 627;
	public static readonly SQLWARNING_SYMBOL = 628;
	public static readonly SQL_BIG_RESULT_SYMBOL = 629;
	public static readonly SQL_CALC_FOUND_ROWS_SYMBOL = 630;
	public static readonly SQL_SMALL_RESULT_SYMBOL = 631;
	public static readonly SQL_SYMBOL = 632;
	public static readonly SSL_SYMBOL = 633;
	public static readonly STARTING_SYMBOL = 634;
	public static readonly STDDEV_SAMP_SYMBOL = 635;
	public static readonly STDDEV_SYMBOL = 636;
	public static readonly STDDEV_POP_SYMBOL = 637;
	public static readonly STD_SYMBOL = 638;
	public static readonly STORED_SYMBOL = 639;
	public static readonly STRAIGHT_JOIN_SYMBOL = 640;
	public static readonly SUBSTR_SYMBOL = 641;
	public static readonly SUBSTRING_SYMBOL = 642;
	public static readonly SUM_SYMBOL = 643;
	public static readonly SYSDATE_SYMBOL = 644;
	public static readonly SYSTEM_USER_SYMBOL = 645;
	public static readonly TABLE_REF_PRIORITY_SYMBOL = 646;
	public static readonly TABLE_SYMBOL = 647;
	public static readonly TERMINATED_SYMBOL = 648;
	public static readonly THEN_SYMBOL = 649;
	public static readonly TINYBLOB_SYMBOL = 650;
	public static readonly TINYINT_SYMBOL = 651;
	public static readonly TINYTEXT_SYMBOL = 652;
	public static readonly TO_SYMBOL = 653;
	public static readonly TRAILING_SYMBOL = 654;
	public static readonly TRIGGER_SYMBOL = 655;
	public static readonly TRIM_SYMBOL = 656;
	public static readonly TRUE_SYMBOL = 657;
	public static readonly UNDO_SYMBOL = 658;
	public static readonly UNION_SYMBOL = 659;
	public static readonly UNIQUE_SYMBOL = 660;
	public static readonly UNLOCK_SYMBOL = 661;
	public static readonly UNSIGNED_SYMBOL = 662;
	public static readonly UPDATE_SYMBOL = 663;
	public static readonly USAGE_SYMBOL = 664;
	public static readonly USE_SYMBOL = 665;
	public static readonly USING_SYMBOL = 666;
	public static readonly UTC_DATE_SYMBOL = 667;
	public static readonly UTC_TIMESTAMP_SYMBOL = 668;
	public static readonly UTC_TIME_SYMBOL = 669;
	public static readonly VALIDATION_SYMBOL = 670;
	public static readonly VALUES_SYMBOL = 671;
	public static readonly VARBINARY_SYMBOL = 672;
	public static readonly VARCHAR_SYMBOL = 673;
	public static readonly VARIANCE_SYMBOL = 674;
	public static readonly VARYING_SYMBOL = 675;
	public static readonly VAR_POP_SYMBOL = 676;
	public static readonly VAR_SAMP_SYMBOL = 677;
	public static readonly VIRTUAL_SYMBOL = 678;
	public static readonly WHEN_SYMBOL = 679;
	public static readonly WHERE_SYMBOL = 680;
	public static readonly WHILE_SYMBOL = 681;
	public static readonly WITH_SYMBOL = 682;
	public static readonly WITHOUT_SYMBOL = 683;
	public static readonly WRITE_SYMBOL = 684;
	public static readonly XOR_SYMBOL = 685;
	public static readonly YEAR_MONTH_SYMBOL = 686;
	public static readonly ZEROFILL_SYMBOL = 687;
	public static readonly PERSIST_SYMBOL = 688;
	public static readonly ROLE_SYMBOL = 689;
	public static readonly ADMIN_SYMBOL = 690;
	public static readonly INVISIBLE_SYMBOL = 691;
	public static readonly VISIBLE_SYMBOL = 692;
	public static readonly EXCEPT_SYMBOL = 693;
	public static readonly COMPONENT_SYMBOL = 694;
	public static readonly RECURSIVE_SYMBOL = 695;
	public static readonly JSON_OBJECTAGG_SYMBOL = 696;
	public static readonly JSON_ARRAYAGG_SYMBOL = 697;
	public static readonly OF_SYMBOL = 698;
	public static readonly SKIP_SYMBOL = 699;
	public static readonly LOCKED_SYMBOL = 700;
	public static readonly NOWAIT_SYMBOL = 701;
	public static readonly GROUPING_SYMBOL = 702;
	public static readonly PERSIST_ONLY_SYMBOL = 703;
	public static readonly HISTOGRAM_SYMBOL = 704;
	public static readonly BUCKETS_SYMBOL = 705;
	public static readonly REMOTE_SYMBOL = 706;
	public static readonly CLONE_SYMBOL = 707;
	public static readonly CUME_DIST_SYMBOL = 708;
	public static readonly DENSE_RANK_SYMBOL = 709;
	public static readonly EXCLUDE_SYMBOL = 710;
	public static readonly FIRST_VALUE_SYMBOL = 711;
	public static readonly FOLLOWING_SYMBOL = 712;
	public static readonly GROUPS_SYMBOL = 713;
	public static readonly LAG_SYMBOL = 714;
	public static readonly LAST_VALUE_SYMBOL = 715;
	public static readonly LEAD_SYMBOL = 716;
	public static readonly NTH_VALUE_SYMBOL = 717;
	public static readonly NTILE_SYMBOL = 718;
	public static readonly NULLS_SYMBOL = 719;
	public static readonly OTHERS_SYMBOL = 720;
	public static readonly OVER_SYMBOL = 721;
	public static readonly PERCENT_RANK_SYMBOL = 722;
	public static readonly PRECEDING_SYMBOL = 723;
	public static readonly RANK_SYMBOL = 724;
	public static readonly RESPECT_SYMBOL = 725;
	public static readonly ROW_NUMBER_SYMBOL = 726;
	public static readonly TIES_SYMBOL = 727;
	public static readonly UNBOUNDED_SYMBOL = 728;
	public static readonly WINDOW_SYMBOL = 729;
	public static readonly EMPTY_SYMBOL = 730;
	public static readonly JSON_TABLE_SYMBOL = 731;
	public static readonly NESTED_SYMBOL = 732;
	public static readonly ORDINALITY_SYMBOL = 733;
	public static readonly PATH_SYMBOL = 734;
	public static readonly HISTORY_SYMBOL = 735;
	public static readonly REUSE_SYMBOL = 736;
	public static readonly SRID_SYMBOL = 737;
	public static readonly THREAD_PRIORITY_SYMBOL = 738;
	public static readonly RESOURCE_SYMBOL = 739;
	public static readonly SYSTEM_SYMBOL = 740;
	public static readonly VCPU_SYMBOL = 741;
	public static readonly MASTER_PUBLIC_KEY_PATH_SYMBOL = 742;
	public static readonly GET_MASTER_PUBLIC_KEY_SYMBOL = 743;
	public static readonly RESTART_SYMBOL = 744;
	public static readonly DEFINITION_SYMBOL = 745;
	public static readonly DESCRIPTION_SYMBOL = 746;
	public static readonly ORGANIZATION_SYMBOL = 747;
	public static readonly REFERENCE_SYMBOL = 748;
	public static readonly OPTIONAL_SYMBOL = 749;
	public static readonly SECONDARY_SYMBOL = 750;
	public static readonly SECONDARY_ENGINE_SYMBOL = 751;
	public static readonly SECONDARY_LOAD_SYMBOL = 752;
	public static readonly SECONDARY_UNLOAD_SYMBOL = 753;
	public static readonly ACTIVE_SYMBOL = 754;
	public static readonly INACTIVE_SYMBOL = 755;
	public static readonly LATERAL_SYMBOL = 756;
	public static readonly RETAIN_SYMBOL = 757;
	public static readonly OLD_SYMBOL = 758;
	public static readonly NETWORK_NAMESPACE_SYMBOL = 759;
	public static readonly ENFORCED_SYMBOL = 760;
	public static readonly ARRAY_SYMBOL = 761;
	public static readonly OJ_SYMBOL = 762;
	public static readonly MEMBER_SYMBOL = 763;
	public static readonly RANDOM_SYMBOL = 764;
	public static readonly MASTER_COMPRESSION_ALGORITHM_SYMBOL = 765;
	public static readonly MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 766;
	public static readonly PRIVILEGE_CHECKS_USER_SYMBOL = 767;
	public static readonly MASTER_TLS_CIPHERSUITES_SYMBOL = 768;
	public static readonly WHITESPACE = 769;
	public static readonly INVALID_INPUT = 770;
	public static readonly UNDERSCORE_CHARSET = 771;
	public static readonly IDENTIFIER = 772;
	public static readonly NCHAR_TEXT = 773;
	public static readonly BACK_TICK_QUOTED_ID = 774;
	public static readonly DOUBLE_QUOTED_TEXT = 775;
	public static readonly SINGLE_QUOTED_TEXT = 776;
	public static readonly VERSION_COMMENT_START = 777;
	public static readonly MYSQL_COMMENT_START = 778;
	public static readonly VERSION_COMMENT_END = 779;
	public static readonly BLOCK_COMMENT = 780;
	public static readonly POUND_COMMENT = 781;
	public static readonly DASHDASH_COMMENT = 782;
	public static readonly NOT_EQUAL2_OPERATOR = 783;
	public static readonly RULE_sql_script = 0;
	public static readonly RULE_query = 1;
	public static readonly RULE_simpleStatement = 2;
	public static readonly RULE_alterStatement = 3;
	public static readonly RULE_alterDatabase = 4;
	public static readonly RULE_alterEvent = 5;
	public static readonly RULE_alterLogfileGroup = 6;
	public static readonly RULE_alterLogfileGroupOptions = 7;
	public static readonly RULE_alterLogfileGroupOption = 8;
	public static readonly RULE_alterServer = 9;
	public static readonly RULE_alterTable = 10;
	public static readonly RULE_alterTableActions = 11;
	public static readonly RULE_alterCommandList = 12;
	public static readonly RULE_alterCommandsModifierList = 13;
	public static readonly RULE_standaloneAlterCommands = 14;
	public static readonly RULE_alterPartition = 15;
	public static readonly RULE_alterList = 16;
	public static readonly RULE_alterCommandsModifier = 17;
	public static readonly RULE_alterListItem = 18;
	public static readonly RULE_place = 19;
	public static readonly RULE_restrict = 20;
	public static readonly RULE_alterOrderList = 21;
	public static readonly RULE_alterAlgorithmOption = 22;
	public static readonly RULE_alterLockOption = 23;
	public static readonly RULE_indexLockAndAlgorithm = 24;
	public static readonly RULE_withValidation = 25;
	public static readonly RULE_removePartitioning = 26;
	public static readonly RULE_allOrPartitionNameList = 27;
	public static readonly RULE_reorgPartitionRule = 28;
	public static readonly RULE_alterTablespace = 29;
	public static readonly RULE_alterUndoTablespace = 30;
	public static readonly RULE_undoTableSpaceOptions = 31;
	public static readonly RULE_undoTableSpaceOption = 32;
	public static readonly RULE_alterTablespaceOptions = 33;
	public static readonly RULE_alterTablespaceOption = 34;
	public static readonly RULE_changeTablespaceOption = 35;
	public static readonly RULE_alterView = 36;
	public static readonly RULE_viewTail = 37;
	public static readonly RULE_viewSelect = 38;
	public static readonly RULE_viewCheckOption = 39;
	public static readonly RULE_createStatement = 40;
	public static readonly RULE_createDatabase = 41;
	public static readonly RULE_createDatabaseOption = 42;
	public static readonly RULE_createTable = 43;
	public static readonly RULE_tableElementList = 44;
	public static readonly RULE_tableElement = 45;
	public static readonly RULE_duplicateAsQueryExpression = 46;
	public static readonly RULE_queryExpressionOrParens = 47;
	public static readonly RULE_createRoutine = 48;
	public static readonly RULE_createProcedure = 49;
	public static readonly RULE_createFunction = 50;
	public static readonly RULE_createUdf = 51;
	public static readonly RULE_routineCreateOption = 52;
	public static readonly RULE_routineAlterOptions = 53;
	public static readonly RULE_routineOption = 54;
	public static readonly RULE_createIndex = 55;
	public static readonly RULE_indexNameAndType = 56;
	public static readonly RULE_createIndexTarget = 57;
	public static readonly RULE_createLogfileGroup = 58;
	public static readonly RULE_logfileGroupOptions = 59;
	public static readonly RULE_logfileGroupOption = 60;
	public static readonly RULE_createServer = 61;
	public static readonly RULE_serverOptions = 62;
	public static readonly RULE_serverOption = 63;
	public static readonly RULE_createTablespace = 64;
	public static readonly RULE_createUndoTablespace = 65;
	public static readonly RULE_tsDataFileName = 66;
	public static readonly RULE_tsDataFile = 67;
	public static readonly RULE_tablespaceOptions = 68;
	public static readonly RULE_tablespaceOption = 69;
	public static readonly RULE_tsOptionInitialSize = 70;
	public static readonly RULE_tsOptionUndoRedoBufferSize = 71;
	public static readonly RULE_tsOptionAutoextendSize = 72;
	public static readonly RULE_tsOptionMaxSize = 73;
	public static readonly RULE_tsOptionExtentSize = 74;
	public static readonly RULE_tsOptionNodegroup = 75;
	public static readonly RULE_tsOptionEngine = 76;
	public static readonly RULE_tsOptionWait = 77;
	public static readonly RULE_tsOptionComment = 78;
	public static readonly RULE_tsOptionFileblockSize = 79;
	public static readonly RULE_tsOptionEncryption = 80;
	public static readonly RULE_createView = 81;
	public static readonly RULE_viewReplaceOrAlgorithm = 82;
	public static readonly RULE_viewAlgorithm = 83;
	public static readonly RULE_viewSuid = 84;
	public static readonly RULE_createTrigger = 85;
	public static readonly RULE_triggerFollowsPrecedesClause = 86;
	public static readonly RULE_createEvent = 87;
	public static readonly RULE_createRole = 88;
	public static readonly RULE_createSpatialReference = 89;
	public static readonly RULE_srsAttribute = 90;
	public static readonly RULE_dropStatement = 91;
	public static readonly RULE_dropDatabase = 92;
	public static readonly RULE_dropEvent = 93;
	public static readonly RULE_dropFunction = 94;
	public static readonly RULE_dropProcedure = 95;
	public static readonly RULE_dropIndex = 96;
	public static readonly RULE_dropLogfileGroup = 97;
	public static readonly RULE_dropLogfileGroupOption = 98;
	public static readonly RULE_dropServer = 99;
	public static readonly RULE_dropTable = 100;
	public static readonly RULE_dropTableSpace = 101;
	public static readonly RULE_dropTrigger = 102;
	public static readonly RULE_dropView = 103;
	public static readonly RULE_dropRole = 104;
	public static readonly RULE_dropSpatialReference = 105;
	public static readonly RULE_dropUndoTablespace = 106;
	public static readonly RULE_renameTableStatement = 107;
	public static readonly RULE_renamePair = 108;
	public static readonly RULE_truncateTableStatement = 109;
	public static readonly RULE_importStatement = 110;
	public static readonly RULE_callStatement = 111;
	public static readonly RULE_deleteStatement = 112;
	public static readonly RULE_partitionDelete = 113;
	public static readonly RULE_deleteStatementOption = 114;
	public static readonly RULE_doStatement = 115;
	public static readonly RULE_handlerStatement = 116;
	public static readonly RULE_handlerReadOrScan = 117;
	public static readonly RULE_insertStatement = 118;
	public static readonly RULE_insertLockOption = 119;
	public static readonly RULE_insertFromConstructor = 120;
	public static readonly RULE_fields = 121;
	public static readonly RULE_insertValues = 122;
	public static readonly RULE_insertQueryExpression = 123;
	public static readonly RULE_valueList = 124;
	public static readonly RULE_values = 125;
	public static readonly RULE_valuesReference = 126;
	public static readonly RULE_insertUpdateList = 127;
	public static readonly RULE_loadStatement = 128;
	public static readonly RULE_dataOrXml = 129;
	public static readonly RULE_xmlRowsIdentifiedBy = 130;
	public static readonly RULE_loadDataFileTail = 131;
	public static readonly RULE_loadDataFileTargetList = 132;
	public static readonly RULE_fieldOrVariableList = 133;
	public static readonly RULE_replaceStatement = 134;
	public static readonly RULE_selectStatement = 135;
	public static readonly RULE_selectStatementWithInto = 136;
	public static readonly RULE_queryExpression = 137;
	public static readonly RULE_queryExpressionBody = 138;
	public static readonly RULE_queryExpressionParens = 139;
	public static readonly RULE_querySpecification = 140;
	public static readonly RULE_subquery = 141;
	public static readonly RULE_querySpecOption = 142;
	public static readonly RULE_limitClause = 143;
	public static readonly RULE_simpleLimitClause = 144;
	public static readonly RULE_limitOptions = 145;
	public static readonly RULE_limitOption = 146;
	public static readonly RULE_intoClause = 147;
	public static readonly RULE_procedureAnalyseClause = 148;
	public static readonly RULE_havingClause = 149;
	public static readonly RULE_windowClause = 150;
	public static readonly RULE_windowDefinition = 151;
	public static readonly RULE_windowSpec = 152;
	public static readonly RULE_windowSpecDetails = 153;
	public static readonly RULE_windowFrameClause = 154;
	public static readonly RULE_windowFrameUnits = 155;
	public static readonly RULE_windowFrameExtent = 156;
	public static readonly RULE_windowFrameStart = 157;
	public static readonly RULE_windowFrameBetween = 158;
	public static readonly RULE_windowFrameBound = 159;
	public static readonly RULE_windowFrameExclusion = 160;
	public static readonly RULE_withClause = 161;
	public static readonly RULE_commonTableExpression = 162;
	public static readonly RULE_groupByClause = 163;
	public static readonly RULE_olapOption = 164;
	public static readonly RULE_orderClause = 165;
	public static readonly RULE_direction = 166;
	public static readonly RULE_fromClause = 167;
	public static readonly RULE_tableReferenceList = 168;
	public static readonly RULE_selectOption = 169;
	public static readonly RULE_lockingClause = 170;
	public static readonly RULE_lockStrengh = 171;
	public static readonly RULE_lockedRowAction = 172;
	public static readonly RULE_selectItemList = 173;
	public static readonly RULE_selectItem = 174;
	public static readonly RULE_selectAlias = 175;
	public static readonly RULE_whereClause = 176;
	public static readonly RULE_tableReference = 177;
	public static readonly RULE_escapedTableReference = 178;
	public static readonly RULE_joinedTable = 179;
	public static readonly RULE_naturalJoinType = 180;
	public static readonly RULE_innerJoinType = 181;
	public static readonly RULE_outerJoinType = 182;
	public static readonly RULE_tableFactor = 183;
	public static readonly RULE_singleTable = 184;
	public static readonly RULE_singleTableParens = 185;
	public static readonly RULE_derivedTable = 186;
	public static readonly RULE_tableReferenceListParens = 187;
	public static readonly RULE_tableFunction = 188;
	public static readonly RULE_columnsClause = 189;
	public static readonly RULE_jtColumn = 190;
	public static readonly RULE_onEmptyOrError = 191;
	public static readonly RULE_onEmpty = 192;
	public static readonly RULE_onError = 193;
	public static readonly RULE_jtOnResponse = 194;
	public static readonly RULE_unionOption = 195;
	public static readonly RULE_tableAlias = 196;
	public static readonly RULE_indexHintList = 197;
	public static readonly RULE_indexHint = 198;
	public static readonly RULE_indexHintType = 199;
	public static readonly RULE_keyOrIndex = 200;
	public static readonly RULE_constraintKeyType = 201;
	public static readonly RULE_indexHintClause = 202;
	public static readonly RULE_indexList = 203;
	public static readonly RULE_indexListElement = 204;
	public static readonly RULE_updateStatement = 205;
	public static readonly RULE_transactionOrLockingStatement = 206;
	public static readonly RULE_transactionStatement = 207;
	public static readonly RULE_beginWork = 208;
	public static readonly RULE_transactionCharacteristic = 209;
	public static readonly RULE_savepointStatement = 210;
	public static readonly RULE_lockStatement = 211;
	public static readonly RULE_lockItem = 212;
	public static readonly RULE_lockOption = 213;
	public static readonly RULE_xaStatement = 214;
	public static readonly RULE_xaConvert = 215;
	public static readonly RULE_xid = 216;
	public static readonly RULE_replicationStatement = 217;
	public static readonly RULE_resetOption = 218;
	public static readonly RULE_masterResetOptions = 219;
	public static readonly RULE_replicationLoad = 220;
	public static readonly RULE_changeMaster = 221;
	public static readonly RULE_changeMasterOptions = 222;
	public static readonly RULE_masterOption = 223;
	public static readonly RULE_privilegeCheckDef = 224;
	public static readonly RULE_masterTlsCiphersuitesDef = 225;
	public static readonly RULE_masterFileDef = 226;
	public static readonly RULE_serverIdList = 227;
	public static readonly RULE_changeReplication = 228;
	public static readonly RULE_filterDefinition = 229;
	public static readonly RULE_filterDbList = 230;
	public static readonly RULE_filterTableList = 231;
	public static readonly RULE_filterStringList = 232;
	public static readonly RULE_filterWildDbTableString = 233;
	public static readonly RULE_filterDbPairList = 234;
	public static readonly RULE_slave = 235;
	public static readonly RULE_slaveUntilOptions = 236;
	public static readonly RULE_slaveConnectionOptions = 237;
	public static readonly RULE_slaveThreadOptions = 238;
	public static readonly RULE_slaveThreadOption = 239;
	public static readonly RULE_groupReplication = 240;
	public static readonly RULE_preparedStatement = 241;
	public static readonly RULE_executeStatement = 242;
	public static readonly RULE_executeVarList = 243;
	public static readonly RULE_cloneStatement = 244;
	public static readonly RULE_dataDirSSL = 245;
	public static readonly RULE_ssl = 246;
	public static readonly RULE_accountManagementStatement = 247;
	public static readonly RULE_alterUser = 248;
	public static readonly RULE_alterUserTail = 249;
	public static readonly RULE_userFunction = 250;
	public static readonly RULE_createUser = 251;
	public static readonly RULE_createUserTail = 252;
	public static readonly RULE_defaultRoleClause = 253;
	public static readonly RULE_requireClause = 254;
	public static readonly RULE_connectOptions = 255;
	public static readonly RULE_accountLockPasswordExpireOptions = 256;
	public static readonly RULE_dropUser = 257;
	public static readonly RULE_grant = 258;
	public static readonly RULE_grantTargetList = 259;
	public static readonly RULE_grantOptions = 260;
	public static readonly RULE_exceptRoleList = 261;
	public static readonly RULE_withRoles = 262;
	public static readonly RULE_grantAs = 263;
	public static readonly RULE_versionedRequireClause = 264;
	public static readonly RULE_renameUser = 265;
	public static readonly RULE_revoke = 266;
	public static readonly RULE_onTypeTo = 267;
	public static readonly RULE_aclType = 268;
	public static readonly RULE_roleOrPrivilegesList = 269;
	public static readonly RULE_roleOrPrivilege = 270;
	public static readonly RULE_grantIdentifier = 271;
	public static readonly RULE_requireList = 272;
	public static readonly RULE_requireListElement = 273;
	public static readonly RULE_grantOption = 274;
	public static readonly RULE_setRole = 275;
	public static readonly RULE_roleList = 276;
	public static readonly RULE_role = 277;
	public static readonly RULE_tableAdministrationStatement = 278;
	public static readonly RULE_histogram = 279;
	public static readonly RULE_checkOption = 280;
	public static readonly RULE_repairType = 281;
	public static readonly RULE_installUninstallStatment = 282;
	public static readonly RULE_setStatement = 283;
	public static readonly RULE_startOptionValueList = 284;
	public static readonly RULE_transactionCharacteristics = 285;
	public static readonly RULE_transactionAccessMode = 286;
	public static readonly RULE_isolationLevel = 287;
	public static readonly RULE_optionValueListContinued = 288;
	public static readonly RULE_optionValueNoOptionType = 289;
	public static readonly RULE_optionValue = 290;
	public static readonly RULE_setSystemVariable = 291;
	public static readonly RULE_startOptionValueListFollowingOptionType = 292;
	public static readonly RULE_optionValueFollowingOptionType = 293;
	public static readonly RULE_setExprOrDefault = 294;
	public static readonly RULE_showStatement = 295;
	public static readonly RULE_showCommandType = 296;
	public static readonly RULE_nonBlocking = 297;
	public static readonly RULE_fromOrIn = 298;
	public static readonly RULE_inDb = 299;
	public static readonly RULE_profileType = 300;
	public static readonly RULE_otherAdministrativeStatement = 301;
	public static readonly RULE_keyCacheListOrParts = 302;
	public static readonly RULE_keyCacheList = 303;
	public static readonly RULE_assignToKeycache = 304;
	public static readonly RULE_assignToKeycachePartition = 305;
	public static readonly RULE_cacheKeyList = 306;
	public static readonly RULE_keyUsageElement = 307;
	public static readonly RULE_keyUsageList = 308;
	public static readonly RULE_flushOption = 309;
	public static readonly RULE_logType = 310;
	public static readonly RULE_flushTables = 311;
	public static readonly RULE_flushTablesOptions = 312;
	public static readonly RULE_preloadTail = 313;
	public static readonly RULE_preloadList = 314;
	public static readonly RULE_preloadKeys = 315;
	public static readonly RULE_adminPartition = 316;
	public static readonly RULE_resourceGroupManagement = 317;
	public static readonly RULE_createResourceGroup = 318;
	public static readonly RULE_resourceGroupVcpuList = 319;
	public static readonly RULE_vcpuNumOrRange = 320;
	public static readonly RULE_resourceGroupPriority = 321;
	public static readonly RULE_resourceGroupEnableDisable = 322;
	public static readonly RULE_alterResourceGroup = 323;
	public static readonly RULE_setResourceGroup = 324;
	public static readonly RULE_threadIdList = 325;
	public static readonly RULE_dropResourceGroup = 326;
	public static readonly RULE_utilityStatement = 327;
	public static readonly RULE_describeCommand = 328;
	public static readonly RULE_explainCommand = 329;
	public static readonly RULE_explainableStatement = 330;
	public static readonly RULE_helpCommand = 331;
	public static readonly RULE_useCommand = 332;
	public static readonly RULE_restartServer = 333;
	public static readonly RULE_expr = 334;
	public static readonly RULE_boolPri = 335;
	public static readonly RULE_compOp = 336;
	public static readonly RULE_predicate = 337;
	public static readonly RULE_predicateOperations = 338;
	public static readonly RULE_bitExpr = 339;
	public static readonly RULE_simpleExpr = 340;
	public static readonly RULE_arrayCast = 341;
	public static readonly RULE_jsonOperator = 342;
	public static readonly RULE_sumExpr = 343;
	public static readonly RULE_groupingOperation = 344;
	public static readonly RULE_windowFunctionCall = 345;
	public static readonly RULE_windowingClause = 346;
	public static readonly RULE_leadLagInfo = 347;
	public static readonly RULE_nullTreatment = 348;
	public static readonly RULE_jsonFunction = 349;
	public static readonly RULE_inSumExpr = 350;
	public static readonly RULE_identListArg = 351;
	public static readonly RULE_identList = 352;
	public static readonly RULE_fulltextOptions = 353;
	public static readonly RULE_runtimeFunctionCall = 354;
	public static readonly RULE_geometryFunction = 355;
	public static readonly RULE_timeFunctionParameters = 356;
	public static readonly RULE_fractionalPrecision = 357;
	public static readonly RULE_weightStringLevels = 358;
	public static readonly RULE_weightStringLevelListItem = 359;
	public static readonly RULE_dateTimeTtype = 360;
	public static readonly RULE_trimFunction = 361;
	public static readonly RULE_substringFunction = 362;
	public static readonly RULE_functionCall = 363;
	public static readonly RULE_udfExprList = 364;
	public static readonly RULE_udfExpr = 365;
	public static readonly RULE_variable = 366;
	public static readonly RULE_userVariable = 367;
	public static readonly RULE_systemVariable = 368;
	public static readonly RULE_internalVariableName = 369;
	public static readonly RULE_whenExpression = 370;
	public static readonly RULE_thenExpression = 371;
	public static readonly RULE_elseExpression = 372;
	public static readonly RULE_castType = 373;
	public static readonly RULE_exprList = 374;
	public static readonly RULE_charset = 375;
	public static readonly RULE_notRule = 376;
	public static readonly RULE_not2Rule = 377;
	public static readonly RULE_interval = 378;
	public static readonly RULE_intervalTimeStamp = 379;
	public static readonly RULE_exprListWithParentheses = 380;
	public static readonly RULE_exprWithParentheses = 381;
	public static readonly RULE_simpleExprWithParentheses = 382;
	public static readonly RULE_orderList = 383;
	public static readonly RULE_orderExpression = 384;
	public static readonly RULE_groupList = 385;
	public static readonly RULE_groupingExpression = 386;
	public static readonly RULE_channel = 387;
	public static readonly RULE_compoundStatement = 388;
	public static readonly RULE_returnStatement = 389;
	public static readonly RULE_ifStatement = 390;
	public static readonly RULE_ifBody = 391;
	public static readonly RULE_thenStatement = 392;
	public static readonly RULE_compoundStatementList = 393;
	public static readonly RULE_caseStatement = 394;
	public static readonly RULE_elseStatement = 395;
	public static readonly RULE_labeledBlock = 396;
	public static readonly RULE_unlabeledBlock = 397;
	public static readonly RULE_label = 398;
	public static readonly RULE_beginEndBlock = 399;
	public static readonly RULE_labeledControl = 400;
	public static readonly RULE_unlabeledControl = 401;
	public static readonly RULE_loopBlock = 402;
	public static readonly RULE_whileDoBlock = 403;
	public static readonly RULE_repeatUntilBlock = 404;
	public static readonly RULE_spDeclarations = 405;
	public static readonly RULE_spDeclaration = 406;
	public static readonly RULE_variableDeclaration = 407;
	public static readonly RULE_conditionDeclaration = 408;
	public static readonly RULE_spCondition = 409;
	public static readonly RULE_sqlstate = 410;
	public static readonly RULE_handlerDeclaration = 411;
	public static readonly RULE_handlerCondition = 412;
	public static readonly RULE_cursorDeclaration = 413;
	public static readonly RULE_iterateStatement = 414;
	public static readonly RULE_leaveStatement = 415;
	public static readonly RULE_getDiagnostics = 416;
	public static readonly RULE_signalAllowedExpr = 417;
	public static readonly RULE_statementInformationItem = 418;
	public static readonly RULE_conditionInformationItem = 419;
	public static readonly RULE_signalInformationItemName = 420;
	public static readonly RULE_signalStatement = 421;
	public static readonly RULE_resignalStatement = 422;
	public static readonly RULE_signalInformationItem = 423;
	public static readonly RULE_cursorOpen = 424;
	public static readonly RULE_cursorClose = 425;
	public static readonly RULE_cursorFetch = 426;
	public static readonly RULE_schedule = 427;
	public static readonly RULE_columnDefinition = 428;
	public static readonly RULE_checkOrReferences = 429;
	public static readonly RULE_checkConstraint = 430;
	public static readonly RULE_constraintEnforcement = 431;
	public static readonly RULE_tableConstraintDef = 432;
	public static readonly RULE_constraintName = 433;
	public static readonly RULE_fieldDefinition = 434;
	public static readonly RULE_columnAttribute = 435;
	public static readonly RULE_columnFormat = 436;
	public static readonly RULE_storageMedia = 437;
	public static readonly RULE_gcolAttribute = 438;
	public static readonly RULE_references = 439;
	public static readonly RULE_deleteOption = 440;
	public static readonly RULE_keyList = 441;
	public static readonly RULE_keyPart = 442;
	public static readonly RULE_keyListWithExpression = 443;
	public static readonly RULE_keyPartOrExpression = 444;
	public static readonly RULE_keyListVariants = 445;
	public static readonly RULE_indexType = 446;
	public static readonly RULE_indexOption = 447;
	public static readonly RULE_commonIndexOption = 448;
	public static readonly RULE_visibility = 449;
	public static readonly RULE_indexTypeClause = 450;
	public static readonly RULE_fulltextIndexOption = 451;
	public static readonly RULE_spatialIndexOption = 452;
	public static readonly RULE_dataTypeDefinition = 453;
	public static readonly RULE_dataType = 454;
	public static readonly RULE_nchar = 455;
	public static readonly RULE_realType = 456;
	public static readonly RULE_fieldLength = 457;
	public static readonly RULE_fieldOptions = 458;
	public static readonly RULE_charsetWithOptBinary = 459;
	public static readonly RULE_ascii = 460;
	public static readonly RULE_unicode = 461;
	public static readonly RULE_wsNumCodepoints = 462;
	public static readonly RULE_typeDatetimePrecision = 463;
	public static readonly RULE_charsetName = 464;
	public static readonly RULE_collationName = 465;
	public static readonly RULE_createTableOptions = 466;
	public static readonly RULE_createTableOptionsSpaceSeparated = 467;
	public static readonly RULE_createTableOption = 468;
	public static readonly RULE_ternaryOption = 469;
	public static readonly RULE_defaultCollation = 470;
	public static readonly RULE_defaultEncryption = 471;
	public static readonly RULE_defaultCharset = 472;
	public static readonly RULE_partitionClause = 473;
	public static readonly RULE_partitionTypeDef = 474;
	public static readonly RULE_subPartitions = 475;
	public static readonly RULE_partitionKeyAlgorithm = 476;
	public static readonly RULE_partitionDefinitions = 477;
	public static readonly RULE_partitionDefinition = 478;
	public static readonly RULE_partitionValuesIn = 479;
	public static readonly RULE_partitionOption = 480;
	public static readonly RULE_subpartitionDefinition = 481;
	public static readonly RULE_partitionValueItemListParen = 482;
	public static readonly RULE_partitionValueItem = 483;
	public static readonly RULE_definerClause = 484;
	public static readonly RULE_ifExists = 485;
	public static readonly RULE_ifNotExists = 486;
	public static readonly RULE_procedureParameter = 487;
	public static readonly RULE_functionParameter = 488;
	public static readonly RULE_collate = 489;
	public static readonly RULE_typeWithOptCollate = 490;
	public static readonly RULE_schemaIdentifierPair = 491;
	public static readonly RULE_viewRefList = 492;
	public static readonly RULE_updateList = 493;
	public static readonly RULE_updateElement = 494;
	public static readonly RULE_charsetClause = 495;
	public static readonly RULE_fieldsClause = 496;
	public static readonly RULE_fieldTerm = 497;
	public static readonly RULE_linesClause = 498;
	public static readonly RULE_lineTerm = 499;
	public static readonly RULE_userList = 500;
	public static readonly RULE_createUserList = 501;
	public static readonly RULE_alterUserList = 502;
	public static readonly RULE_createUserEntry = 503;
	public static readonly RULE_alterUserEntry = 504;
	public static readonly RULE_retainCurrentPassword = 505;
	public static readonly RULE_discardOldPassword = 506;
	public static readonly RULE_replacePassword = 507;
	public static readonly RULE_userIdentifierOrText = 508;
	public static readonly RULE_user = 509;
	public static readonly RULE_likeClause = 510;
	public static readonly RULE_likeOrWhere = 511;
	public static readonly RULE_onlineOption = 512;
	public static readonly RULE_noWriteToBinLog = 513;
	public static readonly RULE_usePartition = 514;
	public static readonly RULE_fieldIdentifier = 515;
	public static readonly RULE_columnName = 516;
	public static readonly RULE_columnInternalRef = 517;
	public static readonly RULE_columnInternalRefList = 518;
	public static readonly RULE_columnRef = 519;
	public static readonly RULE_insertIdentifier = 520;
	public static readonly RULE_indexName = 521;
	public static readonly RULE_indexRef = 522;
	public static readonly RULE_tableWild = 523;
	public static readonly RULE_schemaName = 524;
	public static readonly RULE_schemaRef = 525;
	public static readonly RULE_procedureName = 526;
	public static readonly RULE_procedureRef = 527;
	public static readonly RULE_functionName = 528;
	public static readonly RULE_functionRef = 529;
	public static readonly RULE_triggerName = 530;
	public static readonly RULE_triggerRef = 531;
	public static readonly RULE_viewName = 532;
	public static readonly RULE_viewRef = 533;
	public static readonly RULE_tablespaceName = 534;
	public static readonly RULE_tablespaceRef = 535;
	public static readonly RULE_logfileGroupName = 536;
	public static readonly RULE_logfileGroupRef = 537;
	public static readonly RULE_eventName = 538;
	public static readonly RULE_eventRef = 539;
	public static readonly RULE_udfName = 540;
	public static readonly RULE_serverName = 541;
	public static readonly RULE_serverRef = 542;
	public static readonly RULE_engineRef = 543;
	public static readonly RULE_tableName = 544;
	public static readonly RULE_filterTableRef = 545;
	public static readonly RULE_tableRefWithWildcard = 546;
	public static readonly RULE_tableRef = 547;
	public static readonly RULE_tableRefList = 548;
	public static readonly RULE_tableAliasRefList = 549;
	public static readonly RULE_parameterName = 550;
	public static readonly RULE_labelIdentifier = 551;
	public static readonly RULE_labelRef = 552;
	public static readonly RULE_roleIdentifier = 553;
	public static readonly RULE_roleRef = 554;
	public static readonly RULE_pluginRef = 555;
	public static readonly RULE_componentRef = 556;
	public static readonly RULE_resourceGroupRef = 557;
	public static readonly RULE_windowName = 558;
	public static readonly RULE_pureIdentifier = 559;
	public static readonly RULE_identifier = 560;
	public static readonly RULE_identifierList = 561;
	public static readonly RULE_identifierListWithParentheses = 562;
	public static readonly RULE_qualifiedIdentifier = 563;
	public static readonly RULE_simpleIdentifier = 564;
	public static readonly RULE_dotIdentifier = 565;
	public static readonly RULE_ulong_number = 566;
	public static readonly RULE_real_ulong_number = 567;
	public static readonly RULE_ulonglong_number = 568;
	public static readonly RULE_real_ulonglong_number = 569;
	public static readonly RULE_literal = 570;
	public static readonly RULE_signedLiteral = 571;
	public static readonly RULE_stringList = 572;
	public static readonly RULE_textStringLiteral = 573;
	public static readonly RULE_textString = 574;
	public static readonly RULE_textStringHash = 575;
	public static readonly RULE_textLiteral = 576;
	public static readonly RULE_textStringNoLinebreak = 577;
	public static readonly RULE_textStringLiteralList = 578;
	public static readonly RULE_numLiteral = 579;
	public static readonly RULE_boolLiteral = 580;
	public static readonly RULE_nullLiteral = 581;
	public static readonly RULE_temporalLiteral = 582;
	public static readonly RULE_floatOptions = 583;
	public static readonly RULE_standardFloatOptions = 584;
	public static readonly RULE_precision = 585;
	public static readonly RULE_textOrIdentifier = 586;
	public static readonly RULE_lValueIdentifier = 587;
	public static readonly RULE_roleIdentifierOrText = 588;
	public static readonly RULE_sizeNumber = 589;
	public static readonly RULE_parentheses = 590;
	public static readonly RULE_equal = 591;
	public static readonly RULE_optionType = 592;
	public static readonly RULE_varIdentType = 593;
	public static readonly RULE_setVarIdentType = 594;
	public static readonly RULE_identifierKeyword = 595;
	public static readonly RULE_identifierKeywordsAmbiguous1RolesAndLabels = 596;
	public static readonly RULE_identifierKeywordsAmbiguous2Labels = 597;
	public static readonly RULE_labelKeyword = 598;
	public static readonly RULE_identifierKeywordsAmbiguous3Roles = 599;
	public static readonly RULE_identifierKeywordsUnambiguous = 600;
	public static readonly RULE_roleKeyword = 601;
	public static readonly RULE_lValueKeyword = 602;
	public static readonly RULE_identifierKeywordsAmbiguous4SystemVariables = 603;
	public static readonly RULE_roleOrIdentifierKeyword = 604;
	public static readonly RULE_roleOrLabelKeyword = 605;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"sql_script", "query", "simpleStatement", "alterStatement", "alterDatabase", 
		"alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule", 
		"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
		"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
		"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
		"createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace", 
		"tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption", 
		"tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
		"tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", 
		"tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
		"dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
		"fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto", 
		"queryExpression", "queryExpressionBody", "queryExpressionParens", "querySpecification", 
		"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
		"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
		"windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "selectOption", "lockingClause", 
		"lockStrengh", "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
		"whereClause", "tableReference", "escapedTableReference", "joinedTable", 
		"naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable", 
		"singleTableParens", "derivedTable", "tableReferenceListParens", "tableFunction", 
		"columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
		"unionOption", "tableAlias", "indexHintList", "indexHint", "indexHintType", 
		"keyOrIndex", "constraintKeyType", "indexHintClause", "indexList", "indexListElement", 
		"updateStatement", "transactionOrLockingStatement", "transactionStatement", 
		"beginWork", "transactionCharacteristic", "savepointStatement", "lockStatement", 
		"lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement", 
		"resetOption", "masterResetOptions", "replicationLoad", "changeMaster", 
		"changeMasterOptions", "masterOption", "privilegeCheckDef", "masterTlsCiphersuitesDef", 
		"masterFileDef", "serverIdList", "changeReplication", "filterDefinition", 
		"filterDbList", "filterTableList", "filterStringList", "filterWildDbTableString", 
		"filterDbPairList", "slave", "slaveUntilOptions", "slaveConnectionOptions", 
		"slaveThreadOptions", "slaveThreadOption", "groupReplication", "preparedStatement", 
		"executeStatement", "executeVarList", "cloneStatement", "dataDirSSL", 
		"ssl", "accountManagementStatement", "alterUser", "alterUserTail", "userFunction", 
		"createUser", "createUserTail", "defaultRoleClause", "requireClause", 
		"connectOptions", "accountLockPasswordExpireOptions", "dropUser", "grant", 
		"grantTargetList", "grantOptions", "exceptRoleList", "withRoles", "grantAs", 
		"versionedRequireClause", "renameUser", "revoke", "onTypeTo", "aclType", 
		"roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", "requireList", 
		"requireListElement", "grantOption", "setRole", "roleList", "role", "tableAdministrationStatement", 
		"histogram", "checkOption", "repairType", "installUninstallStatment", 
		"setStatement", "startOptionValueList", "transactionCharacteristics", 
		"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
		"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
		"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
		"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeCommand", "explainCommand", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", 
		"identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression", 
		"keyPartOrExpression", "keyListVariants", "indexType", "indexOption", 
		"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType", 
		"fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode", 
		"wsNumCodepoints", "typeDatetimePrecision", "charsetName", "collationName", 
		"createTableOptions", "createTableOptionsSpaceSeparated", "createTableOption", 
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter", 
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm", 
		"linesClause", "lineTerm", "userList", "createUserList", "alterUserList", 
		"createUserEntry", "alterUserEntry", "retainCurrentPassword", "discardOldPassword", 
		"replacePassword", "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
		"onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
		"columnName", "columnInternalRef", "columnInternalRefList", "columnRef", 
		"insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName", 
		"schemaRef", "procedureName", "procedureRef", "functionName", "functionRef", 
		"triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral", 
		"textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral", 
		"nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
		"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
		"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
		"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "'='", "':='", 
		"'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", 
		"'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", 
		"'->>'", "'@'", undefined, "'@@'", "'\\'", "'?'", undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'<>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", "BACKUP_SYMBOL", 
		"BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CHARSET_SYMBOL", "CHECKSUM_SYMBOL", 
		"CLOSE_SYMBOL", "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL", 
		"DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", "FLUSH_SYMBOL", 
		"FOLLOWS_SYMBOL", "FORMAT_SYMBOL", "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL", 
		"HELP_SYMBOL", "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", "NO_SYMBOL", 
		"OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", "PARSER_SYMBOL", "PARTITION_SYMBOL", 
		"PORT_SYMBOL", "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", "REPAIR_SYMBOL", 
		"RESET_SYMBOL", "RESTORE_SYMBOL", "ROLLBACK_SYMBOL", "SAVEPOINT_SYMBOL", 
		"SECURITY_SYMBOL", "SERVER_SYMBOL", "SIGNED_SYMBOL", "SLAVE_SYMBOL", "SOCKET_SYMBOL", 
		"SONAME_SYMBOL", "START_SYMBOL", "STOP_SYMBOL", "TRUNCATE_SYMBOL", "UNICODE_SYMBOL", 
		"UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", "WRAPPER_SYMBOL", "XA_SYMBOL", "SHUTDOWN_SYMBOL", 
		"ACTION_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
		"ALGORITHM_SYMBOL", "ANALYZE_SYMBOL", "ANY_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
		"AVG_SYMBOL", "BINLOG_SYMBOL", "BIT_SYMBOL", "BLOCK_SYMBOL", "BOOL_SYMBOL", 
		"BOOLEAN_SYMBOL", "BTREE_SYMBOL", "CASCADED_SYMBOL", "CATALOG_NAME_SYMBOL", 
		"CHAIN_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL", 
		"CLASS_ORIGIN_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATION_SYMBOL", 
		"COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COLUMNS_SYMBOL", "COMMITTED_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"ENCRYPTION_SYMBOL", "CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONTEXT_SYMBOL", "CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", "CUBE_SYMBOL", 
		"CURRENT_SYMBOL", "CURSOR_NAME_SYMBOL", "DATA_SYMBOL", "DATAFILE_SYMBOL", 
		"DATETIME_SYMBOL", "DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL", 
		"DEFINER_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DIAGNOSTICS_SYMBOL", 
		"DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL", 
		"ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
		"ESCAPE_SYMBOL", "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL", 
		"EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "FAULTS_SYMBOL", 
		"FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", "FULL_SYMBOL", "FILE_SYMBOL", 
		"FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
		"GENERAL_SYMBOL", "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL", 
		"GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", "HOUR_SYMBOL", 
		"IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "INVOKER_SYMBOL", "IMPORT_SYMBOL", 
		"INDEXES_SYMBOL", "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL", 
		"IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "LAST_SYMBOL", "LEAVES_SYMBOL", 
		"LESS_SYMBOL", "LEVEL_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL", 
		"LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", "MASTER_SYMBOL", 
		"MASTER_HEARTBEAT_PERIOD_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL", 
		"MASTER_PASSWORD_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_SSL_SYMBOL", 
		"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
		"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
		"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
		"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
		"MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
		"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", 
		"MICROSECOND_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
		"MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
		"MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
		"NAME_SYMBOL", "NAMES_SYMBOL", "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
		"NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", "NODEGROUP_SYMBOL", 
		"NONE_SYMBOL", "NUMBER_SYMBOL", "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
		"ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARTIAL_SYMBOL", 
		"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
		"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", "POINT_SYMBOL", 
		"POLYGON_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIVILEGES_SYMBOL", 
		"PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", 
		"PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "READ_ONLY_SYMBOL", 
		"REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL", 
		"REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
		"RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", "RELOAD_SYMBOL", "REORGANIZE_SYMBOL", 
		"REPEATABLE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
		"REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL", 
		"REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL", 
		"RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL", 
		"ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", 
		"ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SCHEDULE_SYMBOL", 
		"SCHEMA_NAME_SYMBOL", "SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL", 
		"SESSION_SYMBOL", "SIMPLE_SYMBOL", "SHARE_SYMBOL", "SLOW_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
		"SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
		"SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", "STARTS_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STORAGE_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
		"SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL", 
		"SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "TABLE_NAME_SYMBOL", 
		"TABLES_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", "TEMPORARY_SYMBOL", 
		"TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", "TRANSACTION_SYMBOL", 
		"TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", 
		"TIME_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "FUNCTION_SYMBOL", 
		"UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL", 
		"UNKNOWN_SYMBOL", "UNTIL_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", 
		"USE_FRM_SYMBOL", "VARIABLES_SYMBOL", "VIEW_SYMBOL", "VALUE_SYMBOL", "WARNINGS_SYMBOL", 
		"WAIT_SYMBOL", "WEEK_SYMBOL", "WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", "X509_SYMBOL", 
		"XID_SYMBOL", "XML_SYMBOL", "YEAR_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
		"INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
		"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
		"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
		"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
		"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
		"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
		"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
		"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
		"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
		"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
		"ADD_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", "AND_SYMBOL", 
		"AS_SYMBOL", "ASC_SYMBOL", "ASENSITIVE_SYMBOL", "BEFORE_SYMBOL", "BETWEEN_SYMBOL", 
		"BIGINT_SYMBOL", "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
		"BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BOTH_SYMBOL", "BY_SYMBOL", 
		"CALL_SYMBOL", "CASCADE_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL", 
		"CHAR_SYMBOL", "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", "CONDITION_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
		"CREATE_SYMBOL", "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL", 
		"CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURTIME_SYMBOL", 
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", 
		"DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
		"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
		"DELAYED_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", 
		"DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL", 
		"ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPIRE_SYMBOL", 
		"EXPLAIN_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FETCH_SYMBOL", "FLOAT_SYMBOL", 
		"FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL", 
		"GET_SYMBOL", "GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
		"HAVING_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL", 
		"INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
		"INTERVAL_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
		"KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LEADING_SYMBOL", "LEAVE_SYMBOL", 
		"LEFT_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
		"LOAD_SYMBOL", "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", 
		"LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_BIND_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL", 
		"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
		"MEDIUMTEXT_SYMBOL", "MID_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
		"MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
		"NEG_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", "ON_SYMBOL", "ONLINE_SYMBOL", 
		"ONLY_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL", 
		"OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
		"OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", "PRIMARY_SYMBOL", 
		"PROCEDURE_SYMBOL", "PURGE_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL", 
		"READ_WRITE_SYMBOL", "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
		"REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", "RESTRICT_SYMBOL", "RETURN_SYMBOL", 
		"REVOKE_SYMBOL", "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL", 
		"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
		"SET_SYMBOL", "SET_VAR_SYMBOL", "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL", 
		"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
		"SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
		"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL", 
		"STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
		"STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
		"TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", "TINYBLOB_SYMBOL", 
		"TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRIGGER_SYMBOL", 
		"TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
		"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UPDATE_SYMBOL", "USAGE_SYMBOL", "USE_SYMBOL", 
		"USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
		"VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
		"VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
		"VIRTUAL_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", 
		"WITHOUT_SYMBOL", "WRITE_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "ZEROFILL_SYMBOL", 
		"PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", 
		"EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", 
		"JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", 
		"GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", 
		"REMOTE_SYMBOL", "CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", 
		"EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", 
		"LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", 
		"NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
		"PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
		"TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
		"NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
		"REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
		"SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
		"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
		"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "WHITESPACE", 
		"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
		"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
		"VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
		"NOT_EQUAL2_OPERATOR",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MultiQueryMySQLParser._LITERAL_NAMES, MultiQueryMySQLParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MultiQueryMySQLParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "MultiQueryMySQLParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return MultiQueryMySQLParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return MultiQueryMySQLParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(MultiQueryMySQLParser._ATN, this);
	}
	// @RuleVersion(0)
	public sql_script(): Sql_scriptContext {
		let _localctx: Sql_scriptContext = new Sql_scriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, MultiQueryMySQLParser.RULE_sql_script);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1215;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1212;
					this.query();
					}
					}
				}
				this.state = 1217;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
			}
			this.state = 1218;
			this.match(MultiQueryMySQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public query(): QueryContext {
		let _localctx: QueryContext = new QueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, MultiQueryMySQLParser.RULE_query);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1222;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {
			case 1:
				{
				this.state = 1220;
				this.simpleStatement();
				}
				break;

			case 2:
				{
				this.state = 1221;
				this.beginWork();
				}
				break;
			}
			this.state = 1225;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {
			case 1:
				{
				this.state = 1224;
				this.match(MultiQueryMySQLParser.SEMICOLON_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleStatement(): SimpleStatementContext {
		let _localctx: SimpleStatementContext = new SimpleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, MultiQueryMySQLParser.RULE_simpleStatement);
		try {
			this.state = 1261;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1227;
				this.alterStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1228;
				this.createStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1229;
				this.dropStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1230;
				this.renameTableStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1231;
				this.truncateTableStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1232;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 1233;
				this.importStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1234;
				this.callStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1235;
				this.deleteStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1236;
				this.doStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1237;
				this.handlerStatement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1238;
				this.insertStatement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1239;
				this.loadStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1240;
				this.replaceStatement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1241;
				this.selectStatement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1242;
				this.updateStatement();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1243;
				this.transactionOrLockingStatement();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1244;
				this.replicationStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1245;
				this.preparedStatement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1246;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 1247;
				this.cloneStatement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1248;
				this.accountManagementStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1249;
				this.tableAdministrationStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1250;
				this.installUninstallStatment();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1251;
				this.setStatement();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1252;
				this.showStatement();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1253;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 1254;
				this.resourceGroupManagement();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1255;
				this.otherAdministrativeStatement();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1256;
				this.utilityStatement();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1257;
				if (!(this.serverVersion >= 50604)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50604");
				}
				this.state = 1258;
				this.getDiagnostics();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1259;
				this.signalStatement();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1260;
				this.resignalStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatement(): AlterStatementContext {
		let _localctx: AlterStatementContext = new AlterStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, MultiQueryMySQLParser.RULE_alterStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1263;
			this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
			this.state = 1290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
			case 1:
				{
				this.state = 1264;
				this.alterTable();
				}
				break;

			case 2:
				{
				this.state = 1265;
				this.alterDatabase();
				}
				break;

			case 3:
				{
				this.state = 1266;
				this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
				this.state = 1267;
				this.procedureRef();
				this.state = 1269;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
				case 1:
					{
					this.state = 1268;
					this.routineAlterOptions();
					}
					break;
				}
				}
				break;

			case 4:
				{
				this.state = 1271;
				this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
				this.state = 1272;
				this.functionRef();
				this.state = 1274;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
				case 1:
					{
					this.state = 1273;
					this.routineAlterOptions();
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 1276;
				this.alterView();
				}
				break;

			case 6:
				{
				this.state = 1277;
				this.alterEvent();
				}
				break;

			case 7:
				{
				this.state = 1278;
				this.alterTablespace();
				}
				break;

			case 8:
				{
				this.state = 1279;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 1280;
				this.alterUndoTablespace();
				}
				break;

			case 9:
				{
				this.state = 1281;
				this.alterLogfileGroup();
				}
				break;

			case 10:
				{
				this.state = 1282;
				this.alterServer();
				}
				break;

			case 11:
				{
				this.state = 1283;
				if (!(this.serverVersion >= 50713)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50713");
				}
				this.state = 1284;
				this.match(MultiQueryMySQLParser.INSTANCE_SYMBOL);
				this.state = 1285;
				this.match(MultiQueryMySQLParser.ROTATE_SYMBOL);
				this.state = 1286;
				this.textOrIdentifier();
				this.state = 1287;
				this.match(MultiQueryMySQLParser.MASTER_SYMBOL);
				this.state = 1288;
				this.match(MultiQueryMySQLParser.KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let _localctx: AlterDatabaseContext = new AlterDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, MultiQueryMySQLParser.RULE_alterDatabase);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1292;
			this.match(MultiQueryMySQLParser.DATABASE_SYMBOL);
			this.state = 1293;
			this.schemaRef();
			this.state = 1304;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				{
				this.state = 1295;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1294;
						this.createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1297;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				{
				this.state = 1299;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 1300;
				this.match(MultiQueryMySQLParser.UPGRADE_SYMBOL);
				this.state = 1301;
				this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				this.state = 1302;
				this.match(MultiQueryMySQLParser.DIRECTORY_SYMBOL);
				this.state = 1303;
				this.match(MultiQueryMySQLParser.NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterEvent(): AlterEventContext {
		let _localctx: AlterEventContext = new AlterEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, MultiQueryMySQLParser.RULE_alterEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 1306;
				this.definerClause();
				}
			}

			this.state = 1309;
			this.match(MultiQueryMySQLParser.EVENT_SYMBOL);
			this.state = 1310;
			this.eventRef();
			this.state = 1314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				{
				this.state = 1311;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 1312;
				this.match(MultiQueryMySQLParser.SCHEDULE_SYMBOL);
				this.state = 1313;
				this.schedule();
				}
				break;
			}
			this.state = 1322;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 12, this._ctx) ) {
			case 1:
				{
				this.state = 1316;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 1317;
				this.match(MultiQueryMySQLParser.COMPLETION_SYMBOL);
				this.state = 1319;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NOT_SYMBOL) {
					{
					this.state = 1318;
					this.match(MultiQueryMySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 1321;
				this.match(MultiQueryMySQLParser.PRESERVE_SYMBOL);
				}
				break;
			}
			this.state = 1327;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				{
				this.state = 1324;
				this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
				this.state = 1325;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 1326;
				this.identifier();
				}
				break;
			}
			this.state = 1335;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				{
				this.state = 1329;
				this.match(MultiQueryMySQLParser.ENABLE_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 1330;
				this.match(MultiQueryMySQLParser.DISABLE_SYMBOL);
				this.state = 1333;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 14, this._ctx) ) {
				case 1:
					{
					this.state = 1331;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 1332;
					this.match(MultiQueryMySQLParser.SLAVE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			this.state = 1339;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				{
				this.state = 1337;
				this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 1338;
				this.textLiteral();
				}
				break;
			}
			this.state = 1343;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				{
				this.state = 1341;
				this.match(MultiQueryMySQLParser.DO_SYMBOL);
				this.state = 1342;
				this.compoundStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroup(): AlterLogfileGroupContext {
		let _localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, MultiQueryMySQLParser.RULE_alterLogfileGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1345;
			this.match(MultiQueryMySQLParser.LOGFILE_SYMBOL);
			this.state = 1346;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 1347;
			this.logfileGroupRef();
			this.state = 1348;
			this.match(MultiQueryMySQLParser.ADD_SYMBOL);
			this.state = 1349;
			this.match(MultiQueryMySQLParser.UNDOFILE_SYMBOL);
			this.state = 1350;
			this.textLiteral();
			this.state = 1352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 18, this._ctx) ) {
			case 1:
				{
				this.state = 1351;
				this.alterLogfileGroupOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
		let _localctx: AlterLogfileGroupOptionsContext = new AlterLogfileGroupOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, MultiQueryMySQLParser.RULE_alterLogfileGroupOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1354;
			this.alterLogfileGroupOption();
			this.state = 1361;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1356;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
						{
						this.state = 1355;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 1358;
					this.alterLogfileGroupOption();
					}
					}
				}
				this.state = 1363;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroupOption(): AlterLogfileGroupOptionContext {
		let _localctx: AlterLogfileGroupOptionContext = new AlterLogfileGroupOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, MultiQueryMySQLParser.RULE_alterLogfileGroupOption);
		try {
			this.state = 1367;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1364;
				this.tsOptionInitialSize();
				}
				break;
			case MultiQueryMySQLParser.ENGINE_SYMBOL:
			case MultiQueryMySQLParser.STORAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1365;
				this.tsOptionEngine();
				}
				break;
			case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
			case MultiQueryMySQLParser.WAIT_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1366;
				this.tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let _localctx: AlterServerContext = new AlterServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, MultiQueryMySQLParser.RULE_alterServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1369;
			this.match(MultiQueryMySQLParser.SERVER_SYMBOL);
			this.state = 1370;
			this.serverRef();
			this.state = 1371;
			this.serverOptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTable(): AlterTableContext {
		let _localctx: AlterTableContext = new AlterTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, MultiQueryMySQLParser.RULE_alterTable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1374;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 22, this._ctx) ) {
			case 1:
				{
				this.state = 1373;
				this.onlineOption();
				}
				break;
			}
			this.state = 1378;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 1376;
				if (!(this.serverVersion < 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50700");
				}
				this.state = 1377;
				this.match(MultiQueryMySQLParser.IGNORE_SYMBOL);
				}
				break;
			}
			this.state = 1380;
			this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
			this.state = 1381;
			this.tableRef();
			this.state = 1383;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				this.state = 1382;
				this.alterTableActions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTableActions(): AlterTableActionsContext {
		let _localctx: AlterTableActionsContext = new AlterTableActionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, MultiQueryMySQLParser.RULE_alterTableActions);
		try {
			this.state = 1398;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 27, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1385;
				this.alterCommandList();
				this.state = 1388;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 25, this._ctx) ) {
				case 1:
					{
					this.state = 1386;
					this.partitionClause();
					}
					break;

				case 2:
					{
					this.state = 1387;
					this.removePartitioning();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1390;
				this.partitionClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1391;
				this.removePartitioning();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1395;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 26, this._ctx) ) {
				case 1:
					{
					this.state = 1392;
					this.alterCommandsModifierList();
					this.state = 1393;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					}
					break;
				}
				this.state = 1397;
				this.standaloneAlterCommands();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterCommandList(): AlterCommandListContext {
		let _localctx: AlterCommandListContext = new AlterCommandListContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, MultiQueryMySQLParser.RULE_alterCommandList);
		try {
			this.state = 1407;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 29, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1400;
				this.alterCommandsModifierList();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1404;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 28, this._ctx) ) {
				case 1:
					{
					this.state = 1401;
					this.alterCommandsModifierList();
					this.state = 1402;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					}
					break;
				}
				this.state = 1406;
				this.alterList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterCommandsModifierList(): AlterCommandsModifierListContext {
		let _localctx: AlterCommandsModifierListContext = new AlterCommandsModifierListContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, MultiQueryMySQLParser.RULE_alterCommandsModifierList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1409;
			this.alterCommandsModifier();
			this.state = 1414;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1410;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 1411;
					this.alterCommandsModifier();
					}
					}
				}
				this.state = 1416;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standaloneAlterCommands(): StandaloneAlterCommandsContext {
		let _localctx: StandaloneAlterCommandsContext = new StandaloneAlterCommandsContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, MultiQueryMySQLParser.RULE_standaloneAlterCommands);
		let _la: number;
		try {
			this.state = 1424;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1417;
				this.match(MultiQueryMySQLParser.DISCARD_SYMBOL);
				this.state = 1418;
				this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1419;
				this.match(MultiQueryMySQLParser.IMPORT_SYMBOL);
				this.state = 1420;
				this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1421;
				this.alterPartition();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1422;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 1423;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL || _la === MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterPartition(): AlterPartitionContext {
		let _localctx: AlterPartitionContext = new AlterPartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, MultiQueryMySQLParser.RULE_alterPartition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1523;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 45, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1426;
				this.match(MultiQueryMySQLParser.ADD_SYMBOL);
				this.state = 1427;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1429;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					this.state = 1428;
					this.noWriteToBinLog();
					}
				}

				this.state = 1434;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.OPEN_PAR_SYMBOL:
					{
					this.state = 1431;
					this.partitionDefinitions();
					}
					break;
				case MultiQueryMySQLParser.PARTITIONS_SYMBOL:
					{
					this.state = 1432;
					this.match(MultiQueryMySQLParser.PARTITIONS_SYMBOL);
					this.state = 1433;
					this.real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1436;
				this.match(MultiQueryMySQLParser.DROP_SYMBOL);
				this.state = 1437;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1438;
				this.identifierList();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1439;
				this.match(MultiQueryMySQLParser.REBUILD_SYMBOL);
				this.state = 1440;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1442;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 34, this._ctx) ) {
				case 1:
					{
					this.state = 1441;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1444;
				this.allOrPartitionNameList();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1445;
				this.match(MultiQueryMySQLParser.OPTIMIZE_SYMBOL);
				this.state = 1446;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1448;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 35, this._ctx) ) {
				case 1:
					{
					this.state = 1447;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1450;
				this.allOrPartitionNameList();
				this.state = 1452;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 36, this._ctx) ) {
				case 1:
					{
					this.state = 1451;
					this.noWriteToBinLog();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1454;
				this.match(MultiQueryMySQLParser.ANALYZE_SYMBOL);
				this.state = 1455;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1457;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 37, this._ctx) ) {
				case 1:
					{
					this.state = 1456;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1459;
				this.allOrPartitionNameList();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1460;
				this.match(MultiQueryMySQLParser.CHECK_SYMBOL);
				this.state = 1461;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1462;
				this.allOrPartitionNameList();
				this.state = 1466;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1463;
						this.checkOption();
						}
						}
					}
					this.state = 1468;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1469;
				this.match(MultiQueryMySQLParser.REPAIR_SYMBOL);
				this.state = 1470;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1472;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 39, this._ctx) ) {
				case 1:
					{
					this.state = 1471;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1474;
				this.allOrPartitionNameList();
				this.state = 1478;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1475;
						this.repairType();
						}
						}
					}
					this.state = 1480;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1481;
				this.match(MultiQueryMySQLParser.COALESCE_SYMBOL);
				this.state = 1482;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					this.state = 1483;
					this.noWriteToBinLog();
					}
				}

				this.state = 1486;
				this.real_ulong_number();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1487;
				this.match(MultiQueryMySQLParser.TRUNCATE_SYMBOL);
				this.state = 1488;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1489;
				this.allOrPartitionNameList();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1490;
				this.reorgPartitionRule();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1491;
				this.match(MultiQueryMySQLParser.REORGANIZE_SYMBOL);
				this.state = 1492;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1494;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 42, this._ctx) ) {
				case 1:
					{
					this.state = 1493;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1500;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 43, this._ctx) ) {
				case 1:
					{
					this.state = 1496;
					this.identifierList();
					this.state = 1497;
					this.match(MultiQueryMySQLParser.INTO_SYMBOL);
					this.state = 1498;
					this.partitionDefinitions();
					}
					break;
				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1502;
				this.match(MultiQueryMySQLParser.EXCHANGE_SYMBOL);
				this.state = 1503;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1504;
				this.identifier();
				this.state = 1505;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 1506;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 1507;
				this.tableRef();
				this.state = 1509;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 44, this._ctx) ) {
				case 1:
					{
					this.state = 1508;
					this.withValidation();
					}
					break;
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1511;
				if (!(this.serverVersion >= 50704)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50704");
				}
				this.state = 1512;
				this.match(MultiQueryMySQLParser.DISCARD_SYMBOL);
				this.state = 1513;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1514;
				this.allOrPartitionNameList();
				this.state = 1515;
				this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1517;
				if (!(this.serverVersion >= 50704)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50704");
				}
				this.state = 1518;
				this.match(MultiQueryMySQLParser.IMPORT_SYMBOL);
				this.state = 1519;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 1520;
				this.allOrPartitionNameList();
				this.state = 1521;
				this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterList(): AlterListContext {
		let _localctx: AlterListContext = new AlterListContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, MultiQueryMySQLParser.RULE_alterList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1527;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				{
				this.state = 1525;
				this.alterListItem();
				}
				break;

			case 2:
				{
				this.state = 1526;
				this.createTableOptionsSpaceSeparated();
				}
				break;
			}
			this.state = 1537;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1529;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 1533;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 47, this._ctx) ) {
					case 1:
						{
						this.state = 1530;
						this.alterListItem();
						}
						break;

					case 2:
						{
						this.state = 1531;
						this.alterCommandsModifier();
						}
						break;

					case 3:
						{
						this.state = 1532;
						this.createTableOptionsSpaceSeparated();
						}
						break;
					}
					}
					}
				}
				this.state = 1539;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterCommandsModifier(): AlterCommandsModifierContext {
		let _localctx: AlterCommandsModifierContext = new AlterCommandsModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, MultiQueryMySQLParser.RULE_alterCommandsModifier);
		try {
			this.state = 1543;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 49, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1540;
				this.alterAlgorithmOption();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1541;
				this.alterLockOption();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1542;
				this.withValidation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterListItem(): AlterListItemContext {
		let _localctx: AlterListItemContext = new AlterListItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, MultiQueryMySQLParser.RULE_alterListItem);
		let _la: number;
		try {
			this.state = 1678;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 69, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1545;
				this.match(MultiQueryMySQLParser.ADD_SYMBOL);
				this.state = 1547;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 50, this._ctx) ) {
				case 1:
					{
					this.state = 1546;
					this.match(MultiQueryMySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1561;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
				case 1:
					{
					this.state = 1549;
					this.identifier();
					this.state = 1550;
					this.fieldDefinition();
					this.state = 1552;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 51, this._ctx) ) {
					case 1:
						{
						this.state = 1551;
						this.checkOrReferences();
						}
						break;
					}
					this.state = 1555;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
					case 1:
						{
						this.state = 1554;
						this.place();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 1557;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 1558;
					this.tableElementList();
					this.state = 1559;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1563;
				this.match(MultiQueryMySQLParser.ADD_SYMBOL);
				this.state = 1564;
				this.tableConstraintDef();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1565;
				this.match(MultiQueryMySQLParser.CHANGE_SYMBOL);
				this.state = 1567;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 54, this._ctx) ) {
				case 1:
					{
					this.state = 1566;
					this.match(MultiQueryMySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1569;
				this.columnInternalRef();
				this.state = 1570;
				this.identifier();
				this.state = 1571;
				this.fieldDefinition();
				this.state = 1573;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 55, this._ctx) ) {
				case 1:
					{
					this.state = 1572;
					this.place();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1575;
				this.match(MultiQueryMySQLParser.MODIFY_SYMBOL);
				this.state = 1577;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 56, this._ctx) ) {
				case 1:
					{
					this.state = 1576;
					this.match(MultiQueryMySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1579;
				this.columnInternalRef();
				this.state = 1580;
				this.fieldDefinition();
				this.state = 1582;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 57, this._ctx) ) {
				case 1:
					{
					this.state = 1581;
					this.place();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1584;
				this.match(MultiQueryMySQLParser.DROP_SYMBOL);
				this.state = 1607;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 62, this._ctx) ) {
				case 1:
					{
					this.state = 1586;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
					case 1:
						{
						this.state = 1585;
						this.match(MultiQueryMySQLParser.COLUMN_SYMBOL);
						}
						break;
					}
					this.state = 1588;
					this.columnInternalRef();
					this.state = 1590;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 59, this._ctx) ) {
					case 1:
						{
						this.state = 1589;
						this.restrict();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 1592;
					this.match(MultiQueryMySQLParser.FOREIGN_SYMBOL);
					this.state = 1593;
					this.match(MultiQueryMySQLParser.KEY_SYMBOL);
					this.state = 1600;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
					case 1:
						{
						this.state = 1594;
						if (!(this.serverVersion >= 50700)) {
							throw new FailedPredicateException(this, "this.serverVersion >= 50700");
						}
						this.state = 1595;
						this.columnInternalRef();
						}
						break;

					case 2:
						{
						this.state = 1596;
						if (!(this.serverVersion < 50700)) {
							throw new FailedPredicateException(this, "this.serverVersion < 50700");
						}
						this.state = 1598;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
						case 1:
							{
							this.state = 1597;
							this.columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 1602;
					this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
					this.state = 1603;
					this.match(MultiQueryMySQLParser.KEY_SYMBOL);
					}
					break;

				case 4:
					{
					this.state = 1604;
					this.keyOrIndex();
					this.state = 1605;
					this.indexRef();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1609;
				this.match(MultiQueryMySQLParser.DISABLE_SYMBOL);
				this.state = 1610;
				this.match(MultiQueryMySQLParser.KEYS_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1611;
				this.match(MultiQueryMySQLParser.ENABLE_SYMBOL);
				this.state = 1612;
				this.match(MultiQueryMySQLParser.KEYS_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1613;
				this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
				this.state = 1615;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 63, this._ctx) ) {
				case 1:
					{
					this.state = 1614;
					this.match(MultiQueryMySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1617;
				this.columnInternalRef();
				this.state = 1627;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.SET_SYMBOL:
					{
					this.state = 1618;
					this.match(MultiQueryMySQLParser.SET_SYMBOL);
					this.state = 1619;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					this.state = 1623;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 64, this._ctx) ) {
					case 1:
						{
						this.state = 1620;
						if (!(this.serverVersion >= 80014)) {
							throw new FailedPredicateException(this, "this.serverVersion >= 80014");
						}
						this.state = 1621;
						this.exprWithParentheses();
						}
						break;

					case 2:
						{
						this.state = 1622;
						this.signedLiteral();
						}
						break;
					}
					}
					break;
				case MultiQueryMySQLParser.DROP_SYMBOL:
					{
					this.state = 1625;
					this.match(MultiQueryMySQLParser.DROP_SYMBOL);
					this.state = 1626;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1629;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 1630;
				this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
				this.state = 1631;
				this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 1632;
				this.indexRef();
				this.state = 1633;
				this.visibility();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1635;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 1636;
				this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
				this.state = 1637;
				this.match(MultiQueryMySQLParser.CHECK_SYMBOL);
				this.state = 1638;
				this.identifier();
				this.state = 1639;
				this.constraintEnforcement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1641;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 1642;
				this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
				this.state = 1643;
				this.match(MultiQueryMySQLParser.COLUMN_SYMBOL);
				this.state = 1644;
				this.columnInternalRef();
				this.state = 1645;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 1646;
				this.identifier();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1648;
				this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
				this.state = 1650;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 66, this._ctx) ) {
				case 1:
					{
					this.state = 1649;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.AS_SYMBOL || _la === MultiQueryMySQLParser.TO_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1652;
				this.tableName();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1653;
				if (!(this.serverVersion >= 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50700");
				}
				this.state = 1654;
				this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
				this.state = 1655;
				this.keyOrIndex();
				this.state = 1656;
				this.indexRef();
				this.state = 1657;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 1658;
				this.indexName();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1660;
				this.match(MultiQueryMySQLParser.CONVERT_SYMBOL);
				this.state = 1661;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 1662;
				this.charset();
				this.state = 1666;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
				case 1:
					{
					this.state = 1663;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 1664;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 1665;
					this.charsetName();
					}
					break;
				}
				this.state = 1669;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 68, this._ctx) ) {
				case 1:
					{
					this.state = 1668;
					this.collate();
					}
					break;
				}
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1671;
				this.match(MultiQueryMySQLParser.FORCE_SYMBOL);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1672;
				this.match(MultiQueryMySQLParser.ORDER_SYMBOL);
				this.state = 1673;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 1674;
				this.alterOrderList();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1675;
				if (!(this.serverVersion >= 50708 && this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50708 && this.serverVersion < 80000");
				}
				this.state = 1676;
				this.match(MultiQueryMySQLParser.UPGRADE_SYMBOL);
				this.state = 1677;
				this.match(MultiQueryMySQLParser.PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public place(): PlaceContext {
		let _localctx: PlaceContext = new PlaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, MultiQueryMySQLParser.RULE_place);
		try {
			this.state = 1683;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.AFTER_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1680;
				this.match(MultiQueryMySQLParser.AFTER_SYMBOL);
				this.state = 1681;
				this.identifier();
				}
				break;
			case MultiQueryMySQLParser.FIRST_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1682;
				this.match(MultiQueryMySQLParser.FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public restrict(): RestrictContext {
		let _localctx: RestrictContext = new RestrictContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, MultiQueryMySQLParser.RULE_restrict);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1685;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.CASCADE_SYMBOL || _la === MultiQueryMySQLParser.RESTRICT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterOrderList(): AlterOrderListContext {
		let _localctx: AlterOrderListContext = new AlterOrderListContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, MultiQueryMySQLParser.RULE_alterOrderList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1687;
			this.identifier();
			this.state = 1689;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
			case 1:
				{
				this.state = 1688;
				this.direction();
				}
				break;
			}
			this.state = 1698;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1691;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 1692;
					this.identifier();
					this.state = 1694;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 72, this._ctx) ) {
					case 1:
						{
						this.state = 1693;
						this.direction();
						}
						break;
					}
					}
					}
				}
				this.state = 1700;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterAlgorithmOption(): AlterAlgorithmOptionContext {
		let _localctx: AlterAlgorithmOptionContext = new AlterAlgorithmOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, MultiQueryMySQLParser.RULE_alterAlgorithmOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1701;
			this.match(MultiQueryMySQLParser.ALGORITHM_SYMBOL);
			this.state = 1703;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
			case 1:
				{
				this.state = 1702;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 1707;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				{
				this.state = 1705;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 1706;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLockOption(): AlterLockOptionContext {
		let _localctx: AlterLockOptionContext = new AlterLockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, MultiQueryMySQLParser.RULE_alterLockOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1709;
			this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
			this.state = 1711;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 76, this._ctx) ) {
			case 1:
				{
				this.state = 1710;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 1715;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 77, this._ctx) ) {
			case 1:
				{
				this.state = 1713;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 1714;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
		let _localctx: IndexLockAndAlgorithmContext = new IndexLockAndAlgorithmContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, MultiQueryMySQLParser.RULE_indexLockAndAlgorithm);
		try {
			this.state = 1725;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ALGORITHM_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1717;
				this.alterAlgorithmOption();
				this.state = 1719;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 78, this._ctx) ) {
				case 1:
					{
					this.state = 1718;
					this.alterLockOption();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.LOCK_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1721;
				this.alterLockOption();
				this.state = 1723;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 79, this._ctx) ) {
				case 1:
					{
					this.state = 1722;
					this.alterAlgorithmOption();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withValidation(): WithValidationContext {
		let _localctx: WithValidationContext = new WithValidationContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, MultiQueryMySQLParser.RULE_withValidation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1727;
			if (!(this.serverVersion >= 50706)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50706");
			}
			this.state = 1728;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.WITH_SYMBOL || _la === MultiQueryMySQLParser.WITHOUT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1729;
			this.match(MultiQueryMySQLParser.VALIDATION_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removePartitioning(): RemovePartitioningContext {
		let _localctx: RemovePartitioningContext = new RemovePartitioningContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, MultiQueryMySQLParser.RULE_removePartitioning);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1731;
			this.match(MultiQueryMySQLParser.REMOVE_SYMBOL);
			this.state = 1732;
			this.match(MultiQueryMySQLParser.PARTITIONING_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		let _localctx: AllOrPartitionNameListContext = new AllOrPartitionNameListContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, MultiQueryMySQLParser.RULE_allOrPartitionNameList);
		try {
			this.state = 1736;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 81, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1734;
				this.match(MultiQueryMySQLParser.ALL_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1735;
				this.identifierList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reorgPartitionRule(): ReorgPartitionRuleContext {
		let _localctx: ReorgPartitionRuleContext = new ReorgPartitionRuleContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, MultiQueryMySQLParser.RULE_reorgPartitionRule);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1738;
			this.match(MultiQueryMySQLParser.REORGANIZE_SYMBOL);
			this.state = 1739;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 1741;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
			case 1:
				{
				this.state = 1740;
				this.noWriteToBinLog();
				}
				break;
			}
			this.state = 1747;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 83, this._ctx) ) {
			case 1:
				{
				this.state = 1743;
				this.identifierList();
				this.state = 1744;
				this.match(MultiQueryMySQLParser.INTO_SYMBOL);
				this.state = 1745;
				this.partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTablespace(): AlterTablespaceContext {
		let _localctx: AlterTablespaceContext = new AlterTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, MultiQueryMySQLParser.RULE_alterTablespace);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1749;
			this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
			this.state = 1750;
			this.tablespaceRef();
			this.state = 1784;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 89, this._ctx) ) {
			case 1:
				{
				this.state = 1751;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ADD_SYMBOL || _la === MultiQueryMySQLParser.DROP_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1752;
				this.match(MultiQueryMySQLParser.DATAFILE_SYMBOL);
				this.state = 1753;
				this.textLiteral();
				this.state = 1755;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 84, this._ctx) ) {
				case 1:
					{
					this.state = 1754;
					this.alterTablespaceOptions();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 1757;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 1777;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 88, this._ctx) ) {
				case 1:
					// tslint:disable-next-line:no-empty
					{
					}
					break;

				case 2:
					{
					this.state = 1759;
					this.match(MultiQueryMySQLParser.CHANGE_SYMBOL);
					this.state = 1760;
					this.match(MultiQueryMySQLParser.DATAFILE_SYMBOL);
					this.state = 1761;
					this.textLiteral();
					this.state = 1772;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 87, this._ctx) ) {
					case 1:
						{
						this.state = 1762;
						this.changeTablespaceOption();
						this.state = 1769;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 86, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 1764;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
									{
									this.state = 1763;
									this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
									}
								}

								this.state = 1766;
								this.changeTablespaceOption();
								}
								}
							}
							this.state = 1771;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 86, this._ctx);
						}
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 1774;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.READ_ONLY_SYMBOL || _la === MultiQueryMySQLParser.READ_WRITE_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;

				case 4:
					{
					this.state = 1775;
					this.match(MultiQueryMySQLParser.NOT_SYMBOL);
					this.state = 1776;
					this.match(MultiQueryMySQLParser.ACCESSIBLE_SYMBOL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 1779;
				this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
				this.state = 1780;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 1781;
				this.identifier();
				}
				break;

			case 4:
				{
				this.state = 1782;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 1783;
				this.alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUndoTablespace(): AlterUndoTablespaceContext {
		let _localctx: AlterUndoTablespaceContext = new AlterUndoTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, MultiQueryMySQLParser.RULE_alterUndoTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1786;
			this.match(MultiQueryMySQLParser.UNDO_SYMBOL);
			this.state = 1787;
			this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
			this.state = 1788;
			this.tablespaceRef();
			this.state = 1789;
			this.match(MultiQueryMySQLParser.SET_SYMBOL);
			this.state = 1790;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.ACTIVE_SYMBOL || _la === MultiQueryMySQLParser.INACTIVE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1791;
				this.undoTableSpaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
		let _localctx: UndoTableSpaceOptionsContext = new UndoTableSpaceOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, MultiQueryMySQLParser.RULE_undoTableSpaceOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1794;
			this.undoTableSpaceOption();
			this.state = 1801;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 92, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
						{
						this.state = 1795;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 1798;
					this.undoTableSpaceOption();
					}
					}
				}
				this.state = 1803;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 92, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public undoTableSpaceOption(): UndoTableSpaceOptionContext {
		let _localctx: UndoTableSpaceOptionContext = new UndoTableSpaceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, MultiQueryMySQLParser.RULE_undoTableSpaceOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1804;
			this.tsOptionEngine();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTablespaceOptions(): AlterTablespaceOptionsContext {
		let _localctx: AlterTablespaceOptionsContext = new AlterTablespaceOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, MultiQueryMySQLParser.RULE_alterTablespaceOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1806;
			this.alterTablespaceOption();
			this.state = 1813;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
						{
						this.state = 1807;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 1810;
					this.alterTablespaceOption();
					}
					}
				}
				this.state = 1815;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTablespaceOption(): AlterTablespaceOptionContext {
		let _localctx: AlterTablespaceOptionContext = new AlterTablespaceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, MultiQueryMySQLParser.RULE_alterTablespaceOption);
		try {
			this.state = 1826;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1816;
				this.match(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL);
				this.state = 1818;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
				case 1:
					{
					this.state = 1817;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 1820;
				this.sizeNumber();
				}
				break;
			case MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1821;
				this.tsOptionAutoextendSize();
				}
				break;
			case MultiQueryMySQLParser.MAX_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1822;
				this.tsOptionMaxSize();
				}
				break;
			case MultiQueryMySQLParser.ENGINE_SYMBOL:
			case MultiQueryMySQLParser.STORAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1823;
				this.tsOptionEngine();
				}
				break;
			case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
			case MultiQueryMySQLParser.WAIT_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1824;
				this.tsOptionWait();
				}
				break;
			case MultiQueryMySQLParser.ENCRYPTION_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1825;
				this.tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeTablespaceOption(): ChangeTablespaceOptionContext {
		let _localctx: ChangeTablespaceOptionContext = new ChangeTablespaceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, MultiQueryMySQLParser.RULE_changeTablespaceOption);
		try {
			this.state = 1835;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1828;
				this.match(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL);
				this.state = 1830;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 97, this._ctx) ) {
				case 1:
					{
					this.state = 1829;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 1832;
				this.sizeNumber();
				}
				break;
			case MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1833;
				this.tsOptionAutoextendSize();
				}
				break;
			case MultiQueryMySQLParser.MAX_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1834;
				this.tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterView(): AlterViewContext {
		let _localctx: AlterViewContext = new AlterViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, MultiQueryMySQLParser.RULE_alterView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1838;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ALGORITHM_SYMBOL) {
				{
				this.state = 1837;
				this.viewAlgorithm();
				}
			}

			this.state = 1841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 1840;
				this.definerClause();
				}
			}

			this.state = 1844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.SQL_SYMBOL) {
				{
				this.state = 1843;
				this.viewSuid();
				}
			}

			this.state = 1846;
			this.match(MultiQueryMySQLParser.VIEW_SYMBOL);
			this.state = 1847;
			this.viewRef();
			this.state = 1848;
			this.viewTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewTail(): ViewTailContext {
		let _localctx: ViewTailContext = new ViewTailContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, MultiQueryMySQLParser.RULE_viewTail);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OPEN_PAR_SYMBOL) {
				{
				this.state = 1850;
				this.columnInternalRefList();
				}
			}

			this.state = 1853;
			this.match(MultiQueryMySQLParser.AS_SYMBOL);
			this.state = 1854;
			this.viewSelect();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewSelect(): ViewSelectContext {
		let _localctx: ViewSelectContext = new ViewSelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, MultiQueryMySQLParser.RULE_viewSelect);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1856;
			this.queryExpressionOrParens();
			this.state = 1858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				{
				this.state = 1857;
				this.viewCheckOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewCheckOption(): ViewCheckOptionContext {
		let _localctx: ViewCheckOptionContext = new ViewCheckOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, MultiQueryMySQLParser.RULE_viewCheckOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1860;
			this.match(MultiQueryMySQLParser.WITH_SYMBOL);
			this.state = 1862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.CASCADED_SYMBOL || _la === MultiQueryMySQLParser.LOCAL_SYMBOL) {
				{
				this.state = 1861;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CASCADED_SYMBOL || _la === MultiQueryMySQLParser.LOCAL_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1864;
			this.match(MultiQueryMySQLParser.CHECK_SYMBOL);
			this.state = 1865;
			this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createStatement(): CreateStatementContext {
		let _localctx: CreateStatementContext = new CreateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, MultiQueryMySQLParser.RULE_createStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1867;
			this.match(MultiQueryMySQLParser.CREATE_SYMBOL);
			this.state = 1886;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
			case 1:
				{
				this.state = 1868;
				this.createDatabase();
				}
				break;

			case 2:
				{
				this.state = 1869;
				this.createTable();
				}
				break;

			case 3:
				{
				this.state = 1870;
				this.createFunction();
				}
				break;

			case 4:
				{
				this.state = 1871;
				this.createProcedure();
				}
				break;

			case 5:
				{
				this.state = 1872;
				this.createUdf();
				}
				break;

			case 6:
				{
				this.state = 1873;
				this.createLogfileGroup();
				}
				break;

			case 7:
				{
				this.state = 1874;
				this.createView();
				}
				break;

			case 8:
				{
				this.state = 1875;
				this.createTrigger();
				}
				break;

			case 9:
				{
				this.state = 1876;
				this.createIndex();
				}
				break;

			case 10:
				{
				this.state = 1877;
				this.createServer();
				}
				break;

			case 11:
				{
				this.state = 1878;
				this.createTablespace();
				}
				break;

			case 12:
				{
				this.state = 1879;
				this.createEvent();
				}
				break;

			case 13:
				{
				this.state = 1880;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 1881;
				this.createRole();
				}
				break;

			case 14:
				{
				this.state = 1882;
				if (!(this.serverVersion >= 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80011");
				}
				this.state = 1883;
				this.createSpatialReference();
				}
				break;

			case 15:
				{
				this.state = 1884;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 1885;
				this.createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let _localctx: CreateDatabaseContext = new CreateDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, MultiQueryMySQLParser.RULE_createDatabase);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1888;
			this.match(MultiQueryMySQLParser.DATABASE_SYMBOL);
			this.state = 1890;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				{
				this.state = 1889;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1892;
			this.schemaName();
			this.state = 1896;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1893;
					this.createDatabaseOption();
					}
					}
				}
				this.state = 1898;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabaseOption(): CreateDatabaseOptionContext {
		let _localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, MultiQueryMySQLParser.RULE_createDatabaseOption);
		try {
			this.state = 1903;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 108, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1899;
				this.defaultCharset();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1900;
				this.defaultCollation();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1901;
				if (!(this.serverVersion >= 80016)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80016");
				}
				this.state = 1902;
				this.defaultEncryption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTable(): CreateTableContext {
		let _localctx: CreateTableContext = new CreateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, MultiQueryMySQLParser.RULE_createTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.TEMPORARY_SYMBOL) {
				{
				this.state = 1905;
				this.match(MultiQueryMySQLParser.TEMPORARY_SYMBOL);
				}
			}

			this.state = 1908;
			this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
			this.state = 1910;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 110, this._ctx) ) {
			case 1:
				{
				this.state = 1909;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1912;
			this.tableName();
			this.state = 1935;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				{
				this.state = 1917;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 111, this._ctx) ) {
				case 1:
					{
					this.state = 1913;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 1914;
					this.tableElementList();
					this.state = 1915;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				this.state = 1920;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 112, this._ctx) ) {
				case 1:
					{
					this.state = 1919;
					this.createTableOptions();
					}
					break;
				}
				this.state = 1923;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
				case 1:
					{
					this.state = 1922;
					this.partitionClause();
					}
					break;
				}
				this.state = 1926;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
				case 1:
					{
					this.state = 1925;
					this.duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 1928;
				this.match(MultiQueryMySQLParser.LIKE_SYMBOL);
				this.state = 1929;
				this.tableRef();
				}
				break;

			case 3:
				{
				this.state = 1930;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 1931;
				this.match(MultiQueryMySQLParser.LIKE_SYMBOL);
				this.state = 1932;
				this.tableRef();
				this.state = 1933;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableElementList(): TableElementListContext {
		let _localctx: TableElementListContext = new TableElementListContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, MultiQueryMySQLParser.RULE_tableElementList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1937;
			this.tableElement();
			this.state = 1942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 1938;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 1939;
				this.tableElement();
				}
				}
				this.state = 1944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableElement(): TableElementContext {
		let _localctx: TableElementContext = new TableElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, MultiQueryMySQLParser.RULE_tableElement);
		try {
			this.state = 1947;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 117, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1945;
				this.columnDefinition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1946;
				this.tableConstraintDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public duplicateAsQueryExpression(): DuplicateAsQueryExpressionContext {
		let _localctx: DuplicateAsQueryExpressionContext = new DuplicateAsQueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, MultiQueryMySQLParser.RULE_duplicateAsQueryExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1950;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				{
				this.state = 1949;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.REPLACE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				{
				this.state = 1952;
				this.match(MultiQueryMySQLParser.AS_SYMBOL);
				}
				break;
			}
			this.state = 1955;
			this.queryExpressionOrParens();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		let _localctx: QueryExpressionOrParensContext = new QueryExpressionOrParensContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, MultiQueryMySQLParser.RULE_queryExpressionOrParens);
		try {
			this.state = 1959;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1957;
				this.queryExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1958;
				this.queryExpressionParens();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRoutine(): CreateRoutineContext {
		let _localctx: CreateRoutineContext = new CreateRoutineContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, MultiQueryMySQLParser.RULE_createRoutine);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1961;
			this.match(MultiQueryMySQLParser.CREATE_SYMBOL);
			this.state = 1965;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 121, this._ctx) ) {
			case 1:
				{
				this.state = 1962;
				this.createProcedure();
				}
				break;

			case 2:
				{
				this.state = 1963;
				this.createFunction();
				}
				break;

			case 3:
				{
				this.state = 1964;
				this.createUdf();
				}
				break;
			}
			this.state = 1968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.SEMICOLON_SYMBOL) {
				{
				this.state = 1967;
				this.match(MultiQueryMySQLParser.SEMICOLON_SYMBOL);
				}
			}

			this.state = 1970;
			this.match(MultiQueryMySQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createProcedure(): CreateProcedureContext {
		let _localctx: CreateProcedureContext = new CreateProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, MultiQueryMySQLParser.RULE_createProcedure);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1973;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 1972;
				this.definerClause();
				}
			}

			this.state = 1975;
			this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
			this.state = 1976;
			this.procedureName();
			this.state = 1977;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 1986;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 125, this._ctx) ) {
			case 1:
				{
				this.state = 1978;
				this.procedureParameter();
				this.state = 1983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					{
					this.state = 1979;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 1980;
					this.procedureParameter();
					}
					}
					this.state = 1985;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 1988;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 1992;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1989;
					this.routineCreateOption();
					}
					}
				}
				this.state = 1994;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);
			}
			this.state = 1995;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFunction(): CreateFunctionContext {
		let _localctx: CreateFunctionContext = new CreateFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, MultiQueryMySQLParser.RULE_createFunction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 1997;
				this.definerClause();
				}
			}

			this.state = 2000;
			this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
			this.state = 2001;
			this.functionName();
			this.state = 2002;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2011;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 129, this._ctx) ) {
			case 1:
				{
				this.state = 2003;
				this.functionParameter();
				this.state = 2008;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					{
					this.state = 2004;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 2005;
					this.functionParameter();
					}
					}
					this.state = 2010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 2013;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 2014;
			this.match(MultiQueryMySQLParser.RETURNS_SYMBOL);
			this.state = 2015;
			this.typeWithOptCollate();
			this.state = 2019;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2016;
					this.routineCreateOption();
					}
					}
				}
				this.state = 2021;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
			}
			this.state = 2022;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUdf(): CreateUdfContext {
		let _localctx: CreateUdfContext = new CreateUdfContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, MultiQueryMySQLParser.RULE_createUdf);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.AGGREGATE_SYMBOL) {
				{
				this.state = 2024;
				this.match(MultiQueryMySQLParser.AGGREGATE_SYMBOL);
				}
			}

			this.state = 2027;
			this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
			this.state = 2028;
			this.udfName();
			this.state = 2029;
			this.match(MultiQueryMySQLParser.RETURNS_SYMBOL);
			this.state = 2030;
			_localctx._type = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.STRING_SYMBOL || _la === MultiQueryMySQLParser.DECIMAL_SYMBOL || _la === MultiQueryMySQLParser.INT_SYMBOL || _la === MultiQueryMySQLParser.REAL_SYMBOL)) {
				_localctx._type = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2031;
			this.match(MultiQueryMySQLParser.SONAME_SYMBOL);
			this.state = 2032;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineCreateOption(): RoutineCreateOptionContext {
		let _localctx: RoutineCreateOptionContext = new RoutineCreateOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, MultiQueryMySQLParser.RULE_routineCreateOption);
		let _la: number;
		try {
			this.state = 2039;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
			case MultiQueryMySQLParser.CONTAINS_SYMBOL:
			case MultiQueryMySQLParser.LANGUAGE_SYMBOL:
			case MultiQueryMySQLParser.NO_SYMBOL:
			case MultiQueryMySQLParser.MODIFIES_SYMBOL:
			case MultiQueryMySQLParser.READS_SYMBOL:
			case MultiQueryMySQLParser.SQL_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2034;
				this.routineOption();
				}
				break;
			case MultiQueryMySQLParser.DETERMINISTIC_SYMBOL:
			case MultiQueryMySQLParser.NOT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NOT_SYMBOL) {
					{
					this.state = 2035;
					this.match(MultiQueryMySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 2038;
				this.match(MultiQueryMySQLParser.DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineAlterOptions(): RoutineAlterOptionsContext {
		let _localctx: RoutineAlterOptionsContext = new RoutineAlterOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, MultiQueryMySQLParser.RULE_routineAlterOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2042;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2041;
					this.routineCreateOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2044;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineOption(): RoutineOptionContext {
		let _localctx: RoutineOptionContext = new RoutineOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, MultiQueryMySQLParser.RULE_routineOption);
		let _la: number;
		try {
			this.state = 2063;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2046;
				_localctx._option = this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 2047;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.LANGUAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2048;
				_localctx._option = this.match(MultiQueryMySQLParser.LANGUAGE_SYMBOL);
				this.state = 2049;
				this.match(MultiQueryMySQLParser.SQL_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.NO_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2050;
				_localctx._option = this.match(MultiQueryMySQLParser.NO_SYMBOL);
				this.state = 2051;
				this.match(MultiQueryMySQLParser.SQL_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.CONTAINS_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2052;
				_localctx._option = this.match(MultiQueryMySQLParser.CONTAINS_SYMBOL);
				this.state = 2053;
				this.match(MultiQueryMySQLParser.SQL_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.READS_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2054;
				_localctx._option = this.match(MultiQueryMySQLParser.READS_SYMBOL);
				this.state = 2055;
				this.match(MultiQueryMySQLParser.SQL_SYMBOL);
				this.state = 2056;
				this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.MODIFIES_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2057;
				_localctx._option = this.match(MultiQueryMySQLParser.MODIFIES_SYMBOL);
				this.state = 2058;
				this.match(MultiQueryMySQLParser.SQL_SYMBOL);
				this.state = 2059;
				this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.SQL_SYMBOL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2060;
				_localctx._option = this.match(MultiQueryMySQLParser.SQL_SYMBOL);
				this.state = 2061;
				this.match(MultiQueryMySQLParser.SECURITY_SYMBOL);
				this.state = 2062;
				_localctx._security = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DEFINER_SYMBOL || _la === MultiQueryMySQLParser.INVOKER_SYMBOL)) {
					_localctx._security = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let _localctx: CreateIndexContext = new CreateIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, MultiQueryMySQLParser.RULE_createIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OFFLINE_SYMBOL || _la === MultiQueryMySQLParser.ONLINE_SYMBOL) {
				{
				this.state = 2065;
				this.onlineOption();
				}
			}

			this.state = 2109;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INDEX_SYMBOL:
			case MultiQueryMySQLParser.UNIQUE_SYMBOL:
				{
				this.state = 2069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.UNIQUE_SYMBOL) {
					{
					this.state = 2068;
					this.match(MultiQueryMySQLParser.UNIQUE_SYMBOL);
					}
				}

				this.state = 2071;
				_localctx._type = this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 2080;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 140, this._ctx) ) {
				case 1:
					{
					this.state = 2072;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 2073;
					this.indexName();
					this.state = 2075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.TYPE_SYMBOL || _la === MultiQueryMySQLParser.USING_SYMBOL) {
						{
						this.state = 2074;
						this.indexTypeClause();
						}
					}

					}
					break;

				case 2:
					{
					this.state = 2078;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 139, this._ctx) ) {
					case 1:
						{
						this.state = 2077;
						this.indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				this.state = 2082;
				this.createIndexTarget();
				this.state = 2086;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2083;
						this.indexOption();
						}
						}
					}
					this.state = 2088;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.FULLTEXT_SYMBOL:
				{
				this.state = 2089;
				_localctx._type = this.match(MultiQueryMySQLParser.FULLTEXT_SYMBOL);
				this.state = 2090;
				this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 2091;
				this.indexName();
				this.state = 2092;
				this.createIndexTarget();
				this.state = 2096;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2093;
						this.fulltextIndexOption();
						}
						}
					}
					this.state = 2098;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.SPATIAL_SYMBOL:
				{
				this.state = 2099;
				_localctx._type = this.match(MultiQueryMySQLParser.SPATIAL_SYMBOL);
				this.state = 2100;
				this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 2101;
				this.indexName();
				this.state = 2102;
				this.createIndexTarget();
				this.state = 2106;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2103;
						this.spatialIndexOption();
						}
						}
					}
					this.state = 2108;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2112;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
			case 1:
				{
				this.state = 2111;
				this.indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexNameAndType(): IndexNameAndTypeContext {
		let _localctx: IndexNameAndTypeContext = new IndexNameAndTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, MultiQueryMySQLParser.RULE_indexNameAndType);
		try {
			this.state = 2123;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 147, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2114;
				this.indexName();
				this.state = 2117;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
				case 1:
					{
					this.state = 2115;
					this.match(MultiQueryMySQLParser.USING_SYMBOL);
					this.state = 2116;
					this.indexType();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2119;
				this.indexName();
				this.state = 2120;
				this.match(MultiQueryMySQLParser.TYPE_SYMBOL);
				this.state = 2121;
				this.indexType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndexTarget(): CreateIndexTargetContext {
		let _localctx: CreateIndexTargetContext = new CreateIndexTargetContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, MultiQueryMySQLParser.RULE_createIndexTarget);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2125;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 2126;
			this.tableRef();
			this.state = 2127;
			this.keyListVariants();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createLogfileGroup(): CreateLogfileGroupContext {
		let _localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, MultiQueryMySQLParser.RULE_createLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2129;
			this.match(MultiQueryMySQLParser.LOGFILE_SYMBOL);
			this.state = 2130;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 2131;
			this.logfileGroupName();
			this.state = 2132;
			this.match(MultiQueryMySQLParser.ADD_SYMBOL);
			this.state = 2133;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.REDOFILE_SYMBOL || _la === MultiQueryMySQLParser.UNDOFILE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2134;
			this.textLiteral();
			this.state = 2136;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 148, this._ctx) ) {
			case 1:
				{
				this.state = 2135;
				this.logfileGroupOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logfileGroupOptions(): LogfileGroupOptionsContext {
		let _localctx: LogfileGroupOptionsContext = new LogfileGroupOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, MultiQueryMySQLParser.RULE_logfileGroupOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2138;
			this.logfileGroupOption();
			this.state = 2145;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 150, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
						{
						this.state = 2139;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 2142;
					this.logfileGroupOption();
					}
					}
				}
				this.state = 2147;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 150, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logfileGroupOption(): LogfileGroupOptionContext {
		let _localctx: LogfileGroupOptionContext = new LogfileGroupOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, MultiQueryMySQLParser.RULE_logfileGroupOption);
		try {
			this.state = 2154;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2148;
				this.tsOptionInitialSize();
				}
				break;
			case MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL:
			case MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2149;
				this.tsOptionUndoRedoBufferSize();
				}
				break;
			case MultiQueryMySQLParser.NODEGROUP_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2150;
				this.tsOptionNodegroup();
				}
				break;
			case MultiQueryMySQLParser.ENGINE_SYMBOL:
			case MultiQueryMySQLParser.STORAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2151;
				this.tsOptionEngine();
				}
				break;
			case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
			case MultiQueryMySQLParser.WAIT_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2152;
				this.tsOptionWait();
				}
				break;
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2153;
				this.tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createServer(): CreateServerContext {
		let _localctx: CreateServerContext = new CreateServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, MultiQueryMySQLParser.RULE_createServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2156;
			this.match(MultiQueryMySQLParser.SERVER_SYMBOL);
			this.state = 2157;
			this.serverName();
			this.state = 2158;
			this.match(MultiQueryMySQLParser.FOREIGN_SYMBOL);
			this.state = 2159;
			this.match(MultiQueryMySQLParser.DATA_SYMBOL);
			this.state = 2160;
			this.match(MultiQueryMySQLParser.WRAPPER_SYMBOL);
			this.state = 2161;
			this.textOrIdentifier();
			this.state = 2162;
			this.serverOptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverOptions(): ServerOptionsContext {
		let _localctx: ServerOptionsContext = new ServerOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, MultiQueryMySQLParser.RULE_serverOptions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2164;
			this.match(MultiQueryMySQLParser.OPTIONS_SYMBOL);
			this.state = 2165;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2166;
			this.serverOption();
			this.state = 2171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 2167;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 2168;
				this.serverOption();
				}
				}
				this.state = 2173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2174;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverOption(): ServerOptionContext {
		let _localctx: ServerOptionContext = new ServerOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, MultiQueryMySQLParser.RULE_serverOption);
		try {
			this.state = 2190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.HOST_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2176;
				_localctx._option = this.match(MultiQueryMySQLParser.HOST_SYMBOL);
				this.state = 2177;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.DATABASE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2178;
				_localctx._option = this.match(MultiQueryMySQLParser.DATABASE_SYMBOL);
				this.state = 2179;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.USER_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2180;
				_localctx._option = this.match(MultiQueryMySQLParser.USER_SYMBOL);
				this.state = 2181;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.PASSWORD_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2182;
				_localctx._option = this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 2183;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.SOCKET_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2184;
				_localctx._option = this.match(MultiQueryMySQLParser.SOCKET_SYMBOL);
				this.state = 2185;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.OWNER_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2186;
				_localctx._option = this.match(MultiQueryMySQLParser.OWNER_SYMBOL);
				this.state = 2187;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.PORT_SYMBOL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2188;
				_localctx._option = this.match(MultiQueryMySQLParser.PORT_SYMBOL);
				this.state = 2189;
				this.ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespace(): CreateTablespaceContext {
		let _localctx: CreateTablespaceContext = new CreateTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, MultiQueryMySQLParser.RULE_createTablespace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2192;
			this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
			this.state = 2193;
			this.tablespaceName();
			this.state = 2194;
			this.tsDataFileName();
			this.state = 2199;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				{
				this.state = 2195;
				this.match(MultiQueryMySQLParser.USE_SYMBOL);
				this.state = 2196;
				this.match(MultiQueryMySQLParser.LOGFILE_SYMBOL);
				this.state = 2197;
				this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
				this.state = 2198;
				this.logfileGroupRef();
				}
				break;
			}
			this.state = 2202;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				{
				this.state = 2201;
				this.tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUndoTablespace(): CreateUndoTablespaceContext {
		let _localctx: CreateUndoTablespaceContext = new CreateUndoTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, MultiQueryMySQLParser.RULE_createUndoTablespace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2204;
			this.match(MultiQueryMySQLParser.UNDO_SYMBOL);
			this.state = 2205;
			this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
			this.state = 2206;
			this.tablespaceName();
			this.state = 2207;
			this.match(MultiQueryMySQLParser.ADD_SYMBOL);
			this.state = 2208;
			this.tsDataFile();
			this.state = 2210;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 2209;
				this.undoTableSpaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsDataFileName(): TsDataFileNameContext {
		let _localctx: TsDataFileNameContext = new TsDataFileNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, MultiQueryMySQLParser.RULE_tsDataFileName);
		try {
			this.state = 2219;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2212;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 2215;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
				case 1:
					{
					this.state = 2213;
					this.match(MultiQueryMySQLParser.ADD_SYMBOL);
					this.state = 2214;
					this.tsDataFile();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2217;
				this.match(MultiQueryMySQLParser.ADD_SYMBOL);
				this.state = 2218;
				this.tsDataFile();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsDataFile(): TsDataFileContext {
		let _localctx: TsDataFileContext = new TsDataFileContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, MultiQueryMySQLParser.RULE_tsDataFile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2221;
			this.match(MultiQueryMySQLParser.DATAFILE_SYMBOL);
			this.state = 2222;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceOptions(): TablespaceOptionsContext {
		let _localctx: TablespaceOptionsContext = new TablespaceOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, MultiQueryMySQLParser.RULE_tablespaceOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2224;
			this.tablespaceOption();
			this.state = 2231;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2226;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
					case 1:
						{
						this.state = 2225;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
						break;
					}
					this.state = 2228;
					this.tablespaceOption();
					}
					}
				}
				this.state = 2233;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceOption(): TablespaceOptionContext {
		let _localctx: TablespaceOptionContext = new TablespaceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, MultiQueryMySQLParser.RULE_tablespaceOption);
		try {
			this.state = 2246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 161, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2234;
				this.tsOptionInitialSize();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2235;
				this.tsOptionAutoextendSize();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2236;
				this.tsOptionMaxSize();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2237;
				this.tsOptionExtentSize();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2238;
				this.tsOptionNodegroup();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2239;
				this.tsOptionEngine();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2240;
				this.tsOptionWait();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2241;
				this.tsOptionComment();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2242;
				if (!(this.serverVersion >= 50707)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50707");
				}
				this.state = 2243;
				this.tsOptionFileblockSize();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2244;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 2245;
				this.tsOptionEncryption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionInitialSize(): TsOptionInitialSizeContext {
		let _localctx: TsOptionInitialSizeContext = new TsOptionInitialSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, MultiQueryMySQLParser.RULE_tsOptionInitialSize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2248;
			this.match(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL);
			this.state = 2250;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				{
				this.state = 2249;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2252;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
		let _localctx: TsOptionUndoRedoBufferSizeContext = new TsOptionUndoRedoBufferSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, MultiQueryMySQLParser.RULE_tsOptionUndoRedoBufferSize);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2254;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la === MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2256;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				{
				this.state = 2255;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2258;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
		let _localctx: TsOptionAutoextendSizeContext = new TsOptionAutoextendSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, MultiQueryMySQLParser.RULE_tsOptionAutoextendSize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2260;
			this.match(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL);
			this.state = 2262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 164, this._ctx) ) {
			case 1:
				{
				this.state = 2261;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2264;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionMaxSize(): TsOptionMaxSizeContext {
		let _localctx: TsOptionMaxSizeContext = new TsOptionMaxSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, MultiQueryMySQLParser.RULE_tsOptionMaxSize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2266;
			this.match(MultiQueryMySQLParser.MAX_SIZE_SYMBOL);
			this.state = 2268;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 165, this._ctx) ) {
			case 1:
				{
				this.state = 2267;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2270;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionExtentSize(): TsOptionExtentSizeContext {
		let _localctx: TsOptionExtentSizeContext = new TsOptionExtentSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, MultiQueryMySQLParser.RULE_tsOptionExtentSize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2272;
			this.match(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL);
			this.state = 2274;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 166, this._ctx) ) {
			case 1:
				{
				this.state = 2273;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2276;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionNodegroup(): TsOptionNodegroupContext {
		let _localctx: TsOptionNodegroupContext = new TsOptionNodegroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, MultiQueryMySQLParser.RULE_tsOptionNodegroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2278;
			this.match(MultiQueryMySQLParser.NODEGROUP_SYMBOL);
			this.state = 2280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
				{
				this.state = 2279;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
			}

			this.state = 2282;
			this.real_ulong_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionEngine(): TsOptionEngineContext {
		let _localctx: TsOptionEngineContext = new TsOptionEngineContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, MultiQueryMySQLParser.RULE_tsOptionEngine);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.STORAGE_SYMBOL) {
				{
				this.state = 2284;
				this.match(MultiQueryMySQLParser.STORAGE_SYMBOL);
				}
			}

			this.state = 2287;
			this.match(MultiQueryMySQLParser.ENGINE_SYMBOL);
			this.state = 2289;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
			case 1:
				{
				this.state = 2288;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2291;
			this.engineRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionWait(): TsOptionWaitContext {
		let _localctx: TsOptionWaitContext = new TsOptionWaitContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, MultiQueryMySQLParser.RULE_tsOptionWait);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2293;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.NO_WAIT_SYMBOL || _la === MultiQueryMySQLParser.WAIT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionComment(): TsOptionCommentContext {
		let _localctx: TsOptionCommentContext = new TsOptionCommentContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, MultiQueryMySQLParser.RULE_tsOptionComment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2295;
			this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
			this.state = 2297;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				{
				this.state = 2296;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2299;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
		let _localctx: TsOptionFileblockSizeContext = new TsOptionFileblockSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, MultiQueryMySQLParser.RULE_tsOptionFileblockSize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2301;
			this.match(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL);
			this.state = 2303;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				{
				this.state = 2302;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2305;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tsOptionEncryption(): TsOptionEncryptionContext {
		let _localctx: TsOptionEncryptionContext = new TsOptionEncryptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, MultiQueryMySQLParser.RULE_tsOptionEncryption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2307;
			this.match(MultiQueryMySQLParser.ENCRYPTION_SYMBOL);
			this.state = 2309;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				{
				this.state = 2308;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2311;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createView(): CreateViewContext {
		let _localctx: CreateViewContext = new CreateViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, MultiQueryMySQLParser.RULE_createView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ALGORITHM_SYMBOL || _la === MultiQueryMySQLParser.OR_SYMBOL) {
				{
				this.state = 2313;
				this.viewReplaceOrAlgorithm();
				}
			}

			this.state = 2317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 2316;
				this.definerClause();
				}
			}

			this.state = 2320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.SQL_SYMBOL) {
				{
				this.state = 2319;
				this.viewSuid();
				}
			}

			this.state = 2322;
			this.match(MultiQueryMySQLParser.VIEW_SYMBOL);
			this.state = 2323;
			this.viewName();
			this.state = 2324;
			this.viewTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
		let _localctx: ViewReplaceOrAlgorithmContext = new ViewReplaceOrAlgorithmContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, MultiQueryMySQLParser.RULE_viewReplaceOrAlgorithm);
		let _la: number;
		try {
			this.state = 2332;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.OR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2326;
				this.match(MultiQueryMySQLParser.OR_SYMBOL);
				this.state = 2327;
				this.match(MultiQueryMySQLParser.REPLACE_SYMBOL);
				this.state = 2329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ALGORITHM_SYMBOL) {
					{
					this.state = 2328;
					this.viewAlgorithm();
					}
				}

				}
				break;
			case MultiQueryMySQLParser.ALGORITHM_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2331;
				this.viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewAlgorithm(): ViewAlgorithmContext {
		let _localctx: ViewAlgorithmContext = new ViewAlgorithmContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, MultiQueryMySQLParser.RULE_viewAlgorithm);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2334;
			this.match(MultiQueryMySQLParser.ALGORITHM_SYMBOL);
			this.state = 2335;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 2336;
			_localctx._algorithm = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.MERGE_SYMBOL || _la === MultiQueryMySQLParser.TEMPTABLE_SYMBOL || _la === MultiQueryMySQLParser.UNDEFINED_SYMBOL)) {
				_localctx._algorithm = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewSuid(): ViewSuidContext {
		let _localctx: ViewSuidContext = new ViewSuidContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, MultiQueryMySQLParser.RULE_viewSuid);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2338;
			this.match(MultiQueryMySQLParser.SQL_SYMBOL);
			this.state = 2339;
			this.match(MultiQueryMySQLParser.SECURITY_SYMBOL);
			this.state = 2340;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DEFINER_SYMBOL || _la === MultiQueryMySQLParser.INVOKER_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTrigger(): CreateTriggerContext {
		let _localctx: CreateTriggerContext = new CreateTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, MultiQueryMySQLParser.RULE_createTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 2342;
				this.definerClause();
				}
			}

			this.state = 2345;
			this.match(MultiQueryMySQLParser.TRIGGER_SYMBOL);
			this.state = 2346;
			this.triggerName();
			this.state = 2347;
			_localctx._timing = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.AFTER_SYMBOL || _la === MultiQueryMySQLParser.BEFORE_SYMBOL)) {
				_localctx._timing = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2348;
			_localctx._event = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DELETE_SYMBOL || _la === MultiQueryMySQLParser.INSERT_SYMBOL || _la === MultiQueryMySQLParser.UPDATE_SYMBOL)) {
				_localctx._event = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2349;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 2350;
			this.tableRef();
			this.state = 2351;
			this.match(MultiQueryMySQLParser.FOR_SYMBOL);
			this.state = 2352;
			this.match(MultiQueryMySQLParser.EACH_SYMBOL);
			this.state = 2353;
			this.match(MultiQueryMySQLParser.ROW_SYMBOL);
			this.state = 2355;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 179, this._ctx) ) {
			case 1:
				{
				this.state = 2354;
				this.triggerFollowsPrecedesClause();
				}
				break;
			}
			this.state = 2357;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
		let _localctx: TriggerFollowsPrecedesClauseContext = new TriggerFollowsPrecedesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, MultiQueryMySQLParser.RULE_triggerFollowsPrecedesClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2359;
			if (!(this.serverVersion >= 50700)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50700");
			}
			this.state = 2360;
			_localctx._ordering = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.FOLLOWS_SYMBOL || _la === MultiQueryMySQLParser.PRECEDES_SYMBOL)) {
				_localctx._ordering = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2361;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createEvent(): CreateEventContext {
		let _localctx: CreateEventContext = new CreateEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, MultiQueryMySQLParser.RULE_createEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFINER_SYMBOL) {
				{
				this.state = 2363;
				this.definerClause();
				}
			}

			this.state = 2366;
			this.match(MultiQueryMySQLParser.EVENT_SYMBOL);
			this.state = 2368;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				{
				this.state = 2367;
				this.ifNotExists();
				}
				break;
			}
			this.state = 2370;
			this.eventName();
			this.state = 2371;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 2372;
			this.match(MultiQueryMySQLParser.SCHEDULE_SYMBOL);
			this.state = 2373;
			this.schedule();
			this.state = 2380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ON_SYMBOL) {
				{
				this.state = 2374;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 2375;
				this.match(MultiQueryMySQLParser.COMPLETION_SYMBOL);
				this.state = 2377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NOT_SYMBOL) {
					{
					this.state = 2376;
					this.match(MultiQueryMySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 2379;
				this.match(MultiQueryMySQLParser.PRESERVE_SYMBOL);
				}
			}

			this.state = 2388;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ENABLE_SYMBOL:
				{
				this.state = 2382;
				this.match(MultiQueryMySQLParser.ENABLE_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.DISABLE_SYMBOL:
				{
				this.state = 2383;
				this.match(MultiQueryMySQLParser.DISABLE_SYMBOL);
				this.state = 2386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ON_SYMBOL) {
					{
					this.state = 2384;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 2385;
					this.match(MultiQueryMySQLParser.SLAVE_SYMBOL);
					}
				}

				}
				break;
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
			case MultiQueryMySQLParser.DO_SYMBOL:
				break;
			default:
				break;
			}
			this.state = 2392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.COMMENT_SYMBOL) {
				{
				this.state = 2390;
				this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 2391;
				this.textLiteral();
				}
			}

			this.state = 2394;
			this.match(MultiQueryMySQLParser.DO_SYMBOL);
			this.state = 2395;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRole(): CreateRoleContext {
		let _localctx: CreateRoleContext = new CreateRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, MultiQueryMySQLParser.RULE_createRole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2397;
			this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
			this.state = 2399;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 2398;
				this.ifNotExists();
				}
				break;
			}
			this.state = 2401;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createSpatialReference(): CreateSpatialReferenceContext {
		let _localctx: CreateSpatialReferenceContext = new CreateSpatialReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, MultiQueryMySQLParser.RULE_createSpatialReference);
		try {
			let _alt: number;
			this.state = 2428;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.OR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2403;
				this.match(MultiQueryMySQLParser.OR_SYMBOL);
				this.state = 2404;
				this.match(MultiQueryMySQLParser.REPLACE_SYMBOL);
				this.state = 2405;
				this.match(MultiQueryMySQLParser.SPATIAL_SYMBOL);
				this.state = 2406;
				this.match(MultiQueryMySQLParser.REFERENCE_SYMBOL);
				this.state = 2407;
				this.match(MultiQueryMySQLParser.SYSTEM_SYMBOL);
				this.state = 2408;
				this.real_ulonglong_number();
				this.state = 2412;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2409;
						this.srsAttribute();
						}
						}
					}
					this.state = 2414;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.SPATIAL_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2415;
				this.match(MultiQueryMySQLParser.SPATIAL_SYMBOL);
				this.state = 2416;
				this.match(MultiQueryMySQLParser.REFERENCE_SYMBOL);
				this.state = 2417;
				this.match(MultiQueryMySQLParser.SYSTEM_SYMBOL);
				this.state = 2419;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
				case 1:
					{
					this.state = 2418;
					this.ifNotExists();
					}
					break;
				}
				this.state = 2421;
				this.real_ulonglong_number();
				this.state = 2425;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2422;
						this.srsAttribute();
						}
						}
					}
					this.state = 2427;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public srsAttribute(): SrsAttributeContext {
		let _localctx: SrsAttributeContext = new SrsAttributeContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, MultiQueryMySQLParser.RULE_srsAttribute);
		try {
			this.state = 2445;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.NAME_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2430;
				this.match(MultiQueryMySQLParser.NAME_SYMBOL);
				this.state = 2431;
				this.match(MultiQueryMySQLParser.TEXT_SYMBOL);
				this.state = 2432;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.DEFINITION_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2433;
				this.match(MultiQueryMySQLParser.DEFINITION_SYMBOL);
				this.state = 2434;
				this.match(MultiQueryMySQLParser.TEXT_SYMBOL);
				this.state = 2435;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.ORGANIZATION_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2436;
				this.match(MultiQueryMySQLParser.ORGANIZATION_SYMBOL);
				this.state = 2437;
				this.textStringNoLinebreak();
				this.state = 2438;
				this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
				this.state = 2439;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 2440;
				this.real_ulonglong_number();
				}
				break;
			case MultiQueryMySQLParser.DESCRIPTION_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2442;
				this.match(MultiQueryMySQLParser.DESCRIPTION_SYMBOL);
				this.state = 2443;
				this.match(MultiQueryMySQLParser.TEXT_SYMBOL);
				this.state = 2444;
				this.textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropStatement(): DropStatementContext {
		let _localctx: DropStatementContext = new DropStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, MultiQueryMySQLParser.RULE_dropStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2447;
			this.match(MultiQueryMySQLParser.DROP_SYMBOL);
			this.state = 2465;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 193, this._ctx) ) {
			case 1:
				{
				this.state = 2448;
				this.dropDatabase();
				}
				break;

			case 2:
				{
				this.state = 2449;
				this.dropEvent();
				}
				break;

			case 3:
				{
				this.state = 2450;
				this.dropFunction();
				}
				break;

			case 4:
				{
				this.state = 2451;
				this.dropProcedure();
				}
				break;

			case 5:
				{
				this.state = 2452;
				this.dropIndex();
				}
				break;

			case 6:
				{
				this.state = 2453;
				this.dropLogfileGroup();
				}
				break;

			case 7:
				{
				this.state = 2454;
				this.dropServer();
				}
				break;

			case 8:
				{
				this.state = 2455;
				this.dropTable();
				}
				break;

			case 9:
				{
				this.state = 2456;
				this.dropTableSpace();
				}
				break;

			case 10:
				{
				this.state = 2457;
				this.dropTrigger();
				}
				break;

			case 11:
				{
				this.state = 2458;
				this.dropView();
				}
				break;

			case 12:
				{
				this.state = 2459;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 2460;
				this.dropRole();
				}
				break;

			case 13:
				{
				this.state = 2461;
				if (!(this.serverVersion >= 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80011");
				}
				this.state = 2462;
				this.dropSpatialReference();
				}
				break;

			case 14:
				{
				this.state = 2463;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 2464;
				this.dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let _localctx: DropDatabaseContext = new DropDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, MultiQueryMySQLParser.RULE_dropDatabase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2467;
			this.match(MultiQueryMySQLParser.DATABASE_SYMBOL);
			this.state = 2469;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 194, this._ctx) ) {
			case 1:
				{
				this.state = 2468;
				this.ifExists();
				}
				break;
			}
			this.state = 2471;
			this.schemaRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropEvent(): DropEventContext {
		let _localctx: DropEventContext = new DropEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, MultiQueryMySQLParser.RULE_dropEvent);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2473;
			this.match(MultiQueryMySQLParser.EVENT_SYMBOL);
			this.state = 2475;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				{
				this.state = 2474;
				this.ifExists();
				}
				break;
			}
			this.state = 2477;
			this.eventRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFunction(): DropFunctionContext {
		let _localctx: DropFunctionContext = new DropFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, MultiQueryMySQLParser.RULE_dropFunction);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2479;
			this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
			this.state = 2481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
			case 1:
				{
				this.state = 2480;
				this.ifExists();
				}
				break;
			}
			this.state = 2483;
			this.functionRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropProcedure(): DropProcedureContext {
		let _localctx: DropProcedureContext = new DropProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, MultiQueryMySQLParser.RULE_dropProcedure);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2485;
			this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
			this.state = 2487;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				{
				this.state = 2486;
				this.ifExists();
				}
				break;
			}
			this.state = 2489;
			this.procedureRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let _localctx: DropIndexContext = new DropIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, MultiQueryMySQLParser.RULE_dropIndex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OFFLINE_SYMBOL || _la === MultiQueryMySQLParser.ONLINE_SYMBOL) {
				{
				this.state = 2491;
				this.onlineOption();
				}
			}

			this.state = 2494;
			_localctx._type = this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
			this.state = 2495;
			this.indexRef();
			this.state = 2496;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 2497;
			this.tableRef();
			this.state = 2499;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 199, this._ctx) ) {
			case 1:
				{
				this.state = 2498;
				this.indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroup(): DropLogfileGroupContext {
		let _localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, MultiQueryMySQLParser.RULE_dropLogfileGroup);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2501;
			this.match(MultiQueryMySQLParser.LOGFILE_SYMBOL);
			this.state = 2502;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 2503;
			this.logfileGroupRef();
			this.state = 2514;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 202, this._ctx) ) {
			case 1:
				{
				this.state = 2504;
				this.dropLogfileGroupOption();
				this.state = 2511;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2506;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
							{
							this.state = 2505;
							this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
							}
						}

						this.state = 2508;
						this.dropLogfileGroupOption();
						}
						}
					}
					this.state = 2513;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroupOption(): DropLogfileGroupOptionContext {
		let _localctx: DropLogfileGroupOptionContext = new DropLogfileGroupOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, MultiQueryMySQLParser.RULE_dropLogfileGroupOption);
		try {
			this.state = 2518;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
			case MultiQueryMySQLParser.WAIT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2516;
				this.tsOptionWait();
				}
				break;
			case MultiQueryMySQLParser.ENGINE_SYMBOL:
			case MultiQueryMySQLParser.STORAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2517;
				this.tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let _localctx: DropServerContext = new DropServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, MultiQueryMySQLParser.RULE_dropServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2520;
			this.match(MultiQueryMySQLParser.SERVER_SYMBOL);
			this.state = 2522;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 204, this._ctx) ) {
			case 1:
				{
				this.state = 2521;
				this.ifExists();
				}
				break;
			}
			this.state = 2524;
			this.serverRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTable(): DropTableContext {
		let _localctx: DropTableContext = new DropTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, MultiQueryMySQLParser.RULE_dropTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2527;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.TEMPORARY_SYMBOL) {
				{
				this.state = 2526;
				this.match(MultiQueryMySQLParser.TEMPORARY_SYMBOL);
				}
			}

			this.state = 2529;
			_localctx._type = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.TABLES_SYMBOL || _la === MultiQueryMySQLParser.TABLE_SYMBOL)) {
				_localctx._type = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2531;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				{
				this.state = 2530;
				this.ifExists();
				}
				break;
			}
			this.state = 2533;
			this.tableRefList();
			this.state = 2535;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 207, this._ctx) ) {
			case 1:
				{
				this.state = 2534;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CASCADE_SYMBOL || _la === MultiQueryMySQLParser.RESTRICT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTableSpace(): DropTableSpaceContext {
		let _localctx: DropTableSpaceContext = new DropTableSpaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, MultiQueryMySQLParser.RULE_dropTableSpace);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2537;
			this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
			this.state = 2538;
			this.tablespaceRef();
			this.state = 2549;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				{
				this.state = 2539;
				this.dropLogfileGroupOption();
				this.state = 2546;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2541;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
							{
							this.state = 2540;
							this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
							}
						}

						this.state = 2543;
						this.dropLogfileGroupOption();
						}
						}
					}
					this.state = 2548;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTrigger(): DropTriggerContext {
		let _localctx: DropTriggerContext = new DropTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, MultiQueryMySQLParser.RULE_dropTrigger);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2551;
			this.match(MultiQueryMySQLParser.TRIGGER_SYMBOL);
			this.state = 2553;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
			case 1:
				{
				this.state = 2552;
				this.ifExists();
				}
				break;
			}
			this.state = 2555;
			this.triggerRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropView(): DropViewContext {
		let _localctx: DropViewContext = new DropViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, MultiQueryMySQLParser.RULE_dropView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2557;
			this.match(MultiQueryMySQLParser.VIEW_SYMBOL);
			this.state = 2559;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 212, this._ctx) ) {
			case 1:
				{
				this.state = 2558;
				this.ifExists();
				}
				break;
			}
			this.state = 2561;
			this.viewRefList();
			this.state = 2563;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
			case 1:
				{
				this.state = 2562;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CASCADE_SYMBOL || _la === MultiQueryMySQLParser.RESTRICT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRole(): DropRoleContext {
		let _localctx: DropRoleContext = new DropRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, MultiQueryMySQLParser.RULE_dropRole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2565;
			this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
			this.state = 2567;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
			case 1:
				{
				this.state = 2566;
				this.ifExists();
				}
				break;
			}
			this.state = 2569;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropSpatialReference(): DropSpatialReferenceContext {
		let _localctx: DropSpatialReferenceContext = new DropSpatialReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, MultiQueryMySQLParser.RULE_dropSpatialReference);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2571;
			this.match(MultiQueryMySQLParser.SPATIAL_SYMBOL);
			this.state = 2572;
			this.match(MultiQueryMySQLParser.REFERENCE_SYMBOL);
			this.state = 2573;
			this.match(MultiQueryMySQLParser.SYSTEM_SYMBOL);
			this.state = 2575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 215, this._ctx) ) {
			case 1:
				{
				this.state = 2574;
				this.ifExists();
				}
				break;
			}
			this.state = 2577;
			this.real_ulonglong_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUndoTablespace(): DropUndoTablespaceContext {
		let _localctx: DropUndoTablespaceContext = new DropUndoTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, MultiQueryMySQLParser.RULE_dropUndoTablespace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2579;
			this.match(MultiQueryMySQLParser.UNDO_SYMBOL);
			this.state = 2580;
			this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
			this.state = 2581;
			this.tablespaceRef();
			this.state = 2583;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 216, this._ctx) ) {
			case 1:
				{
				this.state = 2582;
				this.undoTableSpaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTableStatement(): RenameTableStatementContext {
		let _localctx: RenameTableStatementContext = new RenameTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, MultiQueryMySQLParser.RULE_renameTableStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2585;
			this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
			this.state = 2586;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.TABLES_SYMBOL || _la === MultiQueryMySQLParser.TABLE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2587;
			this.renamePair();
			this.state = 2592;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2588;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 2589;
					this.renamePair();
					}
					}
				}
				this.state = 2594;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renamePair(): RenamePairContext {
		let _localctx: RenamePairContext = new RenamePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, MultiQueryMySQLParser.RULE_renamePair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2595;
			this.tableRef();
			this.state = 2596;
			this.match(MultiQueryMySQLParser.TO_SYMBOL);
			this.state = 2597;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncateTableStatement(): TruncateTableStatementContext {
		let _localctx: TruncateTableStatementContext = new TruncateTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, MultiQueryMySQLParser.RULE_truncateTableStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2599;
			this.match(MultiQueryMySQLParser.TRUNCATE_SYMBOL);
			this.state = 2601;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
			case 1:
				{
				this.state = 2600;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				}
				break;
			}
			this.state = 2603;
			this.tableRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public importStatement(): ImportStatementContext {
		let _localctx: ImportStatementContext = new ImportStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, MultiQueryMySQLParser.RULE_importStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2605;
			this.match(MultiQueryMySQLParser.IMPORT_SYMBOL);
			this.state = 2606;
			this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
			this.state = 2607;
			this.match(MultiQueryMySQLParser.FROM_SYMBOL);
			this.state = 2608;
			this.textStringLiteralList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let _localctx: CallStatementContext = new CallStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, MultiQueryMySQLParser.RULE_callStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2610;
			this.match(MultiQueryMySQLParser.CALL_SYMBOL);
			this.state = 2611;
			this.procedureRef();
			this.state = 2617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 220, this._ctx) ) {
			case 1:
				{
				this.state = 2612;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2614;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 219, this._ctx) ) {
				case 1:
					{
					this.state = 2613;
					this.exprList();
					}
					break;
				}
				this.state = 2616;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, MultiQueryMySQLParser.RULE_deleteStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2621;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 221, this._ctx) ) {
			case 1:
				{
				this.state = 2619;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 2620;
				this.withClause();
				}
				break;
			}
			this.state = 2623;
			this.match(MultiQueryMySQLParser.DELETE_SYMBOL);
			this.state = 2627;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2624;
					this.deleteStatementOption();
					}
					}
				}
				this.state = 2629;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
			}
			this.state = 2662;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 2630;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 2654;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
				case 1:
					{
					this.state = 2631;
					this.tableAliasRefList();
					this.state = 2632;
					this.match(MultiQueryMySQLParser.USING_SYMBOL);
					this.state = 2633;
					this.tableReferenceList();
					this.state = 2635;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 223, this._ctx) ) {
					case 1:
						{
						this.state = 2634;
						this.whereClause();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 2637;
					this.tableRef();
					this.state = 2640;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 224, this._ctx) ) {
					case 1:
						{
						this.state = 2638;
						if (!(this.serverVersion >= 80017)) {
							throw new FailedPredicateException(this, "this.serverVersion >= 80017");
						}
						this.state = 2639;
						this.tableAlias();
						}
						break;
					}
					this.state = 2643;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
					case 1:
						{
						this.state = 2642;
						this.partitionDelete();
						}
						break;
					}
					this.state = 2646;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 226, this._ctx) ) {
					case 1:
						{
						this.state = 2645;
						this.whereClause();
						}
						break;
					}
					this.state = 2649;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 227, this._ctx) ) {
					case 1:
						{
						this.state = 2648;
						this.orderClause();
						}
						break;
					}
					this.state = 2652;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
					case 1:
						{
						this.state = 2651;
						this.simpleLimitClause();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 2656;
				this.tableAliasRefList();
				this.state = 2657;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 2658;
				this.tableReferenceList();
				this.state = 2660;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
				case 1:
					{
					this.state = 2659;
					this.whereClause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDelete(): PartitionDeleteContext {
		let _localctx: PartitionDeleteContext = new PartitionDeleteContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, MultiQueryMySQLParser.RULE_partitionDelete);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2664;
			if (!(this.serverVersion >= 50602)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50602");
			}
			this.state = 2665;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 2666;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2667;
			this.identifierList();
			this.state = 2668;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatementOption(): DeleteStatementOptionContext {
		let _localctx: DeleteStatementOptionContext = new DeleteStatementOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, MultiQueryMySQLParser.RULE_deleteStatementOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2670;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.QUICK_SYMBOL || _la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public doStatement(): DoStatementContext {
		let _localctx: DoStatementContext = new DoStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, MultiQueryMySQLParser.RULE_doStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2672;
			this.match(MultiQueryMySQLParser.DO_SYMBOL);
			this.state = 2677;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 2673;
				if (!(this.serverVersion < 50709)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50709");
				}
				this.state = 2674;
				this.exprList();
				}
				break;

			case 2:
				{
				this.state = 2675;
				if (!(this.serverVersion >= 50709)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50709");
				}
				this.state = 2676;
				this.selectItemList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerStatement(): HandlerStatementContext {
		let _localctx: HandlerStatementContext = new HandlerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, MultiQueryMySQLParser.RULE_handlerStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2679;
			this.match(MultiQueryMySQLParser.HANDLER_SYMBOL);
			this.state = 2697;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 237, this._ctx) ) {
			case 1:
				{
				this.state = 2680;
				this.tableRef();
				this.state = 2681;
				this.match(MultiQueryMySQLParser.OPEN_SYMBOL);
				this.state = 2683;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
				case 1:
					{
					this.state = 2682;
					this.tableAlias();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 2685;
				this.identifier();
				this.state = 2695;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.CLOSE_SYMBOL:
					{
					this.state = 2686;
					this.match(MultiQueryMySQLParser.CLOSE_SYMBOL);
					}
					break;
				case MultiQueryMySQLParser.READ_SYMBOL:
					{
					this.state = 2687;
					this.match(MultiQueryMySQLParser.READ_SYMBOL);
					this.state = 2688;
					this.handlerReadOrScan();
					this.state = 2690;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
					case 1:
						{
						this.state = 2689;
						this.whereClause();
						}
						break;
					}
					this.state = 2693;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
					case 1:
						{
						this.state = 2692;
						this.limitClause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadOrScan(): HandlerReadOrScanContext {
		let _localctx: HandlerReadOrScanContext = new HandlerReadOrScanContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, MultiQueryMySQLParser.RULE_handlerReadOrScan);
		let _la: number;
		try {
			this.state = 2709;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 239, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2699;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.FIRST_SYMBOL || _la === MultiQueryMySQLParser.NEXT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2700;
				this.identifier();
				this.state = 2707;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.FIRST_SYMBOL:
				case MultiQueryMySQLParser.LAST_SYMBOL:
				case MultiQueryMySQLParser.NEXT_SYMBOL:
				case MultiQueryMySQLParser.PREV_SYMBOL:
					{
					this.state = 2701;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.FIRST_SYMBOL || _la === MultiQueryMySQLParser.LAST_SYMBOL || _la === MultiQueryMySQLParser.NEXT_SYMBOL || _la === MultiQueryMySQLParser.PREV_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case MultiQueryMySQLParser.EQUAL_OPERATOR:
				case MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR:
				case MultiQueryMySQLParser.GREATER_THAN_OPERATOR:
				case MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR:
				case MultiQueryMySQLParser.LESS_THAN_OPERATOR:
					{
					this.state = 2702;
					_la = this._input.LA(1);
					if (!(((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (MultiQueryMySQLParser.EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.GREATER_THAN_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.LESS_THAN_OPERATOR - 383)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2703;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 2704;
					this.values();
					this.state = 2705;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let _localctx: InsertStatementContext = new InsertStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, MultiQueryMySQLParser.RULE_insertStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2711;
			this.match(MultiQueryMySQLParser.INSERT_SYMBOL);
			this.state = 2713;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				{
				this.state = 2712;
				this.insertLockOption();
				}
				break;
			}
			this.state = 2716;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 241, this._ctx) ) {
			case 1:
				{
				this.state = 2715;
				this.match(MultiQueryMySQLParser.IGNORE_SYMBOL);
				}
				break;
			}
			this.state = 2719;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 242, this._ctx) ) {
			case 1:
				{
				this.state = 2718;
				this.match(MultiQueryMySQLParser.INTO_SYMBOL);
				}
				break;
			}
			this.state = 2721;
			this.tableRef();
			this.state = 2723;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 243, this._ctx) ) {
			case 1:
				{
				this.state = 2722;
				this.usePartition();
				}
				break;
			}
			this.state = 2737;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 246, this._ctx) ) {
			case 1:
				{
				this.state = 2725;
				this.insertFromConstructor();
				this.state = 2728;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 244, this._ctx) ) {
				case 1:
					{
					this.state = 2726;
					if (!( this.serverVersion >= 80018)) {
						throw new FailedPredicateException(this, " this.serverVersion >= 80018");
					}
					this.state = 2727;
					this.valuesReference();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 2730;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 2731;
				this.updateList();
				this.state = 2734;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
				case 1:
					{
					this.state = 2732;
					if (!( this.serverVersion >= 80018)) {
						throw new FailedPredicateException(this, " this.serverVersion >= 80018");
					}
					this.state = 2733;
					this.valuesReference();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 2736;
				this.insertQueryExpression();
				}
				break;
			}
			this.state = 2740;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 247, this._ctx) ) {
			case 1:
				{
				this.state = 2739;
				this.insertUpdateList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertLockOption(): InsertLockOptionContext {
		let _localctx: InsertLockOptionContext = new InsertLockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, MultiQueryMySQLParser.RULE_insertLockOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2742;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DELAYED_SYMBOL || _la === MultiQueryMySQLParser.HIGH_PRIORITY_SYMBOL || _la === MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertFromConstructor(): InsertFromConstructorContext {
		let _localctx: InsertFromConstructorContext = new InsertFromConstructorContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, MultiQueryMySQLParser.RULE_insertFromConstructor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2749;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OPEN_PAR_SYMBOL) {
				{
				this.state = 2744;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2746;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 248, this._ctx) ) {
				case 1:
					{
					this.state = 2745;
					this.fields();
					}
					break;
				}
				this.state = 2748;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
			}

			this.state = 2751;
			this.insertValues();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fields(): FieldsContext {
		let _localctx: FieldsContext = new FieldsContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, MultiQueryMySQLParser.RULE_fields);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2753;
			this.insertIdentifier();
			this.state = 2758;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 2754;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 2755;
				this.insertIdentifier();
				}
				}
				this.state = 2760;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertValues(): InsertValuesContext {
		let _localctx: InsertValuesContext = new InsertValuesContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, MultiQueryMySQLParser.RULE_insertValues);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2761;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.VALUE_SYMBOL || _la === MultiQueryMySQLParser.VALUES_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2762;
			this.valueList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertQueryExpression(): InsertQueryExpressionContext {
		let _localctx: InsertQueryExpressionContext = new InsertQueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, MultiQueryMySQLParser.RULE_insertQueryExpression);
		try {
			this.state = 2771;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2764;
				this.queryExpressionOrParens();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2765;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2767;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
				case 1:
					{
					this.state = 2766;
					this.fields();
					}
					break;
				}
				this.state = 2769;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 2770;
				this.queryExpressionOrParens();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valueList(): ValueListContext {
		let _localctx: ValueListContext = new ValueListContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, MultiQueryMySQLParser.RULE_valueList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2773;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2775;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 253, this._ctx) ) {
			case 1:
				{
				this.state = 2774;
				this.values();
				}
				break;
			}
			this.state = 2777;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 2786;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2778;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 2779;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 2781;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
					case 1:
						{
						this.state = 2780;
						this.values();
						}
						break;
					}
					this.state = 2783;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					}
				}
				this.state = 2788;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public values(): ValuesContext {
		let _localctx: ValuesContext = new ValuesContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, MultiQueryMySQLParser.RULE_values);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2791;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 256, this._ctx) ) {
			case 1:
				{
				this.state = 2789;
				this.expr(0);
				}
				break;

			case 2:
				{
				this.state = 2790;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
			this.state = 2800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 2793;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 2796;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 257, this._ctx) ) {
				case 1:
					{
					this.state = 2794;
					this.expr(0);
					}
					break;

				case 2:
					{
					this.state = 2795;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				this.state = 2802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valuesReference(): ValuesReferenceContext {
		let _localctx: ValuesReferenceContext = new ValuesReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, MultiQueryMySQLParser.RULE_valuesReference);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2803;
			this.match(MultiQueryMySQLParser.AS_SYMBOL);
			this.state = 2804;
			this.identifier();
			this.state = 2806;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
			case 1:
				{
				this.state = 2805;
				this.columnInternalRefList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertUpdateList(): InsertUpdateListContext {
		let _localctx: InsertUpdateListContext = new InsertUpdateListContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, MultiQueryMySQLParser.RULE_insertUpdateList);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2808;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 2809;
			this.match(MultiQueryMySQLParser.DUPLICATE_SYMBOL);
			this.state = 2810;
			this.match(MultiQueryMySQLParser.KEY_SYMBOL);
			this.state = 2811;
			this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
			this.state = 2812;
			this.updateList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadStatement(): LoadStatementContext {
		let _localctx: LoadStatementContext = new LoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, MultiQueryMySQLParser.RULE_loadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2814;
			this.match(MultiQueryMySQLParser.LOAD_SYMBOL);
			this.state = 2815;
			this.dataOrXml();
			this.state = 2817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.CONCURRENT_SYMBOL || _la === MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL) {
				{
				this.state = 2816;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CONCURRENT_SYMBOL || _la === MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.LOCAL_SYMBOL) {
				{
				this.state = 2819;
				this.match(MultiQueryMySQLParser.LOCAL_SYMBOL);
				}
			}

			this.state = 2822;
			this.match(MultiQueryMySQLParser.INFILE_SYMBOL);
			this.state = 2823;
			this.textLiteral();
			this.state = 2825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.REPLACE_SYMBOL) {
				{
				this.state = 2824;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.REPLACE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2827;
			this.match(MultiQueryMySQLParser.INTO_SYMBOL);
			this.state = 2828;
			this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
			this.state = 2829;
			this.tableRef();
			this.state = 2831;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				{
				this.state = 2830;
				this.usePartition();
				}
				break;
			}
			this.state = 2834;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 264, this._ctx) ) {
			case 1:
				{
				this.state = 2833;
				this.charsetClause();
				}
				break;
			}
			this.state = 2837;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 265, this._ctx) ) {
			case 1:
				{
				this.state = 2836;
				this.xmlRowsIdentifiedBy();
				}
				break;
			}
			this.state = 2840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
			case 1:
				{
				this.state = 2839;
				this.fieldsClause();
				}
				break;
			}
			this.state = 2843;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 267, this._ctx) ) {
			case 1:
				{
				this.state = 2842;
				this.linesClause();
				}
				break;
			}
			this.state = 2845;
			this.loadDataFileTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataOrXml(): DataOrXmlContext {
		let _localctx: DataOrXmlContext = new DataOrXmlContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, MultiQueryMySQLParser.RULE_dataOrXml);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2847;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DATA_SYMBOL || _la === MultiQueryMySQLParser.XML_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
		let _localctx: XmlRowsIdentifiedByContext = new XmlRowsIdentifiedByContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, MultiQueryMySQLParser.RULE_xmlRowsIdentifiedBy);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2849;
			this.match(MultiQueryMySQLParser.ROWS_SYMBOL);
			this.state = 2850;
			this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
			this.state = 2851;
			this.match(MultiQueryMySQLParser.BY_SYMBOL);
			this.state = 2852;
			this.textString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadDataFileTail(): LoadDataFileTailContext {
		let _localctx: LoadDataFileTailContext = new LoadDataFileTailContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, MultiQueryMySQLParser.RULE_loadDataFileTail);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2857;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 268, this._ctx) ) {
			case 1:
				{
				this.state = 2854;
				this.match(MultiQueryMySQLParser.IGNORE_SYMBOL);
				this.state = 2855;
				this.match(MultiQueryMySQLParser.INT_NUMBER);
				this.state = 2856;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ROWS_SYMBOL || _la === MultiQueryMySQLParser.LINES_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2860;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 269, this._ctx) ) {
			case 1:
				{
				this.state = 2859;
				this.loadDataFileTargetList();
				}
				break;
			}
			this.state = 2864;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
			case 1:
				{
				this.state = 2862;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 2863;
				this.updateList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadDataFileTargetList(): LoadDataFileTargetListContext {
		let _localctx: LoadDataFileTargetListContext = new LoadDataFileTargetListContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, MultiQueryMySQLParser.RULE_loadDataFileTargetList);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2866;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2868;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				{
				this.state = 2867;
				this.fieldOrVariableList();
				}
				break;
			}
			this.state = 2870;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldOrVariableList(): FieldOrVariableListContext {
		let _localctx: FieldOrVariableListContext = new FieldOrVariableListContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, MultiQueryMySQLParser.RULE_fieldOrVariableList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2874;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 272, this._ctx) ) {
			case 1:
				{
				this.state = 2872;
				this.columnRef();
				}
				break;

			case 2:
				{
				this.state = 2873;
				this.userVariable();
				}
				break;
			}
			this.state = 2883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 2876;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 2879;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 273, this._ctx) ) {
				case 1:
					{
					this.state = 2877;
					this.columnRef();
					}
					break;

				case 2:
					{
					this.state = 2878;
					this.userVariable();
					}
					break;
				}
				}
				}
				this.state = 2885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replaceStatement(): ReplaceStatementContext {
		let _localctx: ReplaceStatementContext = new ReplaceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, MultiQueryMySQLParser.RULE_replaceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2886;
			this.match(MultiQueryMySQLParser.REPLACE_SYMBOL);
			this.state = 2888;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 275, this._ctx) ) {
			case 1:
				{
				this.state = 2887;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DELAYED_SYMBOL || _la === MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2891;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
			case 1:
				{
				this.state = 2890;
				this.match(MultiQueryMySQLParser.INTO_SYMBOL);
				}
				break;
			}
			this.state = 2893;
			this.tableRef();
			this.state = 2895;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 277, this._ctx) ) {
			case 1:
				{
				this.state = 2894;
				this.usePartition();
				}
				break;
			}
			this.state = 2901;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 278, this._ctx) ) {
			case 1:
				{
				this.state = 2897;
				this.insertFromConstructor();
				}
				break;

			case 2:
				{
				this.state = 2898;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 2899;
				this.updateList();
				}
				break;

			case 3:
				{
				this.state = 2900;
				this.insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let _localctx: SelectStatementContext = new SelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, MultiQueryMySQLParser.RULE_selectStatement);
		try {
			this.state = 2906;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2903;
				this.queryExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2904;
				this.queryExpressionParens();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2905;
				this.selectStatementWithInto();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatementWithInto(): SelectStatementWithIntoContext {
		let _localctx: SelectStatementWithIntoContext = new SelectStatementWithIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, MultiQueryMySQLParser.RULE_selectStatementWithInto);
		try {
			this.state = 2915;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 280, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2908;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2909;
				this.selectStatementWithInto();
				this.state = 2910;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2912;
				this.queryExpression();
				this.state = 2913;
				this.intoClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpression(): QueryExpressionContext {
		let _localctx: QueryExpressionContext = new QueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, MultiQueryMySQLParser.RULE_queryExpression);
		try {
			this.state = 2951;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 290, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2919;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 281, this._ctx) ) {
				case 1:
					{
					this.state = 2917;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 2918;
					this.withClause();
					}
					break;
				}
				this.state = 2936;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 286, this._ctx) ) {
				case 1:
					{
					this.state = 2921;
					this.queryExpressionBody(0);
					this.state = 2923;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 282, this._ctx) ) {
					case 1:
						{
						this.state = 2922;
						this.orderClause();
						}
						break;
					}
					this.state = 2926;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
					case 1:
						{
						this.state = 2925;
						this.limitClause();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 2928;
					this.queryExpressionParens();
					this.state = 2934;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.ORDER_SYMBOL:
						{
						this.state = 2929;
						this.orderClause();
						this.state = 2931;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 284, this._ctx) ) {
						case 1:
							{
							this.state = 2930;
							this.limitClause();
							}
							break;
						}
						}
						break;
					case MultiQueryMySQLParser.LIMIT_SYMBOL:
						{
						this.state = 2933;
						this.limitClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				this.state = 2940;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
				case 1:
					{
					this.state = 2938;
					if (!(this.serverVersion < 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion < 80000");
					}
					this.state = 2939;
					this.procedureAnalyseClause();
					}
					break;
				}
				this.state = 2943;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 288, this._ctx) ) {
				case 1:
					{
					this.state = 2942;
					this.lockingClause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2945;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 2946;
				this.withClause();
				this.state = 2947;
				this.queryExpressionParens();
				this.state = 2949;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 289, this._ctx) ) {
				case 1:
					{
					this.state = 2948;
					this.lockingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public queryExpressionBody(): QueryExpressionBodyContext;
	public queryExpressionBody(_p: number): QueryExpressionBodyContext;
	// @RuleVersion(0)
	public queryExpressionBody(_p?: number): QueryExpressionBodyContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: QueryExpressionBodyContext = new QueryExpressionBodyContext(this._ctx, _parentState);
		let _prevctx: QueryExpressionBodyContext = _localctx;
		let _startState: number = 276;
		this.enterRecursionRule(_localctx, 276, MultiQueryMySQLParser.RULE_queryExpressionBody, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2964;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.SELECT_SYMBOL:
				{
				this.state = 2954;
				this.querySpecification();
				}
				break;
			case MultiQueryMySQLParser.OPEN_PAR_SYMBOL:
				{
				this.state = 2955;
				this.queryExpressionParens();
				this.state = 2956;
				this.match(MultiQueryMySQLParser.UNION_SYMBOL);
				this.state = 2958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ALL_SYMBOL || _la === MultiQueryMySQLParser.DISTINCT_SYMBOL) {
					{
					this.state = 2957;
					this.unionOption();
					}
				}

				this.state = 2962;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.SELECT_SYMBOL:
					{
					this.state = 2960;
					this.querySpecification();
					}
					break;
				case MultiQueryMySQLParser.OPEN_PAR_SYMBOL:
					{
					this.state = 2961;
					this.queryExpressionParens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2977;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryExpressionBodyContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_queryExpressionBody);
					this.state = 2966;
					if (!(this.precpred(this._ctx, 2))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
					}
					this.state = 2967;
					this.match(MultiQueryMySQLParser.UNION_SYMBOL);
					this.state = 2969;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.ALL_SYMBOL || _la === MultiQueryMySQLParser.DISTINCT_SYMBOL) {
						{
						this.state = 2968;
						this.unionOption();
						}
					}

					this.state = 2973;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.SELECT_SYMBOL:
						{
						this.state = 2971;
						this.querySpecification();
						}
						break;
					case MultiQueryMySQLParser.OPEN_PAR_SYMBOL:
						{
						this.state = 2972;
						this.queryExpressionParens();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 2979;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpressionParens(): QueryExpressionParensContext {
		let _localctx: QueryExpressionParensContext = new QueryExpressionParensContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, MultiQueryMySQLParser.RULE_queryExpressionParens);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2980;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2983;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 297, this._ctx) ) {
			case 1:
				{
				this.state = 2981;
				this.queryExpressionParens();
				}
				break;

			case 2:
				{
				this.state = 2982;
				this.queryExpression();
				}
				break;
			}
			this.state = 2985;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, MultiQueryMySQLParser.RULE_querySpecification);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2987;
			this.match(MultiQueryMySQLParser.SELECT_SYMBOL);
			this.state = 2991;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2988;
					this.selectOption();
					}
					}
				}
				this.state = 2993;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
			}
			this.state = 2994;
			this.selectItemList();
			this.state = 2996;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				{
				this.state = 2995;
				this.intoClause();
				}
				break;
			}
			this.state = 2999;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 300, this._ctx) ) {
			case 1:
				{
				this.state = 2998;
				this.fromClause();
				}
				break;
			}
			this.state = 3002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
			case 1:
				{
				this.state = 3001;
				this.whereClause();
				}
				break;
			}
			this.state = 3005;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 302, this._ctx) ) {
			case 1:
				{
				this.state = 3004;
				this.groupByClause();
				}
				break;
			}
			this.state = 3008;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
			case 1:
				{
				this.state = 3007;
				this.havingClause();
				}
				break;
			}
			this.state = 3012;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 304, this._ctx) ) {
			case 1:
				{
				this.state = 3010;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 3011;
				this.windowClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subquery(): SubqueryContext {
		let _localctx: SubqueryContext = new SubqueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, MultiQueryMySQLParser.RULE_subquery);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3014;
			this.queryExpressionParens();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecOption(): QuerySpecOptionContext {
		let _localctx: QuerySpecOptionContext = new QuerySpecOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, MultiQueryMySQLParser.RULE_querySpecOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3016;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL || _la === MultiQueryMySQLParser.ALL_SYMBOL || _la === MultiQueryMySQLParser.DISTINCT_SYMBOL || _la === MultiQueryMySQLParser.HIGH_PRIORITY_SYMBOL || ((((_la - 629)) & ~0x1F) === 0 && ((1 << (_la - 629)) & ((1 << (MultiQueryMySQLParser.SQL_BIG_RESULT_SYMBOL - 629)) | (1 << (MultiQueryMySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL - 629)) | (1 << (MultiQueryMySQLParser.SQL_SMALL_RESULT_SYMBOL - 629)) | (1 << (MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL - 629)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let _localctx: LimitClauseContext = new LimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, MultiQueryMySQLParser.RULE_limitClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3018;
			this.match(MultiQueryMySQLParser.LIMIT_SYMBOL);
			this.state = 3019;
			this.limitOptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleLimitClause(): SimpleLimitClauseContext {
		let _localctx: SimpleLimitClauseContext = new SimpleLimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, MultiQueryMySQLParser.RULE_simpleLimitClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3021;
			this.match(MultiQueryMySQLParser.LIMIT_SYMBOL);
			this.state = 3022;
			this.limitOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitOptions(): LimitOptionsContext {
		let _localctx: LimitOptionsContext = new LimitOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, MultiQueryMySQLParser.RULE_limitOptions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3024;
			this.limitOption();
			this.state = 3027;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
			case 1:
				{
				this.state = 3025;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.OFFSET_SYMBOL || _la === MultiQueryMySQLParser.COMMA_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3026;
				this.limitOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitOption(): LimitOptionContext {
		let _localctx: LimitOptionContext = new LimitOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, MultiQueryMySQLParser.RULE_limitOption);
		let _la: number;
		try {
			this.state = 3031;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 306, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3029;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3030;
				_la = this._input.LA(1);
				if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MultiQueryMySQLParser.INT_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.LONG_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MultiQueryMySQLParser.PARAM_MARKER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intoClause(): IntoClauseContext {
		let _localctx: IntoClauseContext = new IntoClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, MultiQueryMySQLParser.RULE_intoClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3033;
			this.match(MultiQueryMySQLParser.INTO_SYMBOL);
			this.state = 3061;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
			case 1:
				{
				this.state = 3034;
				this.match(MultiQueryMySQLParser.OUTFILE_SYMBOL);
				this.state = 3035;
				this.textStringLiteral();
				this.state = 3037;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 307, this._ctx) ) {
				case 1:
					{
					this.state = 3036;
					this.charsetClause();
					}
					break;
				}
				this.state = 3040;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 308, this._ctx) ) {
				case 1:
					{
					this.state = 3039;
					this.fieldsClause();
					}
					break;
				}
				this.state = 3043;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 309, this._ctx) ) {
				case 1:
					{
					this.state = 3042;
					this.linesClause();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 3045;
				this.match(MultiQueryMySQLParser.DUMPFILE_SYMBOL);
				this.state = 3046;
				this.textStringLiteral();
				}
				break;

			case 3:
				{
				this.state = 3049;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 310, this._ctx) ) {
				case 1:
					{
					this.state = 3047;
					this.textOrIdentifier();
					}
					break;

				case 2:
					{
					this.state = 3048;
					this.userVariable();
					}
					break;
				}
				this.state = 3058;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3051;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 3054;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 311, this._ctx) ) {
						case 1:
							{
							this.state = 3052;
							this.textOrIdentifier();
							}
							break;

						case 2:
							{
							this.state = 3053;
							this.userVariable();
							}
							break;
						}
						}
						}
					}
					this.state = 3060;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
		let _localctx: ProcedureAnalyseClauseContext = new ProcedureAnalyseClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, MultiQueryMySQLParser.RULE_procedureAnalyseClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3063;
			this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
			this.state = 3064;
			this.match(MultiQueryMySQLParser.ANALYSE_SYMBOL);
			this.state = 3065;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.INT_NUMBER) {
				{
				this.state = 3066;
				this.match(MultiQueryMySQLParser.INT_NUMBER);
				this.state = 3069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					this.state = 3067;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3068;
					this.match(MultiQueryMySQLParser.INT_NUMBER);
					}
				}

				}
			}

			this.state = 3073;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let _localctx: HavingClauseContext = new HavingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, MultiQueryMySQLParser.RULE_havingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3075;
			this.match(MultiQueryMySQLParser.HAVING_SYMBOL);
			this.state = 3076;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowClause(): WindowClauseContext {
		let _localctx: WindowClauseContext = new WindowClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, MultiQueryMySQLParser.RULE_windowClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3078;
			this.match(MultiQueryMySQLParser.WINDOW_SYMBOL);
			this.state = 3079;
			this.windowDefinition();
			this.state = 3084;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3080;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3081;
					this.windowDefinition();
					}
					}
				}
				this.state = 3086;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowDefinition(): WindowDefinitionContext {
		let _localctx: WindowDefinitionContext = new WindowDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, MultiQueryMySQLParser.RULE_windowDefinition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3087;
			this.windowName();
			this.state = 3088;
			this.match(MultiQueryMySQLParser.AS_SYMBOL);
			this.state = 3089;
			this.windowSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowSpec(): WindowSpecContext {
		let _localctx: WindowSpecContext = new WindowSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, MultiQueryMySQLParser.RULE_windowSpec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3091;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3092;
			this.windowSpecDetails();
			this.state = 3093;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowSpecDetails(): WindowSpecDetailsContext {
		let _localctx: WindowSpecDetailsContext = new WindowSpecDetailsContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, MultiQueryMySQLParser.RULE_windowSpecDetails);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3096;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 317, this._ctx) ) {
			case 1:
				{
				this.state = 3095;
				this.windowName();
				}
				break;
			}
			this.state = 3101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.PARTITION_SYMBOL) {
				{
				this.state = 3098;
				this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
				this.state = 3099;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 3100;
				this.orderList();
				}
			}

			this.state = 3104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ORDER_SYMBOL) {
				{
				this.state = 3103;
				this.orderClause();
				}
			}

			this.state = 3107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ROWS_SYMBOL || _la === MultiQueryMySQLParser.RANGE_SYMBOL || _la === MultiQueryMySQLParser.GROUPS_SYMBOL) {
				{
				this.state = 3106;
				this.windowFrameClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameClause(): WindowFrameClauseContext {
		let _localctx: WindowFrameClauseContext = new WindowFrameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, MultiQueryMySQLParser.RULE_windowFrameClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3109;
			this.windowFrameUnits();
			this.state = 3110;
			this.windowFrameExtent();
			this.state = 3112;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.EXCLUDE_SYMBOL) {
				{
				this.state = 3111;
				this.windowFrameExclusion();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameUnits(): WindowFrameUnitsContext {
		let _localctx: WindowFrameUnitsContext = new WindowFrameUnitsContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, MultiQueryMySQLParser.RULE_windowFrameUnits);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3114;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.ROWS_SYMBOL || _la === MultiQueryMySQLParser.RANGE_SYMBOL || _la === MultiQueryMySQLParser.GROUPS_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameExtent(): WindowFrameExtentContext {
		let _localctx: WindowFrameExtentContext = new WindowFrameExtentContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, MultiQueryMySQLParser.RULE_windowFrameExtent);
		try {
			this.state = 3118;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CURRENT_SYMBOL:
			case MultiQueryMySQLParser.INT_NUMBER:
			case MultiQueryMySQLParser.LONG_NUMBER:
			case MultiQueryMySQLParser.ULONGLONG_NUMBER:
			case MultiQueryMySQLParser.PARAM_MARKER:
			case MultiQueryMySQLParser.DECIMAL_NUMBER:
			case MultiQueryMySQLParser.FLOAT_NUMBER:
			case MultiQueryMySQLParser.INTERVAL_SYMBOL:
			case MultiQueryMySQLParser.UNBOUNDED_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3116;
				this.windowFrameStart();
				}
				break;
			case MultiQueryMySQLParser.BETWEEN_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3117;
				this.windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameStart(): WindowFrameStartContext {
		let _localctx: WindowFrameStartContext = new WindowFrameStartContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, MultiQueryMySQLParser.RULE_windowFrameStart);
		try {
			this.state = 3134;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.UNBOUNDED_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3120;
				this.match(MultiQueryMySQLParser.UNBOUNDED_SYMBOL);
				this.state = 3121;
				this.match(MultiQueryMySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.INT_NUMBER:
			case MultiQueryMySQLParser.LONG_NUMBER:
			case MultiQueryMySQLParser.ULONGLONG_NUMBER:
			case MultiQueryMySQLParser.DECIMAL_NUMBER:
			case MultiQueryMySQLParser.FLOAT_NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3122;
				this.ulonglong_number();
				this.state = 3123;
				this.match(MultiQueryMySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.PARAM_MARKER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3125;
				this.match(MultiQueryMySQLParser.PARAM_MARKER);
				this.state = 3126;
				this.match(MultiQueryMySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.INTERVAL_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3127;
				this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
				this.state = 3128;
				this.expr(0);
				this.state = 3129;
				this.interval();
				this.state = 3130;
				this.match(MultiQueryMySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.CURRENT_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3132;
				this.match(MultiQueryMySQLParser.CURRENT_SYMBOL);
				this.state = 3133;
				this.match(MultiQueryMySQLParser.ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameBetween(): WindowFrameBetweenContext {
		let _localctx: WindowFrameBetweenContext = new WindowFrameBetweenContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, MultiQueryMySQLParser.RULE_windowFrameBetween);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3136;
			this.match(MultiQueryMySQLParser.BETWEEN_SYMBOL);
			this.state = 3137;
			this.windowFrameBound();
			this.state = 3138;
			this.match(MultiQueryMySQLParser.AND_SYMBOL);
			this.state = 3139;
			this.windowFrameBound();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameBound(): WindowFrameBoundContext {
		let _localctx: WindowFrameBoundContext = new WindowFrameBoundContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, MultiQueryMySQLParser.RULE_windowFrameBound);
		try {
			this.state = 3154;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 324, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3141;
				this.windowFrameStart();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3142;
				this.match(MultiQueryMySQLParser.UNBOUNDED_SYMBOL);
				this.state = 3143;
				this.match(MultiQueryMySQLParser.FOLLOWING_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3144;
				this.ulonglong_number();
				this.state = 3145;
				this.match(MultiQueryMySQLParser.FOLLOWING_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3147;
				this.match(MultiQueryMySQLParser.PARAM_MARKER);
				this.state = 3148;
				this.match(MultiQueryMySQLParser.FOLLOWING_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3149;
				this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
				this.state = 3150;
				this.expr(0);
				this.state = 3151;
				this.interval();
				this.state = 3152;
				this.match(MultiQueryMySQLParser.FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrameExclusion(): WindowFrameExclusionContext {
		let _localctx: WindowFrameExclusionContext = new WindowFrameExclusionContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, MultiQueryMySQLParser.RULE_windowFrameExclusion);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3156;
			this.match(MultiQueryMySQLParser.EXCLUDE_SYMBOL);
			this.state = 3163;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CURRENT_SYMBOL:
				{
				this.state = 3157;
				this.match(MultiQueryMySQLParser.CURRENT_SYMBOL);
				this.state = 3158;
				this.match(MultiQueryMySQLParser.ROW_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.GROUP_SYMBOL:
				{
				this.state = 3159;
				this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.TIES_SYMBOL:
				{
				this.state = 3160;
				this.match(MultiQueryMySQLParser.TIES_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.NO_SYMBOL:
				{
				this.state = 3161;
				this.match(MultiQueryMySQLParser.NO_SYMBOL);
				this.state = 3162;
				this.match(MultiQueryMySQLParser.OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let _localctx: WithClauseContext = new WithClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, MultiQueryMySQLParser.RULE_withClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3165;
			this.match(MultiQueryMySQLParser.WITH_SYMBOL);
			this.state = 3167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 326, this._ctx) ) {
			case 1:
				{
				this.state = 3166;
				this.match(MultiQueryMySQLParser.RECURSIVE_SYMBOL);
				}
				break;
			}
			this.state = 3169;
			this.commonTableExpression();
			this.state = 3174;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 3170;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 3171;
				this.commonTableExpression();
				}
				}
				this.state = 3176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commonTableExpression(): CommonTableExpressionContext {
		let _localctx: CommonTableExpressionContext = new CommonTableExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, MultiQueryMySQLParser.RULE_commonTableExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3177;
			this.identifier();
			this.state = 3179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OPEN_PAR_SYMBOL) {
				{
				this.state = 3178;
				this.columnInternalRefList();
				}
			}

			this.state = 3181;
			this.match(MultiQueryMySQLParser.AS_SYMBOL);
			this.state = 3182;
			this.subquery();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let _localctx: GroupByClauseContext = new GroupByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, MultiQueryMySQLParser.RULE_groupByClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3184;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 3185;
			this.match(MultiQueryMySQLParser.BY_SYMBOL);
			this.state = 3186;
			this.orderList();
			this.state = 3188;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 329, this._ctx) ) {
			case 1:
				{
				this.state = 3187;
				this.olapOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public olapOption(): OlapOptionContext {
		let _localctx: OlapOptionContext = new OlapOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, MultiQueryMySQLParser.RULE_olapOption);
		try {
			this.state = 3195;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3190;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 3191;
				this.match(MultiQueryMySQLParser.ROLLUP_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3192;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 3193;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 3194;
				this.match(MultiQueryMySQLParser.CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderClause(): OrderClauseContext {
		let _localctx: OrderClauseContext = new OrderClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, MultiQueryMySQLParser.RULE_orderClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3197;
			this.match(MultiQueryMySQLParser.ORDER_SYMBOL);
			this.state = 3198;
			this.match(MultiQueryMySQLParser.BY_SYMBOL);
			this.state = 3199;
			this.orderList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public direction(): DirectionContext {
		let _localctx: DirectionContext = new DirectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, MultiQueryMySQLParser.RULE_direction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3201;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.ASC_SYMBOL || _la === MultiQueryMySQLParser.DESC_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, MultiQueryMySQLParser.RULE_fromClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3203;
			this.match(MultiQueryMySQLParser.FROM_SYMBOL);
			this.state = 3206;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				{
				this.state = 3204;
				this.match(MultiQueryMySQLParser.DUAL_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 3205;
				this.tableReferenceList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableReferenceList(): TableReferenceListContext {
		let _localctx: TableReferenceListContext = new TableReferenceListContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, MultiQueryMySQLParser.RULE_tableReferenceList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3208;
			this.tableReference();
			this.state = 3213;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3209;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3210;
					this.tableReference();
					}
					}
				}
				this.state = 3215;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectOption(): SelectOptionContext {
		let _localctx: SelectOptionContext = new SelectOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, MultiQueryMySQLParser.RULE_selectOption);
		try {
			this.state = 3224;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3216;
				this.querySpecOption();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3217;
				this.match(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3218;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 3219;
				this.match(MultiQueryMySQLParser.SQL_CACHE_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3220;
				if (!(this.serverVersion >= 50704 && this.serverVersion < 50708)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50704 && this.serverVersion < 50708");
				}
				this.state = 3221;
				this.match(MultiQueryMySQLParser.MAX_STATEMENT_TIME_SYMBOL);
				this.state = 3222;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3223;
				this.real_ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockingClause(): LockingClauseContext {
		let _localctx: LockingClauseContext = new LockingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, MultiQueryMySQLParser.RULE_lockingClause);
		try {
			this.state = 3241;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.FOR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3226;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 3227;
				this.lockStrengh();
				this.state = 3231;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 334, this._ctx) ) {
				case 1:
					{
					this.state = 3228;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 3229;
					this.match(MultiQueryMySQLParser.OF_SYMBOL);
					this.state = 3230;
					this.tableAliasRefList();
					}
					break;
				}
				this.state = 3235;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 335, this._ctx) ) {
				case 1:
					{
					this.state = 3233;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 3234;
					this.lockedRowAction();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.LOCK_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3237;
				this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
				this.state = 3238;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 3239;
				this.match(MultiQueryMySQLParser.SHARE_SYMBOL);
				this.state = 3240;
				this.match(MultiQueryMySQLParser.MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockStrengh(): LockStrenghContext {
		let _localctx: LockStrenghContext = new LockStrenghContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, MultiQueryMySQLParser.RULE_lockStrengh);
		try {
			this.state = 3246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 337, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3243;
				this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3244;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 3245;
				this.match(MultiQueryMySQLParser.SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockedRowAction(): LockedRowActionContext {
		let _localctx: LockedRowActionContext = new LockedRowActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, MultiQueryMySQLParser.RULE_lockedRowAction);
		try {
			this.state = 3251;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.SKIP_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3248;
				this.match(MultiQueryMySQLParser.SKIP_SYMBOL);
				this.state = 3249;
				this.match(MultiQueryMySQLParser.LOCKED_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.NOWAIT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3250;
				this.match(MultiQueryMySQLParser.NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectItemList(): SelectItemListContext {
		let _localctx: SelectItemListContext = new SelectItemListContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, MultiQueryMySQLParser.RULE_selectItemList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3255;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 339, this._ctx) ) {
			case 1:
				{
				this.state = 3253;
				this.selectItem();
				}
				break;

			case 2:
				{
				this.state = 3254;
				this.match(MultiQueryMySQLParser.MULT_OPERATOR);
				}
				break;
			}
			this.state = 3261;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3257;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3258;
					this.selectItem();
					}
					}
				}
				this.state = 3263;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let _localctx: SelectItemContext = new SelectItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, MultiQueryMySQLParser.RULE_selectItem);
		try {
			this.state = 3269;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 342, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3264;
				this.tableWild();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3265;
				this.expr(0);
				this.state = 3267;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 341, this._ctx) ) {
				case 1:
					{
					this.state = 3266;
					this.selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectAlias(): SelectAliasContext {
		let _localctx: SelectAliasContext = new SelectAliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, MultiQueryMySQLParser.RULE_selectAlias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3272;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 343, this._ctx) ) {
			case 1:
				{
				this.state = 3271;
				this.match(MultiQueryMySQLParser.AS_SYMBOL);
				}
				break;
			}
			this.state = 3276;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 344, this._ctx) ) {
			case 1:
				{
				this.state = 3274;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 3275;
				this.textStringLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let _localctx: WhereClauseContext = new WhereClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, MultiQueryMySQLParser.RULE_whereClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3278;
			this.match(MultiQueryMySQLParser.WHERE_SYMBOL);
			this.state = 3279;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableReference(): TableReferenceContext {
		let _localctx: TableReferenceContext = new TableReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, MultiQueryMySQLParser.RULE_tableReference);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3291;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 346, this._ctx) ) {
			case 1:
				{
				this.state = 3281;
				this.tableFactor();
				}
				break;

			case 2:
				{
				this.state = 3282;
				this.match(MultiQueryMySQLParser.OPEN_CURLY_SYMBOL);
				this.state = 3286;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 345, this._ctx) ) {
				case 1:
					{
					this.state = 3283;
					if (!(this.serverVersion < 80017)) {
						throw new FailedPredicateException(this, "this.serverVersion < 80017");
					}
					this.state = 3284;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 3285;
					this.match(MultiQueryMySQLParser.OJ_SYMBOL);
					}
					break;
				}
				this.state = 3288;
				this.escapedTableReference();
				this.state = 3289;
				this.match(MultiQueryMySQLParser.CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			this.state = 3296;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3293;
					this.joinedTable();
					}
					}
				}
				this.state = 3298;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public escapedTableReference(): EscapedTableReferenceContext {
		let _localctx: EscapedTableReferenceContext = new EscapedTableReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, MultiQueryMySQLParser.RULE_escapedTableReference);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3299;
			this.tableFactor();
			this.state = 3303;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.CROSS_SYMBOL || ((((_la - 523)) & ~0x1F) === 0 && ((1 << (_la - 523)) & ((1 << (MultiQueryMySQLParser.INNER_SYMBOL - 523)) | (1 << (MultiQueryMySQLParser.JOIN_SYMBOL - 523)) | (1 << (MultiQueryMySQLParser.LEFT_SYMBOL - 523)))) !== 0) || _la === MultiQueryMySQLParser.NATURAL_SYMBOL || _la === MultiQueryMySQLParser.RIGHT_SYMBOL || _la === MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL) {
				{
				{
				this.state = 3300;
				this.joinedTable();
				}
				}
				this.state = 3305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinedTable(): JoinedTableContext {
		let _localctx: JoinedTableContext = new JoinedTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, MultiQueryMySQLParser.RULE_joinedTable);
		try {
			this.state = 3325;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CROSS_SYMBOL:
			case MultiQueryMySQLParser.INNER_SYMBOL:
			case MultiQueryMySQLParser.JOIN_SYMBOL:
			case MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3306;
				this.innerJoinType();
				this.state = 3307;
				this.tableReference();
				this.state = 3312;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 349, this._ctx) ) {
				case 1:
					{
					this.state = 3308;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 3309;
					this.expr(0);
					}
					break;

				case 2:
					{
					this.state = 3310;
					this.match(MultiQueryMySQLParser.USING_SYMBOL);
					this.state = 3311;
					this.identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.LEFT_SYMBOL:
			case MultiQueryMySQLParser.RIGHT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3314;
				this.outerJoinType();
				this.state = 3315;
				this.tableReference();
				this.state = 3320;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.ON_SYMBOL:
					{
					this.state = 3316;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 3317;
					this.expr(0);
					}
					break;
				case MultiQueryMySQLParser.USING_SYMBOL:
					{
					this.state = 3318;
					this.match(MultiQueryMySQLParser.USING_SYMBOL);
					this.state = 3319;
					this.identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MultiQueryMySQLParser.NATURAL_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3322;
				this.naturalJoinType();
				this.state = 3323;
				this.tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public naturalJoinType(): NaturalJoinTypeContext {
		let _localctx: NaturalJoinTypeContext = new NaturalJoinTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, MultiQueryMySQLParser.RULE_naturalJoinType);
		let _la: number;
		try {
			this.state = 3338;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 354, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3327;
				this.match(MultiQueryMySQLParser.NATURAL_SYMBOL);
				this.state = 3329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.INNER_SYMBOL) {
					{
					this.state = 3328;
					this.match(MultiQueryMySQLParser.INNER_SYMBOL);
					}
				}

				this.state = 3331;
				this.match(MultiQueryMySQLParser.JOIN_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3332;
				this.match(MultiQueryMySQLParser.NATURAL_SYMBOL);
				this.state = 3333;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.LEFT_SYMBOL || _la === MultiQueryMySQLParser.RIGHT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.OUTER_SYMBOL) {
					{
					this.state = 3334;
					this.match(MultiQueryMySQLParser.OUTER_SYMBOL);
					}
				}

				this.state = 3337;
				this.match(MultiQueryMySQLParser.JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public innerJoinType(): InnerJoinTypeContext {
		let _localctx: InnerJoinTypeContext = new InnerJoinTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, MultiQueryMySQLParser.RULE_innerJoinType);
		let _la: number;
		try {
			this.state = 3345;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CROSS_SYMBOL:
			case MultiQueryMySQLParser.INNER_SYMBOL:
			case MultiQueryMySQLParser.JOIN_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.CROSS_SYMBOL || _la === MultiQueryMySQLParser.INNER_SYMBOL) {
					{
					this.state = 3340;
					_localctx._type = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.CROSS_SYMBOL || _la === MultiQueryMySQLParser.INNER_SYMBOL)) {
						_localctx._type = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3343;
				this.match(MultiQueryMySQLParser.JOIN_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3344;
				_localctx._type = this.match(MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public outerJoinType(): OuterJoinTypeContext {
		let _localctx: OuterJoinTypeContext = new OuterJoinTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, MultiQueryMySQLParser.RULE_outerJoinType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3347;
			_localctx._type = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.LEFT_SYMBOL || _la === MultiQueryMySQLParser.RIGHT_SYMBOL)) {
				_localctx._type = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OUTER_SYMBOL) {
				{
				this.state = 3348;
				this.match(MultiQueryMySQLParser.OUTER_SYMBOL);
				}
			}

			this.state = 3351;
			this.match(MultiQueryMySQLParser.JOIN_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableFactor(): TableFactorContext {
		let _localctx: TableFactorContext = new TableFactorContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, MultiQueryMySQLParser.RULE_tableFactor);
		try {
			this.state = 3359;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 358, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3353;
				this.singleTable();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3354;
				this.singleTableParens();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3355;
				this.derivedTable();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3356;
				this.tableReferenceListParens();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3357;
				if (!(this.serverVersion >= 80004)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80004");
				}
				this.state = 3358;
				this.tableFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleTable(): SingleTableContext {
		let _localctx: SingleTableContext = new SingleTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, MultiQueryMySQLParser.RULE_singleTable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3361;
			this.tableRef();
			this.state = 3363;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
			case 1:
				{
				this.state = 3362;
				this.usePartition();
				}
				break;
			}
			this.state = 3366;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
			case 1:
				{
				this.state = 3365;
				this.tableAlias();
				}
				break;
			}
			this.state = 3369;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 361, this._ctx) ) {
			case 1:
				{
				this.state = 3368;
				this.indexHintList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleTableParens(): SingleTableParensContext {
		let _localctx: SingleTableParensContext = new SingleTableParensContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, MultiQueryMySQLParser.RULE_singleTableParens);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3371;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3374;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
			case 1:
				{
				this.state = 3372;
				this.singleTable();
				}
				break;

			case 2:
				{
				this.state = 3373;
				this.singleTableParens();
				}
				break;
			}
			this.state = 3376;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public derivedTable(): DerivedTableContext {
		let _localctx: DerivedTableContext = new DerivedTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, MultiQueryMySQLParser.RULE_derivedTable);
		try {
			this.state = 3395;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 367, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3378;
				this.subquery();
				this.state = 3380;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 363, this._ctx) ) {
				case 1:
					{
					this.state = 3379;
					this.tableAlias();
					}
					break;
				}
				this.state = 3384;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
				case 1:
					{
					this.state = 3382;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 3383;
					this.columnInternalRefList();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3386;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 3387;
				this.match(MultiQueryMySQLParser.LATERAL_SYMBOL);
				this.state = 3388;
				this.subquery();
				this.state = 3390;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 365, this._ctx) ) {
				case 1:
					{
					this.state = 3389;
					this.tableAlias();
					}
					break;
				}
				this.state = 3393;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
				case 1:
					{
					this.state = 3392;
					this.columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableReferenceListParens(): TableReferenceListParensContext {
		let _localctx: TableReferenceListParensContext = new TableReferenceListParensContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, MultiQueryMySQLParser.RULE_tableReferenceListParens);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3397;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3400;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
			case 1:
				{
				this.state = 3398;
				this.tableReferenceList();
				}
				break;

			case 2:
				{
				this.state = 3399;
				this.tableReferenceListParens();
				}
				break;
			}
			this.state = 3402;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableFunction(): TableFunctionContext {
		let _localctx: TableFunctionContext = new TableFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, MultiQueryMySQLParser.RULE_tableFunction);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3404;
			this.match(MultiQueryMySQLParser.JSON_TABLE_SYMBOL);
			this.state = 3405;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3406;
			this.expr(0);
			this.state = 3407;
			this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
			this.state = 3408;
			this.textStringLiteral();
			this.state = 3409;
			this.columnsClause();
			this.state = 3410;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 3412;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
			case 1:
				{
				this.state = 3411;
				this.tableAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnsClause(): ColumnsClauseContext {
		let _localctx: ColumnsClauseContext = new ColumnsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, MultiQueryMySQLParser.RULE_columnsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3414;
			this.match(MultiQueryMySQLParser.COLUMNS_SYMBOL);
			this.state = 3415;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3416;
			this.jtColumn();
			this.state = 3421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 3417;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 3418;
				this.jtColumn();
				}
				}
				this.state = 3423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3424;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jtColumn(): JtColumnContext {
		let _localctx: JtColumnContext = new JtColumnContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, MultiQueryMySQLParser.RULE_jtColumn);
		let _la: number;
		try {
			this.state = 3449;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3426;
				this.identifier();
				this.state = 3427;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 3428;
				this.match(MultiQueryMySQLParser.ORDINALITY_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3430;
				this.identifier();
				this.state = 3431;
				this.dataType();
				this.state = 3434;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 371, this._ctx) ) {
				case 1:
					{
					this.state = 3432;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 3433;
					this.collate();
					}
					break;
				}
				this.state = 3437;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EXISTS_SYMBOL) {
					{
					this.state = 3436;
					this.match(MultiQueryMySQLParser.EXISTS_SYMBOL);
					}
				}

				this.state = 3439;
				this.match(MultiQueryMySQLParser.PATH_SYMBOL);
				this.state = 3440;
				this.textStringLiteral();
				this.state = 3442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ERROR_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL || _la === MultiQueryMySQLParser.NULL_SYMBOL) {
					{
					this.state = 3441;
					this.onEmptyOrError();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3444;
				this.match(MultiQueryMySQLParser.NESTED_SYMBOL);
				this.state = 3445;
				this.match(MultiQueryMySQLParser.PATH_SYMBOL);
				this.state = 3446;
				this.textStringLiteral();
				this.state = 3447;
				this.columnsClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onEmptyOrError(): OnEmptyOrErrorContext {
		let _localctx: OnEmptyOrErrorContext = new OnEmptyOrErrorContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, MultiQueryMySQLParser.RULE_onEmptyOrError);
		let _la: number;
		try {
			this.state = 3459;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3451;
				this.onEmpty();
				this.state = 3453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ERROR_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL || _la === MultiQueryMySQLParser.NULL_SYMBOL) {
					{
					this.state = 3452;
					this.onError();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3455;
				this.onError();
				this.state = 3457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ERROR_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL || _la === MultiQueryMySQLParser.NULL_SYMBOL) {
					{
					this.state = 3456;
					this.onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onEmpty(): OnEmptyContext {
		let _localctx: OnEmptyContext = new OnEmptyContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, MultiQueryMySQLParser.RULE_onEmpty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3461;
			this.jtOnResponse();
			this.state = 3462;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 3463;
			this.match(MultiQueryMySQLParser.EMPTY_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onError(): OnErrorContext {
		let _localctx: OnErrorContext = new OnErrorContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, MultiQueryMySQLParser.RULE_onError);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3465;
			this.jtOnResponse();
			this.state = 3466;
			this.match(MultiQueryMySQLParser.ON_SYMBOL);
			this.state = 3467;
			this.match(MultiQueryMySQLParser.ERROR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jtOnResponse(): JtOnResponseContext {
		let _localctx: JtOnResponseContext = new JtOnResponseContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, MultiQueryMySQLParser.RULE_jtOnResponse);
		try {
			this.state = 3473;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ERROR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3469;
				this.match(MultiQueryMySQLParser.ERROR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.NULL_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3470;
				this.match(MultiQueryMySQLParser.NULL_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.DEFAULT_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3471;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 3472;
				this.textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionOption(): UnionOptionContext {
		let _localctx: UnionOptionContext = new UnionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, MultiQueryMySQLParser.RULE_unionOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3475;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.ALL_SYMBOL || _la === MultiQueryMySQLParser.DISTINCT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableAlias(): TableAliasContext {
		let _localctx: TableAliasContext = new TableAliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, MultiQueryMySQLParser.RULE_tableAlias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3480;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 379, this._ctx) ) {
			case 1:
				{
				this.state = 3477;
				this.match(MultiQueryMySQLParser.AS_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 3478;
				if (!(this.serverVersion < 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80017");
				}
				this.state = 3479;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 3482;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintList(): IndexHintListContext {
		let _localctx: IndexHintListContext = new IndexHintListContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, MultiQueryMySQLParser.RULE_indexHintList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3484;
			this.indexHint();
			this.state = 3489;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3485;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3486;
					this.indexHint();
					}
					}
				}
				this.state = 3491;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHint(): IndexHintContext {
		let _localctx: IndexHintContext = new IndexHintContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, MultiQueryMySQLParser.RULE_indexHint);
		let _la: number;
		try {
			this.state = 3512;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.FORCE_SYMBOL:
			case MultiQueryMySQLParser.IGNORE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3492;
				this.indexHintType();
				this.state = 3493;
				this.keyOrIndex();
				this.state = 3495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FOR_SYMBOL) {
					{
					this.state = 3494;
					this.indexHintClause();
					}
				}

				this.state = 3497;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3498;
				this.indexList();
				this.state = 3499;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.USE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3501;
				this.match(MultiQueryMySQLParser.USE_SYMBOL);
				this.state = 3502;
				this.keyOrIndex();
				this.state = 3504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FOR_SYMBOL) {
					{
					this.state = 3503;
					this.indexHintClause();
					}
				}

				this.state = 3506;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3508;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 383, this._ctx) ) {
				case 1:
					{
					this.state = 3507;
					this.indexList();
					}
					break;
				}
				this.state = 3510;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintType(): IndexHintTypeContext {
		let _localctx: IndexHintTypeContext = new IndexHintTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, MultiQueryMySQLParser.RULE_indexHintType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3514;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.FORCE_SYMBOL || _la === MultiQueryMySQLParser.IGNORE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyOrIndex(): KeyOrIndexContext {
		let _localctx: KeyOrIndexContext = new KeyOrIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, MultiQueryMySQLParser.RULE_keyOrIndex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3516;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.KEY_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintKeyType(): ConstraintKeyTypeContext {
		let _localctx: ConstraintKeyTypeContext = new ConstraintKeyTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, MultiQueryMySQLParser.RULE_constraintKeyType);
		let _la: number;
		try {
			this.state = 3524;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.PRIMARY_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3518;
				this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
				this.state = 3519;
				this.match(MultiQueryMySQLParser.KEY_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.UNIQUE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3520;
				this.match(MultiQueryMySQLParser.UNIQUE_SYMBOL);
				this.state = 3522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.KEY_SYMBOL) {
					{
					this.state = 3521;
					this.keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintClause(): IndexHintClauseContext {
		let _localctx: IndexHintClauseContext = new IndexHintClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, MultiQueryMySQLParser.RULE_indexHintClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3526;
			this.match(MultiQueryMySQLParser.FOR_SYMBOL);
			this.state = 3532;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.JOIN_SYMBOL:
				{
				this.state = 3527;
				this.match(MultiQueryMySQLParser.JOIN_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.ORDER_SYMBOL:
				{
				this.state = 3528;
				this.match(MultiQueryMySQLParser.ORDER_SYMBOL);
				this.state = 3529;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.GROUP_SYMBOL:
				{
				this.state = 3530;
				this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
				this.state = 3531;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexList(): IndexListContext {
		let _localctx: IndexListContext = new IndexListContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, MultiQueryMySQLParser.RULE_indexList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3534;
			this.indexListElement();
			this.state = 3539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 3535;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 3536;
				this.indexListElement();
				}
				}
				this.state = 3541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexListElement(): IndexListElementContext {
		let _localctx: IndexListElementContext = new IndexListElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, MultiQueryMySQLParser.RULE_indexListElement);
		try {
			this.state = 3544;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3542;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3543;
				this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let _localctx: UpdateStatementContext = new UpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, MultiQueryMySQLParser.RULE_updateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3548;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 3546;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 3547;
				this.withClause();
				}
				break;
			}
			this.state = 3550;
			this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
			this.state = 3552;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				{
				this.state = 3551;
				this.match(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			this.state = 3555;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
			case 1:
				{
				this.state = 3554;
				this.match(MultiQueryMySQLParser.IGNORE_SYMBOL);
				}
				break;
			}
			this.state = 3557;
			this.tableReferenceList();
			this.state = 3558;
			this.match(MultiQueryMySQLParser.SET_SYMBOL);
			this.state = 3559;
			this.updateList();
			this.state = 3561;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				{
				this.state = 3560;
				this.whereClause();
				}
				break;
			}
			this.state = 3564;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 394, this._ctx) ) {
			case 1:
				{
				this.state = 3563;
				this.orderClause();
				}
				break;
			}
			this.state = 3567;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
			case 1:
				{
				this.state = 3566;
				this.simpleLimitClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
		let _localctx: TransactionOrLockingStatementContext = new TransactionOrLockingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, MultiQueryMySQLParser.RULE_transactionOrLockingStatement);
		try {
			this.state = 3573;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3569;
				this.transactionStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3570;
				this.savepointStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3571;
				this.lockStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3572;
				this.xaStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionStatement(): TransactionStatementContext {
		let _localctx: TransactionStatementContext = new TransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, MultiQueryMySQLParser.RULE_transactionStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3600;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.START_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3575;
				this.match(MultiQueryMySQLParser.START_SYMBOL);
				this.state = 3576;
				this.match(MultiQueryMySQLParser.TRANSACTION_SYMBOL);
				this.state = 3580;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3577;
						this.transactionCharacteristic();
						}
						}
					}
					this.state = 3582;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.COMMIT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3583;
				this.match(MultiQueryMySQLParser.COMMIT_SYMBOL);
				this.state = 3585;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
				case 1:
					{
					this.state = 3584;
					this.match(MultiQueryMySQLParser.WORK_SYMBOL);
					}
					break;
				}
				this.state = 3592;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 400, this._ctx) ) {
				case 1:
					{
					this.state = 3587;
					this.match(MultiQueryMySQLParser.AND_SYMBOL);
					this.state = 3589;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.NO_SYMBOL) {
						{
						this.state = 3588;
						this.match(MultiQueryMySQLParser.NO_SYMBOL);
						}
					}

					this.state = 3591;
					this.match(MultiQueryMySQLParser.CHAIN_SYMBOL);
					}
					break;
				}
				this.state = 3598;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 402, this._ctx) ) {
				case 1:
					{
					this.state = 3595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.NO_SYMBOL) {
						{
						this.state = 3594;
						this.match(MultiQueryMySQLParser.NO_SYMBOL);
						}
					}

					this.state = 3597;
					this.match(MultiQueryMySQLParser.RELEASE_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beginWork(): BeginWorkContext {
		let _localctx: BeginWorkContext = new BeginWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, MultiQueryMySQLParser.RULE_beginWork);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3602;
			this.match(MultiQueryMySQLParser.BEGIN_SYMBOL);
			this.state = 3604;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				{
				this.state = 3603;
				this.match(MultiQueryMySQLParser.WORK_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionCharacteristic(): TransactionCharacteristicContext {
		let _localctx: TransactionCharacteristicContext = new TransactionCharacteristicContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, MultiQueryMySQLParser.RULE_transactionCharacteristic);
		let _la: number;
		try {
			this.state = 3612;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 405, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3606;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 3607;
				this.match(MultiQueryMySQLParser.CONSISTENT_SYMBOL);
				this.state = 3608;
				this.match(MultiQueryMySQLParser.SNAPSHOT_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3609;
				if (!(this.serverVersion >= 50605)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50605");
				}
				this.state = 3610;
				this.match(MultiQueryMySQLParser.READ_SYMBOL);
				this.state = 3611;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ONLY_SYMBOL || _la === MultiQueryMySQLParser.WRITE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public savepointStatement(): SavepointStatementContext {
		let _localctx: SavepointStatementContext = new SavepointStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, MultiQueryMySQLParser.RULE_savepointStatement);
		let _la: number;
		try {
			this.state = 3643;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.SAVEPOINT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3614;
				this.match(MultiQueryMySQLParser.SAVEPOINT_SYMBOL);
				this.state = 3615;
				this.identifier();
				}
				break;
			case MultiQueryMySQLParser.ROLLBACK_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3616;
				this.match(MultiQueryMySQLParser.ROLLBACK_SYMBOL);
				this.state = 3618;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 3617;
					this.match(MultiQueryMySQLParser.WORK_SYMBOL);
					}
					break;
				}
				this.state = 3638;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 412, this._ctx) ) {
				case 1:
					{
					this.state = 3620;
					this.match(MultiQueryMySQLParser.TO_SYMBOL);
					this.state = 3622;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 407, this._ctx) ) {
					case 1:
						{
						this.state = 3621;
						this.match(MultiQueryMySQLParser.SAVEPOINT_SYMBOL);
						}
						break;
					}
					this.state = 3624;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 3630;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
					case 1:
						{
						this.state = 3625;
						this.match(MultiQueryMySQLParser.AND_SYMBOL);
						this.state = 3627;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MultiQueryMySQLParser.NO_SYMBOL) {
							{
							this.state = 3626;
							this.match(MultiQueryMySQLParser.NO_SYMBOL);
							}
						}

						this.state = 3629;
						this.match(MultiQueryMySQLParser.CHAIN_SYMBOL);
						}
						break;
					}
					this.state = 3636;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
					case 1:
						{
						this.state = 3633;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MultiQueryMySQLParser.NO_SYMBOL) {
							{
							this.state = 3632;
							this.match(MultiQueryMySQLParser.NO_SYMBOL);
							}
						}

						this.state = 3635;
						this.match(MultiQueryMySQLParser.RELEASE_SYMBOL);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.RELEASE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3640;
				this.match(MultiQueryMySQLParser.RELEASE_SYMBOL);
				this.state = 3641;
				this.match(MultiQueryMySQLParser.SAVEPOINT_SYMBOL);
				this.state = 3642;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockStatement(): LockStatementContext {
		let _localctx: LockStatementContext = new LockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, MultiQueryMySQLParser.RULE_lockStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3667;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3645;
				this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
				this.state = 3646;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.TABLES_SYMBOL || _la === MultiQueryMySQLParser.TABLE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3647;
				this.lockItem();
				this.state = 3652;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3648;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 3649;
						this.lockItem();
						}
						}
					}
					this.state = 3654;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3655;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 3656;
				this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
				this.state = 3657;
				this.match(MultiQueryMySQLParser.INSTANCE_SYMBOL);
				this.state = 3658;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 3659;
				this.match(MultiQueryMySQLParser.BACKUP_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3660;
				this.match(MultiQueryMySQLParser.UNLOCK_SYMBOL);
				this.state = 3665;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
				case 1:
					{
					this.state = 3661;
					this.match(MultiQueryMySQLParser.TABLES_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 3662;
					this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
					}
					break;

				case 3:
					{
					this.state = 3663;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 3664;
					this.match(MultiQueryMySQLParser.INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockItem(): LockItemContext {
		let _localctx: LockItemContext = new LockItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, MultiQueryMySQLParser.RULE_lockItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3669;
			this.tableRef();
			this.state = 3671;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				{
				this.state = 3670;
				this.tableAlias();
				}
				break;
			}
			this.state = 3673;
			this.lockOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockOption(): LockOptionContext {
		let _localctx: LockOptionContext = new LockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, MultiQueryMySQLParser.RULE_lockOption);
		let _la: number;
		try {
			this.state = 3683;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.READ_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3675;
				this.match(MultiQueryMySQLParser.READ_SYMBOL);
				this.state = 3677;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 418, this._ctx) ) {
				case 1:
					{
					this.state = 3676;
					this.match(MultiQueryMySQLParser.LOCAL_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL:
			case MultiQueryMySQLParser.WRITE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL) {
					{
					this.state = 3679;
					this.match(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL);
					}
				}

				this.state = 3682;
				this.match(MultiQueryMySQLParser.WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaStatement(): XaStatementContext {
		let _localctx: XaStatementContext = new XaStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, MultiQueryMySQLParser.RULE_xaStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3685;
			this.match(MultiQueryMySQLParser.XA_SYMBOL);
			this.state = 3712;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.BEGIN_SYMBOL:
			case MultiQueryMySQLParser.START_SYMBOL:
				{
				this.state = 3686;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.BEGIN_SYMBOL || _la === MultiQueryMySQLParser.START_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3687;
				this.xid();
				this.state = 3689;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 421, this._ctx) ) {
				case 1:
					{
					this.state = 3688;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.RESUME_SYMBOL || _la === MultiQueryMySQLParser.JOIN_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.END_SYMBOL:
				{
				this.state = 3691;
				this.match(MultiQueryMySQLParser.END_SYMBOL);
				this.state = 3692;
				this.xid();
				this.state = 3698;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
				case 1:
					{
					this.state = 3693;
					this.match(MultiQueryMySQLParser.SUSPEND_SYMBOL);
					this.state = 3696;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
					case 1:
						{
						this.state = 3694;
						this.match(MultiQueryMySQLParser.FOR_SYMBOL);
						this.state = 3695;
						this.match(MultiQueryMySQLParser.MIGRATE_SYMBOL);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.PREPARE_SYMBOL:
				{
				this.state = 3700;
				this.match(MultiQueryMySQLParser.PREPARE_SYMBOL);
				this.state = 3701;
				this.xid();
				}
				break;
			case MultiQueryMySQLParser.COMMIT_SYMBOL:
				{
				this.state = 3702;
				this.match(MultiQueryMySQLParser.COMMIT_SYMBOL);
				this.state = 3703;
				this.xid();
				this.state = 3706;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 424, this._ctx) ) {
				case 1:
					{
					this.state = 3704;
					this.match(MultiQueryMySQLParser.ONE_SYMBOL);
					this.state = 3705;
					this.match(MultiQueryMySQLParser.PHASE_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.ROLLBACK_SYMBOL:
				{
				this.state = 3708;
				this.match(MultiQueryMySQLParser.ROLLBACK_SYMBOL);
				this.state = 3709;
				this.xid();
				}
				break;
			case MultiQueryMySQLParser.RECOVER_SYMBOL:
				{
				this.state = 3710;
				this.match(MultiQueryMySQLParser.RECOVER_SYMBOL);
				this.state = 3711;
				this.xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaConvert(): XaConvertContext {
		let _localctx: XaConvertContext = new XaConvertContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, MultiQueryMySQLParser.RULE_xaConvert);
		try {
			this.state = 3720;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 427, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3714;
				if (!(this.serverVersion >= 50704)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50704");
				}
				this.state = 3717;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
				case 1:
					{
					this.state = 3715;
					this.match(MultiQueryMySQLParser.CONVERT_SYMBOL);
					this.state = 3716;
					this.match(MultiQueryMySQLParser.XID_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xid(): XidContext {
		let _localctx: XidContext = new XidContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, MultiQueryMySQLParser.RULE_xid);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3722;
			this.textString();
			this.state = 3729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 429, this._ctx) ) {
			case 1:
				{
				this.state = 3723;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 3724;
				this.textString();
				this.state = 3727;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 428, this._ctx) ) {
				case 1:
					{
					this.state = 3725;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3726;
					this.ulong_number();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationStatement(): ReplicationStatementContext {
		let _localctx: ReplicationStatementContext = new ReplicationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, MultiQueryMySQLParser.RULE_replicationStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3764;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3731;
				this.match(MultiQueryMySQLParser.PURGE_SYMBOL);
				this.state = 3732;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.MASTER_SYMBOL || _la === MultiQueryMySQLParser.BINARY_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3733;
				this.match(MultiQueryMySQLParser.LOGS_SYMBOL);
				this.state = 3738;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.TO_SYMBOL:
					{
					this.state = 3734;
					this.match(MultiQueryMySQLParser.TO_SYMBOL);
					this.state = 3735;
					this.textLiteral();
					}
					break;
				case MultiQueryMySQLParser.BEFORE_SYMBOL:
					{
					this.state = 3736;
					this.match(MultiQueryMySQLParser.BEFORE_SYMBOL);
					this.state = 3737;
					this.expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3740;
				this.changeMaster();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3741;
				this.match(MultiQueryMySQLParser.RESET_SYMBOL);
				this.state = 3742;
				this.resetOption();
				this.state = 3747;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3743;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 3744;
						this.resetOption();
						}
						}
					}
					this.state = 3749;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3750;
				if (!(this.serverVersion > 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion > 80000");
				}
				this.state = 3751;
				this.match(MultiQueryMySQLParser.RESET_SYMBOL);
				this.state = 3752;
				this.match(MultiQueryMySQLParser.PERSIST_SYMBOL);
				this.state = 3756;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 432, this._ctx) ) {
				case 1:
					{
					this.state = 3753;
					this.ifExists();
					this.state = 3754;
					this.identifier();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3758;
				this.slave();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3759;
				if (!(this.serverVersion >= 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50700");
				}
				this.state = 3760;
				this.changeReplication();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3761;
				this.replicationLoad();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3762;
				if (!(this.serverVersion > 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion > 50706");
				}
				this.state = 3763;
				this.groupReplication();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetOption(): ResetOptionContext {
		let _localctx: ResetOptionContext = new ResetOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, MultiQueryMySQLParser.RULE_resetOption);
		try {
			this.state = 3780;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3766;
				_localctx._option = this.match(MultiQueryMySQLParser.MASTER_SYMBOL);
				this.state = 3768;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 434, this._ctx) ) {
				case 1:
					{
					this.state = 3767;
					this.masterResetOptions();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3770;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 3771;
				_localctx._option = this.match(MultiQueryMySQLParser.QUERY_SYMBOL);
				this.state = 3772;
				this.match(MultiQueryMySQLParser.CACHE_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3773;
				_localctx._option = this.match(MultiQueryMySQLParser.SLAVE_SYMBOL);
				this.state = 3775;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 435, this._ctx) ) {
				case 1:
					{
					this.state = 3774;
					this.match(MultiQueryMySQLParser.ALL_SYMBOL);
					}
					break;
				}
				this.state = 3778;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 436, this._ctx) ) {
				case 1:
					{
					this.state = 3777;
					this.channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterResetOptions(): MasterResetOptionsContext {
		let _localctx: MasterResetOptionsContext = new MasterResetOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, MultiQueryMySQLParser.RULE_masterResetOptions);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3782;
			if (!(this.serverVersion >= 80000)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 80000");
			}
			this.state = 3783;
			this.match(MultiQueryMySQLParser.TO_SYMBOL);
			this.state = 3788;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 438, this._ctx) ) {
			case 1:
				{
				this.state = 3784;
				if (!(this.serverVersion < 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80017");
				}
				this.state = 3785;
				this.real_ulong_number();
				}
				break;

			case 2:
				{
				this.state = 3786;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 3787;
				this.real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationLoad(): ReplicationLoadContext {
		let _localctx: ReplicationLoadContext = new ReplicationLoadContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, MultiQueryMySQLParser.RULE_replicationLoad);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3790;
			this.match(MultiQueryMySQLParser.LOAD_SYMBOL);
			this.state = 3794;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.DATA_SYMBOL:
				{
				this.state = 3791;
				this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.TABLE_SYMBOL:
				{
				this.state = 3792;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 3793;
				this.tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3796;
			this.match(MultiQueryMySQLParser.FROM_SYMBOL);
			this.state = 3797;
			this.match(MultiQueryMySQLParser.MASTER_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeMaster(): ChangeMasterContext {
		let _localctx: ChangeMasterContext = new ChangeMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, MultiQueryMySQLParser.RULE_changeMaster);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3799;
			this.match(MultiQueryMySQLParser.CHANGE_SYMBOL);
			this.state = 3800;
			this.match(MultiQueryMySQLParser.MASTER_SYMBOL);
			this.state = 3801;
			this.match(MultiQueryMySQLParser.TO_SYMBOL);
			this.state = 3802;
			this.changeMasterOptions();
			this.state = 3804;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
			case 1:
				{
				this.state = 3803;
				this.channel();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeMasterOptions(): ChangeMasterOptionsContext {
		let _localctx: ChangeMasterOptionsContext = new ChangeMasterOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, MultiQueryMySQLParser.RULE_changeMasterOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3806;
			this.masterOption();
			this.state = 3811;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3807;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3808;
					this.masterOption();
					}
					}
				}
				this.state = 3813;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterOption(): MasterOptionContext {
		let _localctx: MasterOptionContext = new MasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, MultiQueryMySQLParser.RULE_masterOption);
		try {
			this.state = 3899;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.MASTER_HOST_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3814;
				this.match(MultiQueryMySQLParser.MASTER_HOST_SYMBOL);
				this.state = 3815;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3816;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3817;
				this.match(MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL);
				this.state = 3818;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3819;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_BIND_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3820;
				this.match(MultiQueryMySQLParser.MASTER_BIND_SYMBOL);
				this.state = 3821;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3822;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_USER_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3823;
				this.match(MultiQueryMySQLParser.MASTER_USER_SYMBOL);
				this.state = 3824;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3825;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3826;
				this.match(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL);
				this.state = 3827;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3828;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_PORT_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3829;
				this.match(MultiQueryMySQLParser.MASTER_PORT_SYMBOL);
				this.state = 3830;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3831;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3832;
				this.match(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL);
				this.state = 3833;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3834;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3835;
				this.match(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL);
				this.state = 3836;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3837;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_DELAY_SYMBOL:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3838;
				this.match(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL);
				this.state = 3839;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3840;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_SYMBOL:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3841;
				this.match(MultiQueryMySQLParser.MASTER_SSL_SYMBOL);
				this.state = 3842;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3843;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3844;
				this.match(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL);
				this.state = 3845;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3846;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3847;
				this.match(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL);
				this.state = 3848;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3849;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3850;
				this.match(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL);
				this.state = 3851;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3852;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3853;
				this.match(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL);
				this.state = 3854;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3855;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3856;
				this.match(MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL);
				this.state = 3857;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3858;
				this.masterTlsCiphersuitesDef();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3859;
				this.match(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL);
				this.state = 3860;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3861;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3862;
				this.match(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL);
				this.state = 3863;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3864;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3865;
				this.match(MultiQueryMySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				this.state = 3866;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3867;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3868;
				this.match(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL);
				this.state = 3869;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3870;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3871;
				this.match(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL);
				this.state = 3872;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3873;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3874;
				this.match(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL);
				this.state = 3875;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3876;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3877;
				this.match(MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL);
				this.state = 3878;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3879;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 3880;
				this.match(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL);
				this.state = 3881;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3882;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 3883;
				this.match(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL);
				this.state = 3884;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3885;
				this.serverIdList();
				}
				break;
			case MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 3886;
				this.match(MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				this.state = 3887;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3888;
				this.textStringLiteral();
				}
				break;
			case MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 3889;
				this.match(MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				this.state = 3890;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3891;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 3892;
				this.match(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL);
				this.state = 3893;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3894;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 3895;
				this.match(MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
				this.state = 3896;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3897;
				this.privilegeCheckDef();
				}
				break;
			case MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL:
			case MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL:
			case MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL:
			case MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 3898;
				this.masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeCheckDef(): PrivilegeCheckDefContext {
		let _localctx: PrivilegeCheckDefContext = new PrivilegeCheckDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, MultiQueryMySQLParser.RULE_privilegeCheckDef);
		try {
			this.state = 3903;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3901;
				this.userIdentifierOrText();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3902;
				this.match(MultiQueryMySQLParser.NULL_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterTlsCiphersuitesDef(): MasterTlsCiphersuitesDefContext {
		let _localctx: MasterTlsCiphersuitesDefContext = new MasterTlsCiphersuitesDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, MultiQueryMySQLParser.RULE_masterTlsCiphersuitesDef);
		try {
			this.state = 3907;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 444, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3905;
				this.textStringNoLinebreak();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3906;
				this.match(MultiQueryMySQLParser.NULL_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterFileDef(): MasterFileDefContext {
		let _localctx: MasterFileDefContext = new MasterFileDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, MultiQueryMySQLParser.RULE_masterFileDef);
		try {
			this.state = 3921;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3909;
				this.match(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL);
				this.state = 3910;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3911;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3912;
				this.match(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL);
				this.state = 3913;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3914;
				this.ulonglong_number();
				}
				break;
			case MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3915;
				this.match(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL);
				this.state = 3916;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3917;
				this.textStringNoLinebreak();
				}
				break;
			case MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3918;
				this.match(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL);
				this.state = 3919;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3920;
				this.ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverIdList(): ServerIdListContext {
		let _localctx: ServerIdListContext = new ServerIdListContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, MultiQueryMySQLParser.RULE_serverIdList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3923;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3932;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MultiQueryMySQLParser.INT_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.LONG_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & ((1 << (MultiQueryMySQLParser.HEX_NUMBER - 421)) | (1 << (MultiQueryMySQLParser.DECIMAL_NUMBER - 421)) | (1 << (MultiQueryMySQLParser.FLOAT_NUMBER - 421)))) !== 0)) {
				{
				this.state = 3924;
				this.ulong_number();
				this.state = 3929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					{
					this.state = 3925;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3926;
					this.ulong_number();
					}
					}
					this.state = 3931;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3934;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeReplication(): ChangeReplicationContext {
		let _localctx: ChangeReplicationContext = new ChangeReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, MultiQueryMySQLParser.RULE_changeReplication);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3936;
			this.match(MultiQueryMySQLParser.CHANGE_SYMBOL);
			this.state = 3937;
			this.match(MultiQueryMySQLParser.REPLICATION_SYMBOL);
			this.state = 3938;
			this.match(MultiQueryMySQLParser.FILTER_SYMBOL);
			this.state = 3939;
			this.filterDefinition();
			this.state = 3944;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3940;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 3941;
					this.filterDefinition();
					}
					}
				}
				this.state = 3946;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
			}
			this.state = 3949;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 449, this._ctx) ) {
			case 1:
				{
				this.state = 3947;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 3948;
				this.channel();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterDefinition(): FilterDefinitionContext {
		let _localctx: FilterDefinitionContext = new FilterDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, MultiQueryMySQLParser.RULE_filterDefinition);
		let _la: number;
		try {
			this.state = 4000;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3951;
				this.match(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL);
				this.state = 3952;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3953;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3955;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 450, this._ctx) ) {
				case 1:
					{
					this.state = 3954;
					this.filterDbList();
					}
					break;
				}
				this.state = 3957;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3958;
				this.match(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
				this.state = 3959;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3960;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
				case 1:
					{
					this.state = 3961;
					this.filterDbList();
					}
					break;
				}
				this.state = 3964;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3965;
				this.match(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL);
				this.state = 3966;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3967;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3969;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 452, this._ctx) ) {
				case 1:
					{
					this.state = 3968;
					this.filterTableList();
					}
					break;
				}
				this.state = 3971;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3972;
				this.match(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
				this.state = 3973;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3974;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3976;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 453, this._ctx) ) {
				case 1:
					{
					this.state = 3975;
					this.filterTableList();
					}
					break;
				}
				this.state = 3978;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3979;
				this.match(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
				this.state = 3980;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3981;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3983;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 454, this._ctx) ) {
				case 1:
					{
					this.state = 3982;
					this.filterStringList();
					}
					break;
				}
				this.state = 3985;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3986;
				this.match(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				this.state = 3987;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3988;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3990;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 455, this._ctx) ) {
				case 1:
					{
					this.state = 3989;
					this.filterStringList();
					}
					break;
				}
				this.state = 3992;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3993;
				this.match(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
				this.state = 3994;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 3995;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.OPEN_PAR_SYMBOL) {
					{
					this.state = 3996;
					this.filterDbPairList();
					}
				}

				this.state = 3999;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterDbList(): FilterDbListContext {
		let _localctx: FilterDbListContext = new FilterDbListContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, MultiQueryMySQLParser.RULE_filterDbList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4002;
			this.schemaRef();
			this.state = 4007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 4003;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 4004;
				this.schemaRef();
				}
				}
				this.state = 4009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterTableList(): FilterTableListContext {
		let _localctx: FilterTableListContext = new FilterTableListContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, MultiQueryMySQLParser.RULE_filterTableList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4010;
			this.filterTableRef();
			this.state = 4015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 4011;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 4012;
				this.filterTableRef();
				}
				}
				this.state = 4017;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterStringList(): FilterStringListContext {
		let _localctx: FilterStringListContext = new FilterStringListContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, MultiQueryMySQLParser.RULE_filterStringList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4018;
			this.filterWildDbTableString();
			this.state = 4023;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 4019;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 4020;
				this.filterWildDbTableString();
				}
				}
				this.state = 4025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterWildDbTableString(): FilterWildDbTableStringContext {
		let _localctx: FilterWildDbTableStringContext = new FilterWildDbTableStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, MultiQueryMySQLParser.RULE_filterWildDbTableString);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4026;
			this.textStringNoLinebreak();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterDbPairList(): FilterDbPairListContext {
		let _localctx: FilterDbPairListContext = new FilterDbPairListContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, MultiQueryMySQLParser.RULE_filterDbPairList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4028;
			this.schemaIdentifierPair();
			this.state = 4033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 4029;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 4030;
				this.schemaIdentifierPair();
				}
				}
				this.state = 4035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public slave(): SlaveContext {
		let _localctx: SlaveContext = new SlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, MultiQueryMySQLParser.RULE_slave);
		try {
			this.state = 4057;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.START_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4036;
				this.match(MultiQueryMySQLParser.START_SYMBOL);
				this.state = 4037;
				this.match(MultiQueryMySQLParser.SLAVE_SYMBOL);
				this.state = 4039;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
				case 1:
					{
					this.state = 4038;
					this.slaveThreadOptions();
					}
					break;
				}
				this.state = 4043;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 463, this._ctx) ) {
				case 1:
					{
					this.state = 4041;
					this.match(MultiQueryMySQLParser.UNTIL_SYMBOL);
					this.state = 4042;
					this.slaveUntilOptions();
					}
					break;
				}
				this.state = 4045;
				this.slaveConnectionOptions();
				this.state = 4047;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
				case 1:
					{
					this.state = 4046;
					this.channel();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.STOP_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4049;
				this.match(MultiQueryMySQLParser.STOP_SYMBOL);
				this.state = 4050;
				this.match(MultiQueryMySQLParser.SLAVE_SYMBOL);
				this.state = 4052;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 465, this._ctx) ) {
				case 1:
					{
					this.state = 4051;
					this.slaveThreadOptions();
					}
					break;
				}
				this.state = 4055;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 466, this._ctx) ) {
				case 1:
					{
					this.state = 4054;
					this.channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public slaveUntilOptions(): SlaveUntilOptionsContext {
		let _localctx: SlaveUntilOptionsContext = new SlaveUntilOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, MultiQueryMySQLParser.RULE_slaveUntilOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4066;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				{
				this.state = 4059;
				this.masterFileDef();
				}
				break;

			case 2:
				{
				this.state = 4060;
				if (!(this.serverVersion >= 50606)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50606");
				}
				this.state = 4061;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL || _la === MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4062;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 4063;
				this.textString();
				}
				break;

			case 3:
				{
				this.state = 4064;
				if (!(this.serverVersion >= 50606)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50606");
				}
				this.state = 4065;
				this.match(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			this.state = 4072;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4068;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4069;
					this.masterFileDef();
					}
					}
				}
				this.state = 4074;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public slaveConnectionOptions(): SlaveConnectionOptionsContext {
		let _localctx: SlaveConnectionOptionsContext = new SlaveConnectionOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, MultiQueryMySQLParser.RULE_slaveConnectionOptions);
		try {
			this.state = 4097;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 474, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4075;
				if (!(this.serverVersion >= 50604)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50604");
				}
				this.state = 4079;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 470, this._ctx) ) {
				case 1:
					{
					this.state = 4076;
					this.match(MultiQueryMySQLParser.USER_SYMBOL);
					this.state = 4077;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					this.state = 4078;
					this.textString();
					}
					break;
				}
				this.state = 4084;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 471, this._ctx) ) {
				case 1:
					{
					this.state = 4081;
					this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
					this.state = 4082;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					this.state = 4083;
					this.textString();
					}
					break;
				}
				this.state = 4089;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
				case 1:
					{
					this.state = 4086;
					this.match(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL);
					this.state = 4087;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					this.state = 4088;
					this.textString();
					}
					break;
				}
				this.state = 4094;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 473, this._ctx) ) {
				case 1:
					{
					this.state = 4091;
					this.match(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL);
					this.state = 4092;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					this.state = 4093;
					this.textString();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public slaveThreadOptions(): SlaveThreadOptionsContext {
		let _localctx: SlaveThreadOptionsContext = new SlaveThreadOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, MultiQueryMySQLParser.RULE_slaveThreadOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4099;
			this.slaveThreadOption();
			this.state = 4104;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4100;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4101;
					this.slaveThreadOption();
					}
					}
				}
				this.state = 4106;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public slaveThreadOption(): SlaveThreadOptionContext {
		let _localctx: SlaveThreadOptionContext = new SlaveThreadOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, MultiQueryMySQLParser.RULE_slaveThreadOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4107;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.RELAY_THREAD_SYMBOL || _la === MultiQueryMySQLParser.SQL_THREAD_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupReplication(): GroupReplicationContext {
		let _localctx: GroupReplicationContext = new GroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, MultiQueryMySQLParser.RULE_groupReplication);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4109;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.START_SYMBOL || _la === MultiQueryMySQLParser.STOP_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4110;
			this.match(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparedStatement(): PreparedStatementContext {
		let _localctx: PreparedStatementContext = new PreparedStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, MultiQueryMySQLParser.RULE_preparedStatement);
		let _la: number;
		try {
			this.state = 4123;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.PREPARE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4112;
				_localctx._type = this.match(MultiQueryMySQLParser.PREPARE_SYMBOL);
				this.state = 4113;
				this.identifier();
				this.state = 4114;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 4117;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
				case 1:
					{
					this.state = 4115;
					this.textLiteral();
					}
					break;

				case 2:
					{
					this.state = 4116;
					this.userVariable();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.EXECUTE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4119;
				this.executeStatement();
				}
				break;
			case MultiQueryMySQLParser.DEALLOCATE_SYMBOL:
			case MultiQueryMySQLParser.DROP_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4120;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DEALLOCATE_SYMBOL || _la === MultiQueryMySQLParser.DROP_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4121;
				this.match(MultiQueryMySQLParser.PREPARE_SYMBOL);
				this.state = 4122;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let _localctx: ExecuteStatementContext = new ExecuteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, MultiQueryMySQLParser.RULE_executeStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4125;
			this.match(MultiQueryMySQLParser.EXECUTE_SYMBOL);
			this.state = 4126;
			this.identifier();
			this.state = 4129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 478, this._ctx) ) {
			case 1:
				{
				this.state = 4127;
				this.match(MultiQueryMySQLParser.USING_SYMBOL);
				this.state = 4128;
				this.executeVarList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeVarList(): ExecuteVarListContext {
		let _localctx: ExecuteVarListContext = new ExecuteVarListContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, MultiQueryMySQLParser.RULE_executeVarList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4131;
			this.userVariable();
			this.state = 4136;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4132;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4133;
					this.userVariable();
					}
					}
				}
				this.state = 4138;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cloneStatement(): CloneStatementContext {
		let _localctx: CloneStatementContext = new CloneStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, MultiQueryMySQLParser.RULE_cloneStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4139;
			this.match(MultiQueryMySQLParser.CLONE_SYMBOL);
			this.state = 4164;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
			case 1:
				{
				this.state = 4140;
				this.match(MultiQueryMySQLParser.LOCAL_SYMBOL);
				this.state = 4141;
				this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				this.state = 4142;
				this.match(MultiQueryMySQLParser.DIRECTORY_SYMBOL);
				this.state = 4144;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 480, this._ctx) ) {
				case 1:
					{
					this.state = 4143;
					this.equal();
					}
					break;
				}
				this.state = 4146;
				this.textStringLiteral();
				}
				break;

			case 2:
				{
				this.state = 4147;
				this.match(MultiQueryMySQLParser.REMOTE_SYMBOL);
				this.state = 4150;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 481, this._ctx) ) {
				case 1:
					{
					this.state = 4148;
					this.match(MultiQueryMySQLParser.FOR_SYMBOL);
					this.state = 4149;
					this.match(MultiQueryMySQLParser.REPLICATION_SYMBOL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 4152;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 4153;
				this.match(MultiQueryMySQLParser.INSTANCE_SYMBOL);
				this.state = 4154;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 4155;
				this.user();
				this.state = 4156;
				this.match(MultiQueryMySQLParser.COLON_SYMBOL);
				this.state = 4157;
				this.ulong_number();
				this.state = 4158;
				this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
				this.state = 4159;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 4160;
				this.textStringLiteral();
				this.state = 4162;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 482, this._ctx) ) {
				case 1:
					{
					this.state = 4161;
					this.dataDirSSL();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDirSSL(): DataDirSSLContext {
		let _localctx: DataDirSSLContext = new DataDirSSLContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, MultiQueryMySQLParser.RULE_dataDirSSL);
		try {
			this.state = 4176;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.REQUIRE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4166;
				this.ssl();
				}
				break;
			case MultiQueryMySQLParser.DATA_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4167;
				this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				this.state = 4168;
				this.match(MultiQueryMySQLParser.DIRECTORY_SYMBOL);
				this.state = 4170;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
				case 1:
					{
					this.state = 4169;
					this.equal();
					}
					break;
				}
				this.state = 4172;
				this.textStringLiteral();
				this.state = 4174;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 485, this._ctx) ) {
				case 1:
					{
					this.state = 4173;
					this.ssl();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ssl(): SslContext {
		let _localctx: SslContext = new SslContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, MultiQueryMySQLParser.RULE_ssl);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4178;
			this.match(MultiQueryMySQLParser.REQUIRE_SYMBOL);
			this.state = 4180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.NO_SYMBOL) {
				{
				this.state = 4179;
				this.match(MultiQueryMySQLParser.NO_SYMBOL);
				}
			}

			this.state = 4182;
			this.match(MultiQueryMySQLParser.SSL_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accountManagementStatement(): AccountManagementStatementContext {
		let _localctx: AccountManagementStatementContext = new AccountManagementStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, MultiQueryMySQLParser.RULE_accountManagementStatement);
		try {
			this.state = 4193;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 488, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4184;
				if (!(this.serverVersion >= 50606)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50606");
				}
				this.state = 4185;
				this.alterUser();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4186;
				this.createUser();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4187;
				this.dropUser();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4188;
				this.grant();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4189;
				this.renameUser();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4190;
				this.revoke();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4191;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4192;
				this.setRole();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let _localctx: AlterUserContext = new AlterUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, MultiQueryMySQLParser.RULE_alterUser);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4195;
			this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
			this.state = 4196;
			this.match(MultiQueryMySQLParser.USER_SYMBOL);
			this.state = 4199;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 489, this._ctx) ) {
			case 1:
				{
				this.state = 4197;
				if (!(this.serverVersion >= 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50706");
				}
				this.state = 4198;
				this.ifExists();
				}
				break;
			}
			this.state = 4201;
			this.alterUserTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUserTail(): AlterUserTailContext {
		let _localctx: AlterUserTailContext = new AlterUserTailContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, MultiQueryMySQLParser.RULE_alterUserTail);
		let _la: number;
		try {
			this.state = 4250;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4207;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
				case 1:
					{
					this.state = 4203;
					if (!(this.serverVersion < 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion < 80014");
					}
					this.state = 4204;
					this.createUserList();
					}
					break;

				case 2:
					{
					this.state = 4205;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 4206;
					this.alterUserList();
					}
					break;
				}
				this.state = 4209;
				this.createUserTail();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4211;
				if (!(this.serverVersion >= 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50706");
				}
				this.state = 4212;
				this.user();
				this.state = 4213;
				this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
				this.state = 4214;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 4215;
				this.textString();
				this.state = 4218;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 491, this._ctx) ) {
				case 1:
					{
					this.state = 4216;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 4217;
					this.replacePassword();
					}
					break;
				}
				this.state = 4222;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
				case 1:
					{
					this.state = 4220;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 4221;
					this.retainCurrentPassword();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4224;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 4225;
				this.user();
				this.state = 4226;
				this.discardOldPassword();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4228;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4229;
				this.user();
				this.state = 4230;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 4231;
				this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
				this.state = 4235;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 493, this._ctx) ) {
				case 1:
					{
					this.state = 4232;
					this.match(MultiQueryMySQLParser.ALL_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 4233;
					this.match(MultiQueryMySQLParser.NONE_SYMBOL);
					}
					break;

				case 3:
					{
					this.state = 4234;
					this.roleList();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4237;
				if (!(this.serverVersion >= 80018)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80018");
				}
				this.state = 4238;
				this.user();
				this.state = 4239;
				this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
				this.state = 4242;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.WITH_SYMBOL) {
					{
					this.state = 4240;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 4241;
					this.textOrIdentifier();
					}
				}

				this.state = 4244;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 4245;
				this.match(MultiQueryMySQLParser.RANDOM_SYMBOL);
				this.state = 4246;
				this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 4248;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
				case 1:
					{
					this.state = 4247;
					this.retainCurrentPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userFunction(): UserFunctionContext {
		let _localctx: UserFunctionContext = new UserFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, MultiQueryMySQLParser.RULE_userFunction);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4252;
			this.match(MultiQueryMySQLParser.USER_SYMBOL);
			this.state = 4253;
			this.parentheses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let _localctx: CreateUserContext = new CreateUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, MultiQueryMySQLParser.RULE_createUser);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4255;
			this.match(MultiQueryMySQLParser.CREATE_SYMBOL);
			this.state = 4256;
			this.match(MultiQueryMySQLParser.USER_SYMBOL);
			this.state = 4260;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				{
				this.state = 4257;
				if (!(this.serverVersion >= 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50706");
				}
				this.state = 4258;
				this.ifNotExists();
				}
				break;

			case 2:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
			this.state = 4262;
			this.createUserList();
			this.state = 4263;
			this.defaultRoleClause();
			this.state = 4264;
			this.createUserTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUserTail(): CreateUserTailContext {
		let _localctx: CreateUserTailContext = new CreateUserTailContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, MultiQueryMySQLParser.RULE_createUserTail);
		try {
			let _alt: number;
			this.state = 4280;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 501, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4266;
				if (!(this.serverVersion >= 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50706");
				}
				this.state = 4268;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 498, this._ctx) ) {
				case 1:
					{
					this.state = 4267;
					this.requireClause();
					}
					break;
				}
				this.state = 4271;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
				case 1:
					{
					this.state = 4270;
					this.connectOptions();
					}
					break;
				}
				this.state = 4276;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4273;
						this.accountLockPasswordExpireOptions();
						}
						}
					}
					this.state = 4278;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultRoleClause(): DefaultRoleClauseContext {
		let _localctx: DefaultRoleClauseContext = new DefaultRoleClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, MultiQueryMySQLParser.RULE_defaultRoleClause);
		try {
			this.state = 4289;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 503, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4282;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4286;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 502, this._ctx) ) {
				case 1:
					{
					this.state = 4283;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					this.state = 4284;
					this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
					this.state = 4285;
					this.roleList();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public requireClause(): RequireClauseContext {
		let _localctx: RequireClauseContext = new RequireClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, MultiQueryMySQLParser.RULE_requireClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4291;
			this.match(MultiQueryMySQLParser.REQUIRE_SYMBOL);
			this.state = 4294;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CIPHER_SYMBOL:
			case MultiQueryMySQLParser.ISSUER_SYMBOL:
			case MultiQueryMySQLParser.SUBJECT_SYMBOL:
				{
				this.state = 4292;
				this.requireList();
				}
				break;
			case MultiQueryMySQLParser.NONE_SYMBOL:
			case MultiQueryMySQLParser.X509_SYMBOL:
			case MultiQueryMySQLParser.SSL_SYMBOL:
				{
				this.state = 4293;
				_localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.NONE_SYMBOL || _la === MultiQueryMySQLParser.X509_SYMBOL || _la === MultiQueryMySQLParser.SSL_SYMBOL)) {
					_localctx._option = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public connectOptions(): ConnectOptionsContext {
		let _localctx: ConnectOptionsContext = new ConnectOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, MultiQueryMySQLParser.RULE_connectOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4296;
			this.match(MultiQueryMySQLParser.WITH_SYMBOL);
			this.state = 4305;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					this.state = 4305;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
						{
						this.state = 4297;
						this.match(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
						this.state = 4298;
						this.ulong_number();
						}
						break;
					case MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
						{
						this.state = 4299;
						this.match(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
						this.state = 4300;
						this.ulong_number();
						}
						break;
					case MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
						{
						this.state = 4301;
						this.match(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
						this.state = 4302;
						this.ulong_number();
						}
						break;
					case MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
						{
						this.state = 4303;
						this.match(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
						this.state = 4304;
						this.ulong_number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4307;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext {
		let _localctx: AccountLockPasswordExpireOptionsContext = new AccountLockPasswordExpireOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, MultiQueryMySQLParser.RULE_accountLockPasswordExpireOptions);
		let _la: number;
		try {
			this.state = 4342;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ACCOUNT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4309;
				this.match(MultiQueryMySQLParser.ACCOUNT_SYMBOL);
				this.state = 4310;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.LOCK_SYMBOL || _la === MultiQueryMySQLParser.UNLOCK_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MultiQueryMySQLParser.PASSWORD_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4311;
				this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 4340;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 511, this._ctx) ) {
				case 1:
					{
					this.state = 4312;
					this.match(MultiQueryMySQLParser.EXPIRE_SYMBOL);
					this.state = 4319;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 507, this._ctx) ) {
					case 1:
						{
						this.state = 4313;
						this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
						this.state = 4314;
						this.real_ulong_number();
						this.state = 4315;
						this.match(MultiQueryMySQLParser.DAY_SYMBOL);
						}
						break;

					case 2:
						{
						this.state = 4317;
						this.match(MultiQueryMySQLParser.NEVER_SYMBOL);
						}
						break;

					case 3:
						{
						this.state = 4318;
						this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 4321;
					this.match(MultiQueryMySQLParser.HISTORY_SYMBOL);
					this.state = 4324;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.INT_NUMBER:
					case MultiQueryMySQLParser.LONG_NUMBER:
					case MultiQueryMySQLParser.ULONGLONG_NUMBER:
					case MultiQueryMySQLParser.HEX_NUMBER:
						{
						this.state = 4322;
						this.real_ulong_number();
						}
						break;
					case MultiQueryMySQLParser.DEFAULT_SYMBOL:
						{
						this.state = 4323;
						this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 3:
					{
					this.state = 4326;
					this.match(MultiQueryMySQLParser.REUSE_SYMBOL);
					this.state = 4327;
					this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
					this.state = 4332;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.INT_NUMBER:
					case MultiQueryMySQLParser.LONG_NUMBER:
					case MultiQueryMySQLParser.ULONGLONG_NUMBER:
					case MultiQueryMySQLParser.HEX_NUMBER:
						{
						this.state = 4328;
						this.real_ulong_number();
						this.state = 4329;
						this.match(MultiQueryMySQLParser.DAY_SYMBOL);
						}
						break;
					case MultiQueryMySQLParser.DEFAULT_SYMBOL:
						{
						this.state = 4331;
						this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 4:
					{
					this.state = 4334;
					if (!(this.serverVersion >= 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80014");
					}
					this.state = 4335;
					this.match(MultiQueryMySQLParser.REQUIRE_SYMBOL);
					this.state = 4336;
					this.match(MultiQueryMySQLParser.CURRENT_SYMBOL);
					this.state = 4338;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 510, this._ctx) ) {
					case 1:
						{
						this.state = 4337;
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.DEFAULT_SYMBOL || _la === MultiQueryMySQLParser.OPTIONAL_SYMBOL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let _localctx: DropUserContext = new DropUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, MultiQueryMySQLParser.RULE_dropUser);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4344;
			this.match(MultiQueryMySQLParser.DROP_SYMBOL);
			this.state = 4345;
			this.match(MultiQueryMySQLParser.USER_SYMBOL);
			this.state = 4348;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 513, this._ctx) ) {
			case 1:
				{
				this.state = 4346;
				if (!(this.serverVersion >= 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50706");
				}
				this.state = 4347;
				this.ifExists();
				}
				break;
			}
			this.state = 4350;
			this.userList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant(): GrantContext {
		let _localctx: GrantContext = new GrantContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, MultiQueryMySQLParser.RULE_grant);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4352;
			this.match(MultiQueryMySQLParser.GRANT_SYMBOL);
			this.state = 4395;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 522, this._ctx) ) {
			case 1:
				{
				this.state = 4353;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4354;
				this.roleOrPrivilegesList();
				this.state = 4355;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 4356;
				this.userList();
				this.state = 4360;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
				case 1:
					{
					this.state = 4357;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 4358;
					this.match(MultiQueryMySQLParser.ADMIN_SYMBOL);
					this.state = 4359;
					this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 4367;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 516, this._ctx) ) {
				case 1:
					{
					this.state = 4362;
					this.roleOrPrivilegesList();
					}
					break;

				case 2:
					{
					this.state = 4363;
					this.match(MultiQueryMySQLParser.ALL_SYMBOL);
					this.state = 4365;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.PRIVILEGES_SYMBOL) {
						{
						this.state = 4364;
						this.match(MultiQueryMySQLParser.PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				this.state = 4369;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 4371;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 517, this._ctx) ) {
				case 1:
					{
					this.state = 4370;
					this.aclType();
					}
					break;
				}
				this.state = 4373;
				this.grantIdentifier();
				this.state = 4374;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 4375;
				this.grantTargetList();
				this.state = 4377;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 518, this._ctx) ) {
				case 1:
					{
					this.state = 4376;
					this.versionedRequireClause();
					}
					break;
				}
				this.state = 4380;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 519, this._ctx) ) {
				case 1:
					{
					this.state = 4379;
					this.grantOptions();
					}
					break;
				}
				this.state = 4383;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 520, this._ctx) ) {
				case 1:
					{
					this.state = 4382;
					this.grantAs();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 4385;
				this.match(MultiQueryMySQLParser.PROXY_SYMBOL);
				this.state = 4386;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 4387;
				this.user();
				this.state = 4388;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 4389;
				this.grantTargetList();
				this.state = 4393;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 521, this._ctx) ) {
				case 1:
					{
					this.state = 4390;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 4391;
					this.match(MultiQueryMySQLParser.GRANT_SYMBOL);
					this.state = 4392;
					this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantTargetList(): GrantTargetListContext {
		let _localctx: GrantTargetListContext = new GrantTargetListContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, MultiQueryMySQLParser.RULE_grantTargetList);
		try {
			this.state = 4401;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 523, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4397;
				if (!(this.serverVersion < 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80011");
				}
				this.state = 4398;
				this.createUserList();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4399;
				if (!(this.serverVersion >= 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80011");
				}
				this.state = 4400;
				this.userList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantOptions(): GrantOptionsContext {
		let _localctx: GrantOptionsContext = new GrantOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, MultiQueryMySQLParser.RULE_grantOptions);
		try {
			let _alt: number;
			this.state = 4414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 525, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4403;
				if (!(this.serverVersion < 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80011");
				}
				this.state = 4404;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 4406;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4405;
						this.grantOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4408;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4410;
				if (!(this.serverVersion >= 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80011");
				}
				this.state = 4411;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 4412;
				this.match(MultiQueryMySQLParser.GRANT_SYMBOL);
				this.state = 4413;
				this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exceptRoleList(): ExceptRoleListContext {
		let _localctx: ExceptRoleListContext = new ExceptRoleListContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, MultiQueryMySQLParser.RULE_exceptRoleList);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4416;
			this.match(MultiQueryMySQLParser.EXCEPT_SYMBOL);
			this.state = 4417;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withRoles(): WithRolesContext {
		let _localctx: WithRolesContext = new WithRolesContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, MultiQueryMySQLParser.RULE_withRoles);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4419;
			this.match(MultiQueryMySQLParser.WITH_SYMBOL);
			this.state = 4420;
			this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
			this.state = 4428;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 527, this._ctx) ) {
			case 1:
				{
				this.state = 4421;
				this.roleList();
				}
				break;

			case 2:
				{
				this.state = 4422;
				this.match(MultiQueryMySQLParser.ALL_SYMBOL);
				this.state = 4424;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
				case 1:
					{
					this.state = 4423;
					this.exceptRoleList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 4426;
				this.match(MultiQueryMySQLParser.NONE_SYMBOL);
				}
				break;

			case 4:
				{
				this.state = 4427;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantAs(): GrantAsContext {
		let _localctx: GrantAsContext = new GrantAsContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, MultiQueryMySQLParser.RULE_grantAs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4430;
			this.match(MultiQueryMySQLParser.AS_SYMBOL);
			this.state = 4431;
			this.match(MultiQueryMySQLParser.USER_SYMBOL);
			this.state = 4433;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 528, this._ctx) ) {
			case 1:
				{
				this.state = 4432;
				this.withRoles();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public versionedRequireClause(): VersionedRequireClauseContext {
		let _localctx: VersionedRequireClauseContext = new VersionedRequireClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, MultiQueryMySQLParser.RULE_versionedRequireClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4435;
			if (!(this.serverVersion < 80011)) {
				throw new FailedPredicateException(this, "this.serverVersion < 80011");
			}
			this.state = 4436;
			this.requireClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let _localctx: RenameUserContext = new RenameUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, MultiQueryMySQLParser.RULE_renameUser);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4438;
			this.match(MultiQueryMySQLParser.RENAME_SYMBOL);
			this.state = 4439;
			this.match(MultiQueryMySQLParser.USER_SYMBOL);
			this.state = 4440;
			this.user();
			this.state = 4441;
			this.match(MultiQueryMySQLParser.TO_SYMBOL);
			this.state = 4442;
			this.user();
			this.state = 4450;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4443;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4444;
					this.user();
					this.state = 4445;
					this.match(MultiQueryMySQLParser.TO_SYMBOL);
					this.state = 4446;
					this.user();
					}
					}
				}
				this.state = 4452;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revoke(): RevokeContext {
		let _localctx: RevokeContext = new RevokeContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, MultiQueryMySQLParser.RULE_revoke);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4453;
			this.match(MultiQueryMySQLParser.REVOKE_SYMBOL);
			this.state = 4487;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 533, this._ctx) ) {
			case 1:
				{
				this.state = 4454;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4455;
				this.roleOrPrivilegesList();
				this.state = 4456;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 4457;
				this.userList();
				}
				break;

			case 2:
				{
				this.state = 4459;
				this.roleOrPrivilegesList();
				this.state = 4460;
				this.onTypeTo();
				this.state = 4461;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 4462;
				this.userList();
				}
				break;

			case 3:
				{
				this.state = 4464;
				this.match(MultiQueryMySQLParser.ALL_SYMBOL);
				this.state = 4466;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 530, this._ctx) ) {
				case 1:
					{
					this.state = 4465;
					this.match(MultiQueryMySQLParser.PRIVILEGES_SYMBOL);
					}
					break;
				}
				this.state = 4479;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 532, this._ctx) ) {
				case 1:
					{
					this.state = 4468;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 4469;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 4471;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
					case 1:
						{
						this.state = 4470;
						this.aclType();
						}
						break;
					}
					this.state = 4473;
					this.grantIdentifier();
					}
					break;

				case 2:
					{
					this.state = 4474;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4475;
					this.match(MultiQueryMySQLParser.GRANT_SYMBOL);
					this.state = 4476;
					this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
					this.state = 4477;
					this.match(MultiQueryMySQLParser.FROM_SYMBOL);
					this.state = 4478;
					this.userList();
					}
					break;
				}
				}
				break;

			case 4:
				{
				this.state = 4481;
				this.match(MultiQueryMySQLParser.PROXY_SYMBOL);
				this.state = 4482;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 4483;
				this.user();
				this.state = 4484;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 4485;
				this.userList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onTypeTo(): OnTypeToContext {
		let _localctx: OnTypeToContext = new OnTypeToContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, MultiQueryMySQLParser.RULE_onTypeTo);
		let _la: number;
		try {
			this.state = 4503;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 537, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4489;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 4490;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 4492;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 534, this._ctx) ) {
				case 1:
					{
					this.state = 4491;
					this.aclType();
					}
					break;
				}
				this.state = 4494;
				this.grantIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4495;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ON_SYMBOL) {
					{
					this.state = 4496;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 4498;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 535, this._ctx) ) {
					case 1:
						{
						this.state = 4497;
						this.aclType();
						}
						break;
					}
					this.state = 4500;
					this.grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aclType(): AclTypeContext {
		let _localctx: AclTypeContext = new AclTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, MultiQueryMySQLParser.RULE_aclType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4505;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.FUNCTION_SYMBOL || _la === MultiQueryMySQLParser.PROCEDURE_SYMBOL || _la === MultiQueryMySQLParser.TABLE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
		let _localctx: RoleOrPrivilegesListContext = new RoleOrPrivilegesListContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, MultiQueryMySQLParser.RULE_roleOrPrivilegesList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4507;
			this.roleOrPrivilege();
			this.state = 4512;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4508;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4509;
					this.roleOrPrivilege();
					}
					}
				}
				this.state = 4514;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleOrPrivilege(): RoleOrPrivilegeContext {
		let _localctx: RoleOrPrivilegeContext = new RoleOrPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, MultiQueryMySQLParser.RULE_roleOrPrivilege);
		let _la: number;
		try {
			this.state = 4556;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 545, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4515;
				if (!(this.serverVersion > 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion > 80000");
				}
				this.state = 4526;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 541, this._ctx) ) {
				case 1:
					{
					this.state = 4516;
					this.roleIdentifierOrText();
					this.state = 4518;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 539, this._ctx) ) {
					case 1:
						{
						this.state = 4517;
						this.columnInternalRefList();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 4520;
					this.roleIdentifierOrText();
					this.state = 4524;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.AT_TEXT_SUFFIX:
						{
						this.state = 4521;
						this.match(MultiQueryMySQLParser.AT_TEXT_SUFFIX);
						}
						break;
					case MultiQueryMySQLParser.AT_SIGN_SYMBOL:
						{
						this.state = 4522;
						this.match(MultiQueryMySQLParser.AT_SIGN_SYMBOL);
						this.state = 4523;
						this.textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4528;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.INSERT_SYMBOL || _la === MultiQueryMySQLParser.REFERENCES_SYMBOL || _la === MultiQueryMySQLParser.SELECT_SYMBOL || _la === MultiQueryMySQLParser.UPDATE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4530;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
				case 1:
					{
					this.state = 4529;
					this.columnInternalRefList();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4532;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.EXECUTE_SYMBOL || _la === MultiQueryMySQLParser.SHUTDOWN_SYMBOL || _la === MultiQueryMySQLParser.EVENT_SYMBOL || _la === MultiQueryMySQLParser.FILE_SYMBOL || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (MultiQueryMySQLParser.PROCESS_SYMBOL - 261)) | (1 << (MultiQueryMySQLParser.PROXY_SYMBOL - 261)) | (1 << (MultiQueryMySQLParser.RELOAD_SYMBOL - 261)))) !== 0) || _la === MultiQueryMySQLParser.SUPER_SYMBOL || _la === MultiQueryMySQLParser.DELETE_SYMBOL || _la === MultiQueryMySQLParser.DROP_SYMBOL || _la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.TRIGGER_SYMBOL || _la === MultiQueryMySQLParser.USAGE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4533;
				this.match(MultiQueryMySQLParser.GRANT_SYMBOL);
				this.state = 4534;
				this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4535;
				this.match(MultiQueryMySQLParser.SHOW_SYMBOL);
				this.state = 4536;
				this.match(MultiQueryMySQLParser.DATABASES_SYMBOL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4537;
				this.match(MultiQueryMySQLParser.CREATE_SYMBOL);
				this.state = 4541;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 543, this._ctx) ) {
				case 1:
					{
					this.state = 4538;
					this.match(MultiQueryMySQLParser.TEMPORARY_SYMBOL);
					this.state = 4539;
					_localctx._object = this.match(MultiQueryMySQLParser.TABLES_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 4540;
					_localctx._object = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.ROUTINE_SYMBOL || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (MultiQueryMySQLParser.TABLESPACE_SYMBOL - 342)) | (1 << (MultiQueryMySQLParser.USER_SYMBOL - 342)) | (1 << (MultiQueryMySQLParser.VIEW_SYMBOL - 342)))) !== 0))) {
						_localctx._object = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4543;
				this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
				this.state = 4544;
				this.match(MultiQueryMySQLParser.TABLES_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4545;
				this.match(MultiQueryMySQLParser.REPLICATION_SYMBOL);
				this.state = 4546;
				_localctx._object = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.SLAVE_SYMBOL || _la === MultiQueryMySQLParser.CLIENT_SYMBOL)) {
					_localctx._object = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4547;
				this.match(MultiQueryMySQLParser.SHOW_SYMBOL);
				this.state = 4548;
				this.match(MultiQueryMySQLParser.VIEW_SYMBOL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4549;
				this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
				this.state = 4551;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 544, this._ctx) ) {
				case 1:
					{
					this.state = 4550;
					this.match(MultiQueryMySQLParser.ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4553;
				if (!(this.serverVersion > 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion > 80000");
				}
				this.state = 4554;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CREATE_SYMBOL || _la === MultiQueryMySQLParser.DROP_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4555;
				this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantIdentifier(): GrantIdentifierContext {
		let _localctx: GrantIdentifierContext = new GrantIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, MultiQueryMySQLParser.RULE_grantIdentifier);
		try {
			this.state = 4574;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 548, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4558;
				this.match(MultiQueryMySQLParser.MULT_OPERATOR);
				this.state = 4561;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
				case 1:
					{
					this.state = 4559;
					this.match(MultiQueryMySQLParser.DOT_SYMBOL);
					this.state = 4560;
					this.match(MultiQueryMySQLParser.MULT_OPERATOR);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4563;
				this.schemaRef();
				this.state = 4566;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 547, this._ctx) ) {
				case 1:
					{
					this.state = 4564;
					this.match(MultiQueryMySQLParser.DOT_SYMBOL);
					this.state = 4565;
					this.match(MultiQueryMySQLParser.MULT_OPERATOR);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4568;
				this.tableRef();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4569;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 4570;
				this.schemaRef();
				this.state = 4571;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				this.state = 4572;
				this.tableRef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public requireList(): RequireListContext {
		let _localctx: RequireListContext = new RequireListContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, MultiQueryMySQLParser.RULE_requireList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4576;
			this.requireListElement();
			this.state = 4583;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 550, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4578;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.AND_SYMBOL) {
						{
						this.state = 4577;
						this.match(MultiQueryMySQLParser.AND_SYMBOL);
						}
					}

					this.state = 4580;
					this.requireListElement();
					}
					}
				}
				this.state = 4585;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 550, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public requireListElement(): RequireListElementContext {
		let _localctx: RequireListElementContext = new RequireListElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, MultiQueryMySQLParser.RULE_requireListElement);
		try {
			this.state = 4592;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CIPHER_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4586;
				_localctx._element = this.match(MultiQueryMySQLParser.CIPHER_SYMBOL);
				this.state = 4587;
				this.textString();
				}
				break;
			case MultiQueryMySQLParser.ISSUER_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4588;
				_localctx._element = this.match(MultiQueryMySQLParser.ISSUER_SYMBOL);
				this.state = 4589;
				this.textString();
				}
				break;
			case MultiQueryMySQLParser.SUBJECT_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4590;
				_localctx._element = this.match(MultiQueryMySQLParser.SUBJECT_SYMBOL);
				this.state = 4591;
				this.textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantOption(): GrantOptionContext {
		let _localctx: GrantOptionContext = new GrantOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, MultiQueryMySQLParser.RULE_grantOption);
		try {
			this.state = 4604;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.GRANT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4594;
				_localctx._option = this.match(MultiQueryMySQLParser.GRANT_SYMBOL);
				this.state = 4595;
				this.match(MultiQueryMySQLParser.OPTION_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4596;
				_localctx._option = this.match(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
				this.state = 4597;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4598;
				_localctx._option = this.match(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
				this.state = 4599;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4600;
				_localctx._option = this.match(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				this.state = 4601;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4602;
				_localctx._option = this.match(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
				this.state = 4603;
				this.ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setRole(): SetRoleContext {
		let _localctx: SetRoleContext = new SetRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, MultiQueryMySQLParser.RULE_setRole);
		let _la: number;
		try {
			this.state = 4629;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 555, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4606;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 4607;
				this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
				this.state = 4608;
				this.roleList();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4609;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 4610;
				this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
				this.state = 4611;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.NONE_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4612;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 4613;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 4614;
				this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
				this.state = 4618;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
				case 1:
					{
					this.state = 4615;
					this.roleList();
					}
					break;

				case 2:
					{
					this.state = 4616;
					this.match(MultiQueryMySQLParser.NONE_SYMBOL);
					}
					break;

				case 3:
					{
					this.state = 4617;
					this.match(MultiQueryMySQLParser.ALL_SYMBOL);
					}
					break;
				}
				this.state = 4620;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 4621;
				this.roleList();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4622;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 4623;
				this.match(MultiQueryMySQLParser.ROLE_SYMBOL);
				this.state = 4624;
				this.match(MultiQueryMySQLParser.ALL_SYMBOL);
				this.state = 4627;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 554, this._ctx) ) {
				case 1:
					{
					this.state = 4625;
					this.match(MultiQueryMySQLParser.EXCEPT_SYMBOL);
					this.state = 4626;
					this.roleList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleList(): RoleListContext {
		let _localctx: RoleListContext = new RoleListContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, MultiQueryMySQLParser.RULE_roleList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4631;
			this.role();
			this.state = 4636;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4632;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4633;
					this.role();
					}
					}
				}
				this.state = 4638;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public role(): RoleContext {
		let _localctx: RoleContext = new RoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, MultiQueryMySQLParser.RULE_role);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4639;
			this.roleIdentifierOrText();
			this.state = 4643;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 557, this._ctx) ) {
			case 1:
				{
				this.state = 4640;
				this.match(MultiQueryMySQLParser.AT_SIGN_SYMBOL);
				this.state = 4641;
				this.textOrIdentifier();
				}
				break;

			case 2:
				{
				this.state = 4642;
				this.match(MultiQueryMySQLParser.AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableAdministrationStatement(): TableAdministrationStatementContext {
		let _localctx: TableAdministrationStatementContext = new TableAdministrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, MultiQueryMySQLParser.RULE_tableAdministrationStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4688;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ANALYZE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4645;
				_localctx._type = this.match(MultiQueryMySQLParser.ANALYZE_SYMBOL);
				this.state = 4647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					this.state = 4646;
					this.noWriteToBinLog();
					}
				}

				this.state = 4649;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 4650;
				this.tableRefList();
				this.state = 4653;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 559, this._ctx) ) {
				case 1:
					{
					this.state = 4651;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 4652;
					this.histogram();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.CHECK_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4655;
				_localctx._type = this.match(MultiQueryMySQLParser.CHECK_SYMBOL);
				this.state = 4656;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 4657;
				this.tableRefList();
				this.state = 4661;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4658;
						this.checkOption();
						}
						}
					}
					this.state = 4663;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.CHECKSUM_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4664;
				_localctx._type = this.match(MultiQueryMySQLParser.CHECKSUM_SYMBOL);
				this.state = 4665;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 4666;
				this.tableRefList();
				this.state = 4668;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 561, this._ctx) ) {
				case 1:
					{
					this.state = 4667;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.EXTENDED_SYMBOL || _la === MultiQueryMySQLParser.QUICK_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.OPTIMIZE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4670;
				_localctx._type = this.match(MultiQueryMySQLParser.OPTIMIZE_SYMBOL);
				this.state = 4672;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					this.state = 4671;
					this.noWriteToBinLog();
					}
				}

				this.state = 4674;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 4675;
				this.tableRefList();
				}
				break;
			case MultiQueryMySQLParser.REPAIR_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4676;
				_localctx._type = this.match(MultiQueryMySQLParser.REPAIR_SYMBOL);
				this.state = 4678;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					this.state = 4677;
					this.noWriteToBinLog();
					}
				}

				this.state = 4680;
				this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 4681;
				this.tableRefList();
				this.state = 4685;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4682;
						this.repairType();
						}
						}
					}
					this.state = 4687;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public histogram(): HistogramContext {
		let _localctx: HistogramContext = new HistogramContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, MultiQueryMySQLParser.RULE_histogram);
		try {
			this.state = 4703;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.UPDATE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4690;
				this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
				this.state = 4691;
				this.match(MultiQueryMySQLParser.HISTOGRAM_SYMBOL);
				this.state = 4692;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 4693;
				this.identifierList();
				this.state = 4697;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 566, this._ctx) ) {
				case 1:
					{
					this.state = 4694;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 4695;
					this.match(MultiQueryMySQLParser.INT_NUMBER);
					this.state = 4696;
					this.match(MultiQueryMySQLParser.BUCKETS_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.DROP_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4699;
				this.match(MultiQueryMySQLParser.DROP_SYMBOL);
				this.state = 4700;
				this.match(MultiQueryMySQLParser.HISTOGRAM_SYMBOL);
				this.state = 4701;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 4702;
				this.identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkOption(): CheckOptionContext {
		let _localctx: CheckOptionContext = new CheckOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, MultiQueryMySQLParser.RULE_checkOption);
		let _la: number;
		try {
			this.state = 4708;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.FOR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4705;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 4706;
				this.match(MultiQueryMySQLParser.UPGRADE_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.CHANGED_SYMBOL:
			case MultiQueryMySQLParser.EXTENDED_SYMBOL:
			case MultiQueryMySQLParser.FAST_SYMBOL:
			case MultiQueryMySQLParser.MEDIUM_SYMBOL:
			case MultiQueryMySQLParser.QUICK_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4707;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CHANGED_SYMBOL || _la === MultiQueryMySQLParser.EXTENDED_SYMBOL || _la === MultiQueryMySQLParser.FAST_SYMBOL || _la === MultiQueryMySQLParser.MEDIUM_SYMBOL || _la === MultiQueryMySQLParser.QUICK_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repairType(): RepairTypeContext {
		let _localctx: RepairTypeContext = new RepairTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, MultiQueryMySQLParser.RULE_repairType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4710;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.EXTENDED_SYMBOL || _la === MultiQueryMySQLParser.QUICK_SYMBOL || _la === MultiQueryMySQLParser.USE_FRM_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installUninstallStatment(): InstallUninstallStatmentContext {
		let _localctx: InstallUninstallStatmentContext = new InstallUninstallStatmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, MultiQueryMySQLParser.RULE_installUninstallStatment);
		try {
			let _alt: number;
			this.state = 4734;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 570, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4712;
				_localctx._action = this.match(MultiQueryMySQLParser.INSTALL_SYMBOL);
				this.state = 4713;
				_localctx._type = this.match(MultiQueryMySQLParser.PLUGIN_SYMBOL);
				this.state = 4714;
				this.identifier();
				this.state = 4715;
				this.match(MultiQueryMySQLParser.SONAME_SYMBOL);
				this.state = 4716;
				this.textStringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4718;
				_localctx._action = this.match(MultiQueryMySQLParser.INSTALL_SYMBOL);
				this.state = 4719;
				_localctx._type = this.match(MultiQueryMySQLParser.COMPONENT_SYMBOL);
				this.state = 4720;
				this.textStringLiteralList();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4721;
				_localctx._action = this.match(MultiQueryMySQLParser.UNINSTALL_SYMBOL);
				this.state = 4722;
				_localctx._type = this.match(MultiQueryMySQLParser.PLUGIN_SYMBOL);
				this.state = 4723;
				this.pluginRef();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4724;
				_localctx._action = this.match(MultiQueryMySQLParser.UNINSTALL_SYMBOL);
				this.state = 4725;
				_localctx._type = this.match(MultiQueryMySQLParser.COMPONENT_SYMBOL);
				this.state = 4726;
				this.componentRef();
				this.state = 4731;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 569, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4727;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 4728;
						this.componentRef();
						}
						}
					}
					this.state = 4733;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 569, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let _localctx: SetStatementContext = new SetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, MultiQueryMySQLParser.RULE_setStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4736;
			this.match(MultiQueryMySQLParser.SET_SYMBOL);
			this.state = 4737;
			this.startOptionValueList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startOptionValueList(): StartOptionValueListContext {
		let _localctx: StartOptionValueListContext = new StartOptionValueListContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, MultiQueryMySQLParser.RULE_startOptionValueList);
		let _la: number;
		try {
			this.state = 4795;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 580, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4739;
				this.optionValueNoOptionType();
				this.state = 4740;
				this.optionValueListContinued();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4742;
				this.match(MultiQueryMySQLParser.TRANSACTION_SYMBOL);
				this.state = 4743;
				this.transactionCharacteristics();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4744;
				this.optionType();
				this.state = 4745;
				this.startOptionValueListFollowingOptionType();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4747;
				this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 4750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FOR_SYMBOL) {
					{
					this.state = 4748;
					this.match(MultiQueryMySQLParser.FOR_SYMBOL);
					this.state = 4749;
					this.user();
					}
				}

				this.state = 4752;
				this.equal();
				this.state = 4779;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 576, this._ctx) ) {
				case 1:
					{
					this.state = 4753;
					this.textString();
					this.state = 4755;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 572, this._ctx) ) {
					case 1:
						{
						this.state = 4754;
						this.replacePassword();
						}
						break;
					}
					this.state = 4758;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 573, this._ctx) ) {
					case 1:
						{
						this.state = 4757;
						this.retainCurrentPassword();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 4760;
					this.textString();
					this.state = 4762;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 574, this._ctx) ) {
					case 1:
						{
						this.state = 4761;
						this.replacePassword();
						}
						break;
					}
					this.state = 4765;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 575, this._ctx) ) {
					case 1:
						{
						this.state = 4764;
						this.retainCurrentPassword();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 4767;
					if (!(this.serverVersion < 50706)) {
						throw new FailedPredicateException(this, "this.serverVersion < 50706");
					}
					this.state = 4768;
					this.match(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL);
					this.state = 4769;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 4770;
					this.textString();
					this.state = 4771;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;

				case 4:
					{
					this.state = 4773;
					if (!(this.serverVersion < 80014)) {
						throw new FailedPredicateException(this, "this.serverVersion < 80014");
					}
					this.state = 4774;
					this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
					this.state = 4775;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 4776;
					this.textString();
					this.state = 4777;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4781;
				if (!(this.serverVersion >= 80018)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80018");
				}
				this.state = 4782;
				this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 4785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FOR_SYMBOL) {
					{
					this.state = 4783;
					this.match(MultiQueryMySQLParser.FOR_SYMBOL);
					this.state = 4784;
					this.user();
					}
				}

				this.state = 4787;
				this.match(MultiQueryMySQLParser.TO_SYMBOL);
				this.state = 4788;
				this.match(MultiQueryMySQLParser.RANDOM_SYMBOL);
				this.state = 4790;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 578, this._ctx) ) {
				case 1:
					{
					this.state = 4789;
					this.replacePassword();
					}
					break;
				}
				this.state = 4793;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 579, this._ctx) ) {
				case 1:
					{
					this.state = 4792;
					this.retainCurrentPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		let _localctx: TransactionCharacteristicsContext = new TransactionCharacteristicsContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, MultiQueryMySQLParser.RULE_transactionCharacteristics);
		try {
			this.state = 4806;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.READ_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4797;
				this.transactionAccessMode();
				this.state = 4799;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 581, this._ctx) ) {
				case 1:
					{
					this.state = 4798;
					this.isolationLevel();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.ISOLATION_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4801;
				this.isolationLevel();
				this.state = 4804;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
				case 1:
					{
					this.state = 4802;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4803;
					this.transactionAccessMode();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionAccessMode(): TransactionAccessModeContext {
		let _localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, MultiQueryMySQLParser.RULE_transactionAccessMode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4808;
			this.match(MultiQueryMySQLParser.READ_SYMBOL);
			this.state = 4809;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.ONLY_SYMBOL || _la === MultiQueryMySQLParser.WRITE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isolationLevel(): IsolationLevelContext {
		let _localctx: IsolationLevelContext = new IsolationLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, MultiQueryMySQLParser.RULE_isolationLevel);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4811;
			this.match(MultiQueryMySQLParser.ISOLATION_SYMBOL);
			this.state = 4812;
			this.match(MultiQueryMySQLParser.LEVEL_SYMBOL);
			this.state = 4818;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.REPEATABLE_SYMBOL:
				{
				this.state = 4813;
				this.match(MultiQueryMySQLParser.REPEATABLE_SYMBOL);
				this.state = 4814;
				this.match(MultiQueryMySQLParser.READ_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.READ_SYMBOL:
				{
				this.state = 4815;
				this.match(MultiQueryMySQLParser.READ_SYMBOL);
				this.state = 4816;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.COMMITTED_SYMBOL || _la === MultiQueryMySQLParser.UNCOMMITTED_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MultiQueryMySQLParser.SERIALIZABLE_SYMBOL:
				{
				this.state = 4817;
				this.match(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optionValueListContinued(): OptionValueListContinuedContext {
		let _localctx: OptionValueListContinuedContext = new OptionValueListContinuedContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, MultiQueryMySQLParser.RULE_optionValueListContinued);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4824;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4820;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 4821;
					this.optionValue();
					}
					}
				}
				this.state = 4826;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
		let _localctx: OptionValueNoOptionTypeContext = new OptionValueNoOptionTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, MultiQueryMySQLParser.RULE_optionValueNoOptionType);
		try {
			this.state = 4852;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 588, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4827;
				this.internalVariableName();
				this.state = 4828;
				this.equal();
				this.state = 4829;
				this.setExprOrDefault();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4831;
				this.charsetClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4832;
				this.userVariable();
				this.state = 4833;
				this.equal();
				this.state = 4834;
				this.expr(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4836;
				this.setSystemVariable();
				this.state = 4837;
				this.equal();
				this.state = 4838;
				this.setExprOrDefault();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4840;
				this.match(MultiQueryMySQLParser.NAMES_SYMBOL);
				this.state = 4850;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 587, this._ctx) ) {
				case 1:
					{
					this.state = 4841;
					this.equal();
					this.state = 4842;
					this.expr(0);
					}
					break;

				case 2:
					{
					this.state = 4844;
					this.charsetName();
					this.state = 4846;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 586, this._ctx) ) {
					case 1:
						{
						this.state = 4845;
						this.collate();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 4848;
					if (!(this.serverVersion >= 80011)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80011");
					}
					this.state = 4849;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optionValue(): OptionValueContext {
		let _localctx: OptionValueContext = new OptionValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, MultiQueryMySQLParser.RULE_optionValue);
		try {
			this.state = 4860;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 589, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4854;
				this.optionType();
				this.state = 4855;
				this.internalVariableName();
				this.state = 4856;
				this.equal();
				this.state = 4857;
				this.setExprOrDefault();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4859;
				this.optionValueNoOptionType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setSystemVariable(): SetSystemVariableContext {
		let _localctx: SetSystemVariableContext = new SetSystemVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, MultiQueryMySQLParser.RULE_setSystemVariable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4862;
			this.match(MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL);
			this.state = 4864;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 590, this._ctx) ) {
			case 1:
				{
				this.state = 4863;
				this.setVarIdentType();
				}
				break;
			}
			this.state = 4866;
			this.internalVariableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
		let _localctx: StartOptionValueListFollowingOptionTypeContext = new StartOptionValueListFollowingOptionTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, MultiQueryMySQLParser.RULE_startOptionValueListFollowingOptionType);
		try {
			this.state = 4873;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 591, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4868;
				this.optionValueFollowingOptionType();
				this.state = 4869;
				this.optionValueListContinued();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4871;
				this.match(MultiQueryMySQLParser.TRANSACTION_SYMBOL);
				this.state = 4872;
				this.transactionCharacteristics();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
		let _localctx: OptionValueFollowingOptionTypeContext = new OptionValueFollowingOptionTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, MultiQueryMySQLParser.RULE_optionValueFollowingOptionType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4875;
			this.internalVariableName();
			this.state = 4876;
			this.equal();
			this.state = 4877;
			this.setExprOrDefault();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setExprOrDefault(): SetExprOrDefaultContext {
		let _localctx: SetExprOrDefaultContext = new SetExprOrDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, MultiQueryMySQLParser.RULE_setExprOrDefault);
		let _la: number;
		try {
			this.state = 4883;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 592, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4879;
				this.expr(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4880;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ALL_SYMBOL || _la === MultiQueryMySQLParser.BINARY_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL || _la === MultiQueryMySQLParser.ON_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4881;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 4882;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ROW_SYMBOL || _la === MultiQueryMySQLParser.SYSTEM_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let _localctx: ShowStatementContext = new ShowStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, MultiQueryMySQLParser.RULE_showStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4885;
			this.match(MultiQueryMySQLParser.SHOW_SYMBOL);
			this.state = 5105;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 636, this._ctx) ) {
			case 1:
				{
				this.state = 4886;
				if (!(this.serverVersion < 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50700");
				}
				this.state = 4887;
				_localctx._value = this.match(MultiQueryMySQLParser.AUTHORS_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 4888;
				_localctx._value = this.match(MultiQueryMySQLParser.DATABASES_SYMBOL);
				this.state = 4890;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 593, this._ctx) ) {
				case 1:
					{
					this.state = 4889;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 4893;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
				case 1:
					{
					this.state = 4892;
					this.showCommandType();
					}
					break;
				}
				this.state = 4895;
				_localctx._value = this.match(MultiQueryMySQLParser.TABLES_SYMBOL);
				this.state = 4897;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 595, this._ctx) ) {
				case 1:
					{
					this.state = 4896;
					this.inDb();
					}
					break;
				}
				this.state = 4900;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
				case 1:
					{
					this.state = 4899;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 4:
				{
				this.state = 4903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FULL_SYMBOL) {
					{
					this.state = 4902;
					this.match(MultiQueryMySQLParser.FULL_SYMBOL);
					}
				}

				this.state = 4905;
				_localctx._value = this.match(MultiQueryMySQLParser.TRIGGERS_SYMBOL);
				this.state = 4907;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 598, this._ctx) ) {
				case 1:
					{
					this.state = 4906;
					this.inDb();
					}
					break;
				}
				this.state = 4910;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 599, this._ctx) ) {
				case 1:
					{
					this.state = 4909;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 4912;
				_localctx._value = this.match(MultiQueryMySQLParser.EVENTS_SYMBOL);
				this.state = 4914;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 600, this._ctx) ) {
				case 1:
					{
					this.state = 4913;
					this.inDb();
					}
					break;
				}
				this.state = 4917;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 601, this._ctx) ) {
				case 1:
					{
					this.state = 4916;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 6:
				{
				this.state = 4919;
				_localctx._value = this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
				this.state = 4920;
				this.match(MultiQueryMySQLParser.STATUS_SYMBOL);
				this.state = 4922;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 602, this._ctx) ) {
				case 1:
					{
					this.state = 4921;
					this.inDb();
					}
					break;
				}
				this.state = 4925;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 603, this._ctx) ) {
				case 1:
					{
					this.state = 4924;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 7:
				{
				this.state = 4927;
				_localctx._value = this.match(MultiQueryMySQLParser.OPEN_SYMBOL);
				this.state = 4928;
				this.match(MultiQueryMySQLParser.TABLES_SYMBOL);
				this.state = 4930;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 604, this._ctx) ) {
				case 1:
					{
					this.state = 4929;
					this.inDb();
					}
					break;
				}
				this.state = 4933;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 605, this._ctx) ) {
				case 1:
					{
					this.state = 4932;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 8:
				{
				this.state = 4935;
				_localctx._value = this.match(MultiQueryMySQLParser.PLUGINS_SYMBOL);
				}
				break;

			case 9:
				{
				this.state = 4936;
				_localctx._value = this.match(MultiQueryMySQLParser.ENGINE_SYMBOL);
				this.state = 4939;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 606, this._ctx) ) {
				case 1:
					{
					this.state = 4937;
					this.engineRef();
					}
					break;

				case 2:
					{
					this.state = 4938;
					this.match(MultiQueryMySQLParser.ALL_SYMBOL);
					}
					break;
				}
				this.state = 4941;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.LOGS_SYMBOL || _la === MultiQueryMySQLParser.MUTEX_SYMBOL || _la === MultiQueryMySQLParser.STATUS_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 10:
				{
				this.state = 4943;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 607, this._ctx) ) {
				case 1:
					{
					this.state = 4942;
					this.showCommandType();
					}
					break;
				}
				this.state = 4945;
				_localctx._value = this.match(MultiQueryMySQLParser.COLUMNS_SYMBOL);
				this.state = 4946;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.FROM_SYMBOL || _la === MultiQueryMySQLParser.IN_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4947;
				this.tableRef();
				this.state = 4949;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 608, this._ctx) ) {
				case 1:
					{
					this.state = 4948;
					this.inDb();
					}
					break;
				}
				this.state = 4952;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 609, this._ctx) ) {
				case 1:
					{
					this.state = 4951;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 11:
				{
				this.state = 4954;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.MASTER_SYMBOL || _la === MultiQueryMySQLParser.BINARY_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4955;
				_localctx._value = this.match(MultiQueryMySQLParser.LOGS_SYMBOL);
				}
				break;

			case 12:
				{
				this.state = 4956;
				_localctx._value = this.match(MultiQueryMySQLParser.SLAVE_SYMBOL);
				this.state = 4963;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.HOSTS_SYMBOL:
					{
					this.state = 4957;
					this.match(MultiQueryMySQLParser.HOSTS_SYMBOL);
					}
					break;
				case MultiQueryMySQLParser.STATUS_SYMBOL:
					{
					this.state = 4958;
					this.match(MultiQueryMySQLParser.STATUS_SYMBOL);
					this.state = 4959;
					this.nonBlocking();
					this.state = 4961;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 610, this._ctx) ) {
					case 1:
						{
						this.state = 4960;
						this.channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 13:
				{
				this.state = 4965;
				_localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.BINLOG_SYMBOL || _la === MultiQueryMySQLParser.RELAYLOG_SYMBOL)) {
					_localctx._value = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4966;
				this.match(MultiQueryMySQLParser.EVENTS_SYMBOL);
				this.state = 4969;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 612, this._ctx) ) {
				case 1:
					{
					this.state = 4967;
					this.match(MultiQueryMySQLParser.IN_SYMBOL);
					this.state = 4968;
					this.textString();
					}
					break;
				}
				this.state = 4973;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
				case 1:
					{
					this.state = 4971;
					this.match(MultiQueryMySQLParser.FROM_SYMBOL);
					this.state = 4972;
					this.ulonglong_number();
					}
					break;
				}
				this.state = 4976;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 614, this._ctx) ) {
				case 1:
					{
					this.state = 4975;
					this.limitClause();
					}
					break;
				}
				this.state = 4979;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 615, this._ctx) ) {
				case 1:
					{
					this.state = 4978;
					this.channel();
					}
					break;
				}
				}
				break;

			case 14:
				{
				this.state = 4983;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 616, this._ctx) ) {
				case 1:
					{
					this.state = 4981;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 4982;
					this.match(MultiQueryMySQLParser.EXTENDED_SYMBOL);
					}
					break;
				}
				this.state = 4985;
				_localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.INDEXES_SYMBOL || _la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.KEYS_SYMBOL)) {
					_localctx._value = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4986;
				this.fromOrIn();
				this.state = 4987;
				this.tableRef();
				this.state = 4989;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 617, this._ctx) ) {
				case 1:
					{
					this.state = 4988;
					this.inDb();
					}
					break;
				}
				this.state = 4992;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 618, this._ctx) ) {
				case 1:
					{
					this.state = 4991;
					this.whereClause();
					}
					break;
				}
				}
				break;

			case 15:
				{
				this.state = 4995;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.STORAGE_SYMBOL) {
					{
					this.state = 4994;
					this.match(MultiQueryMySQLParser.STORAGE_SYMBOL);
					}
				}

				this.state = 4997;
				_localctx._value = this.match(MultiQueryMySQLParser.ENGINES_SYMBOL);
				}
				break;

			case 16:
				{
				this.state = 4998;
				this.match(MultiQueryMySQLParser.COUNT_SYMBOL);
				this.state = 4999;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5000;
				this.match(MultiQueryMySQLParser.MULT_OPERATOR);
				this.state = 5001;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5002;
				_localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ERRORS_SYMBOL || _la === MultiQueryMySQLParser.WARNINGS_SYMBOL)) {
					_localctx._value = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 17:
				{
				this.state = 5003;
				_localctx._value = this.match(MultiQueryMySQLParser.WARNINGS_SYMBOL);
				this.state = 5005;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 620, this._ctx) ) {
				case 1:
					{
					this.state = 5004;
					this.limitClause();
					}
					break;
				}
				}
				break;

			case 18:
				{
				this.state = 5007;
				_localctx._value = this.match(MultiQueryMySQLParser.ERRORS_SYMBOL);
				this.state = 5009;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 621, this._ctx) ) {
				case 1:
					{
					this.state = 5008;
					this.limitClause();
					}
					break;
				}
				}
				break;

			case 19:
				{
				this.state = 5011;
				_localctx._value = this.match(MultiQueryMySQLParser.PROFILES_SYMBOL);
				}
				break;

			case 20:
				{
				this.state = 5012;
				_localctx._value = this.match(MultiQueryMySQLParser.PROFILE_SYMBOL);
				this.state = 5021;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
				case 1:
					{
					this.state = 5013;
					this.profileType();
					this.state = 5018;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5014;
							this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
							this.state = 5015;
							this.profileType();
							}
							}
						}
						this.state = 5020;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
					}
					}
					break;
				}
				this.state = 5026;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 624, this._ctx) ) {
				case 1:
					{
					this.state = 5023;
					this.match(MultiQueryMySQLParser.FOR_SYMBOL);
					this.state = 5024;
					this.match(MultiQueryMySQLParser.QUERY_SYMBOL);
					this.state = 5025;
					this.match(MultiQueryMySQLParser.INT_NUMBER);
					}
					break;
				}
				this.state = 5029;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 625, this._ctx) ) {
				case 1:
					{
					this.state = 5028;
					this.limitClause();
					}
					break;
				}
				}
				break;

			case 21:
				{
				this.state = 5032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.GLOBAL_SYMBOL || _la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.SESSION_SYMBOL || _la === MultiQueryMySQLParser.PERSIST_SYMBOL || _la === MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL) {
					{
					this.state = 5031;
					this.optionType();
					}
				}

				this.state = 5034;
				_localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.STATUS_SYMBOL || _la === MultiQueryMySQLParser.VARIABLES_SYMBOL)) {
					_localctx._value = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5036;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 627, this._ctx) ) {
				case 1:
					{
					this.state = 5035;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 22:
				{
				this.state = 5039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FULL_SYMBOL) {
					{
					this.state = 5038;
					this.match(MultiQueryMySQLParser.FULL_SYMBOL);
					}
				}

				this.state = 5041;
				_localctx._value = this.match(MultiQueryMySQLParser.PROCESSLIST_SYMBOL);
				}
				break;

			case 23:
				{
				this.state = 5042;
				this.charset();
				this.state = 5044;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 629, this._ctx) ) {
				case 1:
					{
					this.state = 5043;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 24:
				{
				this.state = 5046;
				_localctx._value = this.match(MultiQueryMySQLParser.COLLATION_SYMBOL);
				this.state = 5048;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 630, this._ctx) ) {
				case 1:
					{
					this.state = 5047;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 25:
				{
				this.state = 5050;
				if (!(this.serverVersion < 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50700");
				}
				this.state = 5051;
				_localctx._value = this.match(MultiQueryMySQLParser.CONTRIBUTORS_SYMBOL);
				}
				break;

			case 26:
				{
				this.state = 5052;
				_localctx._value = this.match(MultiQueryMySQLParser.PRIVILEGES_SYMBOL);
				}
				break;

			case 27:
				{
				this.state = 5053;
				_localctx._value = this.match(MultiQueryMySQLParser.GRANTS_SYMBOL);
				this.state = 5056;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 631, this._ctx) ) {
				case 1:
					{
					this.state = 5054;
					this.match(MultiQueryMySQLParser.FOR_SYMBOL);
					this.state = 5055;
					this.user();
					}
					break;
				}
				}
				break;

			case 28:
				{
				this.state = 5058;
				_localctx._value = this.match(MultiQueryMySQLParser.GRANTS_SYMBOL);
				this.state = 5059;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 5060;
				this.user();
				this.state = 5061;
				this.match(MultiQueryMySQLParser.USING_SYMBOL);
				this.state = 5062;
				this.userList();
				}
				break;

			case 29:
				{
				this.state = 5064;
				_localctx._value = this.match(MultiQueryMySQLParser.MASTER_SYMBOL);
				this.state = 5065;
				this.match(MultiQueryMySQLParser.STATUS_SYMBOL);
				}
				break;

			case 30:
				{
				this.state = 5066;
				_localctx._value = this.match(MultiQueryMySQLParser.CREATE_SYMBOL);
				this.state = 5087;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 633, this._ctx) ) {
				case 1:
					{
					this.state = 5067;
					_localctx._object = this.match(MultiQueryMySQLParser.DATABASE_SYMBOL);
					this.state = 5069;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 632, this._ctx) ) {
					case 1:
						{
						this.state = 5068;
						this.ifNotExists();
						}
						break;
					}
					this.state = 5071;
					this.schemaRef();
					}
					break;

				case 2:
					{
					this.state = 5072;
					_localctx._object = this.match(MultiQueryMySQLParser.EVENT_SYMBOL);
					this.state = 5073;
					this.eventRef();
					}
					break;

				case 3:
					{
					this.state = 5074;
					_localctx._object = this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
					this.state = 5075;
					this.functionRef();
					}
					break;

				case 4:
					{
					this.state = 5076;
					_localctx._object = this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
					this.state = 5077;
					this.procedureRef();
					}
					break;

				case 5:
					{
					this.state = 5078;
					_localctx._object = this.match(MultiQueryMySQLParser.TABLE_SYMBOL);
					this.state = 5079;
					this.tableRef();
					}
					break;

				case 6:
					{
					this.state = 5080;
					_localctx._object = this.match(MultiQueryMySQLParser.TRIGGER_SYMBOL);
					this.state = 5081;
					this.triggerRef();
					}
					break;

				case 7:
					{
					this.state = 5082;
					_localctx._object = this.match(MultiQueryMySQLParser.VIEW_SYMBOL);
					this.state = 5083;
					this.viewRef();
					}
					break;

				case 8:
					{
					this.state = 5084;
					if (!(this.serverVersion >= 50704)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 50704");
					}
					this.state = 5085;
					_localctx._object = this.match(MultiQueryMySQLParser.USER_SYMBOL);
					this.state = 5086;
					this.user();
					}
					break;
				}
				}
				break;

			case 31:
				{
				this.state = 5089;
				_localctx._value = this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
				this.state = 5090;
				this.match(MultiQueryMySQLParser.STATUS_SYMBOL);
				this.state = 5092;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 634, this._ctx) ) {
				case 1:
					{
					this.state = 5091;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 32:
				{
				this.state = 5094;
				_localctx._value = this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
				this.state = 5095;
				this.match(MultiQueryMySQLParser.STATUS_SYMBOL);
				this.state = 5097;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 635, this._ctx) ) {
				case 1:
					{
					this.state = 5096;
					this.likeOrWhere();
					}
					break;
				}
				}
				break;

			case 33:
				{
				this.state = 5099;
				_localctx._value = this.match(MultiQueryMySQLParser.PROCEDURE_SYMBOL);
				this.state = 5100;
				this.match(MultiQueryMySQLParser.CODE_SYMBOL);
				this.state = 5101;
				this.procedureRef();
				}
				break;

			case 34:
				{
				this.state = 5102;
				_localctx._value = this.match(MultiQueryMySQLParser.FUNCTION_SYMBOL);
				this.state = 5103;
				this.match(MultiQueryMySQLParser.CODE_SYMBOL);
				this.state = 5104;
				this.functionRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCommandType(): ShowCommandTypeContext {
		let _localctx: ShowCommandTypeContext = new ShowCommandTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, MultiQueryMySQLParser.RULE_showCommandType);
		let _la: number;
		try {
			this.state = 5113;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 638, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5107;
				this.match(MultiQueryMySQLParser.FULL_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5108;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 5109;
				this.match(MultiQueryMySQLParser.EXTENDED_SYMBOL);
				this.state = 5111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FULL_SYMBOL) {
					{
					this.state = 5110;
					this.match(MultiQueryMySQLParser.FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonBlocking(): NonBlockingContext {
		let _localctx: NonBlockingContext = new NonBlockingContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, MultiQueryMySQLParser.RULE_nonBlocking);
		try {
			this.state = 5120;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 640, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5115;
				if (!(this.serverVersion >= 50700 && this.serverVersion < 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50700 && this.serverVersion < 50706");
				}
				this.state = 5117;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 639, this._ctx) ) {
				case 1:
					{
					this.state = 5116;
					this.match(MultiQueryMySQLParser.NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromOrIn(): FromOrInContext {
		let _localctx: FromOrInContext = new FromOrInContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, MultiQueryMySQLParser.RULE_fromOrIn);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5122;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.FROM_SYMBOL || _la === MultiQueryMySQLParser.IN_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inDb(): InDbContext {
		let _localctx: InDbContext = new InDbContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, MultiQueryMySQLParser.RULE_inDb);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5124;
			this.fromOrIn();
			this.state = 5125;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public profileType(): ProfileTypeContext {
		let _localctx: ProfileTypeContext = new ProfileTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, MultiQueryMySQLParser.RULE_profileType);
		let _la: number;
		try {
			this.state = 5134;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.BLOCK_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5127;
				this.match(MultiQueryMySQLParser.BLOCK_SYMBOL);
				this.state = 5128;
				this.match(MultiQueryMySQLParser.IO_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.CONTEXT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5129;
				this.match(MultiQueryMySQLParser.CONTEXT_SYMBOL);
				this.state = 5130;
				this.match(MultiQueryMySQLParser.SWITCHES_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.PAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5131;
				this.match(MultiQueryMySQLParser.PAGE_SYMBOL);
				this.state = 5132;
				this.match(MultiQueryMySQLParser.FAULTS_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.CPU_SYMBOL:
			case MultiQueryMySQLParser.IPC_SYMBOL:
			case MultiQueryMySQLParser.MEMORY_SYMBOL:
			case MultiQueryMySQLParser.SOURCE_SYMBOL:
			case MultiQueryMySQLParser.SWAPS_SYMBOL:
			case MultiQueryMySQLParser.ALL_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5133;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CPU_SYMBOL || _la === MultiQueryMySQLParser.IPC_SYMBOL || _la === MultiQueryMySQLParser.MEMORY_SYMBOL || _la === MultiQueryMySQLParser.SOURCE_SYMBOL || _la === MultiQueryMySQLParser.SWAPS_SYMBOL || _la === MultiQueryMySQLParser.ALL_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
		let _localctx: OtherAdministrativeStatementContext = new OtherAdministrativeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, MultiQueryMySQLParser.RULE_otherAdministrativeStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5173;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 647, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5136;
				_localctx._type = this.match(MultiQueryMySQLParser.BINLOG_SYMBOL);
				this.state = 5137;
				this.textLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5138;
				_localctx._type = this.match(MultiQueryMySQLParser.CACHE_SYMBOL);
				this.state = 5139;
				this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 5140;
				this.keyCacheListOrParts();
				this.state = 5141;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 5144;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 642, this._ctx) ) {
				case 1:
					{
					this.state = 5142;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 5143;
					this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5146;
				_localctx._type = this.match(MultiQueryMySQLParser.FLUSH_SYMBOL);
				this.state = 5148;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 643, this._ctx) ) {
				case 1:
					{
					this.state = 5147;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 5159;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 645, this._ctx) ) {
				case 1:
					{
					this.state = 5150;
					this.flushTables();
					}
					break;

				case 2:
					{
					this.state = 5151;
					this.flushOption();
					this.state = 5156;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5152;
							this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
							this.state = 5153;
							this.flushOption();
							}
							}
						}
						this.state = 5158;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
					}
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5161;
				_localctx._type = this.match(MultiQueryMySQLParser.KILL_SYMBOL);
				this.state = 5163;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 646, this._ctx) ) {
				case 1:
					{
					this.state = 5162;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.CONNECTION_SYMBOL || _la === MultiQueryMySQLParser.QUERY_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5165;
				this.expr(0);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5166;
				_localctx._type = this.match(MultiQueryMySQLParser.LOAD_SYMBOL);
				this.state = 5167;
				this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 5168;
				this.match(MultiQueryMySQLParser.INTO_SYMBOL);
				this.state = 5169;
				this.match(MultiQueryMySQLParser.CACHE_SYMBOL);
				this.state = 5170;
				this.preloadTail();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5171;
				if (!(this.serverVersion >= 50709)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50709");
				}
				this.state = 5172;
				_localctx._type = this.match(MultiQueryMySQLParser.SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyCacheListOrParts(): KeyCacheListOrPartsContext {
		let _localctx: KeyCacheListOrPartsContext = new KeyCacheListOrPartsContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, MultiQueryMySQLParser.RULE_keyCacheListOrParts);
		try {
			this.state = 5177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 648, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5175;
				this.keyCacheList();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5176;
				this.assignToKeycachePartition();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyCacheList(): KeyCacheListContext {
		let _localctx: KeyCacheListContext = new KeyCacheListContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, MultiQueryMySQLParser.RULE_keyCacheList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5179;
			this.assignToKeycache();
			this.state = 5184;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 5180;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5181;
				this.assignToKeycache();
				}
				}
				this.state = 5186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignToKeycache(): AssignToKeycacheContext {
		let _localctx: AssignToKeycacheContext = new AssignToKeycacheContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, MultiQueryMySQLParser.RULE_assignToKeycache);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5187;
			this.tableRef();
			this.state = 5189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.KEY_SYMBOL) {
				{
				this.state = 5188;
				this.cacheKeyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignToKeycachePartition(): AssignToKeycachePartitionContext {
		let _localctx: AssignToKeycachePartitionContext = new AssignToKeycachePartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, MultiQueryMySQLParser.RULE_assignToKeycachePartition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5191;
			this.tableRef();
			this.state = 5192;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 5193;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5194;
			this.allOrPartitionNameList();
			this.state = 5195;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 5197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.KEY_SYMBOL) {
				{
				this.state = 5196;
				this.cacheKeyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cacheKeyList(): CacheKeyListContext {
		let _localctx: CacheKeyListContext = new CacheKeyListContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, MultiQueryMySQLParser.RULE_cacheKeyList);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5199;
			this.keyOrIndex();
			this.state = 5200;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5202;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 652, this._ctx) ) {
			case 1:
				{
				this.state = 5201;
				this.keyUsageList();
				}
				break;
			}
			this.state = 5204;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyUsageElement(): KeyUsageElementContext {
		let _localctx: KeyUsageElementContext = new KeyUsageElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, MultiQueryMySQLParser.RULE_keyUsageElement);
		try {
			this.state = 5208;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 653, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5206;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5207;
				this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyUsageList(): KeyUsageListContext {
		let _localctx: KeyUsageListContext = new KeyUsageListContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, MultiQueryMySQLParser.RULE_keyUsageList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5210;
			this.keyUsageElement();
			this.state = 5215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 5211;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5212;
				this.keyUsageElement();
				}
				}
				this.state = 5217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushOption(): FlushOptionContext {
		let _localctx: FlushOptionContext = new FlushOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, MultiQueryMySQLParser.RULE_flushOption);
		let _la: number;
		try {
			this.state = 5233;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 657, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5218;
				_localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DES_KEY_FILE_SYMBOL || _la === MultiQueryMySQLParser.HOSTS_SYMBOL || _la === MultiQueryMySQLParser.PRIVILEGES_SYMBOL || _la === MultiQueryMySQLParser.STATUS_SYMBOL || _la === MultiQueryMySQLParser.USER_RESOURCES_SYMBOL)) {
					_localctx._option = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5220;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (MultiQueryMySQLParser.ENGINE_SYMBOL - 128)) | (1 << (MultiQueryMySQLParser.ERROR_SYMBOL - 128)) | (1 << (MultiQueryMySQLParser.GENERAL_SYMBOL - 128)))) !== 0) || _la === MultiQueryMySQLParser.SLOW_SYMBOL || _la === MultiQueryMySQLParser.BINARY_SYMBOL) {
					{
					this.state = 5219;
					this.logType();
					}
				}

				this.state = 5222;
				_localctx._option = this.match(MultiQueryMySQLParser.LOGS_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5223;
				_localctx._option = this.match(MultiQueryMySQLParser.RELAY_SYMBOL);
				this.state = 5224;
				this.match(MultiQueryMySQLParser.LOGS_SYMBOL);
				this.state = 5226;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 656, this._ctx) ) {
				case 1:
					{
					this.state = 5225;
					this.channel();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5228;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 5229;
				_localctx._option = this.match(MultiQueryMySQLParser.QUERY_SYMBOL);
				this.state = 5230;
				this.match(MultiQueryMySQLParser.CACHE_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5231;
				if (!(this.serverVersion >= 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50706");
				}
				this.state = 5232;
				_localctx._option = this.match(MultiQueryMySQLParser.OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logType(): LogTypeContext {
		let _localctx: LogTypeContext = new LogTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, MultiQueryMySQLParser.RULE_logType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5235;
			_la = this._input.LA(1);
			if (!(((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (MultiQueryMySQLParser.ENGINE_SYMBOL - 128)) | (1 << (MultiQueryMySQLParser.ERROR_SYMBOL - 128)) | (1 << (MultiQueryMySQLParser.GENERAL_SYMBOL - 128)))) !== 0) || _la === MultiQueryMySQLParser.SLOW_SYMBOL || _la === MultiQueryMySQLParser.BINARY_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushTables(): FlushTablesContext {
		let _localctx: FlushTablesContext = new FlushTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, MultiQueryMySQLParser.RULE_flushTables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5237;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.TABLES_SYMBOL || _la === MultiQueryMySQLParser.TABLE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5245;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 659, this._ctx) ) {
			case 1:
				{
				this.state = 5238;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 5239;
				this.match(MultiQueryMySQLParser.READ_SYMBOL);
				this.state = 5240;
				this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 5241;
				this.identifierList();
				this.state = 5243;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 658, this._ctx) ) {
				case 1:
					{
					this.state = 5242;
					this.flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushTablesOptions(): FlushTablesOptionsContext {
		let _localctx: FlushTablesOptionsContext = new FlushTablesOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, MultiQueryMySQLParser.RULE_flushTablesOptions);
		try {
			this.state = 5253;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 660, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5247;
				if (!(this.serverVersion >= 50606)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50606");
				}
				this.state = 5248;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 5249;
				this.match(MultiQueryMySQLParser.EXPORT_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5250;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 5251;
				this.match(MultiQueryMySQLParser.READ_SYMBOL);
				this.state = 5252;
				this.match(MultiQueryMySQLParser.LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preloadTail(): PreloadTailContext {
		let _localctx: PreloadTailContext = new PreloadTailContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, MultiQueryMySQLParser.RULE_preloadTail);
		try {
			this.state = 5265;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5255;
				this.tableRef();
				this.state = 5256;
				this.adminPartition();
				this.state = 5258;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
				case 1:
					{
					this.state = 5257;
					this.cacheKeyList();
					}
					break;
				}
				this.state = 5262;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 662, this._ctx) ) {
				case 1:
					{
					this.state = 5260;
					this.match(MultiQueryMySQLParser.IGNORE_SYMBOL);
					this.state = 5261;
					this.match(MultiQueryMySQLParser.LEAVES_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5264;
				this.preloadList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preloadList(): PreloadListContext {
		let _localctx: PreloadListContext = new PreloadListContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, MultiQueryMySQLParser.RULE_preloadList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5267;
			this.preloadKeys();
			this.state = 5272;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 664, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5268;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 5269;
					this.preloadKeys();
					}
					}
				}
				this.state = 5274;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 664, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preloadKeys(): PreloadKeysContext {
		let _localctx: PreloadKeysContext = new PreloadKeysContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, MultiQueryMySQLParser.RULE_preloadKeys);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5275;
			this.tableRef();
			this.state = 5277;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
			case 1:
				{
				this.state = 5276;
				this.cacheKeyList();
				}
				break;
			}
			this.state = 5281;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				{
				this.state = 5279;
				this.match(MultiQueryMySQLParser.IGNORE_SYMBOL);
				this.state = 5280;
				this.match(MultiQueryMySQLParser.LEAVES_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminPartition(): AdminPartitionContext {
		let _localctx: AdminPartitionContext = new AdminPartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, MultiQueryMySQLParser.RULE_adminPartition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5283;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 5284;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5285;
			this.allOrPartitionNameList();
			this.state = 5286;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceGroupManagement(): ResourceGroupManagementContext {
		let _localctx: ResourceGroupManagementContext = new ResourceGroupManagementContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, MultiQueryMySQLParser.RULE_resourceGroupManagement);
		try {
			this.state = 5292;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CREATE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5288;
				this.createResourceGroup();
				}
				break;
			case MultiQueryMySQLParser.ALTER_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5289;
				this.alterResourceGroup();
				}
				break;
			case MultiQueryMySQLParser.SET_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5290;
				this.setResourceGroup();
				}
				break;
			case MultiQueryMySQLParser.DROP_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5291;
				this.dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createResourceGroup(): CreateResourceGroupContext {
		let _localctx: CreateResourceGroupContext = new CreateResourceGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, MultiQueryMySQLParser.RULE_createResourceGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5294;
			this.match(MultiQueryMySQLParser.CREATE_SYMBOL);
			this.state = 5295;
			this.match(MultiQueryMySQLParser.RESOURCE_SYMBOL);
			this.state = 5296;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 5297;
			this.identifier();
			this.state = 5298;
			this.match(MultiQueryMySQLParser.TYPE_SYMBOL);
			this.state = 5300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR || _la === MultiQueryMySQLParser.ASSIGN_OPERATOR) {
				{
				this.state = 5299;
				this.equal();
				}
			}

			this.state = 5302;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.USER_SYMBOL || _la === MultiQueryMySQLParser.SYSTEM_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5304;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 669, this._ctx) ) {
			case 1:
				{
				this.state = 5303;
				this.resourceGroupVcpuList();
				}
				break;
			}
			this.state = 5307;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 670, this._ctx) ) {
			case 1:
				{
				this.state = 5306;
				this.resourceGroupPriority();
				}
				break;
			}
			this.state = 5310;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 671, this._ctx) ) {
			case 1:
				{
				this.state = 5309;
				this.resourceGroupEnableDisable();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
		let _localctx: ResourceGroupVcpuListContext = new ResourceGroupVcpuListContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, MultiQueryMySQLParser.RULE_resourceGroupVcpuList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5312;
			this.match(MultiQueryMySQLParser.VCPU_SYMBOL);
			this.state = 5314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR || _la === MultiQueryMySQLParser.ASSIGN_OPERATOR) {
				{
				this.state = 5313;
				this.equal();
				}
			}

			this.state = 5316;
			this.vcpuNumOrRange();
			this.state = 5323;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 674, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5318;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
						{
						this.state = 5317;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 5320;
					this.vcpuNumOrRange();
					}
					}
				}
				this.state = 5325;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 674, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vcpuNumOrRange(): VcpuNumOrRangeContext {
		let _localctx: VcpuNumOrRangeContext = new VcpuNumOrRangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, MultiQueryMySQLParser.RULE_vcpuNumOrRange);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5326;
			this.match(MultiQueryMySQLParser.INT_NUMBER);
			this.state = 5329;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 675, this._ctx) ) {
			case 1:
				{
				this.state = 5327;
				this.match(MultiQueryMySQLParser.MINUS_OPERATOR);
				this.state = 5328;
				this.match(MultiQueryMySQLParser.INT_NUMBER);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceGroupPriority(): ResourceGroupPriorityContext {
		let _localctx: ResourceGroupPriorityContext = new ResourceGroupPriorityContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, MultiQueryMySQLParser.RULE_resourceGroupPriority);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5331;
			this.match(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL);
			this.state = 5333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR || _la === MultiQueryMySQLParser.ASSIGN_OPERATOR) {
				{
				this.state = 5332;
				this.equal();
				}
			}

			this.state = 5335;
			this.match(MultiQueryMySQLParser.INT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
		let _localctx: ResourceGroupEnableDisableContext = new ResourceGroupEnableDisableContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, MultiQueryMySQLParser.RULE_resourceGroupEnableDisable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5337;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DISABLE_SYMBOL || _la === MultiQueryMySQLParser.ENABLE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterResourceGroup(): AlterResourceGroupContext {
		let _localctx: AlterResourceGroupContext = new AlterResourceGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, MultiQueryMySQLParser.RULE_alterResourceGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5339;
			this.match(MultiQueryMySQLParser.ALTER_SYMBOL);
			this.state = 5340;
			this.match(MultiQueryMySQLParser.RESOURCE_SYMBOL);
			this.state = 5341;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 5342;
			this.resourceGroupRef();
			this.state = 5344;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 677, this._ctx) ) {
			case 1:
				{
				this.state = 5343;
				this.resourceGroupVcpuList();
				}
				break;
			}
			this.state = 5347;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 678, this._ctx) ) {
			case 1:
				{
				this.state = 5346;
				this.resourceGroupPriority();
				}
				break;
			}
			this.state = 5350;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 679, this._ctx) ) {
			case 1:
				{
				this.state = 5349;
				this.resourceGroupEnableDisable();
				}
				break;
			}
			this.state = 5353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 680, this._ctx) ) {
			case 1:
				{
				this.state = 5352;
				this.match(MultiQueryMySQLParser.FORCE_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setResourceGroup(): SetResourceGroupContext {
		let _localctx: SetResourceGroupContext = new SetResourceGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, MultiQueryMySQLParser.RULE_setResourceGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5355;
			this.match(MultiQueryMySQLParser.SET_SYMBOL);
			this.state = 5356;
			this.match(MultiQueryMySQLParser.RESOURCE_SYMBOL);
			this.state = 5357;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 5358;
			this.identifier();
			this.state = 5361;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 681, this._ctx) ) {
			case 1:
				{
				this.state = 5359;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 5360;
				this.threadIdList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public threadIdList(): ThreadIdListContext {
		let _localctx: ThreadIdListContext = new ThreadIdListContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, MultiQueryMySQLParser.RULE_threadIdList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5363;
			this.real_ulong_number();
			this.state = 5370;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 683, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5365;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
						{
						this.state = 5364;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 5367;
					this.real_ulong_number();
					}
					}
				}
				this.state = 5372;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 683, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropResourceGroup(): DropResourceGroupContext {
		let _localctx: DropResourceGroupContext = new DropResourceGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, MultiQueryMySQLParser.RULE_dropResourceGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5373;
			this.match(MultiQueryMySQLParser.DROP_SYMBOL);
			this.state = 5374;
			this.match(MultiQueryMySQLParser.RESOURCE_SYMBOL);
			this.state = 5375;
			this.match(MultiQueryMySQLParser.GROUP_SYMBOL);
			this.state = 5376;
			this.resourceGroupRef();
			this.state = 5378;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 684, this._ctx) ) {
			case 1:
				{
				this.state = 5377;
				this.match(MultiQueryMySQLParser.FORCE_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public utilityStatement(): UtilityStatementContext {
		let _localctx: UtilityStatementContext = new UtilityStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, MultiQueryMySQLParser.RULE_utilityStatement);
		try {
			this.state = 5386;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 685, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5380;
				this.describeCommand();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5381;
				this.explainCommand();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5382;
				this.helpCommand();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5383;
				this.useCommand();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5384;
				if (!(this.serverVersion >= 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80011");
				}
				this.state = 5385;
				this.restartServer();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public describeCommand(): DescribeCommandContext {
		let _localctx: DescribeCommandContext = new DescribeCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, MultiQueryMySQLParser.RULE_describeCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5388;
			_la = this._input.LA(1);
			if (!(((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (MultiQueryMySQLParser.DESC_SYMBOL - 481)) | (1 << (MultiQueryMySQLParser.DESCRIBE_SYMBOL - 481)) | (1 << (MultiQueryMySQLParser.EXPLAIN_SYMBOL - 481)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5389;
			this.tableRef();
			this.state = 5392;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 686, this._ctx) ) {
			case 1:
				{
				this.state = 5390;
				this.textString();
				}
				break;

			case 2:
				{
				this.state = 5391;
				this.columnRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainCommand(): ExplainCommandContext {
		let _localctx: ExplainCommandContext = new ExplainCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, MultiQueryMySQLParser.RULE_explainCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5394;
			_la = this._input.LA(1);
			if (!(((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (MultiQueryMySQLParser.DESC_SYMBOL - 481)) | (1 << (MultiQueryMySQLParser.DESCRIBE_SYMBOL - 481)) | (1 << (MultiQueryMySQLParser.EXPLAIN_SYMBOL - 481)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5405;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 687, this._ctx) ) {
			case 1:
				{
				this.state = 5395;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 5396;
				this.match(MultiQueryMySQLParser.EXTENDED_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 5397;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 5398;
				this.match(MultiQueryMySQLParser.PARTITIONS_SYMBOL);
				}
				break;

			case 3:
				{
				this.state = 5399;
				if (!(this.serverVersion >= 50605)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50605");
				}
				this.state = 5400;
				this.match(MultiQueryMySQLParser.FORMAT_SYMBOL);
				this.state = 5401;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				this.state = 5402;
				this.textOrIdentifier();
				}
				break;

			case 4:
				{
				this.state = 5403;
				if (!(this.serverVersion >= 80018)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80018");
				}
				this.state = 5404;
				this.match(MultiQueryMySQLParser.ANALYZE_SYMBOL);
				}
				break;
			}
			this.state = 5407;
			this.explainableStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainableStatement(): ExplainableStatementContext {
		let _localctx: ExplainableStatementContext = new ExplainableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, MultiQueryMySQLParser.RULE_explainableStatement);
		try {
			this.state = 5421;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 689, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5409;
				this.selectStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5410;
				if (!(this.serverVersion >= 50603)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50603");
				}
				this.state = 5415;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 688, this._ctx) ) {
				case 1:
					{
					this.state = 5411;
					this.deleteStatement();
					}
					break;

				case 2:
					{
					this.state = 5412;
					this.insertStatement();
					}
					break;

				case 3:
					{
					this.state = 5413;
					this.replaceStatement();
					}
					break;

				case 4:
					{
					this.state = 5414;
					this.updateStatement();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5417;
				if (!(this.serverVersion >= 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50700");
				}
				this.state = 5418;
				this.match(MultiQueryMySQLParser.FOR_SYMBOL);
				this.state = 5419;
				this.match(MultiQueryMySQLParser.CONNECTION_SYMBOL);
				this.state = 5420;
				this.real_ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public helpCommand(): HelpCommandContext {
		let _localctx: HelpCommandContext = new HelpCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, MultiQueryMySQLParser.RULE_helpCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5423;
			this.match(MultiQueryMySQLParser.HELP_SYMBOL);
			this.state = 5424;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useCommand(): UseCommandContext {
		let _localctx: UseCommandContext = new UseCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, MultiQueryMySQLParser.RULE_useCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5426;
			this.match(MultiQueryMySQLParser.USE_SYMBOL);
			this.state = 5427;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public restartServer(): RestartServerContext {
		let _localctx: RestartServerContext = new RestartServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, MultiQueryMySQLParser.RULE_restartServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5429;
			this.match(MultiQueryMySQLParser.RESTART_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expr(): ExprContext;
	public expr(_p: number): ExprContext;
	// @RuleVersion(0)
	public expr(_p?: number): ExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExprContext = new ExprContext(this._ctx, _parentState);
		let _prevctx: ExprContext = _localctx;
		let _startState: number = 668;
		this.enterRecursionRule(_localctx, 668, MultiQueryMySQLParser.RULE_expr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 692, this._ctx) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 5432;
				this.boolPri(0);
				this.state = 5438;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 691, this._ctx) ) {
				case 1:
					{
					this.state = 5433;
					this.match(MultiQueryMySQLParser.IS_SYMBOL);
					this.state = 5435;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.NOT2_SYMBOL || _la === MultiQueryMySQLParser.NOT_SYMBOL) {
						{
						this.state = 5434;
						this.notRule();
						}
					}

					this.state = 5437;
					(_localctx as ExprIsContext)._type = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.UNKNOWN_SYMBOL || _la === MultiQueryMySQLParser.FALSE_SYMBOL || _la === MultiQueryMySQLParser.TRUE_SYMBOL)) {
						(_localctx as ExprIsContext)._type = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5440;
				this.match(MultiQueryMySQLParser.NOT_SYMBOL);
				this.state = 5441;
				this.expr(4);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5455;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 694, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5453;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 693, this._ctx) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_expr);
						this.state = 5444;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 5445;
						(_localctx as ExprAndContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.LOGICAL_AND_OPERATOR || _la === MultiQueryMySQLParser.AND_SYMBOL)) {
							(_localctx as ExprAndContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5446;
						this.expr(4);
						}
						break;

					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_expr);
						this.state = 5447;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5448;
						this.match(MultiQueryMySQLParser.XOR_SYMBOL);
						this.state = 5449;
						this.expr(3);
						}
						break;

					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_expr);
						this.state = 5450;
						if (!(this.precpred(this._ctx, 1))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
						}
						this.state = 5451;
						(_localctx as ExprOrContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.LOGICAL_OR_OPERATOR || _la === MultiQueryMySQLParser.OR_SYMBOL)) {
							(_localctx as ExprOrContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5452;
						this.expr(2);
						}
						break;
					}
					}
				}
				this.state = 5457;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 694, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public boolPri(): BoolPriContext;
	public boolPri(_p: number): BoolPriContext;
	// @RuleVersion(0)
	public boolPri(_p?: number): BoolPriContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: BoolPriContext = new BoolPriContext(this._ctx, _parentState);
		let _prevctx: BoolPriContext = _localctx;
		let _startState: number = 670;
		this.enterRecursionRule(_localctx, 670, MultiQueryMySQLParser.RULE_boolPri, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 5459;
			this.predicate();
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5478;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 697, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5476;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 696, this._ctx) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_boolPri);
						this.state = 5461;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 5462;
						this.match(MultiQueryMySQLParser.IS_SYMBOL);
						this.state = 5464;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MultiQueryMySQLParser.NOT2_SYMBOL || _la === MultiQueryMySQLParser.NOT_SYMBOL) {
							{
							this.state = 5463;
							this.notRule();
							}
						}

						this.state = 5466;
						this.match(MultiQueryMySQLParser.NULL_SYMBOL);
						}
						break;

					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_boolPri);
						this.state = 5467;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5468;
						this.compOp();
						this.state = 5469;
						this.predicate();
						}
						break;

					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_boolPri);
						this.state = 5471;
						if (!(this.precpred(this._ctx, 1))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
						}
						this.state = 5472;
						this.compOp();
						this.state = 5473;
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.ANY_SYMBOL || _la === MultiQueryMySQLParser.ALL_SYMBOL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5474;
						this.subquery();
						}
						break;
					}
					}
				}
				this.state = 5480;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 697, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compOp(): CompOpContext {
		let _localctx: CompOpContext = new CompOpContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, MultiQueryMySQLParser.RULE_compOp);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5481;
			_la = this._input.LA(1);
			if (!(((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (MultiQueryMySQLParser.EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.NULL_SAFE_EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.GREATER_THAN_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.LESS_THAN_OPERATOR - 383)) | (1 << (MultiQueryMySQLParser.NOT_EQUAL_OPERATOR - 383)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predicate(): PredicateContext {
		let _localctx: PredicateContext = new PredicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, MultiQueryMySQLParser.RULE_predicate);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5483;
			this.bitExpr(0);
			this.state = 5497;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 700, this._ctx) ) {
			case 1:
				{
				this.state = 5485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NOT2_SYMBOL || _la === MultiQueryMySQLParser.NOT_SYMBOL) {
					{
					this.state = 5484;
					this.notRule();
					}
				}

				this.state = 5487;
				this.predicateOperations();
				}
				break;

			case 2:
				{
				this.state = 5488;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 5489;
				this.match(MultiQueryMySQLParser.MEMBER_SYMBOL);
				this.state = 5491;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.OF_SYMBOL) {
					{
					this.state = 5490;
					this.match(MultiQueryMySQLParser.OF_SYMBOL);
					}
				}

				this.state = 5493;
				this.simpleExprWithParentheses();
				}
				break;

			case 3:
				{
				this.state = 5494;
				this.match(MultiQueryMySQLParser.SOUNDS_SYMBOL);
				this.state = 5495;
				this.match(MultiQueryMySQLParser.LIKE_SYMBOL);
				this.state = 5496;
				this.bitExpr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predicateOperations(): PredicateOperationsContext {
		let _localctx: PredicateOperationsContext = new PredicateOperationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, MultiQueryMySQLParser.RULE_predicateOperations);
		try {
			this.state = 5520;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5499;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 5505;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 701, this._ctx) ) {
				case 1:
					{
					this.state = 5500;
					this.subquery();
					}
					break;

				case 2:
					{
					this.state = 5501;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 5502;
					this.exprList();
					this.state = 5503;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5507;
				this.match(MultiQueryMySQLParser.BETWEEN_SYMBOL);
				this.state = 5508;
				this.bitExpr(0);
				this.state = 5509;
				this.match(MultiQueryMySQLParser.AND_SYMBOL);
				this.state = 5510;
				this.predicate();
				}
				break;
			case MultiQueryMySQLParser.LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5512;
				this.match(MultiQueryMySQLParser.LIKE_SYMBOL);
				this.state = 5513;
				this.simpleExpr(0);
				this.state = 5516;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 702, this._ctx) ) {
				case 1:
					{
					this.state = 5514;
					this.match(MultiQueryMySQLParser.ESCAPE_SYMBOL);
					this.state = 5515;
					this.simpleExpr(0);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5518;
				this.match(MultiQueryMySQLParser.REGEXP_SYMBOL);
				this.state = 5519;
				this.bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public bitExpr(): BitExprContext;
	public bitExpr(_p: number): BitExprContext;
	// @RuleVersion(0)
	public bitExpr(_p?: number): BitExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: BitExprContext = new BitExprContext(this._ctx, _parentState);
		let _prevctx: BitExprContext = _localctx;
		let _startState: number = 678;
		this.enterRecursionRule(_localctx, 678, MultiQueryMySQLParser.RULE_bitExpr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			this.state = 5523;
			this.simpleExpr(0);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5551;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 705, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5549;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 704, this._ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5525;
						if (!(this.precpred(this._ctx, 7))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
						}
						this.state = 5526;
						_localctx._op = this.match(MultiQueryMySQLParser.BITWISE_XOR_OPERATOR);
						this.state = 5527;
						this.bitExpr(8);
						}
						break;

					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5528;
						if (!(this.precpred(this._ctx, 6))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
						}
						this.state = 5529;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (MultiQueryMySQLParser.MULT_OPERATOR - 393)) | (1 << (MultiQueryMySQLParser.DIV_OPERATOR - 393)) | (1 << (MultiQueryMySQLParser.MOD_OPERATOR - 393)))) !== 0) || _la === MultiQueryMySQLParser.DIV_SYMBOL || _la === MultiQueryMySQLParser.MOD_SYMBOL)) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5530;
						this.bitExpr(7);
						}
						break;

					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5531;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 5532;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.PLUS_OPERATOR || _la === MultiQueryMySQLParser.MINUS_OPERATOR)) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5533;
						this.bitExpr(6);
						}
						break;

					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5534;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 5535;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.SHIFT_LEFT_OPERATOR || _la === MultiQueryMySQLParser.SHIFT_RIGHT_OPERATOR)) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5536;
						this.bitExpr(4);
						}
						break;

					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5537;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5538;
						_localctx._op = this.match(MultiQueryMySQLParser.BITWISE_AND_OPERATOR);
						this.state = 5539;
						this.bitExpr(3);
						}
						break;

					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5540;
						if (!(this.precpred(this._ctx, 1))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
						}
						this.state = 5541;
						_localctx._op = this.match(MultiQueryMySQLParser.BITWISE_OR_OPERATOR);
						this.state = 5542;
						this.bitExpr(2);
						}
						break;

					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_bitExpr);
						this.state = 5543;
						if (!(this.precpred(this._ctx, 4))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						}
						this.state = 5544;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MultiQueryMySQLParser.PLUS_OPERATOR || _la === MultiQueryMySQLParser.MINUS_OPERATOR)) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5545;
						this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
						this.state = 5546;
						this.expr(0);
						this.state = 5547;
						this.interval();
						}
						break;
					}
					}
				}
				this.state = 5553;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 705, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public simpleExpr(): SimpleExprContext;
	public simpleExpr(_p: number): SimpleExprContext;
	// @RuleVersion(0)
	public simpleExpr(_p?: number): SimpleExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: SimpleExprContext = new SimpleExprContext(this._ctx, _parentState);
		let _prevctx: SimpleExprContext = _localctx;
		let _startState: number = 680;
		this.enterRecursionRule(_localctx, 680, MultiQueryMySQLParser.RULE_simpleExpr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5658;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 714, this._ctx) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 5555;
				this.variable();
				}
				break;

			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5556;
				this.columnRef();
				this.state = 5558;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 706, this._ctx) ) {
				case 1:
					{
					this.state = 5557;
					this.jsonOperator();
					}
					break;
				}
				}
				break;

			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5560;
				this.runtimeFunctionCall();
				}
				break;

			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5561;
				this.functionCall();
				}
				break;

			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5562;
				this.literal();
				}
				break;

			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5563;
				this.match(MultiQueryMySQLParser.PARAM_MARKER);
				}
				break;

			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5564;
				this.sumExpr();
				}
				break;

			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5565;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 5566;
				this.groupingOperation();
				}
				break;

			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5567;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 5568;
				this.windowFunctionCall();
				}
				break;

			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5569;
				(_localctx as SimpleExprUnaryContext)._op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (MultiQueryMySQLParser.PLUS_OPERATOR - 391)) | (1 << (MultiQueryMySQLParser.MINUS_OPERATOR - 391)) | (1 << (MultiQueryMySQLParser.BITWISE_NOT_OPERATOR - 391)))) !== 0))) {
					(_localctx as SimpleExprUnaryContext)._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5570;
				this.simpleExpr(14);
				}
				break;

			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5571;
				this.not2Rule();
				this.state = 5572;
				this.simpleExpr(13);
				}
				break;

			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ROW_SYMBOL) {
					{
					this.state = 5574;
					this.match(MultiQueryMySQLParser.ROW_SYMBOL);
					}
				}

				this.state = 5577;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5578;
				this.exprList();
				this.state = 5579;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EXISTS_SYMBOL) {
					{
					this.state = 5581;
					this.match(MultiQueryMySQLParser.EXISTS_SYMBOL);
					}
				}

				this.state = 5584;
				this.subquery();
				}
				break;

			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5585;
				this.match(MultiQueryMySQLParser.OPEN_CURLY_SYMBOL);
				this.state = 5586;
				this.identifier();
				this.state = 5587;
				this.expr(0);
				this.state = 5588;
				this.match(MultiQueryMySQLParser.CLOSE_CURLY_SYMBOL);
				}
				break;

			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5590;
				this.match(MultiQueryMySQLParser.MATCH_SYMBOL);
				this.state = 5591;
				this.identListArg();
				this.state = 5592;
				this.match(MultiQueryMySQLParser.AGAINST_SYMBOL);
				this.state = 5593;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5594;
				this.bitExpr(0);
				this.state = 5596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.IN_SYMBOL || _la === MultiQueryMySQLParser.WITH_SYMBOL) {
					{
					this.state = 5595;
					this.fulltextOptions();
					}
				}

				this.state = 5598;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5600;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				this.state = 5601;
				this.simpleExpr(8);
				}
				break;

			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5602;
				this.match(MultiQueryMySQLParser.CAST_SYMBOL);
				this.state = 5603;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5604;
				this.expr(0);
				this.state = 5605;
				this.match(MultiQueryMySQLParser.AS_SYMBOL);
				this.state = 5606;
				this.castType();
				this.state = 5608;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 710, this._ctx) ) {
				case 1:
					{
					this.state = 5607;
					this.arrayCast();
					}
					break;
				}
				this.state = 5610;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5612;
				this.match(MultiQueryMySQLParser.CASE_SYMBOL);
				this.state = 5614;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 711, this._ctx) ) {
				case 1:
					{
					this.state = 5613;
					this.expr(0);
					}
					break;
				}
				this.state = 5619;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5616;
					this.whenExpression();
					this.state = 5617;
					this.thenExpression();
					}
					}
					this.state = 5621;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MultiQueryMySQLParser.WHEN_SYMBOL);
				this.state = 5624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ELSE_SYMBOL) {
					{
					this.state = 5623;
					this.elseExpression();
					}
				}

				this.state = 5626;
				this.match(MultiQueryMySQLParser.END_SYMBOL);
				}
				break;

			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5628;
				this.match(MultiQueryMySQLParser.CONVERT_SYMBOL);
				this.state = 5629;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5630;
				this.expr(0);
				this.state = 5631;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5632;
				this.castType();
				this.state = 5633;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5635;
				this.match(MultiQueryMySQLParser.CONVERT_SYMBOL);
				this.state = 5636;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5637;
				this.expr(0);
				this.state = 5638;
				this.match(MultiQueryMySQLParser.USING_SYMBOL);
				this.state = 5639;
				this.charsetName();
				this.state = 5640;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5642;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 5643;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5644;
				this.simpleIdentifier();
				this.state = 5645;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5647;
				this.match(MultiQueryMySQLParser.VALUES_SYMBOL);
				this.state = 5648;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5649;
				this.simpleIdentifier();
				this.state = 5650;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5652;
				this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
				this.state = 5653;
				this.expr(0);
				this.state = 5654;
				this.interval();
				this.state = 5655;
				this.match(MultiQueryMySQLParser.PLUS_OPERATOR);
				this.state = 5656;
				this.expr(0);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5668;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 716, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5666;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 715, this._ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_simpleExpr);
						this.state = 5660;
						if (!(this.precpred(this._ctx, 15))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 15)");
						}
						this.state = 5661;
						this.match(MultiQueryMySQLParser.CONCAT_PIPES_SYMBOL);
						this.state = 5662;
						this.simpleExpr(16);
						}
						break;

					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MultiQueryMySQLParser.RULE_simpleExpr);
						this.state = 5663;
						if (!(this.precpred(this._ctx, 21))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 21)");
						}
						this.state = 5664;
						this.match(MultiQueryMySQLParser.COLLATE_SYMBOL);
						this.state = 5665;
						this.textOrIdentifier();
						}
						break;
					}
					}
				}
				this.state = 5670;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 716, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arrayCast(): ArrayCastContext {
		let _localctx: ArrayCastContext = new ArrayCastContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, MultiQueryMySQLParser.RULE_arrayCast);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5671;
			if (!(this.serverVersion >= 80017)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 80017");
			}
			this.state = 5672;
			this.match(MultiQueryMySQLParser.ARRAY_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonOperator(): JsonOperatorContext {
		let _localctx: JsonOperatorContext = new JsonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, MultiQueryMySQLParser.RULE_jsonOperator);
		try {
			this.state = 5680;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5674;
				if (!(this.serverVersion >= 50708)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50708");
				}
				this.state = 5675;
				this.match(MultiQueryMySQLParser.JSON_SEPARATOR_SYMBOL);
				this.state = 5676;
				this.textStringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5677;
				if (!(this.serverVersion >= 50713)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50713");
				}
				this.state = 5678;
				this.match(MultiQueryMySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
				this.state = 5679;
				this.textStringLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sumExpr(): SumExprContext {
		let _localctx: SumExprContext = new SumExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, MultiQueryMySQLParser.RULE_sumExpr);
		let _la: number;
		try {
			this.state = 5813;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 740, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5682;
				_localctx._name = this.match(MultiQueryMySQLParser.AVG_SYMBOL);
				this.state = 5683;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5685;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
				case 1:
					{
					this.state = 5684;
					this.match(MultiQueryMySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5687;
				this.inSumExpr();
				this.state = 5688;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5691;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 719, this._ctx) ) {
				case 1:
					{
					this.state = 5689;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5690;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5693;
				_localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 439)) & ~0x1F) === 0 && ((1 << (_la - 439)) & ((1 << (MultiQueryMySQLParser.BIT_AND_SYMBOL - 439)) | (1 << (MultiQueryMySQLParser.BIT_OR_SYMBOL - 439)) | (1 << (MultiQueryMySQLParser.BIT_XOR_SYMBOL - 439)))) !== 0))) {
					_localctx._name = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5694;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5695;
				this.inSumExpr();
				this.state = 5696;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5699;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 720, this._ctx) ) {
				case 1:
					{
					this.state = 5697;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5698;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5701;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 5702;
				this.jsonFunction();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5703;
				_localctx._name = this.match(MultiQueryMySQLParser.COUNT_SYMBOL);
				this.state = 5704;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ALL_SYMBOL) {
					{
					this.state = 5705;
					this.match(MultiQueryMySQLParser.ALL_SYMBOL);
					}
				}

				this.state = 5708;
				this.match(MultiQueryMySQLParser.MULT_OPERATOR);
				this.state = 5709;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5712;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 722, this._ctx) ) {
				case 1:
					{
					this.state = 5710;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5711;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5714;
				_localctx._name = this.match(MultiQueryMySQLParser.COUNT_SYMBOL);
				this.state = 5715;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5723;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 724, this._ctx) ) {
				case 1:
					{
					this.state = 5717;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.ALL_SYMBOL) {
						{
						this.state = 5716;
						this.match(MultiQueryMySQLParser.ALL_SYMBOL);
						}
					}

					this.state = 5719;
					this.match(MultiQueryMySQLParser.MULT_OPERATOR);
					}
					break;

				case 2:
					{
					this.state = 5720;
					this.inSumExpr();
					}
					break;

				case 3:
					{
					this.state = 5721;
					this.match(MultiQueryMySQLParser.DISTINCT_SYMBOL);
					this.state = 5722;
					this.exprList();
					}
					break;
				}
				this.state = 5725;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5728;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 725, this._ctx) ) {
				case 1:
					{
					this.state = 5726;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5727;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5730;
				_localctx._name = this.match(MultiQueryMySQLParser.MIN_SYMBOL);
				this.state = 5731;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5733;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 726, this._ctx) ) {
				case 1:
					{
					this.state = 5732;
					this.match(MultiQueryMySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5735;
				this.inSumExpr();
				this.state = 5736;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5739;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 727, this._ctx) ) {
				case 1:
					{
					this.state = 5737;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5738;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5741;
				_localctx._name = this.match(MultiQueryMySQLParser.MAX_SYMBOL);
				this.state = 5742;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5744;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 728, this._ctx) ) {
				case 1:
					{
					this.state = 5743;
					this.match(MultiQueryMySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5746;
				this.inSumExpr();
				this.state = 5747;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5750;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 729, this._ctx) ) {
				case 1:
					{
					this.state = 5748;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5749;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5752;
				_localctx._name = this.match(MultiQueryMySQLParser.STD_SYMBOL);
				this.state = 5753;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5754;
				this.inSumExpr();
				this.state = 5755;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5758;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 730, this._ctx) ) {
				case 1:
					{
					this.state = 5756;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5757;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5760;
				_localctx._name = this.match(MultiQueryMySQLParser.VARIANCE_SYMBOL);
				this.state = 5761;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5762;
				this.inSumExpr();
				this.state = 5763;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5766;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 731, this._ctx) ) {
				case 1:
					{
					this.state = 5764;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5765;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5768;
				_localctx._name = this.match(MultiQueryMySQLParser.STDDEV_SAMP_SYMBOL);
				this.state = 5769;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5770;
				this.inSumExpr();
				this.state = 5771;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5774;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 732, this._ctx) ) {
				case 1:
					{
					this.state = 5772;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5773;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5776;
				_localctx._name = this.match(MultiQueryMySQLParser.VAR_SAMP_SYMBOL);
				this.state = 5777;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5778;
				this.inSumExpr();
				this.state = 5779;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5782;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 733, this._ctx) ) {
				case 1:
					{
					this.state = 5780;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5781;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5784;
				_localctx._name = this.match(MultiQueryMySQLParser.SUM_SYMBOL);
				this.state = 5785;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5787;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 734, this._ctx) ) {
				case 1:
					{
					this.state = 5786;
					this.match(MultiQueryMySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5789;
				this.inSumExpr();
				this.state = 5790;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5793;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 735, this._ctx) ) {
				case 1:
					{
					this.state = 5791;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5792;
					this.windowingClause();
					}
					break;
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5795;
				_localctx._name = this.match(MultiQueryMySQLParser.GROUP_CONCAT_SYMBOL);
				this.state = 5796;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5798;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
				case 1:
					{
					this.state = 5797;
					this.match(MultiQueryMySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5800;
				this.exprList();
				this.state = 5802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ORDER_SYMBOL) {
					{
					this.state = 5801;
					this.orderClause();
					}
				}

				this.state = 5806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.SEPARATOR_SYMBOL) {
					{
					this.state = 5804;
					this.match(MultiQueryMySQLParser.SEPARATOR_SYMBOL);
					this.state = 5805;
					this.textString();
					}
				}

				this.state = 5808;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5811;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 739, this._ctx) ) {
				case 1:
					{
					this.state = 5809;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 5810;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingOperation(): GroupingOperationContext {
		let _localctx: GroupingOperationContext = new GroupingOperationContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, MultiQueryMySQLParser.RULE_groupingOperation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5815;
			this.match(MultiQueryMySQLParser.GROUPING_SYMBOL);
			this.state = 5816;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5817;
			this.exprList();
			this.state = 5818;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFunctionCall(): WindowFunctionCallContext {
		let _localctx: WindowFunctionCallContext = new WindowFunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, MultiQueryMySQLParser.RULE_windowFunctionCall);
		let _la: number;
		try {
			this.state = 5862;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CUME_DIST_SYMBOL:
			case MultiQueryMySQLParser.DENSE_RANK_SYMBOL:
			case MultiQueryMySQLParser.PERCENT_RANK_SYMBOL:
			case MultiQueryMySQLParser.RANK_SYMBOL:
			case MultiQueryMySQLParser.ROW_NUMBER_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5820;
				_la = this._input.LA(1);
				if (!(((((_la - 708)) & ~0x1F) === 0 && ((1 << (_la - 708)) & ((1 << (MultiQueryMySQLParser.CUME_DIST_SYMBOL - 708)) | (1 << (MultiQueryMySQLParser.DENSE_RANK_SYMBOL - 708)) | (1 << (MultiQueryMySQLParser.PERCENT_RANK_SYMBOL - 708)) | (1 << (MultiQueryMySQLParser.RANK_SYMBOL - 708)) | (1 << (MultiQueryMySQLParser.ROW_NUMBER_SYMBOL - 708)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5821;
				this.parentheses();
				this.state = 5822;
				this.windowingClause();
				}
				break;
			case MultiQueryMySQLParser.NTILE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5824;
				this.match(MultiQueryMySQLParser.NTILE_SYMBOL);
				this.state = 5825;
				this.simpleExprWithParentheses();
				this.state = 5826;
				this.windowingClause();
				}
				break;
			case MultiQueryMySQLParser.LAG_SYMBOL:
			case MultiQueryMySQLParser.LEAD_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5828;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.LAG_SYMBOL || _la === MultiQueryMySQLParser.LEAD_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5829;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5830;
				this.expr(0);
				this.state = 5832;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					this.state = 5831;
					this.leadLagInfo();
					}
				}

				this.state = 5834;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.RESPECT_SYMBOL) {
					{
					this.state = 5835;
					this.nullTreatment();
					}
				}

				this.state = 5838;
				this.windowingClause();
				}
				break;
			case MultiQueryMySQLParser.FIRST_VALUE_SYMBOL:
			case MultiQueryMySQLParser.LAST_VALUE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5840;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.FIRST_VALUE_SYMBOL || _la === MultiQueryMySQLParser.LAST_VALUE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5841;
				this.exprWithParentheses();
				this.state = 5843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.RESPECT_SYMBOL) {
					{
					this.state = 5842;
					this.nullTreatment();
					}
				}

				this.state = 5845;
				this.windowingClause();
				}
				break;
			case MultiQueryMySQLParser.NTH_VALUE_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5847;
				this.match(MultiQueryMySQLParser.NTH_VALUE_SYMBOL);
				this.state = 5848;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5849;
				this.expr(0);
				this.state = 5850;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5851;
				this.simpleExpr(0);
				this.state = 5852;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5855;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FROM_SYMBOL) {
					{
					this.state = 5853;
					this.match(MultiQueryMySQLParser.FROM_SYMBOL);
					this.state = 5854;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.FIRST_SYMBOL || _la === MultiQueryMySQLParser.LAST_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.RESPECT_SYMBOL) {
					{
					this.state = 5857;
					this.nullTreatment();
					}
				}

				this.state = 5860;
				this.windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowingClause(): WindowingClauseContext {
		let _localctx: WindowingClauseContext = new WindowingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, MultiQueryMySQLParser.RULE_windowingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5864;
			this.match(MultiQueryMySQLParser.OVER_SYMBOL);
			this.state = 5867;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 747, this._ctx) ) {
			case 1:
				{
				this.state = 5865;
				this.windowName();
				}
				break;

			case 2:
				{
				this.state = 5866;
				this.windowSpec();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leadLagInfo(): LeadLagInfoContext {
		let _localctx: LeadLagInfoContext = new LeadLagInfoContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, MultiQueryMySQLParser.RULE_leadLagInfo);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5869;
			this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
			this.state = 5872;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INT_NUMBER:
			case MultiQueryMySQLParser.LONG_NUMBER:
			case MultiQueryMySQLParser.ULONGLONG_NUMBER:
			case MultiQueryMySQLParser.DECIMAL_NUMBER:
			case MultiQueryMySQLParser.FLOAT_NUMBER:
				{
				this.state = 5870;
				this.ulonglong_number();
				}
				break;
			case MultiQueryMySQLParser.PARAM_MARKER:
				{
				this.state = 5871;
				this.match(MultiQueryMySQLParser.PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5876;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				this.state = 5874;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5875;
				this.expr(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullTreatment(): NullTreatmentContext {
		let _localctx: NullTreatmentContext = new NullTreatmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, MultiQueryMySQLParser.RULE_nullTreatment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5878;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.IGNORE_SYMBOL || _la === MultiQueryMySQLParser.RESPECT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5879;
			this.match(MultiQueryMySQLParser.NULLS_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonFunction(): JsonFunctionContext {
		let _localctx: JsonFunctionContext = new JsonFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, MultiQueryMySQLParser.RULE_jsonFunction);
		try {
			this.state = 5897;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.JSON_ARRAYAGG_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5881;
				this.match(MultiQueryMySQLParser.JSON_ARRAYAGG_SYMBOL);
				this.state = 5882;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5883;
				this.inSumExpr();
				this.state = 5884;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5886;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 750, this._ctx) ) {
				case 1:
					{
					this.state = 5885;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.JSON_OBJECTAGG_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5888;
				this.match(MultiQueryMySQLParser.JSON_OBJECTAGG_SYMBOL);
				this.state = 5889;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5890;
				this.inSumExpr();
				this.state = 5891;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5892;
				this.inSumExpr();
				this.state = 5893;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5895;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 751, this._ctx) ) {
				case 1:
					{
					this.state = 5894;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inSumExpr(): InSumExprContext {
		let _localctx: InSumExprContext = new InSumExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, MultiQueryMySQLParser.RULE_inSumExpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5900;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 753, this._ctx) ) {
			case 1:
				{
				this.state = 5899;
				this.match(MultiQueryMySQLParser.ALL_SYMBOL);
				}
				break;
			}
			this.state = 5902;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identListArg(): IdentListArgContext {
		let _localctx: IdentListArgContext = new IdentListArgContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, MultiQueryMySQLParser.RULE_identListArg);
		try {
			this.state = 5909;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5904;
				this.identList();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5905;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5906;
				this.identList();
				this.state = 5907;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identList(): IdentListContext {
		let _localctx: IdentListContext = new IdentListContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, MultiQueryMySQLParser.RULE_identList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5911;
			this.simpleIdentifier();
			this.state = 5916;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 5912;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5913;
				this.simpleIdentifier();
				}
				}
				this.state = 5918;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fulltextOptions(): FulltextOptionsContext {
		let _localctx: FulltextOptionsContext = new FulltextOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, MultiQueryMySQLParser.RULE_fulltextOptions);
		let _la: number;
		try {
			this.state = 5934;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 757, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5919;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 5920;
				this.match(MultiQueryMySQLParser.BOOLEAN_SYMBOL);
				this.state = 5921;
				this.match(MultiQueryMySQLParser.MODE_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5922;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 5923;
				this.match(MultiQueryMySQLParser.NATURAL_SYMBOL);
				this.state = 5924;
				this.match(MultiQueryMySQLParser.LANGUAGE_SYMBOL);
				this.state = 5925;
				this.match(MultiQueryMySQLParser.MODE_SYMBOL);
				this.state = 5929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.WITH_SYMBOL) {
					{
					this.state = 5926;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 5927;
					this.match(MultiQueryMySQLParser.QUERY_SYMBOL);
					this.state = 5928;
					this.match(MultiQueryMySQLParser.EXPANSION_SYMBOL);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5931;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 5932;
				this.match(MultiQueryMySQLParser.QUERY_SYMBOL);
				this.state = 5933;
				this.match(MultiQueryMySQLParser.EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public runtimeFunctionCall(): RuntimeFunctionCallContext {
		let _localctx: RuntimeFunctionCallContext = new RuntimeFunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, MultiQueryMySQLParser.RULE_runtimeFunctionCall);
		let _la: number;
		try {
			this.state = 6209;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 775, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5936;
				_localctx._name = this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
				this.state = 5937;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5938;
				this.exprList();
				this.state = 5941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.USING_SYMBOL) {
					{
					this.state = 5939;
					this.match(MultiQueryMySQLParser.USING_SYMBOL);
					this.state = 5940;
					this.charsetName();
					}
				}

				this.state = 5943;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5945;
				_localctx._name = this.match(MultiQueryMySQLParser.CURRENT_USER_SYMBOL);
				this.state = 5947;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 759, this._ctx) ) {
				case 1:
					{
					this.state = 5946;
					this.parentheses();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5949;
				_localctx._name = this.match(MultiQueryMySQLParser.DATE_SYMBOL);
				this.state = 5950;
				this.exprWithParentheses();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5951;
				_localctx._name = this.match(MultiQueryMySQLParser.DAY_SYMBOL);
				this.state = 5952;
				this.exprWithParentheses();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5953;
				_localctx._name = this.match(MultiQueryMySQLParser.HOUR_SYMBOL);
				this.state = 5954;
				this.exprWithParentheses();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5955;
				_localctx._name = this.match(MultiQueryMySQLParser.INSERT_SYMBOL);
				this.state = 5956;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5957;
				this.expr(0);
				this.state = 5958;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5959;
				this.expr(0);
				this.state = 5960;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5961;
				this.expr(0);
				this.state = 5962;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5963;
				this.expr(0);
				this.state = 5964;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5966;
				_localctx._name = this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
				this.state = 5967;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5968;
				this.expr(0);
				this.state = 5971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5969;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 5970;
					this.expr(0);
					}
					}
					this.state = 5973;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5975;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5977;
				_localctx._name = this.match(MultiQueryMySQLParser.LEFT_SYMBOL);
				this.state = 5978;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5979;
				this.expr(0);
				this.state = 5980;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5981;
				this.expr(0);
				this.state = 5982;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5984;
				_localctx._name = this.match(MultiQueryMySQLParser.MINUTE_SYMBOL);
				this.state = 5985;
				this.exprWithParentheses();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5986;
				_localctx._name = this.match(MultiQueryMySQLParser.MONTH_SYMBOL);
				this.state = 5987;
				this.exprWithParentheses();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5988;
				_localctx._name = this.match(MultiQueryMySQLParser.RIGHT_SYMBOL);
				this.state = 5989;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5990;
				this.expr(0);
				this.state = 5991;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 5992;
				this.expr(0);
				this.state = 5993;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5995;
				_localctx._name = this.match(MultiQueryMySQLParser.SECOND_SYMBOL);
				this.state = 5996;
				this.exprWithParentheses();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5997;
				_localctx._name = this.match(MultiQueryMySQLParser.TIME_SYMBOL);
				this.state = 5998;
				this.exprWithParentheses();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5999;
				_localctx._name = this.match(MultiQueryMySQLParser.TIMESTAMP_SYMBOL);
				this.state = 6000;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6001;
				this.expr(0);
				this.state = 6004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					this.state = 6002;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6003;
					this.expr(0);
					}
				}

				this.state = 6006;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6008;
				this.trimFunction();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6009;
				_localctx._name = this.match(MultiQueryMySQLParser.USER_SYMBOL);
				this.state = 6010;
				this.parentheses();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6011;
				_localctx._name = this.match(MultiQueryMySQLParser.VALUES_SYMBOL);
				this.state = 6012;
				this.exprWithParentheses();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6013;
				_localctx._name = this.match(MultiQueryMySQLParser.YEAR_SYMBOL);
				this.state = 6014;
				this.exprWithParentheses();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6015;
				_localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ADDDATE_SYMBOL || _la === MultiQueryMySQLParser.SUBDATE_SYMBOL)) {
					_localctx._name = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6016;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6017;
				this.expr(0);
				this.state = 6018;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6024;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 762, this._ctx) ) {
				case 1:
					{
					this.state = 6019;
					this.expr(0);
					}
					break;

				case 2:
					{
					this.state = 6020;
					this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
					this.state = 6021;
					this.expr(0);
					this.state = 6022;
					this.interval();
					}
					break;
				}
				this.state = 6026;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6028;
				_localctx._name = this.match(MultiQueryMySQLParser.CURDATE_SYMBOL);
				this.state = 6030;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 763, this._ctx) ) {
				case 1:
					{
					this.state = 6029;
					this.parentheses();
					}
					break;
				}
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6032;
				_localctx._name = this.match(MultiQueryMySQLParser.CURTIME_SYMBOL);
				this.state = 6034;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 764, this._ctx) ) {
				case 1:
					{
					this.state = 6033;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6036;
				_localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DATE_ADD_SYMBOL || _la === MultiQueryMySQLParser.DATE_SUB_SYMBOL)) {
					_localctx._name = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6037;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6038;
				this.expr(0);
				this.state = 6039;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6040;
				this.match(MultiQueryMySQLParser.INTERVAL_SYMBOL);
				this.state = 6041;
				this.expr(0);
				this.state = 6042;
				this.interval();
				this.state = 6043;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 6045;
				_localctx._name = this.match(MultiQueryMySQLParser.EXTRACT_SYMBOL);
				this.state = 6046;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6047;
				this.interval();
				this.state = 6048;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 6049;
				this.expr(0);
				this.state = 6050;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 6052;
				_localctx._name = this.match(MultiQueryMySQLParser.GET_FORMAT_SYMBOL);
				this.state = 6053;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6054;
				this.dateTimeTtype();
				this.state = 6055;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6056;
				this.expr(0);
				this.state = 6057;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 6059;
				_localctx._name = this.match(MultiQueryMySQLParser.NOW_SYMBOL);
				this.state = 6061;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 765, this._ctx) ) {
				case 1:
					{
					this.state = 6060;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 6063;
				_localctx._name = this.match(MultiQueryMySQLParser.POSITION_SYMBOL);
				this.state = 6064;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6065;
				this.bitExpr(0);
				this.state = 6066;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 6067;
				this.expr(0);
				this.state = 6068;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 6070;
				this.substringFunction();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 6071;
				_localctx._name = this.match(MultiQueryMySQLParser.SYSDATE_SYMBOL);
				this.state = 6073;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 766, this._ctx) ) {
				case 1:
					{
					this.state = 6072;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 6075;
				_localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL || _la === MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL)) {
					_localctx._name = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6076;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6077;
				this.intervalTimeStamp();
				this.state = 6078;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6079;
				this.expr(0);
				this.state = 6080;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6081;
				this.expr(0);
				this.state = 6082;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 6084;
				_localctx._name = this.match(MultiQueryMySQLParser.UTC_DATE_SYMBOL);
				this.state = 6086;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 767, this._ctx) ) {
				case 1:
					{
					this.state = 6085;
					this.parentheses();
					}
					break;
				}
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 6088;
				_localctx._name = this.match(MultiQueryMySQLParser.UTC_TIME_SYMBOL);
				this.state = 6090;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 768, this._ctx) ) {
				case 1:
					{
					this.state = 6089;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 6092;
				_localctx._name = this.match(MultiQueryMySQLParser.UTC_TIMESTAMP_SYMBOL);
				this.state = 6094;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 769, this._ctx) ) {
				case 1:
					{
					this.state = 6093;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 6096;
				_localctx._name = this.match(MultiQueryMySQLParser.ASCII_SYMBOL);
				this.state = 6097;
				this.exprWithParentheses();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 6098;
				_localctx._name = this.match(MultiQueryMySQLParser.CHARSET_SYMBOL);
				this.state = 6099;
				this.exprWithParentheses();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 6100;
				_localctx._name = this.match(MultiQueryMySQLParser.COALESCE_SYMBOL);
				this.state = 6101;
				this.exprListWithParentheses();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 6102;
				_localctx._name = this.match(MultiQueryMySQLParser.COLLATION_SYMBOL);
				this.state = 6103;
				this.exprWithParentheses();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 6104;
				_localctx._name = this.match(MultiQueryMySQLParser.DATABASE_SYMBOL);
				this.state = 6105;
				this.parentheses();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 6106;
				_localctx._name = this.match(MultiQueryMySQLParser.IF_SYMBOL);
				this.state = 6107;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6108;
				this.expr(0);
				this.state = 6109;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6110;
				this.expr(0);
				this.state = 6111;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6112;
				this.expr(0);
				this.state = 6113;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 6115;
				_localctx._name = this.match(MultiQueryMySQLParser.FORMAT_SYMBOL);
				this.state = 6116;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6117;
				this.expr(0);
				this.state = 6118;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6119;
				this.expr(0);
				this.state = 6122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					this.state = 6120;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6121;
					this.expr(0);
					}
				}

				this.state = 6124;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 6126;
				_localctx._name = this.match(MultiQueryMySQLParser.MICROSECOND_SYMBOL);
				this.state = 6127;
				this.exprWithParentheses();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 6128;
				_localctx._name = this.match(MultiQueryMySQLParser.MOD_SYMBOL);
				this.state = 6129;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6130;
				this.expr(0);
				this.state = 6131;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6132;
				this.expr(0);
				this.state = 6133;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 6135;
				if (!(this.serverVersion < 50607)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50607");
				}
				this.state = 6136;
				_localctx._name = this.match(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL);
				this.state = 6137;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6138;
				this.textLiteral();
				this.state = 6139;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 6141;
				if (!(this.serverVersion < 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80011");
				}
				this.state = 6142;
				_localctx._name = this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 6143;
				this.exprWithParentheses();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 6144;
				_localctx._name = this.match(MultiQueryMySQLParser.QUARTER_SYMBOL);
				this.state = 6145;
				this.exprWithParentheses();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 6146;
				_localctx._name = this.match(MultiQueryMySQLParser.REPEAT_SYMBOL);
				this.state = 6147;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6148;
				this.expr(0);
				this.state = 6149;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6150;
				this.expr(0);
				this.state = 6151;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 6153;
				_localctx._name = this.match(MultiQueryMySQLParser.REPLACE_SYMBOL);
				this.state = 6154;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6155;
				this.expr(0);
				this.state = 6156;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6157;
				this.expr(0);
				this.state = 6158;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6159;
				this.expr(0);
				this.state = 6160;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 6162;
				_localctx._name = this.match(MultiQueryMySQLParser.REVERSE_SYMBOL);
				this.state = 6163;
				this.exprWithParentheses();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 6164;
				_localctx._name = this.match(MultiQueryMySQLParser.ROW_COUNT_SYMBOL);
				this.state = 6165;
				this.parentheses();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 6166;
				_localctx._name = this.match(MultiQueryMySQLParser.TRUNCATE_SYMBOL);
				this.state = 6167;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6168;
				this.expr(0);
				this.state = 6169;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6170;
				this.expr(0);
				this.state = 6171;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 6173;
				_localctx._name = this.match(MultiQueryMySQLParser.WEEK_SYMBOL);
				this.state = 6174;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6175;
				this.expr(0);
				this.state = 6178;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					this.state = 6176;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6177;
					this.expr(0);
					}
				}

				this.state = 6180;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 6182;
				_localctx._name = this.match(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL);
				this.state = 6183;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6184;
				this.expr(0);
				this.state = 6204;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 774, this._ctx) ) {
				case 1:
					{
					this.state = 6188;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 772, this._ctx) ) {
					case 1:
						{
						this.state = 6185;
						this.match(MultiQueryMySQLParser.AS_SYMBOL);
						this.state = 6186;
						this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
						this.state = 6187;
						this.wsNumCodepoints();
						}
						break;
					}
					this.state = 6192;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 773, this._ctx) ) {
					case 1:
						{
						this.state = 6190;
						if (!(this.serverVersion < 80000)) {
							throw new FailedPredicateException(this, "this.serverVersion < 80000");
						}
						this.state = 6191;
						this.weightStringLevels();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 6194;
					this.match(MultiQueryMySQLParser.AS_SYMBOL);
					this.state = 6195;
					this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
					this.state = 6196;
					this.wsNumCodepoints();
					}
					break;

				case 3:
					{
					this.state = 6197;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6198;
					this.ulong_number();
					this.state = 6199;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6200;
					this.ulong_number();
					this.state = 6201;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6202;
					this.ulong_number();
					}
					break;
				}
				this.state = 6206;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 6208;
				this.geometryFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public geometryFunction(): GeometryFunctionContext {
		let _localctx: GeometryFunctionContext = new GeometryFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, MultiQueryMySQLParser.RULE_geometryFunction);
		try {
			this.state = 6242;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 777, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6211;
				if (!(this.serverVersion < 50706)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50706");
				}
				this.state = 6212;
				_localctx._name = this.match(MultiQueryMySQLParser.CONTAINS_SYMBOL);
				this.state = 6213;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6214;
				this.expr(0);
				this.state = 6215;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6216;
				this.expr(0);
				this.state = 6217;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6219;
				_localctx._name = this.match(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL);
				this.state = 6220;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6222;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 776, this._ctx) ) {
				case 1:
					{
					this.state = 6221;
					this.exprList();
					}
					break;
				}
				this.state = 6224;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6225;
				_localctx._name = this.match(MultiQueryMySQLParser.LINESTRING_SYMBOL);
				this.state = 6226;
				this.exprListWithParentheses();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6227;
				_localctx._name = this.match(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL);
				this.state = 6228;
				this.exprListWithParentheses();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6229;
				_localctx._name = this.match(MultiQueryMySQLParser.MULTIPOINT_SYMBOL);
				this.state = 6230;
				this.exprListWithParentheses();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6231;
				_localctx._name = this.match(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL);
				this.state = 6232;
				this.exprListWithParentheses();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6233;
				_localctx._name = this.match(MultiQueryMySQLParser.POINT_SYMBOL);
				this.state = 6234;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6235;
				this.expr(0);
				this.state = 6236;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6237;
				this.expr(0);
				this.state = 6238;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6240;
				_localctx._name = this.match(MultiQueryMySQLParser.POLYGON_SYMBOL);
				this.state = 6241;
				this.exprListWithParentheses();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timeFunctionParameters(): TimeFunctionParametersContext {
		let _localctx: TimeFunctionParametersContext = new TimeFunctionParametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, MultiQueryMySQLParser.RULE_timeFunctionParameters);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6244;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 778, this._ctx) ) {
			case 1:
				{
				this.state = 6245;
				this.fractionalPrecision();
				}
				break;
			}
			this.state = 6248;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fractionalPrecision(): FractionalPrecisionContext {
		let _localctx: FractionalPrecisionContext = new FractionalPrecisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, MultiQueryMySQLParser.RULE_fractionalPrecision);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6250;
			if (!(this.serverVersion >= 50604)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50604");
			}
			this.state = 6251;
			this.match(MultiQueryMySQLParser.INT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public weightStringLevels(): WeightStringLevelsContext {
		let _localctx: WeightStringLevelsContext = new WeightStringLevelsContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, MultiQueryMySQLParser.RULE_weightStringLevels);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6253;
			this.match(MultiQueryMySQLParser.LEVEL_SYMBOL);
			this.state = 6266;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 780, this._ctx) ) {
			case 1:
				{
				this.state = 6254;
				this.real_ulong_number();
				this.state = 6255;
				this.match(MultiQueryMySQLParser.MINUS_OPERATOR);
				this.state = 6256;
				this.real_ulong_number();
				}
				break;

			case 2:
				{
				this.state = 6258;
				this.weightStringLevelListItem();
				this.state = 6263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					{
					this.state = 6259;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6260;
					this.weightStringLevelListItem();
					}
					}
					this.state = 6265;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public weightStringLevelListItem(): WeightStringLevelListItemContext {
		let _localctx: WeightStringLevelListItemContext = new WeightStringLevelListItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, MultiQueryMySQLParser.RULE_weightStringLevelListItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6268;
			this.real_ulong_number();
			this.state = 6274;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ASC_SYMBOL:
			case MultiQueryMySQLParser.DESC_SYMBOL:
				{
				this.state = 6269;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.ASC_SYMBOL || _la === MultiQueryMySQLParser.DESC_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.REVERSE_SYMBOL) {
					{
					this.state = 6270;
					this.match(MultiQueryMySQLParser.REVERSE_SYMBOL);
					}
				}

				}
				break;
			case MultiQueryMySQLParser.REVERSE_SYMBOL:
				{
				this.state = 6273;
				this.match(MultiQueryMySQLParser.REVERSE_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.COMMA_SYMBOL:
			case MultiQueryMySQLParser.CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateTimeTtype(): DateTimeTtypeContext {
		let _localctx: DateTimeTtypeContext = new DateTimeTtypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, MultiQueryMySQLParser.RULE_dateTimeTtype);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6276;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DATETIME_SYMBOL || _la === MultiQueryMySQLParser.DATE_SYMBOL || _la === MultiQueryMySQLParser.TIMESTAMP_SYMBOL || _la === MultiQueryMySQLParser.TIME_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public trimFunction(): TrimFunctionContext {
		let _localctx: TrimFunctionContext = new TrimFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, MultiQueryMySQLParser.RULE_trimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6278;
			this.match(MultiQueryMySQLParser.TRIM_SYMBOL);
			this.state = 6279;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6303;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 787, this._ctx) ) {
			case 1:
				{
				this.state = 6280;
				this.expr(0);
				this.state = 6283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FROM_SYMBOL) {
					{
					this.state = 6281;
					this.match(MultiQueryMySQLParser.FROM_SYMBOL);
					this.state = 6282;
					this.expr(0);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 6285;
				this.match(MultiQueryMySQLParser.LEADING_SYMBOL);
				this.state = 6287;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 784, this._ctx) ) {
				case 1:
					{
					this.state = 6286;
					this.expr(0);
					}
					break;
				}
				this.state = 6289;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 6290;
				this.expr(0);
				}
				break;

			case 3:
				{
				this.state = 6291;
				this.match(MultiQueryMySQLParser.TRAILING_SYMBOL);
				this.state = 6293;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 785, this._ctx) ) {
				case 1:
					{
					this.state = 6292;
					this.expr(0);
					}
					break;
				}
				this.state = 6295;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 6296;
				this.expr(0);
				}
				break;

			case 4:
				{
				this.state = 6297;
				this.match(MultiQueryMySQLParser.BOTH_SYMBOL);
				this.state = 6299;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 786, this._ctx) ) {
				case 1:
					{
					this.state = 6298;
					this.expr(0);
					}
					break;
				}
				this.state = 6301;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 6302;
				this.expr(0);
				}
				break;
			}
			this.state = 6305;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public substringFunction(): SubstringFunctionContext {
		let _localctx: SubstringFunctionContext = new SubstringFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, MultiQueryMySQLParser.RULE_substringFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6307;
			this.match(MultiQueryMySQLParser.SUBSTRING_SYMBOL);
			this.state = 6308;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6309;
			this.expr(0);
			this.state = 6322;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.COMMA_SYMBOL:
				{
				this.state = 6310;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6311;
				this.expr(0);
				this.state = 6314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					this.state = 6312;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6313;
					this.expr(0);
					}
				}

				}
				break;
			case MultiQueryMySQLParser.FROM_SYMBOL:
				{
				this.state = 6316;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				this.state = 6317;
				this.expr(0);
				this.state = 6320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.FOR_SYMBOL) {
					{
					this.state = 6318;
					this.match(MultiQueryMySQLParser.FOR_SYMBOL);
					this.state = 6319;
					this.expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6324;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let _localctx: FunctionCallContext = new FunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, MultiQueryMySQLParser.RULE_functionCall);
		try {
			this.state = 6340;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 793, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6326;
				this.pureIdentifier();
				this.state = 6327;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6329;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 791, this._ctx) ) {
				case 1:
					{
					this.state = 6328;
					this.udfExprList();
					}
					break;
				}
				this.state = 6331;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6333;
				this.qualifiedIdentifier();
				this.state = 6334;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6336;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 792, this._ctx) ) {
				case 1:
					{
					this.state = 6335;
					this.exprList();
					}
					break;
				}
				this.state = 6338;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public udfExprList(): UdfExprListContext {
		let _localctx: UdfExprListContext = new UdfExprListContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, MultiQueryMySQLParser.RULE_udfExprList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6342;
			this.udfExpr();
			this.state = 6347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 6343;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6344;
				this.udfExpr();
				}
				}
				this.state = 6349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public udfExpr(): UdfExprContext {
		let _localctx: UdfExprContext = new UdfExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, MultiQueryMySQLParser.RULE_udfExpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6350;
			this.expr(0);
			this.state = 6352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 795, this._ctx) ) {
			case 1:
				{
				this.state = 6351;
				this.selectAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable(): VariableContext {
		let _localctx: VariableContext = new VariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, MultiQueryMySQLParser.RULE_variable);
		try {
			this.state = 6360;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.AT_SIGN_SYMBOL:
			case MultiQueryMySQLParser.AT_TEXT_SUFFIX:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6354;
				this.userVariable();
				this.state = 6357;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 796, this._ctx) ) {
				case 1:
					{
					this.state = 6355;
					this.match(MultiQueryMySQLParser.ASSIGN_OPERATOR);
					this.state = 6356;
					this.expr(0);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6359;
				this.systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userVariable(): UserVariableContext {
		let _localctx: UserVariableContext = new UserVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, MultiQueryMySQLParser.RULE_userVariable);
		try {
			this.state = 6365;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.AT_SIGN_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6362;
				this.match(MultiQueryMySQLParser.AT_SIGN_SYMBOL);
				this.state = 6363;
				this.textOrIdentifier();
				}
				break;
			case MultiQueryMySQLParser.AT_TEXT_SUFFIX:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6364;
				this.match(MultiQueryMySQLParser.AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public systemVariable(): SystemVariableContext {
		let _localctx: SystemVariableContext = new SystemVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, MultiQueryMySQLParser.RULE_systemVariable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6367;
			this.match(MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL);
			this.state = 6369;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 799, this._ctx) ) {
			case 1:
				{
				this.state = 6368;
				this.varIdentType();
				}
				break;
			}
			this.state = 6371;
			this.textOrIdentifier();
			this.state = 6373;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 800, this._ctx) ) {
			case 1:
				{
				this.state = 6372;
				this.dotIdentifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public internalVariableName(): InternalVariableNameContext {
		let _localctx: InternalVariableNameContext = new InternalVariableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, MultiQueryMySQLParser.RULE_internalVariableName);
		let _la: number;
		try {
			this.state = 6389;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 804, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6385;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 803, this._ctx) ) {
				case 1:
					{
					this.state = 6375;
					if (!(this.serverVersion < 80017)) {
						throw new FailedPredicateException(this, "this.serverVersion < 80017");
					}
					this.state = 6376;
					this.identifier();
					this.state = 6378;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.DOT_SYMBOL) {
						{
						this.state = 6377;
						this.dotIdentifier();
						}
					}

					}
					break;

				case 2:
					{
					this.state = 6380;
					if (!(this.serverVersion >= 80017)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80017");
					}
					this.state = 6381;
					this.lValueIdentifier();
					this.state = 6383;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.DOT_SYMBOL) {
						{
						this.state = 6382;
						this.dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6387;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 6388;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenExpression(): WhenExpressionContext {
		let _localctx: WhenExpressionContext = new WhenExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, MultiQueryMySQLParser.RULE_whenExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6391;
			this.match(MultiQueryMySQLParser.WHEN_SYMBOL);
			this.state = 6392;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public thenExpression(): ThenExpressionContext {
		let _localctx: ThenExpressionContext = new ThenExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, MultiQueryMySQLParser.RULE_thenExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6394;
			this.match(MultiQueryMySQLParser.THEN_SYMBOL);
			this.state = 6395;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elseExpression(): ElseExpressionContext {
		let _localctx: ElseExpressionContext = new ElseExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, MultiQueryMySQLParser.RULE_elseExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6397;
			this.match(MultiQueryMySQLParser.ELSE_SYMBOL);
			this.state = 6398;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public castType(): CastTypeContext {
		let _localctx: CastTypeContext = new CastTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, MultiQueryMySQLParser.RULE_castType);
		try {
			this.state = 6445;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 815, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6400;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				this.state = 6402;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 805, this._ctx) ) {
				case 1:
					{
					this.state = 6401;
					this.fieldLength();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6404;
				this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
				this.state = 6406;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 806, this._ctx) ) {
				case 1:
					{
					this.state = 6405;
					this.fieldLength();
					}
					break;
				}
				this.state = 6409;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 807, this._ctx) ) {
				case 1:
					{
					this.state = 6408;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6411;
				this.nchar();
				this.state = 6413;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 808, this._ctx) ) {
				case 1:
					{
					this.state = 6412;
					this.fieldLength();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6415;
				this.match(MultiQueryMySQLParser.SIGNED_SYMBOL);
				this.state = 6417;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 809, this._ctx) ) {
				case 1:
					{
					this.state = 6416;
					this.match(MultiQueryMySQLParser.INT_SYMBOL);
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6419;
				this.match(MultiQueryMySQLParser.UNSIGNED_SYMBOL);
				this.state = 6421;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 810, this._ctx) ) {
				case 1:
					{
					this.state = 6420;
					this.match(MultiQueryMySQLParser.INT_SYMBOL);
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6423;
				this.match(MultiQueryMySQLParser.DATE_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6424;
				this.match(MultiQueryMySQLParser.TIME_SYMBOL);
				this.state = 6426;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 811, this._ctx) ) {
				case 1:
					{
					this.state = 6425;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6428;
				this.match(MultiQueryMySQLParser.DATETIME_SYMBOL);
				this.state = 6430;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 812, this._ctx) ) {
				case 1:
					{
					this.state = 6429;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6432;
				this.match(MultiQueryMySQLParser.DECIMAL_SYMBOL);
				this.state = 6434;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 813, this._ctx) ) {
				case 1:
					{
					this.state = 6433;
					this.floatOptions();
					}
					break;
				}
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6436;
				if (!(this.serverVersion >= 50708)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50708");
				}
				this.state = 6437;
				this.match(MultiQueryMySQLParser.JSON_SYMBOL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6438;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 6439;
				this.realType();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6440;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 6441;
				this.match(MultiQueryMySQLParser.FLOAT_SYMBOL);
				this.state = 6443;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 814, this._ctx) ) {
				case 1:
					{
					this.state = 6442;
					this.standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exprList(): ExprListContext {
		let _localctx: ExprListContext = new ExprListContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, MultiQueryMySQLParser.RULE_exprList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6447;
			this.expr(0);
			this.state = 6452;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 816, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6448;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6449;
					this.expr(0);
					}
					}
				}
				this.state = 6454;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 816, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charset(): CharsetContext {
		let _localctx: CharsetContext = new CharsetContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, MultiQueryMySQLParser.RULE_charset);
		try {
			this.state = 6458;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CHAR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6455;
				this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
				this.state = 6456;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.CHARSET_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6457;
				this.match(MultiQueryMySQLParser.CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notRule(): NotRuleContext {
		let _localctx: NotRuleContext = new NotRuleContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, MultiQueryMySQLParser.RULE_notRule);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6460;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.NOT2_SYMBOL || _la === MultiQueryMySQLParser.NOT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public not2Rule(): Not2RuleContext {
		let _localctx: Not2RuleContext = new Not2RuleContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, MultiQueryMySQLParser.RULE_not2Rule);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6462;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.NOT2_SYMBOL || _la === MultiQueryMySQLParser.LOGICAL_NOT_OPERATOR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interval(): IntervalContext {
		let _localctx: IntervalContext = new IntervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, MultiQueryMySQLParser.RULE_interval);
		let _la: number;
		try {
			this.state = 6466;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.DAY_SYMBOL:
			case MultiQueryMySQLParser.HOUR_SYMBOL:
			case MultiQueryMySQLParser.MICROSECOND_SYMBOL:
			case MultiQueryMySQLParser.MINUTE_SYMBOL:
			case MultiQueryMySQLParser.MONTH_SYMBOL:
			case MultiQueryMySQLParser.QUARTER_SYMBOL:
			case MultiQueryMySQLParser.SECOND_SYMBOL:
			case MultiQueryMySQLParser.WEEK_SYMBOL:
			case MultiQueryMySQLParser.YEAR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6464;
				this.intervalTimeStamp();
				}
				break;
			case MultiQueryMySQLParser.DAY_HOUR_SYMBOL:
			case MultiQueryMySQLParser.DAY_MICROSECOND_SYMBOL:
			case MultiQueryMySQLParser.DAY_MINUTE_SYMBOL:
			case MultiQueryMySQLParser.DAY_SECOND_SYMBOL:
			case MultiQueryMySQLParser.HOUR_MICROSECOND_SYMBOL:
			case MultiQueryMySQLParser.HOUR_MINUTE_SYMBOL:
			case MultiQueryMySQLParser.HOUR_SECOND_SYMBOL:
			case MultiQueryMySQLParser.MINUTE_MICROSECOND_SYMBOL:
			case MultiQueryMySQLParser.MINUTE_SECOND_SYMBOL:
			case MultiQueryMySQLParser.SECOND_MICROSECOND_SYMBOL:
			case MultiQueryMySQLParser.YEAR_MONTH_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6465;
				_la = this._input.LA(1);
				if (!(((((_la - 471)) & ~0x1F) === 0 && ((1 << (_la - 471)) & ((1 << (MultiQueryMySQLParser.DAY_HOUR_SYMBOL - 471)) | (1 << (MultiQueryMySQLParser.DAY_MICROSECOND_SYMBOL - 471)) | (1 << (MultiQueryMySQLParser.DAY_MINUTE_SYMBOL - 471)) | (1 << (MultiQueryMySQLParser.DAY_SECOND_SYMBOL - 471)))) !== 0) || ((((_la - 516)) & ~0x1F) === 0 && ((1 << (_la - 516)) & ((1 << (MultiQueryMySQLParser.HOUR_MICROSECOND_SYMBOL - 516)) | (1 << (MultiQueryMySQLParser.HOUR_MINUTE_SYMBOL - 516)) | (1 << (MultiQueryMySQLParser.HOUR_SECOND_SYMBOL - 516)))) !== 0) || _la === MultiQueryMySQLParser.MINUTE_MICROSECOND_SYMBOL || _la === MultiQueryMySQLParser.MINUTE_SECOND_SYMBOL || _la === MultiQueryMySQLParser.SECOND_MICROSECOND_SYMBOL || _la === MultiQueryMySQLParser.YEAR_MONTH_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalTimeStamp(): IntervalTimeStampContext {
		let _localctx: IntervalTimeStampContext = new IntervalTimeStampContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, MultiQueryMySQLParser.RULE_intervalTimeStamp);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6468;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DAY_SYMBOL || _la === MultiQueryMySQLParser.HOUR_SYMBOL || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MultiQueryMySQLParser.MICROSECOND_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MINUTE_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MONTH_SYMBOL - 217)))) !== 0) || _la === MultiQueryMySQLParser.QUARTER_SYMBOL || _la === MultiQueryMySQLParser.SECOND_SYMBOL || _la === MultiQueryMySQLParser.WEEK_SYMBOL || _la === MultiQueryMySQLParser.YEAR_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exprListWithParentheses(): ExprListWithParenthesesContext {
		let _localctx: ExprListWithParenthesesContext = new ExprListWithParenthesesContext(this._ctx, this.state);
		this.enterRule(_localctx, 760, MultiQueryMySQLParser.RULE_exprListWithParentheses);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6470;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6471;
			this.exprList();
			this.state = 6472;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exprWithParentheses(): ExprWithParenthesesContext {
		let _localctx: ExprWithParenthesesContext = new ExprWithParenthesesContext(this._ctx, this.state);
		this.enterRule(_localctx, 762, MultiQueryMySQLParser.RULE_exprWithParentheses);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6474;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6475;
			this.expr(0);
			this.state = 6476;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
		let _localctx: SimpleExprWithParenthesesContext = new SimpleExprWithParenthesesContext(this._ctx, this.state);
		this.enterRule(_localctx, 764, MultiQueryMySQLParser.RULE_simpleExprWithParentheses);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6478;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6479;
			this.simpleExpr(0);
			this.state = 6480;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderList(): OrderListContext {
		let _localctx: OrderListContext = new OrderListContext(this._ctx, this.state);
		this.enterRule(_localctx, 766, MultiQueryMySQLParser.RULE_orderList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6482;
			this.orderExpression();
			this.state = 6487;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 819, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6483;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6484;
					this.orderExpression();
					}
					}
				}
				this.state = 6489;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 819, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderExpression(): OrderExpressionContext {
		let _localctx: OrderExpressionContext = new OrderExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 768, MultiQueryMySQLParser.RULE_orderExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6490;
			this.expr(0);
			this.state = 6492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 820, this._ctx) ) {
			case 1:
				{
				this.state = 6491;
				this.direction();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupList(): GroupListContext {
		let _localctx: GroupListContext = new GroupListContext(this._ctx, this.state);
		this.enterRule(_localctx, 770, MultiQueryMySQLParser.RULE_groupList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6494;
			this.groupingExpression();
			this.state = 6499;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 6495;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 6496;
				this.groupingExpression();
				}
				}
				this.state = 6501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingExpression(): GroupingExpressionContext {
		let _localctx: GroupingExpressionContext = new GroupingExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 772, MultiQueryMySQLParser.RULE_groupingExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6502;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public channel(): ChannelContext {
		let _localctx: ChannelContext = new ChannelContext(this._ctx, this.state);
		this.enterRule(_localctx, 774, MultiQueryMySQLParser.RULE_channel);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6504;
			if (!(this.serverVersion >= 50706)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50706");
			}
			this.state = 6505;
			this.match(MultiQueryMySQLParser.FOR_SYMBOL);
			this.state = 6506;
			this.match(MultiQueryMySQLParser.CHANNEL_SYMBOL);
			this.state = 6507;
			this.textStringNoLinebreak();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compoundStatement(): CompoundStatementContext {
		let _localctx: CompoundStatementContext = new CompoundStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 776, MultiQueryMySQLParser.RULE_compoundStatement);
		try {
			this.state = 6522;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 822, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6509;
				this.simpleStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6510;
				this.returnStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6511;
				this.ifStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6512;
				this.caseStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6513;
				this.labeledBlock();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6514;
				this.unlabeledBlock();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6515;
				this.labeledControl();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6516;
				this.unlabeledControl();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6517;
				this.leaveStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6518;
				this.iterateStatement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6519;
				this.cursorOpen();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6520;
				this.cursorFetch();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6521;
				this.cursorClose();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let _localctx: ReturnStatementContext = new ReturnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 778, MultiQueryMySQLParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6524;
			this.match(MultiQueryMySQLParser.RETURN_SYMBOL);
			this.state = 6525;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let _localctx: IfStatementContext = new IfStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 780, MultiQueryMySQLParser.RULE_ifStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6527;
			this.match(MultiQueryMySQLParser.IF_SYMBOL);
			this.state = 6528;
			this.ifBody();
			this.state = 6529;
			this.match(MultiQueryMySQLParser.END_SYMBOL);
			this.state = 6530;
			this.match(MultiQueryMySQLParser.IF_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifBody(): IfBodyContext {
		let _localctx: IfBodyContext = new IfBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 782, MultiQueryMySQLParser.RULE_ifBody);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6532;
			this.expr(0);
			this.state = 6533;
			this.thenStatement();
			this.state = 6538;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ELSEIF_SYMBOL:
				{
				this.state = 6534;
				this.match(MultiQueryMySQLParser.ELSEIF_SYMBOL);
				this.state = 6535;
				this.ifBody();
				}
				break;
			case MultiQueryMySQLParser.ELSE_SYMBOL:
				{
				this.state = 6536;
				this.match(MultiQueryMySQLParser.ELSE_SYMBOL);
				this.state = 6537;
				this.compoundStatementList();
				}
				break;
			case MultiQueryMySQLParser.END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public thenStatement(): ThenStatementContext {
		let _localctx: ThenStatementContext = new ThenStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 784, MultiQueryMySQLParser.RULE_thenStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6540;
			this.match(MultiQueryMySQLParser.THEN_SYMBOL);
			this.state = 6541;
			this.compoundStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compoundStatementList(): CompoundStatementListContext {
		let _localctx: CompoundStatementListContext = new CompoundStatementListContext(this._ctx, this.state);
		this.enterRule(_localctx, 786, MultiQueryMySQLParser.RULE_compoundStatementList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6546;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6543;
					this.compoundStatement();
					this.state = 6544;
					this.match(MultiQueryMySQLParser.SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6548;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 824, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseStatement(): CaseStatementContext {
		let _localctx: CaseStatementContext = new CaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 788, MultiQueryMySQLParser.RULE_caseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6550;
			this.match(MultiQueryMySQLParser.CASE_SYMBOL);
			this.state = 6552;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 825, this._ctx) ) {
			case 1:
				{
				this.state = 6551;
				this.expr(0);
				}
				break;
			}
			this.state = 6557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6554;
				this.whenExpression();
				this.state = 6555;
				this.thenStatement();
				}
				}
				this.state = 6559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MultiQueryMySQLParser.WHEN_SYMBOL);
			this.state = 6562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ELSE_SYMBOL) {
				{
				this.state = 6561;
				this.elseStatement();
				}
			}

			this.state = 6564;
			this.match(MultiQueryMySQLParser.END_SYMBOL);
			this.state = 6565;
			this.match(MultiQueryMySQLParser.CASE_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elseStatement(): ElseStatementContext {
		let _localctx: ElseStatementContext = new ElseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 790, MultiQueryMySQLParser.RULE_elseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6567;
			this.match(MultiQueryMySQLParser.ELSE_SYMBOL);
			this.state = 6568;
			this.compoundStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labeledBlock(): LabeledBlockContext {
		let _localctx: LabeledBlockContext = new LabeledBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 792, MultiQueryMySQLParser.RULE_labeledBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6570;
			this.label();
			this.state = 6571;
			this.beginEndBlock();
			this.state = 6573;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 828, this._ctx) ) {
			case 1:
				{
				this.state = 6572;
				this.labelRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlabeledBlock(): UnlabeledBlockContext {
		let _localctx: UnlabeledBlockContext = new UnlabeledBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 794, MultiQueryMySQLParser.RULE_unlabeledBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6575;
			this.beginEndBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 796, MultiQueryMySQLParser.RULE_label);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6577;
			this.labelIdentifier();
			this.state = 6578;
			this.match(MultiQueryMySQLParser.COLON_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beginEndBlock(): BeginEndBlockContext {
		let _localctx: BeginEndBlockContext = new BeginEndBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 798, MultiQueryMySQLParser.RULE_beginEndBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6580;
			this.match(MultiQueryMySQLParser.BEGIN_SYMBOL);
			this.state = 6582;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 829, this._ctx) ) {
			case 1:
				{
				this.state = 6581;
				this.spDeclarations();
				}
				break;
			}
			this.state = 6585;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 830, this._ctx) ) {
			case 1:
				{
				this.state = 6584;
				this.compoundStatementList();
				}
				break;
			}
			this.state = 6587;
			this.match(MultiQueryMySQLParser.END_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labeledControl(): LabeledControlContext {
		let _localctx: LabeledControlContext = new LabeledControlContext(this._ctx, this.state);
		this.enterRule(_localctx, 800, MultiQueryMySQLParser.RULE_labeledControl);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6589;
			this.label();
			this.state = 6590;
			this.unlabeledControl();
			this.state = 6592;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 831, this._ctx) ) {
			case 1:
				{
				this.state = 6591;
				this.labelRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlabeledControl(): UnlabeledControlContext {
		let _localctx: UnlabeledControlContext = new UnlabeledControlContext(this._ctx, this.state);
		this.enterRule(_localctx, 802, MultiQueryMySQLParser.RULE_unlabeledControl);
		try {
			this.state = 6597;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.LOOP_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6594;
				this.loopBlock();
				}
				break;
			case MultiQueryMySQLParser.WHILE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6595;
				this.whileDoBlock();
				}
				break;
			case MultiQueryMySQLParser.REPEAT_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6596;
				this.repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loopBlock(): LoopBlockContext {
		let _localctx: LoopBlockContext = new LoopBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 804, MultiQueryMySQLParser.RULE_loopBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6599;
			this.match(MultiQueryMySQLParser.LOOP_SYMBOL);
			this.state = 6600;
			this.compoundStatementList();
			this.state = 6601;
			this.match(MultiQueryMySQLParser.END_SYMBOL);
			this.state = 6602;
			this.match(MultiQueryMySQLParser.LOOP_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whileDoBlock(): WhileDoBlockContext {
		let _localctx: WhileDoBlockContext = new WhileDoBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 806, MultiQueryMySQLParser.RULE_whileDoBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6604;
			this.match(MultiQueryMySQLParser.WHILE_SYMBOL);
			this.state = 6605;
			this.expr(0);
			this.state = 6606;
			this.match(MultiQueryMySQLParser.DO_SYMBOL);
			this.state = 6607;
			this.compoundStatementList();
			this.state = 6608;
			this.match(MultiQueryMySQLParser.END_SYMBOL);
			this.state = 6609;
			this.match(MultiQueryMySQLParser.WHILE_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repeatUntilBlock(): RepeatUntilBlockContext {
		let _localctx: RepeatUntilBlockContext = new RepeatUntilBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 808, MultiQueryMySQLParser.RULE_repeatUntilBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6611;
			this.match(MultiQueryMySQLParser.REPEAT_SYMBOL);
			this.state = 6612;
			this.compoundStatementList();
			this.state = 6613;
			this.match(MultiQueryMySQLParser.UNTIL_SYMBOL);
			this.state = 6614;
			this.expr(0);
			this.state = 6615;
			this.match(MultiQueryMySQLParser.END_SYMBOL);
			this.state = 6616;
			this.match(MultiQueryMySQLParser.REPEAT_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public spDeclarations(): SpDeclarationsContext {
		let _localctx: SpDeclarationsContext = new SpDeclarationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 810, MultiQueryMySQLParser.RULE_spDeclarations);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6621;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6618;
					this.spDeclaration();
					this.state = 6619;
					this.match(MultiQueryMySQLParser.SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6623;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 833, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public spDeclaration(): SpDeclarationContext {
		let _localctx: SpDeclarationContext = new SpDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 812, MultiQueryMySQLParser.RULE_spDeclaration);
		try {
			this.state = 6629;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 834, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6625;
				this.variableDeclaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6626;
				this.conditionDeclaration();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6627;
				this.handlerDeclaration();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6628;
				this.cursorDeclaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableDeclaration(): VariableDeclarationContext {
		let _localctx: VariableDeclarationContext = new VariableDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 814, MultiQueryMySQLParser.RULE_variableDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6631;
			this.match(MultiQueryMySQLParser.DECLARE_SYMBOL);
			this.state = 6632;
			this.identifierList();
			this.state = 6633;
			this.dataType();
			this.state = 6635;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.COLLATE_SYMBOL) {
				{
				this.state = 6634;
				this.collate();
				}
			}

			this.state = 6639;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFAULT_SYMBOL) {
				{
				this.state = 6637;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 6638;
				this.expr(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditionDeclaration(): ConditionDeclarationContext {
		let _localctx: ConditionDeclarationContext = new ConditionDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 816, MultiQueryMySQLParser.RULE_conditionDeclaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6641;
			this.match(MultiQueryMySQLParser.DECLARE_SYMBOL);
			this.state = 6642;
			this.identifier();
			this.state = 6643;
			this.match(MultiQueryMySQLParser.CONDITION_SYMBOL);
			this.state = 6644;
			this.match(MultiQueryMySQLParser.FOR_SYMBOL);
			this.state = 6645;
			this.spCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public spCondition(): SpConditionContext {
		let _localctx: SpConditionContext = new SpConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 818, MultiQueryMySQLParser.RULE_spCondition);
		try {
			this.state = 6649;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INT_NUMBER:
			case MultiQueryMySQLParser.LONG_NUMBER:
			case MultiQueryMySQLParser.ULONGLONG_NUMBER:
			case MultiQueryMySQLParser.HEX_NUMBER:
			case MultiQueryMySQLParser.DECIMAL_NUMBER:
			case MultiQueryMySQLParser.FLOAT_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6647;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.SQLSTATE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6648;
				this.sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlstate(): SqlstateContext {
		let _localctx: SqlstateContext = new SqlstateContext(this._ctx, this.state);
		this.enterRule(_localctx, 820, MultiQueryMySQLParser.RULE_sqlstate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6651;
			this.match(MultiQueryMySQLParser.SQLSTATE_SYMBOL);
			this.state = 6653;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 838, this._ctx) ) {
			case 1:
				{
				this.state = 6652;
				this.match(MultiQueryMySQLParser.VALUE_SYMBOL);
				}
				break;
			}
			this.state = 6655;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerDeclaration(): HandlerDeclarationContext {
		let _localctx: HandlerDeclarationContext = new HandlerDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 822, MultiQueryMySQLParser.RULE_handlerDeclaration);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6657;
			this.match(MultiQueryMySQLParser.DECLARE_SYMBOL);
			this.state = 6658;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.CONTINUE_SYMBOL || _la === MultiQueryMySQLParser.EXIT_SYMBOL || _la === MultiQueryMySQLParser.UNDO_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6659;
			this.match(MultiQueryMySQLParser.HANDLER_SYMBOL);
			this.state = 6660;
			this.match(MultiQueryMySQLParser.FOR_SYMBOL);
			this.state = 6661;
			this.handlerCondition();
			this.state = 6666;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 839, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6662;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 6663;
					this.handlerCondition();
					}
					}
				}
				this.state = 6668;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 839, this._ctx);
			}
			this.state = 6669;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerCondition(): HandlerConditionContext {
		let _localctx: HandlerConditionContext = new HandlerConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 824, MultiQueryMySQLParser.RULE_handlerCondition);
		try {
			this.state = 6678;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 840, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6671;
				this.spCondition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6672;
				this.identifier();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6673;
				this.match(MultiQueryMySQLParser.SQLWARNING_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6674;
				this.notRule();
				this.state = 6675;
				this.match(MultiQueryMySQLParser.FOUND_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6677;
				this.match(MultiQueryMySQLParser.SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorDeclaration(): CursorDeclarationContext {
		let _localctx: CursorDeclarationContext = new CursorDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 826, MultiQueryMySQLParser.RULE_cursorDeclaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6680;
			this.match(MultiQueryMySQLParser.DECLARE_SYMBOL);
			this.state = 6681;
			this.identifier();
			this.state = 6682;
			this.match(MultiQueryMySQLParser.CURSOR_SYMBOL);
			this.state = 6683;
			this.match(MultiQueryMySQLParser.FOR_SYMBOL);
			this.state = 6684;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public iterateStatement(): IterateStatementContext {
		let _localctx: IterateStatementContext = new IterateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 828, MultiQueryMySQLParser.RULE_iterateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6686;
			this.match(MultiQueryMySQLParser.ITERATE_SYMBOL);
			this.state = 6687;
			this.labelRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leaveStatement(): LeaveStatementContext {
		let _localctx: LeaveStatementContext = new LeaveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 830, MultiQueryMySQLParser.RULE_leaveStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6689;
			this.match(MultiQueryMySQLParser.LEAVE_SYMBOL);
			this.state = 6690;
			this.labelRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public getDiagnostics(): GetDiagnosticsContext {
		let _localctx: GetDiagnosticsContext = new GetDiagnosticsContext(this._ctx, this.state);
		this.enterRule(_localctx, 832, MultiQueryMySQLParser.RULE_getDiagnostics);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6692;
			this.match(MultiQueryMySQLParser.GET_SYMBOL);
			this.state = 6696;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 841, this._ctx) ) {
			case 1:
				{
				this.state = 6693;
				this.match(MultiQueryMySQLParser.CURRENT_SYMBOL);
				}
				break;

			case 2:
				{
				this.state = 6694;
				if (!(this.serverVersion >= 50700)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50700");
				}
				this.state = 6695;
				this.match(MultiQueryMySQLParser.STACKED_SYMBOL);
				}
				break;
			}
			this.state = 6698;
			this.match(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL);
			this.state = 6717;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 844, this._ctx) ) {
			case 1:
				{
				this.state = 6699;
				this.statementInformationItem();
				this.state = 6704;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 842, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6700;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 6701;
						this.statementInformationItem();
						}
						}
					}
					this.state = 6706;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 842, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 6707;
				this.match(MultiQueryMySQLParser.CONDITION_SYMBOL);
				this.state = 6708;
				this.signalAllowedExpr();
				this.state = 6709;
				this.conditionInformationItem();
				this.state = 6714;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 843, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6710;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 6711;
						this.conditionInformationItem();
						}
						}
					}
					this.state = 6716;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 843, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalAllowedExpr(): SignalAllowedExprContext {
		let _localctx: SignalAllowedExprContext = new SignalAllowedExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 834, MultiQueryMySQLParser.RULE_signalAllowedExpr);
		try {
			this.state = 6722;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 845, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6719;
				this.literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6720;
				this.variable();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6721;
				this.qualifiedIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statementInformationItem(): StatementInformationItemContext {
		let _localctx: StatementInformationItemContext = new StatementInformationItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 836, MultiQueryMySQLParser.RULE_statementInformationItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6726;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 846, this._ctx) ) {
			case 1:
				{
				this.state = 6724;
				this.variable();
				}
				break;

			case 2:
				{
				this.state = 6725;
				this.identifier();
				}
				break;
			}
			this.state = 6728;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 6729;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.NUMBER_SYMBOL || _la === MultiQueryMySQLParser.ROW_COUNT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditionInformationItem(): ConditionInformationItemContext {
		let _localctx: ConditionInformationItemContext = new ConditionInformationItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 838, MultiQueryMySQLParser.RULE_conditionInformationItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6733;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 847, this._ctx) ) {
			case 1:
				{
				this.state = 6731;
				this.variable();
				}
				break;

			case 2:
				{
				this.state = 6732;
				this.identifier();
				}
				break;
			}
			this.state = 6735;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 6738;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CATALOG_NAME_SYMBOL:
			case MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL:
			case MultiQueryMySQLParser.COLUMN_NAME_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL:
			case MultiQueryMySQLParser.CURSOR_NAME_SYMBOL:
			case MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL:
			case MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL:
			case MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL:
			case MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL:
			case MultiQueryMySQLParser.TABLE_NAME_SYMBOL:
				{
				this.state = 6736;
				this.signalInformationItemName();
				}
				break;
			case MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL:
				{
				this.state = 6737;
				this.match(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalInformationItemName(): SignalInformationItemNameContext {
		let _localctx: SignalInformationItemNameContext = new SignalInformationItemNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 840, MultiQueryMySQLParser.RULE_signalInformationItemName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6740;
			_la = this._input.LA(1);
			if (!(((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (MultiQueryMySQLParser.CATALOG_NAME_SYMBOL - 78)) | (1 << (MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL - 78)) | (1 << (MultiQueryMySQLParser.COLUMN_NAME_SYMBOL - 78)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL - 78)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL - 78)) | (1 << (MultiQueryMySQLParser.CURSOR_NAME_SYMBOL - 78)))) !== 0) || _la === MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL || _la === MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL || _la === MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL || _la === MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL || _la === MultiQueryMySQLParser.TABLE_NAME_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalStatement(): SignalStatementContext {
		let _localctx: SignalStatementContext = new SignalStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 842, MultiQueryMySQLParser.RULE_signalStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6742;
			this.match(MultiQueryMySQLParser.SIGNAL_SYMBOL);
			this.state = 6745;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 849, this._ctx) ) {
			case 1:
				{
				this.state = 6743;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 6744;
				this.sqlstate();
				}
				break;
			}
			this.state = 6756;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 851, this._ctx) ) {
			case 1:
				{
				this.state = 6747;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 6748;
				this.signalInformationItem();
				this.state = 6753;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 850, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6749;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 6750;
						this.signalInformationItem();
						}
						}
					}
					this.state = 6755;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 850, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resignalStatement(): ResignalStatementContext {
		let _localctx: ResignalStatementContext = new ResignalStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 844, MultiQueryMySQLParser.RULE_resignalStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6758;
			this.match(MultiQueryMySQLParser.RESIGNAL_SYMBOL);
			this.state = 6764;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 853, this._ctx) ) {
			case 1:
				{
				this.state = 6759;
				this.match(MultiQueryMySQLParser.SQLSTATE_SYMBOL);
				this.state = 6761;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 852, this._ctx) ) {
				case 1:
					{
					this.state = 6760;
					this.match(MultiQueryMySQLParser.VALUE_SYMBOL);
					}
					break;
				}
				this.state = 6763;
				this.textOrIdentifier();
				}
				break;
			}
			this.state = 6775;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 855, this._ctx) ) {
			case 1:
				{
				this.state = 6766;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 6767;
				this.signalInformationItem();
				this.state = 6772;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 854, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6768;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						this.state = 6769;
						this.signalInformationItem();
						}
						}
					}
					this.state = 6774;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 854, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalInformationItem(): SignalInformationItemContext {
		let _localctx: SignalInformationItemContext = new SignalInformationItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 846, MultiQueryMySQLParser.RULE_signalInformationItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6777;
			this.signalInformationItemName();
			this.state = 6778;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 6779;
			this.signalAllowedExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorOpen(): CursorOpenContext {
		let _localctx: CursorOpenContext = new CursorOpenContext(this._ctx, this.state);
		this.enterRule(_localctx, 848, MultiQueryMySQLParser.RULE_cursorOpen);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6781;
			this.match(MultiQueryMySQLParser.OPEN_SYMBOL);
			this.state = 6782;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorClose(): CursorCloseContext {
		let _localctx: CursorCloseContext = new CursorCloseContext(this._ctx, this.state);
		this.enterRule(_localctx, 850, MultiQueryMySQLParser.RULE_cursorClose);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6784;
			this.match(MultiQueryMySQLParser.CLOSE_SYMBOL);
			this.state = 6785;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorFetch(): CursorFetchContext {
		let _localctx: CursorFetchContext = new CursorFetchContext(this._ctx, this.state);
		this.enterRule(_localctx, 852, MultiQueryMySQLParser.RULE_cursorFetch);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6787;
			this.match(MultiQueryMySQLParser.FETCH_SYMBOL);
			this.state = 6792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 857, this._ctx) ) {
			case 1:
				{
				this.state = 6789;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NEXT_SYMBOL) {
					{
					this.state = 6788;
					this.match(MultiQueryMySQLParser.NEXT_SYMBOL);
					}
				}

				this.state = 6791;
				this.match(MultiQueryMySQLParser.FROM_SYMBOL);
				}
				break;
			}
			this.state = 6794;
			this.identifier();
			this.state = 6795;
			this.match(MultiQueryMySQLParser.INTO_SYMBOL);
			this.state = 6796;
			this.identifierList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schedule(): ScheduleContext {
		let _localctx: ScheduleContext = new ScheduleContext(this._ctx, this.state);
		this.enterRule(_localctx, 854, MultiQueryMySQLParser.RULE_schedule);
		try {
			this.state = 6811;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.AT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6798;
				this.match(MultiQueryMySQLParser.AT_SYMBOL);
				this.state = 6799;
				this.expr(0);
				}
				break;
			case MultiQueryMySQLParser.EVERY_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6800;
				this.match(MultiQueryMySQLParser.EVERY_SYMBOL);
				this.state = 6801;
				this.expr(0);
				this.state = 6802;
				this.interval();
				this.state = 6805;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 858, this._ctx) ) {
				case 1:
					{
					this.state = 6803;
					this.match(MultiQueryMySQLParser.STARTS_SYMBOL);
					this.state = 6804;
					this.expr(0);
					}
					break;
				}
				this.state = 6809;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 859, this._ctx) ) {
				case 1:
					{
					this.state = 6807;
					this.match(MultiQueryMySQLParser.ENDS_SYMBOL);
					this.state = 6808;
					this.expr(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let _localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 856, MultiQueryMySQLParser.RULE_columnDefinition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6813;
			this.columnName();
			this.state = 6814;
			this.fieldDefinition();
			this.state = 6816;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
			case 1:
				{
				this.state = 6815;
				this.checkOrReferences();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkOrReferences(): CheckOrReferencesContext {
		let _localctx: CheckOrReferencesContext = new CheckOrReferencesContext(this._ctx, this.state);
		this.enterRule(_localctx, 858, MultiQueryMySQLParser.RULE_checkOrReferences);
		try {
			this.state = 6821;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 862, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6818;
				if (!(this.serverVersion < 80016)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80016");
				}
				this.state = 6819;
				this.checkConstraint();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6820;
				this.references();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkConstraint(): CheckConstraintContext {
		let _localctx: CheckConstraintContext = new CheckConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 860, MultiQueryMySQLParser.RULE_checkConstraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6823;
			this.match(MultiQueryMySQLParser.CHECK_SYMBOL);
			this.state = 6824;
			this.exprWithParentheses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintEnforcement(): ConstraintEnforcementContext {
		let _localctx: ConstraintEnforcementContext = new ConstraintEnforcementContext(this._ctx, this.state);
		this.enterRule(_localctx, 862, MultiQueryMySQLParser.RULE_constraintEnforcement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.NOT_SYMBOL) {
				{
				this.state = 6826;
				this.match(MultiQueryMySQLParser.NOT_SYMBOL);
				}
			}

			this.state = 6829;
			this.match(MultiQueryMySQLParser.ENFORCED_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableConstraintDef(): TableConstraintDefContext {
		let _localctx: TableConstraintDefContext = new TableConstraintDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 864, MultiQueryMySQLParser.RULE_tableConstraintDef);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6906;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INDEX_SYMBOL:
			case MultiQueryMySQLParser.KEY_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6831;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.INDEX_SYMBOL || _la === MultiQueryMySQLParser.KEY_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6833;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 864, this._ctx) ) {
				case 1:
					{
					this.state = 6832;
					this.indexNameAndType();
					}
					break;
				}
				this.state = 6835;
				this.keyListVariants();
				this.state = 6839;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 865, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6836;
						this.indexOption();
						}
						}
					}
					this.state = 6841;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 865, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.FULLTEXT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6842;
				_localctx._type = this.match(MultiQueryMySQLParser.FULLTEXT_SYMBOL);
				this.state = 6844;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 866, this._ctx) ) {
				case 1:
					{
					this.state = 6843;
					this.keyOrIndex();
					}
					break;
				}
				this.state = 6847;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 867, this._ctx) ) {
				case 1:
					{
					this.state = 6846;
					this.indexName();
					}
					break;
				}
				this.state = 6849;
				this.keyListVariants();
				this.state = 6853;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 868, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6850;
						this.fulltextIndexOption();
						}
						}
					}
					this.state = 6855;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 868, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.SPATIAL_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6856;
				_localctx._type = this.match(MultiQueryMySQLParser.SPATIAL_SYMBOL);
				this.state = 6858;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 869, this._ctx) ) {
				case 1:
					{
					this.state = 6857;
					this.keyOrIndex();
					}
					break;
				}
				this.state = 6861;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 870, this._ctx) ) {
				case 1:
					{
					this.state = 6860;
					this.indexName();
					}
					break;
				}
				this.state = 6863;
				this.keyListVariants();
				this.state = 6867;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 871, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6864;
						this.spatialIndexOption();
						}
						}
					}
					this.state = 6869;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 871, this._ctx);
				}
				}
				break;
			case MultiQueryMySQLParser.CHECK_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_SYMBOL:
			case MultiQueryMySQLParser.FOREIGN_SYMBOL:
			case MultiQueryMySQLParser.PRIMARY_SYMBOL:
			case MultiQueryMySQLParser.UNIQUE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.CONSTRAINT_SYMBOL) {
					{
					this.state = 6870;
					this.constraintName();
					}
				}

				this.state = 6904;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.PRIMARY_SYMBOL:
				case MultiQueryMySQLParser.UNIQUE_SYMBOL:
					{
					this.state = 6879;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MultiQueryMySQLParser.PRIMARY_SYMBOL:
						{
						this.state = 6873;
						_localctx._type = this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
						this.state = 6874;
						this.match(MultiQueryMySQLParser.KEY_SYMBOL);
						}
						break;
					case MultiQueryMySQLParser.UNIQUE_SYMBOL:
						{
						this.state = 6875;
						_localctx._type = this.match(MultiQueryMySQLParser.UNIQUE_SYMBOL);
						this.state = 6877;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 873, this._ctx) ) {
						case 1:
							{
							this.state = 6876;
							this.keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6882;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 875, this._ctx) ) {
					case 1:
						{
						this.state = 6881;
						this.indexNameAndType();
						}
						break;
					}
					this.state = 6884;
					this.keyListVariants();
					this.state = 6888;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 876, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6885;
							this.indexOption();
							}
							}
						}
						this.state = 6890;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 876, this._ctx);
					}
					}
					break;
				case MultiQueryMySQLParser.FOREIGN_SYMBOL:
					{
					this.state = 6891;
					_localctx._type = this.match(MultiQueryMySQLParser.FOREIGN_SYMBOL);
					this.state = 6892;
					this.match(MultiQueryMySQLParser.KEY_SYMBOL);
					this.state = 6894;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 877, this._ctx) ) {
					case 1:
						{
						this.state = 6893;
						this.indexName();
						}
						break;
					}
					this.state = 6896;
					this.keyList();
					this.state = 6897;
					this.references();
					}
					break;
				case MultiQueryMySQLParser.CHECK_SYMBOL:
					{
					this.state = 6899;
					this.checkConstraint();
					this.state = 6902;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 878, this._ctx) ) {
					case 1:
						{
						this.state = 6900;
						if (!(this.serverVersion >= 80017)) {
							throw new FailedPredicateException(this, "this.serverVersion >= 80017");
						}
						this.state = 6901;
						this.constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintName(): ConstraintNameContext {
		let _localctx: ConstraintNameContext = new ConstraintNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 866, MultiQueryMySQLParser.RULE_constraintName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6908;
			this.match(MultiQueryMySQLParser.CONSTRAINT_SYMBOL);
			this.state = 6910;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 881, this._ctx) ) {
			case 1:
				{
				this.state = 6909;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldDefinition(): FieldDefinitionContext {
		let _localctx: FieldDefinitionContext = new FieldDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 868, MultiQueryMySQLParser.RULE_fieldDefinition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6912;
			this.dataType();
			this.state = 6948;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 889, this._ctx) ) {
			case 1:
				{
				this.state = 6916;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 882, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6913;
						this.columnAttribute();
						}
						}
					}
					this.state = 6918;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 882, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 6919;
				if (!(this.serverVersion >= 50707)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50707");
				}
				this.state = 6921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.COLLATE_SYMBOL) {
					{
					this.state = 6920;
					this.collate();
					}
				}

				this.state = 6925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.GENERATED_SYMBOL) {
					{
					this.state = 6923;
					this.match(MultiQueryMySQLParser.GENERATED_SYMBOL);
					this.state = 6924;
					this.match(MultiQueryMySQLParser.ALWAYS_SYMBOL);
					}
				}

				this.state = 6927;
				this.match(MultiQueryMySQLParser.AS_SYMBOL);
				this.state = 6928;
				this.exprWithParentheses();
				this.state = 6930;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 885, this._ctx) ) {
				case 1:
					{
					this.state = 6929;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.STORED_SYMBOL || _la === MultiQueryMySQLParser.VIRTUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 6946;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 888, this._ctx) ) {
				case 1:
					{
					this.state = 6932;
					if (!(this.serverVersion < 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion < 80000");
					}
					this.state = 6936;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 886, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6933;
							this.gcolAttribute();
							}
							}
						}
						this.state = 6938;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 886, this._ctx);
					}
					}
					break;

				case 2:
					{
					this.state = 6939;
					if (!(this.serverVersion >= 80000)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80000");
					}
					this.state = 6943;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6940;
							this.columnAttribute();
							}
							}
						}
						this.state = 6945;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnAttribute(): ColumnAttributeContext {
		let _localctx: ColumnAttributeContext = new ColumnAttributeContext(this._ctx, this.state);
		this.enterRule(_localctx, 870, MultiQueryMySQLParser.RULE_columnAttribute);
		let _la: number;
		try {
			this.state = 7002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 897, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NOT_SYMBOL) {
					{
					this.state = 6950;
					this.match(MultiQueryMySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 6953;
				this.nullLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6954;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 6955;
				this.match(MultiQueryMySQLParser.NOT_SYMBOL);
				this.state = 6956;
				this.match(MultiQueryMySQLParser.SECONDARY_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6957;
				_localctx._value = this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 6965;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 892, this._ctx) ) {
				case 1:
					{
					this.state = 6958;
					this.signedLiteral();
					}
					break;

				case 2:
					{
					this.state = 6959;
					this.match(MultiQueryMySQLParser.NOW_SYMBOL);
					this.state = 6961;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 891, this._ctx) ) {
					case 1:
						{
						this.state = 6960;
						this.timeFunctionParameters();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 6963;
					if (!(this.serverVersion >= 80013)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80013");
					}
					this.state = 6964;
					this.exprWithParentheses();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6967;
				_localctx._value = this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 6968;
				this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
				this.state = 6969;
				this.match(MultiQueryMySQLParser.NOW_SYMBOL);
				this.state = 6971;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 893, this._ctx) ) {
				case 1:
					{
					this.state = 6970;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6973;
				_localctx._value = this.match(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6974;
				_localctx._value = this.match(MultiQueryMySQLParser.SERIAL_SYMBOL);
				this.state = 6975;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				this.state = 6976;
				this.match(MultiQueryMySQLParser.VALUE_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.PRIMARY_SYMBOL) {
					{
					this.state = 6977;
					this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
					}
				}

				this.state = 6980;
				_localctx._value = this.match(MultiQueryMySQLParser.KEY_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6981;
				_localctx._value = this.match(MultiQueryMySQLParser.UNIQUE_SYMBOL);
				this.state = 6983;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 895, this._ctx) ) {
				case 1:
					{
					this.state = 6982;
					this.match(MultiQueryMySQLParser.KEY_SYMBOL);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6985;
				_localctx._value = this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 6986;
				this.textLiteral();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6987;
				this.collate();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6988;
				_localctx._value = this.match(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL);
				this.state = 6989;
				this.columnFormat();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6990;
				_localctx._value = this.match(MultiQueryMySQLParser.STORAGE_SYMBOL);
				this.state = 6991;
				this.storageMedia();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6992;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 6993;
				_localctx._value = this.match(MultiQueryMySQLParser.SRID_SYMBOL);
				this.state = 6994;
				this.real_ulonglong_number();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6995;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 6997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.CONSTRAINT_SYMBOL) {
					{
					this.state = 6996;
					this.constraintName();
					}
				}

				this.state = 6999;
				this.checkConstraint();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 7000;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 7001;
				this.constraintEnforcement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnFormat(): ColumnFormatContext {
		let _localctx: ColumnFormatContext = new ColumnFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 872, MultiQueryMySQLParser.RULE_columnFormat);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7004;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DYNAMIC_SYMBOL || _la === MultiQueryMySQLParser.FIXED_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storageMedia(): StorageMediaContext {
		let _localctx: StorageMediaContext = new StorageMediaContext(this._ctx, this.state);
		this.enterRule(_localctx, 874, MultiQueryMySQLParser.RULE_storageMedia);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7006;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.DISK_SYMBOL || _la === MultiQueryMySQLParser.MEMORY_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gcolAttribute(): GcolAttributeContext {
		let _localctx: GcolAttributeContext = new GcolAttributeContext(this._ctx, this.state);
		this.enterRule(_localctx, 876, MultiQueryMySQLParser.RULE_gcolAttribute);
		let _la: number;
		try {
			this.state = 7022;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.UNIQUE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7008;
				this.match(MultiQueryMySQLParser.UNIQUE_SYMBOL);
				this.state = 7010;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 898, this._ctx) ) {
				case 1:
					{
					this.state = 7009;
					this.match(MultiQueryMySQLParser.KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7012;
				this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 7013;
				this.textString();
				}
				break;
			case MultiQueryMySQLParser.NOT2_SYMBOL:
			case MultiQueryMySQLParser.NOT_SYMBOL:
			case MultiQueryMySQLParser.NULL_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.NOT2_SYMBOL || _la === MultiQueryMySQLParser.NOT_SYMBOL) {
					{
					this.state = 7014;
					this.notRule();
					}
				}

				this.state = 7017;
				this.match(MultiQueryMySQLParser.NULL_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.KEY_SYMBOL:
			case MultiQueryMySQLParser.PRIMARY_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.PRIMARY_SYMBOL) {
					{
					this.state = 7018;
					this.match(MultiQueryMySQLParser.PRIMARY_SYMBOL);
					}
				}

				this.state = 7021;
				this.match(MultiQueryMySQLParser.KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public references(): ReferencesContext {
		let _localctx: ReferencesContext = new ReferencesContext(this._ctx, this.state);
		this.enterRule(_localctx, 878, MultiQueryMySQLParser.RULE_references);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7024;
			this.match(MultiQueryMySQLParser.REFERENCES_SYMBOL);
			this.state = 7025;
			this.tableRef();
			this.state = 7027;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 902, this._ctx) ) {
			case 1:
				{
				this.state = 7026;
				this.identifierListWithParentheses();
				}
				break;
			}
			this.state = 7031;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 903, this._ctx) ) {
			case 1:
				{
				this.state = 7029;
				this.match(MultiQueryMySQLParser.MATCH_SYMBOL);
				this.state = 7030;
				_localctx._match = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.FULL_SYMBOL || _la === MultiQueryMySQLParser.PARTIAL_SYMBOL || _la === MultiQueryMySQLParser.SIMPLE_SYMBOL)) {
					_localctx._match = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 7049;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 906, this._ctx) ) {
			case 1:
				{
				this.state = 7033;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 7034;
				_localctx._option = this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
				this.state = 7035;
				this.deleteOption();
				this.state = 7039;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 904, this._ctx) ) {
				case 1:
					{
					this.state = 7036;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 7037;
					this.match(MultiQueryMySQLParser.DELETE_SYMBOL);
					this.state = 7038;
					this.deleteOption();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 7041;
				this.match(MultiQueryMySQLParser.ON_SYMBOL);
				this.state = 7042;
				_localctx._option = this.match(MultiQueryMySQLParser.DELETE_SYMBOL);
				this.state = 7043;
				this.deleteOption();
				this.state = 7047;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 905, this._ctx) ) {
				case 1:
					{
					this.state = 7044;
					this.match(MultiQueryMySQLParser.ON_SYMBOL);
					this.state = 7045;
					this.match(MultiQueryMySQLParser.UPDATE_SYMBOL);
					this.state = 7046;
					this.deleteOption();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteOption(): DeleteOptionContext {
		let _localctx: DeleteOptionContext = new DeleteOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 880, MultiQueryMySQLParser.RULE_deleteOption);
		let _la: number;
		try {
			this.state = 7056;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.CASCADE_SYMBOL:
			case MultiQueryMySQLParser.RESTRICT_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7051;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CASCADE_SYMBOL || _la === MultiQueryMySQLParser.RESTRICT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MultiQueryMySQLParser.SET_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7052;
				this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 7053;
				this.nullLiteral();
				}
				break;
			case MultiQueryMySQLParser.NO_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7054;
				this.match(MultiQueryMySQLParser.NO_SYMBOL);
				this.state = 7055;
				this.match(MultiQueryMySQLParser.ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyList(): KeyListContext {
		let _localctx: KeyListContext = new KeyListContext(this._ctx, this.state);
		this.enterRule(_localctx, 882, MultiQueryMySQLParser.RULE_keyList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7058;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7059;
			this.keyPart();
			this.state = 7064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 7060;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 7061;
				this.keyPart();
				}
				}
				this.state = 7066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7067;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyPart(): KeyPartContext {
		let _localctx: KeyPartContext = new KeyPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 884, MultiQueryMySQLParser.RULE_keyPart);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7069;
			this.identifier();
			this.state = 7071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OPEN_PAR_SYMBOL) {
				{
				this.state = 7070;
				this.fieldLength();
				}
			}

			this.state = 7074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.ASC_SYMBOL || _la === MultiQueryMySQLParser.DESC_SYMBOL) {
				{
				this.state = 7073;
				this.direction();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyListWithExpression(): KeyListWithExpressionContext {
		let _localctx: KeyListWithExpressionContext = new KeyListWithExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 886, MultiQueryMySQLParser.RULE_keyListWithExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7076;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7077;
			this.keyPartOrExpression();
			this.state = 7082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 7078;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 7079;
				this.keyPartOrExpression();
				}
				}
				this.state = 7084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7085;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyPartOrExpression(): KeyPartOrExpressionContext {
		let _localctx: KeyPartOrExpressionContext = new KeyPartOrExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 888, MultiQueryMySQLParser.RULE_keyPartOrExpression);
		let _la: number;
		try {
			this.state = 7092;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 913, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7087;
				this.keyPart();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7088;
				this.exprWithParentheses();
				this.state = 7090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.ASC_SYMBOL || _la === MultiQueryMySQLParser.DESC_SYMBOL) {
					{
					this.state = 7089;
					this.direction();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyListVariants(): KeyListVariantsContext {
		let _localctx: KeyListVariantsContext = new KeyListVariantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 890, MultiQueryMySQLParser.RULE_keyListVariants);
		try {
			this.state = 7098;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 914, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7094;
				if (!(this.serverVersion >= 80013)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80013");
				}
				this.state = 7095;
				this.keyListWithExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7096;
				if (!(this.serverVersion < 80013)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80013");
				}
				this.state = 7097;
				this.keyList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let _localctx: IndexTypeContext = new IndexTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 892, MultiQueryMySQLParser.RULE_indexType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7100;
			_localctx._algorithm = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.BTREE_SYMBOL || _la === MultiQueryMySQLParser.HASH_SYMBOL || _la === MultiQueryMySQLParser.RTREE_SYMBOL)) {
				_localctx._algorithm = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexOption(): IndexOptionContext {
		let _localctx: IndexOptionContext = new IndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 894, MultiQueryMySQLParser.RULE_indexOption);
		try {
			this.state = 7104;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 915, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7102;
				this.commonIndexOption();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7103;
				this.indexTypeClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commonIndexOption(): CommonIndexOptionContext {
		let _localctx: CommonIndexOptionContext = new CommonIndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 896, MultiQueryMySQLParser.RULE_commonIndexOption);
		let _la: number;
		try {
			this.state = 7115;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 917, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7106;
				this.match(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL);
				this.state = 7108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7107;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7110;
				this.ulong_number();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7111;
				this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 7112;
				this.textLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7113;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 7114;
				this.visibility();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public visibility(): VisibilityContext {
		let _localctx: VisibilityContext = new VisibilityContext(this._ctx, this.state);
		this.enterRule(_localctx, 898, MultiQueryMySQLParser.RULE_visibility);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7117;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.INVISIBLE_SYMBOL || _la === MultiQueryMySQLParser.VISIBLE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexTypeClause(): IndexTypeClauseContext {
		let _localctx: IndexTypeClauseContext = new IndexTypeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 900, MultiQueryMySQLParser.RULE_indexTypeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7119;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.TYPE_SYMBOL || _la === MultiQueryMySQLParser.USING_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7120;
			this.indexType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fulltextIndexOption(): FulltextIndexOptionContext {
		let _localctx: FulltextIndexOptionContext = new FulltextIndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 902, MultiQueryMySQLParser.RULE_fulltextIndexOption);
		try {
			this.state = 7126;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 918, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7122;
				this.commonIndexOption();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7123;
				this.match(MultiQueryMySQLParser.WITH_SYMBOL);
				this.state = 7124;
				this.match(MultiQueryMySQLParser.PARSER_SYMBOL);
				this.state = 7125;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public spatialIndexOption(): SpatialIndexOptionContext {
		let _localctx: SpatialIndexOptionContext = new SpatialIndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 904, MultiQueryMySQLParser.RULE_spatialIndexOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7128;
			this.commonIndexOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataTypeDefinition(): DataTypeDefinitionContext {
		let _localctx: DataTypeDefinitionContext = new DataTypeDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 906, MultiQueryMySQLParser.RULE_dataTypeDefinition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7130;
			this.dataType();
			this.state = 7131;
			this.match(MultiQueryMySQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataType(): DataTypeContext {
		let _localctx: DataTypeContext = new DataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 908, MultiQueryMySQLParser.RULE_dataType);
		let _la: number;
		try {
			this.state = 7280;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 952, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7133;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.BIGINT_SYMBOL || _la === MultiQueryMySQLParser.INT_SYMBOL || _la === MultiQueryMySQLParser.MEDIUMINT_SYMBOL || _la === MultiQueryMySQLParser.SMALLINT_SYMBOL || _la === MultiQueryMySQLParser.TINYINT_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7135;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 919, this._ctx) ) {
				case 1:
					{
					this.state = 7134;
					this.fieldLength();
					}
					break;
				}
				this.state = 7138;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 920, this._ctx) ) {
				case 1:
					{
					this.state = 7137;
					this.fieldOptions();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7145;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.REAL_SYMBOL:
					{
					this.state = 7140;
					_localctx._type = this.match(MultiQueryMySQLParser.REAL_SYMBOL);
					}
					break;
				case MultiQueryMySQLParser.DOUBLE_SYMBOL:
					{
					this.state = 7141;
					_localctx._type = this.match(MultiQueryMySQLParser.DOUBLE_SYMBOL);
					this.state = 7143;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 921, this._ctx) ) {
					case 1:
						{
						this.state = 7142;
						this.match(MultiQueryMySQLParser.PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7148;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 923, this._ctx) ) {
				case 1:
					{
					this.state = 7147;
					this.precision();
					}
					break;
				}
				this.state = 7151;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 924, this._ctx) ) {
				case 1:
					{
					this.state = 7150;
					this.fieldOptions();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7153;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.FIXED_SYMBOL || _la === MultiQueryMySQLParser.DECIMAL_SYMBOL || _la === MultiQueryMySQLParser.FLOAT_SYMBOL || _la === MultiQueryMySQLParser.NUMERIC_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7155;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 925, this._ctx) ) {
				case 1:
					{
					this.state = 7154;
					this.floatOptions();
					}
					break;
				}
				this.state = 7158;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 926, this._ctx) ) {
				case 1:
					{
					this.state = 7157;
					this.fieldOptions();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7160;
				_localctx._type = this.match(MultiQueryMySQLParser.BIT_SYMBOL);
				this.state = 7162;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 927, this._ctx) ) {
				case 1:
					{
					this.state = 7161;
					this.fieldLength();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7164;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.BOOL_SYMBOL || _la === MultiQueryMySQLParser.BOOLEAN_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7165;
				_localctx._type = this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
				this.state = 7167;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 928, this._ctx) ) {
				case 1:
					{
					this.state = 7166;
					this.fieldLength();
					}
					break;
				}
				this.state = 7170;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 929, this._ctx) ) {
				case 1:
					{
					this.state = 7169;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7172;
				this.nchar();
				this.state = 7174;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 930, this._ctx) ) {
				case 1:
					{
					this.state = 7173;
					this.fieldLength();
					}
					break;
				}
				this.state = 7177;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 931, this._ctx) ) {
				case 1:
					{
					this.state = 7176;
					this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7179;
				_localctx._type = this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				this.state = 7181;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 932, this._ctx) ) {
				case 1:
					{
					this.state = 7180;
					this.fieldLength();
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7186;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.CHAR_SYMBOL:
					{
					this.state = 7183;
					_localctx._type = this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
					this.state = 7184;
					this.match(MultiQueryMySQLParser.VARYING_SYMBOL);
					}
					break;
				case MultiQueryMySQLParser.VARCHAR_SYMBOL:
					{
					this.state = 7185;
					_localctx._type = this.match(MultiQueryMySQLParser.VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7188;
				this.fieldLength();
				this.state = 7190;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 934, this._ctx) ) {
				case 1:
					{
					this.state = 7189;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7202;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 935, this._ctx) ) {
				case 1:
					{
					this.state = 7192;
					_localctx._type = this.match(MultiQueryMySQLParser.NATIONAL_SYMBOL);
					this.state = 7193;
					this.match(MultiQueryMySQLParser.VARCHAR_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 7194;
					_localctx._type = this.match(MultiQueryMySQLParser.NVARCHAR_SYMBOL);
					}
					break;

				case 3:
					{
					this.state = 7195;
					_localctx._type = this.match(MultiQueryMySQLParser.NCHAR_SYMBOL);
					this.state = 7196;
					this.match(MultiQueryMySQLParser.VARCHAR_SYMBOL);
					}
					break;

				case 4:
					{
					this.state = 7197;
					_localctx._type = this.match(MultiQueryMySQLParser.NATIONAL_SYMBOL);
					this.state = 7198;
					this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
					this.state = 7199;
					this.match(MultiQueryMySQLParser.VARYING_SYMBOL);
					}
					break;

				case 5:
					{
					this.state = 7200;
					_localctx._type = this.match(MultiQueryMySQLParser.NCHAR_SYMBOL);
					this.state = 7201;
					this.match(MultiQueryMySQLParser.VARYING_SYMBOL);
					}
					break;
				}
				this.state = 7204;
				this.fieldLength();
				this.state = 7206;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 936, this._ctx) ) {
				case 1:
					{
					this.state = 7205;
					this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7208;
				_localctx._type = this.match(MultiQueryMySQLParser.VARBINARY_SYMBOL);
				this.state = 7209;
				this.fieldLength();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 7210;
				_localctx._type = this.match(MultiQueryMySQLParser.YEAR_SYMBOL);
				this.state = 7212;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 937, this._ctx) ) {
				case 1:
					{
					this.state = 7211;
					this.fieldLength();
					}
					break;
				}
				this.state = 7215;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 938, this._ctx) ) {
				case 1:
					{
					this.state = 7214;
					this.fieldOptions();
					}
					break;
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 7217;
				_localctx._type = this.match(MultiQueryMySQLParser.DATE_SYMBOL);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 7218;
				_localctx._type = this.match(MultiQueryMySQLParser.TIME_SYMBOL);
				this.state = 7220;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 939, this._ctx) ) {
				case 1:
					{
					this.state = 7219;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 7222;
				_localctx._type = this.match(MultiQueryMySQLParser.TIMESTAMP_SYMBOL);
				this.state = 7224;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 940, this._ctx) ) {
				case 1:
					{
					this.state = 7223;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 7226;
				_localctx._type = this.match(MultiQueryMySQLParser.DATETIME_SYMBOL);
				this.state = 7228;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 941, this._ctx) ) {
				case 1:
					{
					this.state = 7227;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 7230;
				_localctx._type = this.match(MultiQueryMySQLParser.TINYBLOB_SYMBOL);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 7231;
				_localctx._type = this.match(MultiQueryMySQLParser.BLOB_SYMBOL);
				this.state = 7233;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 942, this._ctx) ) {
				case 1:
					{
					this.state = 7232;
					this.fieldLength();
					}
					break;
				}
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 7235;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.LONGBLOB_SYMBOL || _la === MultiQueryMySQLParser.MEDIUMBLOB_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 7236;
				_localctx._type = this.match(MultiQueryMySQLParser.LONG_SYMBOL);
				this.state = 7237;
				this.match(MultiQueryMySQLParser.VARBINARY_SYMBOL);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 7238;
				_localctx._type = this.match(MultiQueryMySQLParser.LONG_SYMBOL);
				this.state = 7242;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 943, this._ctx) ) {
				case 1:
					{
					this.state = 7239;
					this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
					this.state = 7240;
					this.match(MultiQueryMySQLParser.VARYING_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 7241;
					this.match(MultiQueryMySQLParser.VARCHAR_SYMBOL);
					}
					break;
				}
				this.state = 7245;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 944, this._ctx) ) {
				case 1:
					{
					this.state = 7244;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 7247;
				_localctx._type = this.match(MultiQueryMySQLParser.TINYTEXT_SYMBOL);
				this.state = 7249;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 945, this._ctx) ) {
				case 1:
					{
					this.state = 7248;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 7251;
				_localctx._type = this.match(MultiQueryMySQLParser.TEXT_SYMBOL);
				this.state = 7253;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 946, this._ctx) ) {
				case 1:
					{
					this.state = 7252;
					this.fieldLength();
					}
					break;
				}
				this.state = 7256;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 947, this._ctx) ) {
				case 1:
					{
					this.state = 7255;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 7258;
				_localctx._type = this.match(MultiQueryMySQLParser.MEDIUMTEXT_SYMBOL);
				this.state = 7260;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 948, this._ctx) ) {
				case 1:
					{
					this.state = 7259;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 7262;
				_localctx._type = this.match(MultiQueryMySQLParser.LONGTEXT_SYMBOL);
				this.state = 7264;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 949, this._ctx) ) {
				case 1:
					{
					this.state = 7263;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 7266;
				_localctx._type = this.match(MultiQueryMySQLParser.ENUM_SYMBOL);
				this.state = 7267;
				this.stringList();
				this.state = 7269;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 950, this._ctx) ) {
				case 1:
					{
					this.state = 7268;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 7271;
				_localctx._type = this.match(MultiQueryMySQLParser.SET_SYMBOL);
				this.state = 7272;
				this.stringList();
				this.state = 7274;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 951, this._ctx) ) {
				case 1:
					{
					this.state = 7273;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 7276;
				_localctx._type = this.match(MultiQueryMySQLParser.SERIAL_SYMBOL);
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 7277;
				if (!(this.serverVersion >= 50708)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50708");
				}
				this.state = 7278;
				_localctx._type = this.match(MultiQueryMySQLParser.JSON_SYMBOL);
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 7279;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & ((1 << (MultiQueryMySQLParser.GEOMETRY_SYMBOL - 151)) | (1 << (MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL - 151)) | (1 << (MultiQueryMySQLParser.LINESTRING_SYMBOL - 151)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (MultiQueryMySQLParser.MULTILINESTRING_SYMBOL - 224)) | (1 << (MultiQueryMySQLParser.MULTIPOINT_SYMBOL - 224)) | (1 << (MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL - 224)))) !== 0) || _la === MultiQueryMySQLParser.POINT_SYMBOL || _la === MultiQueryMySQLParser.POLYGON_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nchar(): NcharContext {
		let _localctx: NcharContext = new NcharContext(this._ctx, this.state);
		this.enterRule(_localctx, 910, MultiQueryMySQLParser.RULE_nchar);
		try {
			this.state = 7285;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.NCHAR_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7282;
				_localctx._type = this.match(MultiQueryMySQLParser.NCHAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.NATIONAL_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7283;
				_localctx._type = this.match(MultiQueryMySQLParser.NATIONAL_SYMBOL);
				this.state = 7284;
				this.match(MultiQueryMySQLParser.CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public realType(): RealTypeContext {
		let _localctx: RealTypeContext = new RealTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 912, MultiQueryMySQLParser.RULE_realType);
		try {
			this.state = 7292;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.REAL_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7287;
				_localctx._type = this.match(MultiQueryMySQLParser.REAL_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.DOUBLE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7288;
				_localctx._type = this.match(MultiQueryMySQLParser.DOUBLE_SYMBOL);
				this.state = 7290;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 954, this._ctx) ) {
				case 1:
					{
					this.state = 7289;
					this.match(MultiQueryMySQLParser.PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldLength(): FieldLengthContext {
		let _localctx: FieldLengthContext = new FieldLengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 914, MultiQueryMySQLParser.RULE_fieldLength);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7294;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7297;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
			case 1:
				{
				this.state = 7295;
				this.real_ulonglong_number();
				}
				break;

			case 2:
				{
				this.state = 7296;
				this.match(MultiQueryMySQLParser.DECIMAL_NUMBER);
				}
				break;
			}
			this.state = 7299;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldOptions(): FieldOptionsContext {
		let _localctx: FieldOptionsContext = new FieldOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 916, MultiQueryMySQLParser.RULE_fieldOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7302;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7301;
					_la = this._input.LA(1);
					if (!(_la === MultiQueryMySQLParser.SIGNED_SYMBOL || _la === MultiQueryMySQLParser.UNSIGNED_SYMBOL || _la === MultiQueryMySQLParser.ZEROFILL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7304;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 957, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetWithOptBinary(): CharsetWithOptBinaryContext {
		let _localctx: CharsetWithOptBinaryContext = new CharsetWithOptBinaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 918, MultiQueryMySQLParser.RULE_charsetWithOptBinary);
		try {
			this.state = 7320;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 960, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7306;
				this.ascii();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7307;
				this.unicode();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7308;
				this.match(MultiQueryMySQLParser.BYTE_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7309;
				this.charset();
				this.state = 7310;
				this.charsetName();
				this.state = 7312;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 958, this._ctx) ) {
				case 1:
					{
					this.state = 7311;
					this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7314;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				this.state = 7318;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 959, this._ctx) ) {
				case 1:
					{
					this.state = 7315;
					this.charset();
					this.state = 7316;
					this.charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ascii(): AsciiContext {
		let _localctx: AsciiContext = new AsciiContext(this._ctx, this.state);
		this.enterRule(_localctx, 920, MultiQueryMySQLParser.RULE_ascii);
		try {
			this.state = 7328;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ASCII_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7322;
				this.match(MultiQueryMySQLParser.ASCII_SYMBOL);
				this.state = 7324;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 961, this._ctx) ) {
				case 1:
					{
					this.state = 7323;
					this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.BINARY_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7326;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				this.state = 7327;
				this.match(MultiQueryMySQLParser.ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unicode(): UnicodeContext {
		let _localctx: UnicodeContext = new UnicodeContext(this._ctx, this.state);
		this.enterRule(_localctx, 922, MultiQueryMySQLParser.RULE_unicode);
		try {
			this.state = 7336;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.UNICODE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7330;
				this.match(MultiQueryMySQLParser.UNICODE_SYMBOL);
				this.state = 7332;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 963, this._ctx) ) {
				case 1:
					{
					this.state = 7331;
					this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case MultiQueryMySQLParser.BINARY_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7334;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				this.state = 7335;
				this.match(MultiQueryMySQLParser.UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public wsNumCodepoints(): WsNumCodepointsContext {
		let _localctx: WsNumCodepointsContext = new WsNumCodepointsContext(this._ctx, this.state);
		this.enterRule(_localctx, 924, MultiQueryMySQLParser.RULE_wsNumCodepoints);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7338;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7339;
			this.real_ulong_number();
			this.state = 7340;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeDatetimePrecision(): TypeDatetimePrecisionContext {
		let _localctx: TypeDatetimePrecisionContext = new TypeDatetimePrecisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 926, MultiQueryMySQLParser.RULE_typeDatetimePrecision);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7342;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7343;
			this.match(MultiQueryMySQLParser.INT_NUMBER);
			this.state = 7344;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let _localctx: CharsetNameContext = new CharsetNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 928, MultiQueryMySQLParser.RULE_charsetName);
		try {
			this.state = 7350;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 965, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7346;
				this.textOrIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7347;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7348;
				if (!(this.serverVersion < 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80011");
				}
				this.state = 7349;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collationName(): CollationNameContext {
		let _localctx: CollationNameContext = new CollationNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 930, MultiQueryMySQLParser.RULE_collationName);
		try {
			this.state = 7357;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 966, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7352;
				this.textOrIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7353;
				if (!(this.serverVersion < 80011)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80011");
				}
				this.state = 7354;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7355;
				if (!(this.serverVersion >= 80018)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80018");
				}
				this.state = 7356;
				this.match(MultiQueryMySQLParser.BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableOptions(): CreateTableOptionsContext {
		let _localctx: CreateTableOptionsContext = new CreateTableOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 932, MultiQueryMySQLParser.RULE_createTableOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7359;
			this.createTableOption();
			this.state = 7366;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 968, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7361;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 967, this._ctx) ) {
					case 1:
						{
						this.state = 7360;
						this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
						}
						break;
					}
					this.state = 7363;
					this.createTableOption();
					}
					}
				}
				this.state = 7368;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 968, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext {
		let _localctx: CreateTableOptionsSpaceSeparatedContext = new CreateTableOptionsSpaceSeparatedContext(this._ctx, this.state);
		this.enterRule(_localctx, 934, MultiQueryMySQLParser.RULE_createTableOptionsSpaceSeparated);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7370;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7369;
					this.createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7372;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 969, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableOption(): CreateTableOptionContext {
		let _localctx: CreateTableOptionContext = new CreateTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 936, MultiQueryMySQLParser.RULE_createTableOption);
		let _la: number;
		try {
			this.state = 7503;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 994, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7374;
				_localctx._option = this.match(MultiQueryMySQLParser.ENGINE_SYMBOL);
				this.state = 7376;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 970, this._ctx) ) {
				case 1:
					{
					this.state = 7375;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7378;
				this.engineRef();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7379;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 7380;
				_localctx._option = this.match(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL);
				this.state = 7382;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 971, this._ctx) ) {
				case 1:
					{
					this.state = 7381;
					this.equal();
					}
					break;
				}
				this.state = 7386;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 972, this._ctx) ) {
				case 1:
					{
					this.state = 7384;
					this.match(MultiQueryMySQLParser.NULL_SYMBOL);
					}
					break;

				case 2:
					{
					this.state = 7385;
					this.textOrIdentifier();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7388;
				_localctx._option = this.match(MultiQueryMySQLParser.MAX_ROWS_SYMBOL);
				this.state = 7390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7389;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7392;
				this.ulonglong_number();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7393;
				_localctx._option = this.match(MultiQueryMySQLParser.MIN_ROWS_SYMBOL);
				this.state = 7395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7394;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7397;
				this.ulonglong_number();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7398;
				_localctx._option = this.match(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL);
				this.state = 7400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7399;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7402;
				this.ulong_number();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7403;
				_localctx._option = this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
				this.state = 7405;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 976, this._ctx) ) {
				case 1:
					{
					this.state = 7404;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7407;
				this.textStringLiteral();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7408;
				_localctx._option = this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 7410;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 977, this._ctx) ) {
				case 1:
					{
					this.state = 7409;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7412;
				this.textStringLiteral();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7413;
				if (!(this.serverVersion >= 50708)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50708");
				}
				this.state = 7414;
				_localctx._option = this.match(MultiQueryMySQLParser.COMPRESSION_SYMBOL);
				this.state = 7416;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 978, this._ctx) ) {
				case 1:
					{
					this.state = 7415;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7418;
				this.textString();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7419;
				if (!(this.serverVersion >= 50711)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50711");
				}
				this.state = 7420;
				_localctx._option = this.match(MultiQueryMySQLParser.ENCRYPTION_SYMBOL);
				this.state = 7422;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 979, this._ctx) ) {
				case 1:
					{
					this.state = 7421;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7424;
				this.textString();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7425;
				_localctx._option = this.match(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL);
				this.state = 7427;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7426;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7429;
				this.ulonglong_number();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7430;
				_localctx._option = this.match(MultiQueryMySQLParser.PACK_KEYS_SYMBOL);
				this.state = 7432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7431;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7434;
				this.ternaryOption();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 7435;
				_localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL - 324)) | (1 << (MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL - 324)) | (1 << (MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 324)))) !== 0))) {
					_localctx._option = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7437;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7436;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7439;
				this.ternaryOption();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 7440;
				_localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CHECKSUM_SYMBOL || _la === MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL)) {
					_localctx._option = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7441;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7444;
				this.ulong_number();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 7445;
				_localctx._option = this.match(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL);
				this.state = 7447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7446;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7449;
				this.ulong_number();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 7450;
				_localctx._option = this.match(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL);
				this.state = 7452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7451;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7454;
				_localctx._format = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.COMPACT_SYMBOL || _la === MultiQueryMySQLParser.COMPRESSED_SYMBOL || _la === MultiQueryMySQLParser.DYNAMIC_SYMBOL || _la === MultiQueryMySQLParser.FIXED_SYMBOL || _la === MultiQueryMySQLParser.REDUNDANT_SYMBOL || _la === MultiQueryMySQLParser.DEFAULT_SYMBOL)) {
					_localctx._format = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 7455;
				_localctx._option = this.match(MultiQueryMySQLParser.UNION_SYMBOL);
				this.state = 7457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7456;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7459;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7460;
				this.tableRefList();
				this.state = 7461;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 7463;
				this.defaultCharset();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 7464;
				this.defaultCollation();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 7465;
				_localctx._option = this.match(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL);
				this.state = 7467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7466;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7469;
				_localctx._method = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.NO_SYMBOL || _la === MultiQueryMySQLParser.FIRST_SYMBOL || _la === MultiQueryMySQLParser.LAST_SYMBOL)) {
					_localctx._method = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 7470;
				_localctx._option = this.match(MultiQueryMySQLParser.DATA_SYMBOL);
				this.state = 7471;
				this.match(MultiQueryMySQLParser.DIRECTORY_SYMBOL);
				this.state = 7473;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 988, this._ctx) ) {
				case 1:
					{
					this.state = 7472;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7475;
				this.textString();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 7476;
				_localctx._option = this.match(MultiQueryMySQLParser.INDEX_SYMBOL);
				this.state = 7477;
				this.match(MultiQueryMySQLParser.DIRECTORY_SYMBOL);
				this.state = 7479;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 989, this._ctx) ) {
				case 1:
					{
					this.state = 7478;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7481;
				this.textString();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 7482;
				_localctx._option = this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
				this.state = 7488;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 991, this._ctx) ) {
				case 1:
					{
					this.state = 7483;
					if (!(this.serverVersion >= 50707)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 50707");
					}
					this.state = 7485;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 990, this._ctx) ) {
					case 1:
						{
						this.state = 7484;
						this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;

				case 2:
					// tslint:disable-next-line:no-empty
					{
					}
					break;
				}
				this.state = 7490;
				this.identifier();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 7491;
				_localctx._option = this.match(MultiQueryMySQLParser.STORAGE_SYMBOL);
				this.state = 7492;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DISK_SYMBOL || _la === MultiQueryMySQLParser.MEMORY_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 7493;
				_localctx._option = this.match(MultiQueryMySQLParser.CONNECTION_SYMBOL);
				this.state = 7495;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 992, this._ctx) ) {
				case 1:
					{
					this.state = 7494;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7497;
				this.textString();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 7498;
				_localctx._option = this.match(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL);
				this.state = 7500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7499;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7502;
				this.ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ternaryOption(): TernaryOptionContext {
		let _localctx: TernaryOptionContext = new TernaryOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 938, MultiQueryMySQLParser.RULE_ternaryOption);
		try {
			this.state = 7507;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.INT_NUMBER:
			case MultiQueryMySQLParser.LONG_NUMBER:
			case MultiQueryMySQLParser.ULONGLONG_NUMBER:
			case MultiQueryMySQLParser.HEX_NUMBER:
			case MultiQueryMySQLParser.DECIMAL_NUMBER:
			case MultiQueryMySQLParser.FLOAT_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7505;
				this.ulong_number();
				}
				break;
			case MultiQueryMySQLParser.DEFAULT_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7506;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultCollation(): DefaultCollationContext {
		let _localctx: DefaultCollationContext = new DefaultCollationContext(this._ctx, this.state);
		this.enterRule(_localctx, 940, MultiQueryMySQLParser.RULE_defaultCollation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFAULT_SYMBOL) {
				{
				this.state = 7509;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
			}

			this.state = 7512;
			this.match(MultiQueryMySQLParser.COLLATE_SYMBOL);
			this.state = 7514;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 997, this._ctx) ) {
			case 1:
				{
				this.state = 7513;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 7516;
			this.collationName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultEncryption(): DefaultEncryptionContext {
		let _localctx: DefaultEncryptionContext = new DefaultEncryptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 942, MultiQueryMySQLParser.RULE_defaultEncryption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFAULT_SYMBOL) {
				{
				this.state = 7518;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
			}

			this.state = 7521;
			this.match(MultiQueryMySQLParser.ENCRYPTION_SYMBOL);
			this.state = 7523;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 999, this._ctx) ) {
			case 1:
				{
				this.state = 7522;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 7525;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultCharset(): DefaultCharsetContext {
		let _localctx: DefaultCharsetContext = new DefaultCharsetContext(this._ctx, this.state);
		this.enterRule(_localctx, 944, MultiQueryMySQLParser.RULE_defaultCharset);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7528;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.DEFAULT_SYMBOL) {
				{
				this.state = 7527;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
			}

			this.state = 7530;
			this.charset();
			this.state = 7532;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1001, this._ctx) ) {
			case 1:
				{
				this.state = 7531;
				this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 7534;
			this.charsetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionClause(): PartitionClauseContext {
		let _localctx: PartitionClauseContext = new PartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 946, MultiQueryMySQLParser.RULE_partitionClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7536;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 7537;
			this.match(MultiQueryMySQLParser.BY_SYMBOL);
			this.state = 7538;
			this.partitionTypeDef();
			this.state = 7541;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1002, this._ctx) ) {
			case 1:
				{
				this.state = 7539;
				this.match(MultiQueryMySQLParser.PARTITIONS_SYMBOL);
				this.state = 7540;
				this.real_ulong_number();
				}
				break;
			}
			this.state = 7544;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1003, this._ctx) ) {
			case 1:
				{
				this.state = 7543;
				this.subPartitions();
				}
				break;
			}
			this.state = 7547;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1004, this._ctx) ) {
			case 1:
				{
				this.state = 7546;
				this.partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionTypeDef(): PartitionTypeDefContext {
		let _localctx: PartitionTypeDefContext = new PartitionTypeDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 948, MultiQueryMySQLParser.RULE_partitionTypeDef);
		let _la: number;
		try {
			this.state = 7582;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1011, this._ctx) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LINEAR_SYMBOL) {
					{
					this.state = 7549;
					this.match(MultiQueryMySQLParser.LINEAR_SYMBOL);
					}
				}

				this.state = 7552;
				this.match(MultiQueryMySQLParser.KEY_SYMBOL);
				this.state = 7554;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1006, this._ctx) ) {
				case 1:
					{
					this.state = 7553;
					this.partitionKeyAlgorithm();
					}
					break;
				}
				this.state = 7556;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7558;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1007, this._ctx) ) {
				case 1:
					{
					this.state = 7557;
					this.identifierList();
					}
					break;
				}
				this.state = 7560;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.LINEAR_SYMBOL) {
					{
					this.state = 7561;
					this.match(MultiQueryMySQLParser.LINEAR_SYMBOL);
					}
				}

				this.state = 7564;
				this.match(MultiQueryMySQLParser.HASH_SYMBOL);
				this.state = 7565;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7566;
				this.bitExpr(0);
				this.state = 7567;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;

			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7569;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.LIST_SYMBOL || _la === MultiQueryMySQLParser.RANGE_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7580;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.OPEN_PAR_SYMBOL:
					{
					this.state = 7570;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 7571;
					this.bitExpr(0);
					this.state = 7572;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				case MultiQueryMySQLParser.COLUMNS_SYMBOL:
					{
					this.state = 7574;
					this.match(MultiQueryMySQLParser.COLUMNS_SYMBOL);
					this.state = 7575;
					this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
					this.state = 7577;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1009, this._ctx) ) {
					case 1:
						{
						this.state = 7576;
						this.identifierList();
						}
						break;
					}
					this.state = 7579;
					this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subPartitions(): SubPartitionsContext {
		let _localctx: SubPartitionsContext = new SubPartitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 950, MultiQueryMySQLParser.RULE_subPartitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7584;
			this.match(MultiQueryMySQLParser.SUBPARTITION_SYMBOL);
			this.state = 7585;
			this.match(MultiQueryMySQLParser.BY_SYMBOL);
			this.state = 7587;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.LINEAR_SYMBOL) {
				{
				this.state = 7586;
				this.match(MultiQueryMySQLParser.LINEAR_SYMBOL);
				}
			}

			this.state = 7599;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.HASH_SYMBOL:
				{
				this.state = 7589;
				this.match(MultiQueryMySQLParser.HASH_SYMBOL);
				this.state = 7590;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7591;
				this.bitExpr(0);
				this.state = 7592;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.KEY_SYMBOL:
				{
				this.state = 7594;
				this.match(MultiQueryMySQLParser.KEY_SYMBOL);
				this.state = 7596;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1013, this._ctx) ) {
				case 1:
					{
					this.state = 7595;
					this.partitionKeyAlgorithm();
					}
					break;
				}
				this.state = 7598;
				this.identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 7603;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1015, this._ctx) ) {
			case 1:
				{
				this.state = 7601;
				this.match(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL);
				this.state = 7602;
				this.real_ulong_number();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
		let _localctx: PartitionKeyAlgorithmContext = new PartitionKeyAlgorithmContext(this._ctx, this.state);
		this.enterRule(_localctx, 952, MultiQueryMySQLParser.RULE_partitionKeyAlgorithm);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7605;
			if (!(this.serverVersion >= 50700)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50700");
			}
			this.state = 7606;
			this.match(MultiQueryMySQLParser.ALGORITHM_SYMBOL);
			this.state = 7607;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 7608;
			this.real_ulong_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinitions(): PartitionDefinitionsContext {
		let _localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 954, MultiQueryMySQLParser.RULE_partitionDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7610;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7611;
			this.partitionDefinition();
			this.state = 7616;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 7612;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 7613;
				this.partitionDefinition();
				}
				}
				this.state = 7618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7619;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinition(): PartitionDefinitionContext {
		let _localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 956, MultiQueryMySQLParser.RULE_partitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7621;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 7622;
			this.identifier();
			this.state = 7633;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1018, this._ctx) ) {
			case 1:
				{
				this.state = 7623;
				this.match(MultiQueryMySQLParser.VALUES_SYMBOL);
				this.state = 7624;
				this.match(MultiQueryMySQLParser.LESS_SYMBOL);
				this.state = 7625;
				this.match(MultiQueryMySQLParser.THAN_SYMBOL);
				this.state = 7628;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.OPEN_PAR_SYMBOL:
					{
					this.state = 7626;
					this.partitionValueItemListParen();
					}
					break;
				case MultiQueryMySQLParser.MAXVALUE_SYMBOL:
					{
					this.state = 7627;
					this.match(MultiQueryMySQLParser.MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 7630;
				this.match(MultiQueryMySQLParser.VALUES_SYMBOL);
				this.state = 7631;
				this.match(MultiQueryMySQLParser.IN_SYMBOL);
				this.state = 7632;
				this.partitionValuesIn();
				}
				break;
			}
			this.state = 7638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMENT_SYMBOL || _la === MultiQueryMySQLParser.DATA_SYMBOL || _la === MultiQueryMySQLParser.ENGINE_SYMBOL || _la === MultiQueryMySQLParser.MAX_ROWS_SYMBOL || _la === MultiQueryMySQLParser.MIN_ROWS_SYMBOL || _la === MultiQueryMySQLParser.NODEGROUP_SYMBOL || _la === MultiQueryMySQLParser.STORAGE_SYMBOL || _la === MultiQueryMySQLParser.TABLESPACE_SYMBOL || _la === MultiQueryMySQLParser.INDEX_SYMBOL) {
				{
				{
				this.state = 7635;
				this.partitionOption();
				}
				}
				this.state = 7640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MultiQueryMySQLParser.OPEN_PAR_SYMBOL) {
				{
				this.state = 7641;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7642;
				this.subpartitionDefinition();
				this.state = 7647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					{
					this.state = 7643;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7644;
					this.subpartitionDefinition();
					}
					}
					this.state = 7649;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7650;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionValuesIn(): PartitionValuesInContext {
		let _localctx: PartitionValuesInContext = new PartitionValuesInContext(this._ctx, this.state);
		this.enterRule(_localctx, 958, MultiQueryMySQLParser.RULE_partitionValuesIn);
		let _la: number;
		try {
			this.state = 7666;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1023, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7654;
				this.partitionValueItemListParen();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7655;
				this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7656;
				this.partitionValueItemListParen();
				this.state = 7661;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
					{
					{
					this.state = 7657;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7658;
					this.partitionValueItemListParen();
					}
					}
					this.state = 7663;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7664;
				this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionOption(): PartitionOptionContext {
		let _localctx: PartitionOptionContext = new PartitionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 960, MultiQueryMySQLParser.RULE_partitionOption);
		let _la: number;
		try {
			this.state = 7702;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.TABLESPACE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7668;
				_localctx._option = this.match(MultiQueryMySQLParser.TABLESPACE_SYMBOL);
				this.state = 7670;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1024, this._ctx) ) {
				case 1:
					{
					this.state = 7669;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7672;
				this.identifier();
				}
				break;
			case MultiQueryMySQLParser.ENGINE_SYMBOL:
			case MultiQueryMySQLParser.STORAGE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7674;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.STORAGE_SYMBOL) {
					{
					this.state = 7673;
					this.match(MultiQueryMySQLParser.STORAGE_SYMBOL);
					}
				}

				this.state = 7676;
				_localctx._option = this.match(MultiQueryMySQLParser.ENGINE_SYMBOL);
				this.state = 7678;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1026, this._ctx) ) {
				case 1:
					{
					this.state = 7677;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7680;
				this.engineRef();
				}
				break;
			case MultiQueryMySQLParser.NODEGROUP_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7681;
				_localctx._option = this.match(MultiQueryMySQLParser.NODEGROUP_SYMBOL);
				this.state = 7683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7682;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7685;
				this.real_ulong_number();
				}
				break;
			case MultiQueryMySQLParser.MAX_ROWS_SYMBOL:
			case MultiQueryMySQLParser.MIN_ROWS_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7686;
				_localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.MAX_ROWS_SYMBOL || _la === MultiQueryMySQLParser.MIN_ROWS_SYMBOL)) {
					_localctx._option = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.EQUAL_OPERATOR) {
					{
					this.state = 7687;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7690;
				this.real_ulong_number();
				}
				break;
			case MultiQueryMySQLParser.DATA_SYMBOL:
			case MultiQueryMySQLParser.INDEX_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7691;
				_localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.DATA_SYMBOL || _la === MultiQueryMySQLParser.INDEX_SYMBOL)) {
					_localctx._option = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7692;
				this.match(MultiQueryMySQLParser.DIRECTORY_SYMBOL);
				this.state = 7694;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1029, this._ctx) ) {
				case 1:
					{
					this.state = 7693;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7696;
				this.textLiteral();
				}
				break;
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7697;
				_localctx._option = this.match(MultiQueryMySQLParser.COMMENT_SYMBOL);
				this.state = 7699;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1030, this._ctx) ) {
				case 1:
					{
					this.state = 7698;
					this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7701;
				this.textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionDefinition(): SubpartitionDefinitionContext {
		let _localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 962, MultiQueryMySQLParser.RULE_subpartitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7704;
			this.match(MultiQueryMySQLParser.SUBPARTITION_SYMBOL);
			this.state = 7705;
			this.textOrIdentifier();
			this.state = 7709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMENT_SYMBOL || _la === MultiQueryMySQLParser.DATA_SYMBOL || _la === MultiQueryMySQLParser.ENGINE_SYMBOL || _la === MultiQueryMySQLParser.MAX_ROWS_SYMBOL || _la === MultiQueryMySQLParser.MIN_ROWS_SYMBOL || _la === MultiQueryMySQLParser.NODEGROUP_SYMBOL || _la === MultiQueryMySQLParser.STORAGE_SYMBOL || _la === MultiQueryMySQLParser.TABLESPACE_SYMBOL || _la === MultiQueryMySQLParser.INDEX_SYMBOL) {
				{
				{
				this.state = 7706;
				this.partitionOption();
				}
				}
				this.state = 7711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionValueItemListParen(): PartitionValueItemListParenContext {
		let _localctx: PartitionValueItemListParenContext = new PartitionValueItemListParenContext(this._ctx, this.state);
		this.enterRule(_localctx, 964, MultiQueryMySQLParser.RULE_partitionValueItemListParen);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7712;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7713;
			this.partitionValueItem();
			this.state = 7718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 7714;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 7715;
				this.partitionValueItem();
				}
				}
				this.state = 7720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7721;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionValueItem(): PartitionValueItemContext {
		let _localctx: PartitionValueItemContext = new PartitionValueItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 966, MultiQueryMySQLParser.RULE_partitionValueItem);
		try {
			this.state = 7725;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1034, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7723;
				this.bitExpr(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7724;
				this.match(MultiQueryMySQLParser.MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public definerClause(): DefinerClauseContext {
		let _localctx: DefinerClauseContext = new DefinerClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 968, MultiQueryMySQLParser.RULE_definerClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7727;
			this.match(MultiQueryMySQLParser.DEFINER_SYMBOL);
			this.state = 7728;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 7729;
			this.user();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let _localctx: IfExistsContext = new IfExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 970, MultiQueryMySQLParser.RULE_ifExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7731;
			this.match(MultiQueryMySQLParser.IF_SYMBOL);
			this.state = 7732;
			this.match(MultiQueryMySQLParser.EXISTS_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let _localctx: IfNotExistsContext = new IfNotExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 972, MultiQueryMySQLParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7734;
			this.match(MultiQueryMySQLParser.IF_SYMBOL);
			this.state = 7735;
			this.notRule();
			this.state = 7736;
			this.match(MultiQueryMySQLParser.EXISTS_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureParameter(): ProcedureParameterContext {
		let _localctx: ProcedureParameterContext = new ProcedureParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 974, MultiQueryMySQLParser.RULE_procedureParameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7739;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1035, this._ctx) ) {
			case 1:
				{
				this.state = 7738;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.INOUT_SYMBOL || _la === MultiQueryMySQLParser.IN_SYMBOL || _la === MultiQueryMySQLParser.OUT_SYMBOL)) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 7741;
			this.functionParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionParameter(): FunctionParameterContext {
		let _localctx: FunctionParameterContext = new FunctionParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 976, MultiQueryMySQLParser.RULE_functionParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7743;
			this.parameterName();
			this.state = 7744;
			this.typeWithOptCollate();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collate(): CollateContext {
		let _localctx: CollateContext = new CollateContext(this._ctx, this.state);
		this.enterRule(_localctx, 978, MultiQueryMySQLParser.RULE_collate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7746;
			this.match(MultiQueryMySQLParser.COLLATE_SYMBOL);
			this.state = 7747;
			this.collationName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeWithOptCollate(): TypeWithOptCollateContext {
		let _localctx: TypeWithOptCollateContext = new TypeWithOptCollateContext(this._ctx, this.state);
		this.enterRule(_localctx, 980, MultiQueryMySQLParser.RULE_typeWithOptCollate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7749;
			this.dataType();
			this.state = 7751;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1036, this._ctx) ) {
			case 1:
				{
				this.state = 7750;
				this.collate();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schemaIdentifierPair(): SchemaIdentifierPairContext {
		let _localctx: SchemaIdentifierPairContext = new SchemaIdentifierPairContext(this._ctx, this.state);
		this.enterRule(_localctx, 982, MultiQueryMySQLParser.RULE_schemaIdentifierPair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7753;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7754;
			this.schemaRef();
			this.state = 7755;
			this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
			this.state = 7756;
			this.schemaRef();
			this.state = 7757;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewRefList(): ViewRefListContext {
		let _localctx: ViewRefListContext = new ViewRefListContext(this._ctx, this.state);
		this.enterRule(_localctx, 984, MultiQueryMySQLParser.RULE_viewRefList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7759;
			this.viewRef();
			this.state = 7764;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1037, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7760;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7761;
					this.viewRef();
					}
					}
				}
				this.state = 7766;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1037, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateList(): UpdateListContext {
		let _localctx: UpdateListContext = new UpdateListContext(this._ctx, this.state);
		this.enterRule(_localctx, 986, MultiQueryMySQLParser.RULE_updateList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7767;
			this.updateElement();
			this.state = 7772;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1038, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7768;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7769;
					this.updateElement();
					}
					}
				}
				this.state = 7774;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1038, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateElement(): UpdateElementContext {
		let _localctx: UpdateElementContext = new UpdateElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 988, MultiQueryMySQLParser.RULE_updateElement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7775;
			this.columnRef();
			this.state = 7776;
			this.match(MultiQueryMySQLParser.EQUAL_OPERATOR);
			this.state = 7779;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1039, this._ctx) ) {
			case 1:
				{
				this.state = 7777;
				this.expr(0);
				}
				break;

			case 2:
				{
				this.state = 7778;
				this.match(MultiQueryMySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetClause(): CharsetClauseContext {
		let _localctx: CharsetClauseContext = new CharsetClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 990, MultiQueryMySQLParser.RULE_charsetClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7781;
			this.charset();
			this.state = 7782;
			this.charsetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldsClause(): FieldsClauseContext {
		let _localctx: FieldsClauseContext = new FieldsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 992, MultiQueryMySQLParser.RULE_fieldsClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7784;
			this.match(MultiQueryMySQLParser.COLUMNS_SYMBOL);
			this.state = 7786;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7785;
					this.fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7788;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1040, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldTerm(): FieldTermContext {
		let _localctx: FieldTermContext = new FieldTermContext(this._ctx, this.state);
		this.enterRule(_localctx, 994, MultiQueryMySQLParser.RULE_fieldTerm);
		let _la: number;
		try {
			this.state = 7802;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.TERMINATED_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7790;
				this.match(MultiQueryMySQLParser.TERMINATED_SYMBOL);
				this.state = 7791;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 7792;
				this.textString();
				}
				break;
			case MultiQueryMySQLParser.ENCLOSED_SYMBOL:
			case MultiQueryMySQLParser.OPTIONALLY_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.OPTIONALLY_SYMBOL) {
					{
					this.state = 7793;
					this.match(MultiQueryMySQLParser.OPTIONALLY_SYMBOL);
					}
				}

				this.state = 7796;
				this.match(MultiQueryMySQLParser.ENCLOSED_SYMBOL);
				this.state = 7797;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 7798;
				this.textString();
				}
				break;
			case MultiQueryMySQLParser.ESCAPED_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7799;
				this.match(MultiQueryMySQLParser.ESCAPED_SYMBOL);
				this.state = 7800;
				this.match(MultiQueryMySQLParser.BY_SYMBOL);
				this.state = 7801;
				this.textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linesClause(): LinesClauseContext {
		let _localctx: LinesClauseContext = new LinesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 996, MultiQueryMySQLParser.RULE_linesClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7804;
			this.match(MultiQueryMySQLParser.LINES_SYMBOL);
			this.state = 7806;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7805;
					this.lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7808;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1043, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lineTerm(): LineTermContext {
		let _localctx: LineTermContext = new LineTermContext(this._ctx, this.state);
		this.enterRule(_localctx, 998, MultiQueryMySQLParser.RULE_lineTerm);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7810;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.STARTING_SYMBOL || _la === MultiQueryMySQLParser.TERMINATED_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7811;
			this.match(MultiQueryMySQLParser.BY_SYMBOL);
			this.state = 7812;
			this.textString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userList(): UserListContext {
		let _localctx: UserListContext = new UserListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1000, MultiQueryMySQLParser.RULE_userList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7814;
			this.user();
			this.state = 7819;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1044, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7815;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7816;
					this.user();
					}
					}
				}
				this.state = 7821;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1044, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUserList(): CreateUserListContext {
		let _localctx: CreateUserListContext = new CreateUserListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1002, MultiQueryMySQLParser.RULE_createUserList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7822;
			this.createUserEntry();
			this.state = 7827;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1045, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7823;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7824;
					this.createUserEntry();
					}
					}
				}
				this.state = 7829;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1045, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUserList(): AlterUserListContext {
		let _localctx: AlterUserListContext = new AlterUserListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1004, MultiQueryMySQLParser.RULE_alterUserList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7830;
			this.alterUserEntry();
			this.state = 7835;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1046, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7831;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 7832;
					this.alterUserEntry();
					}
					}
				}
				this.state = 7837;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1046, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUserEntry(): CreateUserEntryContext {
		let _localctx: CreateUserEntryContext = new CreateUserEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 1006, MultiQueryMySQLParser.RULE_createUserEntry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7838;
			this.user();
			this.state = 7865;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1051, this._ctx) ) {
			case 1:
				{
				this.state = 7839;
				this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
				this.state = 7863;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1050, this._ctx) ) {
				case 1:
					{
					this.state = 7840;
					this.match(MultiQueryMySQLParser.BY_SYMBOL);
					this.state = 7843;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1047, this._ctx) ) {
					case 1:
						{
						this.state = 7841;
						if (!(this.serverVersion < 80011)) {
							throw new FailedPredicateException(this, "this.serverVersion < 80011");
						}
						this.state = 7842;
						this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
						}
						break;
					}
					this.state = 7845;
					this.textString();
					}
					break;

				case 2:
					{
					this.state = 7846;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 7847;
					this.textOrIdentifier();
					this.state = 7853;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1048, this._ctx) ) {
					case 1:
						{
						this.state = 7848;
						this.match(MultiQueryMySQLParser.AS_SYMBOL);
						this.state = 7849;
						this.textStringHash();
						}
						break;

					case 2:
						{
						this.state = 7850;
						if (!(this.serverVersion >= 50706)) {
							throw new FailedPredicateException(this, "this.serverVersion >= 50706");
						}
						this.state = 7851;
						this.match(MultiQueryMySQLParser.BY_SYMBOL);
						this.state = 7852;
						this.textString();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 7855;
					if (!(this.serverVersion >= 80018)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80018");
					}
					this.state = 7858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.WITH_SYMBOL) {
						{
						this.state = 7856;
						this.match(MultiQueryMySQLParser.WITH_SYMBOL);
						this.state = 7857;
						this.textOrIdentifier();
						}
					}

					this.state = 7860;
					this.match(MultiQueryMySQLParser.BY_SYMBOL);
					this.state = 7861;
					this.match(MultiQueryMySQLParser.RANDOM_SYMBOL);
					this.state = 7862;
					this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUserEntry(): AlterUserEntryContext {
		let _localctx: AlterUserEntryContext = new AlterUserEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 1008, MultiQueryMySQLParser.RULE_alterUserEntry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7867;
			this.user();
			this.state = 7896;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1059, this._ctx) ) {
			case 1:
				{
				this.state = 7868;
				this.match(MultiQueryMySQLParser.IDENTIFIED_SYMBOL);
				this.state = 7891;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1057, this._ctx) ) {
				case 1:
					{
					this.state = 7871;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.WITH_SYMBOL) {
						{
						this.state = 7869;
						this.match(MultiQueryMySQLParser.WITH_SYMBOL);
						this.state = 7870;
						this.textOrIdentifier();
						}
					}

					this.state = 7873;
					this.match(MultiQueryMySQLParser.BY_SYMBOL);
					this.state = 7874;
					this.textString();
					this.state = 7877;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1053, this._ctx) ) {
					case 1:
						{
						this.state = 7875;
						this.match(MultiQueryMySQLParser.REPLACE_SYMBOL);
						this.state = 7876;
						this.textString();
						}
						break;
					}
					this.state = 7880;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1054, this._ctx) ) {
					case 1:
						{
						this.state = 7879;
						this.retainCurrentPassword();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 7882;
					this.match(MultiQueryMySQLParser.WITH_SYMBOL);
					this.state = 7883;
					this.textOrIdentifier();
					this.state = 7889;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1056, this._ctx) ) {
					case 1:
						{
						this.state = 7884;
						this.match(MultiQueryMySQLParser.AS_SYMBOL);
						this.state = 7885;
						this.textStringHash();
						this.state = 7887;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 1055, this._ctx) ) {
						case 1:
							{
							this.state = 7886;
							this.retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 7894;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1058, this._ctx) ) {
				case 1:
					{
					this.state = 7893;
					this.discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public retainCurrentPassword(): RetainCurrentPasswordContext {
		let _localctx: RetainCurrentPasswordContext = new RetainCurrentPasswordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1010, MultiQueryMySQLParser.RULE_retainCurrentPassword);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7898;
			this.match(MultiQueryMySQLParser.RETAIN_SYMBOL);
			this.state = 7899;
			this.match(MultiQueryMySQLParser.CURRENT_SYMBOL);
			this.state = 7900;
			this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public discardOldPassword(): DiscardOldPasswordContext {
		let _localctx: DiscardOldPasswordContext = new DiscardOldPasswordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1012, MultiQueryMySQLParser.RULE_discardOldPassword);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7902;
			this.match(MultiQueryMySQLParser.DISCARD_SYMBOL);
			this.state = 7903;
			this.match(MultiQueryMySQLParser.OLD_SYMBOL);
			this.state = 7904;
			this.match(MultiQueryMySQLParser.PASSWORD_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replacePassword(): ReplacePasswordContext {
		let _localctx: ReplacePasswordContext = new ReplacePasswordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1014, MultiQueryMySQLParser.RULE_replacePassword);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7906;
			this.match(MultiQueryMySQLParser.REPLACE_SYMBOL);
			this.state = 7907;
			this.textString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userIdentifierOrText(): UserIdentifierOrTextContext {
		let _localctx: UserIdentifierOrTextContext = new UserIdentifierOrTextContext(this._ctx, this.state);
		this.enterRule(_localctx, 1016, MultiQueryMySQLParser.RULE_userIdentifierOrText);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7909;
			this.textOrIdentifier();
			this.state = 7913;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1060, this._ctx) ) {
			case 1:
				{
				this.state = 7910;
				this.match(MultiQueryMySQLParser.AT_SIGN_SYMBOL);
				this.state = 7911;
				this.textOrIdentifier();
				}
				break;

			case 2:
				{
				this.state = 7912;
				this.match(MultiQueryMySQLParser.AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user(): UserContext {
		let _localctx: UserContext = new UserContext(this._ctx, this.state);
		this.enterRule(_localctx, 1018, MultiQueryMySQLParser.RULE_user);
		try {
			this.state = 7920;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1062, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7915;
				this.userIdentifierOrText();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7916;
				this.match(MultiQueryMySQLParser.CURRENT_USER_SYMBOL);
				this.state = 7918;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1061, this._ctx) ) {
				case 1:
					{
					this.state = 7917;
					this.parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public likeClause(): LikeClauseContext {
		let _localctx: LikeClauseContext = new LikeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1020, MultiQueryMySQLParser.RULE_likeClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7922;
			this.match(MultiQueryMySQLParser.LIKE_SYMBOL);
			this.state = 7923;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public likeOrWhere(): LikeOrWhereContext {
		let _localctx: LikeOrWhereContext = new LikeOrWhereContext(this._ctx, this.state);
		this.enterRule(_localctx, 1022, MultiQueryMySQLParser.RULE_likeOrWhere);
		try {
			this.state = 7927;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.LIKE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7925;
				this.likeClause();
				}
				break;
			case MultiQueryMySQLParser.WHERE_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7926;
				this.whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onlineOption(): OnlineOptionContext {
		let _localctx: OnlineOptionContext = new OnlineOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1024, MultiQueryMySQLParser.RULE_onlineOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7929;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.OFFLINE_SYMBOL || _la === MultiQueryMySQLParser.ONLINE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public noWriteToBinLog(): NoWriteToBinLogContext {
		let _localctx: NoWriteToBinLogContext = new NoWriteToBinLogContext(this._ctx, this.state);
		this.enterRule(_localctx, 1026, MultiQueryMySQLParser.RULE_noWriteToBinLog);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7931;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usePartition(): UsePartitionContext {
		let _localctx: UsePartitionContext = new UsePartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1028, MultiQueryMySQLParser.RULE_usePartition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7933;
			if (!(this.serverVersion >= 50602)) {
				throw new FailedPredicateException(this, "this.serverVersion >= 50602");
			}
			this.state = 7934;
			this.match(MultiQueryMySQLParser.PARTITION_SYMBOL);
			this.state = 7935;
			this.identifierListWithParentheses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fieldIdentifier(): FieldIdentifierContext {
		let _localctx: FieldIdentifierContext = new FieldIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1030, MultiQueryMySQLParser.RULE_fieldIdentifier);
		try {
			this.state = 7942;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1065, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7937;
				this.dotIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7938;
				this.qualifiedIdentifier();
				this.state = 7940;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1064, this._ctx) ) {
				case 1:
					{
					this.state = 7939;
					this.dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnName(): ColumnNameContext {
		let _localctx: ColumnNameContext = new ColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1032, MultiQueryMySQLParser.RULE_columnName);
		try {
			this.state = 7948;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1066, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7944;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 7945;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7946;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 7947;
				this.fieldIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnInternalRef(): ColumnInternalRefContext {
		let _localctx: ColumnInternalRefContext = new ColumnInternalRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1034, MultiQueryMySQLParser.RULE_columnInternalRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7950;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnInternalRefList(): ColumnInternalRefListContext {
		let _localctx: ColumnInternalRefListContext = new ColumnInternalRefListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1036, MultiQueryMySQLParser.RULE_columnInternalRefList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7952;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7953;
			this.columnInternalRef();
			this.state = 7958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 7954;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 7955;
				this.columnInternalRef();
				}
				}
				this.state = 7960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7961;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnRef(): ColumnRefContext {
		let _localctx: ColumnRefContext = new ColumnRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1038, MultiQueryMySQLParser.RULE_columnRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7963;
			this.fieldIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertIdentifier(): InsertIdentifierContext {
		let _localctx: InsertIdentifierContext = new InsertIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1040, MultiQueryMySQLParser.RULE_insertIdentifier);
		try {
			this.state = 7967;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1068, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7965;
				this.columnRef();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7966;
				this.tableWild();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexName(): IndexNameContext {
		let _localctx: IndexNameContext = new IndexNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1042, MultiQueryMySQLParser.RULE_indexName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7969;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexRef(): IndexRefContext {
		let _localctx: IndexRefContext = new IndexRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1044, MultiQueryMySQLParser.RULE_indexRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7971;
			this.fieldIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableWild(): TableWildContext {
		let _localctx: TableWildContext = new TableWildContext(this._ctx, this.state);
		this.enterRule(_localctx, 1046, MultiQueryMySQLParser.RULE_tableWild);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7973;
			this.identifier();
			this.state = 7974;
			this.match(MultiQueryMySQLParser.DOT_SYMBOL);
			this.state = 7978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1069, this._ctx) ) {
			case 1:
				{
				this.state = 7975;
				this.identifier();
				this.state = 7976;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			}
			this.state = 7980;
			this.match(MultiQueryMySQLParser.MULT_OPERATOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schemaName(): SchemaNameContext {
		let _localctx: SchemaNameContext = new SchemaNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1048, MultiQueryMySQLParser.RULE_schemaName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7982;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schemaRef(): SchemaRefContext {
		let _localctx: SchemaRefContext = new SchemaRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1050, MultiQueryMySQLParser.RULE_schemaRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7984;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureName(): ProcedureNameContext {
		let _localctx: ProcedureNameContext = new ProcedureNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1052, MultiQueryMySQLParser.RULE_procedureName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7986;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureRef(): ProcedureRefContext {
		let _localctx: ProcedureRefContext = new ProcedureRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1054, MultiQueryMySQLParser.RULE_procedureRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7988;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionName(): FunctionNameContext {
		let _localctx: FunctionNameContext = new FunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1056, MultiQueryMySQLParser.RULE_functionName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7990;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionRef(): FunctionRefContext {
		let _localctx: FunctionRefContext = new FunctionRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1058, MultiQueryMySQLParser.RULE_functionRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7992;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerName(): TriggerNameContext {
		let _localctx: TriggerNameContext = new TriggerNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1060, MultiQueryMySQLParser.RULE_triggerName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7994;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerRef(): TriggerRefContext {
		let _localctx: TriggerRefContext = new TriggerRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1062, MultiQueryMySQLParser.RULE_triggerRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7996;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewName(): ViewNameContext {
		let _localctx: ViewNameContext = new ViewNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1064, MultiQueryMySQLParser.RULE_viewName);
		try {
			this.state = 8000;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1070, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7998;
				this.qualifiedIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7999;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewRef(): ViewRefContext {
		let _localctx: ViewRefContext = new ViewRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1066, MultiQueryMySQLParser.RULE_viewRef);
		try {
			this.state = 8004;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1071, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8002;
				this.qualifiedIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8003;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceName(): TablespaceNameContext {
		let _localctx: TablespaceNameContext = new TablespaceNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1068, MultiQueryMySQLParser.RULE_tablespaceName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8006;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceRef(): TablespaceRefContext {
		let _localctx: TablespaceRefContext = new TablespaceRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1070, MultiQueryMySQLParser.RULE_tablespaceRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8008;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logfileGroupName(): LogfileGroupNameContext {
		let _localctx: LogfileGroupNameContext = new LogfileGroupNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1072, MultiQueryMySQLParser.RULE_logfileGroupName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8010;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logfileGroupRef(): LogfileGroupRefContext {
		let _localctx: LogfileGroupRefContext = new LogfileGroupRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1074, MultiQueryMySQLParser.RULE_logfileGroupRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8012;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public eventName(): EventNameContext {
		let _localctx: EventNameContext = new EventNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1076, MultiQueryMySQLParser.RULE_eventName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8014;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public eventRef(): EventRefContext {
		let _localctx: EventRefContext = new EventRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1078, MultiQueryMySQLParser.RULE_eventRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8016;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public udfName(): UdfNameContext {
		let _localctx: UdfNameContext = new UdfNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1080, MultiQueryMySQLParser.RULE_udfName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8018;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverName(): ServerNameContext {
		let _localctx: ServerNameContext = new ServerNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1082, MultiQueryMySQLParser.RULE_serverName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8020;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverRef(): ServerRefContext {
		let _localctx: ServerRefContext = new ServerRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1084, MultiQueryMySQLParser.RULE_serverRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8022;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public engineRef(): EngineRefContext {
		let _localctx: EngineRefContext = new EngineRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1086, MultiQueryMySQLParser.RULE_engineRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8024;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let _localctx: TableNameContext = new TableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1088, MultiQueryMySQLParser.RULE_tableName);
		try {
			this.state = 8028;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1072, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8026;
				this.qualifiedIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8027;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filterTableRef(): FilterTableRefContext {
		let _localctx: FilterTableRefContext = new FilterTableRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1090, MultiQueryMySQLParser.RULE_filterTableRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8030;
			this.schemaRef();
			this.state = 8031;
			this.dotIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRefWithWildcard(): TableRefWithWildcardContext {
		let _localctx: TableRefWithWildcardContext = new TableRefWithWildcardContext(this._ctx, this.state);
		this.enterRule(_localctx, 1092, MultiQueryMySQLParser.RULE_tableRefWithWildcard);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8033;
			this.identifier();
			this.state = 8041;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1074, this._ctx) ) {
			case 1:
				{
				this.state = 8034;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				this.state = 8035;
				this.match(MultiQueryMySQLParser.MULT_OPERATOR);
				}
				break;

			case 2:
				{
				this.state = 8036;
				this.dotIdentifier();
				this.state = 8039;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1073, this._ctx) ) {
				case 1:
					{
					this.state = 8037;
					this.match(MultiQueryMySQLParser.DOT_SYMBOL);
					this.state = 8038;
					this.match(MultiQueryMySQLParser.MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRef(): TableRefContext {
		let _localctx: TableRefContext = new TableRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1094, MultiQueryMySQLParser.RULE_tableRef);
		try {
			this.state = 8045;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1075, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8043;
				this.qualifiedIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8044;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRefList(): TableRefListContext {
		let _localctx: TableRefListContext = new TableRefListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1096, MultiQueryMySQLParser.RULE_tableRefList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8047;
			this.tableRef();
			this.state = 8052;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1076, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8048;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 8049;
					this.tableRef();
					}
					}
				}
				this.state = 8054;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1076, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableAliasRefList(): TableAliasRefListContext {
		let _localctx: TableAliasRefListContext = new TableAliasRefListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1098, MultiQueryMySQLParser.RULE_tableAliasRefList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8055;
			this.tableRefWithWildcard();
			this.state = 8060;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1077, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8056;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 8057;
					this.tableRefWithWildcard();
					}
					}
				}
				this.state = 8062;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1077, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameterName(): ParameterNameContext {
		let _localctx: ParameterNameContext = new ParameterNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1100, MultiQueryMySQLParser.RULE_parameterName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8063;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelIdentifier(): LabelIdentifierContext {
		let _localctx: LabelIdentifierContext = new LabelIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1102, MultiQueryMySQLParser.RULE_labelIdentifier);
		try {
			this.state = 8067;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1078, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8065;
				this.pureIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8066;
				this.labelKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelRef(): LabelRefContext {
		let _localctx: LabelRefContext = new LabelRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1104, MultiQueryMySQLParser.RULE_labelRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8069;
			this.labelIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleIdentifier(): RoleIdentifierContext {
		let _localctx: RoleIdentifierContext = new RoleIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1106, MultiQueryMySQLParser.RULE_roleIdentifier);
		try {
			this.state = 8073;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1079, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8071;
				this.pureIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8072;
				this.roleKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleRef(): RoleRefContext {
		let _localctx: RoleRefContext = new RoleRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1108, MultiQueryMySQLParser.RULE_roleRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8075;
			this.roleIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pluginRef(): PluginRefContext {
		let _localctx: PluginRefContext = new PluginRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1110, MultiQueryMySQLParser.RULE_pluginRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8077;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public componentRef(): ComponentRefContext {
		let _localctx: ComponentRefContext = new ComponentRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1112, MultiQueryMySQLParser.RULE_componentRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8079;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceGroupRef(): ResourceGroupRefContext {
		let _localctx: ResourceGroupRefContext = new ResourceGroupRefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1114, MultiQueryMySQLParser.RULE_resourceGroupRef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8081;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowName(): WindowNameContext {
		let _localctx: WindowNameContext = new WindowNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1116, MultiQueryMySQLParser.RULE_windowName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8083;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pureIdentifier(): PureIdentifierContext {
		let _localctx: PureIdentifierContext = new PureIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1118, MultiQueryMySQLParser.RULE_pureIdentifier);
		let _la: number;
		try {
			this.state = 8088;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1080, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8085;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.IDENTIFIER || _la === MultiQueryMySQLParser.BACK_TICK_QUOTED_ID)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8086;
				if (!(this.isSqlModeActive(SqlMode.AnsiQuotes))) {
					throw new FailedPredicateException(this, "this.isSqlModeActive(SqlMode.AnsiQuotes)");
				}
				this.state = 8087;
				this.match(MultiQueryMySQLParser.DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1120, MultiQueryMySQLParser.RULE_identifier);
		try {
			this.state = 8092;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1081, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8090;
				this.pureIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8091;
				this.identifierKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierList(): IdentifierListContext {
		let _localctx: IdentifierListContext = new IdentifierListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1122, MultiQueryMySQLParser.RULE_identifierList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8094;
			this.identifier();
			this.state = 8099;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1082, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8095;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 8096;
					this.identifier();
					}
					}
				}
				this.state = 8101;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1082, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		let _localctx: IdentifierListWithParenthesesContext = new IdentifierListWithParenthesesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1124, MultiQueryMySQLParser.RULE_identifierListWithParentheses);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8102;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8103;
			this.identifierList();
			this.state = 8104;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		let _localctx: QualifiedIdentifierContext = new QualifiedIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1126, MultiQueryMySQLParser.RULE_qualifiedIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8106;
			this.identifier();
			this.state = 8108;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1083, this._ctx) ) {
			case 1:
				{
				this.state = 8107;
				this.dotIdentifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleIdentifier(): SimpleIdentifierContext {
		let _localctx: SimpleIdentifierContext = new SimpleIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1128, MultiQueryMySQLParser.RULE_simpleIdentifier);
		let _la: number;
		try {
			this.state = 8121;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1086, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8110;
				this.identifier();
				this.state = 8115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.DOT_SYMBOL) {
					{
					this.state = 8111;
					this.dotIdentifier();
					this.state = 8113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MultiQueryMySQLParser.DOT_SYMBOL) {
						{
						this.state = 8112;
						this.dotIdentifier();
						}
					}

					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8117;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 8118;
				this.dotIdentifier();
				this.state = 8119;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dotIdentifier(): DotIdentifierContext {
		let _localctx: DotIdentifierContext = new DotIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1130, MultiQueryMySQLParser.RULE_dotIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8123;
			this.match(MultiQueryMySQLParser.DOT_SYMBOL);
			this.state = 8124;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ulong_number(): Ulong_numberContext {
		let _localctx: Ulong_numberContext = new Ulong_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 1132, MultiQueryMySQLParser.RULE_ulong_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8126;
			_la = this._input.LA(1);
			if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MultiQueryMySQLParser.INT_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.LONG_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & ((1 << (MultiQueryMySQLParser.HEX_NUMBER - 421)) | (1 << (MultiQueryMySQLParser.DECIMAL_NUMBER - 421)) | (1 << (MultiQueryMySQLParser.FLOAT_NUMBER - 421)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public real_ulong_number(): Real_ulong_numberContext {
		let _localctx: Real_ulong_numberContext = new Real_ulong_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 1134, MultiQueryMySQLParser.RULE_real_ulong_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8128;
			_la = this._input.LA(1);
			if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MultiQueryMySQLParser.INT_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.LONG_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MultiQueryMySQLParser.HEX_NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ulonglong_number(): Ulonglong_numberContext {
		let _localctx: Ulonglong_numberContext = new Ulonglong_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 1136, MultiQueryMySQLParser.RULE_ulonglong_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8130;
			_la = this._input.LA(1);
			if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MultiQueryMySQLParser.INT_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.LONG_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MultiQueryMySQLParser.DECIMAL_NUMBER || _la === MultiQueryMySQLParser.FLOAT_NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		let _localctx: Real_ulonglong_numberContext = new Real_ulonglong_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 1138, MultiQueryMySQLParser.RULE_real_ulonglong_number);
		try {
			this.state = 8137;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1087, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8132;
				this.match(MultiQueryMySQLParser.INT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8133;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 8134;
				this.match(MultiQueryMySQLParser.HEX_NUMBER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8135;
				this.match(MultiQueryMySQLParser.ULONGLONG_NUMBER);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8136;
				this.match(MultiQueryMySQLParser.LONG_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal(): LiteralContext {
		let _localctx: LiteralContext = new LiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1140, MultiQueryMySQLParser.RULE_literal);
		let _la: number;
		try {
			this.state = 8148;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1089, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8139;
				this.textLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8140;
				this.numLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8141;
				this.temporalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8142;
				this.nullLiteral();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8143;
				this.boolLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 8145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MultiQueryMySQLParser.UNDERSCORE_CHARSET) {
					{
					this.state = 8144;
					this.match(MultiQueryMySQLParser.UNDERSCORE_CHARSET);
					}
				}

				this.state = 8147;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.HEX_NUMBER || _la === MultiQueryMySQLParser.BIN_NUMBER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signedLiteral(): SignedLiteralContext {
		let _localctx: SignedLiteralContext = new SignedLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1142, MultiQueryMySQLParser.RULE_signedLiteral);
		try {
			this.state = 8155;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1090, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8150;
				this.literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8151;
				this.match(MultiQueryMySQLParser.PLUS_OPERATOR);
				this.state = 8152;
				this.ulong_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8153;
				this.match(MultiQueryMySQLParser.MINUS_OPERATOR);
				this.state = 8154;
				this.ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringList(): StringListContext {
		let _localctx: StringListContext = new StringListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1144, MultiQueryMySQLParser.RULE_stringList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8157;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8158;
			this.textString();
			this.state = 8163;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MultiQueryMySQLParser.COMMA_SYMBOL) {
				{
				{
				this.state = 8159;
				this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
				this.state = 8160;
				this.textString();
				}
				}
				this.state = 8165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8166;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textStringLiteral(): TextStringLiteralContext {
		let _localctx: TextStringLiteralContext = new TextStringLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1146, MultiQueryMySQLParser.RULE_textStringLiteral);
		try {
			this.state = 8171;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1092, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8168;
				_localctx._value = this.match(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8169;
				if (!(!this.isSqlModeActive(SqlMode.AnsiQuotes))) {
					throw new FailedPredicateException(this, "!this.isSqlModeActive(SqlMode.AnsiQuotes)");
				}
				this.state = 8170;
				_localctx._value = this.match(MultiQueryMySQLParser.DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textString(): TextStringContext {
		let _localctx: TextStringContext = new TextStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 1148, MultiQueryMySQLParser.RULE_textString);
		try {
			this.state = 8176;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1093, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8173;
				this.textStringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8174;
				this.match(MultiQueryMySQLParser.HEX_NUMBER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8175;
				this.match(MultiQueryMySQLParser.BIN_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textStringHash(): TextStringHashContext {
		let _localctx: TextStringHashContext = new TextStringHashContext(this._ctx, this.state);
		this.enterRule(_localctx, 1150, MultiQueryMySQLParser.RULE_textStringHash);
		try {
			this.state = 8181;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1094, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8178;
				this.textStringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8179;
				if (!(this.serverVersion >= 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80017");
				}
				this.state = 8180;
				this.match(MultiQueryMySQLParser.HEX_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textLiteral(): TextLiteralContext {
		let _localctx: TextLiteralContext = new TextLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1152, MultiQueryMySQLParser.RULE_textLiteral);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8188;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1096, this._ctx) ) {
			case 1:
				{
				this.state = 8184;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1095, this._ctx) ) {
				case 1:
					{
					this.state = 8183;
					this.match(MultiQueryMySQLParser.UNDERSCORE_CHARSET);
					}
					break;
				}
				this.state = 8186;
				this.textStringLiteral();
				}
				break;

			case 2:
				{
				this.state = 8187;
				this.match(MultiQueryMySQLParser.NCHAR_TEXT);
				}
				break;
			}
			this.state = 8193;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1097, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8190;
					this.textStringLiteral();
					}
					}
				}
				this.state = 8195;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1097, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		let _localctx: TextStringNoLinebreakContext = new TextStringNoLinebreakContext(this._ctx, this.state);
		this.enterRule(_localctx, 1154, MultiQueryMySQLParser.RULE_textStringNoLinebreak);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8196;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textStringLiteralList(): TextStringLiteralListContext {
		let _localctx: TextStringLiteralListContext = new TextStringLiteralListContext(this._ctx, this.state);
		this.enterRule(_localctx, 1156, MultiQueryMySQLParser.RULE_textStringLiteralList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8198;
			this.textStringLiteral();
			this.state = 8203;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1098, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8199;
					this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
					this.state = 8200;
					this.textStringLiteral();
					}
					}
				}
				this.state = 8205;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1098, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numLiteral(): NumLiteralContext {
		let _localctx: NumLiteralContext = new NumLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1158, MultiQueryMySQLParser.RULE_numLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8206;
			_la = this._input.LA(1);
			if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MultiQueryMySQLParser.INT_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.LONG_NUMBER - 380)) | (1 << (MultiQueryMySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MultiQueryMySQLParser.DECIMAL_NUMBER || _la === MultiQueryMySQLParser.FLOAT_NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boolLiteral(): BoolLiteralContext {
		let _localctx: BoolLiteralContext = new BoolLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1160, MultiQueryMySQLParser.RULE_boolLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8208;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.FALSE_SYMBOL || _la === MultiQueryMySQLParser.TRUE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullLiteral(): NullLiteralContext {
		let _localctx: NullLiteralContext = new NullLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1162, MultiQueryMySQLParser.RULE_nullLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8210;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.NULL2_SYMBOL || _la === MultiQueryMySQLParser.NULL_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public temporalLiteral(): TemporalLiteralContext {
		let _localctx: TemporalLiteralContext = new TemporalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1164, MultiQueryMySQLParser.RULE_temporalLiteral);
		try {
			this.state = 8218;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.DATE_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8212;
				this.match(MultiQueryMySQLParser.DATE_SYMBOL);
				this.state = 8213;
				this.match(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			case MultiQueryMySQLParser.TIME_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8214;
				this.match(MultiQueryMySQLParser.TIME_SYMBOL);
				this.state = 8215;
				this.match(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			case MultiQueryMySQLParser.TIMESTAMP_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8216;
				this.match(MultiQueryMySQLParser.TIMESTAMP_SYMBOL);
				this.state = 8217;
				this.match(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public floatOptions(): FloatOptionsContext {
		let _localctx: FloatOptionsContext = new FloatOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1166, MultiQueryMySQLParser.RULE_floatOptions);
		try {
			this.state = 8222;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1100, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8220;
				this.fieldLength();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8221;
				this.precision();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standardFloatOptions(): StandardFloatOptionsContext {
		let _localctx: StandardFloatOptionsContext = new StandardFloatOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1168, MultiQueryMySQLParser.RULE_standardFloatOptions);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8224;
			this.precision();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precision(): PrecisionContext {
		let _localctx: PrecisionContext = new PrecisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1170, MultiQueryMySQLParser.RULE_precision);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8226;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8227;
			this.match(MultiQueryMySQLParser.INT_NUMBER);
			this.state = 8228;
			this.match(MultiQueryMySQLParser.COMMA_SYMBOL);
			this.state = 8229;
			this.match(MultiQueryMySQLParser.INT_NUMBER);
			this.state = 8230;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textOrIdentifier(): TextOrIdentifierContext {
		let _localctx: TextOrIdentifierContext = new TextOrIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1172, MultiQueryMySQLParser.RULE_textOrIdentifier);
		try {
			this.state = 8234;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1101, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8232;
				this.match(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8233;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lValueIdentifier(): LValueIdentifierContext {
		let _localctx: LValueIdentifierContext = new LValueIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1174, MultiQueryMySQLParser.RULE_lValueIdentifier);
		try {
			this.state = 8238;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1102, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8236;
				this.pureIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8237;
				this.lValueKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleIdentifierOrText(): RoleIdentifierOrTextContext {
		let _localctx: RoleIdentifierOrTextContext = new RoleIdentifierOrTextContext(this._ctx, this.state);
		this.enterRule(_localctx, 1176, MultiQueryMySQLParser.RULE_roleIdentifierOrText);
		try {
			this.state = 8242;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1103, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8240;
				this.roleIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8241;
				this.textStringLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sizeNumber(): SizeNumberContext {
		let _localctx: SizeNumberContext = new SizeNumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 1178, MultiQueryMySQLParser.RULE_sizeNumber);
		try {
			this.state = 8246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1104, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8244;
				this.real_ulonglong_number();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8245;
				this.pureIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parentheses(): ParenthesesContext {
		let _localctx: ParenthesesContext = new ParenthesesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1180, MultiQueryMySQLParser.RULE_parentheses);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8248;
			this.match(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8249;
			this.match(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public equal(): EqualContext {
		let _localctx: EqualContext = new EqualContext(this._ctx, this.state);
		this.enterRule(_localctx, 1182, MultiQueryMySQLParser.RULE_equal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8251;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.EQUAL_OPERATOR || _la === MultiQueryMySQLParser.ASSIGN_OPERATOR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optionType(): OptionTypeContext {
		let _localctx: OptionTypeContext = new OptionTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1184, MultiQueryMySQLParser.RULE_optionType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8253;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.GLOBAL_SYMBOL || _la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.SESSION_SYMBOL || _la === MultiQueryMySQLParser.PERSIST_SYMBOL || _la === MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public varIdentType(): VarIdentTypeContext {
		let _localctx: VarIdentTypeContext = new VarIdentTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1186, MultiQueryMySQLParser.RULE_varIdentType);
		try {
			this.state = 8261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.GLOBAL_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8255;
				this.match(MultiQueryMySQLParser.GLOBAL_SYMBOL);
				this.state = 8256;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.LOCAL_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8257;
				this.match(MultiQueryMySQLParser.LOCAL_SYMBOL);
				this.state = 8258;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.SESSION_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8259;
				this.match(MultiQueryMySQLParser.SESSION_SYMBOL);
				this.state = 8260;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setVarIdentType(): SetVarIdentTypeContext {
		let _localctx: SetVarIdentTypeContext = new SetVarIdentTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1188, MultiQueryMySQLParser.RULE_setVarIdentType);
		try {
			this.state = 8273;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.PERSIST_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8263;
				this.match(MultiQueryMySQLParser.PERSIST_SYMBOL);
				this.state = 8264;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8265;
				this.match(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL);
				this.state = 8266;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.GLOBAL_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8267;
				this.match(MultiQueryMySQLParser.GLOBAL_SYMBOL);
				this.state = 8268;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.LOCAL_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8269;
				this.match(MultiQueryMySQLParser.LOCAL_SYMBOL);
				this.state = 8270;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			case MultiQueryMySQLParser.SESSION_SYMBOL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8271;
				this.match(MultiQueryMySQLParser.SESSION_SYMBOL);
				this.state = 8272;
				this.match(MultiQueryMySQLParser.DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierKeyword(): IdentifierKeywordContext {
		let _localctx: IdentifierKeywordContext = new IdentifierKeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1190, MultiQueryMySQLParser.RULE_identifierKeyword);
		try {
			this.state = 8292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1109, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8275;
				if (!(this.serverVersion < 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80017");
				}
				this.state = 8283;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1107, this._ctx) ) {
				case 1:
					{
					this.state = 8276;
					this.labelKeyword();
					}
					break;

				case 2:
					{
					this.state = 8277;
					this.roleOrIdentifierKeyword();
					}
					break;

				case 3:
					{
					this.state = 8278;
					this.match(MultiQueryMySQLParser.EXECUTE_SYMBOL);
					}
					break;

				case 4:
					{
					this.state = 8279;
					if (!(this.serverVersion >= 50709)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 50709");
					}
					this.state = 8280;
					this.match(MultiQueryMySQLParser.SHUTDOWN_SYMBOL);
					}
					break;

				case 5:
					{
					this.state = 8281;
					if (!(this.serverVersion >= 80011)) {
						throw new FailedPredicateException(this, "this.serverVersion >= 80011");
					}
					this.state = 8282;
					this.match(MultiQueryMySQLParser.RESTART_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8290;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.ACCOUNT_SYMBOL:
				case MultiQueryMySQLParser.ALWAYS_SYMBOL:
				case MultiQueryMySQLParser.BACKUP_SYMBOL:
				case MultiQueryMySQLParser.CLOSE_SYMBOL:
				case MultiQueryMySQLParser.FORMAT_SYMBOL:
				case MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL:
				case MultiQueryMySQLParser.HOST_SYMBOL:
				case MultiQueryMySQLParser.OPEN_SYMBOL:
				case MultiQueryMySQLParser.OPTIONS_SYMBOL:
				case MultiQueryMySQLParser.OWNER_SYMBOL:
				case MultiQueryMySQLParser.PARSER_SYMBOL:
				case MultiQueryMySQLParser.PORT_SYMBOL:
				case MultiQueryMySQLParser.REMOVE_SYMBOL:
				case MultiQueryMySQLParser.RESTORE_SYMBOL:
				case MultiQueryMySQLParser.SECURITY_SYMBOL:
				case MultiQueryMySQLParser.SERVER_SYMBOL:
				case MultiQueryMySQLParser.SOCKET_SYMBOL:
				case MultiQueryMySQLParser.SONAME_SYMBOL:
				case MultiQueryMySQLParser.UPGRADE_SYMBOL:
				case MultiQueryMySQLParser.WRAPPER_SYMBOL:
				case MultiQueryMySQLParser.ACTION_SYMBOL:
				case MultiQueryMySQLParser.ADDDATE_SYMBOL:
				case MultiQueryMySQLParser.AFTER_SYMBOL:
				case MultiQueryMySQLParser.AGAINST_SYMBOL:
				case MultiQueryMySQLParser.AGGREGATE_SYMBOL:
				case MultiQueryMySQLParser.ALGORITHM_SYMBOL:
				case MultiQueryMySQLParser.ANY_SYMBOL:
				case MultiQueryMySQLParser.AT_SYMBOL:
				case MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL:
				case MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL:
				case MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL:
				case MultiQueryMySQLParser.AVG_SYMBOL:
				case MultiQueryMySQLParser.BINLOG_SYMBOL:
				case MultiQueryMySQLParser.BIT_SYMBOL:
				case MultiQueryMySQLParser.BLOCK_SYMBOL:
				case MultiQueryMySQLParser.BOOL_SYMBOL:
				case MultiQueryMySQLParser.BOOLEAN_SYMBOL:
				case MultiQueryMySQLParser.BTREE_SYMBOL:
				case MultiQueryMySQLParser.CASCADED_SYMBOL:
				case MultiQueryMySQLParser.CATALOG_NAME_SYMBOL:
				case MultiQueryMySQLParser.CHAIN_SYMBOL:
				case MultiQueryMySQLParser.CHANGED_SYMBOL:
				case MultiQueryMySQLParser.CHANNEL_SYMBOL:
				case MultiQueryMySQLParser.CIPHER_SYMBOL:
				case MultiQueryMySQLParser.CLIENT_SYMBOL:
				case MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL:
				case MultiQueryMySQLParser.COALESCE_SYMBOL:
				case MultiQueryMySQLParser.CODE_SYMBOL:
				case MultiQueryMySQLParser.COLLATION_SYMBOL:
				case MultiQueryMySQLParser.COLUMN_NAME_SYMBOL:
				case MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.COLUMNS_SYMBOL:
				case MultiQueryMySQLParser.COMMITTED_SYMBOL:
				case MultiQueryMySQLParser.COMPACT_SYMBOL:
				case MultiQueryMySQLParser.COMPLETION_SYMBOL:
				case MultiQueryMySQLParser.COMPRESSED_SYMBOL:
				case MultiQueryMySQLParser.COMPRESSION_SYMBOL:
				case MultiQueryMySQLParser.ENCRYPTION_SYMBOL:
				case MultiQueryMySQLParser.CONCURRENT_SYMBOL:
				case MultiQueryMySQLParser.CONNECTION_SYMBOL:
				case MultiQueryMySQLParser.CONSISTENT_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL:
				case MultiQueryMySQLParser.CONTEXT_SYMBOL:
				case MultiQueryMySQLParser.CPU_SYMBOL:
				case MultiQueryMySQLParser.CURRENT_SYMBOL:
				case MultiQueryMySQLParser.CURSOR_NAME_SYMBOL:
				case MultiQueryMySQLParser.DATA_SYMBOL:
				case MultiQueryMySQLParser.DATAFILE_SYMBOL:
				case MultiQueryMySQLParser.DATETIME_SYMBOL:
				case MultiQueryMySQLParser.DATE_SYMBOL:
				case MultiQueryMySQLParser.DAY_SYMBOL:
				case MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL:
				case MultiQueryMySQLParser.DEFINER_SYMBOL:
				case MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL:
				case MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL:
				case MultiQueryMySQLParser.DIRECTORY_SYMBOL:
				case MultiQueryMySQLParser.DISABLE_SYMBOL:
				case MultiQueryMySQLParser.DISCARD_SYMBOL:
				case MultiQueryMySQLParser.DISK_SYMBOL:
				case MultiQueryMySQLParser.DUMPFILE_SYMBOL:
				case MultiQueryMySQLParser.DUPLICATE_SYMBOL:
				case MultiQueryMySQLParser.DYNAMIC_SYMBOL:
				case MultiQueryMySQLParser.ENDS_SYMBOL:
				case MultiQueryMySQLParser.ENUM_SYMBOL:
				case MultiQueryMySQLParser.ENGINE_SYMBOL:
				case MultiQueryMySQLParser.ENGINES_SYMBOL:
				case MultiQueryMySQLParser.ERROR_SYMBOL:
				case MultiQueryMySQLParser.ERRORS_SYMBOL:
				case MultiQueryMySQLParser.ESCAPE_SYMBOL:
				case MultiQueryMySQLParser.EVENTS_SYMBOL:
				case MultiQueryMySQLParser.EVERY_SYMBOL:
				case MultiQueryMySQLParser.EXPANSION_SYMBOL:
				case MultiQueryMySQLParser.EXPORT_SYMBOL:
				case MultiQueryMySQLParser.EXTENDED_SYMBOL:
				case MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL:
				case MultiQueryMySQLParser.FAULTS_SYMBOL:
				case MultiQueryMySQLParser.FAST_SYMBOL:
				case MultiQueryMySQLParser.FOUND_SYMBOL:
				case MultiQueryMySQLParser.ENABLE_SYMBOL:
				case MultiQueryMySQLParser.FULL_SYMBOL:
				case MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL:
				case MultiQueryMySQLParser.FILTER_SYMBOL:
				case MultiQueryMySQLParser.FIRST_SYMBOL:
				case MultiQueryMySQLParser.FIXED_SYMBOL:
				case MultiQueryMySQLParser.GENERAL_SYMBOL:
				case MultiQueryMySQLParser.GEOMETRY_SYMBOL:
				case MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL:
				case MultiQueryMySQLParser.GET_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.GRANTS_SYMBOL:
				case MultiQueryMySQLParser.HASH_SYMBOL:
				case MultiQueryMySQLParser.HOSTS_SYMBOL:
				case MultiQueryMySQLParser.HOUR_SYMBOL:
				case MultiQueryMySQLParser.IDENTIFIED_SYMBOL:
				case MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL:
				case MultiQueryMySQLParser.INVOKER_SYMBOL:
				case MultiQueryMySQLParser.INDEXES_SYMBOL:
				case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				case MultiQueryMySQLParser.INSTANCE_SYMBOL:
				case MultiQueryMySQLParser.IO_SYMBOL:
				case MultiQueryMySQLParser.IPC_SYMBOL:
				case MultiQueryMySQLParser.ISOLATION_SYMBOL:
				case MultiQueryMySQLParser.ISSUER_SYMBOL:
				case MultiQueryMySQLParser.INSERT_METHOD_SYMBOL:
				case MultiQueryMySQLParser.JSON_SYMBOL:
				case MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL:
				case MultiQueryMySQLParser.LAST_SYMBOL:
				case MultiQueryMySQLParser.LEAVES_SYMBOL:
				case MultiQueryMySQLParser.LESS_SYMBOL:
				case MultiQueryMySQLParser.LEVEL_SYMBOL:
				case MultiQueryMySQLParser.LINESTRING_SYMBOL:
				case MultiQueryMySQLParser.LIST_SYMBOL:
				case MultiQueryMySQLParser.LOCKS_SYMBOL:
				case MultiQueryMySQLParser.LOGFILE_SYMBOL:
				case MultiQueryMySQLParser.LOGS_SYMBOL:
				case MultiQueryMySQLParser.MAX_ROWS_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MultiQueryMySQLParser.MASTER_HOST_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PORT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL:
				case MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL:
				case MultiQueryMySQLParser.MASTER_USER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL:
				case MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_DELAY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL:
				case MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL:
				case MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_SIZE_SYMBOL:
				case MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
				case MultiQueryMySQLParser.MEDIUM_SYMBOL:
				case MultiQueryMySQLParser.MEMORY_SYMBOL:
				case MultiQueryMySQLParser.MERGE_SYMBOL:
				case MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL:
				case MultiQueryMySQLParser.MICROSECOND_SYMBOL:
				case MultiQueryMySQLParser.MIGRATE_SYMBOL:
				case MultiQueryMySQLParser.MINUTE_SYMBOL:
				case MultiQueryMySQLParser.MIN_ROWS_SYMBOL:
				case MultiQueryMySQLParser.MODIFY_SYMBOL:
				case MultiQueryMySQLParser.MODE_SYMBOL:
				case MultiQueryMySQLParser.MONTH_SYMBOL:
				case MultiQueryMySQLParser.MULTILINESTRING_SYMBOL:
				case MultiQueryMySQLParser.MULTIPOINT_SYMBOL:
				case MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL:
				case MultiQueryMySQLParser.MUTEX_SYMBOL:
				case MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL:
				case MultiQueryMySQLParser.NAME_SYMBOL:
				case MultiQueryMySQLParser.NAMES_SYMBOL:
				case MultiQueryMySQLParser.NATIONAL_SYMBOL:
				case MultiQueryMySQLParser.NCHAR_SYMBOL:
				case MultiQueryMySQLParser.NDBCLUSTER_SYMBOL:
				case MultiQueryMySQLParser.NEVER_SYMBOL:
				case MultiQueryMySQLParser.NEXT_SYMBOL:
				case MultiQueryMySQLParser.NEW_SYMBOL:
				case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
				case MultiQueryMySQLParser.NODEGROUP_SYMBOL:
				case MultiQueryMySQLParser.NUMBER_SYMBOL:
				case MultiQueryMySQLParser.NVARCHAR_SYMBOL:
				case MultiQueryMySQLParser.OFFSET_SYMBOL:
				case MultiQueryMySQLParser.ONE_SYMBOL:
				case MultiQueryMySQLParser.PACK_KEYS_SYMBOL:
				case MultiQueryMySQLParser.PAGE_SYMBOL:
				case MultiQueryMySQLParser.PARTIAL_SYMBOL:
				case MultiQueryMySQLParser.PARTITIONING_SYMBOL:
				case MultiQueryMySQLParser.PARTITIONS_SYMBOL:
				case MultiQueryMySQLParser.PASSWORD_SYMBOL:
				case MultiQueryMySQLParser.PHASE_SYMBOL:
				case MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL:
				case MultiQueryMySQLParser.PLUGIN_SYMBOL:
				case MultiQueryMySQLParser.PLUGINS_SYMBOL:
				case MultiQueryMySQLParser.POINT_SYMBOL:
				case MultiQueryMySQLParser.POLYGON_SYMBOL:
				case MultiQueryMySQLParser.PRESERVE_SYMBOL:
				case MultiQueryMySQLParser.PREV_SYMBOL:
				case MultiQueryMySQLParser.PRIVILEGES_SYMBOL:
				case MultiQueryMySQLParser.PROCESSLIST_SYMBOL:
				case MultiQueryMySQLParser.PROFILE_SYMBOL:
				case MultiQueryMySQLParser.PROFILES_SYMBOL:
				case MultiQueryMySQLParser.QUARTER_SYMBOL:
				case MultiQueryMySQLParser.QUERY_SYMBOL:
				case MultiQueryMySQLParser.QUICK_SYMBOL:
				case MultiQueryMySQLParser.READ_ONLY_SYMBOL:
				case MultiQueryMySQLParser.REBUILD_SYMBOL:
				case MultiQueryMySQLParser.RECOVER_SYMBOL:
				case MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL:
				case MultiQueryMySQLParser.REDUNDANT_SYMBOL:
				case MultiQueryMySQLParser.RELAY_SYMBOL:
				case MultiQueryMySQLParser.RELAYLOG_SYMBOL:
				case MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL:
				case MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL:
				case MultiQueryMySQLParser.RELAY_THREAD_SYMBOL:
				case MultiQueryMySQLParser.REORGANIZE_SYMBOL:
				case MultiQueryMySQLParser.REPEATABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
				case MultiQueryMySQLParser.RESUME_SYMBOL:
				case MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL:
				case MultiQueryMySQLParser.RETURNS_SYMBOL:
				case MultiQueryMySQLParser.REVERSE_SYMBOL:
				case MultiQueryMySQLParser.ROLLUP_SYMBOL:
				case MultiQueryMySQLParser.ROTATE_SYMBOL:
				case MultiQueryMySQLParser.ROUTINE_SYMBOL:
				case MultiQueryMySQLParser.ROW_COUNT_SYMBOL:
				case MultiQueryMySQLParser.ROW_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.RTREE_SYMBOL:
				case MultiQueryMySQLParser.SCHEDULE_SYMBOL:
				case MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL:
				case MultiQueryMySQLParser.SECOND_SYMBOL:
				case MultiQueryMySQLParser.SERIAL_SYMBOL:
				case MultiQueryMySQLParser.SERIALIZABLE_SYMBOL:
				case MultiQueryMySQLParser.SIMPLE_SYMBOL:
				case MultiQueryMySQLParser.SHARE_SYMBOL:
				case MultiQueryMySQLParser.SLOW_SYMBOL:
				case MultiQueryMySQLParser.SNAPSHOT_SYMBOL:
				case MultiQueryMySQLParser.SOUNDS_SYMBOL:
				case MultiQueryMySQLParser.SOURCE_SYMBOL:
				case MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL:
				case MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
				case MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
				case MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL:
				case MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL:
				case MultiQueryMySQLParser.SQL_THREAD_SYMBOL:
				case MultiQueryMySQLParser.STACKED_SYMBOL:
				case MultiQueryMySQLParser.STARTS_SYMBOL:
				case MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL:
				case MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL:
				case MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
				case MultiQueryMySQLParser.STATUS_SYMBOL:
				case MultiQueryMySQLParser.STORAGE_SYMBOL:
				case MultiQueryMySQLParser.STRING_SYMBOL:
				case MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL:
				case MultiQueryMySQLParser.SUBDATE_SYMBOL:
				case MultiQueryMySQLParser.SUBJECT_SYMBOL:
				case MultiQueryMySQLParser.SUBPARTITION_SYMBOL:
				case MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL:
				case MultiQueryMySQLParser.SUSPEND_SYMBOL:
				case MultiQueryMySQLParser.SWAPS_SYMBOL:
				case MultiQueryMySQLParser.SWITCHES_SYMBOL:
				case MultiQueryMySQLParser.TABLE_NAME_SYMBOL:
				case MultiQueryMySQLParser.TABLES_SYMBOL:
				case MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL:
				case MultiQueryMySQLParser.TABLESPACE_SYMBOL:
				case MultiQueryMySQLParser.TEMPORARY_SYMBOL:
				case MultiQueryMySQLParser.TEMPTABLE_SYMBOL:
				case MultiQueryMySQLParser.TEXT_SYMBOL:
				case MultiQueryMySQLParser.THAN_SYMBOL:
				case MultiQueryMySQLParser.TRANSACTION_SYMBOL:
				case MultiQueryMySQLParser.TRIGGERS_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL:
				case MultiQueryMySQLParser.TIME_SYMBOL:
				case MultiQueryMySQLParser.TYPES_SYMBOL:
				case MultiQueryMySQLParser.TYPE_SYMBOL:
				case MultiQueryMySQLParser.UNCOMMITTED_SYMBOL:
				case MultiQueryMySQLParser.UNDEFINED_SYMBOL:
				case MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
				case MultiQueryMySQLParser.UNDOFILE_SYMBOL:
				case MultiQueryMySQLParser.UNKNOWN_SYMBOL:
				case MultiQueryMySQLParser.UNTIL_SYMBOL:
				case MultiQueryMySQLParser.USER_RESOURCES_SYMBOL:
				case MultiQueryMySQLParser.USER_SYMBOL:
				case MultiQueryMySQLParser.USE_FRM_SYMBOL:
				case MultiQueryMySQLParser.VARIABLES_SYMBOL:
				case MultiQueryMySQLParser.VIEW_SYMBOL:
				case MultiQueryMySQLParser.VALUE_SYMBOL:
				case MultiQueryMySQLParser.WARNINGS_SYMBOL:
				case MultiQueryMySQLParser.WAIT_SYMBOL:
				case MultiQueryMySQLParser.WEEK_SYMBOL:
				case MultiQueryMySQLParser.WORK_SYMBOL:
				case MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL:
				case MultiQueryMySQLParser.X509_SYMBOL:
				case MultiQueryMySQLParser.XID_SYMBOL:
				case MultiQueryMySQLParser.XML_SYMBOL:
				case MultiQueryMySQLParser.YEAR_SYMBOL:
				case MultiQueryMySQLParser.EXCHANGE_SYMBOL:
				case MultiQueryMySQLParser.EXPIRE_SYMBOL:
				case MultiQueryMySQLParser.ONLY_SYMBOL:
				case MultiQueryMySQLParser.VALIDATION_SYMBOL:
				case MultiQueryMySQLParser.WITHOUT_SYMBOL:
				case MultiQueryMySQLParser.ROLE_SYMBOL:
				case MultiQueryMySQLParser.ADMIN_SYMBOL:
				case MultiQueryMySQLParser.INVISIBLE_SYMBOL:
				case MultiQueryMySQLParser.VISIBLE_SYMBOL:
				case MultiQueryMySQLParser.COMPONENT_SYMBOL:
				case MultiQueryMySQLParser.SKIP_SYMBOL:
				case MultiQueryMySQLParser.LOCKED_SYMBOL:
				case MultiQueryMySQLParser.NOWAIT_SYMBOL:
				case MultiQueryMySQLParser.HISTOGRAM_SYMBOL:
				case MultiQueryMySQLParser.BUCKETS_SYMBOL:
				case MultiQueryMySQLParser.EXCLUDE_SYMBOL:
				case MultiQueryMySQLParser.FOLLOWING_SYMBOL:
				case MultiQueryMySQLParser.NULLS_SYMBOL:
				case MultiQueryMySQLParser.OTHERS_SYMBOL:
				case MultiQueryMySQLParser.PRECEDING_SYMBOL:
				case MultiQueryMySQLParser.RESPECT_SYMBOL:
				case MultiQueryMySQLParser.TIES_SYMBOL:
				case MultiQueryMySQLParser.UNBOUNDED_SYMBOL:
				case MultiQueryMySQLParser.NESTED_SYMBOL:
				case MultiQueryMySQLParser.ORDINALITY_SYMBOL:
				case MultiQueryMySQLParser.PATH_SYMBOL:
				case MultiQueryMySQLParser.HISTORY_SYMBOL:
				case MultiQueryMySQLParser.REUSE_SYMBOL:
				case MultiQueryMySQLParser.SRID_SYMBOL:
				case MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL:
				case MultiQueryMySQLParser.VCPU_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
				case MultiQueryMySQLParser.DEFINITION_SYMBOL:
				case MultiQueryMySQLParser.DESCRIPTION_SYMBOL:
				case MultiQueryMySQLParser.ORGANIZATION_SYMBOL:
				case MultiQueryMySQLParser.REFERENCE_SYMBOL:
				case MultiQueryMySQLParser.OPTIONAL_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL:
				case MultiQueryMySQLParser.ACTIVE_SYMBOL:
				case MultiQueryMySQLParser.INACTIVE_SYMBOL:
				case MultiQueryMySQLParser.RETAIN_SYMBOL:
				case MultiQueryMySQLParser.OLD_SYMBOL:
				case MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL:
				case MultiQueryMySQLParser.ENFORCED_SYMBOL:
				case MultiQueryMySQLParser.OJ_SYMBOL:
				case MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					this.state = 8285;
					this.identifierKeywordsUnambiguous();
					}
					break;
				case MultiQueryMySQLParser.EXECUTE_SYMBOL:
				case MultiQueryMySQLParser.SHUTDOWN_SYMBOL:
				case MultiQueryMySQLParser.RESTART_SYMBOL:
					{
					this.state = 8286;
					this.identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case MultiQueryMySQLParser.ASCII_SYMBOL:
				case MultiQueryMySQLParser.BEGIN_SYMBOL:
				case MultiQueryMySQLParser.BYTE_SYMBOL:
				case MultiQueryMySQLParser.CACHE_SYMBOL:
				case MultiQueryMySQLParser.CHARSET_SYMBOL:
				case MultiQueryMySQLParser.CHECKSUM_SYMBOL:
				case MultiQueryMySQLParser.COMMENT_SYMBOL:
				case MultiQueryMySQLParser.COMMIT_SYMBOL:
				case MultiQueryMySQLParser.CONTAINS_SYMBOL:
				case MultiQueryMySQLParser.DEALLOCATE_SYMBOL:
				case MultiQueryMySQLParser.DO_SYMBOL:
				case MultiQueryMySQLParser.END_SYMBOL:
				case MultiQueryMySQLParser.FLUSH_SYMBOL:
				case MultiQueryMySQLParser.FOLLOWS_SYMBOL:
				case MultiQueryMySQLParser.HANDLER_SYMBOL:
				case MultiQueryMySQLParser.HELP_SYMBOL:
				case MultiQueryMySQLParser.INSTALL_SYMBOL:
				case MultiQueryMySQLParser.LANGUAGE_SYMBOL:
				case MultiQueryMySQLParser.NO_SYMBOL:
				case MultiQueryMySQLParser.PRECEDES_SYMBOL:
				case MultiQueryMySQLParser.PREPARE_SYMBOL:
				case MultiQueryMySQLParser.REPAIR_SYMBOL:
				case MultiQueryMySQLParser.RESET_SYMBOL:
				case MultiQueryMySQLParser.ROLLBACK_SYMBOL:
				case MultiQueryMySQLParser.SAVEPOINT_SYMBOL:
				case MultiQueryMySQLParser.SIGNED_SYMBOL:
				case MultiQueryMySQLParser.SLAVE_SYMBOL:
				case MultiQueryMySQLParser.START_SYMBOL:
				case MultiQueryMySQLParser.STOP_SYMBOL:
				case MultiQueryMySQLParser.TRUNCATE_SYMBOL:
				case MultiQueryMySQLParser.UNICODE_SYMBOL:
				case MultiQueryMySQLParser.UNINSTALL_SYMBOL:
				case MultiQueryMySQLParser.XA_SYMBOL:
				case MultiQueryMySQLParser.IMPORT_SYMBOL:
				case MultiQueryMySQLParser.CLONE_SYMBOL:
					{
					this.state = 8287;
					this.identifierKeywordsAmbiguous2Labels();
					}
					break;
				case MultiQueryMySQLParser.EVENT_SYMBOL:
				case MultiQueryMySQLParser.FILE_SYMBOL:
				case MultiQueryMySQLParser.NONE_SYMBOL:
				case MultiQueryMySQLParser.PROCESS_SYMBOL:
				case MultiQueryMySQLParser.PROXY_SYMBOL:
				case MultiQueryMySQLParser.RELOAD_SYMBOL:
				case MultiQueryMySQLParser.REPLICATION_SYMBOL:
				case MultiQueryMySQLParser.SUPER_SYMBOL:
				case MultiQueryMySQLParser.RESOURCE_SYMBOL:
					{
					this.state = 8288;
					this.identifierKeywordsAmbiguous3Roles();
					}
					break;
				case MultiQueryMySQLParser.GLOBAL_SYMBOL:
				case MultiQueryMySQLParser.LOCAL_SYMBOL:
				case MultiQueryMySQLParser.SESSION_SYMBOL:
				case MultiQueryMySQLParser.PERSIST_SYMBOL:
				case MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL:
					{
					this.state = 8289;
					this.identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
		let _localctx: IdentifierKeywordsAmbiguous1RolesAndLabelsContext = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1192, MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8294;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.EXECUTE_SYMBOL || _la === MultiQueryMySQLParser.SHUTDOWN_SYMBOL || _la === MultiQueryMySQLParser.RESTART_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
		let _localctx: IdentifierKeywordsAmbiguous2LabelsContext = new IdentifierKeywordsAmbiguous2LabelsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1194, MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8296;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MultiQueryMySQLParser.ASCII_SYMBOL) | (1 << MultiQueryMySQLParser.BEGIN_SYMBOL) | (1 << MultiQueryMySQLParser.BYTE_SYMBOL) | (1 << MultiQueryMySQLParser.CACHE_SYMBOL) | (1 << MultiQueryMySQLParser.CHARSET_SYMBOL) | (1 << MultiQueryMySQLParser.CHECKSUM_SYMBOL) | (1 << MultiQueryMySQLParser.COMMENT_SYMBOL) | (1 << MultiQueryMySQLParser.COMMIT_SYMBOL) | (1 << MultiQueryMySQLParser.CONTAINS_SYMBOL) | (1 << MultiQueryMySQLParser.DEALLOCATE_SYMBOL) | (1 << MultiQueryMySQLParser.DO_SYMBOL) | (1 << MultiQueryMySQLParser.END_SYMBOL) | (1 << MultiQueryMySQLParser.FLUSH_SYMBOL) | (1 << MultiQueryMySQLParser.FOLLOWS_SYMBOL) | (1 << MultiQueryMySQLParser.HANDLER_SYMBOL) | (1 << MultiQueryMySQLParser.HELP_SYMBOL) | (1 << MultiQueryMySQLParser.INSTALL_SYMBOL) | (1 << MultiQueryMySQLParser.LANGUAGE_SYMBOL) | (1 << MultiQueryMySQLParser.NO_SYMBOL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (MultiQueryMySQLParser.PRECEDES_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.PREPARE_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.REPAIR_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.RESET_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.ROLLBACK_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.SAVEPOINT_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.SIGNED_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.SLAVE_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.START_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.STOP_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.TRUNCATE_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.UNICODE_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.UNINSTALL_SYMBOL - 34)) | (1 << (MultiQueryMySQLParser.XA_SYMBOL - 34)))) !== 0) || _la === MultiQueryMySQLParser.IMPORT_SYMBOL || _la === MultiQueryMySQLParser.CLONE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelKeyword(): LabelKeywordContext {
		let _localctx: LabelKeywordContext = new LabelKeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1196, MultiQueryMySQLParser.RULE_labelKeyword);
		try {
			this.state = 8316;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1112, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8298;
				if (!(this.serverVersion < 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80017");
				}
				this.state = 8309;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1110, this._ctx) ) {
				case 1:
					{
					this.state = 8299;
					this.roleOrLabelKeyword();
					}
					break;

				case 2:
					{
					this.state = 8300;
					this.match(MultiQueryMySQLParser.EVENT_SYMBOL);
					}
					break;

				case 3:
					{
					this.state = 8301;
					this.match(MultiQueryMySQLParser.FILE_SYMBOL);
					}
					break;

				case 4:
					{
					this.state = 8302;
					this.match(MultiQueryMySQLParser.NONE_SYMBOL);
					}
					break;

				case 5:
					{
					this.state = 8303;
					this.match(MultiQueryMySQLParser.PROCESS_SYMBOL);
					}
					break;

				case 6:
					{
					this.state = 8304;
					this.match(MultiQueryMySQLParser.PROXY_SYMBOL);
					}
					break;

				case 7:
					{
					this.state = 8305;
					this.match(MultiQueryMySQLParser.RELOAD_SYMBOL);
					}
					break;

				case 8:
					{
					this.state = 8306;
					this.match(MultiQueryMySQLParser.REPLICATION_SYMBOL);
					}
					break;

				case 9:
					{
					this.state = 8307;
					this.match(MultiQueryMySQLParser.RESOURCE_SYMBOL);
					}
					break;

				case 10:
					{
					this.state = 8308;
					this.match(MultiQueryMySQLParser.SUPER_SYMBOL);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8314;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.ACCOUNT_SYMBOL:
				case MultiQueryMySQLParser.ALWAYS_SYMBOL:
				case MultiQueryMySQLParser.BACKUP_SYMBOL:
				case MultiQueryMySQLParser.CLOSE_SYMBOL:
				case MultiQueryMySQLParser.FORMAT_SYMBOL:
				case MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL:
				case MultiQueryMySQLParser.HOST_SYMBOL:
				case MultiQueryMySQLParser.OPEN_SYMBOL:
				case MultiQueryMySQLParser.OPTIONS_SYMBOL:
				case MultiQueryMySQLParser.OWNER_SYMBOL:
				case MultiQueryMySQLParser.PARSER_SYMBOL:
				case MultiQueryMySQLParser.PORT_SYMBOL:
				case MultiQueryMySQLParser.REMOVE_SYMBOL:
				case MultiQueryMySQLParser.RESTORE_SYMBOL:
				case MultiQueryMySQLParser.SECURITY_SYMBOL:
				case MultiQueryMySQLParser.SERVER_SYMBOL:
				case MultiQueryMySQLParser.SOCKET_SYMBOL:
				case MultiQueryMySQLParser.SONAME_SYMBOL:
				case MultiQueryMySQLParser.UPGRADE_SYMBOL:
				case MultiQueryMySQLParser.WRAPPER_SYMBOL:
				case MultiQueryMySQLParser.ACTION_SYMBOL:
				case MultiQueryMySQLParser.ADDDATE_SYMBOL:
				case MultiQueryMySQLParser.AFTER_SYMBOL:
				case MultiQueryMySQLParser.AGAINST_SYMBOL:
				case MultiQueryMySQLParser.AGGREGATE_SYMBOL:
				case MultiQueryMySQLParser.ALGORITHM_SYMBOL:
				case MultiQueryMySQLParser.ANY_SYMBOL:
				case MultiQueryMySQLParser.AT_SYMBOL:
				case MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL:
				case MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL:
				case MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL:
				case MultiQueryMySQLParser.AVG_SYMBOL:
				case MultiQueryMySQLParser.BINLOG_SYMBOL:
				case MultiQueryMySQLParser.BIT_SYMBOL:
				case MultiQueryMySQLParser.BLOCK_SYMBOL:
				case MultiQueryMySQLParser.BOOL_SYMBOL:
				case MultiQueryMySQLParser.BOOLEAN_SYMBOL:
				case MultiQueryMySQLParser.BTREE_SYMBOL:
				case MultiQueryMySQLParser.CASCADED_SYMBOL:
				case MultiQueryMySQLParser.CATALOG_NAME_SYMBOL:
				case MultiQueryMySQLParser.CHAIN_SYMBOL:
				case MultiQueryMySQLParser.CHANGED_SYMBOL:
				case MultiQueryMySQLParser.CHANNEL_SYMBOL:
				case MultiQueryMySQLParser.CIPHER_SYMBOL:
				case MultiQueryMySQLParser.CLIENT_SYMBOL:
				case MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL:
				case MultiQueryMySQLParser.COALESCE_SYMBOL:
				case MultiQueryMySQLParser.CODE_SYMBOL:
				case MultiQueryMySQLParser.COLLATION_SYMBOL:
				case MultiQueryMySQLParser.COLUMN_NAME_SYMBOL:
				case MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.COLUMNS_SYMBOL:
				case MultiQueryMySQLParser.COMMITTED_SYMBOL:
				case MultiQueryMySQLParser.COMPACT_SYMBOL:
				case MultiQueryMySQLParser.COMPLETION_SYMBOL:
				case MultiQueryMySQLParser.COMPRESSED_SYMBOL:
				case MultiQueryMySQLParser.COMPRESSION_SYMBOL:
				case MultiQueryMySQLParser.ENCRYPTION_SYMBOL:
				case MultiQueryMySQLParser.CONCURRENT_SYMBOL:
				case MultiQueryMySQLParser.CONNECTION_SYMBOL:
				case MultiQueryMySQLParser.CONSISTENT_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL:
				case MultiQueryMySQLParser.CONTEXT_SYMBOL:
				case MultiQueryMySQLParser.CPU_SYMBOL:
				case MultiQueryMySQLParser.CURRENT_SYMBOL:
				case MultiQueryMySQLParser.CURSOR_NAME_SYMBOL:
				case MultiQueryMySQLParser.DATA_SYMBOL:
				case MultiQueryMySQLParser.DATAFILE_SYMBOL:
				case MultiQueryMySQLParser.DATETIME_SYMBOL:
				case MultiQueryMySQLParser.DATE_SYMBOL:
				case MultiQueryMySQLParser.DAY_SYMBOL:
				case MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL:
				case MultiQueryMySQLParser.DEFINER_SYMBOL:
				case MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL:
				case MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL:
				case MultiQueryMySQLParser.DIRECTORY_SYMBOL:
				case MultiQueryMySQLParser.DISABLE_SYMBOL:
				case MultiQueryMySQLParser.DISCARD_SYMBOL:
				case MultiQueryMySQLParser.DISK_SYMBOL:
				case MultiQueryMySQLParser.DUMPFILE_SYMBOL:
				case MultiQueryMySQLParser.DUPLICATE_SYMBOL:
				case MultiQueryMySQLParser.DYNAMIC_SYMBOL:
				case MultiQueryMySQLParser.ENDS_SYMBOL:
				case MultiQueryMySQLParser.ENUM_SYMBOL:
				case MultiQueryMySQLParser.ENGINE_SYMBOL:
				case MultiQueryMySQLParser.ENGINES_SYMBOL:
				case MultiQueryMySQLParser.ERROR_SYMBOL:
				case MultiQueryMySQLParser.ERRORS_SYMBOL:
				case MultiQueryMySQLParser.ESCAPE_SYMBOL:
				case MultiQueryMySQLParser.EVENTS_SYMBOL:
				case MultiQueryMySQLParser.EVERY_SYMBOL:
				case MultiQueryMySQLParser.EXPANSION_SYMBOL:
				case MultiQueryMySQLParser.EXPORT_SYMBOL:
				case MultiQueryMySQLParser.EXTENDED_SYMBOL:
				case MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL:
				case MultiQueryMySQLParser.FAULTS_SYMBOL:
				case MultiQueryMySQLParser.FAST_SYMBOL:
				case MultiQueryMySQLParser.FOUND_SYMBOL:
				case MultiQueryMySQLParser.ENABLE_SYMBOL:
				case MultiQueryMySQLParser.FULL_SYMBOL:
				case MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL:
				case MultiQueryMySQLParser.FILTER_SYMBOL:
				case MultiQueryMySQLParser.FIRST_SYMBOL:
				case MultiQueryMySQLParser.FIXED_SYMBOL:
				case MultiQueryMySQLParser.GENERAL_SYMBOL:
				case MultiQueryMySQLParser.GEOMETRY_SYMBOL:
				case MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL:
				case MultiQueryMySQLParser.GET_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.GRANTS_SYMBOL:
				case MultiQueryMySQLParser.HASH_SYMBOL:
				case MultiQueryMySQLParser.HOSTS_SYMBOL:
				case MultiQueryMySQLParser.HOUR_SYMBOL:
				case MultiQueryMySQLParser.IDENTIFIED_SYMBOL:
				case MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL:
				case MultiQueryMySQLParser.INVOKER_SYMBOL:
				case MultiQueryMySQLParser.INDEXES_SYMBOL:
				case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				case MultiQueryMySQLParser.INSTANCE_SYMBOL:
				case MultiQueryMySQLParser.IO_SYMBOL:
				case MultiQueryMySQLParser.IPC_SYMBOL:
				case MultiQueryMySQLParser.ISOLATION_SYMBOL:
				case MultiQueryMySQLParser.ISSUER_SYMBOL:
				case MultiQueryMySQLParser.INSERT_METHOD_SYMBOL:
				case MultiQueryMySQLParser.JSON_SYMBOL:
				case MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL:
				case MultiQueryMySQLParser.LAST_SYMBOL:
				case MultiQueryMySQLParser.LEAVES_SYMBOL:
				case MultiQueryMySQLParser.LESS_SYMBOL:
				case MultiQueryMySQLParser.LEVEL_SYMBOL:
				case MultiQueryMySQLParser.LINESTRING_SYMBOL:
				case MultiQueryMySQLParser.LIST_SYMBOL:
				case MultiQueryMySQLParser.LOCKS_SYMBOL:
				case MultiQueryMySQLParser.LOGFILE_SYMBOL:
				case MultiQueryMySQLParser.LOGS_SYMBOL:
				case MultiQueryMySQLParser.MAX_ROWS_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MultiQueryMySQLParser.MASTER_HOST_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PORT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL:
				case MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL:
				case MultiQueryMySQLParser.MASTER_USER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL:
				case MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_DELAY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL:
				case MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL:
				case MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_SIZE_SYMBOL:
				case MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
				case MultiQueryMySQLParser.MEDIUM_SYMBOL:
				case MultiQueryMySQLParser.MEMORY_SYMBOL:
				case MultiQueryMySQLParser.MERGE_SYMBOL:
				case MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL:
				case MultiQueryMySQLParser.MICROSECOND_SYMBOL:
				case MultiQueryMySQLParser.MIGRATE_SYMBOL:
				case MultiQueryMySQLParser.MINUTE_SYMBOL:
				case MultiQueryMySQLParser.MIN_ROWS_SYMBOL:
				case MultiQueryMySQLParser.MODIFY_SYMBOL:
				case MultiQueryMySQLParser.MODE_SYMBOL:
				case MultiQueryMySQLParser.MONTH_SYMBOL:
				case MultiQueryMySQLParser.MULTILINESTRING_SYMBOL:
				case MultiQueryMySQLParser.MULTIPOINT_SYMBOL:
				case MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL:
				case MultiQueryMySQLParser.MUTEX_SYMBOL:
				case MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL:
				case MultiQueryMySQLParser.NAME_SYMBOL:
				case MultiQueryMySQLParser.NAMES_SYMBOL:
				case MultiQueryMySQLParser.NATIONAL_SYMBOL:
				case MultiQueryMySQLParser.NCHAR_SYMBOL:
				case MultiQueryMySQLParser.NDBCLUSTER_SYMBOL:
				case MultiQueryMySQLParser.NEVER_SYMBOL:
				case MultiQueryMySQLParser.NEXT_SYMBOL:
				case MultiQueryMySQLParser.NEW_SYMBOL:
				case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
				case MultiQueryMySQLParser.NODEGROUP_SYMBOL:
				case MultiQueryMySQLParser.NUMBER_SYMBOL:
				case MultiQueryMySQLParser.NVARCHAR_SYMBOL:
				case MultiQueryMySQLParser.OFFSET_SYMBOL:
				case MultiQueryMySQLParser.ONE_SYMBOL:
				case MultiQueryMySQLParser.PACK_KEYS_SYMBOL:
				case MultiQueryMySQLParser.PAGE_SYMBOL:
				case MultiQueryMySQLParser.PARTIAL_SYMBOL:
				case MultiQueryMySQLParser.PARTITIONING_SYMBOL:
				case MultiQueryMySQLParser.PARTITIONS_SYMBOL:
				case MultiQueryMySQLParser.PASSWORD_SYMBOL:
				case MultiQueryMySQLParser.PHASE_SYMBOL:
				case MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL:
				case MultiQueryMySQLParser.PLUGIN_SYMBOL:
				case MultiQueryMySQLParser.PLUGINS_SYMBOL:
				case MultiQueryMySQLParser.POINT_SYMBOL:
				case MultiQueryMySQLParser.POLYGON_SYMBOL:
				case MultiQueryMySQLParser.PRESERVE_SYMBOL:
				case MultiQueryMySQLParser.PREV_SYMBOL:
				case MultiQueryMySQLParser.PRIVILEGES_SYMBOL:
				case MultiQueryMySQLParser.PROCESSLIST_SYMBOL:
				case MultiQueryMySQLParser.PROFILE_SYMBOL:
				case MultiQueryMySQLParser.PROFILES_SYMBOL:
				case MultiQueryMySQLParser.QUARTER_SYMBOL:
				case MultiQueryMySQLParser.QUERY_SYMBOL:
				case MultiQueryMySQLParser.QUICK_SYMBOL:
				case MultiQueryMySQLParser.READ_ONLY_SYMBOL:
				case MultiQueryMySQLParser.REBUILD_SYMBOL:
				case MultiQueryMySQLParser.RECOVER_SYMBOL:
				case MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL:
				case MultiQueryMySQLParser.REDUNDANT_SYMBOL:
				case MultiQueryMySQLParser.RELAY_SYMBOL:
				case MultiQueryMySQLParser.RELAYLOG_SYMBOL:
				case MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL:
				case MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL:
				case MultiQueryMySQLParser.RELAY_THREAD_SYMBOL:
				case MultiQueryMySQLParser.REORGANIZE_SYMBOL:
				case MultiQueryMySQLParser.REPEATABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
				case MultiQueryMySQLParser.RESUME_SYMBOL:
				case MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL:
				case MultiQueryMySQLParser.RETURNS_SYMBOL:
				case MultiQueryMySQLParser.REVERSE_SYMBOL:
				case MultiQueryMySQLParser.ROLLUP_SYMBOL:
				case MultiQueryMySQLParser.ROTATE_SYMBOL:
				case MultiQueryMySQLParser.ROUTINE_SYMBOL:
				case MultiQueryMySQLParser.ROW_COUNT_SYMBOL:
				case MultiQueryMySQLParser.ROW_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.RTREE_SYMBOL:
				case MultiQueryMySQLParser.SCHEDULE_SYMBOL:
				case MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL:
				case MultiQueryMySQLParser.SECOND_SYMBOL:
				case MultiQueryMySQLParser.SERIAL_SYMBOL:
				case MultiQueryMySQLParser.SERIALIZABLE_SYMBOL:
				case MultiQueryMySQLParser.SIMPLE_SYMBOL:
				case MultiQueryMySQLParser.SHARE_SYMBOL:
				case MultiQueryMySQLParser.SLOW_SYMBOL:
				case MultiQueryMySQLParser.SNAPSHOT_SYMBOL:
				case MultiQueryMySQLParser.SOUNDS_SYMBOL:
				case MultiQueryMySQLParser.SOURCE_SYMBOL:
				case MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL:
				case MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
				case MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
				case MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL:
				case MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL:
				case MultiQueryMySQLParser.SQL_THREAD_SYMBOL:
				case MultiQueryMySQLParser.STACKED_SYMBOL:
				case MultiQueryMySQLParser.STARTS_SYMBOL:
				case MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL:
				case MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL:
				case MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
				case MultiQueryMySQLParser.STATUS_SYMBOL:
				case MultiQueryMySQLParser.STORAGE_SYMBOL:
				case MultiQueryMySQLParser.STRING_SYMBOL:
				case MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL:
				case MultiQueryMySQLParser.SUBDATE_SYMBOL:
				case MultiQueryMySQLParser.SUBJECT_SYMBOL:
				case MultiQueryMySQLParser.SUBPARTITION_SYMBOL:
				case MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL:
				case MultiQueryMySQLParser.SUSPEND_SYMBOL:
				case MultiQueryMySQLParser.SWAPS_SYMBOL:
				case MultiQueryMySQLParser.SWITCHES_SYMBOL:
				case MultiQueryMySQLParser.TABLE_NAME_SYMBOL:
				case MultiQueryMySQLParser.TABLES_SYMBOL:
				case MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL:
				case MultiQueryMySQLParser.TABLESPACE_SYMBOL:
				case MultiQueryMySQLParser.TEMPORARY_SYMBOL:
				case MultiQueryMySQLParser.TEMPTABLE_SYMBOL:
				case MultiQueryMySQLParser.TEXT_SYMBOL:
				case MultiQueryMySQLParser.THAN_SYMBOL:
				case MultiQueryMySQLParser.TRANSACTION_SYMBOL:
				case MultiQueryMySQLParser.TRIGGERS_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL:
				case MultiQueryMySQLParser.TIME_SYMBOL:
				case MultiQueryMySQLParser.TYPES_SYMBOL:
				case MultiQueryMySQLParser.TYPE_SYMBOL:
				case MultiQueryMySQLParser.UNCOMMITTED_SYMBOL:
				case MultiQueryMySQLParser.UNDEFINED_SYMBOL:
				case MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
				case MultiQueryMySQLParser.UNDOFILE_SYMBOL:
				case MultiQueryMySQLParser.UNKNOWN_SYMBOL:
				case MultiQueryMySQLParser.UNTIL_SYMBOL:
				case MultiQueryMySQLParser.USER_RESOURCES_SYMBOL:
				case MultiQueryMySQLParser.USER_SYMBOL:
				case MultiQueryMySQLParser.USE_FRM_SYMBOL:
				case MultiQueryMySQLParser.VARIABLES_SYMBOL:
				case MultiQueryMySQLParser.VIEW_SYMBOL:
				case MultiQueryMySQLParser.VALUE_SYMBOL:
				case MultiQueryMySQLParser.WARNINGS_SYMBOL:
				case MultiQueryMySQLParser.WAIT_SYMBOL:
				case MultiQueryMySQLParser.WEEK_SYMBOL:
				case MultiQueryMySQLParser.WORK_SYMBOL:
				case MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL:
				case MultiQueryMySQLParser.X509_SYMBOL:
				case MultiQueryMySQLParser.XID_SYMBOL:
				case MultiQueryMySQLParser.XML_SYMBOL:
				case MultiQueryMySQLParser.YEAR_SYMBOL:
				case MultiQueryMySQLParser.EXCHANGE_SYMBOL:
				case MultiQueryMySQLParser.EXPIRE_SYMBOL:
				case MultiQueryMySQLParser.ONLY_SYMBOL:
				case MultiQueryMySQLParser.VALIDATION_SYMBOL:
				case MultiQueryMySQLParser.WITHOUT_SYMBOL:
				case MultiQueryMySQLParser.ROLE_SYMBOL:
				case MultiQueryMySQLParser.ADMIN_SYMBOL:
				case MultiQueryMySQLParser.INVISIBLE_SYMBOL:
				case MultiQueryMySQLParser.VISIBLE_SYMBOL:
				case MultiQueryMySQLParser.COMPONENT_SYMBOL:
				case MultiQueryMySQLParser.SKIP_SYMBOL:
				case MultiQueryMySQLParser.LOCKED_SYMBOL:
				case MultiQueryMySQLParser.NOWAIT_SYMBOL:
				case MultiQueryMySQLParser.HISTOGRAM_SYMBOL:
				case MultiQueryMySQLParser.BUCKETS_SYMBOL:
				case MultiQueryMySQLParser.EXCLUDE_SYMBOL:
				case MultiQueryMySQLParser.FOLLOWING_SYMBOL:
				case MultiQueryMySQLParser.NULLS_SYMBOL:
				case MultiQueryMySQLParser.OTHERS_SYMBOL:
				case MultiQueryMySQLParser.PRECEDING_SYMBOL:
				case MultiQueryMySQLParser.RESPECT_SYMBOL:
				case MultiQueryMySQLParser.TIES_SYMBOL:
				case MultiQueryMySQLParser.UNBOUNDED_SYMBOL:
				case MultiQueryMySQLParser.NESTED_SYMBOL:
				case MultiQueryMySQLParser.ORDINALITY_SYMBOL:
				case MultiQueryMySQLParser.PATH_SYMBOL:
				case MultiQueryMySQLParser.HISTORY_SYMBOL:
				case MultiQueryMySQLParser.REUSE_SYMBOL:
				case MultiQueryMySQLParser.SRID_SYMBOL:
				case MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL:
				case MultiQueryMySQLParser.VCPU_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
				case MultiQueryMySQLParser.DEFINITION_SYMBOL:
				case MultiQueryMySQLParser.DESCRIPTION_SYMBOL:
				case MultiQueryMySQLParser.ORGANIZATION_SYMBOL:
				case MultiQueryMySQLParser.REFERENCE_SYMBOL:
				case MultiQueryMySQLParser.OPTIONAL_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL:
				case MultiQueryMySQLParser.ACTIVE_SYMBOL:
				case MultiQueryMySQLParser.INACTIVE_SYMBOL:
				case MultiQueryMySQLParser.RETAIN_SYMBOL:
				case MultiQueryMySQLParser.OLD_SYMBOL:
				case MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL:
				case MultiQueryMySQLParser.ENFORCED_SYMBOL:
				case MultiQueryMySQLParser.OJ_SYMBOL:
				case MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					this.state = 8311;
					this.identifierKeywordsUnambiguous();
					}
					break;
				case MultiQueryMySQLParser.EVENT_SYMBOL:
				case MultiQueryMySQLParser.FILE_SYMBOL:
				case MultiQueryMySQLParser.NONE_SYMBOL:
				case MultiQueryMySQLParser.PROCESS_SYMBOL:
				case MultiQueryMySQLParser.PROXY_SYMBOL:
				case MultiQueryMySQLParser.RELOAD_SYMBOL:
				case MultiQueryMySQLParser.REPLICATION_SYMBOL:
				case MultiQueryMySQLParser.SUPER_SYMBOL:
				case MultiQueryMySQLParser.RESOURCE_SYMBOL:
					{
					this.state = 8312;
					this.identifierKeywordsAmbiguous3Roles();
					}
					break;
				case MultiQueryMySQLParser.GLOBAL_SYMBOL:
				case MultiQueryMySQLParser.LOCAL_SYMBOL:
				case MultiQueryMySQLParser.SESSION_SYMBOL:
				case MultiQueryMySQLParser.PERSIST_SYMBOL:
				case MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL:
					{
					this.state = 8313;
					this.identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
		let _localctx: IdentifierKeywordsAmbiguous3RolesContext = new IdentifierKeywordsAmbiguous3RolesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1198, MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8318;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.EVENT_SYMBOL || _la === MultiQueryMySQLParser.FILE_SYMBOL || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & ((1 << (MultiQueryMySQLParser.NONE_SYMBOL - 239)) | (1 << (MultiQueryMySQLParser.PROCESS_SYMBOL - 239)) | (1 << (MultiQueryMySQLParser.PROXY_SYMBOL - 239)))) !== 0) || _la === MultiQueryMySQLParser.RELOAD_SYMBOL || _la === MultiQueryMySQLParser.REPLICATION_SYMBOL || _la === MultiQueryMySQLParser.SUPER_SYMBOL || _la === MultiQueryMySQLParser.RESOURCE_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
		let _localctx: IdentifierKeywordsUnambiguousContext = new IdentifierKeywordsUnambiguousContext(this._ctx, this.state);
		this.enterRule(_localctx, 1200, MultiQueryMySQLParser.RULE_identifierKeywordsUnambiguous);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8320;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MultiQueryMySQLParser.ACCOUNT_SYMBOL) | (1 << MultiQueryMySQLParser.ALWAYS_SYMBOL) | (1 << MultiQueryMySQLParser.BACKUP_SYMBOL) | (1 << MultiQueryMySQLParser.CLOSE_SYMBOL) | (1 << MultiQueryMySQLParser.FORMAT_SYMBOL) | (1 << MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL) | (1 << MultiQueryMySQLParser.HOST_SYMBOL) | (1 << MultiQueryMySQLParser.OPEN_SYMBOL) | (1 << MultiQueryMySQLParser.OPTIONS_SYMBOL) | (1 << MultiQueryMySQLParser.OWNER_SYMBOL) | (1 << MultiQueryMySQLParser.PARSER_SYMBOL))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (MultiQueryMySQLParser.PORT_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.REMOVE_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.RESTORE_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.SECURITY_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.SERVER_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.SOCKET_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.SONAME_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.UPGRADE_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.WRAPPER_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.ACTION_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.ADDDATE_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.AFTER_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.AGAINST_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.AGGREGATE_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.ALGORITHM_SYMBOL - 33)) | (1 << (MultiQueryMySQLParser.ANY_SYMBOL - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (MultiQueryMySQLParser.AT_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.AVG_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.BINLOG_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.BIT_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.BLOCK_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.BOOL_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.BOOLEAN_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.BTREE_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CASCADED_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CATALOG_NAME_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CHAIN_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CHANGED_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CHANNEL_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CIPHER_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CLIENT_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COALESCE_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.CODE_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COLLATION_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COLUMN_NAME_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COLUMNS_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COMMITTED_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COMPACT_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COMPLETION_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COMPRESSED_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.COMPRESSION_SYMBOL - 65)) | (1 << (MultiQueryMySQLParser.ENCRYPTION_SYMBOL - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (MultiQueryMySQLParser.CONCURRENT_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CONNECTION_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CONSISTENT_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CONTEXT_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CPU_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CURRENT_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.CURSOR_NAME_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DATA_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DATAFILE_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DATETIME_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DATE_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DAY_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DEFINER_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DIRECTORY_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DISABLE_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DISCARD_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DISK_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DUMPFILE_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DUPLICATE_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.DYNAMIC_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.ENDS_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.ENUM_SYMBOL - 97)) | (1 << (MultiQueryMySQLParser.ENGINE_SYMBOL - 97)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (MultiQueryMySQLParser.ENGINES_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.ERROR_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.ERRORS_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.ESCAPE_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.EVENTS_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.EVERY_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.EXPANSION_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.EXPORT_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.EXTENDED_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FAULTS_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FAST_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FOUND_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.ENABLE_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FULL_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FILTER_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FIRST_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.FIXED_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.GENERAL_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.GEOMETRY_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.GET_FORMAT_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.GRANTS_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.HASH_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.HOSTS_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.HOUR_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.IDENTIFIED_SYMBOL - 129)) | (1 << (MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (MultiQueryMySQLParser.INVOKER_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.INDEXES_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.INSTANCE_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.IO_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.IPC_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.ISOLATION_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.ISSUER_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.INSERT_METHOD_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.JSON_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LAST_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LEAVES_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LESS_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LEVEL_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LINESTRING_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LIST_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LOCKS_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LOGFILE_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.LOGS_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MAX_ROWS_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_HOST_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_PORT_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_USER_SYMBOL - 161)) | (1 << (MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_DELAY_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MAX_SIZE_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MEDIUM_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MEMORY_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MERGE_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MICROSECOND_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MIGRATE_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MINUTE_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MIN_ROWS_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MODIFY_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MODE_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MONTH_SYMBOL - 193)) | (1 << (MultiQueryMySQLParser.MULTILINESTRING_SYMBOL - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (MultiQueryMySQLParser.MULTIPOINT_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.MUTEX_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NAME_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NAMES_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NATIONAL_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NCHAR_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NDBCLUSTER_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NEVER_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NEXT_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NEW_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NO_WAIT_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NODEGROUP_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NUMBER_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.NVARCHAR_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.OFFSET_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.ONE_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PACK_KEYS_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PAGE_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PARTIAL_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PARTITIONING_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PARTITIONS_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PASSWORD_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PHASE_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PLUGIN_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.PLUGINS_SYMBOL - 225)) | (1 << (MultiQueryMySQLParser.POINT_SYMBOL - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (MultiQueryMySQLParser.POLYGON_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.PRESERVE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.PREV_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.PRIVILEGES_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.PROCESSLIST_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.PROFILE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.PROFILES_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.QUARTER_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.QUERY_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.QUICK_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.READ_ONLY_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REBUILD_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.RECOVER_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REDUNDANT_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.RELAY_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.RELAYLOG_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.RELAY_THREAD_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REORGANIZE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REPEATABLE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 257)) | (1 << (MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.RESUME_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.RETURNS_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.REVERSE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.ROLLUP_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.ROTATE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.ROUTINE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.ROW_COUNT_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.ROW_FORMAT_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.RTREE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SCHEDULE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SECOND_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SERIAL_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SERIALIZABLE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SIMPLE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SHARE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SLOW_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SNAPSHOT_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SOUNDS_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SOURCE_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL - 289)) | (1 << (MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL - 289)))) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & ((1 << (MultiQueryMySQLParser.SQL_THREAD_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STACKED_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STARTS_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STATUS_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STORAGE_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.STRING_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SUBDATE_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SUBJECT_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SUBPARTITION_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SUSPEND_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SWAPS_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.SWITCHES_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TABLE_NAME_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TABLES_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TABLESPACE_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TEMPORARY_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TEMPTABLE_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TEXT_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.THAN_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TRANSACTION_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TRIGGERS_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TIMESTAMP_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL - 321)) | (1 << (MultiQueryMySQLParser.TIME_SYMBOL - 321)))) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & ((1 << (MultiQueryMySQLParser.TYPES_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.TYPE_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.UNCOMMITTED_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.UNDEFINED_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.UNDOFILE_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.UNKNOWN_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.UNTIL_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.USER_RESOURCES_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.USER_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.USE_FRM_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.VARIABLES_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.VIEW_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.VALUE_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.WARNINGS_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.WAIT_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.WEEK_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.WORK_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.X509_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.XID_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.XML_SYMBOL - 353)) | (1 << (MultiQueryMySQLParser.YEAR_SYMBOL - 353)))) !== 0) || _la === MultiQueryMySQLParser.EXCHANGE_SYMBOL || _la === MultiQueryMySQLParser.EXPIRE_SYMBOL || _la === MultiQueryMySQLParser.ONLY_SYMBOL || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MultiQueryMySQLParser.VALIDATION_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.WITHOUT_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.ROLE_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.ADMIN_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.INVISIBLE_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.VISIBLE_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.COMPONENT_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.SKIP_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.LOCKED_SYMBOL - 670)) | (1 << (MultiQueryMySQLParser.NOWAIT_SYMBOL - 670)))) !== 0) || ((((_la - 704)) & ~0x1F) === 0 && ((1 << (_la - 704)) & ((1 << (MultiQueryMySQLParser.HISTOGRAM_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.BUCKETS_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.EXCLUDE_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.FOLLOWING_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.NULLS_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.OTHERS_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.PRECEDING_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.RESPECT_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.TIES_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.UNBOUNDED_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.NESTED_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.ORDINALITY_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.PATH_SYMBOL - 704)) | (1 << (MultiQueryMySQLParser.HISTORY_SYMBOL - 704)))) !== 0) || ((((_la - 736)) & ~0x1F) === 0 && ((1 << (_la - 736)) & ((1 << (MultiQueryMySQLParser.REUSE_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.SRID_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.VCPU_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.DEFINITION_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.DESCRIPTION_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.ORGANIZATION_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.REFERENCE_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.OPTIONAL_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.SECONDARY_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.ACTIVE_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.INACTIVE_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.RETAIN_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.OLD_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.ENFORCED_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.OJ_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 736)) | (1 << (MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 736)))) !== 0) || _la === MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleKeyword(): RoleKeywordContext {
		let _localctx: RoleKeywordContext = new RoleKeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1202, MultiQueryMySQLParser.RULE_roleKeyword);
		try {
			this.state = 8332;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1115, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8322;
				if (!(this.serverVersion < 80017)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80017");
				}
				this.state = 8325;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1113, this._ctx) ) {
				case 1:
					{
					this.state = 8323;
					this.roleOrLabelKeyword();
					}
					break;

				case 2:
					{
					this.state = 8324;
					this.roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8330;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MultiQueryMySQLParser.ACCOUNT_SYMBOL:
				case MultiQueryMySQLParser.ALWAYS_SYMBOL:
				case MultiQueryMySQLParser.BACKUP_SYMBOL:
				case MultiQueryMySQLParser.CLOSE_SYMBOL:
				case MultiQueryMySQLParser.FORMAT_SYMBOL:
				case MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL:
				case MultiQueryMySQLParser.HOST_SYMBOL:
				case MultiQueryMySQLParser.OPEN_SYMBOL:
				case MultiQueryMySQLParser.OPTIONS_SYMBOL:
				case MultiQueryMySQLParser.OWNER_SYMBOL:
				case MultiQueryMySQLParser.PARSER_SYMBOL:
				case MultiQueryMySQLParser.PORT_SYMBOL:
				case MultiQueryMySQLParser.REMOVE_SYMBOL:
				case MultiQueryMySQLParser.RESTORE_SYMBOL:
				case MultiQueryMySQLParser.SECURITY_SYMBOL:
				case MultiQueryMySQLParser.SERVER_SYMBOL:
				case MultiQueryMySQLParser.SOCKET_SYMBOL:
				case MultiQueryMySQLParser.SONAME_SYMBOL:
				case MultiQueryMySQLParser.UPGRADE_SYMBOL:
				case MultiQueryMySQLParser.WRAPPER_SYMBOL:
				case MultiQueryMySQLParser.ACTION_SYMBOL:
				case MultiQueryMySQLParser.ADDDATE_SYMBOL:
				case MultiQueryMySQLParser.AFTER_SYMBOL:
				case MultiQueryMySQLParser.AGAINST_SYMBOL:
				case MultiQueryMySQLParser.AGGREGATE_SYMBOL:
				case MultiQueryMySQLParser.ALGORITHM_SYMBOL:
				case MultiQueryMySQLParser.ANY_SYMBOL:
				case MultiQueryMySQLParser.AT_SYMBOL:
				case MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL:
				case MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL:
				case MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL:
				case MultiQueryMySQLParser.AVG_SYMBOL:
				case MultiQueryMySQLParser.BINLOG_SYMBOL:
				case MultiQueryMySQLParser.BIT_SYMBOL:
				case MultiQueryMySQLParser.BLOCK_SYMBOL:
				case MultiQueryMySQLParser.BOOL_SYMBOL:
				case MultiQueryMySQLParser.BOOLEAN_SYMBOL:
				case MultiQueryMySQLParser.BTREE_SYMBOL:
				case MultiQueryMySQLParser.CASCADED_SYMBOL:
				case MultiQueryMySQLParser.CATALOG_NAME_SYMBOL:
				case MultiQueryMySQLParser.CHAIN_SYMBOL:
				case MultiQueryMySQLParser.CHANGED_SYMBOL:
				case MultiQueryMySQLParser.CHANNEL_SYMBOL:
				case MultiQueryMySQLParser.CIPHER_SYMBOL:
				case MultiQueryMySQLParser.CLIENT_SYMBOL:
				case MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL:
				case MultiQueryMySQLParser.COALESCE_SYMBOL:
				case MultiQueryMySQLParser.CODE_SYMBOL:
				case MultiQueryMySQLParser.COLLATION_SYMBOL:
				case MultiQueryMySQLParser.COLUMN_NAME_SYMBOL:
				case MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.COLUMNS_SYMBOL:
				case MultiQueryMySQLParser.COMMITTED_SYMBOL:
				case MultiQueryMySQLParser.COMPACT_SYMBOL:
				case MultiQueryMySQLParser.COMPLETION_SYMBOL:
				case MultiQueryMySQLParser.COMPRESSED_SYMBOL:
				case MultiQueryMySQLParser.COMPRESSION_SYMBOL:
				case MultiQueryMySQLParser.ENCRYPTION_SYMBOL:
				case MultiQueryMySQLParser.CONCURRENT_SYMBOL:
				case MultiQueryMySQLParser.CONNECTION_SYMBOL:
				case MultiQueryMySQLParser.CONSISTENT_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
				case MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL:
				case MultiQueryMySQLParser.CONTEXT_SYMBOL:
				case MultiQueryMySQLParser.CPU_SYMBOL:
				case MultiQueryMySQLParser.CURRENT_SYMBOL:
				case MultiQueryMySQLParser.CURSOR_NAME_SYMBOL:
				case MultiQueryMySQLParser.DATA_SYMBOL:
				case MultiQueryMySQLParser.DATAFILE_SYMBOL:
				case MultiQueryMySQLParser.DATETIME_SYMBOL:
				case MultiQueryMySQLParser.DATE_SYMBOL:
				case MultiQueryMySQLParser.DAY_SYMBOL:
				case MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL:
				case MultiQueryMySQLParser.DEFINER_SYMBOL:
				case MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL:
				case MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL:
				case MultiQueryMySQLParser.DIRECTORY_SYMBOL:
				case MultiQueryMySQLParser.DISABLE_SYMBOL:
				case MultiQueryMySQLParser.DISCARD_SYMBOL:
				case MultiQueryMySQLParser.DISK_SYMBOL:
				case MultiQueryMySQLParser.DUMPFILE_SYMBOL:
				case MultiQueryMySQLParser.DUPLICATE_SYMBOL:
				case MultiQueryMySQLParser.DYNAMIC_SYMBOL:
				case MultiQueryMySQLParser.ENDS_SYMBOL:
				case MultiQueryMySQLParser.ENUM_SYMBOL:
				case MultiQueryMySQLParser.ENGINE_SYMBOL:
				case MultiQueryMySQLParser.ENGINES_SYMBOL:
				case MultiQueryMySQLParser.ERROR_SYMBOL:
				case MultiQueryMySQLParser.ERRORS_SYMBOL:
				case MultiQueryMySQLParser.ESCAPE_SYMBOL:
				case MultiQueryMySQLParser.EVENTS_SYMBOL:
				case MultiQueryMySQLParser.EVERY_SYMBOL:
				case MultiQueryMySQLParser.EXPANSION_SYMBOL:
				case MultiQueryMySQLParser.EXPORT_SYMBOL:
				case MultiQueryMySQLParser.EXTENDED_SYMBOL:
				case MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL:
				case MultiQueryMySQLParser.FAULTS_SYMBOL:
				case MultiQueryMySQLParser.FAST_SYMBOL:
				case MultiQueryMySQLParser.FOUND_SYMBOL:
				case MultiQueryMySQLParser.ENABLE_SYMBOL:
				case MultiQueryMySQLParser.FULL_SYMBOL:
				case MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL:
				case MultiQueryMySQLParser.FILTER_SYMBOL:
				case MultiQueryMySQLParser.FIRST_SYMBOL:
				case MultiQueryMySQLParser.FIXED_SYMBOL:
				case MultiQueryMySQLParser.GENERAL_SYMBOL:
				case MultiQueryMySQLParser.GEOMETRY_SYMBOL:
				case MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL:
				case MultiQueryMySQLParser.GET_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.GRANTS_SYMBOL:
				case MultiQueryMySQLParser.HASH_SYMBOL:
				case MultiQueryMySQLParser.HOSTS_SYMBOL:
				case MultiQueryMySQLParser.HOUR_SYMBOL:
				case MultiQueryMySQLParser.IDENTIFIED_SYMBOL:
				case MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL:
				case MultiQueryMySQLParser.INVOKER_SYMBOL:
				case MultiQueryMySQLParser.INDEXES_SYMBOL:
				case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
				case MultiQueryMySQLParser.INSTANCE_SYMBOL:
				case MultiQueryMySQLParser.IO_SYMBOL:
				case MultiQueryMySQLParser.IPC_SYMBOL:
				case MultiQueryMySQLParser.ISOLATION_SYMBOL:
				case MultiQueryMySQLParser.ISSUER_SYMBOL:
				case MultiQueryMySQLParser.INSERT_METHOD_SYMBOL:
				case MultiQueryMySQLParser.JSON_SYMBOL:
				case MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL:
				case MultiQueryMySQLParser.LAST_SYMBOL:
				case MultiQueryMySQLParser.LEAVES_SYMBOL:
				case MultiQueryMySQLParser.LESS_SYMBOL:
				case MultiQueryMySQLParser.LEVEL_SYMBOL:
				case MultiQueryMySQLParser.LINESTRING_SYMBOL:
				case MultiQueryMySQLParser.LIST_SYMBOL:
				case MultiQueryMySQLParser.LOCKS_SYMBOL:
				case MultiQueryMySQLParser.LOGFILE_SYMBOL:
				case MultiQueryMySQLParser.LOGS_SYMBOL:
				case MultiQueryMySQLParser.MAX_ROWS_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MultiQueryMySQLParser.MASTER_HOST_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PORT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL:
				case MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL:
				case MultiQueryMySQLParser.MASTER_USER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL:
				case MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_DELAY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL:
				case MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
				case MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL:
				case MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL:
				case MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_SIZE_SYMBOL:
				case MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
				case MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
				case MultiQueryMySQLParser.MEDIUM_SYMBOL:
				case MultiQueryMySQLParser.MEMORY_SYMBOL:
				case MultiQueryMySQLParser.MERGE_SYMBOL:
				case MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL:
				case MultiQueryMySQLParser.MICROSECOND_SYMBOL:
				case MultiQueryMySQLParser.MIGRATE_SYMBOL:
				case MultiQueryMySQLParser.MINUTE_SYMBOL:
				case MultiQueryMySQLParser.MIN_ROWS_SYMBOL:
				case MultiQueryMySQLParser.MODIFY_SYMBOL:
				case MultiQueryMySQLParser.MODE_SYMBOL:
				case MultiQueryMySQLParser.MONTH_SYMBOL:
				case MultiQueryMySQLParser.MULTILINESTRING_SYMBOL:
				case MultiQueryMySQLParser.MULTIPOINT_SYMBOL:
				case MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL:
				case MultiQueryMySQLParser.MUTEX_SYMBOL:
				case MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL:
				case MultiQueryMySQLParser.NAME_SYMBOL:
				case MultiQueryMySQLParser.NAMES_SYMBOL:
				case MultiQueryMySQLParser.NATIONAL_SYMBOL:
				case MultiQueryMySQLParser.NCHAR_SYMBOL:
				case MultiQueryMySQLParser.NDBCLUSTER_SYMBOL:
				case MultiQueryMySQLParser.NEVER_SYMBOL:
				case MultiQueryMySQLParser.NEXT_SYMBOL:
				case MultiQueryMySQLParser.NEW_SYMBOL:
				case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
				case MultiQueryMySQLParser.NODEGROUP_SYMBOL:
				case MultiQueryMySQLParser.NUMBER_SYMBOL:
				case MultiQueryMySQLParser.NVARCHAR_SYMBOL:
				case MultiQueryMySQLParser.OFFSET_SYMBOL:
				case MultiQueryMySQLParser.ONE_SYMBOL:
				case MultiQueryMySQLParser.PACK_KEYS_SYMBOL:
				case MultiQueryMySQLParser.PAGE_SYMBOL:
				case MultiQueryMySQLParser.PARTIAL_SYMBOL:
				case MultiQueryMySQLParser.PARTITIONING_SYMBOL:
				case MultiQueryMySQLParser.PARTITIONS_SYMBOL:
				case MultiQueryMySQLParser.PASSWORD_SYMBOL:
				case MultiQueryMySQLParser.PHASE_SYMBOL:
				case MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL:
				case MultiQueryMySQLParser.PLUGIN_SYMBOL:
				case MultiQueryMySQLParser.PLUGINS_SYMBOL:
				case MultiQueryMySQLParser.POINT_SYMBOL:
				case MultiQueryMySQLParser.POLYGON_SYMBOL:
				case MultiQueryMySQLParser.PRESERVE_SYMBOL:
				case MultiQueryMySQLParser.PREV_SYMBOL:
				case MultiQueryMySQLParser.PRIVILEGES_SYMBOL:
				case MultiQueryMySQLParser.PROCESSLIST_SYMBOL:
				case MultiQueryMySQLParser.PROFILE_SYMBOL:
				case MultiQueryMySQLParser.PROFILES_SYMBOL:
				case MultiQueryMySQLParser.QUARTER_SYMBOL:
				case MultiQueryMySQLParser.QUERY_SYMBOL:
				case MultiQueryMySQLParser.QUICK_SYMBOL:
				case MultiQueryMySQLParser.READ_ONLY_SYMBOL:
				case MultiQueryMySQLParser.REBUILD_SYMBOL:
				case MultiQueryMySQLParser.RECOVER_SYMBOL:
				case MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL:
				case MultiQueryMySQLParser.REDUNDANT_SYMBOL:
				case MultiQueryMySQLParser.RELAY_SYMBOL:
				case MultiQueryMySQLParser.RELAYLOG_SYMBOL:
				case MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL:
				case MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL:
				case MultiQueryMySQLParser.RELAY_THREAD_SYMBOL:
				case MultiQueryMySQLParser.REORGANIZE_SYMBOL:
				case MultiQueryMySQLParser.REPEATABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
				case MultiQueryMySQLParser.RESUME_SYMBOL:
				case MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL:
				case MultiQueryMySQLParser.RETURNS_SYMBOL:
				case MultiQueryMySQLParser.REVERSE_SYMBOL:
				case MultiQueryMySQLParser.ROLLUP_SYMBOL:
				case MultiQueryMySQLParser.ROTATE_SYMBOL:
				case MultiQueryMySQLParser.ROUTINE_SYMBOL:
				case MultiQueryMySQLParser.ROW_COUNT_SYMBOL:
				case MultiQueryMySQLParser.ROW_FORMAT_SYMBOL:
				case MultiQueryMySQLParser.RTREE_SYMBOL:
				case MultiQueryMySQLParser.SCHEDULE_SYMBOL:
				case MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL:
				case MultiQueryMySQLParser.SECOND_SYMBOL:
				case MultiQueryMySQLParser.SERIAL_SYMBOL:
				case MultiQueryMySQLParser.SERIALIZABLE_SYMBOL:
				case MultiQueryMySQLParser.SIMPLE_SYMBOL:
				case MultiQueryMySQLParser.SHARE_SYMBOL:
				case MultiQueryMySQLParser.SLOW_SYMBOL:
				case MultiQueryMySQLParser.SNAPSHOT_SYMBOL:
				case MultiQueryMySQLParser.SOUNDS_SYMBOL:
				case MultiQueryMySQLParser.SOURCE_SYMBOL:
				case MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL:
				case MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
				case MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
				case MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL:
				case MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL:
				case MultiQueryMySQLParser.SQL_THREAD_SYMBOL:
				case MultiQueryMySQLParser.STACKED_SYMBOL:
				case MultiQueryMySQLParser.STARTS_SYMBOL:
				case MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL:
				case MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL:
				case MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
				case MultiQueryMySQLParser.STATUS_SYMBOL:
				case MultiQueryMySQLParser.STORAGE_SYMBOL:
				case MultiQueryMySQLParser.STRING_SYMBOL:
				case MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL:
				case MultiQueryMySQLParser.SUBDATE_SYMBOL:
				case MultiQueryMySQLParser.SUBJECT_SYMBOL:
				case MultiQueryMySQLParser.SUBPARTITION_SYMBOL:
				case MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL:
				case MultiQueryMySQLParser.SUSPEND_SYMBOL:
				case MultiQueryMySQLParser.SWAPS_SYMBOL:
				case MultiQueryMySQLParser.SWITCHES_SYMBOL:
				case MultiQueryMySQLParser.TABLE_NAME_SYMBOL:
				case MultiQueryMySQLParser.TABLES_SYMBOL:
				case MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL:
				case MultiQueryMySQLParser.TABLESPACE_SYMBOL:
				case MultiQueryMySQLParser.TEMPORARY_SYMBOL:
				case MultiQueryMySQLParser.TEMPTABLE_SYMBOL:
				case MultiQueryMySQLParser.TEXT_SYMBOL:
				case MultiQueryMySQLParser.THAN_SYMBOL:
				case MultiQueryMySQLParser.TRANSACTION_SYMBOL:
				case MultiQueryMySQLParser.TRIGGERS_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL:
				case MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL:
				case MultiQueryMySQLParser.TIME_SYMBOL:
				case MultiQueryMySQLParser.TYPES_SYMBOL:
				case MultiQueryMySQLParser.TYPE_SYMBOL:
				case MultiQueryMySQLParser.UNCOMMITTED_SYMBOL:
				case MultiQueryMySQLParser.UNDEFINED_SYMBOL:
				case MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
				case MultiQueryMySQLParser.UNDOFILE_SYMBOL:
				case MultiQueryMySQLParser.UNKNOWN_SYMBOL:
				case MultiQueryMySQLParser.UNTIL_SYMBOL:
				case MultiQueryMySQLParser.USER_RESOURCES_SYMBOL:
				case MultiQueryMySQLParser.USER_SYMBOL:
				case MultiQueryMySQLParser.USE_FRM_SYMBOL:
				case MultiQueryMySQLParser.VARIABLES_SYMBOL:
				case MultiQueryMySQLParser.VIEW_SYMBOL:
				case MultiQueryMySQLParser.VALUE_SYMBOL:
				case MultiQueryMySQLParser.WARNINGS_SYMBOL:
				case MultiQueryMySQLParser.WAIT_SYMBOL:
				case MultiQueryMySQLParser.WEEK_SYMBOL:
				case MultiQueryMySQLParser.WORK_SYMBOL:
				case MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL:
				case MultiQueryMySQLParser.X509_SYMBOL:
				case MultiQueryMySQLParser.XID_SYMBOL:
				case MultiQueryMySQLParser.XML_SYMBOL:
				case MultiQueryMySQLParser.YEAR_SYMBOL:
				case MultiQueryMySQLParser.EXCHANGE_SYMBOL:
				case MultiQueryMySQLParser.EXPIRE_SYMBOL:
				case MultiQueryMySQLParser.ONLY_SYMBOL:
				case MultiQueryMySQLParser.VALIDATION_SYMBOL:
				case MultiQueryMySQLParser.WITHOUT_SYMBOL:
				case MultiQueryMySQLParser.ROLE_SYMBOL:
				case MultiQueryMySQLParser.ADMIN_SYMBOL:
				case MultiQueryMySQLParser.INVISIBLE_SYMBOL:
				case MultiQueryMySQLParser.VISIBLE_SYMBOL:
				case MultiQueryMySQLParser.COMPONENT_SYMBOL:
				case MultiQueryMySQLParser.SKIP_SYMBOL:
				case MultiQueryMySQLParser.LOCKED_SYMBOL:
				case MultiQueryMySQLParser.NOWAIT_SYMBOL:
				case MultiQueryMySQLParser.HISTOGRAM_SYMBOL:
				case MultiQueryMySQLParser.BUCKETS_SYMBOL:
				case MultiQueryMySQLParser.EXCLUDE_SYMBOL:
				case MultiQueryMySQLParser.FOLLOWING_SYMBOL:
				case MultiQueryMySQLParser.NULLS_SYMBOL:
				case MultiQueryMySQLParser.OTHERS_SYMBOL:
				case MultiQueryMySQLParser.PRECEDING_SYMBOL:
				case MultiQueryMySQLParser.RESPECT_SYMBOL:
				case MultiQueryMySQLParser.TIES_SYMBOL:
				case MultiQueryMySQLParser.UNBOUNDED_SYMBOL:
				case MultiQueryMySQLParser.NESTED_SYMBOL:
				case MultiQueryMySQLParser.ORDINALITY_SYMBOL:
				case MultiQueryMySQLParser.PATH_SYMBOL:
				case MultiQueryMySQLParser.HISTORY_SYMBOL:
				case MultiQueryMySQLParser.REUSE_SYMBOL:
				case MultiQueryMySQLParser.SRID_SYMBOL:
				case MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL:
				case MultiQueryMySQLParser.VCPU_SYMBOL:
				case MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
				case MultiQueryMySQLParser.DEFINITION_SYMBOL:
				case MultiQueryMySQLParser.DESCRIPTION_SYMBOL:
				case MultiQueryMySQLParser.ORGANIZATION_SYMBOL:
				case MultiQueryMySQLParser.REFERENCE_SYMBOL:
				case MultiQueryMySQLParser.OPTIONAL_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL:
				case MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL:
				case MultiQueryMySQLParser.ACTIVE_SYMBOL:
				case MultiQueryMySQLParser.INACTIVE_SYMBOL:
				case MultiQueryMySQLParser.RETAIN_SYMBOL:
				case MultiQueryMySQLParser.OLD_SYMBOL:
				case MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL:
				case MultiQueryMySQLParser.ENFORCED_SYMBOL:
				case MultiQueryMySQLParser.OJ_SYMBOL:
				case MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
				case MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					this.state = 8327;
					this.identifierKeywordsUnambiguous();
					}
					break;
				case MultiQueryMySQLParser.ASCII_SYMBOL:
				case MultiQueryMySQLParser.BEGIN_SYMBOL:
				case MultiQueryMySQLParser.BYTE_SYMBOL:
				case MultiQueryMySQLParser.CACHE_SYMBOL:
				case MultiQueryMySQLParser.CHARSET_SYMBOL:
				case MultiQueryMySQLParser.CHECKSUM_SYMBOL:
				case MultiQueryMySQLParser.COMMENT_SYMBOL:
				case MultiQueryMySQLParser.COMMIT_SYMBOL:
				case MultiQueryMySQLParser.CONTAINS_SYMBOL:
				case MultiQueryMySQLParser.DEALLOCATE_SYMBOL:
				case MultiQueryMySQLParser.DO_SYMBOL:
				case MultiQueryMySQLParser.END_SYMBOL:
				case MultiQueryMySQLParser.FLUSH_SYMBOL:
				case MultiQueryMySQLParser.FOLLOWS_SYMBOL:
				case MultiQueryMySQLParser.HANDLER_SYMBOL:
				case MultiQueryMySQLParser.HELP_SYMBOL:
				case MultiQueryMySQLParser.INSTALL_SYMBOL:
				case MultiQueryMySQLParser.LANGUAGE_SYMBOL:
				case MultiQueryMySQLParser.NO_SYMBOL:
				case MultiQueryMySQLParser.PRECEDES_SYMBOL:
				case MultiQueryMySQLParser.PREPARE_SYMBOL:
				case MultiQueryMySQLParser.REPAIR_SYMBOL:
				case MultiQueryMySQLParser.RESET_SYMBOL:
				case MultiQueryMySQLParser.ROLLBACK_SYMBOL:
				case MultiQueryMySQLParser.SAVEPOINT_SYMBOL:
				case MultiQueryMySQLParser.SIGNED_SYMBOL:
				case MultiQueryMySQLParser.SLAVE_SYMBOL:
				case MultiQueryMySQLParser.START_SYMBOL:
				case MultiQueryMySQLParser.STOP_SYMBOL:
				case MultiQueryMySQLParser.TRUNCATE_SYMBOL:
				case MultiQueryMySQLParser.UNICODE_SYMBOL:
				case MultiQueryMySQLParser.UNINSTALL_SYMBOL:
				case MultiQueryMySQLParser.XA_SYMBOL:
				case MultiQueryMySQLParser.IMPORT_SYMBOL:
				case MultiQueryMySQLParser.CLONE_SYMBOL:
					{
					this.state = 8328;
					this.identifierKeywordsAmbiguous2Labels();
					}
					break;
				case MultiQueryMySQLParser.GLOBAL_SYMBOL:
				case MultiQueryMySQLParser.LOCAL_SYMBOL:
				case MultiQueryMySQLParser.SESSION_SYMBOL:
				case MultiQueryMySQLParser.PERSIST_SYMBOL:
				case MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL:
					{
					this.state = 8329;
					this.identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lValueKeyword(): LValueKeywordContext {
		let _localctx: LValueKeywordContext = new LValueKeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1204, MultiQueryMySQLParser.RULE_lValueKeyword);
		try {
			this.state = 8338;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MultiQueryMySQLParser.ACCOUNT_SYMBOL:
			case MultiQueryMySQLParser.ALWAYS_SYMBOL:
			case MultiQueryMySQLParser.BACKUP_SYMBOL:
			case MultiQueryMySQLParser.CLOSE_SYMBOL:
			case MultiQueryMySQLParser.FORMAT_SYMBOL:
			case MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL:
			case MultiQueryMySQLParser.HOST_SYMBOL:
			case MultiQueryMySQLParser.OPEN_SYMBOL:
			case MultiQueryMySQLParser.OPTIONS_SYMBOL:
			case MultiQueryMySQLParser.OWNER_SYMBOL:
			case MultiQueryMySQLParser.PARSER_SYMBOL:
			case MultiQueryMySQLParser.PORT_SYMBOL:
			case MultiQueryMySQLParser.REMOVE_SYMBOL:
			case MultiQueryMySQLParser.RESTORE_SYMBOL:
			case MultiQueryMySQLParser.SECURITY_SYMBOL:
			case MultiQueryMySQLParser.SERVER_SYMBOL:
			case MultiQueryMySQLParser.SOCKET_SYMBOL:
			case MultiQueryMySQLParser.SONAME_SYMBOL:
			case MultiQueryMySQLParser.UPGRADE_SYMBOL:
			case MultiQueryMySQLParser.WRAPPER_SYMBOL:
			case MultiQueryMySQLParser.ACTION_SYMBOL:
			case MultiQueryMySQLParser.ADDDATE_SYMBOL:
			case MultiQueryMySQLParser.AFTER_SYMBOL:
			case MultiQueryMySQLParser.AGAINST_SYMBOL:
			case MultiQueryMySQLParser.AGGREGATE_SYMBOL:
			case MultiQueryMySQLParser.ALGORITHM_SYMBOL:
			case MultiQueryMySQLParser.ANY_SYMBOL:
			case MultiQueryMySQLParser.AT_SYMBOL:
			case MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL:
			case MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL:
			case MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL:
			case MultiQueryMySQLParser.AVG_SYMBOL:
			case MultiQueryMySQLParser.BINLOG_SYMBOL:
			case MultiQueryMySQLParser.BIT_SYMBOL:
			case MultiQueryMySQLParser.BLOCK_SYMBOL:
			case MultiQueryMySQLParser.BOOL_SYMBOL:
			case MultiQueryMySQLParser.BOOLEAN_SYMBOL:
			case MultiQueryMySQLParser.BTREE_SYMBOL:
			case MultiQueryMySQLParser.CASCADED_SYMBOL:
			case MultiQueryMySQLParser.CATALOG_NAME_SYMBOL:
			case MultiQueryMySQLParser.CHAIN_SYMBOL:
			case MultiQueryMySQLParser.CHANGED_SYMBOL:
			case MultiQueryMySQLParser.CHANNEL_SYMBOL:
			case MultiQueryMySQLParser.CIPHER_SYMBOL:
			case MultiQueryMySQLParser.CLIENT_SYMBOL:
			case MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL:
			case MultiQueryMySQLParser.COALESCE_SYMBOL:
			case MultiQueryMySQLParser.CODE_SYMBOL:
			case MultiQueryMySQLParser.COLLATION_SYMBOL:
			case MultiQueryMySQLParser.COLUMN_NAME_SYMBOL:
			case MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL:
			case MultiQueryMySQLParser.COLUMNS_SYMBOL:
			case MultiQueryMySQLParser.COMMITTED_SYMBOL:
			case MultiQueryMySQLParser.COMPACT_SYMBOL:
			case MultiQueryMySQLParser.COMPLETION_SYMBOL:
			case MultiQueryMySQLParser.COMPRESSED_SYMBOL:
			case MultiQueryMySQLParser.COMPRESSION_SYMBOL:
			case MultiQueryMySQLParser.ENCRYPTION_SYMBOL:
			case MultiQueryMySQLParser.CONCURRENT_SYMBOL:
			case MultiQueryMySQLParser.CONNECTION_SYMBOL:
			case MultiQueryMySQLParser.CONSISTENT_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
			case MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL:
			case MultiQueryMySQLParser.CONTEXT_SYMBOL:
			case MultiQueryMySQLParser.CPU_SYMBOL:
			case MultiQueryMySQLParser.CURRENT_SYMBOL:
			case MultiQueryMySQLParser.CURSOR_NAME_SYMBOL:
			case MultiQueryMySQLParser.DATA_SYMBOL:
			case MultiQueryMySQLParser.DATAFILE_SYMBOL:
			case MultiQueryMySQLParser.DATETIME_SYMBOL:
			case MultiQueryMySQLParser.DATE_SYMBOL:
			case MultiQueryMySQLParser.DAY_SYMBOL:
			case MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL:
			case MultiQueryMySQLParser.DEFINER_SYMBOL:
			case MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL:
			case MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL:
			case MultiQueryMySQLParser.DIRECTORY_SYMBOL:
			case MultiQueryMySQLParser.DISABLE_SYMBOL:
			case MultiQueryMySQLParser.DISCARD_SYMBOL:
			case MultiQueryMySQLParser.DISK_SYMBOL:
			case MultiQueryMySQLParser.DUMPFILE_SYMBOL:
			case MultiQueryMySQLParser.DUPLICATE_SYMBOL:
			case MultiQueryMySQLParser.DYNAMIC_SYMBOL:
			case MultiQueryMySQLParser.ENDS_SYMBOL:
			case MultiQueryMySQLParser.ENUM_SYMBOL:
			case MultiQueryMySQLParser.ENGINE_SYMBOL:
			case MultiQueryMySQLParser.ENGINES_SYMBOL:
			case MultiQueryMySQLParser.ERROR_SYMBOL:
			case MultiQueryMySQLParser.ERRORS_SYMBOL:
			case MultiQueryMySQLParser.ESCAPE_SYMBOL:
			case MultiQueryMySQLParser.EVENTS_SYMBOL:
			case MultiQueryMySQLParser.EVERY_SYMBOL:
			case MultiQueryMySQLParser.EXPANSION_SYMBOL:
			case MultiQueryMySQLParser.EXPORT_SYMBOL:
			case MultiQueryMySQLParser.EXTENDED_SYMBOL:
			case MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL:
			case MultiQueryMySQLParser.FAULTS_SYMBOL:
			case MultiQueryMySQLParser.FAST_SYMBOL:
			case MultiQueryMySQLParser.FOUND_SYMBOL:
			case MultiQueryMySQLParser.ENABLE_SYMBOL:
			case MultiQueryMySQLParser.FULL_SYMBOL:
			case MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL:
			case MultiQueryMySQLParser.FILTER_SYMBOL:
			case MultiQueryMySQLParser.FIRST_SYMBOL:
			case MultiQueryMySQLParser.FIXED_SYMBOL:
			case MultiQueryMySQLParser.GENERAL_SYMBOL:
			case MultiQueryMySQLParser.GEOMETRY_SYMBOL:
			case MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL:
			case MultiQueryMySQLParser.GET_FORMAT_SYMBOL:
			case MultiQueryMySQLParser.GRANTS_SYMBOL:
			case MultiQueryMySQLParser.HASH_SYMBOL:
			case MultiQueryMySQLParser.HOSTS_SYMBOL:
			case MultiQueryMySQLParser.HOUR_SYMBOL:
			case MultiQueryMySQLParser.IDENTIFIED_SYMBOL:
			case MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL:
			case MultiQueryMySQLParser.INVOKER_SYMBOL:
			case MultiQueryMySQLParser.INDEXES_SYMBOL:
			case MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL:
			case MultiQueryMySQLParser.INSTANCE_SYMBOL:
			case MultiQueryMySQLParser.IO_SYMBOL:
			case MultiQueryMySQLParser.IPC_SYMBOL:
			case MultiQueryMySQLParser.ISOLATION_SYMBOL:
			case MultiQueryMySQLParser.ISSUER_SYMBOL:
			case MultiQueryMySQLParser.INSERT_METHOD_SYMBOL:
			case MultiQueryMySQLParser.JSON_SYMBOL:
			case MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL:
			case MultiQueryMySQLParser.LAST_SYMBOL:
			case MultiQueryMySQLParser.LEAVES_SYMBOL:
			case MultiQueryMySQLParser.LESS_SYMBOL:
			case MultiQueryMySQLParser.LEVEL_SYMBOL:
			case MultiQueryMySQLParser.LINESTRING_SYMBOL:
			case MultiQueryMySQLParser.LIST_SYMBOL:
			case MultiQueryMySQLParser.LOCKS_SYMBOL:
			case MultiQueryMySQLParser.LOGFILE_SYMBOL:
			case MultiQueryMySQLParser.LOGS_SYMBOL:
			case MultiQueryMySQLParser.MAX_ROWS_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SYMBOL:
			case MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
			case MultiQueryMySQLParser.MASTER_HOST_SYMBOL:
			case MultiQueryMySQLParser.MASTER_PORT_SYMBOL:
			case MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL:
			case MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL:
			case MultiQueryMySQLParser.MASTER_USER_SYMBOL:
			case MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL:
			case MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
			case MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL:
			case MultiQueryMySQLParser.MASTER_DELAY_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL:
			case MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
			case MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL:
			case MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL:
			case MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
			case MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
			case MultiQueryMySQLParser.MAX_SIZE_SYMBOL:
			case MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
			case MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
			case MultiQueryMySQLParser.MEDIUM_SYMBOL:
			case MultiQueryMySQLParser.MEMORY_SYMBOL:
			case MultiQueryMySQLParser.MERGE_SYMBOL:
			case MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL:
			case MultiQueryMySQLParser.MICROSECOND_SYMBOL:
			case MultiQueryMySQLParser.MIGRATE_SYMBOL:
			case MultiQueryMySQLParser.MINUTE_SYMBOL:
			case MultiQueryMySQLParser.MIN_ROWS_SYMBOL:
			case MultiQueryMySQLParser.MODIFY_SYMBOL:
			case MultiQueryMySQLParser.MODE_SYMBOL:
			case MultiQueryMySQLParser.MONTH_SYMBOL:
			case MultiQueryMySQLParser.MULTILINESTRING_SYMBOL:
			case MultiQueryMySQLParser.MULTIPOINT_SYMBOL:
			case MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL:
			case MultiQueryMySQLParser.MUTEX_SYMBOL:
			case MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL:
			case MultiQueryMySQLParser.NAME_SYMBOL:
			case MultiQueryMySQLParser.NAMES_SYMBOL:
			case MultiQueryMySQLParser.NATIONAL_SYMBOL:
			case MultiQueryMySQLParser.NCHAR_SYMBOL:
			case MultiQueryMySQLParser.NDBCLUSTER_SYMBOL:
			case MultiQueryMySQLParser.NEVER_SYMBOL:
			case MultiQueryMySQLParser.NEXT_SYMBOL:
			case MultiQueryMySQLParser.NEW_SYMBOL:
			case MultiQueryMySQLParser.NO_WAIT_SYMBOL:
			case MultiQueryMySQLParser.NODEGROUP_SYMBOL:
			case MultiQueryMySQLParser.NUMBER_SYMBOL:
			case MultiQueryMySQLParser.NVARCHAR_SYMBOL:
			case MultiQueryMySQLParser.OFFSET_SYMBOL:
			case MultiQueryMySQLParser.ONE_SYMBOL:
			case MultiQueryMySQLParser.PACK_KEYS_SYMBOL:
			case MultiQueryMySQLParser.PAGE_SYMBOL:
			case MultiQueryMySQLParser.PARTIAL_SYMBOL:
			case MultiQueryMySQLParser.PARTITIONING_SYMBOL:
			case MultiQueryMySQLParser.PARTITIONS_SYMBOL:
			case MultiQueryMySQLParser.PASSWORD_SYMBOL:
			case MultiQueryMySQLParser.PHASE_SYMBOL:
			case MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL:
			case MultiQueryMySQLParser.PLUGIN_SYMBOL:
			case MultiQueryMySQLParser.PLUGINS_SYMBOL:
			case MultiQueryMySQLParser.POINT_SYMBOL:
			case MultiQueryMySQLParser.POLYGON_SYMBOL:
			case MultiQueryMySQLParser.PRESERVE_SYMBOL:
			case MultiQueryMySQLParser.PREV_SYMBOL:
			case MultiQueryMySQLParser.PRIVILEGES_SYMBOL:
			case MultiQueryMySQLParser.PROCESSLIST_SYMBOL:
			case MultiQueryMySQLParser.PROFILE_SYMBOL:
			case MultiQueryMySQLParser.PROFILES_SYMBOL:
			case MultiQueryMySQLParser.QUARTER_SYMBOL:
			case MultiQueryMySQLParser.QUERY_SYMBOL:
			case MultiQueryMySQLParser.QUICK_SYMBOL:
			case MultiQueryMySQLParser.READ_ONLY_SYMBOL:
			case MultiQueryMySQLParser.REBUILD_SYMBOL:
			case MultiQueryMySQLParser.RECOVER_SYMBOL:
			case MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL:
			case MultiQueryMySQLParser.REDUNDANT_SYMBOL:
			case MultiQueryMySQLParser.RELAY_SYMBOL:
			case MultiQueryMySQLParser.RELAYLOG_SYMBOL:
			case MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL:
			case MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL:
			case MultiQueryMySQLParser.RELAY_THREAD_SYMBOL:
			case MultiQueryMySQLParser.REORGANIZE_SYMBOL:
			case MultiQueryMySQLParser.REPEATABLE_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
			case MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
			case MultiQueryMySQLParser.RESUME_SYMBOL:
			case MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL:
			case MultiQueryMySQLParser.RETURNS_SYMBOL:
			case MultiQueryMySQLParser.REVERSE_SYMBOL:
			case MultiQueryMySQLParser.ROLLUP_SYMBOL:
			case MultiQueryMySQLParser.ROTATE_SYMBOL:
			case MultiQueryMySQLParser.ROUTINE_SYMBOL:
			case MultiQueryMySQLParser.ROW_COUNT_SYMBOL:
			case MultiQueryMySQLParser.ROW_FORMAT_SYMBOL:
			case MultiQueryMySQLParser.RTREE_SYMBOL:
			case MultiQueryMySQLParser.SCHEDULE_SYMBOL:
			case MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL:
			case MultiQueryMySQLParser.SECOND_SYMBOL:
			case MultiQueryMySQLParser.SERIAL_SYMBOL:
			case MultiQueryMySQLParser.SERIALIZABLE_SYMBOL:
			case MultiQueryMySQLParser.SIMPLE_SYMBOL:
			case MultiQueryMySQLParser.SHARE_SYMBOL:
			case MultiQueryMySQLParser.SLOW_SYMBOL:
			case MultiQueryMySQLParser.SNAPSHOT_SYMBOL:
			case MultiQueryMySQLParser.SOUNDS_SYMBOL:
			case MultiQueryMySQLParser.SOURCE_SYMBOL:
			case MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL:
			case MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
			case MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
			case MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL:
			case MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL:
			case MultiQueryMySQLParser.SQL_THREAD_SYMBOL:
			case MultiQueryMySQLParser.STACKED_SYMBOL:
			case MultiQueryMySQLParser.STARTS_SYMBOL:
			case MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL:
			case MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL:
			case MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
			case MultiQueryMySQLParser.STATUS_SYMBOL:
			case MultiQueryMySQLParser.STORAGE_SYMBOL:
			case MultiQueryMySQLParser.STRING_SYMBOL:
			case MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL:
			case MultiQueryMySQLParser.SUBDATE_SYMBOL:
			case MultiQueryMySQLParser.SUBJECT_SYMBOL:
			case MultiQueryMySQLParser.SUBPARTITION_SYMBOL:
			case MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL:
			case MultiQueryMySQLParser.SUSPEND_SYMBOL:
			case MultiQueryMySQLParser.SWAPS_SYMBOL:
			case MultiQueryMySQLParser.SWITCHES_SYMBOL:
			case MultiQueryMySQLParser.TABLE_NAME_SYMBOL:
			case MultiQueryMySQLParser.TABLES_SYMBOL:
			case MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL:
			case MultiQueryMySQLParser.TABLESPACE_SYMBOL:
			case MultiQueryMySQLParser.TEMPORARY_SYMBOL:
			case MultiQueryMySQLParser.TEMPTABLE_SYMBOL:
			case MultiQueryMySQLParser.TEXT_SYMBOL:
			case MultiQueryMySQLParser.THAN_SYMBOL:
			case MultiQueryMySQLParser.TRANSACTION_SYMBOL:
			case MultiQueryMySQLParser.TRIGGERS_SYMBOL:
			case MultiQueryMySQLParser.TIMESTAMP_SYMBOL:
			case MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL:
			case MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL:
			case MultiQueryMySQLParser.TIME_SYMBOL:
			case MultiQueryMySQLParser.TYPES_SYMBOL:
			case MultiQueryMySQLParser.TYPE_SYMBOL:
			case MultiQueryMySQLParser.UNCOMMITTED_SYMBOL:
			case MultiQueryMySQLParser.UNDEFINED_SYMBOL:
			case MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
			case MultiQueryMySQLParser.UNDOFILE_SYMBOL:
			case MultiQueryMySQLParser.UNKNOWN_SYMBOL:
			case MultiQueryMySQLParser.UNTIL_SYMBOL:
			case MultiQueryMySQLParser.USER_RESOURCES_SYMBOL:
			case MultiQueryMySQLParser.USER_SYMBOL:
			case MultiQueryMySQLParser.USE_FRM_SYMBOL:
			case MultiQueryMySQLParser.VARIABLES_SYMBOL:
			case MultiQueryMySQLParser.VIEW_SYMBOL:
			case MultiQueryMySQLParser.VALUE_SYMBOL:
			case MultiQueryMySQLParser.WARNINGS_SYMBOL:
			case MultiQueryMySQLParser.WAIT_SYMBOL:
			case MultiQueryMySQLParser.WEEK_SYMBOL:
			case MultiQueryMySQLParser.WORK_SYMBOL:
			case MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL:
			case MultiQueryMySQLParser.X509_SYMBOL:
			case MultiQueryMySQLParser.XID_SYMBOL:
			case MultiQueryMySQLParser.XML_SYMBOL:
			case MultiQueryMySQLParser.YEAR_SYMBOL:
			case MultiQueryMySQLParser.EXCHANGE_SYMBOL:
			case MultiQueryMySQLParser.EXPIRE_SYMBOL:
			case MultiQueryMySQLParser.ONLY_SYMBOL:
			case MultiQueryMySQLParser.VALIDATION_SYMBOL:
			case MultiQueryMySQLParser.WITHOUT_SYMBOL:
			case MultiQueryMySQLParser.ROLE_SYMBOL:
			case MultiQueryMySQLParser.ADMIN_SYMBOL:
			case MultiQueryMySQLParser.INVISIBLE_SYMBOL:
			case MultiQueryMySQLParser.VISIBLE_SYMBOL:
			case MultiQueryMySQLParser.COMPONENT_SYMBOL:
			case MultiQueryMySQLParser.SKIP_SYMBOL:
			case MultiQueryMySQLParser.LOCKED_SYMBOL:
			case MultiQueryMySQLParser.NOWAIT_SYMBOL:
			case MultiQueryMySQLParser.HISTOGRAM_SYMBOL:
			case MultiQueryMySQLParser.BUCKETS_SYMBOL:
			case MultiQueryMySQLParser.EXCLUDE_SYMBOL:
			case MultiQueryMySQLParser.FOLLOWING_SYMBOL:
			case MultiQueryMySQLParser.NULLS_SYMBOL:
			case MultiQueryMySQLParser.OTHERS_SYMBOL:
			case MultiQueryMySQLParser.PRECEDING_SYMBOL:
			case MultiQueryMySQLParser.RESPECT_SYMBOL:
			case MultiQueryMySQLParser.TIES_SYMBOL:
			case MultiQueryMySQLParser.UNBOUNDED_SYMBOL:
			case MultiQueryMySQLParser.NESTED_SYMBOL:
			case MultiQueryMySQLParser.ORDINALITY_SYMBOL:
			case MultiQueryMySQLParser.PATH_SYMBOL:
			case MultiQueryMySQLParser.HISTORY_SYMBOL:
			case MultiQueryMySQLParser.REUSE_SYMBOL:
			case MultiQueryMySQLParser.SRID_SYMBOL:
			case MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL:
			case MultiQueryMySQLParser.VCPU_SYMBOL:
			case MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
			case MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
			case MultiQueryMySQLParser.DEFINITION_SYMBOL:
			case MultiQueryMySQLParser.DESCRIPTION_SYMBOL:
			case MultiQueryMySQLParser.ORGANIZATION_SYMBOL:
			case MultiQueryMySQLParser.REFERENCE_SYMBOL:
			case MultiQueryMySQLParser.OPTIONAL_SYMBOL:
			case MultiQueryMySQLParser.SECONDARY_SYMBOL:
			case MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL:
			case MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL:
			case MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL:
			case MultiQueryMySQLParser.ACTIVE_SYMBOL:
			case MultiQueryMySQLParser.INACTIVE_SYMBOL:
			case MultiQueryMySQLParser.RETAIN_SYMBOL:
			case MultiQueryMySQLParser.OLD_SYMBOL:
			case MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL:
			case MultiQueryMySQLParser.ENFORCED_SYMBOL:
			case MultiQueryMySQLParser.OJ_SYMBOL:
			case MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
			case MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
			case MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
			case MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8334;
				this.identifierKeywordsUnambiguous();
				}
				break;
			case MultiQueryMySQLParser.EXECUTE_SYMBOL:
			case MultiQueryMySQLParser.SHUTDOWN_SYMBOL:
			case MultiQueryMySQLParser.RESTART_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8335;
				this.identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case MultiQueryMySQLParser.ASCII_SYMBOL:
			case MultiQueryMySQLParser.BEGIN_SYMBOL:
			case MultiQueryMySQLParser.BYTE_SYMBOL:
			case MultiQueryMySQLParser.CACHE_SYMBOL:
			case MultiQueryMySQLParser.CHARSET_SYMBOL:
			case MultiQueryMySQLParser.CHECKSUM_SYMBOL:
			case MultiQueryMySQLParser.COMMENT_SYMBOL:
			case MultiQueryMySQLParser.COMMIT_SYMBOL:
			case MultiQueryMySQLParser.CONTAINS_SYMBOL:
			case MultiQueryMySQLParser.DEALLOCATE_SYMBOL:
			case MultiQueryMySQLParser.DO_SYMBOL:
			case MultiQueryMySQLParser.END_SYMBOL:
			case MultiQueryMySQLParser.FLUSH_SYMBOL:
			case MultiQueryMySQLParser.FOLLOWS_SYMBOL:
			case MultiQueryMySQLParser.HANDLER_SYMBOL:
			case MultiQueryMySQLParser.HELP_SYMBOL:
			case MultiQueryMySQLParser.INSTALL_SYMBOL:
			case MultiQueryMySQLParser.LANGUAGE_SYMBOL:
			case MultiQueryMySQLParser.NO_SYMBOL:
			case MultiQueryMySQLParser.PRECEDES_SYMBOL:
			case MultiQueryMySQLParser.PREPARE_SYMBOL:
			case MultiQueryMySQLParser.REPAIR_SYMBOL:
			case MultiQueryMySQLParser.RESET_SYMBOL:
			case MultiQueryMySQLParser.ROLLBACK_SYMBOL:
			case MultiQueryMySQLParser.SAVEPOINT_SYMBOL:
			case MultiQueryMySQLParser.SIGNED_SYMBOL:
			case MultiQueryMySQLParser.SLAVE_SYMBOL:
			case MultiQueryMySQLParser.START_SYMBOL:
			case MultiQueryMySQLParser.STOP_SYMBOL:
			case MultiQueryMySQLParser.TRUNCATE_SYMBOL:
			case MultiQueryMySQLParser.UNICODE_SYMBOL:
			case MultiQueryMySQLParser.UNINSTALL_SYMBOL:
			case MultiQueryMySQLParser.XA_SYMBOL:
			case MultiQueryMySQLParser.IMPORT_SYMBOL:
			case MultiQueryMySQLParser.CLONE_SYMBOL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8336;
				this.identifierKeywordsAmbiguous2Labels();
				}
				break;
			case MultiQueryMySQLParser.EVENT_SYMBOL:
			case MultiQueryMySQLParser.FILE_SYMBOL:
			case MultiQueryMySQLParser.NONE_SYMBOL:
			case MultiQueryMySQLParser.PROCESS_SYMBOL:
			case MultiQueryMySQLParser.PROXY_SYMBOL:
			case MultiQueryMySQLParser.RELOAD_SYMBOL:
			case MultiQueryMySQLParser.REPLICATION_SYMBOL:
			case MultiQueryMySQLParser.SUPER_SYMBOL:
			case MultiQueryMySQLParser.RESOURCE_SYMBOL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8337;
				this.identifierKeywordsAmbiguous3Roles();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
		let _localctx: IdentifierKeywordsAmbiguous4SystemVariablesContext = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1206, MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8340;
			_la = this._input.LA(1);
			if (!(_la === MultiQueryMySQLParser.GLOBAL_SYMBOL || _la === MultiQueryMySQLParser.LOCAL_SYMBOL || _la === MultiQueryMySQLParser.SESSION_SYMBOL || _la === MultiQueryMySQLParser.PERSIST_SYMBOL || _la === MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
		let _localctx: RoleOrIdentifierKeywordContext = new RoleOrIdentifierKeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1208, MultiQueryMySQLParser.RULE_roleOrIdentifierKeyword);
		let _la: number;
		try {
			this.state = 8347;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1117, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8342;
				_la = this._input.LA(1);
				if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MultiQueryMySQLParser.ACCOUNT_SYMBOL) | (1 << MultiQueryMySQLParser.ASCII_SYMBOL) | (1 << MultiQueryMySQLParser.ALWAYS_SYMBOL) | (1 << MultiQueryMySQLParser.BACKUP_SYMBOL) | (1 << MultiQueryMySQLParser.BEGIN_SYMBOL) | (1 << MultiQueryMySQLParser.BYTE_SYMBOL) | (1 << MultiQueryMySQLParser.CACHE_SYMBOL) | (1 << MultiQueryMySQLParser.CHARSET_SYMBOL) | (1 << MultiQueryMySQLParser.CHECKSUM_SYMBOL) | (1 << MultiQueryMySQLParser.CLOSE_SYMBOL) | (1 << MultiQueryMySQLParser.COMMENT_SYMBOL) | (1 << MultiQueryMySQLParser.COMMIT_SYMBOL) | (1 << MultiQueryMySQLParser.CONTAINS_SYMBOL) | (1 << MultiQueryMySQLParser.DEALLOCATE_SYMBOL) | (1 << MultiQueryMySQLParser.DO_SYMBOL) | (1 << MultiQueryMySQLParser.END_SYMBOL) | (1 << MultiQueryMySQLParser.FLUSH_SYMBOL) | (1 << MultiQueryMySQLParser.FOLLOWS_SYMBOL) | (1 << MultiQueryMySQLParser.FORMAT_SYMBOL) | (1 << MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL) | (1 << MultiQueryMySQLParser.HANDLER_SYMBOL) | (1 << MultiQueryMySQLParser.HELP_SYMBOL) | (1 << MultiQueryMySQLParser.HOST_SYMBOL) | (1 << MultiQueryMySQLParser.INSTALL_SYMBOL) | (1 << MultiQueryMySQLParser.LANGUAGE_SYMBOL) | (1 << MultiQueryMySQLParser.NO_SYMBOL) | (1 << MultiQueryMySQLParser.OPEN_SYMBOL) | (1 << MultiQueryMySQLParser.OPTIONS_SYMBOL) | (1 << MultiQueryMySQLParser.OWNER_SYMBOL) | (1 << MultiQueryMySQLParser.PARSER_SYMBOL))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (MultiQueryMySQLParser.PARTITION_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.PORT_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.PRECEDES_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.PREPARE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.REMOVE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.REPAIR_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.RESET_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.RESTORE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.ROLLBACK_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SAVEPOINT_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SECURITY_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SERVER_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SIGNED_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SLAVE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SOCKET_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.SONAME_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.START_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.STOP_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.TRUNCATE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.UNICODE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.UNINSTALL_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.UPGRADE_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.WRAPPER_SYMBOL - 32)) | (1 << (MultiQueryMySQLParser.XA_SYMBOL - 32)))) !== 0) || ((((_la - 689)) & ~0x1F) === 0 && ((1 << (_la - 689)) & ((1 << (MultiQueryMySQLParser.ROLE_SYMBOL - 689)) | (1 << (MultiQueryMySQLParser.INVISIBLE_SYMBOL - 689)) | (1 << (MultiQueryMySQLParser.VISIBLE_SYMBOL - 689)) | (1 << (MultiQueryMySQLParser.CLONE_SYMBOL - 689)))) !== 0) || ((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & ((1 << (MultiQueryMySQLParser.SECONDARY_SYMBOL - 750)) | (1 << (MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL - 750)) | (1 << (MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL - 750)) | (1 << (MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL - 750)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8343;
				if (!(this.serverVersion >= 50709)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 50709");
				}
				this.state = 8344;
				this.match(MultiQueryMySQLParser.SHUTDOWN_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8345;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 8346;
				this.match(MultiQueryMySQLParser.IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
		let _localctx: RoleOrLabelKeywordContext = new RoleOrLabelKeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1210, MultiQueryMySQLParser.RULE_roleOrLabelKeyword);
		let _la: number;
		try {
			this.state = 8358;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1118, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8349;
				_la = this._input.LA(1);
				if (!(((((_la - 57)) & ~0x1F) === 0 && ((1 << (_la - 57)) & ((1 << (MultiQueryMySQLParser.ACTION_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.ADDDATE_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AFTER_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AGAINST_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AGGREGATE_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.ALGORITHM_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.ANY_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AT_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AUTHORS_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.AVG_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.BINLOG_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.BIT_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.BLOCK_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.BOOL_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.BOOLEAN_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.BTREE_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CASCADED_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CATALOG_NAME_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CHAIN_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CHANGED_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CHANNEL_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CIPHER_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CLIENT_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.COALESCE_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.CODE_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.COLLATION_SYMBOL - 57)) | (1 << (MultiQueryMySQLParser.COLUMN_NAME_SYMBOL - 57)))) !== 0) || ((((_la - 89)) & ~0x1F) === 0 && ((1 << (_la - 89)) & ((1 << (MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.COLUMNS_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.COMMITTED_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.COMPACT_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.COMPLETION_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.COMPRESSED_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.COMPRESSION_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.ENCRYPTION_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONCURRENT_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONNECTION_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONSISTENT_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONTEXT_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CONTRIBUTORS_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CPU_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CURRENT_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.CURSOR_NAME_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DATA_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DATAFILE_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DATETIME_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DATE_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DAY_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DEFINER_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DES_KEY_FILE_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DIRECTORY_SYMBOL - 89)) | (1 << (MultiQueryMySQLParser.DISABLE_SYMBOL - 89)))) !== 0) || ((((_la - 121)) & ~0x1F) === 0 && ((1 << (_la - 121)) & ((1 << (MultiQueryMySQLParser.DISCARD_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.DISK_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.DUMPFILE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.DUPLICATE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.DYNAMIC_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ENDS_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ENUM_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ENGINE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ENGINES_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ERROR_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ERRORS_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ESCAPE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.EVENTS_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.EVERY_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.EXPANSION_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.EXPORT_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.EXTENDED_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FAULTS_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FAST_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FOUND_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.ENABLE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FULL_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FILTER_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FIRST_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.FIXED_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.GENERAL_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.GEOMETRY_SYMBOL - 121)) | (1 << (MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL - 121)))) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & ((1 << (MultiQueryMySQLParser.GET_FORMAT_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.GRANTS_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.GLOBAL_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.HASH_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.HOSTS_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.HOUR_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.IDENTIFIED_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.INVOKER_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.INDEXES_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.INSTANCE_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.IO_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.IPC_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.ISOLATION_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.ISSUER_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.INSERT_METHOD_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.JSON_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LAST_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LEAVES_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LESS_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LEVEL_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LINESTRING_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LIST_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LOCAL_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LOCKS_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LOGFILE_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.LOGS_SYMBOL - 153)) | (1 << (MultiQueryMySQLParser.MAX_ROWS_SYMBOL - 153)))) !== 0) || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MultiQueryMySQLParser.MASTER_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_HOST_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_PORT_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_USER_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_DELAY_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MAX_STATEMENT_TIME_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MAX_SIZE_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MEDIUM_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MEMORY_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MERGE_SYMBOL - 185)) | (1 << (MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL - 185)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MultiQueryMySQLParser.MICROSECOND_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MIGRATE_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MINUTE_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MIN_ROWS_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MODIFY_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MODE_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MONTH_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MULTILINESTRING_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MULTIPOINT_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MUTEX_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NAME_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NAMES_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NATIONAL_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NCHAR_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NDBCLUSTER_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NEVER_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NEXT_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NEW_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NO_WAIT_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NODEGROUP_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NUMBER_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.NVARCHAR_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.OFFSET_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.ONE_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.PACK_KEYS_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.PAGE_SYMBOL - 217)) | (1 << (MultiQueryMySQLParser.PARTIAL_SYMBOL - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MultiQueryMySQLParser.PARTITIONING_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PARTITIONS_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PASSWORD_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PHASE_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PLUGIN_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PLUGINS_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.POINT_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.POLYGON_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PRESERVE_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PREV_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PRIVILEGES_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PROCESSLIST_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PROFILE_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.PROFILES_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.QUARTER_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.QUERY_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.QUICK_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.READ_ONLY_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.REBUILD_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.RECOVER_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.REDOFILE_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.REDUNDANT_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.RELAY_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.RELAYLOG_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL - 249)) | (1 << (MultiQueryMySQLParser.RELAY_THREAD_SYMBOL - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MultiQueryMySQLParser.REORGANIZE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPEATABLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.RESUME_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.RETURNS_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.REVERSE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.ROLLUP_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.ROTATE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.ROUTINE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.ROW_COUNT_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.ROW_FORMAT_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.RTREE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SCHEDULE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SECOND_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SERIAL_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SERIALIZABLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SESSION_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SIMPLE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SHARE_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SLOW_SYMBOL - 281)) | (1 << (MultiQueryMySQLParser.SNAPSHOT_SYMBOL - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MultiQueryMySQLParser.SOUNDS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SOURCE_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_CACHE_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SQL_THREAD_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STACKED_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STARTS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STATUS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STORAGE_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.STRING_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUBDATE_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUBJECT_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUBPARTITION_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUPER_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SUSPEND_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SWAPS_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.SWITCHES_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.TABLE_NAME_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.TABLES_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.TABLESPACE_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.TEMPORARY_SYMBOL - 313)) | (1 << (MultiQueryMySQLParser.TEMPTABLE_SYMBOL - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MultiQueryMySQLParser.TEXT_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.THAN_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TRANSACTION_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TRIGGERS_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TIMESTAMP_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TIME_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TYPES_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.TYPE_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UDF_RETURNS_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UNCOMMITTED_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UNDEFINED_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UNDOFILE_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UNKNOWN_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.UNTIL_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.USER_RESOURCES_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.USER_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.USE_FRM_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.VARIABLES_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.VIEW_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.VALUE_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.WARNINGS_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.WAIT_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.WEEK_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.WORK_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.X509_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.XID_SYMBOL - 345)) | (1 << (MultiQueryMySQLParser.XML_SYMBOL - 345)))) !== 0) || _la === MultiQueryMySQLParser.YEAR_SYMBOL || _la === MultiQueryMySQLParser.ANALYSE_SYMBOL || ((((_la - 694)) & ~0x1F) === 0 && ((1 << (_la - 694)) & ((1 << (MultiQueryMySQLParser.COMPONENT_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.SKIP_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.LOCKED_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.NOWAIT_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.HISTOGRAM_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.BUCKETS_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.REMOTE_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.EXCLUDE_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.FOLLOWING_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.NULLS_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.OTHERS_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.PRECEDING_SYMBOL - 694)) | (1 << (MultiQueryMySQLParser.RESPECT_SYMBOL - 694)))) !== 0) || ((((_la - 727)) & ~0x1F) === 0 && ((1 << (_la - 727)) & ((1 << (MultiQueryMySQLParser.TIES_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.UNBOUNDED_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.NESTED_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.ORDINALITY_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.PATH_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.HISTORY_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.REUSE_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.SRID_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.VCPU_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.DESCRIPTION_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.ORGANIZATION_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.OPTIONAL_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.ACTIVE_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.INACTIVE_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.RETAIN_SYMBOL - 727)) | (1 << (MultiQueryMySQLParser.OLD_SYMBOL - 727)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8350;
				if (!(this.serverVersion < 50709)) {
					throw new FailedPredicateException(this, "this.serverVersion < 50709");
				}
				this.state = 8351;
				this.match(MultiQueryMySQLParser.SHUTDOWN_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8352;
				if (!(this.serverVersion < 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion < 80000");
				}
				this.state = 8353;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.CUBE_SYMBOL || _la === MultiQueryMySQLParser.IMPORT_SYMBOL || _la === MultiQueryMySQLParser.ROWS_SYMBOL || _la === MultiQueryMySQLParser.ROW_SYMBOL || _la === MultiQueryMySQLParser.FUNCTION_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8354;
				if (!(this.serverVersion >= 80000)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80000");
				}
				this.state = 8355;
				_la = this._input.LA(1);
				if (!(_la === MultiQueryMySQLParser.SUPER_SYMBOL || _la === MultiQueryMySQLParser.EXCHANGE_SYMBOL || _la === MultiQueryMySQLParser.EXPIRE_SYMBOL || _la === MultiQueryMySQLParser.ONLY_SYMBOL || _la === MultiQueryMySQLParser.VALIDATION_SYMBOL || _la === MultiQueryMySQLParser.WITHOUT_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8356;
				if (!(this.serverVersion >= 80014)) {
					throw new FailedPredicateException(this, "this.serverVersion >= 80014");
				}
				this.state = 8357;
				this.match(MultiQueryMySQLParser.ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 2:
			return this.simpleStatement_sempred(_localctx as SimpleStatementContext, predIndex);

		case 3:
			return this.alterStatement_sempred(_localctx as AlterStatementContext, predIndex);

		case 4:
			return this.alterDatabase_sempred(_localctx as AlterDatabaseContext, predIndex);

		case 10:
			return this.alterTable_sempred(_localctx as AlterTableContext, predIndex);

		case 14:
			return this.standaloneAlterCommands_sempred(_localctx as StandaloneAlterCommandsContext, predIndex);

		case 15:
			return this.alterPartition_sempred(_localctx as AlterPartitionContext, predIndex);

		case 18:
			return this.alterListItem_sempred(_localctx as AlterListItemContext, predIndex);

		case 25:
			return this.withValidation_sempred(_localctx as WithValidationContext, predIndex);

		case 29:
			return this.alterTablespace_sempred(_localctx as AlterTablespaceContext, predIndex);

		case 40:
			return this.createStatement_sempred(_localctx as CreateStatementContext, predIndex);

		case 42:
			return this.createDatabaseOption_sempred(_localctx as CreateDatabaseOptionContext, predIndex);

		case 55:
			return this.createIndex_sempred(_localctx as CreateIndexContext, predIndex);

		case 66:
			return this.tsDataFileName_sempred(_localctx as TsDataFileNameContext, predIndex);

		case 69:
			return this.tablespaceOption_sempred(_localctx as TablespaceOptionContext, predIndex);

		case 86:
			return this.triggerFollowsPrecedesClause_sempred(_localctx as TriggerFollowsPrecedesClauseContext, predIndex);

		case 91:
			return this.dropStatement_sempred(_localctx as DropStatementContext, predIndex);

		case 112:
			return this.deleteStatement_sempred(_localctx as DeleteStatementContext, predIndex);

		case 113:
			return this.partitionDelete_sempred(_localctx as PartitionDeleteContext, predIndex);

		case 115:
			return this.doStatement_sempred(_localctx as DoStatementContext, predIndex);

		case 118:
			return this.insertStatement_sempred(_localctx as InsertStatementContext, predIndex);

		case 137:
			return this.queryExpression_sempred(_localctx as QueryExpressionContext, predIndex);

		case 138:
			return this.queryExpressionBody_sempred(_localctx as QueryExpressionBodyContext, predIndex);

		case 140:
			return this.querySpecification_sempred(_localctx as QuerySpecificationContext, predIndex);

		case 164:
			return this.olapOption_sempred(_localctx as OlapOptionContext, predIndex);

		case 169:
			return this.selectOption_sempred(_localctx as SelectOptionContext, predIndex);

		case 170:
			return this.lockingClause_sempred(_localctx as LockingClauseContext, predIndex);

		case 171:
			return this.lockStrengh_sempred(_localctx as LockStrenghContext, predIndex);

		case 177:
			return this.tableReference_sempred(_localctx as TableReferenceContext, predIndex);

		case 183:
			return this.tableFactor_sempred(_localctx as TableFactorContext, predIndex);

		case 186:
			return this.derivedTable_sempred(_localctx as DerivedTableContext, predIndex);

		case 190:
			return this.jtColumn_sempred(_localctx as JtColumnContext, predIndex);

		case 196:
			return this.tableAlias_sempred(_localctx as TableAliasContext, predIndex);

		case 205:
			return this.updateStatement_sempred(_localctx as UpdateStatementContext, predIndex);

		case 209:
			return this.transactionCharacteristic_sempred(_localctx as TransactionCharacteristicContext, predIndex);

		case 211:
			return this.lockStatement_sempred(_localctx as LockStatementContext, predIndex);

		case 215:
			return this.xaConvert_sempred(_localctx as XaConvertContext, predIndex);

		case 217:
			return this.replicationStatement_sempred(_localctx as ReplicationStatementContext, predIndex);

		case 218:
			return this.resetOption_sempred(_localctx as ResetOptionContext, predIndex);

		case 219:
			return this.masterResetOptions_sempred(_localctx as MasterResetOptionsContext, predIndex);

		case 228:
			return this.changeReplication_sempred(_localctx as ChangeReplicationContext, predIndex);

		case 236:
			return this.slaveUntilOptions_sempred(_localctx as SlaveUntilOptionsContext, predIndex);

		case 237:
			return this.slaveConnectionOptions_sempred(_localctx as SlaveConnectionOptionsContext, predIndex);

		case 244:
			return this.cloneStatement_sempred(_localctx as CloneStatementContext, predIndex);

		case 247:
			return this.accountManagementStatement_sempred(_localctx as AccountManagementStatementContext, predIndex);

		case 248:
			return this.alterUser_sempred(_localctx as AlterUserContext, predIndex);

		case 249:
			return this.alterUserTail_sempred(_localctx as AlterUserTailContext, predIndex);

		case 251:
			return this.createUser_sempred(_localctx as CreateUserContext, predIndex);

		case 252:
			return this.createUserTail_sempred(_localctx as CreateUserTailContext, predIndex);

		case 253:
			return this.defaultRoleClause_sempred(_localctx as DefaultRoleClauseContext, predIndex);

		case 256:
			return this.accountLockPasswordExpireOptions_sempred(_localctx as AccountLockPasswordExpireOptionsContext, predIndex);

		case 257:
			return this.dropUser_sempred(_localctx as DropUserContext, predIndex);

		case 258:
			return this.grant_sempred(_localctx as GrantContext, predIndex);

		case 259:
			return this.grantTargetList_sempred(_localctx as GrantTargetListContext, predIndex);

		case 260:
			return this.grantOptions_sempred(_localctx as GrantOptionsContext, predIndex);

		case 264:
			return this.versionedRequireClause_sempred(_localctx as VersionedRequireClauseContext, predIndex);

		case 266:
			return this.revoke_sempred(_localctx as RevokeContext, predIndex);

		case 267:
			return this.onTypeTo_sempred(_localctx as OnTypeToContext, predIndex);

		case 270:
			return this.roleOrPrivilege_sempred(_localctx as RoleOrPrivilegeContext, predIndex);

		case 271:
			return this.grantIdentifier_sempred(_localctx as GrantIdentifierContext, predIndex);

		case 278:
			return this.tableAdministrationStatement_sempred(_localctx as TableAdministrationStatementContext, predIndex);

		case 284:
			return this.startOptionValueList_sempred(_localctx as StartOptionValueListContext, predIndex);

		case 289:
			return this.optionValueNoOptionType_sempred(_localctx as OptionValueNoOptionTypeContext, predIndex);

		case 294:
			return this.setExprOrDefault_sempred(_localctx as SetExprOrDefaultContext, predIndex);

		case 295:
			return this.showStatement_sempred(_localctx as ShowStatementContext, predIndex);

		case 296:
			return this.showCommandType_sempred(_localctx as ShowCommandTypeContext, predIndex);

		case 297:
			return this.nonBlocking_sempred(_localctx as NonBlockingContext, predIndex);

		case 301:
			return this.otherAdministrativeStatement_sempred(_localctx as OtherAdministrativeStatementContext, predIndex);

		case 309:
			return this.flushOption_sempred(_localctx as FlushOptionContext, predIndex);

		case 312:
			return this.flushTablesOptions_sempred(_localctx as FlushTablesOptionsContext, predIndex);

		case 327:
			return this.utilityStatement_sempred(_localctx as UtilityStatementContext, predIndex);

		case 329:
			return this.explainCommand_sempred(_localctx as ExplainCommandContext, predIndex);

		case 330:
			return this.explainableStatement_sempred(_localctx as ExplainableStatementContext, predIndex);

		case 334:
			return this.expr_sempred(_localctx as ExprContext, predIndex);

		case 335:
			return this.boolPri_sempred(_localctx as BoolPriContext, predIndex);

		case 337:
			return this.predicate_sempred(_localctx as PredicateContext, predIndex);

		case 339:
			return this.bitExpr_sempred(_localctx as BitExprContext, predIndex);

		case 340:
			return this.simpleExpr_sempred(_localctx as SimpleExprContext, predIndex);

		case 341:
			return this.arrayCast_sempred(_localctx as ArrayCastContext, predIndex);

		case 342:
			return this.jsonOperator_sempred(_localctx as JsonOperatorContext, predIndex);

		case 343:
			return this.sumExpr_sempred(_localctx as SumExprContext, predIndex);

		case 354:
			return this.runtimeFunctionCall_sempred(_localctx as RuntimeFunctionCallContext, predIndex);

		case 355:
			return this.geometryFunction_sempred(_localctx as GeometryFunctionContext, predIndex);

		case 357:
			return this.fractionalPrecision_sempred(_localctx as FractionalPrecisionContext, predIndex);

		case 369:
			return this.internalVariableName_sempred(_localctx as InternalVariableNameContext, predIndex);

		case 373:
			return this.castType_sempred(_localctx as CastTypeContext, predIndex);

		case 387:
			return this.channel_sempred(_localctx as ChannelContext, predIndex);

		case 416:
			return this.getDiagnostics_sempred(_localctx as GetDiagnosticsContext, predIndex);

		case 429:
			return this.checkOrReferences_sempred(_localctx as CheckOrReferencesContext, predIndex);

		case 432:
			return this.tableConstraintDef_sempred(_localctx as TableConstraintDefContext, predIndex);

		case 434:
			return this.fieldDefinition_sempred(_localctx as FieldDefinitionContext, predIndex);

		case 435:
			return this.columnAttribute_sempred(_localctx as ColumnAttributeContext, predIndex);

		case 445:
			return this.keyListVariants_sempred(_localctx as KeyListVariantsContext, predIndex);

		case 448:
			return this.commonIndexOption_sempred(_localctx as CommonIndexOptionContext, predIndex);

		case 454:
			return this.dataType_sempred(_localctx as DataTypeContext, predIndex);

		case 464:
			return this.charsetName_sempred(_localctx as CharsetNameContext, predIndex);

		case 465:
			return this.collationName_sempred(_localctx as CollationNameContext, predIndex);

		case 468:
			return this.createTableOption_sempred(_localctx as CreateTableOptionContext, predIndex);

		case 476:
			return this.partitionKeyAlgorithm_sempred(_localctx as PartitionKeyAlgorithmContext, predIndex);

		case 503:
			return this.createUserEntry_sempred(_localctx as CreateUserEntryContext, predIndex);

		case 514:
			return this.usePartition_sempred(_localctx as UsePartitionContext, predIndex);

		case 516:
			return this.columnName_sempred(_localctx as ColumnNameContext, predIndex);

		case 559:
			return this.pureIdentifier_sempred(_localctx as PureIdentifierContext, predIndex);

		case 564:
			return this.simpleIdentifier_sempred(_localctx as SimpleIdentifierContext, predIndex);

		case 569:
			return this.real_ulonglong_number_sempred(_localctx as Real_ulonglong_numberContext, predIndex);

		case 573:
			return this.textStringLiteral_sempred(_localctx as TextStringLiteralContext, predIndex);

		case 575:
			return this.textStringHash_sempred(_localctx as TextStringHashContext, predIndex);

		case 595:
			return this.identifierKeyword_sempred(_localctx as IdentifierKeywordContext, predIndex);

		case 598:
			return this.labelKeyword_sempred(_localctx as LabelKeywordContext, predIndex);

		case 601:
			return this.roleKeyword_sempred(_localctx as RoleKeywordContext, predIndex);

		case 604:
			return this.roleOrIdentifierKeyword_sempred(_localctx as RoleOrIdentifierKeywordContext, predIndex);

		case 605:
			return this.roleOrLabelKeyword_sempred(_localctx as RoleOrLabelKeywordContext, predIndex);
		}
		return true;
	}
	private simpleStatement_sempred(_localctx: SimpleStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.serverVersion >= 80000;

		case 1:
			return this.serverVersion >= 80000;

		case 2:
			return this.serverVersion >= 80000;

		case 3:
			return this.serverVersion >= 50604;
		}
		return true;
	}
	private alterStatement_sempred(_localctx: AlterStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.serverVersion >= 80014;

		case 5:
			return this.serverVersion >= 50713;
		}
		return true;
	}
	private alterDatabase_sempred(_localctx: AlterDatabaseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private alterTable_sempred(_localctx: AlterTableContext, predIndex: number): boolean {
		switch (predIndex) {
		case 7:
			return this.serverVersion < 50700;
		}
		return true;
	}
	private standaloneAlterCommands_sempred(_localctx: StandaloneAlterCommandsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 8:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private alterPartition_sempred(_localctx: AlterPartitionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 9:
			return this.serverVersion >= 50704;

		case 10:
			return this.serverVersion >= 50704;
		}
		return true;
	}
	private alterListItem_sempred(_localctx: AlterListItemContext, predIndex: number): boolean {
		switch (predIndex) {
		case 11:
			return this.serverVersion >= 50700;

		case 12:
			return this.serverVersion < 50700;

		case 13:
			return this.serverVersion >= 80014;

		case 14:
			return this.serverVersion >= 80000;

		case 15:
			return this.serverVersion >= 80017;

		case 16:
			return this.serverVersion >= 80000;

		case 17:
			return this.serverVersion >= 50700;

		case 18:
			return this.serverVersion >= 80014;

		case 19:
			return this.serverVersion >= 50708 && this.serverVersion < 80000;
		}
		return true;
	}
	private withValidation_sempred(_localctx: WithValidationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 20:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private alterTablespace_sempred(_localctx: AlterTablespaceContext, predIndex: number): boolean {
		switch (predIndex) {
		case 21:
			return this.serverVersion < 80000;

		case 22:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private createStatement_sempred(_localctx: CreateStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 23:
			return this.serverVersion >= 80000;

		case 24:
			return this.serverVersion >= 80011;

		case 25:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private createDatabaseOption_sempred(_localctx: CreateDatabaseOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 26:
			return this.serverVersion >= 80016;
		}
		return true;
	}
	private createIndex_sempred(_localctx: CreateIndexContext, predIndex: number): boolean {
		switch (predIndex) {
		case 27:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private tsDataFileName_sempred(_localctx: TsDataFileNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 28:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private tablespaceOption_sempred(_localctx: TablespaceOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 29:
			return this.serverVersion >= 50707;

		case 30:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private triggerFollowsPrecedesClause_sempred(_localctx: TriggerFollowsPrecedesClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 31:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private dropStatement_sempred(_localctx: DropStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 32:
			return this.serverVersion >= 80000;

		case 33:
			return this.serverVersion >= 80011;

		case 34:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private deleteStatement_sempred(_localctx: DeleteStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 35:
			return this.serverVersion >= 80000;

		case 36:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private partitionDelete_sempred(_localctx: PartitionDeleteContext, predIndex: number): boolean {
		switch (predIndex) {
		case 37:
			return this.serverVersion >= 50602;
		}
		return true;
	}
	private doStatement_sempred(_localctx: DoStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 38:
			return this.serverVersion < 50709;

		case 39:
			return this.serverVersion >= 50709;
		}
		return true;
	}
	private insertStatement_sempred(_localctx: InsertStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 40:
			return  this.serverVersion >= 80018;

		case 41:
			return  this.serverVersion >= 80018;
		}
		return true;
	}
	private queryExpression_sempred(_localctx: QueryExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 42:
			return this.serverVersion >= 80000;

		case 43:
			return this.serverVersion < 80000;

		case 44:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private queryExpressionBody_sempred(_localctx: QueryExpressionBodyContext, predIndex: number): boolean {
		switch (predIndex) {
		case 45:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private querySpecification_sempred(_localctx: QuerySpecificationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 46:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private olapOption_sempred(_localctx: OlapOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 47:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private selectOption_sempred(_localctx: SelectOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 48:
			return this.serverVersion < 80000;

		case 49:
			return this.serverVersion >= 50704 && this.serverVersion < 50708;
		}
		return true;
	}
	private lockingClause_sempred(_localctx: LockingClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 50:
			return this.serverVersion >= 80000;

		case 51:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private lockStrengh_sempred(_localctx: LockStrenghContext, predIndex: number): boolean {
		switch (predIndex) {
		case 52:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private tableReference_sempred(_localctx: TableReferenceContext, predIndex: number): boolean {
		switch (predIndex) {
		case 53:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private tableFactor_sempred(_localctx: TableFactorContext, predIndex: number): boolean {
		switch (predIndex) {
		case 54:
			return this.serverVersion >= 80004;
		}
		return true;
	}
	private derivedTable_sempred(_localctx: DerivedTableContext, predIndex: number): boolean {
		switch (predIndex) {
		case 55:
			return this.serverVersion >= 80000;

		case 56:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private jtColumn_sempred(_localctx: JtColumnContext, predIndex: number): boolean {
		switch (predIndex) {
		case 57:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private tableAlias_sempred(_localctx: TableAliasContext, predIndex: number): boolean {
		switch (predIndex) {
		case 58:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private updateStatement_sempred(_localctx: UpdateStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 59:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private transactionCharacteristic_sempred(_localctx: TransactionCharacteristicContext, predIndex: number): boolean {
		switch (predIndex) {
		case 60:
			return this.serverVersion >= 50605;
		}
		return true;
	}
	private lockStatement_sempred(_localctx: LockStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 61:
			return this.serverVersion >= 80000;

		case 62:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private xaConvert_sempred(_localctx: XaConvertContext, predIndex: number): boolean {
		switch (predIndex) {
		case 63:
			return this.serverVersion >= 50704;
		}
		return true;
	}
	private replicationStatement_sempred(_localctx: ReplicationStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 64:
			return this.serverVersion > 80000;

		case 65:
			return this.serverVersion >= 50700;

		case 66:
			return this.serverVersion > 50706;
		}
		return true;
	}
	private resetOption_sempred(_localctx: ResetOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 67:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private masterResetOptions_sempred(_localctx: MasterResetOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 68:
			return this.serverVersion >= 80000;

		case 69:
			return this.serverVersion < 80017;

		case 70:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private changeReplication_sempred(_localctx: ChangeReplicationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 71:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private slaveUntilOptions_sempred(_localctx: SlaveUntilOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 72:
			return this.serverVersion >= 50606;

		case 73:
			return this.serverVersion >= 50606;
		}
		return true;
	}
	private slaveConnectionOptions_sempred(_localctx: SlaveConnectionOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 74:
			return this.serverVersion >= 50604;
		}
		return true;
	}
	private cloneStatement_sempred(_localctx: CloneStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 75:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private accountManagementStatement_sempred(_localctx: AccountManagementStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 76:
			return this.serverVersion >= 50606;

		case 77:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private alterUser_sempred(_localctx: AlterUserContext, predIndex: number): boolean {
		switch (predIndex) {
		case 78:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private alterUserTail_sempred(_localctx: AlterUserTailContext, predIndex: number): boolean {
		switch (predIndex) {
		case 79:
			return this.serverVersion < 80014;

		case 80:
			return this.serverVersion >= 80014;

		case 81:
			return this.serverVersion >= 50706;

		case 82:
			return this.serverVersion >= 80014;

		case 83:
			return this.serverVersion >= 80014;

		case 84:
			return this.serverVersion >= 80014;

		case 85:
			return this.serverVersion >= 80000;

		case 86:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private createUser_sempred(_localctx: CreateUserContext, predIndex: number): boolean {
		switch (predIndex) {
		case 87:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private createUserTail_sempred(_localctx: CreateUserTailContext, predIndex: number): boolean {
		switch (predIndex) {
		case 88:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private defaultRoleClause_sempred(_localctx: DefaultRoleClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 89:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private accountLockPasswordExpireOptions_sempred(_localctx: AccountLockPasswordExpireOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 90:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private dropUser_sempred(_localctx: DropUserContext, predIndex: number): boolean {
		switch (predIndex) {
		case 91:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private grant_sempred(_localctx: GrantContext, predIndex: number): boolean {
		switch (predIndex) {
		case 92:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private grantTargetList_sempred(_localctx: GrantTargetListContext, predIndex: number): boolean {
		switch (predIndex) {
		case 93:
			return this.serverVersion < 80011;

		case 94:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private grantOptions_sempred(_localctx: GrantOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 95:
			return this.serverVersion < 80011;

		case 96:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private versionedRequireClause_sempred(_localctx: VersionedRequireClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 97:
			return this.serverVersion < 80011;
		}
		return true;
	}
	private revoke_sempred(_localctx: RevokeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 98:
			return this.serverVersion >= 80000;

		case 99:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private onTypeTo_sempred(_localctx: OnTypeToContext, predIndex: number): boolean {
		switch (predIndex) {
		case 100:
			return this.serverVersion < 80000;

		case 101:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private roleOrPrivilege_sempred(_localctx: RoleOrPrivilegeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 102:
			return this.serverVersion > 80000;

		case 103:
			return this.serverVersion > 80000;
		}
		return true;
	}
	private grantIdentifier_sempred(_localctx: GrantIdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 104:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private tableAdministrationStatement_sempred(_localctx: TableAdministrationStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 105:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private startOptionValueList_sempred(_localctx: StartOptionValueListContext, predIndex: number): boolean {
		switch (predIndex) {
		case 106:
			return this.serverVersion < 50706;

		case 107:
			return this.serverVersion < 80014;

		case 108:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private optionValueNoOptionType_sempred(_localctx: OptionValueNoOptionTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 109:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private setExprOrDefault_sempred(_localctx: SetExprOrDefaultContext, predIndex: number): boolean {
		switch (predIndex) {
		case 110:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private showStatement_sempred(_localctx: ShowStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 111:
			return this.serverVersion < 50700;

		case 112:
			return this.serverVersion >= 80000;

		case 113:
			return this.serverVersion < 50700;

		case 114:
			return this.serverVersion >= 50704;
		}
		return true;
	}
	private showCommandType_sempred(_localctx: ShowCommandTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 115:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private nonBlocking_sempred(_localctx: NonBlockingContext, predIndex: number): boolean {
		switch (predIndex) {
		case 116:
			return this.serverVersion >= 50700 && this.serverVersion < 50706;
		}
		return true;
	}
	private otherAdministrativeStatement_sempred(_localctx: OtherAdministrativeStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 117:
			return this.serverVersion >= 50709;
		}
		return true;
	}
	private flushOption_sempred(_localctx: FlushOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 118:
			return this.serverVersion < 80000;

		case 119:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private flushTablesOptions_sempred(_localctx: FlushTablesOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 120:
			return this.serverVersion >= 50606;
		}
		return true;
	}
	private utilityStatement_sempred(_localctx: UtilityStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 121:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private explainCommand_sempred(_localctx: ExplainCommandContext, predIndex: number): boolean {
		switch (predIndex) {
		case 122:
			return this.serverVersion < 80000;

		case 123:
			return this.serverVersion < 80000;

		case 124:
			return this.serverVersion >= 50605;

		case 125:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private explainableStatement_sempred(_localctx: ExplainableStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 126:
			return this.serverVersion >= 50603;

		case 127:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private expr_sempred(_localctx: ExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 128:
			return this.precpred(this._ctx, 3);

		case 129:
			return this.precpred(this._ctx, 2);

		case 130:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private boolPri_sempred(_localctx: BoolPriContext, predIndex: number): boolean {
		switch (predIndex) {
		case 131:
			return this.precpred(this._ctx, 3);

		case 132:
			return this.precpred(this._ctx, 2);

		case 133:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private predicate_sempred(_localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 134:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private bitExpr_sempred(_localctx: BitExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 135:
			return this.precpred(this._ctx, 7);

		case 136:
			return this.precpred(this._ctx, 6);

		case 137:
			return this.precpred(this._ctx, 5);

		case 138:
			return this.precpred(this._ctx, 3);

		case 139:
			return this.precpred(this._ctx, 2);

		case 140:
			return this.precpred(this._ctx, 1);

		case 141:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private simpleExpr_sempred(_localctx: SimpleExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 142:
			return this.serverVersion >= 80000;

		case 143:
			return this.serverVersion >= 80000;

		case 144:
			return this.precpred(this._ctx, 15);

		case 145:
			return this.precpred(this._ctx, 21);
		}
		return true;
	}
	private arrayCast_sempred(_localctx: ArrayCastContext, predIndex: number): boolean {
		switch (predIndex) {
		case 146:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private jsonOperator_sempred(_localctx: JsonOperatorContext, predIndex: number): boolean {
		switch (predIndex) {
		case 147:
			return this.serverVersion >= 50708;

		case 148:
			return this.serverVersion >= 50713;
		}
		return true;
	}
	private sumExpr_sempred(_localctx: SumExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 149:
			return this.serverVersion >= 80000;

		case 150:
			return this.serverVersion >= 80000;

		case 151:
			return this.serverVersion >= 80000;

		case 152:
			return this.serverVersion >= 80000;

		case 153:
			return this.serverVersion >= 80000;

		case 154:
			return this.serverVersion >= 80000;

		case 155:
			return this.serverVersion >= 80000;

		case 156:
			return this.serverVersion >= 80000;

		case 157:
			return this.serverVersion >= 80000;

		case 158:
			return this.serverVersion >= 80000;

		case 159:
			return this.serverVersion >= 80000;

		case 160:
			return this.serverVersion >= 80000;

		case 161:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private runtimeFunctionCall_sempred(_localctx: RuntimeFunctionCallContext, predIndex: number): boolean {
		switch (predIndex) {
		case 162:
			return this.serverVersion < 50607;

		case 163:
			return this.serverVersion < 80011;

		case 164:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private geometryFunction_sempred(_localctx: GeometryFunctionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 165:
			return this.serverVersion < 50706;
		}
		return true;
	}
	private fractionalPrecision_sempred(_localctx: FractionalPrecisionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 166:
			return this.serverVersion >= 50604;
		}
		return true;
	}
	private internalVariableName_sempred(_localctx: InternalVariableNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 167:
			return this.serverVersion < 80017;

		case 168:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private castType_sempred(_localctx: CastTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 169:
			return this.serverVersion >= 50708;

		case 170:
			return this.serverVersion >= 80017;

		case 171:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private channel_sempred(_localctx: ChannelContext, predIndex: number): boolean {
		switch (predIndex) {
		case 172:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private getDiagnostics_sempred(_localctx: GetDiagnosticsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 173:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private checkOrReferences_sempred(_localctx: CheckOrReferencesContext, predIndex: number): boolean {
		switch (predIndex) {
		case 174:
			return this.serverVersion < 80016;
		}
		return true;
	}
	private tableConstraintDef_sempred(_localctx: TableConstraintDefContext, predIndex: number): boolean {
		switch (predIndex) {
		case 175:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private fieldDefinition_sempred(_localctx: FieldDefinitionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 176:
			return this.serverVersion >= 50707;

		case 177:
			return this.serverVersion < 80000;

		case 178:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private columnAttribute_sempred(_localctx: ColumnAttributeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 179:
			return this.serverVersion >= 80014;

		case 180:
			return this.serverVersion >= 80013;

		case 181:
			return this.serverVersion >= 80000;

		case 182:
			return this.serverVersion >= 80017;

		case 183:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private keyListVariants_sempred(_localctx: KeyListVariantsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 184:
			return this.serverVersion >= 80013;

		case 185:
			return this.serverVersion < 80013;
		}
		return true;
	}
	private commonIndexOption_sempred(_localctx: CommonIndexOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 186:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private dataType_sempred(_localctx: DataTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 187:
			return this.serverVersion >= 50708;
		}
		return true;
	}
	private charsetName_sempred(_localctx: CharsetNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 188:
			return this.serverVersion < 80011;
		}
		return true;
	}
	private collationName_sempred(_localctx: CollationNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 189:
			return this.serverVersion < 80011;

		case 190:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private createTableOption_sempred(_localctx: CreateTableOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 191:
			return this.serverVersion >= 80014;

		case 192:
			return this.serverVersion >= 50708;

		case 193:
			return this.serverVersion >= 50711;

		case 194:
			return this.serverVersion >= 50707;
		}
		return true;
	}
	private partitionKeyAlgorithm_sempred(_localctx: PartitionKeyAlgorithmContext, predIndex: number): boolean {
		switch (predIndex) {
		case 195:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private createUserEntry_sempred(_localctx: CreateUserEntryContext, predIndex: number): boolean {
		switch (predIndex) {
		case 196:
			return this.serverVersion < 80011;

		case 197:
			return this.serverVersion >= 50706;

		case 198:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private usePartition_sempred(_localctx: UsePartitionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 199:
			return this.serverVersion >= 50602;
		}
		return true;
	}
	private columnName_sempred(_localctx: ColumnNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 200:
			return this.serverVersion >= 80000;

		case 201:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private pureIdentifier_sempred(_localctx: PureIdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 202:
			return this.isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private simpleIdentifier_sempred(_localctx: SimpleIdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 203:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private real_ulonglong_number_sempred(_localctx: Real_ulonglong_numberContext, predIndex: number): boolean {
		switch (predIndex) {
		case 204:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private textStringLiteral_sempred(_localctx: TextStringLiteralContext, predIndex: number): boolean {
		switch (predIndex) {
		case 205:
			return !this.isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private textStringHash_sempred(_localctx: TextStringHashContext, predIndex: number): boolean {
		switch (predIndex) {
		case 206:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private identifierKeyword_sempred(_localctx: IdentifierKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 207:
			return this.serverVersion < 80017;

		case 208:
			return this.serverVersion >= 50709;

		case 209:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private labelKeyword_sempred(_localctx: LabelKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 210:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private roleKeyword_sempred(_localctx: RoleKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 211:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private roleOrIdentifierKeyword_sempred(_localctx: RoleOrIdentifierKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 212:
			return this.serverVersion >= 50709;

		case 213:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private roleOrLabelKeyword_sempred(_localctx: RoleOrLabelKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 214:
			return this.serverVersion < 50709;

		case 215:
			return this.serverVersion < 80000;

		case 216:
			return this.serverVersion >= 80000;

		case 217:
			return this.serverVersion >= 80014;
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 16;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0311\u20AB\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
		"\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
		"\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
		"\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
		"\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
		"\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
		"\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
		"\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
		"\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
		"\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
		"\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
		"\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
		"\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
		"\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
		"\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
		"\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
		"\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
		"\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
		"\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
		"\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
		"\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
		"\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
		"\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
		"\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
		"\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
		"\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2\x04" +
		"\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6\x04" +
		"\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA\x04" +
		"\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE\x04" +
		"\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2\x04" +
		"\u01F3\t\u01F3\x04\u01F4\t\u01F4\x04\u01F5\t\u01F5\x04\u01F6\t\u01F6\x04" +
		"\u01F7\t\u01F7\x04\u01F8\t\u01F8\x04\u01F9\t\u01F9\x04\u01FA\t\u01FA\x04" +
		"\u01FB\t\u01FB\x04\u01FC\t\u01FC\x04\u01FD\t\u01FD\x04\u01FE\t\u01FE\x04" +
		"\u01FF\t\u01FF\x04\u0200\t\u0200\x04\u0201\t\u0201\x04\u0202\t\u0202\x04" +
		"\u0203\t\u0203\x04\u0204\t\u0204\x04\u0205\t\u0205\x04\u0206\t\u0206\x04" +
		"\u0207\t\u0207\x04\u0208\t\u0208\x04\u0209\t\u0209\x04\u020A\t\u020A\x04" +
		"\u020B\t\u020B\x04\u020C\t\u020C\x04\u020D\t\u020D\x04\u020E\t\u020E\x04" +
		"\u020F\t\u020F\x04\u0210\t\u0210\x04\u0211\t\u0211\x04\u0212\t\u0212\x04" +
		"\u0213\t\u0213\x04\u0214\t\u0214\x04\u0215\t\u0215\x04\u0216\t\u0216\x04" +
		"\u0217\t\u0217\x04\u0218\t\u0218\x04\u0219\t\u0219\x04\u021A\t\u021A\x04" +
		"\u021B\t\u021B\x04\u021C\t\u021C\x04\u021D\t\u021D\x04\u021E\t\u021E\x04" +
		"\u021F\t\u021F\x04\u0220\t\u0220\x04\u0221\t\u0221\x04\u0222\t\u0222\x04" +
		"\u0223\t\u0223\x04\u0224\t\u0224\x04\u0225\t\u0225\x04\u0226\t\u0226\x04" +
		"\u0227\t\u0227\x04\u0228\t\u0228\x04\u0229\t\u0229\x04\u022A\t\u022A\x04" +
		"\u022B\t\u022B\x04\u022C\t\u022C\x04\u022D\t\u022D\x04\u022E\t\u022E\x04" +
		"\u022F\t\u022F\x04\u0230\t\u0230\x04\u0231\t\u0231\x04\u0232\t\u0232\x04" +
		"\u0233\t\u0233\x04\u0234\t\u0234\x04\u0235\t\u0235\x04\u0236\t\u0236\x04" +
		"\u0237\t\u0237\x04\u0238\t\u0238\x04\u0239\t\u0239\x04\u023A\t\u023A\x04" +
		"\u023B\t\u023B\x04\u023C\t\u023C\x04\u023D\t\u023D\x04\u023E\t\u023E\x04" +
		"\u023F\t\u023F\x04\u0240\t\u0240\x04\u0241\t\u0241\x04\u0242\t\u0242\x04" +
		"\u0243\t\u0243\x04\u0244\t\u0244\x04\u0245\t\u0245\x04\u0246\t\u0246\x04" +
		"\u0247\t\u0247\x04\u0248\t\u0248\x04\u0249\t\u0249\x04\u024A\t\u024A\x04" +
		"\u024B\t\u024B\x04\u024C\t\u024C\x04\u024D\t\u024D\x04\u024E\t\u024E\x04" +
		"\u024F\t\u024F\x04\u0250\t\u0250\x04\u0251\t\u0251\x04\u0252\t\u0252\x04" +
		"\u0253\t\u0253\x04\u0254\t\u0254\x04\u0255\t\u0255\x04\u0256\t\u0256\x04" +
		"\u0257\t\u0257\x04\u0258\t\u0258\x04\u0259\t\u0259\x04\u025A\t\u025A\x04" +
		"\u025B\t\u025B\x04\u025C\t\u025C\x04\u025D\t\u025D\x04\u025E\t\u025E\x04" +
		"\u025F\t\u025F\x03\x02\x07\x02\u04C0\n\x02\f\x02\x0E\x02\u04C3\v\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x05\x03\u04C9\n\x03\x03\x03\x05\x03\u04CC" +
		"\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04" +
		"\u04F0\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u04F8" +
		"\n\x05\x03\x05\x03\x05\x03\x05\x05\x05\u04FD\n\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x05\x05\u050D\n\x05\x03\x06\x03\x06\x03\x06\x06\x06" +
		"\u0512\n\x06\r\x06\x0E\x06\u0513\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x05\x06\u051B\n\x06\x03\x07\x05\x07\u051E\n\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x05\x07\u0525\n\x07\x03\x07\x03\x07\x03\x07\x05\x07\u052A" +
		"\n\x07\x03\x07\x05\x07\u052D\n\x07\x03\x07\x03\x07\x03\x07\x05\x07\u0532" +
		"\n\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u0538\n\x07\x05\x07\u053A" +
		"\n\x07\x03\x07\x03\x07\x05\x07\u053E\n\x07\x03\x07\x03\x07\x05\x07\u0542" +
		"\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u054B\n\b\x03\t" +
		"\x03\t\x05\t\u054F\n\t\x03\t\x07\t\u0552\n\t\f\t\x0E\t\u0555\v\t\x03\n" +
		"\x03\n\x03\n\x05\n\u055A\n\n\x03\v\x03\v\x03\v\x03\v\x03\f\x05\f\u0561" +
		"\n\f\x03\f\x03\f\x05\f\u0565\n\f\x03\f\x03\f\x03\f\x05\f\u056A\n\f\x03" +
		"\r\x03\r\x03\r\x05\r\u056F\n\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\u0576" +
		"\n\r\x03\r\x05\r\u0579\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u057F" +
		"\n\x0E\x03\x0E\x05\x0E\u0582\n\x0E\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u0587" +
		"\n\x0F\f\x0F\x0E\x0F\u058A\v\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x05\x10\u0593\n\x10\x03\x11\x03\x11\x03\x11\x05\x11\u0598" +
		"\n\x11\x03\x11\x03\x11\x03\x11\x05\x11\u059D\n\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x05\x11\u05A5\n\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x05\x11\u05AB\n\x11\x03\x11\x03\x11\x05\x11\u05AF\n\x11\x03\x11" +
		"\x03\x11\x03\x11\x05\x11\u05B4\n\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x07\x11\u05BB\n\x11\f\x11\x0E\x11\u05BE\v\x11\x03\x11\x03\x11\x03" +
		"\x11\x05\x11\u05C3\n\x11\x03\x11\x03\x11\x07\x11\u05C7\n\x11\f\x11\x0E" +
		"\x11\u05CA\v\x11\x03\x11\x03\x11\x03\x11\x05\x11\u05CF\n\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u05D9\n\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u05DF\n\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u05E8\n\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x05\x11\u05F6\n\x11\x03\x12\x03\x12\x05\x12\u05FA\n\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x05\x12\u0600\n\x12\x07\x12\u0602\n\x12\f\x12" +
		"\x0E\x12\u0605\v\x12\x03\x13\x03\x13\x03\x13\x05\x13\u060A\n\x13\x03\x14" +
		"\x03\x14\x05\x14\u060E\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0613\n\x14" +
		"\x03\x14\x05\x14\u0616\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u061C" +
		"\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0622\n\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x05\x14\u0628\n\x14\x03\x14\x03\x14\x05\x14\u062C" +
		"\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0631\n\x14\x03\x14\x03\x14\x05" +
		"\x14\u0635\n\x14\x03\x14\x03\x14\x05\x14\u0639\n\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0641\n\x14\x05\x14\u0643\n\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u064A\n\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0652\n\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x05\x14\u065A\n\x14\x03\x14\x03\x14\x05\x14" +
		"\u065E\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0675\n\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x05\x14\u0685\n\x14\x03\x14\x05\x14\u0688\n\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0691" +
		"\n\x14\x03\x15\x03\x15\x03\x15\x05\x15\u0696\n\x15\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x05\x17\u069C\n\x17\x03\x17\x03\x17\x03\x17\x05\x17\u06A1" +
		"\n\x17\x07\x17\u06A3\n\x17\f\x17\x0E\x17\u06A6\v\x17\x03\x18\x03\x18\x05" +
		"\x18\u06AA\n\x18\x03\x18\x03\x18\x05\x18\u06AE\n\x18\x03\x19\x03\x19\x05" +
		"\x19\u06B2\n\x19\x03\x19\x03\x19\x05\x19\u06B6\n\x19\x03\x1A\x03\x1A\x05" +
		"\x1A\u06BA\n\x1A\x03\x1A\x03\x1A\x05\x1A\u06BE\n\x1A\x05\x1A\u06C0\n\x1A" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
		"\x05\x1D\u06CB\n\x1D\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u06D0\n\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u06D6\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x03\x1F\x05\x1F\u06DE\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u06E7\n\x1F\x03\x1F\x07\x1F\u06EA\n\x1F" +
		"\f\x1F\x0E\x1F\u06ED\v\x1F\x05\x1F\u06EF\n\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x05\x1F\u06F4\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u06FB" +
		"\n\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x05 \u0703\n \x03!\x03!\x05!\u0707" +
		"\n!\x03!\x07!\u070A\n!\f!\x0E!\u070D\v!\x03\"\x03\"\x03#\x03#\x05#\u0713" +
		"\n#\x03#\x07#\u0716\n#\f#\x0E#\u0719\v#\x03$\x03$\x05$\u071D\n$\x03$\x03" +
		"$\x03$\x03$\x03$\x03$\x05$\u0725\n$\x03%\x03%\x05%\u0729\n%\x03%\x03%" +
		"\x03%\x05%\u072E\n%\x03&\x05&\u0731\n&\x03&\x05&\u0734\n&\x03&\x05&\u0737" +
		"\n&\x03&\x03&\x03&\x03&\x03\'\x05\'\u073E\n\'\x03\'\x03\'\x03\'\x03(\x03" +
		"(\x05(\u0745\n(\x03)\x03)\x05)\u0749\n)\x03)\x03)\x03)\x03*\x03*\x03*" +
		"\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03" +
		"*\x03*\x03*\x05*\u0761\n*\x03+\x03+\x05+\u0765\n+\x03+\x03+\x07+\u0769" +
		"\n+\f+\x0E+\u076C\v+\x03,\x03,\x03,\x03,\x05,\u0772\n,\x03-\x05-\u0775" +
		"\n-\x03-\x03-\x05-\u0779\n-\x03-\x03-\x03-\x03-\x03-\x05-\u0780\n-\x03" +
		"-\x05-\u0783\n-\x03-\x05-\u0786\n-\x03-\x05-\u0789\n-\x03-\x03-\x03-\x03" +
		"-\x03-\x03-\x03-\x05-\u0792\n-\x03.\x03.\x03.\x07.\u0797\n.\f.\x0E.\u079A" +
		"\v.\x03/\x03/\x05/\u079E\n/\x030\x050\u07A1\n0\x030\x050\u07A4\n0\x03" +
		"0\x030\x031\x031\x051\u07AA\n1\x032\x032\x032\x032\x052\u07B0\n2\x032" +
		"\x052\u07B3\n2\x032\x032\x033\x053\u07B8\n3\x033\x033\x033\x033\x033\x03" +
		"3\x073\u07C0\n3\f3\x0E3\u07C3\v3\x053\u07C5\n3\x033\x033\x073\u07C9\n" +
		"3\f3\x0E3\u07CC\v3\x033\x033\x034\x054\u07D1\n4\x034\x034\x034\x034\x03" +
		"4\x034\x074\u07D9\n4\f4\x0E4\u07DC\v4\x054\u07DE\n4\x034\x034\x034\x03" +
		"4\x074\u07E4\n4\f4\x0E4\u07E7\v4\x034\x034\x035\x055\u07EC\n5\x035\x03" +
		"5\x035\x035\x035\x035\x035\x036\x036\x056\u07F7\n6\x036\x056\u07FA\n6" +
		"\x037\x067\u07FD\n7\r7\x0E7\u07FE\x038\x038\x038\x038\x038\x038\x038\x03" +
		"8\x038\x038\x038\x038\x038\x038\x038\x038\x038\x058\u0812\n8\x039\x05" +
		"9\u0815\n9\x039\x059\u0818\n9\x039\x039\x039\x039\x059\u081E\n9\x039\x05" +
		"9\u0821\n9\x059\u0823\n9\x039\x039\x079\u0827\n9\f9\x0E9\u082A\v9\x03" +
		"9\x039\x039\x039\x039\x079\u0831\n9\f9\x0E9\u0834\v9\x039\x039\x039\x03" +
		"9\x039\x079\u083B\n9\f9\x0E9\u083E\v9\x059\u0840\n9\x039\x059\u0843\n" +
		"9\x03:\x03:\x03:\x05:\u0848\n:\x03:\x03:\x03:\x03:\x05:\u084E\n:\x03;" +
		"\x03;\x03;\x03;\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x05<\u085B\n<\x03=" +
		"\x03=\x05=\u085F\n=\x03=\x07=\u0862\n=\f=\x0E=\u0865\v=\x03>\x03>\x03" +
		">\x03>\x03>\x03>\x05>\u086D\n>\x03?\x03?\x03?\x03?\x03?\x03?\x03?\x03" +
		"?\x03@\x03@\x03@\x03@\x03@\x07@\u087C\n@\f@\x0E@\u087F\v@\x03@\x03@\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05" +
		"A\u0891\nA\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x05B\u089A\nB\x03B\x05B" +
		"\u089D\nB\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u08A5\nC\x03D\x03D\x03D\x05" +
		"D\u08AA\nD\x03D\x03D\x05D\u08AE\nD\x03E\x03E\x03E\x03F\x03F\x05F\u08B5" +
		"\nF\x03F\x07F\u08B8\nF\fF\x0EF\u08BB\vF\x03G\x03G\x03G\x03G\x03G\x03G" +
		"\x03G\x03G\x03G\x03G\x03G\x03G\x05G\u08C9\nG\x03H\x03H\x05H\u08CD\nH\x03" +
		"H\x03H\x03I\x03I\x05I\u08D3\nI\x03I\x03I\x03J\x03J\x05J\u08D9\nJ\x03J" +
		"\x03J\x03K\x03K\x05K\u08DF\nK\x03K\x03K\x03L\x03L\x05L\u08E5\nL\x03L\x03" +
		"L\x03M\x03M\x05M\u08EB\nM\x03M\x03M\x03N\x05N\u08F0\nN\x03N\x03N\x05N" +
		"\u08F4\nN\x03N\x03N\x03O\x03O\x03P\x03P\x05P\u08FC\nP\x03P\x03P\x03Q\x03" +
		"Q\x05Q\u0902\nQ\x03Q\x03Q\x03R\x03R\x05R\u0908\nR\x03R\x03R\x03S\x05S" +
		"\u090D\nS\x03S\x05S\u0910\nS\x03S\x05S\u0913\nS\x03S\x03S\x03S\x03S\x03" +
		"T\x03T\x03T\x05T\u091C\nT\x03T\x05T\u091F\nT\x03U\x03U\x03U\x03U\x03V" +
		"\x03V\x03V\x03V\x03W\x05W\u092A\nW\x03W\x03W\x03W\x03W\x03W\x03W\x03W" +
		"\x03W\x03W\x03W\x05W\u0936\nW\x03W\x03W\x03X\x03X\x03X\x03X\x03Y\x05Y" +
		"\u093F\nY\x03Y\x03Y\x05Y\u0943\nY\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x05" +
		"Y\u094C\nY\x03Y\x05Y\u094F\nY\x03Y\x03Y\x03Y\x03Y\x05Y\u0955\nY\x05Y\u0957";
	private static readonly _serializedATNSegment1: string =
		"\nY\x03Y\x03Y\x05Y\u095B\nY\x03Y\x03Y\x03Y\x03Z\x03Z\x05Z\u0962\nZ\x03" +
		"Z\x03Z\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x07[\u096D\n[\f[\x0E[\u0970" +
		"\v[\x03[\x03[\x03[\x03[\x05[\u0976\n[\x03[\x03[\x07[\u097A\n[\f[\x0E[" +
		"\u097D\v[\x05[\u097F\n[\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03" +
		"\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x05\\\u0990\n\\\x03]\x03" +
		"]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03" +
		"]\x03]\x03]\x05]\u09A4\n]\x03^\x03^\x05^\u09A8\n^\x03^\x03^\x03_\x03_" +
		"\x05_\u09AE\n_\x03_\x03_\x03`\x03`\x05`\u09B4\n`\x03`\x03`\x03a\x03a\x05" +
		"a\u09BA\na\x03a\x03a\x03b\x05b\u09BF\nb\x03b\x03b\x03b\x03b\x03b\x05b" +
		"\u09C6\nb\x03c\x03c\x03c\x03c\x03c\x05c\u09CD\nc\x03c\x07c\u09D0\nc\f" +
		"c\x0Ec\u09D3\vc\x05c\u09D5\nc\x03d\x03d\x05d\u09D9\nd\x03e\x03e\x05e\u09DD" +
		"\ne\x03e\x03e\x03f\x05f\u09E2\nf\x03f\x03f\x05f\u09E6\nf\x03f\x03f\x05" +
		"f\u09EA\nf\x03g\x03g\x03g\x03g\x05g\u09F0\ng\x03g\x07g\u09F3\ng\fg\x0E" +
		"g\u09F6\vg\x05g\u09F8\ng\x03h\x03h\x05h\u09FC\nh\x03h\x03h\x03i\x03i\x05" +
		"i\u0A02\ni\x03i\x03i\x05i\u0A06\ni\x03j\x03j\x05j\u0A0A\nj\x03j\x03j\x03" +
		"k\x03k\x03k\x03k\x05k\u0A12\nk\x03k\x03k\x03l\x03l\x03l\x03l\x05l\u0A1A" +
		"\nl\x03m\x03m\x03m\x03m\x03m\x07m\u0A21\nm\fm\x0Em\u0A24\vm\x03n\x03n" +
		"\x03n\x03n\x03o\x03o\x05o\u0A2C\no\x03o\x03o\x03p\x03p\x03p\x03p\x03p" +
		"\x03q\x03q\x03q\x03q\x05q\u0A39\nq\x03q\x05q\u0A3C\nq\x03r\x03r\x05r\u0A40" +
		"\nr\x03r\x03r\x07r\u0A44\nr\fr\x0Er\u0A47\vr\x03r\x03r\x03r\x03r\x03r" +
		"\x05r\u0A4E\nr\x03r\x03r\x03r\x05r\u0A53\nr\x03r\x05r\u0A56\nr\x03r\x05" +
		"r\u0A59\nr\x03r\x05r\u0A5C\nr\x03r\x05r\u0A5F\nr\x05r\u0A61\nr\x03r\x03" +
		"r\x03r\x03r\x05r\u0A67\nr\x05r\u0A69\nr\x03s\x03s\x03s\x03s\x03s\x03s" +
		"\x03t\x03t\x03u\x03u\x03u\x03u\x03u\x05u\u0A78\nu\x03v\x03v\x03v\x03v" +
		"\x05v\u0A7E\nv\x03v\x03v\x03v\x03v\x03v\x05v\u0A85\nv\x03v\x05v\u0A88" +
		"\nv\x05v\u0A8A\nv\x05v\u0A8C\nv\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03" +
		"w\x05w\u0A96\nw\x05w\u0A98\nw\x03x\x03x\x05x\u0A9C\nx\x03x\x05x\u0A9F" +
		"\nx\x03x\x05x\u0AA2\nx\x03x\x03x\x05x\u0AA6\nx\x03x\x03x\x03x\x05x\u0AAB" +
		"\nx\x03x\x03x\x03x\x03x\x05x\u0AB1\nx\x03x\x05x\u0AB4\nx\x03x\x05x\u0AB7" +
		"\nx\x03y\x03y\x03z\x03z\x05z\u0ABD\nz\x03z\x05z\u0AC0\nz\x03z\x03z\x03" +
		"{\x03{\x03{\x07{\u0AC7\n{\f{\x0E{\u0ACA\v{\x03|\x03|\x03|\x03}\x03}\x03" +
		"}\x05}\u0AD2\n}\x03}\x03}\x05}\u0AD6\n}\x03~\x03~\x05~\u0ADA\n~\x03~\x03" +
		"~\x03~\x03~\x05~\u0AE0\n~\x03~\x07~\u0AE3\n~\f~\x0E~\u0AE6\v~\x03\x7F" +
		"\x03\x7F\x05\x7F\u0AEA\n\x7F\x03\x7F\x03\x7F\x03\x7F\x05\x7F\u0AEF\n\x7F" +
		"\x07\x7F\u0AF1\n\x7F\f\x7F\x0E\x7F\u0AF4\v\x7F\x03\x80\x03\x80\x03\x80" +
		"\x05\x80\u0AF9\n\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
		"\x82\x03\x82\x03\x82\x05\x82\u0B04\n\x82\x03\x82\x05\x82\u0B07\n\x82\x03" +
		"\x82\x03\x82\x03\x82\x05\x82\u0B0C\n\x82\x03\x82\x03\x82\x03\x82\x03\x82" +
		"\x05\x82\u0B12\n\x82\x03\x82\x05\x82\u0B15\n\x82\x03\x82\x05\x82\u0B18" +
		"\n\x82\x03\x82\x05\x82\u0B1B\n\x82\x03\x82\x05\x82\u0B1E\n\x82\x03\x82" +
		"\x03\x82\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x85" +
		"\x03\x85\x03\x85\x05\x85\u0B2C\n\x85\x03\x85\x05\x85\u0B2F\n\x85\x03\x85" +
		"\x03\x85\x05\x85\u0B33\n\x85\x03\x86\x03\x86\x05\x86\u0B37\n\x86\x03\x86" +
		"\x03\x86\x03\x87\x03\x87\x05\x87\u0B3D\n\x87\x03\x87\x03\x87\x03\x87\x05" +
		"\x87\u0B42\n\x87\x07\x87\u0B44\n\x87\f\x87\x0E\x87\u0B47\v\x87\x03\x88" +
		"\x03\x88\x05\x88\u0B4B\n\x88\x03\x88\x05\x88\u0B4E\n\x88\x03\x88\x03\x88" +
		"\x05\x88\u0B52\n\x88\x03\x88\x03\x88\x03\x88\x03\x88\x05\x88\u0B58\n\x88" +
		"\x03\x89\x03\x89\x03\x89\x05\x89\u0B5D\n\x89\x03\x8A\x03\x8A\x03\x8A\x03" +
		"\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0B66\n\x8A\x03\x8B\x03\x8B\x05\x8B" +
		"\u0B6A\n\x8B\x03\x8B\x03\x8B\x05\x8B\u0B6E\n\x8B\x03\x8B\x05\x8B\u0B71" +
		"\n\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0B76\n\x8B\x03\x8B\x05\x8B\u0B79" +
		"\n\x8B\x05\x8B\u0B7B\n\x8B\x03\x8B\x03\x8B\x05\x8B\u0B7F\n\x8B\x03\x8B" +
		"\x05\x8B\u0B82\n\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0B88\n\x8B" +
		"\x05\x8B\u0B8A\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u0B91" +
		"\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0B95\n\x8C\x05\x8C\u0B97\n\x8C\x03\x8C" +
		"\x03\x8C\x03\x8C\x05\x8C\u0B9C\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0BA0\n\x8C" +
		"\x07\x8C\u0BA2\n\x8C\f\x8C\x0E\x8C\u0BA5\v\x8C\x03\x8D\x03\x8D\x03\x8D" +
		"\x05\x8D\u0BAA\n\x8D\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x07\x8E\u0BB0\n\x8E" +
		"\f\x8E\x0E\x8E\u0BB3\v\x8E\x03\x8E\x03\x8E\x05\x8E\u0BB7\n\x8E\x03\x8E" +
		"\x05\x8E\u0BBA\n\x8E\x03\x8E\x05\x8E\u0BBD\n\x8E\x03\x8E\x05\x8E\u0BC0" +
		"\n\x8E\x03\x8E\x05\x8E\u0BC3\n\x8E\x03\x8E\x03\x8E\x05\x8E\u0BC7\n\x8E" +
		"\x03\x8F\x03\x8F\x03\x90\x03\x90\x03\x91\x03\x91\x03\x91\x03\x92\x03\x92" +
		"\x03\x92\x03\x93\x03\x93\x03\x93\x05\x93\u0BD6\n\x93\x03\x94\x03\x94\x05" +
		"\x94\u0BDA\n\x94\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0BE0\n\x95\x03" +
		"\x95\x05\x95\u0BE3\n\x95\x03\x95\x05\x95\u0BE6\n\x95\x03\x95\x03\x95\x03" +
		"\x95\x03\x95\x05\x95\u0BEC\n\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0BF1" +
		"\n\x95\x07\x95\u0BF3\n\x95\f\x95\x0E\x95\u0BF6\v\x95\x05\x95\u0BF8\n\x95" +
		"\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0C00\n\x96\x05" +
		"\x96\u0C02\n\x96\x03\x96\x03\x96\x03\x97\x03\x97\x03\x97\x03\x98\x03\x98" +
		"\x03\x98\x03\x98\x07\x98\u0C0D\n\x98\f\x98\x0E\x98\u0C10\v\x98\x03\x99" +
		"\x03\x99\x03\x99\x03\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9B\x05\x9B" +
		"\u0C1B\n\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0C20\n\x9B\x03\x9B\x05\x9B" +
		"\u0C23\n\x9B\x03\x9B\x05\x9B\u0C26\n\x9B\x03\x9C\x03\x9C\x03\x9C\x05\x9C" +
		"\u0C2B\n\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x05\x9E\u0C31\n\x9E\x03\x9F" +
		"\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0C41\n\x9F\x03\xA0\x03\xA0\x03" +
		"\xA0\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03" +
		"\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0C55\n\xA1" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0C5E" +
		"\n\xA2\x03\xA3\x03\xA3\x05\xA3\u0C62\n\xA3\x03\xA3\x03\xA3\x03\xA3\x07" +
		"\xA3\u0C67\n\xA3\f\xA3\x0E\xA3\u0C6A\v\xA3\x03\xA4\x03\xA4\x05\xA4\u0C6E" +
		"\n\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5" +
		"\u0C77\n\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0C7E\n\xA6" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA9\x03\xA9\x03\xA9" +
		"\x05\xA9\u0C89\n\xA9\x03\xAA\x03\xAA\x03\xAA\x07\xAA\u0C8E\n\xAA\f\xAA" +
		"\x0E\xAA\u0C91\v\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03" +
		"\xAB\x03\xAB\x05\xAB\u0C9B\n\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC" +
		"\x05\xAC\u0CA2\n\xAC\x03\xAC\x03\xAC\x05\xAC\u0CA6\n\xAC\x03\xAC\x03\xAC" +
		"\x03\xAC\x03\xAC\x05\xAC\u0CAC\n\xAC\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0CB1" +
		"\n\xAD\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u0CB6\n\xAE\x03\xAF\x03\xAF\x05" +
		"\xAF\u0CBA\n\xAF\x03\xAF\x03\xAF\x07\xAF\u0CBE\n\xAF\f\xAF\x0E\xAF\u0CC1" +
		"\v\xAF\x03\xB0\x03\xB0\x03\xB0\x05\xB0\u0CC6\n\xB0\x05\xB0\u0CC8\n\xB0" +
		"\x03\xB1\x05\xB1\u0CCB\n\xB1\x03\xB1\x03\xB1\x05\xB1\u0CCF\n\xB1\x03\xB2" +
		"\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u0CD9" +
		"\n\xB3\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u0CDE\n\xB3\x03\xB3\x07\xB3\u0CE1" +
		"\n\xB3\f\xB3\x0E\xB3\u0CE4\v\xB3\x03\xB4\x03\xB4\x07\xB4\u0CE8\n\xB4\f" +
		"\xB4\x0E\xB4\u0CEB\v\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5" +
		"\x05\xB5\u0CF3\n\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05" +
		"\xB5\u0CFB\n\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0D00\n\xB5\x03\xB6\x03" +
		"\xB6\x05\xB6\u0D04\n\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x05\xB6\u0D0A" +
		"\n\xB6\x03\xB6\x05\xB6\u0D0D\n\xB6\x03\xB7\x05\xB7\u0D10\n\xB7\x03\xB7" +
		"\x03\xB7\x05\xB7\u0D14\n\xB7\x03\xB8\x03\xB8\x05\xB8\u0D18\n\xB8\x03\xB8" +
		"\x03\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u0D22" +
		"\n\xB9\x03\xBA\x03\xBA\x05\xBA\u0D26\n\xBA\x03\xBA\x05\xBA\u0D29\n\xBA" +
		"\x03\xBA\x05\xBA\u0D2C\n\xBA\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0D31\n\xBB" +
		"\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x05\xBC\u0D37\n\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u0D3B\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0D41\n\xBC\x03" +
		"\xBC\x05\xBC\u0D44\n\xBC\x05\xBC\u0D46\n\xBC\x03\xBD\x03\xBD\x03\xBD\x05" +
		"\xBD\u0D4B\n\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE" +
		"\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u0D57\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03" +
		"\xBF\x03\xBF\x07\xBF\u0D5E\n\xBF\f\xBF\x0E\xBF\u0D61\v\xBF\x03\xBF\x03" +
		"\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x05" +
		"\xC0\u0D6D\n\xC0\x03\xC0\x05\xC0\u0D70\n\xC0\x03\xC0\x03\xC0\x03\xC0\x05" +
		"\xC0\u0D75\n\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0D7C" +
		"\n\xC0\x03\xC1\x03\xC1\x05\xC1\u0D80\n\xC1\x03\xC1\x03\xC1\x05\xC1\u0D84" +
		"\n\xC1\x05\xC1\u0D86\n\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC3\x03" +
		"\xC3\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u0D94\n\xC4" +
		"\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC6\x05\xC6\u0D9B\n\xC6\x03\xC6\x03" +
		"\xC6\x03\xC7\x03\xC7\x03\xC7\x07\xC7\u0DA2\n\xC7\f\xC7\x0E\xC7\u0DA5\v" +
		"\xC7\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u0DAA\n\xC8\x03\xC8\x03\xC8\x03\xC8" +
		"\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u0DB3\n\xC8\x03\xC8\x03\xC8\x05" +
		"\xC8\u0DB7\n\xC8\x03\xC8\x03\xC8\x05\xC8\u0DBB\n\xC8\x03\xC9\x03\xC9\x03" +
		"\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0DC5\n\xCB\x05\xCB" +
		"\u0DC7\n\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u0DCF" +
		"\n\xCC\x03\xCD\x03\xCD\x03\xCD\x07\xCD\u0DD4\n\xCD\f\xCD\x0E\xCD\u0DD7" +
		"\v\xCD\x03\xCE\x03\xCE\x05\xCE\u0DDB\n\xCE\x03\xCF\x03\xCF\x05\xCF\u0DDF" +
		"\n\xCF\x03\xCF\x03\xCF\x05\xCF\u0DE3\n\xCF\x03\xCF\x05\xCF\u0DE6\n\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0DEC\n\xCF\x03\xCF\x05\xCF\u0DEF" +
		"\n\xCF\x03\xCF\x05\xCF\u0DF2\n\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x05" +
		"\xD0\u0DF8\n\xD0\x03\xD1\x03\xD1\x03\xD1\x07\xD1\u0DFD\n\xD1\f\xD1\x0E" +
		"\xD1\u0E00\v\xD1\x03\xD1\x03\xD1\x05\xD1\u0E04\n\xD1\x03\xD1\x03\xD1\x05" +
		"\xD1\u0E08\n\xD1\x03\xD1\x05\xD1\u0E0B\n\xD1\x03\xD1\x05\xD1\u0E0E\n\xD1" +
		"\x03\xD1\x05\xD1\u0E11\n\xD1\x05\xD1\u0E13\n\xD1\x03\xD2\x03\xD2\x05\xD2" +
		"\u0E17\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0E1F" +
		"\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0E25\n\xD4\x03\xD4\x03" +
		"\xD4\x05\xD4\u0E29\n\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0E2E\n\xD4\x03" +
		"\xD4\x05\xD4\u0E31\n\xD4\x03\xD4\x05\xD4\u0E34\n\xD4\x03\xD4\x05\xD4\u0E37" +
		"\n\xD4\x05\xD4\u0E39\n\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0E3E\n\xD4" +
		"\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5\u0E45\n\xD5\f\xD5\x0E" +
		"\xD5\u0E48\v\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5" +
		"\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u0E54\n\xD5\x05\xD5\u0E56\n\xD5\x03\xD6" +
		"\x03\xD6\x05\xD6\u0E5A\n\xD6\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x05\xD7\u0E60" +
		"\n\xD7\x03\xD7\x05\xD7\u0E63\n\xD7\x03\xD7\x05\xD7\u0E66\n\xD7\x03\xD8" +
		"\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0E6C\n\xD8\x03\xD8\x03\xD8\x03\xD8\x03" +
		"\xD8\x03\xD8\x05\xD8\u0E73\n\xD8\x05\xD8\u0E75\n\xD8\x03\xD8\x03\xD8\x03" +
		"\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0E7D\n\xD8\x03\xD8\x03\xD8\x03\xD8" +
		"\x03\xD8\x05\xD8\u0E83\n\xD8\x03\xD9\x03\xD9\x03\xD9\x05\xD9\u0E88\n\xD9" +
		"\x03\xD9\x05\xD9\u0E8B\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05" +
		"\xDA\u0E92\n\xDA\x05\xDA\u0E94\n\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x03\xDB\x03\xDB\x05\xDB\u0E9D\n\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB" +
		"\x03\xDB\x07\xDB\u0EA4\n\xDB\f\xDB\x0E\xDB\u0EA7\v\xDB\x03\xDB\x03\xDB" +
		"\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u0EAF\n\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u0EB7\n\xDB\x03\xDC\x03\xDC\x05\xDC" +
		"\u0EBB\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0EC2\n\xDC" +
		"\x03\xDC\x05\xDC\u0EC5\n\xDC\x05\xDC\u0EC7\n\xDC\x03\xDD\x03\xDD\x03\xDD" +
		"\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u0ECF\n\xDD\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x05\xDE\u0ED5\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDF\x03\xDF\x03\xDF" +
		"\x03\xDF\x03\xDF\x05\xDF\u0EDF\n\xDF\x03\xE0\x03\xE0\x03\xE0\x07\xE0\u0EE4" +
		"\n\xE0\f\xE0\x0E\xE0\u0EE7\v\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x05\xE1" +
		"\u0F3E\n\xE1\x03\xE2\x03\xE2\x05\xE2\u0F42\n\xE2\x03\xE3\x03\xE3\x05\xE3" +
		"\u0F46\n\xE3\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03" +
		"\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x05\xE4\u0F54\n\xE4\x03\xE5\x03\xE5" +
		"\x03\xE5\x03\xE5\x07\xE5\u0F5A\n\xE5\f\xE5\x0E\xE5\u0F5D\v\xE5\x05\xE5" +
		"\u0F5F\n\xE5\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
		"\xE6\x07\xE6\u0F69\n\xE6\f\xE6\x0E\xE6\u0F6C\v\xE6\x03\xE6\x03\xE6\x05" +
		"\xE6\u0F70\n\xE6\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0F76\n\xE7\x03" +
		"\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0F7D\n\xE7\x03\xE7\x03\xE7" +
		"\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0F84\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03" +
		"\xE7\x03\xE7\x05\xE7\u0F8B\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7" +
		"\x05\xE7\u0F92\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0F99" +
		"\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0FA0\n\xE7\x03" +
		"\xE7\x05\xE7\u0FA3\n\xE7\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u0FA8\n\xE8\f" +
		"\xE8\x0E\xE8\u0FAB\v\xE8\x03\xE9\x03\xE9\x03\xE9\x07\xE9\u0FB0\n\xE9\f" +
		"\xE9\x0E\xE9\u0FB3\v\xE9\x03\xEA\x03\xEA\x03\xEA\x07\xEA\u0FB8\n\xEA\f" +
		"\xEA\x0E\xEA\u0FBB\v\xEA\x03\xEB\x03\xEB\x03\xEC\x03\xEC\x03\xEC\x07\xEC" +
		"\u0FC2\n\xEC\f\xEC\x0E\xEC\u0FC5\v\xEC\x03\xED\x03\xED\x03\xED\x05\xED" +
		"\u0FCA\n\xED\x03\xED\x03\xED\x05\xED\u0FCE\n\xED\x03\xED\x03\xED\x05\xED" +
		"\u0FD2\n\xED\x03\xED\x03\xED\x03\xED\x05\xED\u0FD7\n\xED\x03\xED\x05\xED" +
		"\u0FDA\n\xED\x05\xED\u0FDC\n\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
		"\x03\xEE\x03\xEE\x05\xEE\u0FE5\n\xEE\x03\xEE\x03\xEE\x07\xEE\u0FE9\n\xEE" +
		"\f\xEE\x0E\xEE\u0FEC\v\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u0FF2" +
		"\n\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u0FF7\n\xEF\x03\xEF\x03\xEF\x03" +
		"\xEF\x05\xEF\u0FFC\n\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u1001\n\xEF\x03" +
		"\xEF\x05\xEF\u1004\n\xEF\x03\xF0\x03\xF0\x03\xF0\x07\xF0\u1009\n\xF0\f" +
		"\xF0\x0E\xF0\u100C\v\xF0\x03\xF1\x03\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF3" +
		"\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x05\xF3\u1018\n\xF3\x03\xF3\x03\xF3\x03" +
		"\xF3\x03\xF3\x05\xF3\u101E\n\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x05\xF4" +
		"\u1024\n\xF4\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u1029\n\xF5\f\xF5\x0E\xF5" +
		"\u102C\v\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u1033\n\xF6" +
		"\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u1039\n\xF6\x03\xF6\x03\xF6\x03" +
		"\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u1045" +
		"\n\xF6\x05\xF6\u1047\n\xF6\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x05\xF7\u104D" +
		"\n\xF7\x03\xF7\x03\xF7\x05\xF7\u1051\n\xF7\x05\xF7\u1053\n\xF7\x03\xF8" +
		"\x03\xF8\x05\xF8\u1057\n\xF8\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x03\xF9\x03" +
		"\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x05\xF9\u1064\n\xF9\x03\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u106A\n\xFA\x03\xFA\x03\xFA\x03\xFB\x03" +
		"\xFB\x03\xFB\x03\xFB\x05\xFB\u1072\n\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB" +
		"\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u107D\n\xFB\x03\xFB\x03" +
		"\xFB\x05\xFB\u1081\n\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB" +
		"\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u108E\n\xFB\x03\xFB\x03" +
		"\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u1095\n\xFB\x03\xFB\x03\xFB\x03\xFB" +
		"\x03\xFB\x05\xFB\u109B\n\xFB\x05\xFB\u109D\n\xFB\x03\xFC\x03\xFC\x03\xFC" +
		"\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u10A7\n\xFD\x03\xFD\x03" +
		"\xFD\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x05\xFE\u10AF\n\xFE\x03\xFE\x05\xFE" +
		"\u10B2\n\xFE\x03\xFE\x07\xFE\u10B5\n\xFE\f\xFE\x0E\xFE\u10B8\v\xFE\x03" +
		"\xFE\x05\xFE\u10BB\n\xFE\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x05\xFF\u10C1" +
		"\n\xFF\x03\xFF\x05\xFF\u10C4\n\xFF\x03\u0100\x03\u0100\x03\u0100\x05\u0100" +
		"\u10C9\n\u0100\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x06\u0101\u10D4\n\u0101\r\u0101\x0E\u0101" +
		"\u10D5\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03" +
		"\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u10E2\n\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x05\u0102\u10E7\n\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u10EF\n\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x05\u0102\u10F5\n\u0102\x05\u0102\u10F7\n\u0102\x05" +
		"\u0102\u10F9\n\u0102\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103" +
		"\u10FF\n\u0103\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u110B\n\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x05\u0104\u1110\n\u0104\x05\u0104\u1112\n\u0104\x03" +
		"\u0104\x03\u0104\x05\u0104\u1116\n\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x05\u0104\u111C\n\u0104\x03\u0104\x05\u0104\u111F\n\u0104\x03" +
		"\u0104\x05\u0104\u1122\n\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u112C\n\u0104\x05\u0104" +
		"\u112E\n\u0104\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u1134" +
		"\n\u0105\x03\u0106\x03\u0106\x03\u0106\x06\u0106\u1139\n\u0106\r\u0106" +
		"\x0E\u0106\u113A\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x05\u0106\u1141" +
		"\n\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x03\u0108\x03" +
		"\u0108\x03\u0108\x05\u0108\u114B\n\u0108\x03\u0108\x03\u0108\x05\u0108" +
		"\u114F\n\u0108\x03\u0109\x03\u0109\x03\u0109\x05\u0109\u1154\n\u0109\x03" +
		"\u010A\x03\u010A\x03\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03" +
		"\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x07\u010B\u1163" +
		"\n\u010B\f\u010B\x0E\u010B\u1166\v\u010B\x03\u010C\x03\u010C\x03\u010C" +
		"\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C" +
		"\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u1175\n\u010C\x03\u010C\x03\u010C" +
		"\x03\u010C\x05\u010C\u117A\n\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C" +
		"\x03\u010C\x03\u010C\x05\u010C\u1182\n\u010C\x03\u010C\x03\u010C\x03\u010C" +
		"\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u118A\n\u010C\x03\u010D\x03\u010D" +
		"\x03\u010D\x05\u010D\u118F\n\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D" +
		"\x05\u010D\u1195\n\u010D\x03\u010D\x05\u010D\u1198\n\u010D\x05\u010D\u119A" +
		"\n\u010D\x03\u010E\x03\u010E\x03\u010F\x03\u010F\x03\u010F\x07\u010F\u11A1" +
		"\n\u010F\f\u010F\x0E\u010F\u11A4\v\u010F\x03\u0110\x03\u0110\x03\u0110" +
		"\x05\u0110\u11A9\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110" +
		"\u11AF\n\u0110\x05\u0110\u11B1\n\u0110\x03\u0110\x03\u0110\x05\u0110\u11B5" +
		"\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03" +
		"\u0110\x03\u0110\x03\u0110\x05\u0110\u11C0\n\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110" +
		"\u11CA\n\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u11CF\n\u0110\x03" +
		"\u0111\x03\u0111\x03\u0111\x05\u0111\u11D4\n\u0111\x03\u0111\x03\u0111" +
		"\x03\u0111\x05\u0111\u11D9\n\u0111\x03\u0111\x03\u0111\x03\u0111\x03\u0111" +
		"\x03\u0111\x03\u0111\x05\u0111\u11E1\n\u0111\x03\u0112\x03\u0112\x05\u0112" +
		"\u11E5\n\u0112\x03\u0112\x07\u0112\u11E8\n\u0112\f\u0112\x0E\u0112\u11EB" +
		"\v\u0112\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x05" +
		"\u0113\u11F3\n\u0113\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114" +
		"\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u11FF\n\u0114" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u120D\n\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x05\u0115\u1216\n\u0115\x05\u0115\u1218\n\u0115\x03\u0116\x03\u0116\x03" +
		"\u0116\x07\u0116\u121D\n\u0116\f\u0116\x0E\u0116\u1220\v\u0116\x03\u0117" +
		"\x03\u0117\x03\u0117\x03\u0117\x05\u0117\u1226\n\u0117\x03\u0118\x03\u0118" +
		"\x05\u0118\u122A\n\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118" +
		"\u1230\n\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x07\u0118\u1236" +
		"\n\u0118\f\u0118\x0E\u0118\u1239\v\u0118\x03\u0118\x03\u0118\x03\u0118" +
		"\x03\u0118\x05\u0118\u123F\n\u0118\x03\u0118\x03\u0118\x05\u0118\u1243" +
		"\n\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118\u1249";
	private static readonly _serializedATNSegment2: string =
		"\n\u0118\x03\u0118\x03\u0118\x03\u0118\x07\u0118\u124E\n\u0118\f\u0118" +
		"\x0E\u0118\u1251\v\u0118\x05\u0118\u1253\n\u0118\x03\u0119\x03\u0119\x03" +
		"\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u125C\n\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u1262\n\u0119\x03\u011A" +
		"\x03\u011A\x03\u011A\x05\u011A\u1267\n\u011A\x03\u011B\x03\u011B\x03\u011C" +
		"\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011C\x03\u011C\x07\u011C\u127C\n\u011C\f\u011C\x0E\u011C\u127F\v" +
		"\u011C\x05\u011C\u1281\n\u011C\x03\u011D\x03\u011D\x03\u011D\x03\u011E" +
		"\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E" +
		"\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u1291\n\u011E\x03\u011E\x03\u011E" +
		"\x03\u011E\x05\u011E\u1296\n\u011E\x03\u011E\x05\u011E\u1299\n\u011E\x03" +
		"\u011E\x03\u011E\x05\u011E\u129D\n\u011E\x03\u011E\x05\u011E\u12A0\n\u011E" +
		"\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E" +
		"\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u12AE\n\u011E" +
		"\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u12B4\n\u011E\x03\u011E" +
		"\x03\u011E\x03\u011E\x05\u011E\u12B9\n\u011E\x03\u011E\x05\u011E\u12BC" +
		"\n\u011E\x05\u011E\u12BE\n\u011E\x03\u011F\x03\u011F\x05\u011F\u12C2\n" +
		"\u011F\x03\u011F\x03\u011F\x03\u011F\x05\u011F\u12C7\n\u011F\x05\u011F" +
		"\u12C9\n\u011F\x03\u0120\x03\u0120\x03\u0120\x03\u0121\x03\u0121\x03\u0121" +
		"\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x05\u0121\u12D5\n\u0121\x03\u0122" +
		"\x03\u0122\x07\u0122\u12D9\n\u0122\f\u0122\x0E\u0122\u12DC\v\u0122\x03" +
		"\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03" +
		"\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03" +
		"\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x05\u0123\u12F1\n\u0123" +
		"\x03\u0123\x03\u0123\x05\u0123\u12F5\n\u0123\x05\u0123\u12F7\n\u0123\x03" +
		"\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u12FF" +
		"\n\u0124\x03\u0125\x03\u0125\x05\u0125\u1303\n\u0125\x03\u0125\x03\u0125" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x05\u0126\u130C\n\u0126" +
		"\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0128\x03\u0128\x03\u0128" +
		"\x03\u0128\x05\u0128\u1316\n\u0128\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x05\u0129\u131D\n\u0129\x03\u0129\x05\u0129\u1320\n\u0129\x03" +
		"\u0129\x03\u0129\x05\u0129\u1324\n\u0129\x03\u0129\x05\u0129\u1327\n\u0129" +
		"\x03\u0129\x05\u0129\u132A\n\u0129\x03\u0129\x03\u0129\x05\u0129\u132E" +
		"\n\u0129\x03\u0129\x05\u0129\u1331\n\u0129\x03\u0129\x03\u0129\x05\u0129" +
		"\u1335\n\u0129\x03\u0129\x05\u0129\u1338\n\u0129\x03\u0129\x03\u0129\x03" +
		"\u0129\x05\u0129\u133D\n\u0129\x03\u0129\x05\u0129\u1340\n\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x05\u0129\u1345\n\u0129\x03\u0129\x05\u0129\u1348" +
		"\n\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u134E\n\u0129" +
		"\x03\u0129\x03\u0129\x05\u0129\u1352\n\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x05\u0129\u1358\n\u0129\x03\u0129\x05\u0129\u135B\n\u0129\x03" +
		"\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05" +
		"\u0129\u1364\n\u0129\x05\u0129\u1366\n\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x05\u0129\u136C\n\u0129\x03\u0129\x03\u0129\x05\u0129\u1370" +
		"\n\u0129\x03\u0129\x05\u0129\u1373\n\u0129\x03\u0129\x05\u0129\u1376\n" +
		"\u0129\x03\u0129\x03\u0129\x05\u0129\u137A\n\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x05\u0129\u1380\n\u0129\x03\u0129\x05\u0129\u1383" +
		"\n\u0129\x03\u0129\x05\u0129\u1386\n\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u1390\n\u0129" +
		"\x03\u0129\x03\u0129\x05\u0129\u1394\n\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x07\u0129\u139B\n\u0129\f\u0129\x0E\u0129\u139E\v" +
		"\u0129\x05\u0129\u13A0\n\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129" +
		"\u13A5\n\u0129\x03\u0129\x05\u0129\u13A8\n\u0129\x03\u0129\x05\u0129\u13AB" +
		"\n\u0129\x03\u0129\x03\u0129\x05\u0129\u13AF\n\u0129\x03\u0129\x05\u0129" +
		"\u13B2\n\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u13B7\n\u0129\x03" +
		"\u0129\x03\u0129\x05\u0129\u13BB\n\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u13C3\n\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x05\u0129\u13D0\n\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129" +
		"\u13E2\n\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u13E7\n\u0129\x03" +
		"\u0129\x03\u0129\x03\u0129\x05\u0129\u13EC\n\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u13F4\n\u0129\x03\u012A" +
		"\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u13FA\n\u012A\x05\u012A\u13FC" +
		"\n\u012A\x03\u012B\x03\u012B\x05\u012B\u1400\n\u012B\x03\u012B\x05\u012B" +
		"\u1403\n\u012B\x03\u012C\x03\u012C\x03\u012D\x03\u012D\x03\u012D\x03\u012E" +
		"\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x05\u012E" +
		"\u1411\n\u012E\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
		"\x03\u012F\x03\u012F\x05\u012F\u141B\n\u012F\x03\u012F\x03\u012F\x05\u012F" +
		"\u141F\n\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x07\u012F\u1425" +
		"\n\u012F\f\u012F\x0E\u012F\u1428\v\u012F\x05\u012F\u142A\n\u012F\x03\u012F" +
		"\x03\u012F\x05\u012F\u142E\n\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
		"\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x05\u012F\u1438\n\u012F\x03\u0130" +
		"\x03\u0130\x05\u0130\u143C\n\u0130\x03\u0131\x03\u0131\x03\u0131\x07\u0131" +
		"\u1441\n\u0131\f\u0131\x0E\u0131\u1444\v\u0131\x03\u0132\x03\u0132\x05" +
		"\u0132\u1448\n\u0132\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
		"\x03\u0133\x05\u0133\u1450\n\u0133\x03\u0134\x03\u0134\x03\u0134\x05\u0134" +
		"\u1455\n\u0134\x03\u0134\x03\u0134\x03\u0135\x03\u0135\x05\u0135\u145B" +
		"\n\u0135\x03\u0136\x03\u0136\x03\u0136\x07\u0136\u1460\n\u0136\f\u0136" +
		"\x0E\u0136\u1463\v\u0136\x03\u0137\x03\u0137\x05\u0137\u1467\n\u0137\x03" +
		"\u0137\x03\u0137\x03\u0137\x03\u0137\x05\u0137\u146D\n\u0137\x03\u0137" +
		"\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x05\u0137\u1474\n\u0137\x03\u0138" +
		"\x03\u0138\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139" +
		"\x05\u0139\u147E\n\u0139\x05\u0139\u1480\n\u0139\x03\u013A\x03\u013A\x03" +
		"\u013A\x03\u013A\x03\u013A\x03\u013A\x05\u013A\u1488\n\u013A\x03\u013B" +
		"\x03\u013B\x03\u013B\x05\u013B\u148D\n\u013B\x03\u013B\x03\u013B\x05\u013B" +
		"\u1491\n\u013B\x03\u013B\x05\u013B\u1494\n\u013B\x03\u013C\x03\u013C\x03" +
		"\u013C\x07\u013C\u1499\n\u013C\f\u013C\x0E\u013C\u149C\v\u013C\x03\u013D" +
		"\x03\u013D\x05\u013D\u14A0\n\u013D\x03\u013D\x03\u013D\x05\u013D\u14A4" +
		"\n\u013D\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013F\x03" +
		"\u013F\x03\u013F\x03\u013F\x05\u013F\u14AF\n\u013F\x03\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x05\u0140\u14B7\n\u0140\x03\u0140" +
		"\x03\u0140\x05\u0140\u14BB\n\u0140\x03\u0140\x05\u0140\u14BE\n\u0140\x03" +
		"\u0140\x05\u0140\u14C1\n\u0140\x03\u0141\x03\u0141\x05\u0141\u14C5\n\u0141" +
		"\x03\u0141\x03\u0141\x05\u0141\u14C9\n\u0141\x03\u0141\x07\u0141\u14CC" +
		"\n\u0141\f\u0141\x0E\u0141\u14CF\v\u0141\x03\u0142\x03\u0142\x03\u0142" +
		"\x05\u0142\u14D4\n\u0142\x03\u0143\x03\u0143\x05\u0143\u14D8\n\u0143\x03" +
		"\u0143\x03\u0143\x03\u0144\x03\u0144\x03\u0145\x03\u0145\x03\u0145\x03" +
		"\u0145\x03\u0145\x05\u0145\u14E3\n\u0145\x03\u0145\x05\u0145\u14E6\n\u0145" +
		"\x03\u0145\x05\u0145\u14E9\n\u0145\x03\u0145\x05\u0145\u14EC\n\u0145\x03" +
		"\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x05\u0146\u14F4" +
		"\n\u0146\x03\u0147\x03\u0147\x05\u0147\u14F8\n\u0147\x03\u0147\x07\u0147" +
		"\u14FB\n\u0147\f\u0147\x0E\u0147\u14FE\v\u0147\x03\u0148\x03\u0148\x03" +
		"\u0148\x03\u0148\x03\u0148\x05\u0148\u1505\n\u0148\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u150D\n\u0149\x03\u014A" +
		"\x03\u014A\x03\u014A\x03\u014A\x05\u014A\u1513\n\u014A\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x05\u014B\u1520\n\u014B\x03\u014B\x03\u014B\x03\u014C" +
		"\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C\u152A\n\u014C" +
		"\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C\u1530\n\u014C\x03\u014D" +
		"\x03\u014D\x03\u014D\x03\u014E\x03\u014E\x03\u014E\x03\u014F\x03\u014F" +
		"\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x05\u0150\u153E\n\u0150\x03\u0150" +
		"\x05\u0150\u1541\n\u0150\x03\u0150\x03\u0150\x05\u0150\u1545\n\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x07\u0150\u1550\n\u0150\f\u0150\x0E\u0150\u1553\v\u0150" +
		"\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x05\u0151" +
		"\u155B\n\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151" +
		"\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x07\u0151\u1567\n\u0151\f\u0151" +
		"\x0E\u0151\u156A\v\u0151\x03\u0152\x03\u0152\x03\u0153\x03\u0153\x05\u0153" +
		"\u1570\n\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x05\u0153\u1576" +
		"\n\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x05\u0153\u157C\n\u0153" +
		"\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x05\u0154" +
		"\u1584\n\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
		"\x03\u0154\x03\u0154\x03\u0154\x05\u0154\u158F\n\u0154\x03\u0154\x03\u0154" +
		"\x05\u0154\u1593\n\u0154\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
		"\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
		"\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
		"\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
		"\x03\u0155\x07\u0155\u15B0\n\u0155\f\u0155\x0E\u0155\u15B3\v\u0155\x03" +
		"\u0156\x03\u0156\x03\u0156\x03\u0156\x05\u0156\u15B9\n\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x05\u0156\u15CA\n\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x05\u0156\u15D1\n\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x05\u0156\u15DF\n\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x05\u0156\u15EB\n\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x05\u0156\u15F1\n\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x06\u0156\u15F6\n\u0156\r\u0156\x0E\u0156\u15F7\x03" +
		"\u0156\x05\u0156\u15FB\n\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x05\u0156\u161D\n\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x07\u0156\u1625\n\u0156\f\u0156\x0E\u0156\u1628\v\u0156\x03" +
		"\u0157\x03\u0157\x03\u0157\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03" +
		"\u0158\x03\u0158\x05\u0158\u1633\n\u0158\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u1638\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159" +
		"\u163E\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u1646\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u164D\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159" +
		"\u1653\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1658\n\u0159\x03" +
		"\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u165E\n\u0159\x03\u0159" +
		"\x03\u0159\x03\u0159\x05\u0159\u1663\n\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u1668\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159" +
		"\u166E\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1673\n\u0159\x03" +
		"\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1679\n\u0159\x03\u0159" +
		"\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1681\n\u0159" +
		"\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159" +
		"\u1689\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u1691\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x03\u0159\x05\u0159\u1699\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159" +
		"\u169E\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u16A4" +
		"\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u16A9\n\u0159\x03\u0159" +
		"\x03\u0159\x05\u0159\u16AD\n\u0159\x03\u0159\x03\u0159\x05\u0159\u16B1" +
		"\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u16B6\n\u0159\x05\u0159" +
		"\u16B8\n\u0159\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x05\u015B\u16CB\n\u015B\x03\u015B" +
		"\x03\u015B\x05\u015B\u16CF\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x05\u015B\u16D6\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x05\u015B" +
		"\u16E2\n\u015B\x03\u015B\x05\u015B\u16E5\n\u015B\x03\u015B\x03\u015B\x05" +
		"\u015B\u16E9\n\u015B\x03\u015C\x03\u015C\x03\u015C\x05\u015C\u16EE\n\u015C" +
		"\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u16F3\n\u015D\x03\u015D\x03\u015D" +
		"\x05\u015D\u16F7\n\u015D\x03\u015E\x03\u015E\x03\u015E\x03\u015F\x03\u015F" +
		"\x03\u015F\x03\u015F\x03\u015F\x05\u015F\u1701\n\u015F\x03\u015F\x03\u015F" +
		"\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x05\u015F\u170A\n\u015F" +
		"\x05\u015F\u170C\n\u015F\x03\u0160\x05\u0160\u170F\n\u0160\x03\u0160\x03" +
		"\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161\u1718" +
		"\n\u0161\x03\u0162\x03\u0162\x03\u0162\x07\u0162\u171D\n\u0162\f\u0162" +
		"\x0E\u0162\u1720\v\u0162\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
		"\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u172C\n\u0163" +
		"\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u1731\n\u0163\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u1738\n\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x05\u0164\u173E\n\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x06\u0164\u1756\n\u0164" +
		"\r\u0164\x0E\u0164\u1757\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u1777\n\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x05\u0164\u178B\n\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x05\u0164\u1791\n\u0164\x03\u0164\x03\u0164\x05\u0164\u1795" +
		"\n\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u17B0\n\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u17BC\n\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x05\u0164\u17C9\n\u0164\x03\u0164\x03\u0164\x05\u0164" +
		"\u17CD\n\u0164\x03\u0164\x03\u0164\x05\u0164\u17D1\n\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u17ED\n\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u1825\n\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x05\u0164\u182F\n\u0164\x03\u0164\x03\u0164\x05\u0164\u1833\n\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x05\u0164\u183F\n\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x05\u0164\u1844\n\u0164\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x05\u0165\u1851\n\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x05\u0165" +
		"\u1865\n\u0165\x03\u0166\x03\u0166\x05\u0166\u1869\n\u0166\x03\u0166\x03" +
		"\u0166\x03\u0167\x03\u0167\x03\u0167\x03\u0168\x03\u0168\x03\u0168\x03" +
		"\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x07\u0168\u1878\n\u0168" +
		"\f\u0168\x0E\u0168\u187B\v\u0168\x05\u0168\u187D\n\u0168\x03\u0169\x03" +
		"\u0169\x03\u0169\x05\u0169\u1882\n\u0169\x03\u0169\x05\u0169\u1885\n\u0169" +
		"\x03\u016A\x03\u016A\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B" +
		"\x05\u016B\u188E\n\u016B\x03\u016B\x03\u016B\x05\u016B\u1892\n\u016B\x03" +
		"\u016B\x03\u016B\x03\u016B\x03\u016B\x05\u016B\u1898\n\u016B\x03\u016B" +
		"\x03\u016B\x03\u016B\x03\u016B\x05\u016B\u189E\n\u016B\x03\u016B\x03\u016B" +
		"\x05\u016B\u18A2\n\u016B\x03\u016B\x03\u016B\x03\u016C\x03\u016C\x03\u016C" +
		"\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x05\u016C\u18AD\n\u016C\x03\u016C" +
		"\x03\u016C\x03\u016C\x03\u016C\x05\u016C\u18B3\n\u016C\x05\u016C\u18B5" +
		"\n\u016C\x03\u016C\x03\u016C\x03\u016D\x03\u016D\x03\u016D\x05\u016D\u18BC" +
		"\n\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x05\u016D\u18C3" +
		"\n\u016D\x03\u016D\x03\u016D\x05\u016D\u18C7\n\u016D\x03\u016E\x03\u016E" +
		"\x03\u016E\x07\u016E\u18CC\n\u016E\f\u016E\x0E\u016E\u18CF\v\u016E\x03" +
		"\u016F\x03\u016F\x05\u016F\u18D3\n\u016F\x03\u0170\x03\u0170\x03\u0170" +
		"\x05\u0170\u18D8\n\u0170\x03\u0170\x05\u0170\u18DB\n\u0170\x03\u0171\x03" +
		"\u0171\x03\u0171\x05\u0171\u18E0\n\u0171\x03\u0172\x03\u0172\x05\u0172" +
		"\u18E4\n\u0172\x03\u0172\x03\u0172\x05\u0172\u18E8\n\u0172\x03\u0173\x03" +
		"\u0173\x03\u0173\x05\u0173\u18ED\n\u0173\x03\u0173\x03\u0173\x03\u0173" +
		"\x05\u0173\u18F2\n\u0173\x05\u0173\u18F4\n\u0173\x03\u0173\x03\u0173\x05" +
		"\u0173\u18F8\n\u0173\x03\u0174\x03\u0174\x03\u0174\x03\u0175\x03\u0175" +
		"\x03\u0175\x03\u0176\x03\u0176\x03\u0176\x03\u0177\x03\u0177\x05\u0177" +
		"\u1905\n\u0177\x03\u0177\x03\u0177\x05\u0177\u1909\n\u0177\x03\u0177\x05" +
		"\u0177\u190C\n\u0177\x03\u0177\x03\u0177\x05\u0177\u1910\n\u0177\x03\u0177" +
		"\x03\u0177\x05\u0177\u1914\n\u0177\x03\u0177\x03\u0177\x05\u0177\u1918" +
		"\n\u0177\x03\u0177\x03\u0177\x03\u0177\x05\u0177\u191D\n\u0177\x03\u0177" +
		"\x03\u0177\x05\u0177\u1921\n\u0177\x03\u0177\x03\u0177\x05\u0177\u1925" +
		"\n\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03" +
		"\u0177\x05\u0177\u192E\n\u0177\x05\u0177\u1930\n\u0177\x03\u0178\x03\u0178" +
		"\x03\u0178\x07\u0178\u1935\n\u0178\f\u0178\x0E\u0178\u1938\v\u0178\x03" +
		"\u0179\x03\u0179\x03\u0179\x05\u0179\u193D\n\u0179\x03\u017A\x03\u017A" +
		"\x03\u017B\x03\u017B\x03\u017C\x03\u017C\x05\u017C\u1945\n\u017C\x03\u017D" +
		"\x03\u017D\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017F\x03\u017F" +
		"\x03\u017F\x03\u017F\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0181" +
		"\x03\u0181\x03\u0181\x07\u0181\u1958\n\u0181\f\u0181\x0E\u0181\u195B\v" +
		"\u0181\x03\u0182\x03\u0182\x05\u0182\u195F\n\u0182\x03\u0183\x03\u0183" +
		"\x03\u0183\x07\u0183\u1964\n\u0183\f\u0183\x0E\u0183\u1967\v\u0183\x03" +
		"\u0184\x03\u0184\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x03" +
		"\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03" +
		"\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x05\u0186\u197D" +
		"\n\u0186\x03\u0187\x03\u0187\x03\u0187\x03\u0188\x03\u0188\x03\u0188\x03" +
		"\u0188\x03\u0188\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x03" +
		"\u0189\x05\u0189\u198D\n\u0189\x03\u018A\x03\u018A\x03\u018A\x03\u018B" +
		"\x03\u018B\x03\u018B\x06\u018B\u1995\n\u018B\r\u018B\x0E\u018B\u1996\x03" +
		"\u018C\x03\u018C\x05\u018C\u199B\n\u018C\x03\u018C\x03\u018C\x03\u018C" +
		"\x06\u018C\u19A0\n\u018C\r\u018C\x0E\u018C\u19A1\x03\u018C\x05\u018C\u19A5" +
		"\n\u018C\x03\u018C\x03\u018C\x03\u018C\x03\u018D\x03\u018D\x03\u018D\x03" +
		"\u018E\x03\u018E\x03\u018E\x05\u018E\u19B0\n\u018E\x03\u018F\x03\u018F" +
		"\x03\u0190\x03\u0190\x03\u0190\x03\u0191\x03\u0191\x05\u0191\u19B9\n\u0191" +
		"\x03\u0191\x05\u0191\u19BC\n\u0191\x03\u0191\x03\u0191\x03\u0192\x03\u0192" +
		"\x03\u0192\x05\u0192\u19C3\n\u0192\x03\u0193\x03\u0193\x03\u0193\x05\u0193" +
		"\u19C8\n\u0193\x03\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0195" +
		"\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0196" +
		"\x03\u0196\x03\u0196\x03\u0196\x03\u0196\x03\u0196\x03\u0196\x03\u0197" +
		"\x03\u0197\x03\u0197\x06\u0197\u19E0\n\u0197\r\u0197\x0E\u0197\u19E1\x03" +
		"\u0198\x03\u0198\x03\u0198\x03\u0198\x05\u0198\u19E8\n\u0198\x03\u0199" +
		"\x03\u0199\x03\u0199\x03\u0199\x05\u0199\u19EE\n\u0199\x03\u0199\x03\u0199" +
		"\x05\u0199\u19F2\n\u0199\x03\u019A\x03\u019A\x03\u019A\x03\u019A\x03\u019A" +
		"\x03\u019A\x03\u019B\x03\u019B\x05\u019B\u19FC\n\u019B\x03\u019C\x03\u019C" +
		"\x05\u019C\u1A00\n\u019C\x03\u019C\x03\u019C\x03\u019D\x03\u019D\x03\u019D" +
		"\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x07\u019D\u1A0B\n\u019D\f\u019D" +
		"\x0E\u019D\u1A0E\v\u019D\x03\u019D\x03\u019D\x03\u019E\x03\u019E\x03\u019E" +
		"\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x05\u019E\u1A19\n\u019E\x03\u019F" +
		"\x03\u019F\x03\u019F\x03\u019F\x03\u019F\x03\u019F\x03\u01A0\x03\u01A0" +
		"\x03\u01A0\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A2\x03\u01A2\x03\u01A2" +
		"\x03\u01A2\x05\u01A2\u1A2B\n\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2" +
		"\x07\u01A2\u1A31\n\u01A2\f\u01A2\x0E\u01A2\u1A34\v\u01A2\x03\u01A2\x03" +
		"\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x07\u01A2\u1A3B\n\u01A2\f\u01A2\x0E" +
		"\u01A2\u1A3E\v\u01A2\x05\u01A2\u1A40\n\u01A2\x03\u01A3\x03\u01A3\x03\u01A3" +
		"\x05\u01A3\u1A45\n\u01A3\x03\u01A4\x03\u01A4\x05\u01A4\u1A49\n\u01A4\x03" +
		"\u01A4\x03\u01A4\x03\u01A4\x03\u01A5\x03\u01A5\x05\u01A5\u1A50\n\u01A5" +
		"\x03\u01A5\x03\u01A5\x03\u01A5\x05\u01A5\u1A55\n\u01A5\x03\u01A6\x03\u01A6" +
		"\x03\u01A7\x03\u01A7\x03\u01A7\x05\u01A7\u1A5C\n\u01A7\x03\u01A7\x03\u01A7" +
		"\x03\u01A7\x03\u01A7\x07\u01A7\u1A62\n\u01A7\f\u01A7\x0E\u01A7\u1A65\v" +
		"\u01A7\x05\u01A7\u1A67\n\u01A7\x03\u01A8\x03\u01A8\x03\u01A8\x05\u01A8" +
		"\u1A6C\n\u01A8\x03\u01A8\x05\u01A8\u1A6F\n\u01A8\x03\u01A8\x03\u01A8\x03" +
		"\u01A8\x03\u01A8\x07\u01A8\u1A75\n\u01A8\f\u01A8\x0E\u01A8\u1A78\v\u01A8" +
		"\x05\u01A8\u1A7A\n\u01A8\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01AA" +
		"\x03\u01AA\x03\u01AA\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AC\x03\u01AC" +
		"\x05\u01AC\u1A88\n\u01AC\x03\u01AC\x05\u01AC\u1A8B\n\u01AC\x03\u01AC\x03" +
		"\u01AC\x03\u01AC\x03\u01AC\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03" +
		"\u01AD\x03\u01AD\x03\u01AD\x05\u01AD\u1A98\n\u01AD\x03\u01AD\x03\u01AD" +
		"\x05\u01AD\u1A9C\n\u01AD\x05\u01AD\u1A9E\n\u01AD\x03\u01AE\x03\u01AE\x03" +
		"\u01AE\x05\u01AE\u1AA3\n\u01AE\x03\u01AF\x03\u01AF\x03\u01AF\x05\u01AF" +
		"\u1AA8\n\u01AF\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B1\x05\u01B1\u1AAE" +
		"\n\u01B1\x03\u01B1\x03\u01B1\x03\u01B2\x03\u01B2\x05\u01B2\u1AB4\n\u01B2" +
		"\x03\u01B2\x03\u01B2\x07\u01B2\u1AB8\n\u01B2\f\u01B2\x0E\u01B2\u1ABB\v" +
		"\u01B2\x03\u01B2\x03\u01B2\x05\u01B2\u1ABF\n\u01B2\x03\u01B2\x05\u01B2" +
		"\u1AC2\n\u01B2\x03\u01B2\x03\u01B2\x07\u01B2\u1AC6\n\u01B2\f\u01B2\x0E" +
		"\u01B2\u1AC9\v\u01B2\x03\u01B2\x03\u01B2\x05\u01B2\u1ACD\n\u01B2\x03\u01B2" +
		"\x05\u01B2\u1AD0\n\u01B2\x03\u01B2\x03\u01B2\x07\u01B2\u1AD4\n\u01B2\f" +
		"\u01B2\x0E\u01B2\u1AD7\v\u01B2\x03\u01B2\x05\u01B2\u1ADA\n\u01B2\x03\u01B2" +
		"\x03\u01B2\x03\u01B2\x03\u01B2\x05\u01B2\u1AE0\n\u01B2\x05\u01B2\u1AE2" +
		"\n\u01B2\x03\u01B2\x05\u01B2\u1AE5\n\u01B2\x03\u01B2\x03\u01B2\x07\u01B2" +
		"\u1AE9\n\u01B2\f\u01B2\x0E\u01B2\u1AEC\v\u01B2\x03\u01B2\x03\u01B2\x03" +
		"\u01B2\x05\u01B2\u1AF1\n\u01B2\x03\u01B2\x03\u01B2\x03\u01B2\x03\u01B2" +
		"\x03\u01B2\x03\u01B2\x05\u01B2\u1AF9\n\u01B2\x05\u01B2\u1AFB\n\u01B2\x05" +
		"\u01B2\u1AFD\n\u01B2\x03\u01B3\x03\u01B3\x05\u01B3\u1B01\n\u01B3\x03\u01B4" +
		"\x03\u01B4\x07\u01B4\u1B05\n\u01B4\f\u01B4\x0E\u01B4\u1B08\v\u01B4\x03" +
		"\u01B4\x03\u01B4\x05\u01B4\u1B0C\n\u01B4\x03\u01B4\x03\u01B4\x05\u01B4" +
		"\u1B10\n\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u1B15\n\u01B4\x03" +
		"\u01B4\x03\u01B4\x07\u01B4\u1B19\n\u01B4\f\u01B4\x0E\u01B4\u1B1C\v\u01B4" +
		"\x03\u01B4\x03\u01B4\x07\u01B4\u1B20\n\u01B4\f\u01B4\x0E\u01B4\u1B23\v" +
		"\u01B4\x05\u01B4\u1B25\n\u01B4\x05\u01B4\u1B27\n\u01B4\x03\u01B5\x05\u01B5" +
		"\u1B2A\n\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5" +
		"\x03\u01B5\x03\u01B5\x05\u01B5\u1B34\n\u01B5\x03\u01B5\x03\u01B5\x05\u01B5" +
		"\u1B38\n\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x05\u01B5\u1B3E" +
		"\n\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x05\u01B5\u1B45" +
		"\n\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x05\u01B5\u1B4A\n\u01B5\x03\u01B5" +
		"\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5" +
		"\x03\u01B5\x03\u01B5\x03\u01B5\x03";
	private static readonly _serializedATNSegment3: string =
		"\u01B5\x05\u01B5\u1B58\n\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x05\u01B5" +
		"\u1B5D\n\u01B5\x03\u01B6\x03\u01B6\x03\u01B7\x03\u01B7\x03\u01B8\x03\u01B8" +
		"\x05\u01B8\u1B65\n\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x05\u01B8\u1B6A" +
		"\n\u01B8\x03\u01B8\x03\u01B8\x05\u01B8\u1B6E\n\u01B8\x03\u01B8\x05\u01B8" +
		"\u1B71\n\u01B8\x03\u01B9\x03\u01B9\x03\u01B9\x05\u01B9\u1B76\n\u01B9\x03" +
		"\u01B9\x03\u01B9\x05\u01B9\u1B7A\n\u01B9\x03\u01B9\x03\u01B9\x03\u01B9" +
		"\x03\u01B9\x03\u01B9\x03\u01B9\x05\u01B9\u1B82\n\u01B9\x03\u01B9\x03\u01B9" +
		"\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x05\u01B9\u1B8A\n\u01B9\x05\u01B9" +
		"\u1B8C\n\u01B9\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x05\u01BA" +
		"\u1B93\n\u01BA\x03\u01BB\x03\u01BB\x03\u01BB\x03\u01BB\x07\u01BB\u1B99" +
		"\n\u01BB\f\u01BB\x0E\u01BB\u1B9C\v\u01BB\x03\u01BB\x03\u01BB\x03\u01BC" +
		"\x03\u01BC\x05\u01BC\u1BA2\n\u01BC\x03\u01BC\x05\u01BC\u1BA5\n\u01BC\x03" +
		"\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x07\u01BD\u1BAB\n\u01BD\f\u01BD\x0E" +
		"\u01BD\u1BAE\v\u01BD\x03\u01BD\x03\u01BD\x03\u01BE\x03\u01BE\x03\u01BE" +
		"\x05\u01BE\u1BB5\n\u01BE\x05\u01BE\u1BB7\n\u01BE\x03\u01BF\x03\u01BF\x03" +
		"\u01BF\x03\u01BF\x05\u01BF\u1BBD\n\u01BF\x03\u01C0\x03\u01C0\x03\u01C1" +
		"\x03\u01C1\x05\u01C1\u1BC3\n\u01C1\x03\u01C2\x03\u01C2\x05\u01C2\u1BC7" +
		"\n\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x05\u01C2\u1BCE" +
		"\n\u01C2\x03\u01C3\x03\u01C3\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C5\x03" +
		"\u01C5\x03\u01C5\x03\u01C5\x05\u01C5\u1BD9\n\u01C5\x03\u01C6\x03\u01C6" +
		"\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C8\x03\u01C8\x05\u01C8\u1BE2\n\u01C8" +
		"\x03\u01C8\x05\u01C8\u1BE5\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8" +
		"\u1BEA\n\u01C8\x05\u01C8\u1BEC\n\u01C8\x03\u01C8\x05\u01C8\u1BEF\n\u01C8" +
		"\x03\u01C8\x05\u01C8\u1BF2\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1BF6" +
		"\n\u01C8\x03\u01C8\x05\u01C8\u1BF9\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8" +
		"\u1BFD\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C02\n\u01C8\x03" +
		"\u01C8\x05\u01C8\u1C05\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C09\n\u01C8" +
		"\x03\u01C8\x05\u01C8\u1C0C\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C10" +
		"\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C15\n\u01C8\x03\u01C8" +
		"\x03\u01C8\x05\u01C8\u1C19\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8" +
		"\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8" +
		"\u1C25\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C29\n\u01C8\x03\u01C8\x03" +
		"\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C2F\n\u01C8\x03\u01C8\x05\u01C8" +
		"\u1C32\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C37\n\u01C8\x03" +
		"\u01C8\x03\u01C8\x05\u01C8\u1C3B\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8" +
		"\u1C3F\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C44\n\u01C8\x03" +
		"\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05" +
		"\u01C8\u1C4D\n\u01C8\x03\u01C8\x05\u01C8\u1C50\n\u01C8\x03\u01C8\x03\u01C8" +
		"\x05\u01C8\u1C54\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C58\n\u01C8\x03" +
		"\u01C8\x05\u01C8\u1C5B\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C5F\n\u01C8" +
		"\x03\u01C8\x03\u01C8\x05\u01C8\u1C63\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8" +
		"\x05\u01C8\u1C68\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C6D" +
		"\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C73\n\u01C8" +
		"\x03\u01C9\x03\u01C9\x03\u01C9\x05\u01C9\u1C78\n\u01C9\x03\u01CA\x03\u01CA" +
		"\x03\u01CA\x05\u01CA\u1C7D\n\u01CA\x05\u01CA\u1C7F\n\u01CA\x03\u01CB\x03" +
		"\u01CB\x03\u01CB\x05\u01CB\u1C84\n\u01CB\x03\u01CB\x03\u01CB\x03\u01CC" +
		"\x06\u01CC\u1C89\n\u01CC\r\u01CC\x0E\u01CC\u1C8A\x03\u01CD\x03\u01CD\x03" +
		"\u01CD\x03\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u1C93\n\u01CD\x03\u01CD" +
		"\x03\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u1C99\n\u01CD\x05\u01CD\u1C9B" +
		"\n\u01CD\x03\u01CE\x03\u01CE\x05\u01CE\u1C9F\n\u01CE\x03\u01CE\x03\u01CE" +
		"\x05\u01CE\u1CA3\n\u01CE\x03\u01CF\x03\u01CF\x05\u01CF\u1CA7\n\u01CF\x03" +
		"\u01CF\x03\u01CF\x05\u01CF\u1CAB\n\u01CF\x03\u01D0\x03\u01D0\x03\u01D0" +
		"\x03\u01D0\x03\u01D1\x03\u01D1\x03\u01D1\x03\u01D1\x03\u01D2\x03\u01D2" +
		"\x03\u01D2\x03\u01D2\x05\u01D2\u1CB9\n\u01D2\x03\u01D3\x03\u01D3\x03\u01D3" +
		"\x03\u01D3\x03\u01D3\x05\u01D3\u1CC0\n\u01D3\x03\u01D4\x03\u01D4\x05\u01D4" +
		"\u1CC4\n\u01D4\x03\u01D4\x07\u01D4\u1CC7\n\u01D4\f\u01D4\x0E\u01D4\u1CCA" +
		"\v\u01D4\x03\u01D5\x06\u01D5\u1CCD\n\u01D5\r\u01D5\x0E\u01D5\u1CCE\x03" +
		"\u01D6\x03\u01D6\x05\u01D6\u1CD3\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x05\u01D6\u1CD9\n\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1CDD" +
		"\n\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1CE1\n\u01D6\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x05\u01D6\u1CE6\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6" +
		"\u1CEB\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1CF0\n\u01D6\x03" +
		"\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1CF5\n\u01D6\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x03\u01D6\x05\u01D6\u1CFB\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x05\u01D6\u1D01\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6" +
		"\u1D06\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D0B\n\u01D6\x03" +
		"\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D10\n\u01D6\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x05\u01D6\u1D15\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6" +
		"\u1D1A\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D1F\n\u01D6\x03" +
		"\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D24\n\u01D6\x03\u01D6\x03\u01D6" +
		"\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6" +
		"\u1D2E\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D34" +
		"\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D3A\n\u01D6" +
		"\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D40\n\u01D6\x03\u01D6" +
		"\x05\u01D6\u1D43\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6" +
		"\x05\u01D6\u1D4A\n\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u1D4F" +
		"\n\u01D6\x03\u01D6\x05\u01D6\u1D52\n\u01D6\x03\u01D7\x03\u01D7\x05\u01D7" +
		"\u1D56\n\u01D7\x03\u01D8\x05\u01D8\u1D59\n\u01D8\x03\u01D8\x03\u01D8\x05" +
		"\u01D8\u1D5D\n\u01D8\x03\u01D8\x03\u01D8\x03\u01D9\x05\u01D9\u1D62\n\u01D9" +
		"\x03\u01D9\x03\u01D9\x05\u01D9\u1D66\n\u01D9\x03\u01D9\x03\u01D9\x03\u01DA" +
		"\x05\u01DA\u1D6B\n\u01DA\x03\u01DA\x03\u01DA\x05\u01DA\u1D6F\n\u01DA\x03" +
		"\u01DA\x03\u01DA\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x05" +
		"\u01DB\u1D78\n\u01DB\x03\u01DB\x05\u01DB\u1D7B\n\u01DB\x03\u01DB\x05\u01DB" +
		"\u1D7E\n\u01DB\x03\u01DC\x05\u01DC\u1D81\n\u01DC\x03\u01DC\x03\u01DC\x05" +
		"\u01DC\u1D85\n\u01DC\x03\u01DC\x03\u01DC\x05\u01DC\u1D89\n\u01DC\x03\u01DC" +
		"\x03\u01DC\x05\u01DC\u1D8D\n\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC" +
		"\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC" +
		"\x03\u01DC\x03\u01DC\x05\u01DC\u1D9C\n\u01DC\x03\u01DC\x05\u01DC\u1D9F" +
		"\n\u01DC\x05\u01DC\u1DA1\n\u01DC\x03\u01DD\x03\u01DD\x03\u01DD\x05\u01DD" +
		"\u1DA6\n\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD" +
		"\x03\u01DD\x05\u01DD\u1DAF\n\u01DD\x03\u01DD\x05\u01DD\u1DB2\n\u01DD\x03" +
		"\u01DD\x03\u01DD\x05\u01DD\u1DB6\n\u01DD\x03\u01DE\x03\u01DE\x03\u01DE" +
		"\x03\u01DE\x03\u01DE\x03\u01DF\x03\u01DF\x03\u01DF\x03\u01DF\x07\u01DF" +
		"\u1DC1\n\u01DF\f\u01DF\x0E\u01DF\u1DC4\v\u01DF\x03\u01DF\x03\u01DF\x03" +
		"\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x05" +
		"\u01E0\u1DCF\n\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x05\u01E0\u1DD4\n\u01E0" +
		"\x03\u01E0\x07\u01E0\u1DD7\n\u01E0\f\u01E0\x0E\u01E0\u1DDA\v\u01E0\x03" +
		"\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x07\u01E0\u1DE0\n\u01E0\f\u01E0\x0E" +
		"\u01E0\u1DE3\v\u01E0\x03\u01E0\x03\u01E0\x05\u01E0\u1DE7\n\u01E0\x03\u01E1" +
		"\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x07\u01E1\u1DEE\n\u01E1\f\u01E1" +
		"\x0E\u01E1\u1DF1\v\u01E1\x03\u01E1\x03\u01E1\x05\u01E1\u1DF5\n\u01E1\x03" +
		"\u01E2\x03\u01E2\x05\u01E2\u1DF9\n\u01E2\x03\u01E2\x03\u01E2\x05\u01E2" +
		"\u1DFD\n\u01E2\x03\u01E2\x03\u01E2\x05\u01E2\u1E01\n\u01E2\x03\u01E2\x03" +
		"\u01E2\x03\u01E2\x05\u01E2\u1E06\n\u01E2\x03\u01E2\x03\u01E2\x03\u01E2" +
		"\x05\u01E2\u1E0B\n\u01E2\x03\u01E2\x03\u01E2\x03\u01E2\x03\u01E2\x05\u01E2" +
		"\u1E11\n\u01E2\x03\u01E2\x03\u01E2\x03\u01E2\x05\u01E2\u1E16\n\u01E2\x03" +
		"\u01E2\x05\u01E2\u1E19\n\u01E2\x03\u01E3\x03\u01E3\x03\u01E3\x07\u01E3" +
		"\u1E1E\n\u01E3\f\u01E3\x0E\u01E3\u1E21\v\u01E3\x03\u01E4\x03\u01E4\x03" +
		"\u01E4\x03\u01E4\x07\u01E4\u1E27\n\u01E4\f\u01E4\x0E\u01E4\u1E2A\v\u01E4" +
		"\x03\u01E4\x03\u01E4\x03\u01E5\x03\u01E5\x05\u01E5\u1E30\n\u01E5\x03\u01E6" +
		"\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E8" +
		"\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E9\x05\u01E9\u1E3E\n\u01E9\x03\u01E9" +
		"\x03\u01E9\x03\u01EA\x03\u01EA\x03\u01EA\x03\u01EB\x03\u01EB\x03\u01EB" +
		"\x03\u01EC\x03\u01EC\x05\u01EC\u1E4A\n\u01EC\x03\u01ED\x03\u01ED\x03\u01ED" +
		"\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01EE\x03\u01EE\x03\u01EE\x07\u01EE" +
		"\u1E55\n\u01EE\f\u01EE\x0E\u01EE\u1E58\v\u01EE\x03\u01EF\x03\u01EF\x03" +
		"\u01EF\x07\u01EF\u1E5D\n\u01EF\f\u01EF\x0E\u01EF\u1E60\v\u01EF\x03\u01F0" +
		"\x03\u01F0\x03\u01F0\x03\u01F0\x05\u01F0\u1E66\n\u01F0\x03\u01F1\x03\u01F1" +
		"\x03\u01F1\x03\u01F2\x03\u01F2\x06\u01F2\u1E6D\n\u01F2\r\u01F2\x0E\u01F2" +
		"\u1E6E\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x05\u01F3\u1E75\n\u01F3" +
		"\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x05\u01F3" +
		"\u1E7D\n\u01F3\x03\u01F4\x03\u01F4\x06\u01F4\u1E81\n\u01F4\r\u01F4\x0E" +
		"\u01F4\u1E82\x03\u01F5\x03\u01F5\x03\u01F5\x03\u01F5\x03\u01F6\x03\u01F6" +
		"\x03\u01F6\x07\u01F6\u1E8C\n\u01F6\f\u01F6\x0E\u01F6\u1E8F\v\u01F6\x03" +
		"\u01F7\x03\u01F7\x03\u01F7\x07\u01F7\u1E94\n\u01F7\f\u01F7\x0E\u01F7\u1E97" +
		"\v\u01F7\x03\u01F8\x03\u01F8\x03\u01F8\x07\u01F8\u1E9C\n\u01F8\f\u01F8" +
		"\x0E\u01F8\u1E9F\v\u01F8\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9" +
		"\x05\u01F9\u1EA6\n\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9" +
		"\x03\u01F9\x03\u01F9\x03\u01F9\x05\u01F9\u1EB0\n\u01F9\x03\u01F9\x03\u01F9" +
		"\x03\u01F9\x05\u01F9\u1EB5\n\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x05\u01F9" +
		"\u1EBA\n\u01F9\x05\u01F9\u1EBC\n\u01F9\x03\u01FA\x03\u01FA\x03\u01FA\x03" +
		"\u01FA\x05\u01FA\u1EC2\n\u01FA\x03\u01FA\x03\u01FA\x03\u01FA\x03\u01FA" +
		"\x05\u01FA\u1EC8\n\u01FA\x03\u01FA\x05\u01FA\u1ECB\n\u01FA\x03\u01FA\x03" +
		"\u01FA\x03\u01FA\x03\u01FA\x03\u01FA\x05\u01FA\u1ED2\n\u01FA\x05\u01FA" +
		"\u1ED4\n\u01FA\x05\u01FA\u1ED6\n\u01FA\x03\u01FA\x05\u01FA\u1ED9\n\u01FA" +
		"\x05\u01FA\u1EDB\n\u01FA\x03\u01FB\x03\u01FB\x03\u01FB\x03\u01FB\x03\u01FC" +
		"\x03\u01FC\x03\u01FC\x03\u01FC\x03\u01FD\x03\u01FD\x03\u01FD\x03\u01FE" +
		"\x03\u01FE\x03\u01FE\x03\u01FE\x05\u01FE\u1EEC\n\u01FE\x03\u01FF\x03\u01FF" +
		"\x03\u01FF\x05\u01FF\u1EF1\n\u01FF\x05\u01FF\u1EF3\n\u01FF\x03\u0200\x03" +
		"\u0200\x03\u0200\x03\u0201\x03\u0201\x05\u0201\u1EFA\n\u0201\x03\u0202" +
		"\x03\u0202\x03\u0203\x03\u0203\x03\u0204\x03\u0204\x03\u0204\x03\u0204" +
		"\x03\u0205\x03\u0205\x03\u0205\x05\u0205\u1F07\n\u0205\x05\u0205\u1F09" +
		"\n\u0205\x03\u0206\x03\u0206\x03\u0206\x03\u0206\x05\u0206\u1F0F\n\u0206" +
		"\x03\u0207\x03\u0207\x03\u0208\x03\u0208\x03\u0208\x03\u0208\x07\u0208" +
		"\u1F17\n\u0208\f\u0208\x0E\u0208\u1F1A\v\u0208\x03\u0208\x03\u0208\x03" +
		"\u0209\x03\u0209\x03\u020A\x03\u020A\x05\u020A\u1F22\n\u020A\x03\u020B" +
		"\x03\u020B\x03\u020C\x03\u020C\x03\u020D\x03\u020D\x03\u020D\x03\u020D" +
		"\x03\u020D\x05\u020D\u1F2D\n\u020D\x03\u020D\x03\u020D\x03\u020E\x03\u020E" +
		"\x03\u020F\x03\u020F\x03\u0210\x03\u0210\x03\u0211\x03\u0211\x03\u0212" +
		"\x03\u0212\x03\u0213\x03\u0213\x03\u0214\x03\u0214\x03\u0215\x03\u0215" +
		"\x03\u0216\x03\u0216\x05\u0216\u1F43\n\u0216\x03\u0217\x03\u0217\x05\u0217" +
		"\u1F47\n\u0217\x03\u0218\x03\u0218\x03\u0219\x03\u0219\x03\u021A\x03\u021A" +
		"\x03\u021B\x03\u021B\x03\u021C\x03\u021C\x03\u021D\x03\u021D\x03\u021E" +
		"\x03\u021E\x03\u021F\x03\u021F\x03\u0220\x03\u0220\x03\u0221\x03\u0221" +
		"\x03\u0222\x03\u0222\x05\u0222\u1F5F\n\u0222\x03\u0223\x03\u0223\x03\u0223" +
		"\x03\u0224\x03\u0224\x03\u0224\x03\u0224\x03\u0224\x03\u0224\x05\u0224" +
		"\u1F6A\n\u0224\x05\u0224\u1F6C\n\u0224\x03\u0225\x03\u0225\x05\u0225\u1F70" +
		"\n\u0225\x03\u0226\x03\u0226\x03\u0226\x07\u0226\u1F75\n\u0226\f\u0226" +
		"\x0E\u0226\u1F78\v\u0226\x03\u0227\x03\u0227\x03\u0227\x07\u0227\u1F7D" +
		"\n\u0227\f\u0227\x0E\u0227\u1F80\v\u0227\x03\u0228\x03\u0228\x03\u0229" +
		"\x03\u0229\x05\u0229\u1F86\n\u0229\x03\u022A\x03\u022A\x03\u022B\x03\u022B" +
		"\x05\u022B\u1F8C\n\u022B\x03\u022C\x03\u022C\x03\u022D\x03\u022D\x03\u022E" +
		"\x03\u022E\x03\u022F\x03\u022F\x03\u0230\x03\u0230\x03\u0231\x03\u0231" +
		"\x03\u0231\x05\u0231\u1F9B\n\u0231\x03\u0232\x03\u0232\x05\u0232\u1F9F" +
		"\n\u0232\x03\u0233\x03\u0233\x03\u0233\x07\u0233\u1FA4\n\u0233\f\u0233" +
		"\x0E\u0233\u1FA7\v\u0233\x03\u0234\x03\u0234\x03\u0234\x03\u0234\x03\u0235" +
		"\x03\u0235\x05\u0235\u1FAF\n\u0235\x03\u0236\x03\u0236\x03\u0236\x05\u0236" +
		"\u1FB4\n\u0236\x05\u0236\u1FB6\n\u0236\x03\u0236\x03\u0236\x03\u0236\x03" +
		"\u0236\x05\u0236\u1FBC\n\u0236\x03\u0237\x03\u0237\x03\u0237\x03\u0238" +
		"\x03\u0238\x03\u0239\x03\u0239\x03\u023A\x03\u023A\x03\u023B\x03\u023B" +
		"\x03\u023B\x03\u023B\x03\u023B\x05\u023B\u1FCC\n\u023B\x03\u023C\x03\u023C" +
		"\x03\u023C\x03\u023C\x03\u023C\x03\u023C\x05\u023C\u1FD4\n\u023C\x03\u023C" +
		"\x05\u023C\u1FD7\n\u023C\x03\u023D\x03\u023D\x03\u023D\x03\u023D\x03\u023D" +
		"\x05\u023D\u1FDE\n\u023D\x03\u023E\x03\u023E\x03\u023E\x03\u023E\x07\u023E" +
		"\u1FE4\n\u023E\f\u023E\x0E\u023E\u1FE7\v\u023E\x03\u023E\x03\u023E\x03" +
		"\u023F\x03\u023F\x03\u023F\x05\u023F\u1FEE\n\u023F\x03\u0240\x03\u0240" +
		"\x03\u0240\x05\u0240\u1FF3\n\u0240\x03\u0241\x03\u0241\x03\u0241\x05\u0241" +
		"\u1FF8\n\u0241\x03\u0242\x05\u0242\u1FFB\n\u0242\x03\u0242\x03\u0242\x05" +
		"\u0242\u1FFF\n\u0242\x03\u0242\x07\u0242\u2002\n\u0242\f\u0242\x0E\u0242" +
		"\u2005\v\u0242\x03\u0243\x03\u0243\x03\u0244\x03\u0244\x03\u0244\x07\u0244" +
		"\u200C\n\u0244\f\u0244\x0E\u0244\u200F\v\u0244\x03\u0245\x03\u0245\x03" +
		"\u0246\x03\u0246\x03\u0247\x03\u0247\x03\u0248\x03\u0248\x03\u0248\x03" +
		"\u0248\x03\u0248\x03\u0248\x05\u0248\u201D\n\u0248\x03\u0249\x03\u0249" +
		"\x05\u0249\u2021\n\u0249\x03\u024A\x03\u024A\x03\u024B\x03\u024B\x03\u024B" +
		"\x03\u024B\x03\u024B\x03\u024B\x03\u024C\x03\u024C\x05\u024C\u202D\n\u024C" +
		"\x03\u024D\x03\u024D\x05\u024D\u2031\n\u024D\x03\u024E\x03\u024E\x05\u024E" +
		"\u2035\n\u024E\x03\u024F\x03\u024F\x05\u024F\u2039\n\u024F\x03\u0250\x03" +
		"\u0250\x03\u0250\x03\u0251\x03\u0251\x03\u0252\x03\u0252\x03\u0253\x03" +
		"\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x05\u0253\u2048\n\u0253" +
		"\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x03\u0254" +
		"\x03\u0254\x03\u0254\x03\u0254\x05\u0254\u2054\n\u0254\x03\u0255\x03\u0255" +
		"\x03\u0255\x03\u0255\x03\u0255\x03\u0255\x03\u0255\x03\u0255\x05\u0255" +
		"\u205E\n\u0255\x03\u0255\x03\u0255\x03\u0255\x03\u0255\x03\u0255\x05\u0255" +
		"\u2065\n\u0255\x05\u0255\u2067\n\u0255\x03\u0256\x03\u0256\x03\u0257\x03" +
		"\u0257\x03\u0258\x03\u0258\x03\u0258\x03\u0258\x03\u0258\x03\u0258\x03" +
		"\u0258\x03\u0258\x03\u0258\x03\u0258\x03\u0258\x05\u0258\u2078\n\u0258" +
		"\x03\u0258\x03\u0258\x03\u0258\x05\u0258\u207D\n\u0258\x05\u0258\u207F" +
		"\n\u0258\x03\u0259\x03\u0259\x03\u025A\x03\u025A\x03\u025B\x03\u025B\x03" +
		"\u025B\x05\u025B\u2088\n\u025B\x03\u025B\x03\u025B\x03\u025B\x05\u025B" +
		"\u208D\n\u025B\x05\u025B\u208F\n\u025B\x03\u025C\x03\u025C\x03\u025C\x03" +
		"\u025C\x05\u025C\u2095\n\u025C\x03\u025D\x03\u025D\x03\u025E\x03\u025E" +
		"\x03\u025E\x03\u025E\x03\u025E\x05\u025E\u209E\n\u025E\x03\u025F\x03\u025F" +
		"\x03\u025F\x03\u025F\x03\u025F\x03\u025F\x03\u025F\x03\u025F\x03\u025F" +
		"\x05\u025F\u20A9\n\u025F\x03\u025F\x02\x02\x07\u0116\u029E\u02A0\u02A8" +
		"\u02AA\u0260\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02" +
		"\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02" +
		"&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02" +
		"B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02" +
		"^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02" +
		"z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02" +
		"\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02" +
		"\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02" +
		"\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02" +
		"\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02" +
		"\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02" +
		"\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02" +
		"\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108" +
		"\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116" +
		"\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124" +
		"\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132" +
		"\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140" +
		"\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E" +
		"\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C" +
		"\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A" +
		"\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178" +
		"\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186" +
		"\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194" +
		"\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2" +
		"\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0" +
		"\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE" +
		"\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC" +
		"\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA" +
		"\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8" +
		"\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6" +
		"\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204" +
		"\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212" +
		"\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220" +
		"\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E" +
		"\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C" +
		"\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A" +
		"\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258" +
		"\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266" +
		"\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274" +
		"\x02\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282" +
		"\x02\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290" +
		"\x02\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E" +
		"\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC" +
		"\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA" +
		"\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8" +
		"\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6" +
		"\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02\u02E4" +
		"\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE\x02\u02F0\x02\u02F2" +
		"\x02\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC\x02\u02FE\x02\u0300" +
		"\x02\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A\x02\u030C\x02\u030E" +
		"\x02\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318\x02\u031A\x02\u031C" +
		"\x02\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326\x02\u0328\x02\u032A" +
		"\x02\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334\x02\u0336\x02\u0338" +
		"\x02\u033A\x02\u033C\x02\u033E\x02\u0340\x02\u0342\x02\u0344\x02\u0346" +
		"\x02\u0348\x02\u034A\x02\u034C\x02\u034E\x02\u0350\x02\u0352\x02\u0354" +
		"\x02\u0356\x02\u0358\x02\u035A\x02\u035C\x02\u035E\x02\u0360\x02\u0362" +
		"\x02\u0364\x02\u0366\x02\u0368\x02\u036A\x02\u036C\x02\u036E\x02\u0370" +
		"\x02\u0372\x02\u0374\x02\u0376\x02\u0378\x02\u037A\x02\u037C\x02\u037E" +
		"\x02\u0380\x02\u0382\x02\u0384\x02\u0386\x02\u0388\x02\u038A\x02\u038C" +
		"\x02\u038E\x02\u0390\x02\u0392\x02\u0394\x02\u0396\x02\u0398\x02\u039A" +
		"\x02\u039C\x02\u039E\x02\u03A0\x02\u03A2\x02\u03A4\x02\u03A6\x02\u03A8" +
		"\x02\u03AA\x02\u03AC\x02\u03AE\x02\u03B0\x02\u03B2\x02\u03B4\x02\u03B6" +
		"\x02\u03B8\x02\u03BA\x02\u03BC\x02\u03BE\x02\u03C0\x02\u03C2\x02\u03C4" +
		"\x02\u03C6\x02\u03C8\x02\u03CA\x02\u03CC\x02\u03CE\x02\u03D0\x02\u03D2" +
		"\x02\u03D4\x02\u03D6\x02\u03D8\x02\u03DA\x02\u03DC\x02\u03DE\x02\u03E0" +
		"\x02\u03E2\x02\u03E4\x02\u03E6\x02\u03E8\x02\u03EA\x02\u03EC\x02\u03EE" +
		"\x02\u03F0\x02\u03F2\x02\u03F4\x02\u03F6\x02\u03F8\x02\u03FA\x02\u03FC" +
		"\x02\u03FE\x02\u0400\x02\u0402\x02\u0404\x02\u0406\x02\u0408\x02\u040A" +
		"\x02\u040C\x02\u040E\x02\u0410\x02\u0412\x02\u0414\x02\u0416\x02\u0418" +
		"\x02\u041A\x02\u041C\x02\u041E\x02\u0420\x02\u0422\x02\u0424\x02\u0426" +
		"\x02\u0428\x02\u042A\x02\u042C\x02\u042E\x02\u0430\x02\u0432\x02\u0434" +
		"\x02\u0436\x02\u0438\x02\u043A\x02\u043C\x02\u043E\x02\u0440\x02\u0442" +
		"\x02\u0444\x02\u0446\x02\u0448\x02\u044A\x02\u044C\x02\u044E\x02\u0450" +
		"\x02\u0452\x02\u0454\x02\u0456\x02\u0458\x02\u045A\x02\u045C\x02\u045E" +
		"\x02\u0460\x02\u0462\x02\u0464\x02\u0466\x02\u0468\x02\u046A\x02\u046C" +
		"\x02\u046E\x02\u0470\x02\u0472\x02\u0474\x02\u0476\x02\u0478\x02\u047A" +
		"\x02\u047C\x02\u047E\x02\u0480\x02\u0482\x02\u0484\x02\u0486\x02\u0488" +
		"\x02\u048A\x02\u048C\x02\u048E\x02\u0490\x02\u0492\x02\u0494\x02\u0496" +
		"\x02\u0498\x02\u049A\x02\u049C\x02\u049E\x02\u04A0\x02\u04A2\x02\u04A4" +
		"\x02\u04A6\x02\u04A8\x02\u04AA\x02\u04AC\x02\u04AE\x02\u04B0\x02\u04B2" +
		"\x02\u04B4\x02\u04B6\x02\u04B8\x02\u04BA\x02\u04BC\x02\x02\x92\x03\x02" +
		"\u02F2\u02F3\x04\x02\u01B1\u01B1\u028F\u028F\x04\x02\u01C0\u01C0\u0263" +
		"\u0263\x03\x02\u02AC\u02AD\x04\x02\u01AC\u01AC\u01E9\u01E9\x04\x02\u010F" +
		"\u010F\u0259\u0259\x03\x02\u02F4\u02F5\x04\x02OO\xB6\xB6\x04\x02\u020A" +
		"\u020A\u0260\u0260\x06\x02\u014B\u014B\u01DE\u01DE\u0213\u0213\u025A\u025A" +
		"\x04\x02uu\xA3\xA3\x04\x02\u0113\u0113\u016A\u016A\x04\x02\u0112\u0112" +
		"\u0169\u0169\x04\x02\xEF\xEF\u0174\u0174\x05\x02\xD9\xD9\u015A\u015A\u0168" +
		"\u0168\x04\x02==\u01B4\u01B4\x05\x02\u01E2\u01E2\u0210\u0210\u0299\u0299" +
		"\x04\x02\x15\x15$$\x04\x02\u0156\u0156\u0289\u0289\x05\x02\u010E\u010E" +
		"\u020A\u020A\u022C\u022C\x04\x02\x96\x96\xED\xED\x06\x02\x96\x96\xB0\xB0" +
		"\xED\xED\u0105\u0105\x04\x02\u0181\u0181\u0184\u0187\x05\x02\u01E1\u01E1" +
		"\u0205\u0205\u022C\u022C\x04\x02\u0172\u0172\u02A1\u02A1\x04\x02cc\u022C" +
		"\u022C\x04\x02oo\u017A\u017A\x04\x02\u012C\u012C\u0223\u0223\x04\x02\u01E1" +
		"\u01E1\u022C\u022C\b\x02\u0141\u0141\u01AD\u01AD\u01E6\u01E6\u0205\u0205" +
		"\u0277\u0279\u0282\u0282\x04\x02\xF4\xF4\u0198\u0198\x04\x02\u017E\u0180" +
		"\u01A6\u01A6\x05\x02\u012C\u012C\u0256\u0256\u02CB\u02CB\x04\x02\u01B2" +
		"\u01B2\u01E3\u01E3\x04\x02\u021F\u021F\u0266\u0266\x04\x02\u01CE\u01CE" +
		"\u020D\u020D\x04\x02\u01AD\u01AD\u01E6\u01E6\x04\x02\u01FA\u01FA\u020A" +
		"\u020A\x04\x02\u020B\u020B\u021B\u021B\x04\x02\u0247\u0247\u02AE\u02AE" +
		"\x04\x02\x07\x0722\x04\x02\u0125\u0125\u0219\u0219\x04\x02\xBB\xBB\u01B7" +
		"\u01B7\x04\x02\u013D\u013D\u013F\u013F\x04\x02\u0119\u0119\u0143\u0143" +
		"\x03\x0223\x04\x02\x10\x10\u01E9\u01E9\x05\x02\xF1\xF1\u0178\u0178\u027B" +
		"\u027B\x04\x02\u0226\u0226\u0297\u0297\x04\x02\u01E0\u01E0\u02EF\u02EF" +
		"\x05\x02\u0166\u0166\u0254\u0254\u0289\u0289\x06\x02\u0210\u0210\u025B" +
		"\u025B\u0268\u0268\u0299\u0299\x0F\x02\x13\x13::\x87\x87\x93\x93\u0107" +
		"\u0107\u010B\u010B\u011A\u011A\u0151\u0151\u01E2\u01E2\u01E9\u01E9\u020B" +
		"\u020B\u0291\u0291\u029A\u029A\x06\x02\u012B\u012B\u0158\u0158\u016E\u016E" +
		"\u0171\u0171\x04\x02//UU\x04\x02\u01CD\u01CD\u01E9\u01E9\x04\x02\xF1\xF1" +
		"\u01E0\u01E0\x04\x02\x8C\x8C\u010E\u010E\x07\x02RR\x8C\x8C\x8F\x8F\xD7" +
		"\xD7\u010E\u010E\x05\x02\x8C\x8C\u010E\u010E\u016F\u016F\x04\x02]]\u0167" +
		"\u0167\x06\x02\u01AD\u01AD\u01B7\u01B7\u01E0\u01E0\u0245\u0245\x04\x02" +
		"\u012F\u012F\u02E6\u02E6\x05\x02\xB9\xB9\xE5\xE5\u0149\u0149\x04\x02\u01FD" +
		"\u01FD\u0214\u0214\x04\x02II\u0116\u0116\x05\x02\xA5\xA5\u020B\u020B\u021A" +
		"\u021A\x04\x02\x85\x85\u0173\u0173\x04\x02\u0149\u0149\u0170\u0170\b\x02" +
		"kk\xAA\xAA\xD8\xD8\u013C\u013C\u0153\u0153\u01AD\u01AD\x04\x02dd\u010D" +
		"\u010D\x07\x02ww\x9F\x9F\u0106\u0106\u0149\u0149\u016D\u016D\x07\x02\x82" +
		"\x82\x84\x84\x98\x98\u0139\u0139\u01B7\u01B7\x04\x02\u016E\u016E\u02E6" +
		"\u02E6\x04\x02zz\x91\x91\x04\x02\u01E3\u01E4\u01F5\u01F5\x05\x02\u016B" +
		"\u016B\u01F7\u01F7\u0293\u0293\x04\x02\u0192\u0192\u01B0\u01B0\x04\x02" +
		"\u0195\u0195\u024D\u024D\x04\x02BB\u01AD\u01AD\x04\x02\u0181\u0181\u0183" +
		"\u0188\x05\x02\u018B\u018D\u01E7\u01E7\u023A\u023A\x03\x02\u0189\u018A" +
		"\x03\x02\u0190\u0191\x04\x02\u0189\u018A\u018F\u018F\x03\x02\u01B9\u01BB" +
		"\x06\x02\u02C6\u02C7\u02D4\u02D4\u02D6\u02D6\u02D8\u02D8\x04\x02\u02CC" +
		"\u02CC\u02CE\u02CE\x04\x02\u02C9\u02C9\u02CD\u02CD\x04\x02\x96\x96\xB0" +
		"\xB0\x04\x02\u020A\u020A\u02D7\u02D7\x04\x02<<\u014D\u014D\x03\x02\u01D7" +
		"\u01D8\x03\x02\u0160\u0161\x05\x02qr\u015F\u015F\u0162\u0162\x04\x02\u017C" +
		"\u017C\u023F\u023F\x04\x02\u017C\u017C\u018E\u018E\x07\x02\u01D9\u01DC" +
		"\u0206\u0208\u0236\u0237\u0267\u0267\u02B0\u02B0\v\x02ss\xA0\xA0\xDB\xDB" +
		"\xDD\xDD\xE1\xE1\u010C\u010C\u0133\u0133\u0175\u0175\u017B\u017B\x05\x02" +
		"\u01CA\u01CA\u01F3\u01F3\u0294\u0294\x04\x02\xF2\xF2\u012D\u012D\f\x02" +
		"PPVVZZfhnn\xDA\xDA\xE6\xE6\u0132\u0132\u014C\u014C\u0155\u0155\x04\x02" +
		"\u0281\u0281\u02A8\u02A8\x05\x02\x7F\x7F\x97\x97\u01E0\u01E0\x05\x02|" +
		"|\xD8\xD8\u01E0\u01E0\x05\x02\x92\x92\xFA\xFA\u0137\u0137\x05\x02NN\x9E" +
		"\x9E\u0130\u0130\x03\x02\u02B5\u02B6\x04\x02\u0164\u0164\u029C\u029C\x07" +
		"\x02\u01B6\u01B6\u0213\u0213\u0233\u0233\u0271\u0271\u028D\u028D\x06\x02";
	private static readonly _serializedATNSegment4: string =
		"\x97\x97\u01DE\u01DE\u01F9\u01F9\u0243\u0243\x03\x02LM\x04\x02\u0227\u0227" +
		"\u0232\u0232\x06\x02\x99\x9A\xB4\xB4\xE2\xE4\u0102\u0103\x05\x02..\u0298" +
		"\u0298\u02B1\u02B1\x03\x02\u0146\u0148\x04\x02\v\v\u0157\u0157\b\x02^" +
		"^``\x7F\x7F\x97\x97\u0114\u0114\u01E0\u01E0\x05\x02\x1D\x1D\x96\x96\xB0" +
		"\xB0\x04\x02||\xD8\xD8\x04\x02\xB5\xB5\u0256\u0256\x04\x02\xBA\xBA\xDE" +
		"\xDE\x04\x02oo\u020B\u020B\x05\x02\u020E\u020E\u0214\u0214\u0250\u0250" +
		"\x04\x02\u027C\u027C\u028A\u028A\x04\x02\u0244\u0244\u0246\u0246\x04\x02" +
		"\xB6\xB6\u0241\u0241\x04\x02\u0306\u0306\u0308\u0308\x05\x02\u017E\u0180" +
		"\u01A7\u01A7\u01A9\u01AA\x04\x02\u017E\u0180\u01A7\u01A7\x04\x02\u017E" +
		"\u0180\u01A9\u01AA\x03\x02\u01A7\u01A8\x04\x02\u01F7\u01F7\u0293\u0293" +
		"\x04\x02\u01A5\u01A5\u0242\u0242\x03\x02\u0181\u0182\x07\x02\x9D\x9D\xB6" +
		"\xB6\u0136\u0136\u02B2\u02B2\u02C1\u02C1\x05\x02\x13\x13::\u02EA\u02EA" +
		"\x10\x02\x04\x04\x07\v\r\x12\x14\x15\x18\x19\x1B\x1D$%\'(*+./2699\xA4" +
		"\xA4\u02C5\u02C5\v\x02\x87\x87\x93\x93\xF1\xF1\u0107\u0107\u010B\u010B" +
		"\u011A\u011A\u011D\u011D\u0151\u0151\u02E5\u02E5=\x02\x03\x03\x05\x06" +
		"\f\f\x16\x17\x1A\x1A\x1E!##&&)),-0178;@BCEikkmvx\x86\x88\x92\x94\x9C\x9E" +
		"\xA3\xA5\xA7\xA9\xB5\xB7\xD2\xD4\xF0\xF2\xF4\xF7\u0106\u0108\u010A\u010C" +
		"\u0112\u0114\u0119\u011B\u011C\u011E\u012B\u012D\u012E\u0130\u0135\u0137" +
		"\u013F\u0141\u0150\u0152\u0164\u0167\u017B\u01F1\u01F1\u01F4\u01F4\u0247" +
		"\u0247\u02A0\u02A0\u02AD\u02AD\u02B3\u02B6\u02B8\u02B8\u02BD\u02BF\u02C2" +
		"\u02C3\u02C8\u02C8\u02CA\u02CA\u02D1\u02D2\u02D5\u02D5\u02D7\u02D7\u02D9" +
		"\u02DA\u02DE\u02E4\u02E7\u02E9\u02EB\u02F5\u02F7\u02FA\u02FC\u02FC\u02FF" +
		"\u0302\b\x02\x03\x12\x149\u02B3\u02B3\u02B5\u02B6\u02C5\u02C5\u02F0\u02F3" +
		"\"\x02;@Bkm\x86\x88\x92\x94\xA3\xA5\xA7\xA9\xF0\xF2\xF5\xF7\u0106\u0108" +
		"\u010A\u010C\u0119\u011B\u011C\u011E\u012B\u012D\u012E\u0130\u0165\u0167" +
		"\u017B\u01AF\u01AF\u02B8\u02B8\u02BD\u02BF\u02C2\u02C4\u02C8\u02C8\u02CA" +
		"\u02CA\u02D1\u02D2\u02D5\u02D5\u02D7\u02D7\u02D9\u02DA\u02DE\u02E4\u02E7" +
		"\u02E8\u02EC\u02ED\u02EF\u02EF\u02F4\u02F5\u02F7\u02F8\x07\x02ll\xA4\xA4" +
		"\u012C\u012C\u012F\u012F\u0166\u0166\b\x02\u0151\u0151\u01F1\u01F1\u01F4" +
		"\u01F4\u0247\u0247\u02A0\u02A0\u02AD\u02AD\x02\u2500\x02\u04C1\x03\x02" +
		"\x02\x02\x04\u04C8\x03\x02\x02\x02\x06\u04EF\x03\x02\x02\x02\b\u04F1\x03" +
		"\x02\x02\x02\n\u050E\x03\x02\x02\x02\f\u051D\x03\x02\x02\x02\x0E\u0543" +
		"\x03\x02\x02\x02\x10\u054C\x03\x02\x02\x02\x12\u0559\x03\x02\x02\x02\x14" +
		"\u055B\x03\x02\x02\x02\x16\u0560\x03\x02\x02\x02\x18\u0578\x03\x02\x02" +
		"\x02\x1A\u0581\x03\x02\x02\x02\x1C\u0583\x03\x02\x02\x02\x1E\u0592\x03" +
		"\x02\x02\x02 \u05F5\x03\x02\x02\x02\"\u05F9\x03\x02\x02\x02$\u0609\x03" +
		"\x02\x02\x02&\u0690\x03\x02\x02\x02(\u0695\x03\x02\x02\x02*\u0697\x03" +
		"\x02\x02\x02,\u0699\x03\x02\x02\x02.\u06A7\x03\x02\x02\x020\u06AF\x03" +
		"\x02\x02\x022\u06BF\x03\x02\x02\x024\u06C1\x03\x02\x02\x026\u06C5\x03" +
		"\x02\x02\x028\u06CA\x03\x02\x02\x02:\u06CC\x03\x02\x02\x02<\u06D7\x03" +
		"\x02\x02\x02>\u06FC\x03\x02\x02\x02@\u0704\x03\x02\x02\x02B\u070E\x03" +
		"\x02\x02\x02D\u0710\x03\x02\x02\x02F\u0724\x03\x02\x02\x02H\u072D\x03" +
		"\x02\x02\x02J\u0730\x03\x02\x02\x02L\u073D\x03\x02\x02\x02N\u0742\x03" +
		"\x02\x02\x02P\u0746\x03\x02\x02\x02R\u074D\x03\x02\x02\x02T\u0762\x03" +
		"\x02\x02\x02V\u0771\x03\x02\x02\x02X\u0774\x03\x02\x02\x02Z\u0793\x03" +
		"\x02\x02\x02\\\u079D\x03\x02\x02\x02^\u07A0\x03\x02\x02\x02`\u07A9\x03" +
		"\x02\x02\x02b\u07AB\x03\x02\x02\x02d\u07B7\x03\x02\x02\x02f\u07D0\x03" +
		"\x02\x02\x02h\u07EB\x03\x02\x02\x02j\u07F9\x03\x02\x02\x02l\u07FC\x03" +
		"\x02\x02\x02n\u0811\x03\x02\x02\x02p\u0814\x03\x02\x02\x02r\u084D\x03" +
		"\x02\x02\x02t\u084F\x03\x02\x02\x02v\u0853\x03\x02\x02\x02x\u085C\x03" +
		"\x02\x02\x02z\u086C\x03\x02\x02\x02|\u086E\x03\x02\x02\x02~\u0876\x03" +
		"\x02\x02\x02\x80\u0890\x03\x02\x02\x02\x82\u0892\x03\x02\x02\x02\x84\u089E" +
		"\x03\x02\x02\x02\x86\u08AD\x03\x02\x02\x02\x88\u08AF\x03\x02\x02\x02\x8A" +
		"\u08B2\x03\x02\x02\x02\x8C\u08C8\x03\x02\x02\x02\x8E\u08CA\x03\x02\x02" +
		"\x02\x90\u08D0\x03\x02\x02\x02\x92\u08D6\x03\x02\x02\x02\x94\u08DC\x03" +
		"\x02\x02\x02\x96\u08E2\x03\x02\x02\x02\x98\u08E8\x03\x02\x02\x02\x9A\u08EF" +
		"\x03\x02\x02\x02\x9C\u08F7\x03\x02\x02\x02\x9E\u08F9\x03\x02\x02\x02\xA0" +
		"\u08FF\x03\x02\x02\x02\xA2\u0905\x03\x02\x02\x02\xA4\u090C\x03\x02\x02" +
		"\x02\xA6\u091E\x03\x02\x02\x02\xA8\u0920\x03\x02\x02\x02\xAA\u0924\x03" +
		"\x02\x02\x02\xAC\u0929\x03\x02\x02\x02\xAE\u0939\x03\x02\x02\x02\xB0\u093E" +
		"\x03\x02\x02\x02\xB2\u095F\x03\x02\x02\x02\xB4\u097E\x03\x02\x02\x02\xB6" +
		"\u098F\x03\x02\x02\x02\xB8\u0991\x03\x02\x02\x02\xBA\u09A5\x03\x02\x02" +
		"\x02\xBC\u09AB\x03\x02\x02\x02\xBE\u09B1\x03\x02\x02\x02\xC0\u09B7\x03" +
		"\x02\x02\x02\xC2\u09BE\x03\x02\x02\x02\xC4\u09C7\x03\x02\x02\x02\xC6\u09D8" +
		"\x03\x02\x02\x02\xC8\u09DA\x03\x02\x02\x02\xCA\u09E1\x03\x02\x02\x02\xCC" +
		"\u09EB\x03\x02\x02\x02\xCE\u09F9\x03\x02\x02\x02\xD0\u09FF\x03\x02\x02" +
		"\x02\xD2\u0A07\x03\x02\x02\x02\xD4\u0A0D\x03\x02\x02\x02\xD6\u0A15\x03" +
		"\x02\x02\x02\xD8\u0A1B\x03\x02\x02\x02\xDA\u0A25\x03\x02\x02\x02\xDC\u0A29" +
		"\x03\x02\x02\x02\xDE\u0A2F\x03\x02\x02\x02\xE0\u0A34\x03\x02\x02\x02\xE2" +
		"\u0A3F\x03\x02\x02\x02\xE4\u0A6A\x03\x02\x02\x02\xE6\u0A70\x03\x02\x02" +
		"\x02\xE8\u0A72\x03\x02\x02\x02\xEA\u0A79\x03\x02\x02\x02\xEC\u0A97\x03" +
		"\x02\x02\x02\xEE\u0A99\x03\x02\x02\x02\xF0\u0AB8\x03\x02\x02\x02\xF2\u0ABF" +
		"\x03\x02\x02\x02\xF4\u0AC3\x03\x02\x02\x02\xF6\u0ACB\x03\x02\x02\x02\xF8" +
		"\u0AD5\x03\x02\x02\x02\xFA\u0AD7\x03\x02\x02\x02\xFC\u0AE9\x03\x02\x02" +
		"\x02\xFE\u0AF5\x03\x02\x02\x02\u0100\u0AFA\x03\x02\x02\x02\u0102\u0B00" +
		"\x03\x02\x02\x02\u0104\u0B21\x03\x02\x02\x02\u0106\u0B23\x03\x02\x02\x02" +
		"\u0108\u0B2B\x03\x02\x02\x02\u010A\u0B34\x03\x02\x02\x02\u010C\u0B3C\x03" +
		"\x02\x02\x02\u010E\u0B48\x03\x02\x02\x02\u0110\u0B5C\x03\x02\x02\x02\u0112" +
		"\u0B65\x03\x02\x02\x02\u0114\u0B89\x03\x02\x02\x02\u0116\u0B96\x03\x02" +
		"\x02\x02\u0118\u0BA6\x03\x02\x02\x02\u011A\u0BAD\x03\x02\x02\x02\u011C" +
		"\u0BC8\x03\x02\x02\x02\u011E\u0BCA\x03\x02\x02\x02\u0120\u0BCC\x03\x02" +
		"\x02\x02\u0122\u0BCF\x03\x02\x02\x02\u0124\u0BD2\x03\x02\x02\x02\u0126" +
		"\u0BD9\x03\x02\x02\x02\u0128\u0BDB\x03\x02\x02\x02\u012A\u0BF9\x03\x02" +
		"\x02\x02\u012C\u0C05\x03\x02\x02\x02\u012E\u0C08\x03\x02\x02\x02\u0130" +
		"\u0C11\x03\x02\x02\x02\u0132\u0C15\x03\x02\x02\x02\u0134\u0C1A\x03\x02" +
		"\x02\x02\u0136\u0C27\x03\x02\x02\x02\u0138\u0C2C\x03\x02\x02\x02\u013A" +
		"\u0C30\x03\x02\x02\x02\u013C\u0C40\x03\x02\x02\x02\u013E\u0C42\x03\x02" +
		"\x02\x02\u0140\u0C54\x03\x02\x02\x02\u0142\u0C56\x03\x02\x02\x02\u0144" +
		"\u0C5F\x03\x02\x02\x02\u0146\u0C6B\x03\x02\x02\x02\u0148\u0C72\x03\x02" +
		"\x02\x02\u014A\u0C7D\x03\x02\x02\x02\u014C\u0C7F\x03\x02\x02\x02\u014E" +
		"\u0C83\x03\x02\x02\x02\u0150\u0C85\x03\x02\x02\x02\u0152\u0C8A\x03\x02" +
		"\x02\x02\u0154\u0C9A\x03\x02\x02\x02\u0156\u0CAB\x03\x02\x02\x02\u0158" +
		"\u0CB0\x03\x02\x02\x02\u015A\u0CB5\x03\x02\x02\x02\u015C\u0CB9\x03\x02" +
		"\x02\x02\u015E\u0CC7\x03\x02\x02\x02\u0160\u0CCA\x03\x02\x02\x02\u0162" +
		"\u0CD0\x03\x02\x02\x02\u0164\u0CDD\x03\x02\x02\x02\u0166\u0CE5\x03\x02" +
		"\x02\x02\u0168\u0CFF\x03\x02\x02\x02\u016A\u0D0C\x03\x02\x02\x02\u016C" +
		"\u0D13\x03\x02\x02\x02\u016E\u0D15\x03\x02\x02\x02\u0170\u0D21\x03\x02" +
		"\x02\x02\u0172\u0D23\x03\x02\x02\x02\u0174\u0D2D\x03\x02\x02\x02\u0176" +
		"\u0D45\x03\x02\x02\x02\u0178\u0D47\x03\x02\x02\x02\u017A\u0D4E\x03\x02" +
		"\x02\x02\u017C\u0D58\x03\x02\x02\x02\u017E\u0D7B\x03\x02\x02\x02\u0180" +
		"\u0D85\x03\x02\x02\x02\u0182\u0D87\x03\x02\x02\x02\u0184\u0D8B\x03\x02" +
		"\x02\x02\u0186\u0D93\x03\x02\x02\x02\u0188\u0D95\x03\x02\x02\x02\u018A" +
		"\u0D9A\x03\x02\x02\x02\u018C\u0D9E\x03\x02\x02\x02\u018E\u0DBA\x03\x02" +
		"\x02\x02\u0190\u0DBC\x03\x02\x02\x02\u0192\u0DBE\x03\x02\x02\x02\u0194" +
		"\u0DC6\x03\x02\x02\x02\u0196\u0DC8\x03\x02\x02\x02\u0198\u0DD0\x03\x02" +
		"\x02\x02\u019A\u0DDA\x03\x02\x02\x02\u019C\u0DDE\x03\x02\x02\x02\u019E" +
		"\u0DF7\x03\x02\x02\x02\u01A0\u0E12\x03\x02\x02\x02\u01A2\u0E14\x03\x02" +
		"\x02\x02\u01A4\u0E1E\x03\x02\x02\x02\u01A6\u0E3D\x03\x02\x02\x02\u01A8" +
		"\u0E55\x03\x02\x02\x02\u01AA\u0E57\x03\x02\x02\x02\u01AC\u0E65\x03\x02" +
		"\x02\x02\u01AE\u0E67\x03\x02\x02\x02\u01B0\u0E8A\x03\x02\x02\x02\u01B2" +
		"\u0E8C\x03\x02\x02\x02\u01B4\u0EB6\x03\x02\x02\x02\u01B6\u0EC6\x03\x02" +
		"\x02\x02\u01B8\u0EC8\x03\x02\x02\x02\u01BA\u0ED0\x03\x02\x02\x02\u01BC" +
		"\u0ED9\x03\x02\x02\x02\u01BE\u0EE0\x03\x02\x02\x02\u01C0\u0F3D\x03\x02" +
		"\x02\x02\u01C2\u0F41\x03\x02\x02\x02\u01C4\u0F45\x03\x02\x02\x02\u01C6" +
		"\u0F53\x03\x02\x02\x02\u01C8\u0F55\x03\x02\x02\x02\u01CA\u0F62\x03\x02" +
		"\x02\x02\u01CC\u0FA2\x03\x02\x02\x02\u01CE\u0FA4\x03\x02\x02\x02\u01D0" +
		"\u0FAC\x03\x02\x02\x02\u01D2\u0FB4\x03\x02\x02\x02\u01D4\u0FBC\x03\x02" +
		"\x02\x02\u01D6\u0FBE\x03\x02\x02\x02\u01D8\u0FDB\x03\x02\x02\x02\u01DA" +
		"\u0FE4\x03\x02\x02\x02\u01DC\u1003\x03\x02\x02\x02\u01DE\u1005\x03\x02" +
		"\x02\x02\u01E0\u100D\x03\x02\x02\x02\u01E2\u100F\x03\x02\x02\x02\u01E4" +
		"\u101D\x03\x02\x02\x02\u01E6\u101F\x03\x02\x02\x02\u01E8\u1025\x03\x02" +
		"\x02\x02\u01EA\u102D\x03\x02\x02\x02\u01EC\u1052\x03\x02\x02\x02\u01EE" +
		"\u1054\x03\x02\x02\x02\u01F0\u1063\x03\x02\x02\x02\u01F2\u1065\x03\x02" +
		"\x02\x02\u01F4\u109C\x03\x02\x02\x02\u01F6\u109E\x03\x02\x02\x02\u01F8" +
		"\u10A1\x03\x02\x02\x02\u01FA\u10BA\x03\x02\x02\x02\u01FC\u10C3\x03\x02" +
		"\x02\x02\u01FE\u10C5\x03\x02\x02\x02\u0200\u10CA\x03\x02\x02\x02\u0202" +
		"\u10F8\x03\x02\x02\x02\u0204\u10FA\x03\x02\x02\x02\u0206\u1102\x03\x02" +
		"\x02\x02\u0208\u1133\x03\x02\x02\x02\u020A\u1140\x03\x02\x02\x02\u020C" +
		"\u1142\x03\x02\x02\x02\u020E\u1145\x03\x02\x02\x02\u0210\u1150\x03\x02" +
		"\x02\x02\u0212\u1155\x03\x02\x02\x02\u0214\u1158\x03\x02\x02\x02\u0216" +
		"\u1167\x03\x02\x02\x02\u0218\u1199\x03\x02\x02\x02\u021A\u119B\x03\x02" +
		"\x02\x02\u021C\u119D\x03\x02\x02\x02\u021E\u11CE\x03\x02\x02\x02\u0220" +
		"\u11E0\x03\x02\x02\x02\u0222\u11E2\x03\x02\x02\x02\u0224\u11F2\x03\x02" +
		"\x02\x02\u0226\u11FE\x03\x02\x02\x02\u0228\u1217\x03\x02\x02\x02\u022A" +
		"\u1219\x03\x02\x02\x02\u022C\u1221\x03\x02\x02\x02\u022E\u1252\x03\x02" +
		"\x02\x02\u0230\u1261\x03\x02\x02\x02\u0232\u1266\x03\x02\x02\x02\u0234" +
		"\u1268\x03\x02\x02\x02\u0236\u1280\x03\x02\x02\x02\u0238\u1282\x03\x02" +
		"\x02\x02\u023A\u12BD\x03\x02\x02\x02\u023C\u12C8\x03\x02\x02\x02\u023E" +
		"\u12CA\x03\x02\x02\x02\u0240\u12CD\x03\x02\x02\x02\u0242\u12DA\x03\x02" +
		"\x02\x02\u0244\u12F6\x03\x02\x02\x02\u0246\u12FE\x03\x02\x02\x02\u0248" +
		"\u1300\x03\x02\x02\x02\u024A\u130B\x03\x02\x02\x02\u024C\u130D\x03\x02" +
		"\x02\x02\u024E\u1315\x03\x02\x02\x02\u0250\u1317\x03\x02\x02\x02\u0252" +
		"\u13FB\x03\x02\x02\x02\u0254\u1402\x03\x02\x02\x02\u0256\u1404\x03\x02" +
		"\x02\x02\u0258\u1406\x03\x02\x02\x02\u025A\u1410\x03\x02\x02\x02\u025C" +
		"\u1437\x03\x02\x02\x02\u025E\u143B\x03\x02\x02\x02\u0260\u143D\x03\x02" +
		"\x02\x02\u0262\u1445\x03\x02\x02\x02\u0264\u1449\x03\x02\x02\x02\u0266" +
		"\u1451\x03\x02\x02\x02\u0268\u145A\x03\x02\x02\x02\u026A\u145C\x03\x02" +
		"\x02\x02\u026C\u1473\x03\x02\x02\x02\u026E\u1475\x03\x02\x02\x02\u0270" +
		"\u1477\x03\x02\x02\x02\u0272\u1487\x03\x02\x02\x02\u0274\u1493\x03\x02" +
		"\x02\x02\u0276\u1495\x03\x02\x02\x02\u0278\u149D\x03\x02\x02\x02\u027A" +
		"\u14A5\x03\x02\x02\x02\u027C\u14AE\x03\x02\x02\x02\u027E\u14B0\x03\x02" +
		"\x02\x02\u0280\u14C2\x03\x02\x02\x02\u0282\u14D0\x03\x02\x02\x02\u0284" +
		"\u14D5\x03\x02\x02\x02\u0286\u14DB\x03\x02\x02\x02\u0288\u14DD\x03\x02" +
		"\x02\x02\u028A\u14ED\x03\x02\x02\x02\u028C\u14F5\x03\x02\x02\x02\u028E" +
		"\u14FF\x03\x02\x02\x02\u0290\u150C\x03\x02\x02\x02\u0292\u150E\x03\x02" +
		"\x02\x02\u0294\u1514\x03\x02\x02\x02\u0296\u152F\x03\x02\x02\x02\u0298" +
		"\u1531\x03\x02\x02\x02\u029A\u1534\x03\x02\x02\x02\u029C\u1537\x03\x02" +
		"\x02\x02\u029E\u1544\x03\x02\x02\x02\u02A0\u1554\x03\x02\x02\x02\u02A2" +
		"\u156B\x03\x02\x02\x02\u02A4\u156D\x03\x02\x02\x02\u02A6\u1592\x03\x02" +
		"\x02\x02\u02A8\u1594\x03\x02\x02\x02\u02AA\u161C\x03\x02\x02\x02\u02AC" +
		"\u1629\x03\x02\x02\x02\u02AE\u1632\x03\x02\x02\x02\u02B0\u16B7\x03\x02" +
		"\x02\x02\u02B2\u16B9\x03\x02\x02\x02\u02B4\u16E8\x03\x02\x02\x02\u02B6" +
		"\u16EA\x03\x02\x02\x02\u02B8\u16EF\x03\x02\x02\x02\u02BA\u16F8\x03\x02" +
		"\x02\x02\u02BC\u170B\x03\x02\x02\x02\u02BE\u170E\x03\x02\x02\x02\u02C0" +
		"\u1717\x03\x02\x02\x02\u02C2\u1719\x03\x02\x02\x02\u02C4\u1730\x03\x02" +
		"\x02\x02\u02C6\u1843\x03\x02\x02\x02\u02C8\u1864\x03\x02\x02\x02\u02CA" +
		"\u1866\x03\x02\x02\x02\u02CC\u186C\x03\x02\x02\x02\u02CE\u186F\x03\x02" +
		"\x02\x02\u02D0\u187E\x03\x02\x02\x02\u02D2\u1886\x03\x02\x02\x02\u02D4" +
		"\u1888\x03\x02\x02\x02\u02D6\u18A5\x03\x02\x02\x02\u02D8\u18C6\x03\x02" +
		"\x02\x02\u02DA\u18C8\x03\x02\x02\x02\u02DC\u18D0\x03\x02\x02\x02\u02DE" +
		"\u18DA\x03\x02\x02\x02\u02E0\u18DF\x03\x02\x02\x02\u02E2\u18E1\x03\x02" +
		"\x02\x02\u02E4\u18F7\x03\x02\x02\x02\u02E6\u18F9\x03\x02\x02\x02\u02E8" +
		"\u18FC\x03\x02\x02\x02\u02EA\u18FF\x03\x02\x02\x02\u02EC\u192F\x03\x02" +
		"\x02\x02\u02EE\u1931\x03\x02\x02\x02\u02F0\u193C\x03\x02\x02\x02\u02F2" +
		"\u193E\x03\x02\x02\x02\u02F4\u1940\x03\x02\x02\x02\u02F6\u1944\x03\x02" +
		"\x02\x02\u02F8\u1946\x03\x02\x02\x02\u02FA\u1948\x03\x02\x02\x02\u02FC" +
		"\u194C\x03\x02\x02\x02\u02FE\u1950\x03\x02\x02\x02\u0300\u1954\x03\x02" +
		"\x02\x02\u0302\u195C\x03\x02\x02\x02\u0304\u1960\x03\x02\x02\x02\u0306" +
		"\u1968\x03\x02\x02\x02\u0308\u196A\x03\x02\x02\x02\u030A\u197C\x03\x02" +
		"\x02\x02\u030C\u197E\x03\x02\x02\x02\u030E\u1981\x03\x02\x02\x02\u0310" +
		"\u1986\x03\x02\x02\x02\u0312\u198E\x03\x02\x02\x02\u0314\u1994\x03\x02" +
		"\x02\x02\u0316\u1998\x03\x02\x02\x02\u0318\u19A9\x03\x02\x02\x02\u031A" +
		"\u19AC\x03\x02\x02\x02\u031C\u19B1\x03\x02\x02\x02\u031E\u19B3\x03\x02" +
		"\x02\x02\u0320\u19B6\x03\x02\x02\x02\u0322\u19BF\x03\x02\x02\x02\u0324" +
		"\u19C7\x03\x02\x02\x02\u0326\u19C9\x03\x02\x02\x02\u0328\u19CE\x03\x02" +
		"\x02\x02\u032A\u19D5\x03\x02\x02\x02\u032C\u19DF\x03\x02\x02\x02\u032E" +
		"\u19E7\x03\x02\x02\x02\u0330\u19E9\x03\x02\x02\x02\u0332\u19F3\x03\x02" +
		"\x02\x02\u0334\u19FB\x03\x02\x02\x02\u0336\u19FD\x03\x02\x02\x02\u0338" +
		"\u1A03\x03\x02\x02\x02\u033A\u1A18\x03\x02\x02\x02\u033C\u1A1A\x03\x02" +
		"\x02\x02\u033E\u1A20\x03\x02\x02\x02\u0340\u1A23\x03\x02\x02\x02\u0342" +
		"\u1A26\x03\x02\x02\x02\u0344\u1A44\x03\x02\x02\x02\u0346\u1A48\x03\x02" +
		"\x02\x02\u0348\u1A4F\x03\x02\x02\x02\u034A\u1A56\x03\x02\x02\x02\u034C" +
		"\u1A58\x03\x02\x02\x02\u034E\u1A68\x03\x02\x02\x02\u0350\u1A7B\x03\x02" +
		"\x02\x02\u0352\u1A7F\x03\x02\x02\x02\u0354\u1A82\x03\x02\x02\x02\u0356" +
		"\u1A85\x03\x02\x02\x02\u0358\u1A9D\x03\x02\x02\x02\u035A\u1A9F\x03\x02" +
		"\x02\x02\u035C\u1AA7\x03\x02\x02\x02\u035E\u1AA9\x03\x02\x02\x02\u0360" +
		"\u1AAD\x03\x02\x02\x02\u0362\u1AFC\x03\x02\x02\x02\u0364\u1AFE\x03\x02" +
		"\x02\x02\u0366\u1B02\x03\x02\x02\x02\u0368\u1B5C\x03\x02\x02\x02\u036A" +
		"\u1B5E\x03\x02\x02\x02\u036C\u1B60\x03\x02\x02\x02\u036E\u1B70\x03\x02" +
		"\x02\x02\u0370\u1B72\x03\x02\x02\x02\u0372\u1B92\x03\x02\x02\x02\u0374" +
		"\u1B94\x03\x02\x02\x02\u0376\u1B9F\x03\x02\x02\x02\u0378\u1BA6\x03\x02" +
		"\x02\x02\u037A\u1BB6\x03\x02\x02\x02\u037C\u1BBC\x03\x02\x02\x02\u037E" +
		"\u1BBE\x03\x02\x02\x02\u0380\u1BC2\x03\x02\x02\x02\u0382\u1BCD\x03\x02" +
		"\x02\x02\u0384\u1BCF\x03\x02\x02\x02\u0386\u1BD1\x03\x02\x02\x02\u0388" +
		"\u1BD8\x03\x02\x02\x02\u038A\u1BDA\x03\x02\x02\x02\u038C\u1BDC\x03\x02" +
		"\x02\x02\u038E\u1C72\x03\x02\x02\x02\u0390\u1C77\x03\x02\x02\x02\u0392" +
		"\u1C7E\x03\x02\x02\x02\u0394\u1C80\x03\x02\x02\x02\u0396\u1C88\x03\x02" +
		"\x02\x02\u0398\u1C9A\x03\x02\x02\x02\u039A\u1CA2\x03\x02\x02\x02\u039C" +
		"\u1CAA\x03\x02\x02\x02\u039E\u1CAC\x03\x02\x02\x02\u03A0\u1CB0\x03\x02" +
		"\x02\x02\u03A2\u1CB8\x03\x02\x02\x02\u03A4\u1CBF\x03\x02\x02\x02\u03A6" +
		"\u1CC1\x03\x02\x02\x02\u03A8\u1CCC\x03\x02\x02\x02\u03AA\u1D51\x03\x02" +
		"\x02\x02\u03AC\u1D55\x03\x02\x02\x02\u03AE\u1D58\x03\x02\x02\x02\u03B0" +
		"\u1D61\x03\x02\x02\x02\u03B2\u1D6A\x03\x02\x02\x02\u03B4\u1D72\x03\x02" +
		"\x02\x02\u03B6\u1DA0\x03\x02\x02\x02\u03B8\u1DA2\x03\x02\x02\x02\u03BA" +
		"\u1DB7\x03\x02\x02\x02\u03BC\u1DBC\x03\x02\x02\x02\u03BE\u1DC7\x03\x02" +
		"\x02\x02\u03C0\u1DF4\x03\x02\x02\x02\u03C2\u1E18\x03\x02\x02\x02\u03C4" +
		"\u1E1A\x03\x02\x02\x02\u03C6\u1E22\x03\x02\x02\x02\u03C8\u1E2F\x03\x02" +
		"\x02\x02\u03CA\u1E31\x03\x02\x02\x02\u03CC\u1E35\x03\x02\x02\x02\u03CE" +
		"\u1E38\x03\x02\x02\x02\u03D0\u1E3D\x03\x02\x02\x02\u03D2\u1E41\x03\x02" +
		"\x02\x02\u03D4\u1E44\x03\x02\x02\x02\u03D6\u1E47\x03\x02\x02\x02\u03D8" +
		"\u1E4B\x03\x02\x02\x02\u03DA\u1E51\x03\x02\x02\x02\u03DC\u1E59\x03\x02" +
		"\x02\x02\u03DE\u1E61\x03\x02\x02\x02\u03E0\u1E67\x03\x02\x02\x02\u03E2" +
		"\u1E6A\x03\x02\x02\x02\u03E4\u1E7C\x03\x02\x02\x02\u03E6\u1E7E\x03\x02" +
		"\x02\x02\u03E8\u1E84\x03\x02\x02\x02\u03EA\u1E88\x03\x02\x02\x02\u03EC" +
		"\u1E90\x03\x02\x02\x02\u03EE\u1E98\x03\x02\x02\x02\u03F0\u1EA0\x03\x02" +
		"\x02\x02\u03F2\u1EBD\x03\x02\x02\x02\u03F4\u1EDC\x03\x02\x02\x02\u03F6" +
		"\u1EE0\x03\x02\x02\x02\u03F8\u1EE4\x03\x02\x02\x02\u03FA\u1EE7\x03\x02" +
		"\x02\x02\u03FC\u1EF2\x03\x02\x02\x02\u03FE\u1EF4\x03\x02\x02\x02\u0400" +
		"\u1EF9\x03\x02\x02\x02\u0402\u1EFB\x03\x02\x02\x02\u0404\u1EFD\x03\x02" +
		"\x02\x02\u0406\u1EFF\x03\x02\x02\x02\u0408\u1F08\x03\x02\x02\x02\u040A" +
		"\u1F0E\x03\x02\x02\x02\u040C\u1F10\x03\x02\x02\x02\u040E\u1F12\x03\x02" +
		"\x02\x02\u0410\u1F1D\x03\x02\x02\x02\u0412\u1F21\x03\x02\x02\x02\u0414" +
		"\u1F23\x03\x02\x02\x02\u0416\u1F25\x03\x02\x02\x02\u0418\u1F27\x03\x02" +
		"\x02\x02\u041A\u1F30\x03\x02\x02\x02\u041C\u1F32\x03\x02\x02\x02\u041E" +
		"\u1F34\x03\x02\x02\x02\u0420\u1F36\x03\x02\x02\x02\u0422\u1F38\x03\x02" +
		"\x02\x02\u0424\u1F3A\x03\x02\x02\x02\u0426\u1F3C\x03\x02\x02\x02\u0428" +
		"\u1F3E\x03\x02\x02\x02\u042A\u1F42\x03\x02\x02\x02\u042C\u1F46\x03\x02" +
		"\x02\x02\u042E\u1F48\x03\x02\x02\x02\u0430\u1F4A\x03\x02\x02\x02\u0432" +
		"\u1F4C\x03\x02\x02\x02\u0434\u1F4E\x03\x02\x02\x02\u0436\u1F50\x03\x02" +
		"\x02\x02\u0438\u1F52\x03\x02\x02\x02\u043A\u1F54\x03\x02\x02\x02\u043C" +
		"\u1F56\x03\x02\x02\x02\u043E\u1F58\x03\x02\x02\x02\u0440\u1F5A\x03\x02" +
		"\x02\x02\u0442\u1F5E\x03\x02\x02\x02\u0444\u1F60\x03\x02\x02\x02\u0446" +
		"\u1F63\x03\x02\x02\x02\u0448\u1F6F\x03\x02\x02\x02\u044A\u1F71\x03\x02" +
		"\x02\x02\u044C\u1F79\x03\x02\x02\x02\u044E\u1F81\x03\x02\x02\x02\u0450" +
		"\u1F85\x03\x02\x02\x02\u0452\u1F87\x03\x02\x02\x02\u0454\u1F8B\x03\x02" +
		"\x02\x02\u0456\u1F8D\x03\x02\x02\x02\u0458\u1F8F\x03\x02\x02\x02\u045A" +
		"\u1F91\x03\x02\x02\x02\u045C\u1F93\x03\x02\x02\x02\u045E\u1F95\x03\x02" +
		"\x02\x02\u0460\u1F9A\x03\x02\x02\x02\u0462\u1F9E\x03\x02\x02\x02\u0464" +
		"\u1FA0\x03\x02\x02\x02\u0466\u1FA8\x03\x02\x02\x02\u0468\u1FAC\x03\x02" +
		"\x02\x02\u046A\u1FBB\x03\x02\x02\x02\u046C\u1FBD\x03\x02\x02\x02\u046E" +
		"\u1FC0\x03\x02\x02\x02\u0470\u1FC2\x03\x02\x02\x02\u0472\u1FC4\x03\x02" +
		"\x02\x02\u0474\u1FCB\x03\x02\x02\x02\u0476\u1FD6\x03\x02\x02\x02\u0478" +
		"\u1FDD\x03\x02\x02\x02\u047A\u1FDF\x03\x02\x02\x02\u047C\u1FED\x03\x02" +
		"\x02\x02\u047E\u1FF2\x03\x02\x02\x02\u0480\u1FF7\x03\x02\x02\x02\u0482" +
		"\u1FFE\x03\x02\x02\x02\u0484\u2006\x03\x02\x02\x02\u0486\u2008\x03\x02" +
		"\x02\x02\u0488\u2010\x03\x02\x02\x02\u048A\u2012\x03\x02\x02\x02\u048C" +
		"\u2014\x03\x02\x02\x02\u048E\u201C\x03\x02\x02\x02\u0490\u2020\x03\x02" +
		"\x02\x02\u0492\u2022\x03\x02\x02\x02\u0494\u2024\x03\x02\x02\x02\u0496" +
		"\u202C\x03\x02\x02\x02\u0498\u2030\x03\x02\x02\x02\u049A\u2034\x03\x02" +
		"\x02\x02\u049C\u2038\x03\x02\x02\x02\u049E\u203A\x03\x02\x02\x02\u04A0" +
		"\u203D\x03\x02\x02\x02\u04A2\u203F\x03\x02\x02\x02\u04A4\u2047\x03\x02" +
		"\x02\x02\u04A6\u2053\x03\x02\x02\x02\u04A8\u2066\x03\x02\x02\x02\u04AA" +
		"\u2068\x03\x02\x02\x02\u04AC\u206A\x03\x02\x02\x02\u04AE\u207E\x03\x02" +
		"\x02\x02\u04B0\u2080\x03\x02\x02\x02\u04B2\u2082\x03\x02\x02\x02\u04B4" +
		"\u208E\x03\x02\x02\x02\u04B6\u2094\x03\x02\x02\x02\u04B8\u2096\x03\x02" +
		"\x02\x02\u04BA\u209D\x03\x02\x02\x02\u04BC\u20A8\x03\x02\x02\x02\u04BE" +
		"\u04C0\x05\x04\x03\x02\u04BF\u04BE\x03\x02\x02\x02\u04C0\u04C3\x03\x02" +
		"\x02\x02\u04C1\u04BF\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2" +
		"\u04C4\x03\x02\x02\x02\u04C3\u04C1\x03\x02\x02\x02\u04C4\u04C5\x07\x02" +
		"\x02\x03\u04C5\x03\x03\x02\x02\x02\u04C6\u04C9\x05\x06\x04\x02\u04C7\u04C9" +
		"\x05\u01A2\xD2\x02\u04C8\u04C6\x03\x02\x02\x02\u04C8\u04C7\x03\x02\x02" +
		"\x02\u04C9\u04CB\x03\x02\x02\x02\u04CA\u04CC\x07\u0199\x02\x02\u04CB\u04CA" +
		"\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02\x02\u04CC\x05\x03\x02\x02\x02" +
		"\u04CD\u04F0\x05\b\x05\x02\u04CE\u04F0\x05R*\x02\u04CF\u04F0\x05\xB8]" +
		"\x02\u04D0\u04F0\x05\xD8m\x02\u04D1\u04F0\x05\xDCo\x02\u04D2\u04D3\x06" +
		"\x04\x02\x02\u04D3\u04F0\x05\xDEp\x02\u04D4\u04F0\x05\xE0q\x02\u04D5\u04F0" +
		"\x05\xE2r\x02\u04D6\u04F0\x05\xE8u\x02\u04D7\u04F0\x05\xEAv\x02\u04D8" +
		"\u04F0\x05\xEEx\x02\u04D9\u04F0\x05\u0102\x82\x02\u04DA\u04F0\x05\u010E" +
		"\x88\x02\u04DB\u04F0\x05\u0110\x89\x02\u04DC\u04F0\x05\u019C\xCF\x02\u04DD" +
		"\u04F0\x05\u019E\xD0\x02\u04DE\u04F0\x05\u01B4\xDB\x02\u04DF\u04F0\x05" +
		"\u01E4\xF3\x02\u04E0\u04E1\x06\x04\x03\x02\u04E1\u04F0\x05\u01EA\xF6\x02" +
		"\u04E2\u04F0\x05\u01F0\xF9\x02\u04E3\u04F0\x05\u022E\u0118\x02\u04E4\u04F0" +
		"\x05\u0236\u011C\x02\u04E5\u04F0\x05\u0238\u011D\x02\u04E6\u04F0\x05\u0250" +
		"\u0129\x02\u04E7\u04E8\x06\x04\x04\x02\u04E8\u04F0\x05\u027C\u013F\x02" +
		"\u04E9\u04F0\x05\u025C\u012F\x02\u04EA\u04F0\x05\u0290\u0149\x02\u04EB" +
		"\u04EC\x06\x04\x05\x02\u04EC\u04F0\x05\u0342\u01A2\x02\u04ED\u04F0\x05" +
		"\u034C\u01A7\x02\u04EE\u04F0\x05\u034E\u01A8\x02\u04EF\u04CD\x03\x02\x02" +
		"\x02\u04EF\u04CE\x03\x02\x02\x02\u04EF\u04CF\x03\x02\x02\x02\u04EF\u04D0" +
		"\x03\x02\x02\x02\u04EF\u04D1\x03\x02\x02\x02\u04EF\u04D2\x03\x02\x02\x02" +
		"\u04EF\u04D4\x03\x02\x02\x02\u04EF\u04D5\x03\x02\x02\x02\u04EF\u04D6\x03" +
		"\x02\x02\x02\u04EF\u04D7\x03\x02\x02\x02\u04EF\u04D8\x03\x02\x02\x02\u04EF" +
		"\u04D9\x03\x02\x02\x02\u04EF\u04DA\x03\x02\x02\x02\u04EF\u04DB\x03\x02" +
		"\x02\x02\u04EF\u04DC\x03\x02\x02\x02\u04EF\u04DD\x03\x02\x02\x02\u04EF" +
		"\u04DE\x03\x02\x02\x02\u04EF\u04DF\x03\x02\x02\x02\u04EF\u04E0\x03\x02" +
		"\x02\x02\u04EF\u04E2\x03\x02\x02\x02\u04EF\u04E3\x03\x02\x02\x02\u04EF" +
		"\u04E4\x03\x02\x02\x02\u04EF\u04E5\x03\x02\x02\x02\u04EF\u04E6\x03\x02" +
		"\x02\x02\u04EF\u04E7\x03\x02\x02\x02\u04EF\u04E9\x03\x02\x02\x02\u04EF" +
		"\u04EA\x03\x02\x02\x02\u04EF\u04EB\x03\x02\x02\x02\u04EF\u04ED\x03\x02" +
		"\x02\x02\u04EF\u04EE\x03\x02\x02\x02\u04F0\x07\x03\x02\x02\x02\u04F1\u050C" +
		"\x07\u01AE\x02\x02\u04F2\u050D\x05\x16\f\x02\u04F3\u050D\x05\n\x06\x02" +
		"\u04F4\u04F5\x07\u0254\x02\x02\u04F5\u04F7\x05\u0420\u0211\x02\u04F6\u04F8" +
		"\x05l7\x02\u04F7\u04F6\x03\x02\x02\x02\u04F7\u04F8\x03\x02\x02\x02\u04F8" +
		"\u050D\x03\x02\x02\x02\u04F9\u04FA\x07\u0166\x02\x02\u04FA\u04FC\x05\u0424" +
		"\u0213\x02\u04FB\u04FD\x05l7\x02\u04FC\u04FB\x03\x02\x02\x02\u04FC\u04FD" +
		"\x03\x02\x02\x02\u04FD\u050D\x03\x02\x02\x02\u04FE\u050D\x05J&\x02\u04FF" +
		"\u050D\x05\f\x07\x02\u0500\u050D\x05<\x1F\x02\u0501\u0502\x06\x05\x06" +
		"\x02\u0502\u050D\x05> \x02\u0503\u050D\x05\x0E\b\x02\u0504\u050D\x05\x14" +
		"\v\x02\u0505\u0506\x06\x05\x07\x02\u0506\u0507\x07\xA7\x02\x02\u0507\u0508" +
		"\x07\u012A\x02\x02\u0508\u0509\x05\u0496\u024C\x02\u0509\u050A\x07\xBB" +
		"\x02\x02\u050A\u050B\x07\u021B\x02\x02\u050B\u050D\x03\x02\x02\x02\u050C" +
		"\u04F2\x03\x02\x02\x02\u050C\u04F3\x03\x02\x02\x02\u050C\u04F4\x03\x02" +
		"\x02\x02\u050C\u04F9\x03\x02\x02\x02\u050C\u04FE\x03\x02\x02\x02\u050C" +
		"\u04FF\x03\x02\x02\x02\u050C\u0500\x03\x02\x02\x02\u050C\u0501\x03\x02" +
		"\x02\x02\u050C\u0503\x03\x02\x02\x02\u050C\u0504\x03\x02\x02\x02\u050C" +
		"\u0505\x03\x02\x02\x02\u050D\t\x03\x02\x02\x02\u050E\u050F\x07\u01D5\x02" +
		"\x02\u050F\u051A\x05\u041C\u020F\x02\u0510\u0512\x05V,\x02\u0511\u0510" +
		"\x03\x02\x02\x02\u0512\u0513\x03\x02\x02\x02\u0513\u0511\x03\x02\x02\x02" +
		"\u0513\u0514\x03\x02\x02\x02\u0514\u051B\x03\x02\x02\x02\u0515\u0516\x06" +
		"\x06\b\x02\u0516\u0517\x077\x02\x02\u0517\u0518\x07o\x02\x02\u0518\u0519" +
		"\x07y\x02\x02\u0519\u051B\x07\xE7\x02\x02\u051A\u0511\x03\x02\x02\x02" +
		"\u051A\u0515\x03\x02\x02\x02\u051B\v\x03\x02\x02\x02\u051C\u051E\x05\u03CA" +
		"\u01E6\x02\u051D\u051C\x03\x02\x02\x02\u051D\u051E\x03\x02\x02\x02\u051E" +
		"\u051F\x03\x02\x02\x02\u051F\u0520\x07\x87\x02\x02\u0520\u0524\x05\u0438" +
		"\u021D\x02\u0521\u0522\x07\u0245\x02\x02\u0522\u0523\x07\u0131\x02\x02" +
		"\u0523\u0525\x05\u0358\u01AD\x02\u0524\u0521\x03\x02\x02\x02\u0524\u0525";
	private static readonly _serializedATNSegment5: string =
		"\x03\x02\x02\x02\u0525\u052C\x03\x02\x02\x02\u0526\u0527\x07\u0245\x02" +
		"\x02\u0527\u0529\x07_\x02\x02\u0528\u052A\x07\u023F\x02\x02\u0529\u0528" +
		"\x03\x02\x02\x02\u0529\u052A\x03\x02\x02\x02\u052A\u052B\x03\x02\x02\x02" +
		"\u052B\u052D\x07\u0104\x02\x02\u052C\u0526\x03\x02\x02\x02\u052C\u052D" +
		"\x03\x02\x02\x02\u052D\u0531\x03\x02\x02\x02\u052E\u052F\x07\u025E\x02" +
		"\x02\u052F\u0530\x07\u028F\x02\x02\u0530\u0532\x05\u0462\u0232\x02\u0531" +
		"\u052E\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532\u0539\x03\x02" +
		"\x02\x02\u0533\u053A\x07\x91\x02\x02\u0534\u0537\x07z\x02\x02\u0535\u0536" +
		"\x07\u0245\x02\x02\u0536\u0538\x07/\x02\x02\u0537\u0535\x03\x02\x02\x02" +
		"\u0537\u0538\x03\x02\x02\x02\u0538\u053A\x03\x02\x02\x02\u0539\u0533\x03" +
		"\x02\x02\x02\u0539\u0534\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A" +
		"\u053D\x03\x02\x02\x02\u053B\u053C\x07\r\x02\x02\u053C\u053E\x05\u0482" +
		"\u0242\x02\u053D\u053B\x03\x02\x02\x02\u053D\u053E\x03\x02\x02\x02\u053E" +
		"\u0541\x03\x02\x02\x02\u053F\u0540\x07\x11\x02\x02\u0540\u0542\x05\u030A" +
		"\u0186\x02\u0541\u053F\x03\x02\x02\x02\u0541\u0542\x03\x02\x02\x02\u0542" +
		"\r\x03\x02\x02\x02\u0543\u0544\x07\xB8\x02\x02\u0544\u0545\x07\u0202\x02" +
		"\x02\u0545\u0546\x05\u0434\u021B\x02\u0546\u0547\x07\u01AC\x02\x02\u0547" +
		"\u0548\x07\u016A\x02\x02\u0548\u054A\x05\u0482\u0242\x02\u0549\u054B\x05" +
		"\x10\t\x02\u054A\u0549\x03\x02\x02\x02\u054A\u054B\x03\x02\x02\x02\u054B" +
		"\x0F\x03\x02\x02\x02\u054C\u0553\x05\x12\n\x02\u054D\u054F\x07\u0198\x02" +
		"\x02\u054E\u054D\x03\x02\x02\x02\u054E\u054F\x03\x02\x02\x02\u054F\u0550" +
		"\x03\x02\x02\x02\u0550\u0552\x05\x12\n\x02\u0551\u054E\x03\x02\x02\x02" +
		"\u0552\u0555\x03\x02\x02\x02\u0553\u0551\x03\x02\x02\x02\u0553\u0554\x03" +
		"\x02\x02\x02\u0554\x11\x03\x02\x02\x02\u0555\u0553\x03\x02\x02\x02\u0556" +
		"\u055A\x05\x8EH\x02\u0557\u055A\x05\x9AN\x02\u0558\u055A\x05\x9CO\x02" +
		"\u0559\u0556\x03\x02\x02\x02\u0559\u0557\x03\x02\x02\x02\u0559\u0558\x03" +
		"\x02\x02\x02\u055A\x13\x03\x02\x02\x02\u055B\u055C\x07-\x02\x02\u055C" +
		"\u055D\x05\u043E\u0220\x02\u055D\u055E\x05~@\x02\u055E\x15\x03\x02\x02" +
		"\x02\u055F\u0561\x05\u0402\u0202\x02\u0560\u055F\x03\x02\x02\x02\u0560" +
		"\u0561\x03\x02\x02\x02\u0561\u0564\x03\x02\x02\x02\u0562\u0563\x06\f\t" +
		"\x02\u0563\u0565\x07\u020A\x02\x02\u0564\u0562\x03\x02\x02\x02\u0564\u0565" +
		"\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566\u0567\x07\u0289\x02" +
		"\x02\u0567\u0569\x05\u0448\u0225\x02\u0568\u056A\x05\x18\r\x02\u0569\u0568" +
		"\x03\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A\x17\x03\x02\x02\x02" +
		"\u056B\u056E\x05\x1A\x0E\x02\u056C\u056F\x05\u03B4\u01DB\x02\u056D\u056F" +
		"\x056\x1C\x02\u056E\u056C\x03\x02\x02\x02\u056E\u056D\x03\x02\x02\x02" +
		"\u056E\u056F\x03\x02\x02\x02\u056F\u0579\x03\x02\x02\x02\u0570\u0579\x05" +
		"\u03B4\u01DB\x02\u0571\u0579\x056\x1C\x02\u0572\u0573\x05\x1C\x0F\x02" +
		"\u0573\u0574\x07\u0198\x02\x02\u0574\u0576\x03\x02\x02\x02\u0575\u0572" +
		"\x03\x02\x02\x02\u0575\u0576\x03\x02\x02\x02\u0576\u0577\x03\x02\x02\x02" +
		"\u0577\u0579\x05\x1E\x10\x02\u0578\u056B\x03\x02\x02\x02\u0578\u0570\x03" +
		"\x02\x02\x02\u0578\u0571\x03\x02\x02\x02\u0578\u0575\x03\x02\x02\x02\u0579" +
		"\x19\x03\x02\x02\x02\u057A\u0582\x05\x1C\x0F\x02\u057B\u057C\x05\x1C\x0F" +
		"\x02\u057C\u057D\x07\u0198\x02\x02\u057D\u057F\x03\x02\x02\x02\u057E\u057B" +
		"\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02\u057F\u0580\x03\x02\x02\x02" +
		"\u0580\u0582\x05\"\x12\x02\u0581\u057A\x03\x02\x02\x02\u0581\u057E\x03" +
		"\x02\x02\x02\u0582\x1B\x03\x02\x02\x02\u0583\u0588\x05$\x13\x02\u0584" +
		"\u0585\x07\u0198\x02\x02\u0585\u0587\x05$\x13\x02\u0586\u0584\x03\x02" +
		"\x02\x02\u0587\u058A\x03\x02\x02\x02\u0588\u0586\x03\x02\x02\x02\u0588" +
		"\u0589\x03\x02\x02\x02\u0589\x1D\x03\x02\x02\x02\u058A\u0588\x03\x02\x02" +
		"\x02\u058B\u058C\x07{\x02\x02\u058C\u0593\x07\u0158\x02\x02\u058D\u058E" +
		"\x07\xA4\x02\x02\u058E\u0593\x07\u0158\x02\x02\u058F\u0593\x05 \x11\x02" +
		"\u0590\u0591\x06\x10\n\x02\u0591\u0593\t\x02\x02\x02\u0592\u058B\x03\x02" +
		"\x02\x02\u0592\u058D\x03\x02\x02\x02\u0592\u058F\x03\x02\x02\x02\u0592" +
		"\u0590\x03\x02\x02\x02\u0593\x1F\x03\x02\x02\x02\u0594\u0595\x07\u01AC" +
		"\x02\x02\u0595\u0597\x07\"\x02\x02\u0596\u0598\x05\u0404\u0203\x02\u0597" +
		"\u0596\x03\x02\x02\x02\u0597\u0598\x03\x02\x02\x02\u0598\u059C\x03\x02" +
		"\x02\x02\u0599\u059D\x05\u03BC\u01DF\x02\u059A\u059B\x07\xFC\x02\x02\u059B" +
		"\u059D\x05\u0470\u0239\x02\u059C\u0599\x03\x02\x02\x02\u059C\u059A\x03" +
		"\x02\x02\x02\u059D\u05F6\x03\x02\x02\x02\u059E\u059F\x07\u01E9\x02\x02" +
		"\u059F\u05A0\x07\"\x02\x02\u05A0\u05F6\x05\u0464\u0233\x02\u05A1\u05A2" +
		"\x07\u0110\x02\x02\u05A2\u05A4\x07\"\x02\x02\u05A3\u05A5\x05\u0404\u0203" +
		"\x02\u05A4\u05A3\x03\x02\x02\x02\u05A4\u05A5\x03\x02\x02\x02\u05A5\u05A6" +
		"\x03\x02\x02\x02\u05A6\u05F6\x058\x1D\x02\u05A7\u05A8\x07\u0248\x02\x02" +
		"\u05A8\u05AA\x07\"\x02\x02\u05A9\u05AB\x05\u0404\u0203\x02\u05AA\u05A9" +
		"\x03\x02\x02\x02\u05AA\u05AB\x03\x02\x02\x02\u05AB\u05AC\x03\x02\x02\x02" +
		"\u05AC\u05AE\x058\x1D\x02\u05AD\u05AF\x05\u0404\u0203\x02\u05AE\u05AD" +
		"\x03\x02\x02\x02\u05AE\u05AF\x03\x02\x02\x02\u05AF\u05F6\x03\x02\x02\x02" +
		"\u05B0\u05B1\x07A\x02\x02\u05B1\u05B3\x07\"\x02\x02\u05B2\u05B4\x05\u0404" +
		"\u0203\x02\u05B3\u05B2\x03\x02\x02\x02\u05B3\u05B4\x03\x02\x02\x02\u05B4" +
		"\u05B5\x03\x02\x02\x02\u05B5\u05F6\x058\x1D\x02\u05B6\u05B7\x07\u01C5" +
		"\x02\x02\u05B7\u05B8\x07\"\x02\x02\u05B8\u05BC\x058\x1D\x02\u05B9\u05BB" +
		"\x05\u0232\u011A\x02\u05BA\u05B9\x03\x02\x02\x02\u05BB\u05BE\x03\x02\x02" +
		"\x02\u05BC\u05BA\x03\x02\x02\x02\u05BC\u05BD\x03\x02\x02\x02\u05BD\u05F6" +
		"\x03\x02\x02\x02\u05BE\u05BC\x03\x02\x02\x02\u05BF\u05C0\x07\'\x02\x02" +
		"\u05C0\u05C2\x07\"\x02\x02\u05C1\u05C3\x05\u0404\u0203\x02\u05C2\u05C1" +
		"\x03\x02\x02\x02\u05C2\u05C3\x03\x02\x02\x02\u05C3\u05C4\x03\x02\x02\x02" +
		"\u05C4\u05C8\x058\x1D\x02\u05C5\u05C7\x05\u0234\u011B\x02\u05C6\u05C5" +
		"\x03\x02\x02\x02\u05C7\u05CA\x03\x02\x02\x02\u05C8\u05C6\x03\x02\x02\x02" +
		"\u05C8\u05C9\x03\x02\x02\x02\u05C9\u05F6\x03\x02\x02\x02\u05CA\u05C8\x03" +
		"\x02\x02\x02\u05CB\u05CC\x07W\x02\x02\u05CC\u05CE\x07\"\x02\x02\u05CD" +
		"\u05CF\x05\u0404\u0203\x02\u05CE\u05CD\x03\x02\x02\x02\u05CE\u05CF\x03" +
		"\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05F6\x05\u0470\u0239\x02" +
		"\u05D1\u05D2\x074\x02\x02\u05D2\u05D3\x07\"\x02\x02\u05D3\u05F6\x058\x1D" +
		"\x02\u05D4\u05F6\x05:\x1E\x02\u05D5\u05D6\x07\u011B\x02\x02\u05D6\u05D8" +
		"\x07\"\x02\x02\u05D7\u05D9\x05\u0404\u0203\x02\u05D8\u05D7\x03\x02\x02" +
		"\x02\u05D8\u05D9\x03\x02\x02\x02\u05D9\u05DE\x03\x02\x02\x02\u05DA\u05DB" +
		"\x05\u0464\u0233\x02\u05DB\u05DC\x07\u0212\x02\x02\u05DC\u05DD\x05\u03BC" +
		"\u01DF\x02\u05DD\u05DF\x03\x02\x02\x02\u05DE\u05DA\x03\x02\x02\x02\u05DE" +
		"\u05DF\x03\x02\x02\x02\u05DF\u05F6\x03\x02\x02\x02\u05E0\u05E1\x07\u01F1" +
		"\x02\x02\u05E1\u05E2\x07\"\x02\x02\u05E2\u05E3\x05\u0462\u0232\x02\u05E3" +
		"\u05E4\x07\u02AC\x02\x02\u05E4\u05E5\x07\u0289\x02\x02\u05E5\u05E7\x05" +
		"\u0448\u0225\x02\u05E6\u05E8\x054\x1B\x02\u05E7\u05E6\x03\x02\x02\x02" +
		"\u05E7\u05E8\x03\x02\x02\x02\u05E8\u05F6\x03\x02\x02\x02\u05E9\u05EA\x06" +
		"\x11\v\x02\u05EA\u05EB\x07{\x02\x02\u05EB\u05EC\x07\"\x02\x02\u05EC\u05ED" +
		"\x058\x1D\x02\u05ED\u05EE\x07\u0158\x02\x02\u05EE\u05F6\x03\x02\x02\x02" +
		"\u05EF\u05F0\x06\x11\f\x02\u05F0\u05F1\x07\xA4\x02\x02\u05F1\u05F2\x07" +
		"\"\x02\x02\u05F2\u05F3\x058\x1D\x02\u05F3\u05F4\x07\u0158\x02\x02\u05F4" +
		"\u05F6\x03\x02\x02\x02\u05F5\u0594\x03\x02\x02\x02\u05F5\u059E\x03\x02" +
		"\x02\x02\u05F5\u05A1\x03\x02\x02\x02\u05F5\u05A7\x03\x02\x02\x02\u05F5" +
		"\u05B0\x03\x02\x02\x02\u05F5\u05B6\x03\x02\x02\x02\u05F5\u05BF\x03\x02" +
		"\x02\x02\u05F5\u05CB\x03\x02\x02\x02\u05F5\u05D1\x03\x02\x02\x02\u05F5" +
		"\u05D4\x03\x02\x02\x02\u05F5\u05D5\x03\x02\x02\x02\u05F5\u05E0\x03\x02" +
		"\x02\x02\u05F5\u05E9\x03\x02\x02\x02\u05F5\u05EF\x03\x02\x02\x02\u05F6" +
		"!\x03\x02\x02\x02\u05F7\u05FA\x05&\x14\x02\u05F8\u05FA\x05\u03A8\u01D5" +
		"\x02\u05F9\u05F7\x03\x02\x02\x02\u05F9\u05F8\x03\x02\x02\x02\u05FA\u0603" +
		"\x03\x02\x02\x02\u05FB\u05FF\x07\u0198\x02\x02\u05FC\u0600\x05&\x14\x02" +
		"\u05FD\u0600\x05$\x13\x02\u05FE\u0600\x05\u03A8\u01D5\x02\u05FF\u05FC" +
		"\x03\x02\x02\x02\u05FF\u05FD\x03\x02\x02\x02\u05FF\u05FE\x03\x02\x02\x02" +
		"\u0600\u0602\x03\x02\x02\x02\u0601\u05FB\x03\x02\x02\x02\u0602\u0605\x03" +
		"\x02\x02\x02\u0603\u0601\x03\x02\x02\x02\u0603\u0604\x03\x02\x02\x02\u0604" +
		"#\x03\x02\x02\x02\u0605\u0603\x03\x02\x02\x02\u0606\u060A\x05.\x18\x02" +
		"\u0607\u060A\x050\x19\x02\u0608\u060A\x054\x1B\x02\u0609\u0606\x03\x02" +
		"\x02\x02\u0609\u0607\x03\x02\x02\x02\u0609\u0608\x03\x02\x02\x02\u060A" +
		"%\x03\x02\x02\x02\u060B\u060D\x07\u01AC\x02\x02\u060C\u060E\x07\u01C7" +
		"\x02\x02\u060D\u060C\x03\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E" +
		"\u061B\x03\x02\x02\x02\u060F\u0610\x05\u0462\u0232\x02\u0610\u0612\x05" +
		"\u0366\u01B4\x02\u0611\u0613\x05\u035C\u01AF\x02\u0612\u0611\x03\x02\x02" +
		"\x02\u0612\u0613\x03\x02\x02\x02\u0613\u0615\x03\x02\x02\x02\u0614\u0616" +
		"\x05(\x15\x02\u0615\u0614\x03\x02\x02\x02\u0615\u0616\x03\x02\x02\x02" +
		"\u0616\u061C\x03\x02\x02\x02\u0617\u0618\x07\u019B\x02\x02\u0618\u0619" +
		"\x05Z.\x02\u0619\u061A\x07\u019C\x02\x02\u061A\u061C\x03\x02\x02\x02\u061B" +
		"\u060F\x03\x02\x02\x02\u061B\u0617\x03\x02\x02\x02\u061C\u0691\x03\x02" +
		"\x02\x02\u061D\u061E\x07\u01AC\x02\x02\u061E\u0691\x05\u0362\u01B2\x02" +
		"\u061F\u0621\x07\u01C3\x02\x02\u0620\u0622\x07\u01C7\x02\x02\u0621\u0620" +
		"\x03\x02\x02\x02\u0621\u0622\x03\x02\x02\x02\u0622\u0623\x03\x02\x02\x02" +
		"\u0623\u0624\x05\u040C\u0207\x02\u0624\u0625\x05\u0462\u0232\x02\u0625" +
		"\u0627\x05\u0366\u01B4\x02\u0626\u0628\x05(\x15\x02\u0627\u0626\x03\x02" +
		"\x02\x02\u0627\u0628\x03\x02\x02\x02\u0628\u0691\x03\x02\x02\x02\u0629" +
		"\u062B\x07\xDF\x02\x02\u062A\u062C\x07\u01C7\x02\x02\u062B\u062A\x03\x02" +
		"\x02\x02\u062B\u062C\x03\x02\x02\x02\u062C\u062D\x03\x02\x02\x02\u062D" +
		"\u062E\x05\u040C\u0207\x02\u062E\u0630\x05\u0366\u01B4\x02\u062F\u0631" +
		"\x05(\x15\x02\u0630\u062F\x03\x02\x02\x02\u0630\u0631\x03\x02\x02\x02" +
		"\u0631\u0691\x03\x02\x02\x02\u0632\u0649\x07\u01E9\x02\x02\u0633\u0635" +
		"\x07\u01C7\x02\x02\u0634\u0633\x03\x02\x02\x02\u0634\u0635\x03\x02\x02" +
		"\x02\u0635\u0636\x03\x02\x02\x02\u0636\u0638\x05\u040C\u0207\x02\u0637" +
		"\u0639\x05*\x16\x02\u0638\u0637\x03\x02\x02\x02\u0638\u0639\x03\x02\x02" +
		"\x02\u0639\u064A\x03\x02\x02\x02\u063A\u063B\x07\u01FB\x02\x02\u063B\u0642" +
		"\x07\u021B\x02\x02\u063C\u063D\x06\x14\r\x02\u063D\u0643\x05\u040C\u0207" +
		"\x02\u063E\u0640\x06\x14\x0E\x02\u063F\u0641\x05\u040C\u0207\x02\u0640" +
		"\u063F\x03\x02\x02\x02\u0640\u0641\x03\x02\x02\x02\u0641\u0643\x03\x02" +
		"\x02\x02\u0642\u063C\x03\x02\x02\x02\u0642\u063E\x03\x02\x02\x02\u0643" +
		"\u064A\x03\x02\x02\x02\u0644\u0645\x07\u0253\x02\x02\u0645\u064A\x07\u021B" +
		"\x02\x02\u0646\u0647\x05\u0192\xCA\x02\u0647\u0648\x05\u0416\u020C\x02" +
		"\u0648\u064A\x03\x02\x02\x02\u0649\u0634\x03\x02\x02\x02\u0649\u063A\x03" +
		"\x02\x02\x02\u0649\u0644\x03\x02\x02\x02\u0649\u0646\x03\x02\x02\x02\u064A" +
		"\u0691\x03\x02\x02\x02\u064B\u064C\x07z\x02\x02\u064C\u0691\x07\u021A" +
		"\x02\x02\u064D\u064E\x07\x91\x02\x02\u064E\u0691\x07\u021A\x02\x02\u064F" +
		"\u0651\x07\u01AE\x02\x02\u0650\u0652\x07\u01C7\x02\x02\u0651\u0650\x03" +
		"\x02\x02\x02\u0651\u0652\x03\x02\x02\x02\u0652\u0653\x03\x02\x02\x02\u0653" +
		"\u065D\x05\u040C\u0207\x02\u0654\u0655\x07\u026D\x02\x02\u0655\u0659\x07" +
		"\u01E0\x02\x02\u0656\u0657\x06\x14\x0F\x02\u0657\u065A\x05\u02FC\u017F" +
		"\x02\u0658\u065A\x05\u0478\u023D\x02\u0659\u0656\x03\x02\x02\x02\u0659" +
		"\u0658\x03\x02\x02\x02\u065A\u065E\x03\x02\x02\x02\u065B\u065C\x07\u01E9" +
		"\x02\x02\u065C\u065E\x07\u01E0\x02\x02\u065D\u0654\x03\x02\x02\x02\u065D" +
		"\u065B\x03\x02\x02\x02\u065E\u0691\x03\x02\x02\x02\u065F\u0660\x06\x14" +
		"\x10\x02\u0660\u0661\x07\u01AE\x02\x02\u0661\u0662\x07\u020B\x02\x02\u0662" +
		"\u0663\x05\u0416\u020C\x02\u0663\u0664\x05\u0384\u01C3\x02\u0664\u0691" +
		"\x03\x02\x02\x02\u0665\u0666\x06\x14\x11\x02\u0666\u0667\x07\u01AE\x02" +
		"\x02\u0667\u0668\x07\u01C5\x02\x02\u0668\u0669\x05\u0462\u0232\x02\u0669" +
		"\u066A\x05\u0360\u01B1\x02\u066A\u0691\x03\x02\x02\x02\u066B\u066C\x06" +
		"\x14\x12\x02\u066C\u066D\x07\u025E\x02\x02\u066D\u066E\x07\u01C7\x02\x02" +
		"\u066E\u066F\x05\u040C\u0207\x02\u066F\u0670\x07\u028F\x02\x02\u0670\u0671" +
		"\x05\u0462\u0232\x02\u0671\u0691\x03\x02\x02\x02\u0672\u0674\x07\u025E" +
		"\x02\x02\u0673\u0675\t\x03\x02\x02\u0674\u0673\x03\x02\x02\x02\u0674\u0675" +
		"\x03\x02\x02\x02\u0675\u0676\x03\x02\x02\x02\u0676\u0691\x05\u0442\u0222" +
		"\x02\u0677\u0678\x06\x14\x13\x02\u0678\u0679\x07\u025E\x02\x02\u0679\u067A" +
		"\x05\u0192\xCA\x02\u067A\u067B\x05\u0416\u020C\x02\u067B\u067C\x07\u028F" +
		"\x02\x02\u067C\u067D\x05\u0414\u020B\x02\u067D\u0691\x03\x02\x02\x02\u067E" +
		"\u067F\x07\u01CB\x02\x02\u067F\u0680\x07\u028F\x02\x02\u0680\u0684\x05" +
		"\u02F0\u0179\x02\u0681\u0682\x06\x14\x14\x02\u0682\u0685\x07\u01E0\x02" +
		"\x02\u0683\u0685\x05\u03A2\u01D2\x02\u0684\u0681\x03\x02\x02\x02\u0684" +
		"\u0683\x03\x02\x02\x02\u0685\u0687\x03\x02\x02\x02\u0686\u0688\x05\u03D4" +
		"\u01EB\x02\u0687\u0686\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688" +
		"\u0691\x03\x02\x02\x02\u0689\u0691\x07\u01FA\x02\x02\u068A\u068B\x07\u024C" +
		"\x02\x02\u068B\u068C\x07\u01BE\x02\x02\u068C\u0691\x05,\x17\x02\u068D" +
		"\u068E\x06\x14\x15\x02\u068E\u068F\x077\x02\x02\u068F\u0691\x07\xFB\x02" +
		"\x02\u0690\u060B\x03\x02\x02\x02\u0690\u061D\x03\x02\x02\x02\u0690\u061F" +
		"\x03\x02\x02\x02\u0690\u0629\x03\x02\x02\x02\u0690\u0632\x03\x02\x02\x02" +
		"\u0690\u064B\x03\x02\x02\x02\u0690\u064D\x03\x02\x02\x02\u0690\u064F\x03" +
		"\x02\x02\x02\u0690\u065F\x03\x02\x02\x02\u0690\u0665\x03\x02\x02\x02\u0690" +
		"\u066B\x03\x02\x02\x02\u0690\u0672\x03\x02\x02\x02\u0690\u0677\x03\x02" +
		"\x02\x02\u0690\u067E\x03\x02\x02\x02\u0690\u0689\x03\x02\x02\x02\u0690" +
		"\u068A\x03\x02\x02\x02\u0690\u068D\x03\x02\x02\x02\u0691\'\x03\x02\x02" +
		"\x02\u0692\u0693\x07=\x02\x02\u0693\u0696\x05\u0462\u0232\x02\u0694\u0696" +
		"\x07\x96\x02\x02\u0695\u0692\x03\x02\x02\x02\u0695\u0694\x03\x02\x02\x02" +
		"\u0696)\x03\x02\x02\x02\u0697\u0698\t\x04\x02\x02\u0698+\x03\x02\x02\x02" +
		"\u0699\u069B\x05\u0462\u0232\x02\u069A\u069C\x05\u014E\xA8\x02\u069B\u069A" +
		"\x03\x02\x02\x02\u069B\u069C\x03\x02\x02\x02\u069C\u06A4\x03\x02\x02\x02" +
		"\u069D\u069E\x07\u0198\x02\x02\u069E\u06A0\x05\u0462\u0232\x02\u069F\u06A1" +
		"\x05\u014E\xA8\x02\u06A0\u069F\x03\x02\x02\x02\u06A0\u06A1\x03\x02\x02" +
		"\x02\u06A1\u06A3\x03\x02\x02\x02\u06A2\u069D\x03\x02\x02\x02\u06A3\u06A6" +
		"\x03\x02\x02\x02\u06A4\u06A2\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02" +
		"\u06A5-\x03\x02\x02\x02\u06A6\u06A4\x03\x02\x02\x02\u06A7\u06A9\x07@\x02" +
		"\x02\u06A8\u06AA\x07\u0181\x02\x02\u06A9\u06A8\x03\x02\x02\x02\u06A9\u06AA" +
		"\x03\x02\x02\x02\u06AA\u06AD\x03\x02\x02\x02\u06AB\u06AE\x07\u01E0\x02" +
		"\x02\u06AC\u06AE\x05\u0462\u0232\x02\u06AD\u06AB\x03\x02\x02\x02\u06AD" +
		"\u06AC\x03\x02\x02\x02\u06AE/\x03\x02\x02\x02\u06AF\u06B1\x07\u0226\x02" +
		"\x02\u06B0\u06B2\x07\u0181\x02\x02\u06B1\u06B0\x03\x02\x02\x02\u06B1\u06B2" +
		"\x03\x02\x02\x02\u06B2\u06B5\x03\x02\x02\x02\u06B3\u06B6\x07\u01E0\x02" +
		"\x02\u06B4\u06B6\x05\u0462\u0232\x02\u06B5\u06B3\x03\x02\x02\x02\u06B5" +
		"\u06B4\x03\x02\x02\x02\u06B61\x03\x02\x02\x02\u06B7\u06B9\x05.\x18\x02" +
		"\u06B8\u06BA\x050\x19\x02\u06B9\u06B8\x03\x02\x02\x02\u06B9\u06BA\x03" +
		"\x02\x02\x02\u06BA\u06C0\x03\x02\x02\x02\u06BB\u06BD\x050\x19\x02\u06BC" +
		"\u06BE\x05.\x18\x02\u06BD\u06BC\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02" +
		"\x02\u06BE\u06C0\x03\x02\x02\x02\u06BF\u06B7\x03\x02\x02\x02\u06BF\u06BB" +
		"\x03\x02\x02\x02\u06C03\x03\x02\x02\x02\u06C1\u06C2\x06\x1B\x16\x02\u06C2" +
		"\u06C3\t\x05\x02\x02\u06C3\u06C4\x07\u02A0\x02\x02\u06C45\x03\x02\x02" +
		"\x02\u06C5\u06C6\x07&\x02\x02\u06C6\u06C7\x07\xFB\x02\x02\u06C77\x03\x02" +
		"\x02\x02\u06C8\u06CB\x07\u01AD\x02\x02\u06C9\u06CB\x05\u0464\u0233\x02" +
		"\u06CA\u06C8\x03\x02\x02\x02\u06CA\u06C9\x03\x02\x02\x02\u06CB9\x03\x02" +
		"\x02\x02\u06CC\u06CD\x07\u011B\x02\x02\u06CD\u06CF\x07\"\x02\x02\u06CE" +
		"\u06D0\x05\u0404\u0203\x02\u06CF\u06CE\x03\x02\x02\x02\u06CF\u06D0\x03" +
		"\x02\x02\x02\u06D0\u06D5\x03\x02\x02\x02\u06D1\u06D2\x05\u0464\u0233\x02" +
		"\u06D2\u06D3\x07\u0212\x02\x02\u06D3\u06D4\x05\u03BC\u01DF\x02\u06D4\u06D6" +
		"\x03\x02\x02\x02\u06D5\u06D1\x03\x02\x02\x02\u06D5\u06D6\x03\x02\x02\x02" +
		"\u06D6;\x03\x02\x02\x02\u06D7\u06D8\x07\u0158\x02\x02\u06D8\u06FA\x05" +
		"\u0430\u0219\x02\u06D9\u06DA\t\x06\x02\x02\u06DA\u06DB\x07p\x02\x02\u06DB" +
		"\u06DD\x05\u0482\u0242\x02\u06DC\u06DE\x05D#\x02\u06DD\u06DC\x03\x02\x02" +
		"\x02\u06DD\u06DE\x03\x02\x02\x02\u06DE\u06FB\x03\x02\x02\x02\u06DF\u06F3" +
		"\x06\x1F\x17\x02\u06E0\u06F4\x03\x02\x02\x02\u06E1\u06E2\x07\u01C3\x02" +
		"\x02\u06E2\u06E3\x07p\x02\x02\u06E3\u06EE\x05\u0482\u0242\x02\u06E4\u06EB" +
		"\x05H%\x02\u06E5\u06E7\x07\u0198\x02\x02\u06E6\u06E5\x03\x02\x02\x02\u06E6" +
		"\u06E7\x03\x02\x02\x02\u06E7\u06E8\x03\x02\x02\x02\u06E8\u06EA\x05H%\x02" +
		"\u06E9\u06E6\x03\x02\x02\x02\u06EA\u06ED\x03\x02\x02\x02\u06EB\u06E9\x03" +
		"\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06EF\x03\x02\x02\x02\u06ED" +
		"\u06EB\x03\x02\x02\x02\u06EE\u06E4\x03\x02\x02\x02\u06EE\u06EF\x03\x02" +
		"\x02\x02\u06EF\u06F4\x03\x02\x02\x02\u06F0\u06F4\t\x07\x02\x02\u06F1\u06F2" +
		"\x07\u023F\x02\x02\u06F2\u06F4\x07\u01AB\x02\x02\u06F3\u06E0\x03\x02\x02" +
		"\x02\u06F3\u06E1\x03\x02\x02\x02\u06F3\u06F0\x03\x02\x02\x02\u06F3\u06F1" +
		"\x03\x02\x02\x02\u06F4\u06FB\x03\x02\x02\x02\u06F5\u06F6\x07\u025E\x02" +
		"\x02\u06F6\u06F7\x07\u028F\x02\x02\u06F7\u06FB\x05\u0462\u0232\x02\u06F8" +
		"\u06F9\x06\x1F\x18\x02\u06F9\u06FB\x05D#\x02\u06FA\u06D9\x03\x02\x02\x02" +
		"\u06FA\u06DF\x03\x02\x02\x02\u06FA\u06F5\x03\x02\x02\x02\u06FA\u06F8\x03" +
		"\x02\x02\x02\u06FB=\x03\x02\x02\x02\u06FC\u06FD\x07\u0294\x02\x02\u06FD" +
		"\u06FE\x07\u0158\x02\x02\u06FE\u06FF\x05\u0430\u0219\x02\u06FF\u0700\x07" +
		"\u026D\x02\x02\u0700\u0702\t\b\x02\x02\u0701\u0703\x05@!\x02\u0702\u0701" +
		"\x03\x02\x02\x02\u0702\u0703\x03\x02\x02\x02\u0703?\x03\x02\x02\x02\u0704" +
		"\u070B\x05B\"\x02\u0705\u0707\x07\u0198\x02\x02\u0706\u0705\x03\x02\x02" +
		"\x02\u0706\u0707\x03\x02\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\u070A" +
		"\x05B\"\x02\u0709\u0706\x03\x02\x02\x02\u070A\u070D\x03\x02\x02\x02\u070B" +
		"\u0709\x03\x02\x02\x02\u070B\u070C\x03\x02\x02\x02\u070CA\x03\x02\x02" +
		"\x02\u070D\u070B\x03\x02\x02\x02\u070E\u070F\x05\x9AN\x02\u070FC\x03\x02" +
		"\x02\x02\u0710\u0717\x05F$\x02\u0711\u0713\x07\u0198\x02\x02\u0712\u0711" +
		"\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713\u0714\x03\x02\x02\x02" +
		"\u0714\u0716\x05F$\x02\u0715\u0712\x03\x02\x02\x02\u0716\u0719\x03\x02" +
		"\x02\x02\u0717\u0715\x03\x02\x02\x02\u0717\u0718\x03\x02\x02\x02\u0718" +
		"E\x03\x02\x02\x02\u0719\u0717\x03\x02\x02\x02\u071A\u071C\x07\xA6\x02" +
		"\x02\u071B\u071D\x07\u0181\x02\x02\u071C\u071B\x03\x02\x02\x02\u071C\u071D" +
		"\x03\x02\x02\x02\u071D\u071E\x03\x02\x02\x02\u071E\u0725\x05\u049C\u024F" +
		"\x02\u071F\u0725\x05\x92J\x02\u0720\u0725\x05\x94K\x02\u0721\u0725\x05" +
		"\x9AN\x02\u0722\u0725\x05\x9CO\x02\u0723\u0725\x05\xA2R\x02\u0724\u071A" +
		"\x03\x02\x02\x02\u0724\u071F\x03\x02\x02\x02\u0724\u0720\x03\x02\x02\x02" +
		"\u0724\u0721\x03\x02\x02\x02\u0724\u0722\x03\x02\x02\x02\u0724\u0723\x03" +
		"\x02\x02\x02\u0725G\x03\x02\x02\x02\u0726\u0728\x07\xA6\x02\x02\u0727" +
		"\u0729\x07\u0181\x02\x02\u0728\u0727\x03\x02\x02\x02\u0728\u0729\x03\x02" +
		"\x02\x02\u0729\u072A\x03\x02\x02\x02\u072A\u072E\x05\u049C\u024F\x02\u072B" +
		"\u072E\x05\x92J\x02\u072C\u072E\x05\x94K\x02\u072D\u0726\x03\x02\x02\x02" +
		"\u072D\u072B\x03\x02\x02\x02\u072D\u072C\x03\x02\x02\x02\u072EI\x03\x02" +
		"\x02\x02\u072F\u0731\x05\xA8U\x02\u0730\u072F\x03\x02\x02\x02\u0730\u0731" +
		"\x03\x02\x02\x02\u0731\u0733\x03\x02\x02\x02\u0732\u0734\x05\u03CA\u01E6" +
		"\x02\u0733\u0732\x03\x02\x02\x02\u0733\u0734\x03\x02\x02\x02\u0734\u0736" +
		"\x03\x02\x02\x02\u0735\u0737\x05\xAAV\x02\u0736\u0735\x03\x02\x02\x02" +
		"\u0736\u0737\x03\x02\x02\x02\u0737\u0738\x03\x02\x02\x02\u0738\u0739\x07" +
		"\u0171\x02\x02\u0739\u073A\x05\u042C\u0217\x02\u073A\u073B\x05L\'\x02" +
		"\u073BK\x03\x02\x02\x02\u073C\u073E\x05\u040E\u0208\x02\u073D\u073C\x03" +
		"\x02\x02\x02\u073D\u073E\x03\x02\x02\x02\u073E\u073F\x03\x02\x02\x02\u073F" +
		"\u0740\x07\u01B1\x02\x02\u0740\u0741\x05N(\x02\u0741M\x03\x02\x02\x02" +
		"\u0742\u0744\x05`1\x02\u0743\u0745\x05P)\x02\u0744\u0743\x03\x02\x02\x02" +
		"\u0744\u0745\x03\x02\x02\x02\u0745O\x03\x02\x02\x02\u0746\u0748\x07\u02AC" +
		"\x02\x02\u0747\u0749\t\t\x02\x02\u0748\u0747\x03\x02\x02\x02\u0748\u0749" +
		"\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u074B\x07\u01C5\x02" +
		"\x02\u074B\u074C\x07\u024A\x02\x02\u074CQ\x03\x02\x02\x02\u074D\u0760" +
		"\x07\u01CD\x02\x02\u074E\u0761\x05T+\x02\u074F\u0761\x05X-\x02\u0750\u0761" +
		"\x05f4\x02\u0751\u0761\x05d3\x02\u0752\u0761\x05h5\x02\u0753\u0761\x05" +
		"v<\x02\u0754\u0761\x05\xA4S\x02\u0755\u0761\x05\xACW\x02\u0756\u0761\x05" +
		"p9\x02\u0757\u0761\x05|?\x02\u0758\u0761\x05\x82B\x02\u0759\u0761\x05" +
		"\xB0Y\x02\u075A\u075B\x06*\x19\x02\u075B\u0761\x05\xB2Z\x02\u075C\u075D" +
		"\x06*\x1A\x02\u075D\u0761\x05\xB4[\x02\u075E\u075F\x06*\x1B\x02\u075F" +
		"\u0761\x05\x84C\x02\u0760\u074E\x03\x02\x02\x02\u0760\u074F\x03\x02\x02" +
		"\x02\u0760\u0750\x03\x02\x02\x02\u0760\u0751\x03\x02\x02\x02\u0760\u0752" +
		"\x03\x02\x02\x02\u0760\u0753\x03\x02\x02\x02\u0760\u0754\x03\x02\x02\x02" +
		"\u0760\u0755\x03\x02\x02\x02\u0760\u0756\x03\x02\x02\x02\u0760\u0757\x03" +
		"\x02\x02\x02\u0760\u0758\x03\x02\x02\x02\u0760\u0759\x03\x02\x02\x02\u0760" +
		"\u075A\x03\x02\x02\x02\u0760\u075C\x03\x02\x02\x02\u0760\u075E\x03\x02" +
		"\x02\x02\u0761S\x03\x02\x02\x02\u0762\u0764\x07\u01D5\x02\x02\u0763\u0765" +
		"\x05\u03CE\u01E8\x02\u0764\u0763\x03\x02\x02\x02\u0764\u0765\x03\x02\x02" +
		"\x02\u0765\u0766\x03\x02\x02\x02\u0766\u076A\x05\u041A\u020E\x02\u0767" +
		"\u0769\x05V,\x02\u0768\u0767\x03\x02\x02\x02\u0769\u076C\x03\x02\x02\x02" +
		"\u076A\u0768\x03\x02\x02\x02\u076A\u076B\x03\x02\x02\x02\u076BU\x03\x02" +
		"\x02\x02\u076C\u076A\x03\x02\x02\x02\u076D\u0772\x05\u03B2\u01DA\x02\u076E" +
		"\u0772\x05\u03AE\u01D8\x02\u076F\u0770\x06,\x1C\x02\u0770\u0772\x05\u03B0" +
		"\u01D9\x02\u0771\u076D\x03\x02\x02\x02\u0771\u076E\x03\x02\x02\x02\u0771" +
		"\u076F\x03\x02\x02\x02\u0772W\x03\x02\x02\x02\u0773\u0775\x07\u0159\x02" +
		"\x02\u0774\u0773\x03\x02\x02\x02\u0774\u0775\x03\x02\x02\x02\u0775\u0776" +
		"\x03\x02\x02\x02\u0776\u0778\x07\u0289\x02\x02\u0777\u0779\x05\u03CE\u01E8" +
		"\x02\u0778\u0777\x03\x02\x02\x02\u0778\u0779\x03\x02\x02\x02\u0779\u077A" +
		"\x03\x02\x02\x02\u077A\u0791\x05\u0442\u0222\x02\u077B\u077C\x07\u019B" +
		"\x02\x02\u077C\u077D\x05Z.\x02\u077D\u077E\x07\u019C\x02\x02\u077E\u0780" +
		"\x03\x02\x02\x02\u077F\u077B\x03\x02\x02\x02\u077F\u0780\x03\x02\x02\x02" +
		"\u0780\u0782\x03\x02\x02\x02\u0781\u0783\x05\u03A6\u01D4\x02\u0782\u0781" +
		"\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783\u0785\x03\x02\x02\x02" +
		"\u0784\u0786\x05\u03B4\u01DB\x02\u0785\u0784\x03\x02\x02\x02\u0785\u0786" +
		"\x03\x02\x02\x02\u0786\u0788\x03\x02\x02\x02\u0787\u0789\x05^0\x02\u0788" +
		"\u0787\x03\x02\x02\x02\u0788\u0789\x03\x02\x02\x02\u0789\u0792\x03\x02" +
		"\x02\x02\u078A\u078B\x07\u0220\x02\x02\u078B\u0792\x05\u0448\u0225\x02" +
		"\u078C\u078D\x07\u019B\x02\x02\u078D\u078E\x07\u0220\x02\x02\u078E\u078F" +
		"\x05\u0448\u0225\x02\u078F\u0790\x07\u019C\x02\x02\u0790\u0792\x03\x02" +
		"\x02\x02\u0791\u077F\x03\x02\x02\x02\u0791\u078A\x03\x02\x02\x02\u0791" +
		"\u078C\x03\x02\x02\x02\u0792Y\x03\x02\x02\x02\u0793\u0798\x05\\/\x02\u0794" +
		"\u0795\x07\u0198\x02\x02\u0795\u0797\x05\\/\x02\u0796\u0794\x03\x02\x02" +
		"\x02\u0797\u079A\x03\x02\x02\x02\u0798\u0796\x03\x02\x02\x02\u0798\u0799" +
		"\x03\x02\x02\x02\u0799[\x03\x02\x02\x02\u079A\u0798\x03\x02\x02\x02\u079B" +
		"\u079E\x05\u035A\u01AE\x02\u079C\u079E\x05\u0362\u01B2\x02\u079D\u079B" +
		"\x03\x02\x02\x02\u079D\u079C\x03\x02\x02\x02\u079E]\x03\x02\x02\x02\u079F" +
		"\u07A1\t\n\x02\x02\u07A0\u079F\x03\x02\x02\x02\u07A0\u07A1\x03\x02\x02" +
		"\x02\u07A1\u07A3\x03\x02\x02\x02\u07A2\u07A4\x07\u01B1\x02\x02\u07A3\u07A2" +
		"\x03\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A5\x03\x02\x02\x02" +
		"\u07A5\u07A6\x05`1\x02\u07A6_\x03\x02\x02\x02\u07A7\u07AA\x05\u0114\x8B" +
		"\x02\u07A8\u07AA\x05\u0118\x8D\x02\u07A9\u07A7\x03\x02\x02\x02\u07A9\u07A8" +
		"\x03\x02\x02\x02\u07AAa\x03\x02\x02\x02\u07AB\u07AF\x07\u01CD\x02\x02" +
		"\u07AC\u07B0\x05d3\x02\u07AD\u07B0\x05f4\x02\u07AE\u07B0\x05h5\x02\u07AF" +
		"\u07AC\x03\x02\x02\x02\u07AF\u07AD\x03\x02\x02\x02\u07AF\u07AE\x03\x02" +
		"\x02\x02\u07B0\u07B2\x03\x02\x02\x02\u07B1\u07B3\x07\u0199\x02\x02\u07B2" +
		"\u07B1\x03\x02\x02\x02\u07B2\u07B3\x03\x02\x02\x02\u07B3\u07B4\x03\x02" +
		"\x02\x02\u07B4\u07B5\x07\x02\x02\x03\u07B5c\x03\x02\x02\x02\u07B6\u07B8" +
		"\x05\u03CA";
	private static readonly _serializedATNSegment6: string =
		"\u01E6\x02\u07B7\u07B6\x03\x02\x02\x02\u07B7\u07B8\x03\x02\x02\x02\u07B8" +
		"\u07B9\x03\x02\x02\x02\u07B9\u07BA\x07\u0254\x02\x02\u07BA\u07BB\x05\u041E" +
		"\u0210\x02\u07BB\u07C4\x07\u019B\x02\x02\u07BC\u07C1\x05\u03D0\u01E9\x02" +
		"\u07BD\u07BE\x07\u0198\x02\x02\u07BE\u07C0\x05\u03D0\u01E9\x02\u07BF\u07BD" +
		"\x03\x02\x02\x02\u07C0\u07C3\x03\x02\x02\x02\u07C1\u07BF\x03\x02\x02\x02" +
		"\u07C1\u07C2\x03\x02\x02\x02\u07C2\u07C5\x03\x02\x02\x02\u07C3\u07C1\x03" +
		"\x02\x02\x02\u07C4\u07BC\x03\x02\x02\x02\u07C4\u07C5\x03\x02\x02\x02\u07C5" +
		"\u07C6\x03\x02\x02\x02\u07C6\u07CA\x07\u019C\x02\x02\u07C7\u07C9\x05j" +
		"6\x02\u07C8\u07C7\x03\x02\x02\x02\u07C9\u07CC\x03\x02\x02\x02\u07CA\u07C8" +
		"\x03\x02\x02\x02\u07CA\u07CB\x03\x02\x02\x02\u07CB\u07CD\x03\x02\x02\x02" +
		"\u07CC\u07CA\x03\x02\x02\x02\u07CD\u07CE\x05\u030A\u0186\x02\u07CEe\x03" +
		"\x02\x02\x02\u07CF\u07D1\x05\u03CA\u01E6\x02\u07D0\u07CF\x03\x02\x02\x02" +
		"\u07D0\u07D1\x03\x02\x02\x02\u07D1\u07D2\x03\x02\x02\x02\u07D2\u07D3\x07" +
		"\u0166\x02\x02\u07D3\u07D4\x05\u0422\u0212\x02\u07D4\u07DD\x07\u019B\x02" +
		"\x02\u07D5\u07DA\x05\u03D2\u01EA\x02\u07D6\u07D7\x07\u0198\x02\x02\u07D7" +
		"\u07D9\x05\u03D2\u01EA\x02\u07D8\u07D6\x03\x02\x02\x02\u07D9\u07DC\x03" +
		"\x02\x02\x02\u07DA\u07D8\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02\u07DB" +
		"\u07DE\x03\x02\x02\x02\u07DC\u07DA\x03\x02\x02\x02\u07DD\u07D5\x03\x02" +
		"\x02\x02\u07DD\u07DE\x03\x02\x02\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF" +
		"\u07E0\x07\u019C\x02\x02\u07E0\u07E1\x07\u0127\x02\x02\u07E1\u07E5\x05" +
		"\u03D6\u01EC\x02\u07E2\u07E4\x05j6\x02\u07E3\u07E2\x03\x02\x02\x02\u07E4" +
		"\u07E7\x03\x02\x02\x02\u07E5\u07E3\x03\x02\x02\x02\u07E5\u07E6\x03\x02" +
		"\x02\x02\u07E6\u07E8\x03\x02\x02\x02\u07E7\u07E5\x03\x02\x02\x02\u07E8" +
		"\u07E9\x05\u030A\u0186\x02\u07E9g\x03\x02\x02\x02\u07EA\u07EC\x07?\x02" +
		"\x02\u07EB\u07EA\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC\u07ED" +
		"\x03\x02\x02\x02\u07ED\u07EE\x07\u0166\x02\x02\u07EE\u07EF\x05\u043A\u021E" +
		"\x02\u07EF\u07F0\x07\u0127\x02\x02\u07F0\u07F1\t\v\x02\x02\u07F1\u07F2" +
		"\x071\x02\x02\u07F2\u07F3\x05\u0482\u0242\x02\u07F3i\x03\x02\x02\x02\u07F4" +
		"\u07FA\x05n8\x02\u07F5\u07F7\x07\u023F\x02\x02\u07F6\u07F5\x03\x02\x02" +
		"\x02\u07F6\u07F7\x03\x02\x02\x02\u07F7\u07F8\x03\x02\x02\x02\u07F8\u07FA" +
		"\x07\u01E5\x02\x02\u07F9\u07F4\x03\x02\x02\x02\u07F9\u07F6\x03\x02\x02" +
		"\x02\u07FAk\x03\x02\x02\x02\u07FB\u07FD\x05j6\x02\u07FC\u07FB\x03\x02" +
		"\x02\x02\u07FD\u07FE\x03\x02\x02\x02\u07FE\u07FC\x03\x02\x02\x02\u07FE" +
		"\u07FF\x03\x02\x02\x02\u07FFm\x03\x02\x02\x02\u0800\u0801\x07\r\x02\x02" +
		"\u0801\u0812\x05\u0482\u0242\x02\u0802\u0803\x07\x1C\x02\x02\u0803\u0812" +
		"\x07\u027A\x02\x02\u0804\u0805\x07\x1D\x02\x02\u0805\u0812\x07\u027A\x02" +
		"\x02\u0806\u0807\x07\x0F\x02\x02\u0807\u0812\x07\u027A\x02\x02\u0808\u0809" +
		"\x07\u0257\x02\x02\u0809\u080A\x07\u027A\x02\x02\u080A\u0812\x07o\x02" +
		"\x02\u080B\u080C\x07\u0239\x02\x02\u080C\u080D\x07\u027A\x02\x02\u080D" +
		"\u0812\x07o\x02\x02\u080E\u080F\x07\u027A\x02\x02\u080F\u0810\x07,\x02" +
		"\x02\u0810\u0812\t\f\x02\x02\u0811\u0800\x03\x02\x02\x02\u0811\u0802\x03" +
		"\x02\x02\x02\u0811\u0804\x03\x02\x02\x02\u0811\u0806\x03\x02\x02\x02\u0811" +
		"\u0808\x03\x02\x02\x02\u0811\u080B\x03\x02\x02\x02\u0811\u080E\x03\x02" +
		"\x02\x02\u0812o\x03\x02\x02\x02\u0813\u0815\x05\u0402\u0202\x02\u0814" +
		"\u0813\x03\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u083F\x03\x02" +
		"\x02\x02\u0816\u0818\x07\u0296\x02\x02\u0817\u0816\x03\x02\x02\x02\u0817" +
		"\u0818\x03\x02\x02\x02\u0818\u0819\x03\x02\x02\x02\u0819\u0822\x07\u020B" +
		"\x02\x02\u081A\u081B\x069\x1D\x02\u081B\u081D\x05\u0414\u020B\x02\u081C" +
		"\u081E\x05\u0386\u01C4\x02\u081D\u081C\x03\x02\x02\x02\u081D\u081E\x03" +
		"\x02\x02\x02\u081E\u0823\x03\x02\x02\x02\u081F\u0821\x05r:\x02\u0820\u081F" +
		"\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u0823\x03\x02\x02\x02" +
		"\u0822\u081A\x03\x02\x02\x02\u0822\u0820\x03\x02\x02\x02\u0823\u0824\x03" +
		"\x02\x02\x02\u0824\u0828\x05t;\x02\u0825\u0827\x05\u0380\u01C1\x02\u0826" +
		"\u0825\x03\x02\x02\x02\u0827\u082A\x03\x02\x02\x02\u0828\u0826\x03\x02" +
		"\x02\x02\u0828\u0829\x03\x02\x02\x02\u0829\u0840\x03\x02\x02\x02\u082A" +
		"\u0828\x03\x02\x02\x02\u082B\u082C\x07\u01FE\x02\x02\u082C\u082D\x07\u020B" +
		"\x02\x02\u082D\u082E\x05\u0414\u020B\x02\u082E\u0832\x05t;\x02\u082F\u0831" +
		"\x05\u0388\u01C5\x02\u0830\u082F\x03\x02\x02\x02\u0831\u0834\x03\x02\x02" +
		"\x02\u0832\u0830\x03\x02\x02\x02\u0832\u0833\x03\x02\x02\x02\u0833\u0840" +
		"\x03\x02\x02\x02\u0834\u0832\x03\x02\x02\x02\u0835\u0836\x07\u0272\x02" +
		"\x02\u0836\u0837\x07\u020B\x02\x02\u0837\u0838\x05\u0414\u020B\x02\u0838" +
		"\u083C\x05t;\x02\u0839\u083B\x05\u038A\u01C6\x02\u083A\u0839\x03\x02\x02" +
		"\x02\u083B\u083E\x03\x02\x02\x02\u083C\u083A\x03\x02\x02\x02\u083C\u083D" +
		"\x03\x02\x02\x02\u083D\u0840\x03\x02\x02\x02\u083E\u083C\x03\x02\x02\x02" +
		"\u083F\u0817\x03\x02\x02\x02\u083F\u082B\x03\x02\x02\x02\u083F\u0835\x03" +
		"\x02\x02\x02\u0840\u0842\x03\x02\x02\x02\u0841\u0843\x052\x1A\x02\u0842" +
		"\u0841\x03\x02\x02\x02\u0842\u0843\x03\x02\x02\x02\u0843q\x03\x02\x02" +
		"\x02\u0844\u0847\x05\u0414\u020B\x02\u0845\u0846\x07\u029C\x02\x02\u0846" +
		"\u0848\x05\u037E\u01C0\x02\u0847\u0845\x03\x02\x02\x02\u0847\u0848\x03" +
		"\x02\x02\x02\u0848\u084E\x03\x02\x02\x02\u0849\u084A\x05\u0414\u020B\x02" +
		"\u084A\u084B\x07\u0164\x02\x02\u084B\u084C\x05\u037E\u01C0\x02\u084C\u084E" +
		"\x03\x02\x02\x02\u084D\u0844\x03\x02\x02\x02\u084D\u0849\x03\x02\x02\x02" +
		"\u084Es\x03\x02\x02\x02\u084F\u0850\x07\u0245\x02\x02\u0850\u0851\x05" +
		"\u0448\u0225\x02\u0851\u0852\x05\u037C\u01BF\x02\u0852u\x03\x02\x02\x02" +
		"\u0853\u0854\x07\xB8\x02\x02\u0854\u0855\x07\u0202\x02\x02\u0855\u0856" +
		"\x05\u0432\u021A\x02\u0856\u0857\x07\u01AC\x02\x02\u0857\u0858\t\r\x02" +
		"\x02\u0858\u085A\x05\u0482\u0242\x02\u0859\u085B\x05x=\x02\u085A\u0859" +
		"\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085Bw\x03\x02\x02\x02\u085C" +
		"\u0863\x05z>\x02\u085D\u085F\x07\u0198\x02\x02\u085E\u085D\x03\x02\x02" +
		"\x02\u085E\u085F\x03\x02\x02\x02\u085F\u0860\x03\x02\x02\x02\u0860\u0862" +
		"\x05z>\x02\u0861\u085E\x03\x02\x02\x02\u0862\u0865\x03\x02\x02\x02\u0863" +
		"\u0861\x03\x02\x02\x02\u0863\u0864\x03\x02\x02\x02\u0864y\x03\x02\x02" +
		"\x02\u0865\u0863\x03\x02\x02\x02\u0866\u086D\x05\x8EH\x02\u0867\u086D" +
		"\x05\x90I\x02\u0868\u086D\x05\x98M\x02\u0869\u086D\x05\x9AN\x02\u086A" +
		"\u086D\x05\x9CO\x02\u086B\u086D\x05\x9EP\x02\u086C\u0866\x03\x02\x02\x02" +
		"\u086C\u0867\x03\x02\x02\x02\u086C\u0868\x03\x02\x02\x02\u086C\u0869\x03" +
		"\x02\x02\x02\u086C\u086A\x03\x02\x02\x02\u086C\u086B\x03\x02\x02\x02\u086D" +
		"{\x03\x02\x02\x02\u086E\u086F\x07-\x02\x02\u086F\u0870\x05\u043C\u021F" +
		"\x02\u0870\u0871\x07\u01FB\x02\x02\u0871\u0872\x07o\x02\x02\u0872\u0873" +
		"\x078\x02\x02\u0873\u0874\x05\u0496\u024C\x02\u0874\u0875\x05~@\x02\u0875" +
		"}\x03\x02\x02\x02\u0876\u0877\x07\x1F\x02\x02\u0877\u0878\x07\u019B\x02" +
		"\x02\u0878\u087D\x05\x80A\x02\u0879\u087A\x07\u0198\x02\x02\u087A\u087C" +
		"\x05\x80A\x02\u087B\u0879\x03\x02\x02\x02\u087C\u087F\x03\x02\x02\x02" +
		"\u087D\u087B\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02\u087E\u0880\x03" +
		"\x02\x02\x02\u087F\u087D\x03\x02\x02\x02\u0880\u0881\x07\u019C\x02\x02" +
		"\u0881\x7F\x03\x02\x02\x02\u0882\u0883\x07\x1A\x02\x02\u0883\u0891\x05" +
		"\u0482\u0242\x02\u0884\u0885\x07\u01D5\x02\x02\u0885\u0891\x05\u0482\u0242" +
		"\x02\u0886\u0887\x07\u016E\x02\x02\u0887\u0891\x05\u0482\u0242\x02\u0888" +
		"\u0889\x07\xFD\x02\x02\u0889\u0891\x05\u0482\u0242\x02\u088A\u088B\x07" +
		"0\x02\x02\u088B\u0891\x05\u0482\u0242\x02\u088C\u088D\x07 \x02\x02\u088D" +
		"\u0891\x05\u0482\u0242\x02\u088E\u088F\x07#\x02\x02\u088F\u0891\x05\u046E" +
		"\u0238\x02\u0890\u0882\x03\x02\x02\x02\u0890\u0884\x03\x02\x02\x02\u0890" +
		"\u0886\x03\x02\x02\x02\u0890\u0888\x03\x02\x02\x02\u0890\u088A\x03\x02" +
		"\x02\x02\u0890\u088C\x03\x02\x02\x02\u0890\u088E\x03\x02\x02\x02\u0891" +
		"\x81\x03\x02\x02\x02\u0892\u0893\x07\u0158\x02\x02\u0893\u0894\x05\u042E" +
		"\u0218\x02\u0894\u0899\x05\x86D\x02\u0895\u0896\x07\u029B\x02\x02\u0896" +
		"\u0897\x07\xB8\x02\x02\u0897\u0898\x07\u0202\x02\x02\u0898\u089A\x05\u0434" +
		"\u021B\x02\u0899\u0895\x03\x02\x02\x02\u0899\u089A\x03\x02\x02\x02\u089A" +
		"\u089C\x03\x02\x02\x02\u089B\u089D\x05\x8AF\x02\u089C\u089B\x03\x02\x02" +
		"\x02\u089C\u089D\x03\x02\x02\x02\u089D\x83\x03\x02\x02\x02\u089E\u089F" +
		"\x07\u0294\x02\x02\u089F\u08A0\x07\u0158\x02\x02\u08A0\u08A1\x05\u042E" +
		"\u0218\x02\u08A1\u08A2\x07\u01AC\x02\x02\u08A2\u08A4\x05\x88E\x02\u08A3" +
		"\u08A5\x05@!\x02\u08A4\u08A3\x03\x02\x02\x02\u08A4\u08A5\x03\x02\x02\x02" +
		"\u08A5\x85\x03\x02\x02\x02\u08A6\u08A9\x06D\x1E\x02\u08A7\u08A8\x07\u01AC" +
		"\x02\x02\u08A8\u08AA\x05\x88E\x02\u08A9\u08A7\x03\x02\x02\x02\u08A9\u08AA" +
		"\x03\x02\x02\x02\u08AA\u08AE\x03\x02\x02\x02\u08AB\u08AC\x07\u01AC\x02" +
		"\x02\u08AC\u08AE\x05\x88E\x02\u08AD\u08A6\x03\x02\x02\x02\u08AD\u08AB" +
		"\x03\x02\x02\x02\u08AE\x87\x03\x02\x02\x02\u08AF\u08B0\x07p\x02\x02\u08B0" +
		"\u08B1\x05\u0482\u0242\x02\u08B1\x89\x03\x02\x02\x02\u08B2\u08B9\x05\x8C" +
		"G\x02\u08B3\u08B5\x07\u0198\x02\x02\u08B4\u08B3\x03\x02\x02\x02\u08B4" +
		"\u08B5\x03\x02\x02\x02\u08B5\u08B6\x03\x02\x02\x02\u08B6\u08B8\x05\x8C" +
		"G\x02\u08B7\u08B4\x03\x02\x02\x02\u08B8\u08BB\x03\x02\x02\x02\u08B9\u08B7" +
		"\x03\x02\x02\x02\u08B9\u08BA\x03\x02\x02\x02\u08BA\x8B\x03\x02\x02\x02" +
		"\u08BB\u08B9\x03\x02\x02\x02\u08BC\u08C9\x05\x8EH\x02\u08BD\u08C9\x05" +
		"\x92J\x02\u08BE\u08C9\x05\x94K\x02\u08BF\u08C9\x05\x96L\x02\u08C0\u08C9" +
		"\x05\x98M\x02\u08C1\u08C9\x05\x9AN\x02\u08C2\u08C9\x05\x9CO\x02\u08C3" +
		"\u08C9\x05\x9EP\x02\u08C4\u08C5\x06G\x1F\x02\u08C5\u08C9\x05\xA0Q\x02" +
		"\u08C6\u08C7\x06G \x02\u08C7\u08C9\x05\xA2R\x02\u08C8\u08BC\x03\x02\x02" +
		"\x02\u08C8\u08BD\x03\x02\x02\x02\u08C8\u08BE\x03\x02\x02\x02\u08C8\u08BF" +
		"\x03\x02\x02\x02\u08C8\u08C0\x03\x02\x02\x02\u08C8\u08C1\x03\x02\x02\x02" +
		"\u08C8\u08C2\x03\x02\x02\x02\u08C8\u08C3\x03\x02\x02\x02\u08C8\u08C4\x03" +
		"\x02\x02\x02\u08C8\u08C6\x03\x02\x02\x02\u08C9\x8D\x03\x02\x02\x02\u08CA" +
		"\u08CC\x07\xA6\x02\x02\u08CB\u08CD\x07\u0181\x02\x02\u08CC\u08CB\x03\x02" +
		"\x02\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD\u08CE\x03\x02\x02\x02\u08CE" +
		"\u08CF\x05\u049C\u024F\x02\u08CF\x8F\x03\x02\x02\x02\u08D0\u08D2\t\x0E" +
		"\x02\x02\u08D1\u08D3\x07\u0181\x02\x02\u08D2\u08D1\x03\x02\x02\x02\u08D2" +
		"\u08D3\x03\x02\x02\x02\u08D3\u08D4\x03\x02\x02\x02\u08D4\u08D5\x05\u049C" +
		"\u024F\x02\u08D5\x91\x03\x02\x02\x02\u08D6\u08D8\x07F\x02\x02\u08D7\u08D9" +
		"\x07\u0181\x02\x02\u08D8\u08D7\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02" +
		"\x02\u08D9\u08DA\x03\x02\x02\x02\u08DA\u08DB\x05\u049C\u024F\x02\u08DB" +
		"\x93\x03\x02\x02\x02\u08DC\u08DE\x07\xD4\x02\x02\u08DD\u08DF\x07\u0181" +
		"\x02\x02\u08DE\u08DD\x03\x02\x02\x02\u08DE\u08DF\x03\x02\x02\x02\u08DF" +
		"\u08E0\x03\x02\x02\x02\u08E0\u08E1\x05\u049C\u024F\x02\u08E1\x95\x03\x02" +
		"\x02\x02\u08E2\u08E4\x07\x8D\x02\x02\u08E3\u08E5\x07\u0181\x02\x02\u08E4" +
		"\u08E3\x03\x02\x02\x02\u08E4\u08E5\x03\x02\x02\x02\u08E5\u08E6\x03\x02" +
		"\x02\x02\u08E6\u08E7\x05\u049C\u024F\x02\u08E7\x97\x03\x02\x02\x02\u08E8" +
		"\u08EA\x07\xF0\x02\x02\u08E9\u08EB\x07\u0181\x02\x02\u08EA\u08E9\x03\x02" +
		"\x02\x02\u08EA\u08EB\x03\x02\x02\x02\u08EB\u08EC\x03\x02\x02\x02\u08EC" +
		"\u08ED\x05\u0470\u0239\x02\u08ED\x99\x03\x02\x02\x02\u08EE\u08F0\x07\u014A" +
		"\x02\x02\u08EF\u08EE\x03\x02\x02\x02\u08EF\u08F0\x03\x02\x02\x02\u08F0" +
		"\u08F1\x03\x02\x02\x02\u08F1\u08F3\x07\x82\x02\x02\u08F2\u08F4\x07\u0181" +
		"\x02\x02\u08F3\u08F2\x03\x02\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4" +
		"\u08F5\x03\x02\x02\x02\u08F5\u08F6\x05\u0440\u0221\x02\u08F6\x9B\x03\x02" +
		"\x02\x02\u08F7\u08F8\t\x0F\x02\x02\u08F8\x9D\x03\x02\x02\x02\u08F9\u08FB" +
		"\x07\r\x02\x02\u08FA\u08FC\x07\u0181\x02\x02\u08FB\u08FA\x03\x02\x02\x02" +
		"\u08FB\u08FC\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02\x02\u08FD\u08FE\x05" +
		"\u0482\u0242\x02\u08FE\x9F\x03\x02\x02\x02\u08FF\u0901\x07\x94\x02\x02" +
		"\u0900\u0902\x07\u0181\x02\x02\u0901\u0900\x03\x02\x02\x02\u0901\u0902" +
		"\x03\x02\x02\x02\u0902\u0903\x03\x02\x02\x02\u0903\u0904\x05\u049C\u024F" +
		"\x02\u0904\xA1\x03\x02\x02\x02\u0905\u0907\x07b\x02\x02\u0906\u0908\x07" +
		"\u0181\x02\x02\u0907\u0906\x03\x02\x02\x02\u0907\u0908\x03\x02\x02\x02" +
		"\u0908\u0909\x03\x02\x02\x02\u0909\u090A\x05\u047C\u023F\x02\u090A\xA3" +
		"\x03\x02\x02\x02\u090B\u090D\x05\xA6T\x02\u090C\u090B\x03\x02\x02\x02" +
		"\u090C\u090D\x03\x02\x02\x02\u090D\u090F\x03\x02\x02\x02\u090E\u0910\x05" +
		"\u03CA\u01E6\x02\u090F\u090E\x03\x02\x02\x02\u090F\u0910\x03\x02\x02\x02" +
		"\u0910\u0912\x03\x02\x02\x02\u0911\u0913\x05\xAAV\x02\u0912\u0911\x03" +
		"\x02\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914" +
		"\u0915\x07\u0171\x02\x02\u0915\u0916\x05\u042A\u0216\x02\u0916\u0917\x05" +
		"L\'\x02\u0917\xA5\x03\x02\x02\x02\u0918\u0919\x07\u024D\x02\x02\u0919" +
		"\u091B\x07\u0260\x02\x02\u091A\u091C\x05\xA8U\x02\u091B\u091A\x03\x02" +
		"\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C\u091F\x03\x02\x02\x02\u091D" +
		"\u091F\x05\xA8U\x02\u091E\u0918\x03\x02\x02\x02\u091E\u091D\x03\x02\x02" +
		"\x02\u091F\xA7\x03\x02\x02\x02\u0920\u0921\x07@\x02\x02\u0921\u0922\x07" +
		"\u0181\x02\x02\u0922\u0923\t\x10\x02\x02\u0923\xA9\x03\x02\x02\x02\u0924" +
		"\u0925\x07\u027A\x02\x02\u0925\u0926\x07,\x02\x02\u0926\u0927\t\f\x02" +
		"\x02\u0927\xAB\x03\x02\x02\x02\u0928\u092A\x05\u03CA\u01E6\x02\u0929\u0928" +
		"\x03\x02\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A\u092B\x03\x02\x02\x02" +
		"\u092B\u092C\x07\u0291\x02\x02\u092C\u092D\x05\u0426\u0214\x02\u092D\u092E" +
		"\t\x11\x02\x02\u092E\u092F\t\x12\x02\x02\u092F\u0930\x07\u0245\x02\x02" +
		"\u0930\u0931\x05\u0448\u0225\x02\u0931\u0932\x07\u01FC\x02\x02\u0932\u0933" +
		"\x07\u01EB\x02\x02\u0933\u0935\x07\u012F\x02\x02\u0934\u0936\x05\xAEX" +
		"\x02\u0935\u0934\x03\x02\x02\x02\u0935\u0936\x03\x02\x02\x02\u0936\u0937" +
		"\x03\x02\x02\x02\u0937\u0938\x05\u030A\u0186\x02\u0938\xAD\x03\x02\x02" +
		"\x02\u0939\u093A\x06X!\x02\u093A\u093B\t\x13\x02\x02\u093B\u093C\x05\u0496" +
		"\u024C\x02\u093C\xAF\x03\x02\x02\x02\u093D\u093F\x05\u03CA\u01E6\x02\u093E" +
		"\u093D\x03\x02\x02\x02\u093E\u093F\x03\x02\x02\x02\u093F\u0940\x03\x02" +
		"\x02\x02\u0940\u0942\x07\x87\x02\x02\u0941\u0943\x05\u03CE\u01E8\x02\u0942" +
		"\u0941\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943\u0944\x03\x02" +
		"\x02\x02\u0944\u0945\x05\u0436\u021C\x02\u0945\u0946\x07\u0245\x02\x02" +
		"\u0946\u0947\x07\u0131\x02\x02\u0947\u094E\x05\u0358\u01AD\x02\u0948\u0949" +
		"\x07\u0245\x02\x02\u0949\u094B\x07_\x02\x02\u094A\u094C\x07\u023F\x02" +
		"\x02\u094B\u094A\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C\u094D" +
		"\x03\x02\x02\x02\u094D\u094F\x07\u0104\x02\x02\u094E\u0948\x03\x02\x02" +
		"\x02\u094E\u094F\x03\x02\x02\x02\u094F\u0956\x03\x02\x02\x02\u0950\u0957" +
		"\x07\x91\x02\x02\u0951\u0954\x07z\x02\x02\u0952\u0953\x07\u0245\x02\x02" +
		"\u0953\u0955\x07/\x02\x02\u0954\u0952\x03\x02\x02\x02\u0954\u0955\x03" +
		"\x02\x02\x02\u0955\u0957\x03\x02\x02\x02\u0956\u0950\x03\x02\x02\x02\u0956" +
		"\u0951\x03\x02\x02\x02\u0956\u0957\x03\x02\x02\x02\u0957\u095A\x03\x02" +
		"\x02\x02\u0958\u0959\x07\r\x02\x02\u0959\u095B\x05\u0482\u0242\x02\u095A" +
		"\u0958\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02\u095B\u095C\x03\x02" +
		"\x02\x02\u095C\u095D\x07\x11\x02\x02\u095D\u095E\x05\u030A\u0186\x02\u095E" +
		"\xB1\x03\x02\x02\x02\u095F\u0961\x07\u02B3\x02\x02\u0960\u0962\x05\u03CE" +
		"\u01E8\x02\u0961\u0960\x03\x02\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962" +
		"\u0963\x03\x02\x02\x02\u0963\u0964\x05\u022A\u0116\x02\u0964\xB3\x03\x02" +
		"\x02\x02\u0965\u0966\x07\u024D\x02\x02\u0966\u0967\x07\u0260\x02\x02\u0967" +
		"\u0968\x07\u0272\x02\x02\u0968\u0969\x07\u02EE\x02\x02\u0969\u096A\x07" +
		"\u02E6\x02\x02\u096A\u096E\x05\u0474\u023B\x02\u096B\u096D\x05\xB6\\\x02" +
		"\u096C\u096B\x03\x02\x02\x02\u096D\u0970\x03\x02\x02\x02\u096E\u096C\x03" +
		"\x02\x02\x02\u096E\u096F\x03\x02\x02\x02\u096F\u097F\x03\x02\x02\x02\u0970" +
		"\u096E\x03\x02\x02\x02\u0971\u0972\x07\u0272\x02\x02\u0972\u0973\x07\u02EE" +
		"\x02\x02\u0973\u0975\x07\u02E6\x02\x02\u0974\u0976\x05\u03CE\u01E8\x02" +
		"\u0975\u0974\x03\x02\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976\u0977\x03" +
		"\x02\x02\x02\u0977\u097B\x05\u0474\u023B\x02\u0978\u097A\x05\xB6\\\x02" +
		"\u0979\u0978\x03\x02\x02\x02\u097A\u097D\x03\x02\x02\x02\u097B\u0979\x03" +
		"\x02\x02\x02\u097B\u097C\x03\x02\x02\x02\u097C\u097F\x03\x02\x02\x02\u097D" +
		"\u097B\x03\x02\x02\x02\u097E\u0965\x03\x02\x02\x02\u097E\u0971\x03\x02" +
		"\x02\x02\u097F\xB5\x03\x02\x02\x02\u0980\u0981\x07\xE7\x02\x02\u0981\u0982" +
		"\x07\u015B\x02\x02\u0982\u0990\x05\u0484\u0243\x02\u0983\u0984\x07\u02EB" +
		"\x02\x02\u0984\u0985\x07\u015B\x02\x02\u0985\u0990\x05\u0484\u0243\x02" +
		"\u0986\u0987\x07\u02ED\x02\x02\u0987\u0988\x05\u0484\u0243\x02\u0988\u0989" +
		"\x07\xA1\x02\x02\u0989\u098A\x07\u01BE\x02\x02\u098A\u098B\x05\u0474\u023B" +
		"\x02\u098B\u0990\x03\x02\x02\x02\u098C\u098D\x07\u02EC\x02\x02\u098D\u098E" +
		"\x07\u015B\x02\x02\u098E\u0990\x05\u0484\u0243\x02\u098F\u0980\x03\x02" +
		"\x02\x02\u098F\u0983\x03\x02\x02\x02\u098F\u0986\x03\x02\x02\x02\u098F" +
		"\u098C\x03\x02\x02\x02\u0990\xB7\x03\x02\x02\x02\u0991\u09A3\x07\u01E9" +
		"\x02\x02\u0992\u09A4\x05\xBA^\x02\u0993\u09A4\x05\xBC_\x02\u0994\u09A4" +
		"\x05\xBE`\x02\u0995\u09A4\x05\xC0a\x02\u0996\u09A4\x05\xC2b\x02\u0997" +
		"\u09A4\x05\xC4c\x02\u0998\u09A4\x05\xC8e\x02\u0999\u09A4\x05\xCAf\x02" +
		"\u099A\u09A4\x05\xCCg\x02\u099B\u09A4\x05\xCEh\x02\u099C\u09A4\x05\xD0" +
		"i\x02\u099D\u099E\x06]\"\x02\u099E\u09A4\x05\xD2j\x02\u099F\u09A0\x06" +
		"]#\x02\u09A0\u09A4\x05\xD4k\x02\u09A1\u09A2\x06]$\x02\u09A2\u09A4\x05" +
		"\xD6l\x02\u09A3\u0992\x03\x02\x02\x02\u09A3\u0993\x03\x02\x02\x02\u09A3" +
		"\u0994\x03\x02\x02\x02\u09A3\u0995\x03\x02\x02\x02\u09A3\u0996\x03\x02" +
		"\x02\x02\u09A3\u0997\x03\x02\x02\x02\u09A3\u0998\x03\x02\x02\x02\u09A3" +
		"\u0999\x03\x02\x02\x02\u09A3\u099A\x03\x02\x02\x02\u09A3\u099B\x03\x02" +
		"\x02\x02\u09A3\u099C\x03\x02\x02\x02\u09A3\u099D\x03\x02\x02\x02\u09A3" +
		"\u099F\x03\x02\x02\x02\u09A3\u09A1\x03\x02\x02\x02\u09A4\xB9\x03\x02\x02" +
		"\x02\u09A5\u09A7\x07\u01D5\x02\x02\u09A6\u09A8\x05\u03CC\u01E7\x02\u09A7" +
		"\u09A6\x03\x02\x02\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8\u09A9\x03\x02" +
		"\x02\x02\u09A9\u09AA\x05\u041C\u020F\x02\u09AA\xBB\x03\x02\x02\x02\u09AB" +
		"\u09AD\x07\x87\x02\x02\u09AC\u09AE\x05\u03CC\u01E7\x02\u09AD\u09AC\x03" +
		"\x02\x02\x02\u09AD\u09AE\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF" +
		"\u09B0\x05\u0438\u021D\x02\u09B0\xBD\x03\x02\x02\x02\u09B1\u09B3\x07\u0166" +
		"\x02\x02\u09B2\u09B4\x05\u03CC\u01E7\x02\u09B3\u09B2\x03\x02\x02\x02\u09B3" +
		"\u09B4\x03\x02\x02\x02\u09B4\u09B5\x03\x02\x02\x02\u09B5\u09B6\x05\u0424" +
		"\u0213\x02\u09B6\xBF\x03\x02\x02\x02\u09B7\u09B9\x07\u0254\x02\x02\u09B8" +
		"\u09BA\x05\u03CC\u01E7\x02\u09B9\u09B8\x03\x02\x02\x02\u09B9\u09BA\x03" +
		"\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB\u09BC\x05\u0420\u0211\x02" +
		"\u09BC\xC1\x03\x02\x02\x02\u09BD\u09BF\x05\u0402\u0202\x02\u09BE\u09BD" +
		"\x03\x02\x02\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C0\x03\x02\x02\x02" +
		"\u09C0\u09C1\x07\u020B\x02\x02\u09C1\u09C2\x05\u0416\u020C\x02\u09C2\u09C3" +
		"\x07\u0245\x02\x02\u09C3\u09C5\x05\u0448\u0225\x02\u09C4\u09C6\x052\x1A" +
		"\x02\u09C5\u09C4\x03\x02\x02\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6\xC3" +
		"\x03\x02\x02\x02\u09C7\u09C8\x07\xB8\x02\x02\u09C8\u09C9\x07\u0202\x02" +
		"\x02\u09C9\u09D4\x05\u0434\u021B\x02\u09CA\u09D1\x05\xC6d\x02\u09CB\u09CD" +
		"\x07\u0198\x02\x02\u09CC\u09CB\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02" +
		"\x02\u09CD\u09CE\x03\x02\x02\x02\u09CE\u09D0\x05\xC6d\x02\u09CF\u09CC" +
		"\x03\x02\x02\x02\u09D0\u09D3\x03\x02\x02\x02\u09D1\u09CF\x03\x02\x02\x02" +
		"\u09D1\u09D2\x03\x02\x02\x02\u09D2\u09D5\x03\x02\x02\x02\u09D3\u09D1\x03" +
		"\x02\x02\x02\u09D4\u09CA\x03\x02\x02\x02\u09D4\u09D5\x03\x02\x02\x02\u09D5" +
		"\xC5\x03\x02\x02\x02\u09D6\u09D9\x05\x9CO\x02\u09D7\u09D9\x05\x9AN\x02" +
		"\u09D8\u09D6\x03\x02\x02\x02\u09D8\u09D7\x03\x02\x02\x02\u09D9\xC7\x03" +
		"\x02\x02\x02\u09DA\u09DC\x07-\x02\x02\u09DB\u09DD\x05\u03CC\u01E7\x02" +
		"\u09DC\u09DB\x03\x02\x02\x02\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09DE\x03" +
		"\x02\x02\x02\u09DE\u09DF\x05\u043E\u0220\x02\u09DF\xC9\x03\x02\x02\x02" +
		"\u09E0\u09E2\x07\u0159\x02\x02\u09E1\u09E0\x03\x02\x02\x02\u09E1\u09E2" +
		"\x03\x02\x02\x02\u09E2\u09E3\x03\x02\x02\x02\u09E3\u09E5\t\x14\x02\x02" +
		"\u09E4\u09E6\x05\u03CC\u01E7\x02\u09E5\u09E4\x03\x02\x02\x02\u09E5\u09E6" +
		"\x03\x02\x02\x02\u09E6\u09E7\x03\x02\x02\x02\u09E7\u09E9\x05\u044A\u0226" +
		"\x02\u09E8\u09EA\t\x04\x02\x02\u09E9\u09E8\x03\x02\x02\x02\u09E9\u09EA" +
		"\x03\x02\x02\x02\u09EA\xCB\x03\x02\x02\x02\u09EB\u09EC\x07\u0158\x02\x02" +
		"\u09EC\u09F7\x05\u0430\u0219\x02\u09ED\u09F4\x05\xC6d\x02\u09EE\u09F0" +
		"\x07\u0198\x02\x02\u09EF\u09EE\x03\x02\x02\x02\u09EF\u09F0\x03\x02\x02" +
		"\x02\u09F0\u09F1\x03\x02\x02\x02\u09F1\u09F3\x05\xC6d\x02\u09F2\u09EF" +
		"\x03\x02\x02\x02\u09F3\u09F6\x03\x02\x02\x02\u09F4\u09F2\x03\x02\x02\x02" +
		"\u09F4\u09F5\x03\x02\x02\x02\u09F5\u09F8\x03\x02\x02\x02\u09F6\u09F4\x03" +
		"\x02\x02\x02\u09F7\u09ED\x03\x02\x02\x02\u09F7\u09F8\x03\x02\x02\x02\u09F8" +
		"\xCD\x03\x02\x02\x02\u09F9\u09FB\x07\u0291\x02\x02\u09FA\u09FC\x05\u03CC" +
		"\u01E7\x02\u09FB\u09FA\x03\x02\x02\x02\u09FB\u09FC\x03\x02\x02\x02\u09FC" +
		"\u09FD\x03\x02\x02\x02\u09FD\u09FE\x05\u0428\u0215\x02\u09FE\xCF\x03\x02" +
		"\x02\x02\u09FF\u0A01\x07\u0171\x02\x02\u0A00\u0A02\x05\u03CC\u01E7\x02" +
		"\u0A01\u0A00\x03\x02\x02\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A03\x03" +
		"\x02\x02\x02\u0A03\u0A05\x05\u03DA\u01EE\x02\u0A04\u0A06\t\x04\x02\x02" +
		"\u0A05\u0A04\x03\x02\x02\x02\u0A05\u0A06\x03\x02\x02\x02\u0A06\xD1\x03" +
		"\x02\x02\x02\u0A07\u0A09\x07\u02B3\x02\x02\u0A08\u0A0A\x05\u03CC\u01E7" +
		"\x02\u0A09\u0A08\x03\x02\x02\x02\u0A09\u0A0A\x03\x02\x02\x02\u0A0A\u0A0B" +
		"\x03\x02\x02\x02\u0A0B\u0A0C\x05\u022A\u0116\x02\u0A0C\xD3\x03\x02\x02" +
		"\x02\u0A0D\u0A0E\x07\u0272\x02\x02\u0A0E\u0A0F\x07\u02EE\x02\x02\u0A0F" +
		"\u0A11\x07\u02E6\x02\x02\u0A10\u0A12\x05\u03CC\u01E7\x02\u0A11\u0A10\x03" +
		"\x02\x02\x02\u0A11\u0A12\x03\x02\x02\x02\u0A12\u0A13\x03\x02\x02\x02\u0A13" +
		"\u0A14\x05\u0474\u023B\x02\u0A14\xD5\x03\x02\x02\x02\u0A15\u0A16\x07\u0294" +
		"\x02\x02\u0A16\u0A17\x07\u0158\x02\x02\u0A17\u0A19\x05\u0430\u0219\x02" +
		"\u0A18\u0A1A\x05@!\x02\u0A19\u0A18\x03\x02\x02\x02\u0A19\u0A1A\x03\x02" +
		"\x02\x02\u0A1A\xD7\x03\x02\x02\x02\u0A1B\u0A1C\x07\u025E\x02\x02\u0A1C" +
		"\u0A1D\t\x14\x02\x02\u0A1D\u0A22\x05\xDAn\x02\u0A1E\u0A1F\x07\u0198\x02" +
		"\x02\u0A1F\u0A21\x05\xDAn\x02\u0A20\u0A1E\x03\x02\x02\x02\u0A21\u0A24" +
		"\x03\x02\x02\x02\u0A22\u0A20\x03\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02" +
		"\u0A23\xD9\x03\x02\x02\x02\u0A24\u0A22\x03\x02\x02\x02\u0A25\u0A26\x05" +
		"\u0448\u0225\x02\u0A26\u0A27\x07\u028F\x02\x02\u0A27\u0A28\x05\u0442\u0222" +
		"\x02\u0A28\xDB\x03\x02\x02\x02\u0A29\u0A2B\x074\x02\x02\u0A2A\u0A2C\x07" +
		"\u0289\x02\x02\u0A2B\u0A2A\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02\x02\x02" +
		"\u0A2C\u0A2D\x03\x02\x02\x02\u0A2D\u0A2E\x05\u0448\u0225\x02\u0A2E\xDD" +
		"\x03\x02\x02\x02\u0A2F\u0A30\x07\xA4\x02\x02\u0A30\u0A31\x07\u0289\x02" +
		"\x02\u0A31\u0A32\x07\u01FD\x02\x02\u0A32\u0A33\x05\u0486\u0244\x02\u0A33" +
		"\xDF\x03\x02\x02\x02\u0A34\u0A35\x07\u01BF\x02\x02\u0A35\u0A3B\x05\u0420" +
		"\u0211\x02\u0A36\u0A38\x07\u019B\x02\x02\u0A37\u0A39\x05\u02EE\u0178\x02" +
		"\u0A38\u0A37\x03\x02\x02\x02\u0A38\u0A39\x03\x02\x02\x02\u0A39\u0A3A\x03" +
		"\x02\x02\x02\u0A3A\u0A3C\x07\u019C\x02\x02\u0A3B\u0A36\x03\x02\x02\x02" +
		"\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C\xE1\x03\x02\x02\x02\u0A3D\u0A3E\x06" +
		"r%\x02\u0A3E\u0A40\x05\u0144\xA3\x02\u0A3F\u0A3D\x03\x02\x02\x02\u0A3F" +
		"\u0A40\x03\x02\x02\x02\u0A40\u0A41\x03\x02\x02\x02\u0A41\u0A45\x07\u01E2" +
		"\x02\x02\u0A42\u0A44\x05\xE6t\x02\u0A43\u0A42\x03\x02\x02\x02\u0A44\u0A47" +
		"\x03\x02\x02\x02\u0A45\u0A43\x03\x02\x02\x02\u0A45\u0A46\x03\x02\x02\x02" +
		"\u0A46\u0A68\x03\x02\x02\x02\u0A47\u0A45\x03\x02\x02\x02\u0A48\u0A60\x07" +
		"\u01FD\x02\x02\u0A49\u0A4A\x05\u044C\u0227\x02\u0A4A\u0A4B\x07\u029C\x02" +
		"\x02\u0A4B\u0A4D\x05\u0152\xAA\x02\u0A4C\u0A4E\x05\u0162\xB2\x02\u0A4D" +
		"\u0A4C\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02\x02\x02\u0A4E\u0A61\x03\x02" +
		"\x02\x02\u0A4F\u0A52\x05\u0448\u0225\x02\u0A50\u0A51\x06r&\x02\u0A51\u0A53" +
		"\x05\u018A\xC6\x02\u0A52\u0A50\x03\x02\x02\x02\u0A52\u0A53\x03\x02\x02" +
		"\x02\u0A53\u0A55\x03\x02\x02\x02\u0A54\u0A56\x05\xE4s\x02\u0A55\u0A54" +
		"\x03\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02\u0A56\u0A58\x03\x02\x02\x02" +
		"\u0A57\u0A59\x05\u0162\xB2\x02\u0A58\u0A57\x03\x02\x02\x02\u0A58\u0A59" +
		"\x03\x02\x02\x02\u0A59\u0A5B\x03\x02\x02\x02\u0A5A\u0A5C\x05\u014C\xA7" +
		"\x02\u0A5B\u0A5A\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5E" +
		"\x03\x02\x02\x02\u0A5D\u0A5F\x05\u0122\x92\x02\u0A5E\u0A5D\x03\x02\x02" +
		"\x02\u0A5E\u0A5F\x03\x02\x02\x02\u0A5F\u0A61\x03\x02\x02\x02\u0A60\u0A49" +
		"\x03\x02\x02\x02\u0A60\u0A4F\x03\x02\x02\x02\u0A61\u0A69\x03\x02\x02\x02" +
		"\u0A62\u0A63\x05\u044C\u0227\x02\u0A63\u0A64\x07\u01FD\x02\x02\u0A64\u0A66" +
		"\x05\u0152\xAA\x02\u0A65\u0A67\x05\u0162\xB2\x02\u0A66\u0A65\x03\x02\x02" +
		"\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0A66\u0A67\x03\x02\x02\x02\u0A67\u0A69\x03\x02\x02\x02\u0A68\u0A48\x03" +
		"\x02\x02\x02\u0A68\u0A62\x03\x02\x02\x02\u0A69\xE3\x03\x02\x02\x02\u0A6A" +
		"\u0A6B\x06s\'\x02\u0A6B\u0A6C\x07\"\x02\x02\u0A6C\u0A6D\x07\u019B\x02" +
		"\x02\u0A6D\u0A6E\x05\u0464\u0233\x02\u0A6E\u0A6F\x07\u019C\x02\x02\u0A6F" +
		"\xE5\x03\x02\x02\x02\u0A70\u0A71\t\x15\x02\x02\u0A71\xE7\x03\x02\x02\x02" +
		"\u0A72\u0A77\x07\x11\x02\x02\u0A73\u0A74\x06u(\x02\u0A74\u0A78\x05\u02EE" +
		"\u0178\x02\u0A75\u0A76\x06u)\x02\u0A76\u0A78\x05\u015C\xAF\x02\u0A77\u0A73" +
		"\x03\x02\x02\x02\u0A77\u0A75\x03\x02\x02\x02\u0A78\xE9\x03\x02\x02\x02" +
		"\u0A79\u0A8B\x07\x18\x02\x02\u0A7A\u0A7B\x05\u0448\u0225\x02\u0A7B\u0A7D" +
		"\x07\x1E\x02\x02\u0A7C\u0A7E\x05\u018A\xC6\x02\u0A7D\u0A7C\x03\x02\x02" +
		"\x02\u0A7D\u0A7E\x03\x02\x02\x02\u0A7E\u0A8C\x03\x02\x02\x02\u0A7F\u0A89" +
		"\x05\u0462\u0232\x02\u0A80\u0A8A\x07\f\x02\x02\u0A81\u0A82\x07\u0258\x02" +
		"\x02\u0A82\u0A84\x05\xECw\x02\u0A83\u0A85\x05\u0162\xB2\x02\u0A84\u0A83" +
		"\x03\x02\x02\x02\u0A84\u0A85\x03\x02\x02\x02\u0A85\u0A87\x03\x02\x02\x02" +
		"\u0A86\u0A88\x05\u0120\x91\x02\u0A87\u0A86\x03\x02\x02\x02\u0A87\u0A88" +
		"\x03\x02\x02\x02\u0A88\u0A8A\x03\x02\x02\x02\u0A89\u0A80\x03\x02\x02\x02" +
		"\u0A89\u0A81\x03\x02\x02\x02\u0A8A\u0A8C\x03\x02\x02\x02\u0A8B\u0A7A\x03" +
		"\x02\x02\x02\u0A8B\u0A7F\x03\x02\x02\x02\u0A8C\xEB\x03\x02\x02\x02\u0A8D" +
		"\u0A98\t\x16\x02\x02\u0A8E\u0A95\x05\u0462\u0232\x02\u0A8F\u0A96\t\x17" +
		"\x02\x02\u0A90\u0A91\t\x18\x02\x02\u0A91\u0A92\x07\u019B\x02\x02\u0A92" +
		"\u0A93\x05\xFC\x7F\x02\u0A93\u0A94\x07\u019C\x02\x02\u0A94\u0A96\x03\x02" +
		"\x02\x02\u0A95\u0A8F\x03\x02\x02\x02\u0A95\u0A90\x03\x02\x02\x02\u0A96" +
		"\u0A98\x03\x02\x02\x02\u0A97\u0A8D\x03\x02\x02\x02\u0A97\u0A8E\x03\x02" +
		"\x02\x02\u0A98\xED\x03\x02\x02\x02\u0A99\u0A9B\x07\u0210\x02\x02\u0A9A" +
		"\u0A9C\x05\xF0y\x02\u0A9B\u0A9A\x03\x02\x02\x02\u0A9B\u0A9C\x03\x02\x02" +
		"\x02\u0A9C\u0A9E\x03\x02\x02\x02\u0A9D\u0A9F\x07\u020A\x02\x02\u0A9E\u0A9D" +
		"\x03\x02\x02\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u0AA1\x03\x02\x02\x02" +
		"\u0AA0\u0AA2\x07\u0212\x02\x02\u0AA1\u0AA0\x03\x02\x02\x02\u0AA1\u0AA2" +
		"\x03\x02\x02\x02\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3\u0AA5\x05\u0448\u0225" +
		"\x02\u0AA4\u0AA6\x05\u0406\u0204\x02\u0AA5\u0AA4\x03\x02\x02\x02\u0AA5" +
		"\u0AA6\x03\x02\x02\x02\u0AA6\u0AB3\x03\x02\x02\x02\u0AA7\u0AAA\x05\xF2" +
		"z\x02\u0AA8\u0AA9\x06x*\x02\u0AA9\u0AAB\x05\xFE\x80\x02\u0AAA\u0AA8\x03" +
		"\x02\x02\x02\u0AAA\u0AAB\x03\x02\x02\x02\u0AAB\u0AB4\x03\x02\x02\x02\u0AAC" +
		"\u0AAD\x07\u026D\x02\x02\u0AAD\u0AB0\x05\u03DC\u01EF\x02\u0AAE\u0AAF\x06" +
		"x+\x02\u0AAF\u0AB1\x05\xFE\x80\x02\u0AB0\u0AAE\x03\x02\x02\x02\u0AB0\u0AB1" +
		"\x03\x02\x02\x02\u0AB1\u0AB4\x03\x02\x02\x02\u0AB2\u0AB4\x05\xF8}\x02" +
		"\u0AB3\u0AA7\x03\x02\x02\x02\u0AB3\u0AAC\x03\x02\x02\x02\u0AB3\u0AB2\x03" +
		"\x02\x02\x02\u0AB4\u0AB6\x03\x02\x02\x02\u0AB5\u0AB7\x05\u0100\x81\x02" +
		"\u0AB6\u0AB5\x03\x02\x02\x02\u0AB6\u0AB7\x03\x02\x02\x02\u0AB7\xEF\x03" +
		"\x02\x02\x02\u0AB8\u0AB9\t\x19\x02\x02\u0AB9\xF1\x03\x02\x02\x02\u0ABA" +
		"\u0ABC\x07\u019B\x02\x02\u0ABB\u0ABD\x05\xF4{\x02\u0ABC\u0ABB\x03\x02" +
		"\x02\x02\u0ABC\u0ABD\x03\x02\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE" +
		"\u0AC0\x07\u019C\x02\x02\u0ABF\u0ABA\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02" +
		"\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0AC2\x05\xF6|\x02\u0AC2\xF3" +
		"\x03\x02\x02\x02\u0AC3\u0AC8\x05\u0412\u020A\x02\u0AC4\u0AC5\x07\u0198" +
		"\x02\x02\u0AC5\u0AC7\x05\u0412\u020A\x02\u0AC6\u0AC4\x03\x02\x02\x02\u0AC7" +
		"\u0ACA\x03\x02\x02\x02\u0AC8\u0AC6\x03\x02\x02\x02\u0AC8\u0AC9\x03\x02" +
		"\x02\x02\u0AC9\xF5\x03\x02\x02\x02\u0ACA\u0AC8\x03\x02\x02\x02\u0ACB\u0ACC" +
		"\t\x1A\x02\x02\u0ACC\u0ACD\x05\xFA~\x02\u0ACD\xF7\x03\x02\x02\x02\u0ACE" +
		"\u0AD6\x05`1\x02\u0ACF\u0AD1\x07\u019B\x02\x02\u0AD0\u0AD2\x05\xF4{\x02" +
		"\u0AD1\u0AD0\x03\x02\x02\x02\u0AD1\u0AD2\x03\x02\x02\x02\u0AD2\u0AD3\x03" +
		"\x02\x02\x02\u0AD3\u0AD4\x07\u019C\x02\x02\u0AD4\u0AD6\x05`1\x02\u0AD5" +
		"\u0ACE\x03\x02\x02\x02\u0AD5\u0ACF\x03\x02\x02\x02\u0AD6\xF9\x03\x02\x02" +
		"\x02\u0AD7\u0AD9\x07\u019B\x02\x02\u0AD8\u0ADA\x05\xFC\x7F\x02\u0AD9\u0AD8" +
		"\x03\x02\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA\u0ADB\x03\x02\x02\x02" +
		"\u0ADB\u0AE4\x07\u019C\x02\x02\u0ADC\u0ADD\x07\u0198\x02\x02\u0ADD\u0ADF" +
		"\x07\u019B\x02\x02\u0ADE\u0AE0\x05\xFC\x7F\x02\u0ADF\u0ADE\x03\x02\x02" +
		"\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0\u0AE1\x03\x02\x02\x02\u0AE1\u0AE3" +
		"\x07\u019C\x02\x02\u0AE2\u0ADC\x03\x02\x02\x02\u0AE3\u0AE6\x03\x02\x02" +
		"\x02\u0AE4\u0AE2\x03\x02\x02\x02\u0AE4\u0AE5\x03\x02\x02\x02\u0AE5\xFB" +
		"\x03\x02\x02\x02\u0AE6\u0AE4\x03\x02\x02\x02\u0AE7\u0AEA\x05\u029E\u0150" +
		"\x02\u0AE8\u0AEA\x07\u01E0\x02\x02\u0AE9\u0AE7\x03\x02\x02\x02\u0AE9\u0AE8" +
		"\x03\x02\x02\x02\u0AEA\u0AF2\x03\x02\x02\x02\u0AEB\u0AEE\x07\u0198\x02" +
		"\x02\u0AEC\u0AEF\x05\u029E\u0150\x02\u0AED\u0AEF\x07\u01E0\x02\x02\u0AEE" +
		"\u0AEC\x03\x02\x02\x02\u0AEE\u0AED\x03\x02\x02\x02\u0AEF\u0AF1\x03\x02" +
		"\x02\x02\u0AF0\u0AEB\x03\x02\x02\x02\u0AF1\u0AF4\x03\x02\x02\x02\u0AF2" +
		"\u0AF0\x03\x02\x02\x02\u0AF2\u0AF3\x03\x02\x02\x02\u0AF3\xFD\x03\x02\x02" +
		"\x02\u0AF4\u0AF2\x03\x02\x02\x02\u0AF5\u0AF6\x07\u01B1\x02\x02\u0AF6\u0AF8" +
		"\x05\u0462\u0232\x02\u0AF7\u0AF9\x05\u040E\u0208\x02\u0AF8\u0AF7\x03\x02" +
		"\x02\x02\u0AF8\u0AF9\x03\x02\x02\x02\u0AF9\xFF\x03\x02\x02\x02\u0AFA\u0AFB" +
		"\x07\u0245\x02\x02\u0AFB\u0AFC\x07~\x02\x02\u0AFC\u0AFD\x07\u021B\x02" +
		"\x02\u0AFD\u0AFE\x07\u0299\x02\x02\u0AFE\u0AFF\x05\u03DC\u01EF\x02\u0AFF" +
		"\u0101\x03\x02\x02\x02\u0B00\u0B01\x07\u0224\x02\x02\u0B01\u0B03\x05\u0104" +
		"\x83\x02\u0B02\u0B04\t\x1B\x02\x02\u0B03\u0B02\x03\x02\x02\x02\u0B03\u0B04" +
		"\x03\x02\x02\x02\u0B04\u0B06\x03\x02\x02\x02\u0B05\u0B07\x07\xB6\x02\x02" +
		"\u0B06\u0B05\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07\u0B08\x03" +
		"\x02\x02\x02\u0B08\u0B09\x07\u020C\x02\x02\u0B09\u0B0B\x05\u0482\u0242" +
		"\x02\u0B0A\u0B0C\t\n\x02\x02\u0B0B\u0B0A\x03\x02\x02\x02\u0B0B\u0B0C\x03" +
		"\x02\x02\x02\u0B0C\u0B0D\x03\x02\x02\x02\u0B0D\u0B0E\x07\u0212\x02\x02" +
		"\u0B0E\u0B0F\x07\u0289\x02\x02\u0B0F\u0B11\x05\u0448\u0225\x02\u0B10\u0B12" +
		"\x05\u0406\u0204\x02\u0B11\u0B10\x03\x02\x02\x02\u0B11\u0B12\x03\x02\x02" +
		"\x02\u0B12\u0B14\x03\x02\x02\x02\u0B13\u0B15\x05\u03E0\u01F1\x02\u0B14" +
		"\u0B13\x03\x02\x02\x02\u0B14\u0B15\x03\x02\x02\x02\u0B15\u0B17\x03\x02" +
		"\x02\x02\u0B16\u0B18\x05\u0106\x84\x02\u0B17\u0B16\x03\x02\x02\x02\u0B17" +
		"\u0B18\x03\x02\x02\x02\u0B18\u0B1A\x03\x02\x02\x02\u0B19\u0B1B\x05\u03E2" +
		"\u01F2\x02\u0B1A\u0B19\x03\x02\x02\x02\u0B1A\u0B1B\x03\x02\x02\x02\u0B1B" +
		"\u0B1D\x03\x02\x02\x02\u0B1C\u0B1E\x05\u03E6\u01F4\x02\u0B1D\u0B1C\x03" +
		"\x02\x02\x02\u0B1D\u0B1E\x03\x02\x02\x02\u0B1E\u0B1F\x03\x02\x02\x02\u0B1F" +
		"\u0B20\x05\u0108\x85\x02\u0B20\u0103\x03\x02\x02\x02\u0B21\u0B22\t\x1C" +
		"\x02\x02\u0B22\u0105\x03\x02\x02\x02\u0B23\u0B24\x07\u012C\x02\x02\u0B24" +
		"\u0B25\x07\xA1\x02\x02\u0B25\u0B26\x07\u01BE\x02\x02\u0B26\u0B27\x05\u047E" +
		"\u0240\x02\u0B27\u0107\x03\x02\x02\x02\u0B28\u0B29\x07\u020A\x02\x02\u0B29" +
		"\u0B2A\x07\u017E\x02\x02\u0B2A\u0B2C\t\x1D\x02\x02\u0B2B\u0B28\x03\x02" +
		"\x02\x02\u0B2B\u0B2C\x03\x02\x02\x02\u0B2C\u0B2E\x03\x02\x02\x02\u0B2D" +
		"\u0B2F\x05\u010A\x86\x02\u0B2E\u0B2D\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02" +
		"\x02\x02\u0B2F\u0B32\x03\x02\x02\x02\u0B30\u0B31\x07\u026D\x02\x02\u0B31" +
		"\u0B33\x05\u03DC\u01EF\x02\u0B32\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03" +
		"\x02\x02\x02\u0B33\u0109\x03\x02\x02\x02\u0B34\u0B36\x07\u019B\x02\x02" +
		"\u0B35\u0B37\x05\u010C\x87\x02\u0B36\u0B35\x03\x02\x02\x02\u0B36\u0B37" +
		"\x03\x02\x02\x02\u0B37\u0B38\x03\x02\x02\x02\u0B38\u0B39\x07\u019C\x02" +
		"\x02\u0B39\u010B\x03\x02\x02\x02\u0B3A\u0B3D\x05\u0410\u0209\x02\u0B3B" +
		"\u0B3D\x05\u02E0\u0171\x02\u0B3C\u0B3A\x03\x02\x02\x02\u0B3C\u0B3B\x03" +
		"\x02\x02\x02\u0B3D\u0B45\x03\x02\x02\x02\u0B3E\u0B41\x07\u0198\x02\x02" +
		"\u0B3F\u0B42\x05\u0410\u0209\x02\u0B40\u0B42\x05\u02E0\u0171\x02\u0B41" +
		"\u0B3F\x03\x02\x02\x02\u0B41\u0B40\x03\x02\x02\x02\u0B42\u0B44\x03\x02" +
		"\x02\x02\u0B43\u0B3E\x03\x02\x02\x02\u0B44\u0B47\x03\x02\x02\x02\u0B45" +
		"\u0B43\x03\x02\x02\x02\u0B45\u0B46\x03\x02\x02\x02\u0B46\u010D\x03\x02" +
		"\x02\x02\u0B47\u0B45\x03\x02\x02\x02\u0B48\u0B4A\x07\u0260\x02\x02\u0B49" +
		"\u0B4B\t\x1E\x02\x02\u0B4A\u0B49\x03\x02\x02\x02\u0B4A\u0B4B\x03\x02\x02" +
		"\x02\u0B4B\u0B4D\x03\x02\x02\x02\u0B4C\u0B4E\x07\u0212\x02\x02\u0B4D\u0B4C" +
		"\x03\x02\x02\x02\u0B4D\u0B4E\x03\x02\x02\x02\u0B4E\u0B4F\x03\x02\x02\x02" +
		"\u0B4F\u0B51\x05\u0448\u0225\x02\u0B50\u0B52\x05\u0406\u0204\x02\u0B51" +
		"\u0B50\x03\x02\x02\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B57\x03\x02" +
		"\x02\x02\u0B53\u0B58\x05\xF2z\x02\u0B54\u0B55\x07\u026D\x02\x02\u0B55" +
		"\u0B58\x05\u03DC\u01EF\x02\u0B56\u0B58\x05\xF8}\x02\u0B57\u0B53\x03\x02" +
		"\x02\x02\u0B57\u0B54\x03\x02\x02\x02\u0B57\u0B56\x03\x02\x02\x02\u0B58" +
		"\u010F\x03\x02\x02\x02\u0B59\u0B5D\x05\u0114\x8B\x02\u0B5A\u0B5D\x05\u0118" +
		"\x8D\x02\u0B5B\u0B5D\x05\u0112\x8A\x02\u0B5C\u0B59\x03\x02\x02\x02\u0B5C" +
		"\u0B5A\x03\x02\x02\x02\u0B5C\u0B5B\x03\x02\x02\x02\u0B5D\u0111\x03\x02" +
		"\x02\x02\u0B5E\u0B5F\x07\u019B\x02\x02\u0B5F\u0B60\x05\u0112\x8A\x02\u0B60" +
		"\u0B61\x07\u019C\x02\x02\u0B61\u0B66\x03\x02\x02\x02\u0B62\u0B63\x05\u0114" +
		"\x8B\x02\u0B63\u0B64\x05\u0128\x95\x02\u0B64\u0B66\x03\x02\x02\x02\u0B65" +
		"\u0B5E\x03\x02\x02\x02\u0B65\u0B62\x03\x02\x02\x02\u0B66\u0113\x03\x02" +
		"\x02\x02\u0B67\u0B68\x06\x8B,\x02\u0B68\u0B6A\x05\u0144\xA3\x02\u0B69" +
		"\u0B67\x03\x02\x02\x02\u0B69\u0B6A\x03\x02\x02\x02\u0B6A\u0B7A\x03\x02" +
		"\x02\x02\u0B6B\u0B6D\x05\u0116\x8C\x02\u0B6C\u0B6E\x05\u014C\xA7\x02\u0B6D" +
		"\u0B6C\x03\x02\x02\x02\u0B6D\u0B6E\x03\x02\x02\x02\u0B6E\u0B70\x03\x02" +
		"\x02\x02\u0B6F\u0B71\x05\u0120\x91\x02\u0B70\u0B6F\x03\x02\x02\x02\u0B70" +
		"\u0B71\x03\x02\x02\x02\u0B71\u0B7B\x03\x02\x02\x02\u0B72\u0B78\x05\u0118" +
		"\x8D\x02\u0B73\u0B75\x05\u014C\xA7\x02\u0B74\u0B76\x05\u0120\x91\x02\u0B75" +
		"\u0B74\x03\x02\x02\x02\u0B75\u0B76\x03\x02\x02\x02\u0B76\u0B79\x03\x02" +
		"\x02\x02\u0B77\u0B79\x05\u0120\x91\x02\u0B78\u0B73\x03\x02\x02\x02\u0B78" +
		"\u0B77\x03\x02\x02\x02\u0B79\u0B7B\x03\x02\x02\x02\u0B7A\u0B6B\x03\x02" +
		"\x02\x02\u0B7A\u0B72\x03\x02\x02\x02\u0B7B\u0B7E\x03\x02\x02\x02\u0B7C" +
		"\u0B7D\x06\x8B-\x02\u0B7D\u0B7F\x05\u012A\x96\x02\u0B7E\u0B7C\x03\x02" +
		"\x02\x02\u0B7E\u0B7F\x03\x02\x02\x02\u0B7F\u0B81\x03\x02\x02\x02\u0B80" +
		"\u0B82\x05\u0156\xAC\x02\u0B81\u0B80\x03\x02\x02\x02\u0B81\u0B82\x03\x02" +
		"\x02\x02\u0B82\u0B8A\x03\x02\x02\x02\u0B83\u0B84\x06\x8B.\x02\u0B84\u0B85" +
		"\x05\u0144\xA3\x02\u0B85\u0B87\x05\u0118\x8D\x02\u0B86\u0B88\x05\u0156" +
		"\xAC\x02\u0B87\u0B86\x03\x02\x02\x02\u0B87\u0B88\x03\x02\x02\x02\u0B88" +
		"\u0B8A\x03\x02\x02\x02\u0B89\u0B69\x03\x02\x02\x02\u0B89\u0B83\x03\x02" +
		"\x02\x02\u0B8A\u0115\x03\x02\x02\x02\u0B8B\u0B8C\b\x8C\x01\x02\u0B8C\u0B97" +
		"\x05\u011A\x8E\x02\u0B8D\u0B8E\x05\u0118\x8D\x02\u0B8E\u0B90\x07\u0295" +
		"\x02\x02\u0B8F\u0B91\x05\u0188\xC5\x02\u0B90\u0B8F\x03\x02\x02\x02\u0B90" +
		"\u0B91\x03\x02\x02\x02\u0B91\u0B94\x03\x02\x02\x02\u0B92\u0B95\x05\u011A" +
		"\x8E\x02\u0B93\u0B95\x05\u0118\x8D\x02\u0B94\u0B92\x03\x02\x02\x02\u0B94" +
		"\u0B93\x03\x02\x02\x02\u0B95\u0B97\x03\x02\x02\x02\u0B96\u0B8B\x03\x02" +
		"\x02\x02\u0B96\u0B8D\x03\x02\x02\x02\u0B97\u0BA3\x03\x02\x02\x02\u0B98" +
		"\u0B99\f\x04\x02\x02\u0B99\u0B9B\x07\u0295\x02\x02\u0B9A\u0B9C\x05\u0188" +
		"\xC5\x02\u0B9B\u0B9A\x03\x02\x02\x02\u0B9B\u0B9C\x03\x02\x02\x02\u0B9C" +
		"\u0B9F\x03\x02\x02\x02\u0B9D\u0BA0\x05\u011A\x8E\x02\u0B9E\u0BA0\x05\u0118" +
		"\x8D\x02\u0B9F\u0B9D\x03\x02\x02\x02\u0B9F\u0B9E\x03\x02\x02\x02\u0BA0" +
		"\u0BA2\x03\x02\x02\x02\u0BA1\u0B98\x03\x02\x02\x02\u0BA2\u0BA5\x03\x02" +
		"\x02\x02\u0BA3\u0BA1\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02\x02\x02\u0BA4" +
		"\u0117\x03\x02\x02\x02\u0BA5\u0BA3\x03\x02\x02\x02\u0BA6\u0BA9\x07\u019B" +
		"\x02\x02\u0BA7\u0BAA\x05\u0118\x8D\x02\u0BA8\u0BAA\x05\u0114\x8B\x02\u0BA9" +
		"\u0BA7\x03\x02\x02\x02\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02" +
		"\x02\x02\u0BAB\u0BAC\x07\u019C\x02\x02\u0BAC\u0119\x03\x02\x02\x02\u0BAD" +
		"\u0BB1\x07\u0268\x02\x02\u0BAE\u0BB0\x05\u0154\xAB\x02\u0BAF\u0BAE\x03" +
		"\x02\x02\x02\u0BB0\u0BB3\x03\x02\x02\x02\u0BB1\u0BAF\x03\x02\x02\x02\u0BB1" +
		"\u0BB2\x03\x02\x02\x02\u0BB2\u0BB4\x03\x02\x02\x02\u0BB3\u0BB1\x03\x02" +
		"\x02\x02\u0BB4\u0BB6\x05\u015C\xAF\x02\u0BB5\u0BB7\x05\u0128\x95\x02\u0BB6" +
		"\u0BB5\x03\x02\x02\x02\u0BB6\u0BB7\x03\x02\x02\x02\u0BB7\u0BB9\x03\x02" +
		"\x02\x02\u0BB8\u0BBA\x05\u0150\xA9\x02\u0BB9\u0BB8\x03\x02\x02\x02\u0BB9" +
		"\u0BBA\x03\x02\x02\x02\u0BBA\u0BBC\x03\x02\x02\x02\u0BBB\u0BBD\x05\u0162" +
		"\xB2\x02\u0BBC\u0BBB\x03\x02\x02\x02\u0BBC\u0BBD\x03\x02\x02\x02\u0BBD" +
		"\u0BBF\x03\x02\x02\x02\u0BBE\u0BC0\x05\u0148\xA5\x02\u0BBF\u0BBE\x03\x02" +
		"\x02\x02\u0BBF\u0BC0\x03\x02\x02\x02\u0BC0\u0BC2\x03\x02\x02\x02\u0BC1" +
		"\u0BC3\x05\u012C\x97\x02\u0BC2\u0BC1\x03\x02\x02\x02\u0BC2\u0BC3\x03\x02" +
		"\x02\x02\u0BC3\u0BC6\x03\x02\x02\x02\u0BC4\u0BC5\x06\x8E0\x02\u0BC5\u0BC7" +
		"\x05\u012E\x98\x02\u0BC6\u0BC4\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02" +
		"\x02\u0BC7\u011B\x03\x02\x02\x02\u0BC8\u0BC9\x05\u0118\x8D\x02\u0BC9\u011D" +
		"\x03\x02\x02\x02\u0BCA\u0BCB\t\x1F\x02\x02\u0BCB\u011F\x03\x02\x02\x02" +
		"\u0BCC\u0BCD\x07\u0221\x02\x02\u0BCD\u0BCE\x05\u0124\x93\x02\u0BCE\u0121" +
		"\x03\x02\x02\x02\u0BCF\u0BD0\x07\u0221\x02\x02\u0BD0\u0BD1\x05\u0126\x94" +
		"\x02\u0BD1\u0123\x03\x02\x02\x02\u0BD2\u0BD5\x05\u0126\x94\x02\u0BD3\u0BD4" +
		"\t \x02\x02\u0BD4\u0BD6\x05\u0126\x94\x02\u0BD5\u0BD3\x03\x02\x02\x02" +
		"\u0BD5\u0BD6\x03\x02\x02\x02\u0BD6\u0125\x03\x02\x02\x02\u0BD7\u0BDA\x05" +
		"\u0462\u0232\x02\u0BD8\u0BDA\t!\x02\x02\u0BD9\u0BD7\x03\x02\x02\x02\u0BD9" +
		"\u0BD8\x03\x02\x02\x02\u0BDA\u0127\x03\x02\x02\x02\u0BDB\u0BF7\x07\u0212" +
		"\x02\x02\u0BDC\u0BDD\x07\u024F\x02\x02\u0BDD\u0BDF\x05\u047C\u023F\x02" +
		"\u0BDE\u0BE0\x05\u03E0\u01F1\x02\u0BDF\u0BDE\x03\x02\x02\x02\u0BDF\u0BE0" +
		"\x03\x02\x02\x02\u0BE0\u0BE2\x03\x02\x02\x02\u0BE1\u0BE3\x05\u03E2\u01F2" +
		"\x02\u0BE2\u0BE1\x03\x02\x02\x02\u0BE2\u0BE3\x03\x02\x02\x02\u0BE3\u0BE5" +
		"\x03\x02\x02\x02\u0BE4\u0BE6\x05\u03E6\u01F4\x02\u0BE5\u0BE4\x03\x02\x02" +
		"\x02\u0BE5\u0BE6\x03\x02\x02\x02\u0BE6\u0BF8\x03\x02\x02\x02\u0BE7\u0BE8" +
		"\x07}\x02\x02\u0BE8\u0BF8\x05\u047C\u023F\x02\u0BE9\u0BEC\x05\u0496\u024C" +
		"\x02\u0BEA\u0BEC\x05\u02E0\u0171\x02\u0BEB\u0BE9\x03\x02\x02\x02\u0BEB" +
		"\u0BEA\x03\x02\x02\x02\u0BEC\u0BF4\x03\x02\x02\x02\u0BED\u0BF0\x07\u0198" +
		"\x02\x02\u0BEE\u0BF1\x05\u0496\u024C\x02\u0BEF\u0BF1\x05\u02E0\u0171\x02" +
		"\u0BF0\u0BEE\x03\x02\x02\x02\u0BF0\u0BEF\x03\x02\x02\x02\u0BF1\u0BF3\x03" +
		"\x02\x02\x02\u0BF2\u0BED\x03\x02\x02\x02\u0BF3\u0BF6\x03\x02\x02\x02\u0BF4" +
		"\u0BF2\x03\x02\x02\x02\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5\u0BF8\x03\x02" +
		"\x02\x02\u0BF6\u0BF4\x03\x02\x02\x02\u0BF7\u0BDC\x03\x02\x02\x02\u0BF7" +
		"\u0BE7\x03\x02\x02\x02\u0BF7\u0BEB\x03\x02\x02\x02\u0BF8\u0129\x03\x02" +
		"\x02\x02\u0BF9\u0BFA\x07\u0254\x02\x02\u0BFA\u0BFB\x07\u01AF\x02\x02\u0BFB" +
		"\u0C01\x07\u019B\x02\x02\u0BFC\u0BFF\x07\u017E\x02\x02\u0BFD\u0BFE\x07" +
		"\u0198\x02\x02\u0BFE\u0C00\x07\u017E\x02\x02\u0BFF\u0BFD\x03\x02\x02\x02" +
		"\u0BFF\u0C00\x03\x02\x02\x02\u0C00\u0C02\x03\x02\x02\x02\u0C01\u0BFC\x03" +
		"\x02\x02\x02\u0C01\u0C02\x03\x02\x02\x02\u0C02\u0C03\x03\x02\x02\x02\u0C03" +
		"\u0C04\x07\u019C\x02\x02\u0C04\u012B\x03\x02\x02\x02\u0C05\u0C06\x07\u0204" +
		"\x02\x02\u0C06\u0C07\x05\u029E\u0150\x02\u0C07\u012D\x03\x02\x02\x02\u0C08" +
		"\u0C09\x07\u02DB\x02\x02\u0C09\u0C0E\x05\u0130\x99\x02\u0C0A\u0C0B\x07" +
		"\u0198\x02\x02\u0C0B\u0C0D\x05\u0130\x99\x02\u0C0C\u0C0A\x03\x02\x02\x02" +
		"\u0C0D\u0C10\x03\x02\x02\x02\u0C0E\u0C0C\x03\x02\x02\x02\u0C0E\u0C0F\x03" +
		"\x02\x02\x02\u0C0F\u012F\x03\x02\x02\x02\u0C10\u0C0E\x03\x02\x02\x02\u0C11" +
		"\u0C12\x05\u045E\u0230\x02\u0C12\u0C13\x07\u01B1\x02\x02\u0C13\u0C14\x05" +
		"\u0132\x9A\x02\u0C14\u0131\x03\x02\x02\x02\u0C15\u0C16\x07\u019B\x02\x02" +
		"\u0C16\u0C17\x05\u0134\x9B\x02\u0C17\u0C18\x07\u019C\x02\x02\u0C18\u0133" +
		"\x03\x02\x02\x02\u0C19\u0C1B\x05\u045E\u0230\x02\u0C1A\u0C19\x03\x02\x02" +
		"\x02\u0C1A\u0C1B\x03\x02\x02\x02\u0C1B\u0C1F\x03\x02\x02\x02\u0C1C\u0C1D" +
		"\x07\"\x02\x02\u0C1D\u0C1E\x07\u01BE\x02\x02\u0C1E\u0C20\x05\u0300\u0181" +
		"\x02\u0C1F\u0C1C\x03\x02\x02\x02\u0C1F\u0C20\x03\x02\x02\x02\u0C20\u0C22" +
		"\x03\x02\x02\x02\u0C21\u0C23\x05\u014C\xA7\x02\u0C22\u0C21\x03\x02\x02" +
		"\x02\u0C22\u0C23\x03\x02\x02\x02\u0C23\u0C25\x03\x02\x02\x02\u0C24\u0C26" +
		"\x05\u0136\x9C\x02\u0C25\u0C24\x03\x02\x02\x02\u0C25\u0C26\x03\x02\x02" +
		"\x02\u0C26\u0135\x03\x02\x02\x02\u0C27\u0C28\x05\u0138\x9D\x02\u0C28\u0C2A" +
		"\x05\u013A\x9E\x02\u0C29\u0C2B\x05\u0142\xA2\x02\u0C2A\u0C29\x03\x02\x02" +
		"\x02\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0137\x03\x02\x02\x02\u0C2C\u0C2D" +
		"\t\"\x02\x02\u0C2D\u0139\x03\x02\x02\x02\u0C2E\u0C31\x05\u013C\x9F\x02" +
		"\u0C2F\u0C31\x05\u013E\xA0\x02\u0C30\u0C2E\x03\x02\x02\x02\u0C30\u0C2F" +
		"\x03\x02\x02\x02\u0C31\u013B\x03\x02\x02\x02\u0C32\u0C33\x07\u02DA\x02" +
		"\x02\u0C33\u0C41\x07\u02D5\x02\x02\u0C34\u0C35\x05\u0472\u023A\x02\u0C35" +
		"\u0C36\x07\u02D5\x02\x02\u0C36\u0C41\x03\x02\x02\x02\u0C37\u0C38\x07\u01A6" +
		"\x02\x02\u0C38\u0C41\x07\u02D5\x02\x02\u0C39\u0C3A\x07\u0211\x02\x02\u0C3A" +
		"\u0C3B\x05\u029E\u0150\x02\u0C3B\u0C3C\x05\u02F6\u017C\x02\u0C3C\u0C3D" +
		"\x07\u02D5\x02\x02\u0C3D\u0C41\x03\x02\x02\x02\u0C3E\u0C3F\x07m\x02\x02" +
		"\u0C3F\u0C41\x07\u012F\x02\x02\u0C40\u0C32\x03\x02\x02\x02\u0C40\u0C34" +
		"\x03\x02\x02\x02\u0C40\u0C37\x03\x02\x02\x02\u0C40\u0C39\x03\x02\x02\x02" +
		"\u0C40\u0C3E\x03\x02\x02\x02\u0C41\u013D\x03\x02\x02\x02\u0C42\u0C43\x07" +
		"\u01B5\x02\x02\u0C43\u0C44\x05\u0140\xA1\x02\u0C44\u0C45\x07\u01B0\x02" +
		"\x02\u0C45\u0C46\x05\u0140\xA1\x02\u0C46\u013F\x03\x02\x02\x02\u0C47\u0C55" +
		"\x05\u013C\x9F\x02\u0C48\u0C49\x07\u02DA\x02\x02\u0C49\u0C55\x07\u02CA" +
		"\x02\x02\u0C4A\u0C4B\x05\u0472\u023A\x02\u0C4B\u0C4C\x07\u02CA\x02\x02" +
		"\u0C4C\u0C55\x03\x02\x02\x02\u0C4D\u0C4E\x07\u01A6\x02\x02\u0C4E\u0C55" +
		"\x07\u02CA\x02\x02\u0C4F\u0C50\x07\u0211\x02\x02\u0C50\u0C51\x05\u029E" +
		"\u0150\x02\u0C51\u0C52\x05\u02F6\u017C\x02\u0C52\u0C53\x07\u02CA\x02\x02" +
		"\u0C53\u0C55\x03\x02\x02\x02\u0C54\u0C47\x03\x02\x02\x02\u0C54\u0C48\x03" +
		"\x02\x02\x02\u0C54\u0C4A\x03\x02\x02\x02\u0C54\u0C4D\x03\x02\x02\x02\u0C54" +
		"\u0C4F\x03\x02\x02\x02\u0C55\u0141\x03\x02\x02\x02\u0C56\u0C5D\x07\u02C8" +
		"\x02\x02\u0C57\u0C58\x07m\x02\x02\u0C58\u0C5E\x07\u012F\x02\x02\u0C59" +
		"\u0C5E\x07\u0202\x02\x02\u0C5A\u0C5E\x07\u02D9\x02\x02\u0C5B\u0C5C\x07" +
		"\x1D\x02\x02\u0C5C\u0C5E\x07\u02D2\x02\x02\u0C5D\u0C57\x03\x02\x02\x02" +
		"\u0C5D\u0C59\x03\x02\x02\x02\u0C5D\u0C5A\x03\x02\x02\x02\u0C5D\u0C5B\x03" +
		"\x02\x02\x02\u0C5E\u0143\x03\x02\x02\x02\u0C5F\u0C61\x07\u02AC\x02\x02" +
		"\u0C60\u0C62\x07\u02B9\x02\x02\u0C61\u0C60\x03\x02\x02\x02\u0C61\u0C62" +
		"\x03\x02\x02\x02\u0C62\u0C63\x03\x02\x02\x02\u0C63\u0C68\x05\u0146\xA4" +
		"\x02\u0C64\u0C65\x07\u0198\x02\x02\u0C65\u0C67\x05\u0146\xA4\x02\u0C66" +
		"\u0C64\x03\x02\x02\x02\u0C67\u0C6A\x03\x02\x02\x02\u0C68\u0C66\x03\x02" +
		"\x02\x02\u0C68\u0C69\x03\x02\x02\x02\u0C69\u0145\x03\x02\x02\x02\u0C6A" +
		"\u0C68\x03\x02\x02\x02\u0C6B\u0C6D\x05\u0462\u0232\x02\u0C6C\u0C6E\x05" +
		"\u040E\u0208\x02\u0C6D\u0C6C\x03\x02\x02\x02\u0C6D\u0C6E\x03\x02\x02\x02" +
		"\u0C6E\u0C6F\x03\x02\x02\x02\u0C6F\u0C70\x07\u01B1\x02\x02\u0C70\u0C71" +
		"\x05\u011C\x8F\x02\u0C71\u0147\x03\x02\x02\x02\u0C72\u0C73\x07\u0202\x02" +
		"\x02\u0C73\u0C74\x07\u01BE\x02\x02\u0C74\u0C76\x05\u0300\u0181\x02\u0C75" +
		"\u0C77\x05\u014A\xA6\x02\u0C76\u0C75\x03\x02\x02\x02\u0C76\u0C77\x03\x02" +
		"\x02\x02\u0C77\u0149\x03\x02\x02\x02\u0C78\u0C79\x07\u02AC\x02\x02\u0C79" +
		"\u0C7E\x07\u0129\x02\x02\u0C7A\u0C7B\x06\xA61\x02\u0C7B\u0C7C\x07\u02AC" +
		"\x02\x02\u0C7C\u0C7E\x07l\x02\x02\u0C7D\u0C78\x03\x02\x02\x02\u0C7D\u0C7A" +
		"\x03\x02\x02\x02\u0C7E\u014B\x03\x02\x02\x02\u0C7F\u0C80\x07\u024C\x02" +
		"\x02\u0C80\u0C81\x07\u01BE\x02\x02\u0C81\u0C82\x05\u0300\u0181\x02\u0C82" +
		"\u014D\x03\x02\x02\x02\u0C83\u0C84\t#\x02\x02\u0C84\u014F\x03\x02\x02" +
		"\x02\u0C85\u0C88\x07\u01FD\x02\x02\u0C86\u0C89\x07\u01EA\x02\x02\u0C87" +
		"\u0C89\x05\u0152\xAA\x02\u0C88\u0C86\x03\x02\x02\x02\u0C88\u0C87\x03\x02" +
		"\x02\x02\u0C89\u0151\x03\x02\x02\x02\u0C8A\u0C8F\x05\u0164\xB3\x02\u0C8B" +
		"\u0C8C\x07\u0198\x02\x02\u0C8C\u0C8E\x05\u0164\xB3\x02\u0C8D\u0C8B\x03" +
		"\x02\x02\x02\u0C8E\u0C91\x03\x02\x02\x02\u0C8F\u0C8D\x03\x02\x02\x02\u0C8F" +
		"\u0C90\x03\x02\x02\x02\u0C90\u0153\x03\x02\x02\x02\u0C91\u0C8F\x03\x02" +
		"\x02\x02\u0C92\u0C9B\x05\u011E\x90\x02\u0C93\u0C9B\x07\u0142\x02\x02\u0C94" +
		"\u0C95\x06\xAB2\x02\u0C95\u0C9B\x07\u0140\x02\x02\u0C96\u0C97\x06\xAB" +
		"3\x02\u0C97\u0C98\x07\xD3\x02\x02\u0C98\u0C99\x07\u0181\x02\x02\u0C99" +
		"\u0C9B\x05\u0470\u0239\x02\u0C9A\u0C92\x03\x02\x02\x02\u0C9A\u0C93\x03" +
		"\x02\x02\x02\u0C9A\u0C94\x03\x02\x02\x02\u0C9A\u0C96\x03\x02\x02\x02\u0C9B" +
		"\u0155\x03\x02\x02\x02\u0C9C\u0C9D\x07\u01FC\x02\x02\u0C9D\u0CA1\x05\u0158" +
		"\xAD\x02\u0C9E\u0C9F\x06\xAC4\x02\u0C9F\u0CA0\x07\u02BC\x02\x02\u0CA0" +
		"\u0CA2\x05\u044C\u0227\x02\u0CA1\u0C9E\x03\x02\x02\x02\u0CA1\u0CA2\x03" +
		"\x02\x02\x02\u0CA2\u0CA5\x03\x02\x02\x02\u0CA3\u0CA4\x06\xAC5\x02\u0CA4" +
		"\u0CA6\x05\u015A\xAE\x02\u0CA5\u0CA3\x03\x02\x02\x02\u0CA5\u0CA6\x03\x02" +
		"\x02\x02\u0CA6\u0CAC\x03\x02\x02\x02\u0CA7\u0CA8\x07\u0226\x02\x02\u0CA8" +
		"\u0CA9\x07\u0214\x02\x02\u0CA9\u0CAA\x07\u0138\x02\x02\u0CAA\u0CAC\x07" +
		"\xE0\x02\x02\u0CAB\u0C9C\x03\x02\x02\x02\u0CAB\u0CA7\x03\x02\x02\x02\u0CAC" +
		"\u0157\x03\x02\x02\x02\u0CAD\u0CB1\x07\u0299\x02\x02\u0CAE\u0CAF\x06\xAD" +
		"6\x02\u0CAF\u0CB1\x07\u0138\x02\x02\u0CB0\u0CAD\x03\x02\x02\x02\u0CB0" +
		"\u0CAE\x03\x02\x02\x02\u0CB1\u0159\x03\x02\x02\x02\u0CB2\u0CB3\x07\u02BD" +
		"\x02\x02\u0CB3\u0CB6\x07\u02BE\x02\x02\u0CB4\u0CB6\x07\u02BF\x02\x02\u0CB5" +
		"\u0CB2\x03\x02\x02\x02\u0CB5\u0CB4\x03\x02\x02\x02\u0CB6\u015B\x03\x02" +
		"\x02\x02\u0CB7\u0CBA\x05\u015E\xB0\x02\u0CB8\u0CBA\x07\u018B\x02\x02\u0CB9" +
		"\u0CB7\x03\x02\x02\x02\u0CB9\u0CB8\x03\x02\x02\x02\u0CBA\u0CBF\x03\x02" +
		"\x02\x02\u0CBB\u0CBC\x07\u0198\x02\x02\u0CBC\u0CBE\x05\u015E\xB0\x02\u0CBD" +
		"\u0CBB\x03\x02\x02\x02\u0CBE\u0CC1\x03\x02\x02\x02\u0CBF\u0CBD\x03\x02" +
		"\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u015D\x03\x02\x02\x02\u0CC1" +
		"\u0CBF\x03\x02\x02\x02\u0CC2\u0CC8\x05\u0418\u020D\x02\u0CC3\u0CC5\x05" +
		"\u029E\u0150\x02\u0CC4\u0CC6\x05\u0160\xB1\x02\u0CC5\u0CC4\x03\x02\x02" +
		"\x02\u0CC5\u0CC6\x03\x02\x02\x02\u0CC6\u0CC8\x03\x02\x02\x02\u0CC7\u0CC2" +
		"\x03\x02\x02\x02\u0CC7\u0CC3\x03\x02\x02\x02\u0CC8\u015F\x03\x02\x02\x02" +
		"\u0CC9\u0CCB\x07\u01B1\x02\x02\u0CCA\u0CC9\x03\x02\x02\x02\u0CCA\u0CCB" +
		"\x03\x02\x02\x02\u0CCB\u0CCE\x03\x02\x02\x02\u0CCC\u0CCF\x05\u0462\u0232" +
		"\x02\u0CCD\u0CCF\x05\u047C\u023F\x02\u0CCE\u0CCC\x03\x02\x02\x02\u0CCE" +
		"\u0CCD\x03\x02\x02\x02\u0CCF\u0161\x03\x02\x02\x02\u0CD0\u0CD1\x07\u02AA" +
		"\x02\x02\u0CD1\u0CD2\x05\u029E\u0150\x02\u0CD2\u0163\x03\x02\x02\x02\u0CD3" +
		"\u0CDE\x05\u0170\xB9\x02\u0CD4\u0CD8\x07\u019D\x02\x02\u0CD5\u0CD6\x06" +
		"\xB37\x02\u0CD6\u0CD9\x05\u0462\u0232\x02\u0CD7\u0CD9\x07\u02FC\x02\x02" +
		"\u0CD8\u0CD5\x03\x02\x02\x02\u0CD8\u0CD7\x03\x02\x02\x02\u0CD9\u0CDA\x03" +
		"\x02\x02\x02\u0CDA\u0CDB\x05\u0166\xB4\x02\u0CDB\u0CDC\x07\u019E\x02\x02" +
		"\u0CDC\u0CDE\x03\x02\x02\x02\u0CDD\u0CD3\x03\x02\x02\x02\u0CDD\u0CD4\x03" +
		"\x02\x02\x02\u0CDE\u0CE2\x03\x02\x02\x02\u0CDF\u0CE1\x05\u0168\xB5\x02" +
		"\u0CE0\u0CDF\x03\x02\x02\x02\u0CE1\u0CE4\x03\x02\x02\x02\u0CE2\u0CE0\x03" +
		"\x02\x02\x02\u0CE2\u0CE3\x03\x02\x02\x02\u0CE3\u0165\x03\x02\x02\x02\u0CE4" +
		"\u0CE2\x03\x02\x02\x02\u0CE5\u0CE9\x05\u0170\xB9\x02\u0CE6\u0CE8\x05\u0168" +
		"\xB5\x02\u0CE7\u0CE6\x03\x02\x02\x02\u0CE8\u0CEB\x03\x02\x02\x02\u0CE9" +
		"\u0CE7\x03\x02\x02\x02\u0CE9\u0CEA\x03\x02\x02\x02\u0CEA\u0167\x03\x02" +
		"\x02\x02\u0CEB\u0CE9\x03\x02\x02\x02\u0CEC\u0CED\x05\u016C\xB7\x02\u0CED" +
		"\u0CF2\x05\u0164\xB3\x02\u0CEE\u0CEF\x07\u0245\x02\x02\u0CEF\u0CF3\x05" +
		"\u029E\u0150\x02\u0CF0\u0CF1\x07\u029C\x02\x02\u0CF1\u0CF3\x05\u0466\u0234" +
		"\x02\u0CF2\u0CEE\x03\x02\x02\x02\u0CF2\u0CF0\x03\x02\x02\x02\u0CF2\u0CF3" +
		"\x03\x02\x02\x02\u0CF3\u0D00\x03\x02\x02\x02\u0CF4\u0CF5\x05\u016E\xB8" +
		"\x02\u0CF5\u0CFA\x05\u0164\xB3\x02\u0CF6\u0CF7\x07\u0245\x02\x02\u0CF7" +
		"\u0CFB\x05\u029E\u0150\x02\u0CF8\u0CF9\x07\u029C\x02\x02\u0CF9\u0CFB\x05" +
		"\u0466\u0234\x02\u0CFA\u0CF6\x03\x02\x02\x02\u0CFA\u0CF8\x03\x02\x02\x02" +
		"\u0CFB\u0D00\x03\x02\x02\x02\u0CFC\u0CFD\x05\u016A\xB6\x02\u0CFD\u0CFE" +
		"\x05\u0170\xB9\x02\u0CFE\u0D00\x03\x02\x02\x02\u0CFF\u0CEC\x03\x02\x02" +
		"\x02\u0CFF\u0CF4\x03\x02\x02\x02\u0CFF\u0CFC\x03\x02\x02\x02\u0D00\u0169" +
		"\x03\x02\x02\x02\u0D01\u0D03\x07\u023B\x02\x02\u0D02\u0D04\x07\u020D\x02" +
		"\x02\u0D03\u0D02\x03\x02\x02\x02\u0D03\u0D04\x03\x02\x02\x02\u0D04\u0D05" +
		"\x03\x02\x02\x02\u0D05\u0D0D\x07\u0219\x02\x02\u0D06\u0D07\x07\u023B\x02" +
		"\x02\u0D07\u0D09\t$\x02\x02\u0D08\u0D0A\x07\u024E\x02\x02\u0D09\u0D08" +
		"\x03\x02\x02\x02\u0D09\u0D0A\x03\x02\x02\x02\u0D0A\u0D0B\x03\x02\x02\x02" +
		"\u0D0B\u0D0D\x07\u0219\x02\x02\u0D0C\u0D01\x03\x02\x02\x02\u0D0C\u0D06" +
		"\x03\x02\x02\x02\u0D0D\u016B\x03\x02\x02\x02\u0D0E\u0D10\t%\x02\x02\u0D0F" +
		"\u0D0E\x03\x02\x02\x02\u0D0F\u0D10\x03\x02\x02\x02\u0D10\u0D11\x03\x02" +
		"\x02\x02\u0D11\u0D14\x07\u0219\x02\x02\u0D12\u0D14\x07\u0282\x02\x02\u0D13" +
		"\u0D0F\x03\x02\x02\x02\u0D13\u0D12\x03\x02\x02\x02\u0D14\u016D\x03\x02" +
		"\x02\x02\u0D15\u0D17\t$\x02\x02\u0D16\u0D18\x07\u024E\x02\x02\u0D17\u0D16" +
		"\x03\x02\x02\x02\u0D17\u0D18\x03\x02\x02\x02\u0D18\u0D19";
	private static readonly _serializedATNSegment8: string =
		"\x03\x02\x02\x02\u0D19\u0D1A\x07\u0219\x02\x02\u0D1A\u016F\x03\x02\x02" +
		"\x02\u0D1B\u0D22\x05\u0172\xBA\x02\u0D1C\u0D22\x05\u0174\xBB\x02\u0D1D" +
		"\u0D22\x05\u0176\xBC\x02\u0D1E\u0D22\x05\u0178\xBD\x02\u0D1F\u0D20\x06" +
		"\xB98\x02\u0D20\u0D22\x05\u017A\xBE\x02\u0D21\u0D1B\x03\x02\x02\x02\u0D21" +
		"\u0D1C\x03\x02\x02\x02\u0D21\u0D1D\x03\x02\x02\x02\u0D21\u0D1E\x03\x02" +
		"\x02\x02\u0D21\u0D1F\x03\x02\x02\x02\u0D22\u0171\x03\x02\x02\x02\u0D23" +
		"\u0D25\x05\u0448\u0225\x02\u0D24\u0D26\x05\u0406\u0204\x02\u0D25\u0D24" +
		"\x03\x02\x02\x02\u0D25\u0D26\x03\x02\x02\x02\u0D26\u0D28\x03\x02\x02\x02" +
		"\u0D27\u0D29\x05\u018A\xC6\x02\u0D28\u0D27\x03\x02\x02\x02\u0D28\u0D29" +
		"\x03\x02\x02\x02\u0D29\u0D2B\x03\x02\x02\x02\u0D2A\u0D2C\x05\u018C\xC7" +
		"\x02\u0D2B\u0D2A\x03\x02\x02\x02\u0D2B\u0D2C\x03\x02\x02\x02\u0D2C\u0173" +
		"\x03\x02\x02\x02\u0D2D\u0D30\x07\u019B\x02\x02\u0D2E\u0D31\x05\u0172\xBA" +
		"\x02\u0D2F\u0D31\x05\u0174\xBB\x02\u0D30\u0D2E\x03\x02\x02\x02\u0D30\u0D2F" +
		"\x03\x02\x02\x02\u0D31\u0D32\x03\x02\x02\x02\u0D32\u0D33\x07\u019C\x02" +
		"\x02\u0D33\u0175\x03\x02\x02\x02\u0D34\u0D36\x05\u011C\x8F\x02\u0D35\u0D37" +
		"\x05\u018A\xC6\x02\u0D36\u0D35\x03\x02\x02\x02\u0D36\u0D37\x03\x02\x02" +
		"\x02\u0D37\u0D3A\x03\x02\x02\x02\u0D38\u0D39\x06\xBC9\x02\u0D39\u0D3B" +
		"\x05\u040E\u0208\x02\u0D3A\u0D38\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02\x02" +
		"\x02\u0D3B\u0D46\x03\x02\x02\x02\u0D3C\u0D3D\x06\xBC:\x02\u0D3D\u0D3E" +
		"\x07\u02F6\x02\x02\u0D3E\u0D40\x05\u011C\x8F\x02\u0D3F\u0D41\x05\u018A" +
		"\xC6\x02\u0D40\u0D3F\x03\x02\x02\x02\u0D40\u0D41\x03\x02\x02\x02\u0D41" +
		"\u0D43\x03\x02\x02\x02\u0D42\u0D44\x05\u040E\u0208\x02\u0D43\u0D42\x03" +
		"\x02\x02\x02\u0D43\u0D44\x03\x02\x02\x02\u0D44\u0D46\x03\x02\x02\x02\u0D45" +
		"\u0D34\x03\x02\x02\x02\u0D45\u0D3C\x03\x02\x02\x02\u0D46\u0177\x03\x02" +
		"\x02\x02\u0D47\u0D4A\x07\u019B\x02\x02\u0D48\u0D4B\x05\u0152\xAA\x02\u0D49" +
		"\u0D4B\x05\u0178\xBD\x02\u0D4A\u0D48\x03\x02\x02\x02\u0D4A\u0D49\x03\x02" +
		"\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C\u0D4D\x07\u019C\x02\x02\u0D4D" +
		"\u0179\x03\x02\x02\x02\u0D4E\u0D4F\x07\u02DD\x02\x02\u0D4F\u0D50\x07\u019B" +
		"\x02\x02\u0D50\u0D51\x05\u029E\u0150\x02\u0D51\u0D52\x07\u0198\x02\x02" +
		"\u0D52\u0D53\x05\u047C\u023F\x02\u0D53\u0D54\x05\u017C\xBF\x02\u0D54\u0D56" +
		"\x07\u019C\x02\x02\u0D55\u0D57\x05\u018A\xC6\x02\u0D56\u0D55\x03\x02\x02" +
		"\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u017B\x03\x02\x02\x02\u0D58\u0D59" +
		"\x07\\\x02\x02\u0D59\u0D5A\x07\u019B\x02\x02\u0D5A\u0D5F\x05\u017E\xC0" +
		"\x02\u0D5B\u0D5C\x07\u0198\x02\x02\u0D5C\u0D5E\x05\u017E\xC0\x02\u0D5D" +
		"\u0D5B\x03\x02\x02\x02\u0D5E\u0D61\x03\x02\x02\x02\u0D5F\u0D5D\x03\x02" +
		"\x02\x02\u0D5F\u0D60\x03\x02\x02\x02\u0D60\u0D62\x03\x02\x02\x02\u0D61" +
		"\u0D5F\x03\x02\x02\x02\u0D62\u0D63\x07\u019C\x02\x02\u0D63\u017D\x03\x02" +
		"\x02\x02\u0D64\u0D65\x05\u0462\u0232\x02\u0D65\u0D66\x07\u01FC\x02\x02" +
		"\u0D66\u0D67\x07\u02DF\x02\x02\u0D67\u0D7C\x03\x02\x02\x02\u0D68\u0D69" +
		"\x05\u0462\u0232\x02\u0D69\u0D6C\x05\u038E\u01C8\x02\u0D6A\u0D6B\x06\xC0" +
		";\x02\u0D6B\u0D6D\x05\u03D4\u01EB\x02\u0D6C\u0D6A\x03\x02\x02\x02\u0D6C" +
		"\u0D6D\x03\x02\x02\x02\u0D6D\u0D6F\x03\x02\x02\x02\u0D6E\u0D70\x07\u01F2" +
		"\x02\x02\u0D6F\u0D6E\x03\x02\x02\x02\u0D6F\u0D70\x03\x02\x02\x02\u0D70" +
		"\u0D71\x03\x02\x02\x02\u0D71\u0D72\x07\u02E0\x02\x02\u0D72\u0D74\x05\u047C" +
		"\u023F\x02\u0D73\u0D75\x05\u0180\xC1\x02\u0D74\u0D73\x03\x02\x02\x02\u0D74" +
		"\u0D75\x03\x02\x02\x02\u0D75\u0D7C\x03\x02\x02\x02\u0D76\u0D77\x07\u02DE" +
		"\x02\x02\u0D77\u0D78\x07\u02E0\x02\x02\u0D78\u0D79\x05\u047C\u023F\x02" +
		"\u0D79\u0D7A\x05\u017C\xBF\x02\u0D7A\u0D7C\x03\x02\x02\x02\u0D7B\u0D64" +
		"\x03\x02\x02\x02\u0D7B\u0D68\x03\x02\x02\x02\u0D7B\u0D76\x03\x02\x02\x02" +
		"\u0D7C\u017F\x03\x02\x02\x02\u0D7D\u0D7F\x05\u0182\xC2\x02\u0D7E\u0D80" +
		"\x05\u0184\xC3\x02\u0D7F\u0D7E\x03\x02\x02\x02\u0D7F\u0D80\x03\x02\x02" +
		"\x02\u0D80\u0D86\x03\x02\x02\x02\u0D81\u0D83\x05\u0184\xC3\x02\u0D82\u0D84" +
		"\x05\u0182\xC2\x02\u0D83\u0D82\x03\x02\x02\x02\u0D83\u0D84\x03\x02\x02" +
		"\x02\u0D84\u0D86\x03\x02\x02\x02\u0D85\u0D7D\x03\x02\x02\x02\u0D85\u0D81" +
		"\x03\x02\x02\x02\u0D86\u0181\x03\x02\x02\x02\u0D87\u0D88\x05\u0186\xC4" +
		"\x02\u0D88\u0D89\x07\u0245\x02\x02\u0D89\u0D8A\x07\u02DC\x02\x02\u0D8A" +
		"\u0183\x03\x02\x02\x02\u0D8B\u0D8C\x05\u0186\xC4\x02\u0D8C\u0D8D\x07\u0245" +
		"\x02\x02\u0D8D\u0D8E\x07\x84\x02\x02\u0D8E\u0185\x03\x02\x02\x02\u0D8F" +
		"\u0D94\x07\x84\x02\x02\u0D90\u0D94\x07\u0242\x02\x02\u0D91\u0D92\x07\u01E0" +
		"\x02\x02\u0D92\u0D94\x05\u047C\u023F\x02\u0D93\u0D8F\x03\x02\x02\x02\u0D93" +
		"\u0D90\x03\x02\x02\x02\u0D93\u0D91\x03\x02\x02\x02\u0D94\u0187\x03\x02" +
		"\x02\x02\u0D95\u0D96\t&\x02\x02\u0D96\u0189\x03\x02\x02\x02\u0D97\u0D9B" +
		"\x07\u01B1\x02\x02\u0D98\u0D99\x06\xC6<\x02\u0D99\u0D9B\x07\u0181\x02" +
		"\x02\u0D9A\u0D97\x03\x02\x02\x02\u0D9A\u0D98\x03\x02\x02\x02\u0D9A\u0D9B" +
		"\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C\u0D9D\x05\u0462\u0232" +
		"\x02\u0D9D\u018B\x03\x02\x02\x02\u0D9E\u0DA3\x05\u018E\xC8\x02\u0D9F\u0DA0" +
		"\x07\u0198\x02\x02\u0DA0\u0DA2\x05\u018E\xC8\x02\u0DA1\u0D9F\x03\x02\x02" +
		"\x02\u0DA2\u0DA5\x03\x02\x02\x02\u0DA3\u0DA1\x03\x02\x02\x02\u0DA3\u0DA4" +
		"\x03\x02\x02\x02\u0DA4\u018D\x03\x02\x02\x02\u0DA5\u0DA3\x03\x02\x02\x02" +
		"\u0DA6\u0DA7\x05\u0190\xC9\x02\u0DA7\u0DA9\x05\u0192\xCA\x02\u0DA8\u0DAA" +
		"\x05\u0196\xCC\x02\u0DA9\u0DA8\x03\x02\x02\x02\u0DA9\u0DAA\x03\x02\x02" +
		"\x02\u0DAA\u0DAB\x03\x02\x02\x02\u0DAB\u0DAC\x07\u019B\x02\x02\u0DAC\u0DAD" +
		"\x05\u0198\xCD\x02\u0DAD\u0DAE\x07\u019C\x02\x02\u0DAE\u0DBB\x03\x02\x02" +
		"\x02\u0DAF\u0DB0\x07\u029B\x02\x02\u0DB0\u0DB2\x05\u0192\xCA\x02\u0DB1" +
		"\u0DB3\x05\u0196\xCC\x02\u0DB2\u0DB1\x03\x02\x02\x02\u0DB2\u0DB3\x03\x02" +
		"\x02\x02\u0DB3\u0DB4\x03\x02\x02\x02\u0DB4\u0DB6\x07\u019B\x02\x02\u0DB5" +
		"\u0DB7\x05\u0198\xCD\x02\u0DB6\u0DB5\x03\x02\x02\x02\u0DB6\u0DB7\x03\x02" +
		"\x02\x02\u0DB7\u0DB8\x03\x02\x02\x02\u0DB8\u0DB9\x07\u019C\x02\x02\u0DB9" +
		"\u0DBB\x03\x02\x02\x02\u0DBA\u0DA6\x03\x02\x02\x02\u0DBA\u0DAF\x03\x02" +
		"\x02\x02\u0DBB\u018F\x03\x02\x02\x02\u0DBC\u0DBD\t\'\x02\x02\u0DBD\u0191" +
		"\x03\x02\x02\x02\u0DBE\u0DBF\t(\x02\x02\u0DBF\u0193\x03\x02\x02\x02\u0DC0" +
		"\u0DC1\x07\u0253\x02\x02\u0DC1\u0DC7\x07\u021B\x02\x02\u0DC2\u0DC4\x07" +
		"\u0296\x02\x02\u0DC3\u0DC5\x05\u0192\xCA\x02\u0DC4\u0DC3\x03\x02\x02\x02" +
		"\u0DC4\u0DC5\x03\x02\x02\x02\u0DC5\u0DC7\x03\x02\x02\x02\u0DC6\u0DC0\x03" +
		"\x02\x02\x02\u0DC6\u0DC2\x03\x02\x02\x02\u0DC7\u0195\x03\x02\x02\x02\u0DC8" +
		"\u0DCE\x07\u01FC\x02\x02\u0DC9\u0DCF\x07\u0219\x02\x02\u0DCA\u0DCB\x07" +
		"\u024C\x02\x02\u0DCB\u0DCF\x07\u01BE\x02\x02\u0DCC\u0DCD\x07\u0202\x02" +
		"\x02\u0DCD\u0DCF\x07\u01BE\x02\x02\u0DCE\u0DC9\x03\x02\x02\x02\u0DCE\u0DCA" +
		"\x03\x02\x02\x02\u0DCE\u0DCC\x03\x02\x02\x02\u0DCF\u0197\x03\x02\x02\x02" +
		"\u0DD0\u0DD5\x05\u019A\xCE\x02\u0DD1\u0DD2\x07\u0198\x02\x02\u0DD2\u0DD4" +
		"\x05\u019A\xCE\x02\u0DD3\u0DD1\x03\x02\x02\x02\u0DD4\u0DD7\x03\x02\x02" +
		"\x02\u0DD5\u0DD3\x03\x02\x02\x02\u0DD5\u0DD6\x03\x02\x02\x02\u0DD6\u0199" +
		"\x03\x02\x02\x02\u0DD7\u0DD5\x03\x02\x02\x02\u0DD8\u0DDB\x05\u0462\u0232" +
		"\x02\u0DD9\u0DDB\x07\u0253\x02\x02\u0DDA\u0DD8\x03\x02\x02\x02\u0DDA\u0DD9" +
		"\x03\x02\x02\x02\u0DDB\u019B\x03\x02\x02\x02\u0DDC\u0DDD\x06\xCF=\x02" +
		"\u0DDD\u0DDF\x05\u0144\xA3\x02\u0DDE\u0DDC\x03\x02\x02\x02\u0DDE\u0DDF" +
		"\x03\x02\x02\x02\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0\u0DE2\x07\u0299\x02" +
		"\x02\u0DE1\u0DE3\x07\u022C\x02\x02\u0DE2\u0DE1\x03\x02\x02\x02\u0DE2\u0DE3" +
		"\x03\x02\x02\x02\u0DE3\u0DE5\x03\x02\x02\x02\u0DE4\u0DE6\x07\u020A\x02" +
		"\x02\u0DE5\u0DE4\x03\x02\x02\x02\u0DE5\u0DE6\x03\x02\x02\x02\u0DE6\u0DE7" +
		"\x03\x02\x02\x02\u0DE7\u0DE8\x05\u0152\xAA\x02\u0DE8\u0DE9\x07\u026D\x02" +
		"\x02\u0DE9\u0DEB\x05\u03DC\u01EF\x02\u0DEA\u0DEC\x05\u0162\xB2\x02\u0DEB" +
		"\u0DEA\x03\x02\x02\x02\u0DEB\u0DEC\x03\x02\x02\x02\u0DEC\u0DEE\x03\x02" +
		"\x02\x02\u0DED\u0DEF\x05\u014C\xA7\x02\u0DEE\u0DED\x03\x02\x02\x02\u0DEE" +
		"\u0DEF\x03\x02\x02\x02\u0DEF\u0DF1\x03\x02\x02\x02\u0DF0\u0DF2\x05\u0122" +
		"\x92\x02\u0DF1\u0DF0\x03\x02\x02\x02\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2" +
		"\u019D\x03\x02\x02\x02\u0DF3\u0DF8\x05\u01A0\xD1\x02\u0DF4\u0DF8\x05\u01A6" +
		"\xD4\x02\u0DF5\u0DF8\x05\u01A8\xD5\x02\u0DF6\u0DF8\x05\u01AE\xD8\x02\u0DF7" +
		"\u0DF3\x03\x02\x02\x02\u0DF7\u0DF4\x03\x02\x02\x02\u0DF7\u0DF5\x03\x02" +
		"\x02\x02\u0DF7\u0DF6\x03\x02\x02\x02\u0DF8\u019F\x03\x02\x02\x02\u0DF9" +
		"\u0DFA\x072\x02\x02\u0DFA\u0DFE\x07\u015D\x02\x02\u0DFB\u0DFD\x05\u01A4" +
		"\xD3\x02\u0DFC\u0DFB\x03\x02\x02\x02\u0DFD\u0E00\x03\x02\x02\x02\u0DFE" +
		"\u0DFC\x03\x02\x02\x02\u0DFE\u0DFF\x03\x02\x02\x02\u0DFF\u0E13\x03\x02" +
		"\x02\x02\u0E00\u0DFE\x03\x02\x02\x02\u0E01\u0E03\x07\x0E\x02\x02\u0E02" +
		"\u0E04\x07\u0176\x02\x02\u0E03\u0E02\x03\x02\x02\x02\u0E03\u0E04\x03\x02" +
		"\x02\x02\u0E04\u0E0A\x03\x02\x02\x02\u0E05\u0E07\x07\u01B0\x02\x02\u0E06" +
		"\u0E08\x07\x1D\x02\x02\u0E07\u0E06\x03\x02\x02\x02\u0E07\u0E08\x03\x02" +
		"\x02\x02\u0E08\u0E09\x03\x02\x02\x02\u0E09\u0E0B\x07Q\x02\x02\u0E0A\u0E05" +
		"\x03\x02\x02\x02\u0E0A\u0E0B\x03\x02\x02\x02\u0E0B\u0E10\x03\x02\x02\x02" +
		"\u0E0C\u0E0E\x07\x1D\x02\x02\u0E0D\u0E0C\x03\x02\x02\x02\u0E0D\u0E0E\x03" +
		"\x02\x02\x02\u0E0E\u0E0F\x03\x02\x02\x02\u0E0F\u0E11\x07\u025D\x02\x02" +
		"\u0E10\u0E0D\x03\x02\x02\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E13\x03" +
		"\x02\x02\x02\u0E12\u0DF9\x03\x02\x02\x02\u0E12\u0E01\x03\x02\x02\x02\u0E13" +
		"\u01A1\x03\x02\x02\x02\u0E14\u0E16\x07\x07\x02\x02\u0E15\u0E17\x07\u0176" +
		"\x02\x02\u0E16\u0E15\x03\x02\x02\x02\u0E16\u0E17\x03\x02\x02\x02\u0E17" +
		"\u01A3\x03\x02\x02\x02\u0E18\u0E19\x07\u02AC\x02\x02\u0E19\u0E1A\x07e" +
		"\x02\x02\u0E1A\u0E1F\x07\u013A\x02\x02\u0E1B\u0E1C\x06\xD3>\x02\u0E1C" +
		"\u0E1D\x07\u0258\x02\x02\u0E1D\u0E1F\t)\x02\x02\u0E1E\u0E18\x03\x02\x02" +
		"\x02\u0E1E\u0E1B\x03\x02\x02\x02\u0E1F\u01A5\x03\x02\x02\x02\u0E20\u0E21" +
		"\x07+\x02\x02\u0E21\u0E3E\x05\u0462\u0232\x02\u0E22\u0E24\x07*\x02\x02" +
		"\u0E23\u0E25\x07\u0176\x02\x02\u0E24\u0E23\x03\x02\x02\x02\u0E24\u0E25" +
		"\x03\x02\x02\x02\u0E25\u0E38\x03\x02\x02\x02\u0E26\u0E28\x07\u028F\x02" +
		"\x02\u0E27\u0E29\x07+\x02\x02\u0E28\u0E27\x03\x02\x02\x02\u0E28\u0E29" +
		"\x03\x02\x02\x02\u0E29\u0E2A\x03\x02\x02\x02\u0E2A\u0E39\x05\u0462\u0232" +
		"\x02\u0E2B\u0E2D\x07\u01B0\x02\x02\u0E2C\u0E2E\x07\x1D\x02\x02\u0E2D\u0E2C" +
		"\x03\x02\x02\x02\u0E2D\u0E2E\x03\x02\x02\x02\u0E2E\u0E2F\x03\x02\x02\x02" +
		"\u0E2F\u0E31\x07Q\x02\x02\u0E30\u0E2B\x03\x02\x02\x02\u0E30\u0E31\x03" +
		"\x02\x02\x02\u0E31\u0E36\x03\x02\x02\x02\u0E32\u0E34\x07\x1D\x02\x02\u0E33" +
		"\u0E32\x03\x02\x02\x02\u0E33\u0E34\x03\x02\x02\x02\u0E34\u0E35\x03\x02" +
		"\x02\x02\u0E35\u0E37\x07\u025D\x02\x02\u0E36\u0E33\x03\x02\x02\x02\u0E36" +
		"\u0E37\x03\x02\x02\x02\u0E37\u0E39\x03\x02\x02\x02\u0E38\u0E26\x03\x02" +
		"\x02\x02\u0E38\u0E30\x03\x02\x02\x02\u0E39\u0E3E\x03\x02\x02\x02\u0E3A" +
		"\u0E3B\x07\u025D\x02\x02\u0E3B\u0E3C\x07+\x02\x02\u0E3C\u0E3E\x05\u0462" +
		"\u0232\x02\u0E3D\u0E20\x03\x02\x02\x02\u0E3D\u0E22\x03\x02\x02\x02\u0E3D" +
		"\u0E3A\x03\x02\x02\x02\u0E3E\u01A7\x03\x02\x02\x02\u0E3F\u0E40\x07\u0226" +
		"\x02\x02\u0E40\u0E41\t\x14\x02\x02\u0E41\u0E46\x05\u01AA\xD6\x02\u0E42" +
		"\u0E43\x07\u0198\x02\x02\u0E43\u0E45\x05\u01AA\xD6\x02\u0E44\u0E42\x03" +
		"\x02\x02\x02\u0E45\u0E48\x03\x02\x02\x02\u0E46\u0E44\x03\x02\x02\x02\u0E46" +
		"\u0E47\x03\x02\x02\x02\u0E47\u0E56\x03\x02\x02\x02\u0E48\u0E46\x03\x02" +
		"\x02\x02\u0E49\u0E4A\x06\xD5?\x02\u0E4A\u0E4B\x07\u0226\x02\x02\u0E4B" +
		"\u0E4C\x07\xA7\x02\x02\u0E4C\u0E4D\x07\u01FC\x02\x02\u0E4D\u0E56\x07\x06" +
		"\x02\x02\u0E4E\u0E53\x07\u0297\x02\x02\u0E4F\u0E54\x07\u0156\x02\x02\u0E50" +
		"\u0E54\x07\u0289\x02\x02\u0E51\u0E52\x06\xD5@\x02\u0E52\u0E54\x07\xA7" +
		"\x02\x02\u0E53\u0E4F\x03\x02\x02\x02\u0E53\u0E50\x03\x02\x02\x02\u0E53" +
		"\u0E51\x03\x02\x02\x02\u0E54\u0E56\x03\x02\x02\x02\u0E55\u0E3F\x03\x02" +
		"\x02\x02\u0E55\u0E49\x03\x02\x02\x02\u0E55\u0E4E\x03\x02\x02\x02\u0E56" +
		"\u01A9\x03\x02\x02\x02\u0E57\u0E59\x05\u0448\u0225\x02\u0E58\u0E5A\x05" +
		"\u018A\xC6\x02\u0E59\u0E58\x03\x02\x02\x02\u0E59\u0E5A\x03\x02\x02\x02" +
		"\u0E5A\u0E5B\x03\x02\x02\x02\u0E5B\u0E5C\x05\u01AC\xD7\x02\u0E5C\u01AB" +
		"\x03\x02\x02\x02\u0E5D\u0E5F\x07\u0258\x02\x02\u0E5E\u0E60\x07\xB6\x02" +
		"\x02\u0E5F\u0E5E\x03\x02\x02\x02\u0E5F\u0E60\x03\x02\x02\x02\u0E60\u0E66" +
		"\x03\x02\x02\x02\u0E61\u0E63\x07\u022C\x02\x02\u0E62\u0E61\x03\x02\x02" +
		"\x02\u0E62\u0E63\x03\x02\x02\x02\u0E63\u0E64\x03\x02\x02\x02\u0E64\u0E66" +
		"\x07\u02AE\x02\x02\u0E65\u0E5D\x03\x02\x02\x02\u0E65\u0E62\x03\x02\x02" +
		"\x02\u0E66\u01AD\x03\x02\x02\x02\u0E67\u0E82\x079\x02\x02\u0E68\u0E69" +
		"\t*\x02\x02\u0E69\u0E6B\x05\u01B2\xDA\x02\u0E6A\u0E6C\t+\x02\x02\u0E6B" +
		"\u0E6A\x03\x02\x02\x02\u0E6B\u0E6C\x03\x02\x02\x02\u0E6C\u0E83\x03\x02" +
		"\x02\x02\u0E6D\u0E6E\x07\x12\x02\x02\u0E6E\u0E74\x05\u01B2\xDA\x02\u0E6F" +
		"\u0E72\x07\u0152\x02\x02\u0E70\u0E71\x07\u01FC\x02\x02\u0E71\u0E73\x07" +
		"\xDC\x02\x02\u0E72\u0E70\x03\x02\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73" +
		"\u0E75\x03\x02\x02\x02\u0E74\u0E6F\x03\x02\x02\x02\u0E74\u0E75\x03\x02" +
		"\x02\x02\u0E75\u0E83\x03\x02\x02\x02\u0E76\u0E77\x07%\x02\x02\u0E77\u0E83" +
		"\x05\u01B2\xDA\x02\u0E78\u0E79\x07\x0E\x02\x02\u0E79\u0E7C\x05\u01B2\xDA" +
		"\x02\u0E7A\u0E7B\x07\xF7\x02\x02\u0E7B\u0E7D\x07\xFE\x02\x02\u0E7C\u0E7A" +
		"\x03\x02\x02\x02\u0E7C\u0E7D\x03\x02\x02\x02\u0E7D\u0E83\x03\x02\x02\x02" +
		"\u0E7E\u0E7F\x07*\x02\x02\u0E7F\u0E83\x05\u01B2\xDA\x02\u0E80\u0E81\x07" +
		"\u0111\x02\x02\u0E81\u0E83\x05\u01B0\xD9\x02\u0E82\u0E68\x03\x02\x02\x02" +
		"\u0E82\u0E6D\x03\x02\x02\x02\u0E82\u0E76\x03\x02\x02\x02\u0E82\u0E78\x03" +
		"\x02\x02\x02\u0E82\u0E7E\x03\x02\x02\x02\u0E82\u0E80\x03\x02\x02\x02\u0E83" +
		"\u01AF\x03\x02\x02\x02\u0E84\u0E87\x06\xD9A\x02\u0E85\u0E86\x07\u01CB" +
		"\x02\x02\u0E86\u0E88\x07\u0179\x02\x02\u0E87\u0E85\x03\x02\x02\x02\u0E87" +
		"\u0E88\x03\x02\x02\x02\u0E88\u0E8B\x03\x02\x02\x02\u0E89\u0E8B\x03\x02" +
		"\x02\x02\u0E8A\u0E84\x03\x02\x02\x02\u0E8A\u0E89\x03\x02\x02\x02\u0E8B" +
		"\u01B1\x03\x02\x02\x02\u0E8C\u0E93\x05\u047E\u0240\x02\u0E8D\u0E8E\x07" +
		"\u0198\x02\x02\u0E8E\u0E91\x05\u047E\u0240\x02\u0E8F\u0E90\x07\u0198\x02" +
		"\x02\u0E90\u0E92\x05\u046E\u0238\x02\u0E91\u0E8F\x03\x02\x02\x02\u0E91" +
		"\u0E92\x03\x02\x02\x02\u0E92\u0E94\x03\x02\x02\x02\u0E93\u0E8D\x03\x02" +
		"\x02\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u01B3\x03\x02\x02\x02\u0E95" +
		"\u0E96\x07\u0255\x02\x02\u0E96\u0E97\t,\x02\x02\u0E97\u0E9C\x07\xB9\x02" +
		"\x02\u0E98\u0E99\x07\u028F\x02\x02\u0E99\u0E9D\x05\u0482\u0242\x02\u0E9A" +
		"\u0E9B\x07\u01B4\x02\x02\u0E9B\u0E9D\x05\u029E\u0150\x02\u0E9C\u0E98\x03" +
		"\x02\x02\x02\u0E9C\u0E9A\x03\x02\x02\x02\u0E9D\u0EB7\x03\x02\x02\x02\u0E9E" +
		"\u0EB7\x05\u01BC\xDF\x02\u0E9F\u0EA0\x07(\x02\x02\u0EA0\u0EA5\x05\u01B6" +
		"\xDC\x02\u0EA1\u0EA2\x07\u0198\x02\x02\u0EA2\u0EA4\x05\u01B6\xDC\x02\u0EA3" +
		"\u0EA1\x03\x02\x02\x02\u0EA4\u0EA7\x03\x02\x02\x02\u0EA5\u0EA3\x03\x02" +
		"\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02\u0EA6\u0EB7\x03\x02\x02\x02\u0EA7" +
		"\u0EA5\x03\x02\x02\x02\u0EA8\u0EA9\x06\xDBB\x02\u0EA9\u0EAA\x07(\x02\x02" +
		"\u0EAA\u0EAE\x07\u02B2\x02\x02\u0EAB\u0EAC\x05\u03CC\u01E7\x02\u0EAC\u0EAD" +
		"\x05\u0462\u0232\x02\u0EAD\u0EAF\x03\x02\x02\x02\u0EAE\u0EAB\x03\x02\x02" +
		"\x02\u0EAE\u0EAF\x03\x02\x02\x02\u0EAF\u0EB7\x03\x02\x02\x02\u0EB0\u0EB7" +
		"\x05\u01D8\xED\x02\u0EB1\u0EB2\x06\xDBC\x02\u0EB2\u0EB7\x05\u01CA\xE6" +
		"\x02\u0EB3\u0EB7\x05\u01BA\xDE\x02\u0EB4\u0EB5\x06\xDBD\x02\u0EB5\u0EB7" +
		"\x05\u01E2\xF2\x02\u0EB6\u0E95\x03\x02\x02\x02\u0EB6\u0E9E\x03\x02\x02" +
		"\x02\u0EB6\u0E9F\x03\x02\x02\x02\u0EB6\u0EA8\x03\x02\x02\x02\u0EB6\u0EB0" +
		"\x03\x02\x02\x02\u0EB6\u0EB1\x03\x02\x02\x02\u0EB6\u0EB3\x03\x02\x02\x02" +
		"\u0EB6\u0EB4\x03\x02\x02\x02\u0EB7\u01B5\x03\x02\x02\x02\u0EB8\u0EBA\x07" +
		"\xBB\x02\x02\u0EB9\u0EBB\x05\u01B8\xDD\x02\u0EBA\u0EB9\x03\x02\x02\x02" +
		"\u0EBA\u0EBB\x03\x02\x02\x02\u0EBB\u0EC7\x03\x02\x02\x02\u0EBC\u0EBD\x06" +
		"\xDCE\x02\u0EBD\u0EBE\x07\u010D\x02\x02\u0EBE\u0EC7\x07\t\x02\x02\u0EBF" +
		"\u0EC1\x07/\x02\x02\u0EC0\u0EC2\x07\u01AD\x02\x02\u0EC1\u0EC0\x03\x02" +
		"\x02\x02\u0EC1\u0EC2\x03\x02\x02\x02\u0EC2\u0EC4\x03\x02\x02\x02\u0EC3" +
		"\u0EC5\x05\u0308\u0185\x02\u0EC4\u0EC3\x03\x02\x02\x02\u0EC4\u0EC5\x03" +
		"\x02\x02\x02\u0EC5\u0EC7\x03\x02\x02\x02\u0EC6\u0EB8\x03\x02\x02\x02\u0EC6" +
		"\u0EBC\x03\x02\x02\x02\u0EC6\u0EBF\x03\x02\x02\x02\u0EC7\u01B7\x03\x02" +
		"\x02\x02\u0EC8\u0EC9\x06\xDDF\x02\u0EC9\u0ECE\x07\u028F\x02\x02\u0ECA" +
		"\u0ECB\x06\xDDG\x02\u0ECB\u0ECF\x05\u0470\u0239\x02\u0ECC\u0ECD\x06\xDD" +
		"H\x02\u0ECD\u0ECF\x05\u0474\u023B\x02\u0ECE\u0ECA\x03\x02\x02\x02\u0ECE" +
		"\u0ECC\x03\x02\x02\x02\u0ECF\u01B9\x03\x02\x02\x02\u0ED0\u0ED4\x07\u0224" +
		"\x02\x02\u0ED1\u0ED5\x07o\x02\x02\u0ED2\u0ED3\x07\u0289\x02\x02\u0ED3" +
		"\u0ED5\x05\u0448\u0225\x02\u0ED4\u0ED1\x03\x02\x02\x02\u0ED4\u0ED2\x03" +
		"\x02\x02\x02\u0ED5\u0ED6\x03\x02\x02\x02\u0ED6\u0ED7\x07\u01FD\x02\x02" +
		"\u0ED7\u0ED8\x07\xBB\x02\x02\u0ED8\u01BB\x03\x02\x02\x02\u0ED9\u0EDA\x07" +
		"\u01C3\x02\x02\u0EDA\u0EDB\x07\xBB\x02\x02\u0EDB\u0EDC\x07\u028F\x02\x02" +
		"\u0EDC\u0EDE\x05\u01BE\xE0\x02\u0EDD\u0EDF\x05\u0308\u0185\x02\u0EDE\u0EDD" +
		"\x03\x02\x02\x02\u0EDE\u0EDF\x03\x02\x02\x02\u0EDF\u01BD\x03\x02\x02\x02" +
		"\u0EE0\u0EE5\x05\u01C0\xE1\x02\u0EE1\u0EE2\x07\u0198\x02\x02\u0EE2\u0EE4" +
		"\x05\u01C0\xE1\x02\u0EE3\u0EE1\x03\x02\x02\x02\u0EE4\u0EE7\x03\x02\x02" +
		"\x02\u0EE5\u0EE3\x03\x02\x02\x02\u0EE5\u0EE6\x03\x02\x02\x02\u0EE6\u01BF" +
		"\x03\x02\x02\x02\u0EE7\u0EE5\x03\x02\x02\x02\u0EE8\u0EE9\x07\xBD\x02\x02" +
		"\u0EE9\u0EEA\x07\u0181\x02\x02\u0EEA\u0F3E\x05\u0484\u0243\x02\u0EEB\u0EEC" +
		"\x07\u02F9\x02\x02\u0EEC\u0EED\x07\u0181\x02\x02\u0EED\u0F3E\x05\u0484" +
		"\u0243\x02\u0EEE\u0EEF\x07\u022D\x02\x02\u0EEF\u0EF0\x07\u0181\x02\x02" +
		"\u0EF0\u0F3E\x05\u0484\u0243\x02\u0EF1\u0EF2\x07\xC1\x02\x02\u0EF2\u0EF3" +
		"\x07\u0181\x02\x02\u0EF3\u0F3E\x05\u0484\u0243\x02\u0EF4\u0EF5\x07\xC2" +
		"\x02\x02\u0EF5\u0EF6\x07\u0181\x02\x02\u0EF6\u0F3E\x05\u0484\u0243\x02" +
		"\u0EF7\u0EF8\x07\xBE\x02\x02\u0EF8\u0EF9\x07\u0181\x02\x02\u0EF9\u0F3E" +
		"\x05\u046E\u0238\x02\u0EFA\u0EFB\x07\xC4\x02\x02\u0EFB\u0EFC\x07\u0181" +
		"\x02\x02\u0EFC\u0F3E\x05\u046E\u0238\x02\u0EFD\u0EFE\x07\xC5\x02\x02\u0EFE" +
		"\u0EFF\x07\u0181\x02\x02\u0EFF\u0F3E\x05\u046E\u0238\x02\u0F00\u0F01\x07" +
		"\xC6\x02\x02\u0F01\u0F02\x07\u0181\x02\x02\u0F02\u0F3E\x05\u046E\u0238" +
		"\x02\u0F03\u0F04\x07\xC7\x02\x02\u0F04\u0F05\x07\u0181\x02\x02\u0F05\u0F3E" +
		"\x05\u046E\u0238\x02\u0F06\u0F07\x07\xC8\x02\x02\u0F07\u0F08\x07\u0181" +
		"\x02\x02\u0F08\u0F3E\x05\u0484\u0243\x02\u0F09\u0F0A\x07\xC9\x02\x02\u0F0A" +
		"\u0F0B\x07\u0181\x02\x02\u0F0B\u0F3E\x05\u0484\u0243\x02\u0F0C\u0F0D\x07" +
		"\xCA\x02\x02\u0F0D\u0F0E\x07\u0181\x02\x02\u0F0E\u0F3E\x05\u0484\u0243" +
		"\x02\u0F0F\u0F10\x07\xCB\x02\x02\u0F10\u0F11\x07\u0181\x02\x02\u0F11\u0F3E" +
		"\x05\u0484\u0243\x02\u0F12\u0F13\x07\u0302\x02\x02\u0F13\u0F14\x07\u0181" +
		"\x02\x02\u0F14\u0F3E\x05\u01C4\xE3\x02\u0F15\u0F16\x07\xCC\x02\x02\u0F16" +
		"\u0F17\x07\u0181\x02\x02\u0F17\u0F3E\x05\u0484\u0243\x02\u0F18\u0F19\x07" +
		"\xCF\x02\x02\u0F19\u0F1A\x07\u0181\x02\x02\u0F1A\u0F3E\x05\u0484\u0243" +
		"\x02\u0F1B\u0F1C\x07\u022E\x02\x02\u0F1C\u0F1D\x07\u0181\x02\x02\u0F1D" +
		"\u0F3E\x05\u046E\u0238\x02\u0F1E\u0F1F\x07\xCD\x02\x02\u0F1F\u0F20\x07" +
		"\u0181\x02\x02\u0F20\u0F3E\x05\u0482\u0242\x02\u0F21\u0F22\x07\xCE\x02" +
		"\x02\u0F22\u0F23\x07\u0181\x02\x02\u0F23\u0F3E\x05\u0484\u0243\x02\u0F24" +
		"\u0F25\x07\u02E8\x02\x02\u0F25\u0F26\x07\u0181\x02\x02\u0F26\u0F3E\x05" +
		"\u0484\u0243\x02\u0F27\u0F28\x07\u02E9\x02\x02\u0F28\u0F29\x07\u0181\x02" +
		"\x02\u0F29\u0F3E\x05\u046E\u0238\x02\u0F2A\u0F2B\x07\xBC\x02\x02\u0F2B" +
		"\u0F2C\x07\u0181\x02\x02\u0F2C\u0F3E\x05\u046E\u0238\x02\u0F2D\u0F2E\x07" +
		"\xA2\x02\x02\u0F2E\u0F2F\x07\u0181\x02\x02\u0F2F\u0F3E\x05\u01C8\xE5\x02" +
		"\u0F30\u0F31\x07\u02FF\x02\x02\u0F31\u0F32\x07\u0181\x02\x02\u0F32\u0F3E" +
		"\x05\u047C\u023F\x02\u0F33\u0F34\x07\u0300\x02\x02\u0F34\u0F35\x07\u0181" +
		"\x02\x02\u0F35\u0F3E\x05\u046E\u0238\x02\u0F36\u0F37\x07\xD0\x02\x02\u0F37" +
		"\u0F38\x07\u0181\x02\x02\u0F38\u0F3E\x05\u046E\u0238\x02\u0F39\u0F3A\x07" +
		"\u0301\x02\x02\u0F3A\u0F3B\x07\u0181\x02\x02\u0F3B\u0F3E\x05\u01C2\xE2" +
		"\x02\u0F3C\u0F3E\x05\u01C6\xE4\x02\u0F3D\u0EE8\x03\x02\x02\x02\u0F3D\u0EEB" +
		"\x03\x02\x02\x02\u0F3D\u0EEE\x03\x02\x02\x02\u0F3D\u0EF1\x03\x02\x02\x02" +
		"\u0F3D\u0EF4\x03\x02\x02\x02\u0F3D\u0EF7\x03\x02\x02\x02\u0F3D\u0EFA\x03" +
		"\x02\x02\x02\u0F3D\u0EFD\x03\x02\x02\x02\u0F3D\u0F00\x03\x02\x02\x02\u0F3D" +
		"\u0F03\x03\x02\x02\x02\u0F3D\u0F06\x03\x02\x02\x02\u0F3D\u0F09\x03\x02" +
		"\x02\x02\u0F3D\u0F0C\x03\x02\x02\x02\u0F3D\u0F0F\x03\x02\x02\x02\u0F3D" +
		"\u0F12\x03\x02\x02\x02\u0F3D\u0F15\x03\x02\x02\x02\u0F3D\u0F18\x03\x02" +
		"\x02\x02\u0F3D\u0F1B\x03\x02\x02\x02\u0F3D\u0F1E\x03\x02\x02\x02\u0F3D" +
		"\u0F21\x03\x02\x02\x02\u0F3D\u0F24\x03\x02\x02\x02\u0F3D\u0F27\x03\x02" +
		"\x02\x02\u0F3D\u0F2A\x03\x02\x02\x02\u0F3D\u0F2D\x03\x02\x02\x02\u0F3D" +
		"\u0F30\x03\x02\x02\x02\u0F3D\u0F33\x03\x02\x02\x02\u0F3D\u0F36\x03\x02" +
		"\x02\x02\u0F3D\u0F39\x03\x02\x02\x02\u0F3D\u0F3C\x03\x02\x02\x02\u0F3E" +
		"\u01C1\x03\x02\x02\x02\u0F3F\u0F42\x05\u03FA\u01FE\x02\u0F40\u0F42\x07" +
		"\u0242\x02\x02\u0F41\u0F3F\x03\x02\x02\x02\u0F41\u0F40\x03\x02\x02\x02" +
		"\u0F42\u01C3\x03\x02\x02\x02\u0F43\u0F46\x05\u0484\u0243\x02\u0F44\u0F46" +
		"\x07\u0242\x02\x02\u0F45\u0F43\x03\x02\x02\x02\u0F45\u0F44\x03\x02\x02" +
		"\x02\u0F46\u01C5\x03\x02\x02\x02\u0F47\u0F48\x07\xBF\x02\x02\u0F48\u0F49" +
		"\x07\u0181\x02\x02\u0F49\u0F54\x05\u0484\u0243\x02\u0F4A\u0F4B\x07\xC0" +
		"\x02\x02\u0F4B\u0F4C\x07\u0181\x02\x02\u0F4C\u0F54\x05\u0472\u023A\x02" +
		"\u0F4D\u0F4E\x07\u0117\x02\x02\u0F4E\u0F4F\x07\u0181\x02\x02\u0F4F\u0F54" +
		"\x05\u0484\u0243\x02\u0F50\u0F51\x07\u0118\x02\x02\u0F51\u0F52\x07\u0181" +
		"\x02\x02\u0F52\u0F54\x05\u046E\u0238\x02\u0F53\u0F47\x03\x02\x02\x02\u0F53" +
		"\u0F4A\x03\x02\x02\x02\u0F53\u0F4D\x03\x02\x02\x02\u0F53\u0F50\x03\x02" +
		"\x02\x02\u0F54\u01C7\x03\x02\x02\x02\u0F55\u0F5E\x07\u019B\x02\x02\u0F56" +
		"\u0F5B\x05\u046E\u0238\x02\u0F57\u0F58\x07\u0198\x02\x02\u0F58\u0F5A\x05" +
		"\u046E\u0238\x02\u0F59\u0F57\x03\x02\x02\x02\u0F5A\u0F5D\x03\x02\x02\x02" +
		"\u0F5B\u0F59\x03\x02\x02\x02\u0F5B\u0F5C\x03\x02\x02\x02\u0F5C\u0F5F\x03" +
		"\x02\x02\x02\u0F5D\u0F5B\x03\x02\x02\x02\u0F5E\u0F56\x03\x02\x02\x02\u0F5E" +
		"\u0F5F\x03\x02\x02\x02\u0F5F\u0F60\x03\x02\x02\x02\u0F60\u0F61\x07\u019C" +
		"\x02\x02\u0F61\u01C9\x03\x02\x02\x02\u0F62\u0F63\x07\u01C3\x02\x02\u0F63" +
		"\u0F64\x07\u011D\x02\x02\u0F64\u0F65\x07\x95\x02\x02\u0F65\u0F6A\x05\u01CC" +
		"\xE7\x02\u0F66\u0F67\x07\u0198\x02\x02\u0F67\u0F69\x05\u01CC\xE7\x02\u0F68" +
		"\u0F66\x03\x02\x02\x02\u0F69\u0F6C\x03\x02\x02\x02\u0F6A\u0F68\x03\x02" +
		"\x02\x02\u0F6A\u0F6B\x03\x02\x02\x02\u0F6B\u0F6F\x03\x02\x02\x02\u0F6C" +
		"\u0F6A\x03\x02\x02\x02\u0F6D\u0F6E\x06\xE6I\x02\u0F6E\u0F70\x05\u0308" +
		"\u0185\x02\u0F6F\u0F6D\x03\x02\x02\x02\u0F6F\u0F70\x03\x02\x02\x02\u0F70" +
		"\u01CB\x03\x02\x02\x02\u0F71\u0F72\x07\u011E\x02\x02\u0F72\u0F73\x07\u0181" +
		"\x02\x02\u0F73\u0F75\x07\u019B\x02\x02\u0F74\u0F76\x05\u01CE\xE8\x02\u0F75" +
		"\u0F74\x03\x02\x02\x02\u0F75\u0F76\x03\x02\x02\x02\u0F76\u0F77\x03\x02" +
		"\x02\x02\u0F77\u0FA3\x07\u019C\x02\x02\u0F78\u0F79\x07\u011F\x02\x02\u0F79" +
		"\u0F7A\x07\u0181\x02\x02\u0F7A\u0F7C\x07\u019B\x02\x02\u0F7B\u0F7D\x05" +
		"\u01CE\xE8\x02\u0F7C\u0F7B\x03\x02\x02\x02\u0F7C\u0F7D\x03\x02\x02\x02" +
		"\u0F7D\u0F7E\x03\x02\x02\x02\u0F7E\u0FA3\x07\u019C\x02\x02\u0F7F\u0F80" +
		"\x07\u0120\x02\x02\u0F80\u0F81\x07\u0181\x02\x02\u0F81\u0F83\x07\u019B" +
		"\x02\x02\u0F82\u0F84\x05\u01D0\xE9\x02\u0F83\u0F82\x03\x02\x02\x02\u0F83" +
		"\u0F84\x03\x02\x02\x02\u0F84\u0F85\x03\x02\x02\x02\u0F85\u0FA3\x07\u019C" +
		"\x02\x02\u0F86\u0F87\x07\u0121\x02\x02\u0F87\u0F88\x07\u0181\x02\x02\u0F88" +
		"\u0F8A\x07\u019B\x02\x02\u0F89\u0F8B\x05\u01D0\xE9\x02\u0F8A\u0F89\x03" +
		"\x02\x02\x02\u0F8A\u0F8B\x03\x02\x02\x02\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C" +
		"\u0FA3\x07\u019C\x02\x02\u0F8D\u0F8E\x07\u0122\x02\x02\u0F8E\u0F8F\x07" +
		"\u0181\x02\x02\u0F8F\u0F91\x07\u019B\x02\x02\u0F90\u0F92\x05\u01D2\xEA" +
		"\x02\u0F91\u0F90\x03\x02\x02\x02\u0F91\u0F92\x03\x02\x02\x02\u0F92\u0F93" +
		"\x03\x02\x02\x02\u0F93\u0FA3\x07\u019C\x02\x02\u0F94\u0F95\x07\u0123\x02" +
		"\x02\u0F95\u0F96\x07\u0181\x02\x02\u0F96\u0F98\x07\u019B\x02\x02\u0F97" +
		"\u0F99\x05\u01D2\xEA\x02\u0F98\u0F97\x03\x02\x02\x02\u0F98\u0F99\x03\x02" +
		"\x02\x02\u0F99\u0F9A\x03\x02\x02\x02\u0F9A\u0FA3\x07\u019C\x02\x02\u0F9B" +
		"\u0F9C\x07\u0124\x02\x02\u0F9C\u0F9D\x07\u0181\x02\x02\u0F9D\u0F9F\x07" +
		"\u019B\x02\x02\u0F9E\u0FA0\x05\u01D6\xEC\x02\u0F9F\u0F9E\x03\x02\x02\x02" +
		"\u0F9F\u0FA0\x03\x02\x02\x02\u0FA0\u0FA1\x03\x02\x02\x02\u0FA1\u0FA3\x07" +
		"\u019C\x02\x02\u0FA2\u0F71\x03\x02\x02\x02\u0FA2\u0F78\x03\x02\x02\x02" +
		"\u0FA2\u0F7F\x03\x02\x02\x02\u0FA2\u0F86\x03\x02\x02\x02\u0FA2\u0F8D\x03" +
		"\x02\x02\x02\u0FA2\u0F94\x03\x02\x02\x02\u0FA2\u0F9B\x03\x02\x02\x02\u0FA3" +
		"\u01CD\x03\x02\x02\x02\u0FA4\u0FA9\x05\u041C\u020F\x02\u0FA5\u0FA6\x07" +
		"\u0198\x02\x02\u0FA6\u0FA8\x05\u041C\u020F\x02\u0FA7\u0FA5\x03\x02\x02" +
		"\x02\u0FA8\u0FAB\x03\x02\x02\x02\u0FA9\u0FA7\x03\x02\x02\x02\u0FA9\u0FAA" +
		"\x03\x02\x02\x02\u0FAA\u01CF\x03\x02\x02\x02\u0FAB\u0FA9\x03\x02\x02\x02" +
		"\u0FAC\u0FB1\x05\u0444\u0223\x02\u0FAD\u0FAE\x07\u0198\x02\x02\u0FAE\u0FB0" +
		"\x05\u0444\u0223\x02\u0FAF\u0FAD\x03\x02\x02\x02\u0FB0\u0FB3\x03\x02\x02" +
		"\x02\u0FB1\u0FAF\x03\x02\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u01D1" +
		"\x03\x02\x02\x02\u0FB3\u0FB1\x03\x02\x02\x02\u0FB4\u0FB9\x05\u01D4\xEB" +
		"\x02\u0FB5\u0FB6\x07\u0198\x02\x02\u0FB6\u0FB8\x05\u01D4\xEB\x02\u0FB7" +
		"\u0FB5\x03\x02\x02\x02\u0FB8\u0FBB\x03\x02\x02\x02\u0FB9\u0FB7\x03\x02" +
		"\x02\x02\u0FB9\u0FBA\x03\x02";
	private static readonly _serializedATNSegment9: string =
		"\x02\x02\u0FBA\u01D3\x03\x02\x02\x02\u0FBB\u0FB9\x03\x02\x02\x02\u0FBC" +
		"\u0FBD\x05\u0484\u0243\x02\u0FBD\u01D5\x03\x02\x02\x02\u0FBE\u0FC3\x05" +
		"\u03D8\u01ED\x02\u0FBF\u0FC0\x07\u0198\x02\x02\u0FC0\u0FC2\x05\u03D8\u01ED" +
		"\x02\u0FC1\u0FBF\x03\x02\x02\x02\u0FC2\u0FC5\x03\x02\x02\x02\u0FC3\u0FC1" +
		"\x03\x02\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02\u0FC4\u01D7\x03\x02\x02\x02" +
		"\u0FC5\u0FC3\x03\x02\x02\x02\u0FC6\u0FC7\x072\x02\x02\u0FC7\u0FC9\x07" +
		"/\x02\x02\u0FC8\u0FCA\x05\u01DE\xF0\x02\u0FC9\u0FC8\x03\x02\x02\x02\u0FC9" +
		"\u0FCA\x03\x02\x02\x02\u0FCA\u0FCD\x03\x02\x02\x02\u0FCB\u0FCC\x07\u016C" +
		"\x02\x02\u0FCC\u0FCE\x05\u01DA\xEE\x02\u0FCD\u0FCB\x03\x02\x02\x02\u0FCD" +
		"\u0FCE\x03\x02\x02\x02\u0FCE\u0FCF\x03\x02\x02\x02\u0FCF\u0FD1\x05\u01DC" +
		"\xEF\x02\u0FD0\u0FD2\x05\u0308\u0185\x02\u0FD1\u0FD0\x03\x02\x02\x02\u0FD1" +
		"\u0FD2\x03\x02\x02\x02\u0FD2\u0FDC\x03\x02\x02\x02\u0FD3\u0FD4\x073\x02" +
		"\x02\u0FD4\u0FD6\x07/\x02\x02\u0FD5\u0FD7\x05\u01DE\xF0\x02\u0FD6\u0FD5" +
		"\x03\x02\x02\x02\u0FD6\u0FD7\x03\x02\x02\x02\u0FD7\u0FD9\x03\x02\x02\x02" +
		"\u0FD8\u0FDA\x05\u0308\u0185\x02\u0FD9\u0FD8\x03\x02\x02\x02\u0FD9\u0FDA" +
		"\x03\x02\x02\x02\u0FDA\u0FDC\x03\x02\x02\x02\u0FDB\u0FC6\x03\x02\x02\x02" +
		"\u0FDB\u0FD3\x03\x02\x02\x02\u0FDC\u01D9\x03\x02\x02\x02\u0FDD\u0FE5\x05" +
		"\u01C6\xE4\x02\u0FDE\u0FDF\x06\xEEJ\x02\u0FDF\u0FE0\t-\x02\x02\u0FE0\u0FE1" +
		"\x07\u0181\x02\x02\u0FE1\u0FE5\x05\u047E\u0240\x02\u0FE2\u0FE3\x06\xEE" +
		"K\x02\u0FE3\u0FE5\x07\u013E\x02\x02\u0FE4\u0FDD\x03\x02\x02\x02\u0FE4" +
		"\u0FDE\x03\x02\x02\x02\u0FE4\u0FE2\x03\x02\x02\x02\u0FE5\u0FEA\x03\x02" +
		"\x02\x02\u0FE6\u0FE7\x07\u0198\x02\x02\u0FE7\u0FE9\x05\u01C6\xE4\x02\u0FE8" +
		"\u0FE6\x03\x02\x02\x02\u0FE9\u0FEC\x03\x02\x02\x02\u0FEA\u0FE8\x03\x02" +
		"\x02\x02\u0FEA\u0FEB\x03\x02\x02\x02\u0FEB\u01DB\x03\x02\x02\x02\u0FEC" +
		"\u0FEA\x03\x02\x02\x02\u0FED\u0FF1\x06\xEFL\x02\u0FEE\u0FEF\x07\u016E" +
		"\x02\x02\u0FEF\u0FF0\x07\u0181\x02\x02\u0FF0\u0FF2\x05\u047E\u0240\x02" +
		"\u0FF1\u0FEE\x03\x02\x02\x02\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2\u0FF6\x03" +
		"\x02\x02\x02\u0FF3\u0FF4\x07\xFD\x02\x02\u0FF4\u0FF5\x07\u0181\x02\x02" +
		"\u0FF5\u0FF7\x05\u047E\u0240\x02\u0FF6\u0FF3\x03\x02\x02\x02\u0FF6\u0FF7" +
		"\x03\x02\x02\x02\u0FF7\u0FFB\x03\x02\x02\x02\u0FF8\u0FF9\x07t\x02\x02" +
		"\u0FF9\u0FFA\x07\u0181\x02\x02\u0FFA\u0FFC\x05\u047E\u0240\x02\u0FFB\u0FF8" +
		"\x03\x02\x02\x02\u0FFB\u0FFC\x03\x02\x02\x02\u0FFC\u1000\x03\x02\x02\x02" +
		"\u0FFD\u0FFE\x07\xFF\x02\x02\u0FFE\u0FFF\x07\u0181\x02\x02\u0FFF\u1001" +
		"\x05\u047E\u0240\x02\u1000\u0FFD\x03\x02\x02\x02\u1000\u1001\x03\x02\x02" +
		"\x02\u1001\u1004\x03\x02\x02\x02\u1002\u1004\x03\x02\x02\x02\u1003\u0FED" +
		"\x03\x02\x02\x02\u1003\u1002\x03\x02\x02\x02\u1004\u01DD\x03\x02\x02\x02" +
		"\u1005\u100A\x05\u01E0\xF1\x02\u1006\u1007\x07\u0198\x02\x02\u1007\u1009" +
		"\x05\u01E0\xF1\x02\u1008\u1006\x03\x02\x02\x02\u1009\u100C\x03\x02\x02" +
		"\x02\u100A\u1008\x03\x02\x02\x02\u100A\u100B\x03\x02\x02\x02\u100B\u01DF" +
		"\x03\x02\x02\x02\u100C\u100A\x03\x02\x02\x02\u100D\u100E\t.\x02\x02\u100E" +
		"\u01E1\x03\x02\x02\x02\u100F\u1010\t/\x02\x02\u1010\u1011\x07\x17\x02" +
		"\x02\u1011\u01E3\x03\x02\x02\x02\u1012\u1013\x07%\x02\x02\u1013\u1014" +
		"\x05\u0462\u0232\x02\u1014\u1017\x07\u01FD\x02\x02\u1015\u1018\x05\u0482" +
		"\u0242\x02\u1016\u1018\x05\u02E0\u0171\x02\u1017\u1015\x03\x02\x02\x02" +
		"\u1017\u1016\x03\x02\x02\x02\u1018\u101E\x03\x02\x02\x02\u1019\u101E\x05" +
		"\u01E6\xF4\x02\u101A\u101B\t0\x02\x02\u101B\u101C\x07%\x02\x02\u101C\u101E" +
		"\x05\u0462\u0232\x02\u101D\u1012\x03\x02\x02\x02\u101D\u1019\x03\x02\x02" +
		"\x02\u101D\u101A\x03\x02\x02\x02\u101E\u01E5\x03\x02\x02\x02\u101F\u1020" +
		"\x07\x13\x02\x02\u1020\u1023\x05\u0462\u0232\x02\u1021\u1022\x07\u029C" +
		"\x02\x02\u1022\u1024\x05\u01E8\xF5\x02\u1023\u1021\x03\x02\x02\x02\u1023" +
		"\u1024\x03\x02\x02\x02\u1024\u01E7\x03\x02\x02\x02\u1025\u102A\x05\u02E0" +
		"\u0171\x02\u1026\u1027\x07\u0198\x02\x02\u1027\u1029\x05\u02E0\u0171\x02" +
		"\u1028\u1026\x03\x02\x02\x02\u1029\u102C\x03\x02\x02\x02\u102A\u1028\x03" +
		"\x02\x02\x02\u102A\u102B\x03\x02\x02\x02\u102B\u01E9\x03\x02\x02\x02\u102C" +
		"\u102A\x03\x02\x02\x02\u102D\u1046\x07\u02C5\x02\x02\u102E\u102F\x07\xB6" +
		"\x02\x02\u102F\u1030\x07o\x02\x02\u1030\u1032\x07y\x02\x02\u1031\u1033" +
		"\x05\u04A0\u0251\x02\u1032\u1031\x03\x02\x02\x02\u1032\u1033\x03\x02\x02" +
		"\x02\u1033\u1034\x03\x02\x02\x02\u1034\u1047\x05\u047C\u023F\x02\u1035" +
		"\u1038\x07\u02C4\x02\x02\u1036\u1037\x07\u01FC\x02\x02\u1037\u1039\x07" +
		"\u011D\x02\x02\u1038\u1036\x03\x02\x02\x02\u1038\u1039\x03\x02\x02\x02" +
		"\u1039\u1047\x03\x02\x02\x02\u103A\u103B\x06\xF6M\x02\u103B\u103C\x07" +
		"\xA7\x02\x02\u103C\u103D\x07\u01FD\x02\x02\u103D\u103E\x05\u03FC\u01FF" +
		"\x02\u103E\u103F\x07\u019A\x02\x02\u103F\u1040\x05\u046E\u0238\x02\u1040" +
		"\u1041\x07\xA1\x02\x02\u1041\u1042\x07\u01BE\x02\x02\u1042\u1044\x05\u047C" +
		"\u023F\x02\u1043\u1045\x05\u01EC\xF7\x02\u1044\u1043\x03\x02\x02\x02\u1044" +
		"\u1045\x03\x02\x02\x02\u1045\u1047\x03\x02\x02\x02\u1046\u102E\x03\x02" +
		"\x02\x02\u1046\u1035\x03\x02\x02\x02\u1046\u103A\x03\x02\x02\x02\u1047" +
		"\u01EB\x03\x02\x02\x02\u1048\u1053\x05\u01EE\xF8\x02\u1049\u104A\x07o" +
		"\x02\x02\u104A\u104C\x07y\x02\x02\u104B\u104D\x05\u04A0\u0251\x02\u104C" +
		"\u104B\x03\x02\x02\x02\u104C\u104D\x03\x02\x02\x02\u104D\u104E\x03\x02" +
		"\x02\x02\u104E\u1050\x05\u047C\u023F\x02\u104F\u1051\x05\u01EE\xF8\x02" +
		"\u1050\u104F\x03\x02\x02\x02\u1050\u1051\x03\x02\x02\x02\u1051\u1053\x03" +
		"\x02\x02\x02\u1052\u1048\x03\x02\x02\x02\u1052\u1049\x03\x02\x02\x02\u1053" +
		"\u01ED\x03\x02\x02\x02\u1054\u1056\x07\u0261\x02\x02\u1055\u1057\x07\x1D" +
		"\x02\x02\u1056\u1055\x03\x02\x02\x02\u1056\u1057\x03\x02\x02\x02\u1057" +
		"\u1058\x03\x02\x02\x02\u1058\u1059\x07\u027B\x02\x02\u1059\u01EF\x03\x02" +
		"\x02\x02\u105A\u105B\x06\xF9N\x02\u105B\u1064\x05\u01F2\xFA\x02\u105C" +
		"\u1064\x05\u01F8\xFD\x02\u105D\u1064\x05\u0204\u0103\x02\u105E\u1064\x05" +
		"\u0206\u0104\x02\u105F\u1064\x05\u0214\u010B\x02\u1060\u1064\x05\u0216" +
		"\u010C\x02\u1061\u1062\x06\xF9O\x02\u1062\u1064\x05\u0228\u0115\x02\u1063" +
		"\u105A\x03\x02\x02\x02\u1063\u105C\x03\x02\x02\x02\u1063\u105D\x03\x02" +
		"\x02\x02\u1063\u105E\x03\x02\x02\x02\u1063\u105F\x03\x02\x02\x02\u1063" +
		"\u1060\x03\x02\x02\x02\u1063\u1061\x03\x02\x02\x02\u1064\u01F1\x03\x02" +
		"\x02\x02\u1065\u1066\x07\u01AE\x02\x02\u1066\u1069\x07\u016E\x02\x02\u1067" +
		"\u1068\x06\xFAP\x02\u1068\u106A\x05\u03CC\u01E7\x02\u1069\u1067\x03\x02" +
		"\x02\x02\u1069\u106A\x03\x02\x02\x02\u106A\u106B\x03\x02\x02\x02\u106B" +
		"\u106C\x05\u01F4\xFB\x02\u106C\u01F3\x03\x02\x02\x02\u106D\u106E\x06\xFB" +
		"Q\x02\u106E\u1072\x05\u03EC\u01F7\x02\u106F\u1070\x06\xFBR\x02\u1070\u1072" +
		"\x05\u03EE\u01F8\x02\u1071\u106D\x03\x02\x02\x02\u1071\u106F\x03\x02\x02" +
		"\x02\u1072\u1073\x03\x02\x02\x02\u1073\u1074\x05\u01FA\xFE\x02\u1074\u109D" +
		"\x03\x02\x02\x02\u1075\u1076\x06\xFBS\x02\u1076\u1077\x05\u03FC\u01FF" +
		"\x02\u1077\u1078\x07\xA1\x02\x02\u1078\u1079\x07\u01BE\x02\x02\u1079\u107C" +
		"\x05\u047E\u0240\x02\u107A\u107B\x06\xFBT\x02\u107B\u107D\x05\u03F8\u01FD" +
		"\x02\u107C\u107A\x03\x02\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D\u1080" +
		"\x03\x02\x02\x02\u107E\u107F\x06\xFBU\x02\u107F\u1081\x05\u03F4\u01FB" +
		"\x02\u1080\u107E\x03\x02\x02\x02\u1080\u1081\x03\x02\x02\x02\u1081\u109D" +
		"\x03\x02\x02\x02\u1082\u1083\x06\xFBV\x02\u1083\u1084\x05\u03FC\u01FF" +
		"\x02\u1084\u1085\x05\u03F6\u01FC\x02\u1085\u109D\x03\x02\x02\x02\u1086" +
		"\u1087\x06\xFBW\x02\u1087\u1088\x05\u03FC\u01FF\x02\u1088\u1089\x07\u01E0" +
		"\x02\x02\u1089\u108D\x07\u02B3\x02\x02\u108A\u108E\x07\u01AD\x02\x02\u108B" +
		"\u108E\x07\xF1\x02\x02\u108C\u108E\x05\u022A\u0116\x02\u108D\u108A\x03" +
		"\x02\x02\x02\u108D\u108B\x03\x02\x02\x02\u108D\u108C\x03\x02\x02\x02\u108E" +
		"\u109D\x03\x02\x02\x02\u108F\u1090\x06\xFBX\x02\u1090\u1091\x05\u03FC" +
		"\u01FF\x02\u1091\u1094\x07\xA1\x02\x02\u1092\u1093\x07\u02AC\x02\x02\u1093" +
		"\u1095\x05\u0496\u024C\x02\u1094\u1092\x03\x02\x02\x02\u1094\u1095\x03" +
		"\x02\x02\x02\u1095\u1096\x03\x02\x02\x02\u1096\u1097\x07\u01BE\x02\x02" +
		"\u1097\u1098\x07\u02FE\x02\x02\u1098\u109A\x07\xFD\x02\x02\u1099\u109B" +
		"\x05\u03F4\u01FB\x02\u109A\u1099\x03\x02\x02\x02\u109A\u109B\x03\x02\x02" +
		"\x02\u109B\u109D\x03\x02\x02\x02\u109C\u1071\x03\x02\x02\x02\u109C\u1075" +
		"\x03\x02\x02\x02\u109C\u1082\x03\x02\x02\x02\u109C\u1086\x03\x02\x02\x02" +
		"\u109C\u108F\x03\x02\x02\x02\u109D\u01F5\x03\x02\x02\x02\u109E\u109F\x07" +
		"\u016E\x02\x02\u109F\u10A0\x05\u049E\u0250\x02\u10A0\u01F7\x03\x02\x02" +
		"\x02\u10A1\u10A2\x07\u01CD\x02\x02\u10A2\u10A6\x07\u016E\x02\x02\u10A3" +
		"\u10A4\x06\xFDY\x02\u10A4\u10A7\x05\u03CE\u01E8\x02\u10A5\u10A7\x03\x02" +
		"\x02\x02\u10A6\u10A3\x03\x02\x02\x02\u10A6\u10A5\x03\x02\x02\x02\u10A7" +
		"\u10A8\x03\x02\x02\x02\u10A8\u10A9\x05\u03EC\u01F7\x02\u10A9\u10AA\x05" +
		"\u01FC\xFF\x02\u10AA\u10AB\x05\u01FA\xFE\x02\u10AB\u01F9\x03\x02\x02\x02" +
		"\u10AC\u10AE\x06\xFEZ\x02\u10AD\u10AF\x05\u01FE\u0100\x02\u10AE\u10AD" +
		"\x03\x02\x02\x02\u10AE\u10AF\x03\x02\x02\x02\u10AF\u10B1\x03\x02\x02\x02" +
		"\u10B0\u10B2\x05\u0200\u0101\x02\u10B1\u10B0\x03\x02\x02\x02\u10B1\u10B2" +
		"\x03\x02\x02\x02\u10B2\u10B6\x03\x02\x02\x02\u10B3\u10B5\x05\u0202\u0102" +
		"\x02\u10B4\u10B3\x03\x02\x02\x02\u10B5\u10B8\x03\x02\x02\x02\u10B6\u10B4" +
		"\x03\x02\x02\x02\u10B6\u10B7\x03\x02\x02\x02\u10B7\u10BB\x03\x02\x02\x02" +
		"\u10B8\u10B6\x03\x02\x02\x02\u10B9\u10BB\x03\x02\x02\x02\u10BA\u10AC\x03" +
		"\x02\x02\x02\u10BA\u10B9\x03\x02\x02\x02\u10BB\u01FB\x03\x02\x02\x02\u10BC" +
		"\u10C0\x06\xFF[\x02\u10BD\u10BE\x07\u01E0\x02\x02\u10BE\u10BF\x07\u02B3" +
		"\x02\x02\u10BF\u10C1\x05\u022A\u0116\x02\u10C0\u10BD\x03\x02\x02\x02\u10C0" +
		"\u10C1\x03\x02\x02\x02\u10C1\u10C4\x03\x02\x02\x02\u10C2\u10C4\x03\x02" +
		"\x02\x02\u10C3\u10BC\x03\x02\x02\x02\u10C3\u10C2\x03\x02\x02\x02\u10C4" +
		"\u01FD\x03\x02\x02\x02\u10C5\u10C8\x07\u0261\x02\x02\u10C6\u10C9\x05\u0222" +
		"\u0112\x02\u10C7\u10C9\t1\x02\x02\u10C8\u10C6\x03\x02\x02\x02\u10C8\u10C7" +
		"\x03\x02\x02\x02\u10C9\u01FF\x03\x02\x02\x02\u10CA\u10D3\x07\u02AC\x02" +
		"\x02\u10CB\u10CC\x07\xD2\x02\x02\u10CC\u10D4\x05\u046E\u0238\x02\u10CD" +
		"\u10CE\x07\xD5\x02\x02\u10CE\u10D4\x05\u046E\u0238\x02\u10CF\u10D0\x07" +
		"\xD1\x02\x02\u10D0\u10D4\x05\u046E\u0238\x02\u10D1\u10D2\x07\xD6\x02\x02" +
		"\u10D2\u10D4\x05\u046E\u0238\x02\u10D3\u10CB\x03\x02\x02\x02\u10D3\u10CD" +
		"\x03\x02\x02\x02\u10D3\u10CF\x03\x02\x02\x02\u10D3\u10D1\x03\x02\x02\x02" +
		"\u10D4\u10D5\x03\x02\x02\x02\u10D5\u10D3\x03\x02\x02\x02\u10D5\u10D6\x03" +
		"\x02\x02\x02\u10D6\u0201\x03\x02\x02\x02\u10D7\u10D8\x07\x03\x02\x02\u10D8" +
		"\u10F9\t2\x02\x02\u10D9\u10F6\x07\xFD\x02\x02\u10DA\u10E1\x07\u01F4\x02" +
		"\x02\u10DB\u10DC\x07\u0211\x02\x02\u10DC\u10DD\x05\u0470\u0239\x02\u10DD" +
		"\u10DE\x07s\x02\x02\u10DE\u10E2\x03\x02\x02\x02\u10DF\u10E2\x07\xEC\x02" +
		"\x02\u10E0\u10E2\x07\u01E0\x02\x02\u10E1\u10DB\x03\x02\x02\x02\u10E1\u10DF" +
		"\x03\x02\x02\x02\u10E1\u10E0\x03\x02\x02\x02\u10E1\u10E2\x03\x02\x02\x02" +
		"\u10E2\u10F7\x03\x02\x02\x02\u10E3\u10E6\x07\u02E1\x02\x02\u10E4\u10E7" +
		"\x05\u0470\u0239\x02\u10E5\u10E7\x07\u01E0\x02\x02\u10E6\u10E4\x03\x02" +
		"\x02\x02\u10E6\u10E5\x03\x02\x02\x02\u10E7\u10F7\x03\x02\x02\x02\u10E8" +
		"\u10E9\x07\u02E2\x02\x02\u10E9\u10EE\x07\u0211\x02\x02\u10EA\u10EB\x05" +
		"\u0470\u0239\x02\u10EB\u10EC\x07s\x02\x02\u10EC\u10EF\x03\x02\x02\x02" +
		"\u10ED\u10EF\x07\u01E0\x02\x02\u10EE\u10EA\x03\x02\x02\x02\u10EE\u10ED" +
		"\x03\x02\x02\x02\u10EF\u10F7\x03\x02\x02\x02\u10F0\u10F1\x06\u0102\\\x02" +
		"\u10F1\u10F2\x07\u0261\x02\x02\u10F2\u10F4\x07m\x02\x02\u10F3\u10F5\t" +
		"3\x02\x02\u10F4\u10F3\x03\x02\x02\x02\u10F4\u10F5\x03\x02\x02\x02\u10F5" +
		"\u10F7\x03\x02\x02\x02\u10F6\u10DA\x03\x02\x02\x02\u10F6\u10E3\x03\x02" +
		"\x02\x02\u10F6\u10E8\x03\x02\x02\x02\u10F6\u10F0\x03\x02\x02\x02\u10F7" +
		"\u10F9\x03\x02\x02\x02\u10F8\u10D7\x03\x02\x02\x02\u10F8\u10D9\x03\x02" +
		"\x02\x02\u10F9\u0203\x03\x02\x02\x02\u10FA\u10FB\x07\u01E9\x02\x02\u10FB" +
		"\u10FE\x07\u016E\x02\x02\u10FC\u10FD\x06\u0103]\x02\u10FD\u10FF\x05\u03CC" +
		"\u01E7\x02\u10FE\u10FC\x03\x02\x02\x02\u10FE\u10FF\x03\x02\x02\x02\u10FF" +
		"\u1100\x03\x02\x02\x02\u1100\u1101\x05\u03EA\u01F6\x02\u1101\u0205\x03" +
		"\x02\x02\x02\u1102\u112D\x07\u0201\x02\x02\u1103\u1104\x06\u0104^\x02" +
		"\u1104\u1105\x05\u021C\u010F\x02\u1105\u1106\x07\u028F\x02\x02\u1106\u110A" +
		"\x05\u03EA\u01F6\x02\u1107\u1108\x07\u02AC\x02\x02\u1108\u1109\x07\u02B4" +
		"\x02\x02\u1109\u110B\x07\u024A\x02\x02\u110A\u1107\x03\x02\x02\x02\u110A" +
		"\u110B\x03\x02\x02\x02\u110B\u112E\x03\x02\x02\x02\u110C\u1112\x05\u021C" +
		"\u010F\x02\u110D\u110F\x07\u01AD\x02\x02\u110E\u1110\x07\u0106\x02\x02" +
		"\u110F\u110E\x03\x02\x02\x02\u110F\u1110\x03\x02\x02\x02\u1110\u1112\x03" +
		"\x02\x02\x02\u1111\u110C\x03\x02\x02\x02\u1111\u110D\x03\x02\x02\x02\u1112" +
		"\u1113\x03\x02\x02\x02\u1113\u1115\x07\u0245\x02\x02\u1114\u1116\x05\u021A" +
		"\u010E\x02\u1115\u1114\x03\x02\x02\x02\u1115\u1116\x03\x02\x02\x02\u1116" +
		"\u1117\x03\x02\x02\x02\u1117\u1118\x05\u0220\u0111\x02\u1118\u1119\x07" +
		"\u028F\x02\x02\u1119\u111B\x05\u0208\u0105\x02\u111A\u111C\x05\u0212\u010A" +
		"\x02\u111B\u111A\x03\x02\x02\x02\u111B\u111C\x03\x02\x02\x02\u111C\u111E" +
		"\x03\x02\x02\x02\u111D\u111F\x05\u020A\u0106\x02\u111E\u111D\x03\x02\x02" +
		"\x02\u111E\u111F\x03\x02\x02\x02\u111F\u1121\x03\x02\x02\x02\u1120\u1122" +
		"\x05\u0210\u0109\x02\u1121\u1120\x03\x02\x02\x02\u1121\u1122\x03\x02\x02" +
		"\x02\u1122\u112E\x03\x02\x02\x02\u1123\u1124\x07\u010B\x02\x02\u1124\u1125" +
		"\x07\u0245\x02\x02\u1125\u1126\x05\u03FC\u01FF\x02\u1126\u1127\x07\u028F" +
		"\x02\x02\u1127\u112B\x05\u0208\u0105\x02\u1128\u1129\x07\u02AC\x02\x02" +
		"\u1129\u112A\x07\u0201\x02\x02\u112A\u112C\x07\u024A\x02\x02\u112B\u1128" +
		"\x03\x02\x02\x02\u112B\u112C\x03\x02\x02\x02\u112C\u112E\x03\x02\x02\x02" +
		"\u112D\u1103\x03\x02\x02\x02\u112D\u1111\x03\x02\x02\x02\u112D\u1123\x03" +
		"\x02\x02\x02\u112E\u0207\x03\x02\x02\x02\u112F\u1130\x06\u0105_\x02\u1130" +
		"\u1134\x05\u03EC\u01F7\x02\u1131\u1132\x06\u0105`\x02\u1132\u1134\x05" +
		"\u03EA\u01F6\x02\u1133\u112F\x03\x02\x02\x02\u1133\u1131\x03\x02\x02\x02" +
		"\u1134\u0209\x03\x02\x02\x02\u1135\u1136\x06\u0106a\x02\u1136\u1138\x07" +
		"\u02AC\x02\x02\u1137\u1139\x05\u0226\u0114\x02\u1138\u1137\x03\x02\x02" +
		"\x02\u1139\u113A\x03\x02\x02\x02\u113A\u1138\x03\x02\x02\x02\u113A\u113B" +
		"\x03\x02\x02\x02\u113B\u1141\x03\x02\x02\x02\u113C\u113D\x06\u0106b\x02" +
		"\u113D\u113E\x07\u02AC\x02\x02\u113E\u113F\x07\u0201\x02\x02\u113F\u1141" +
		"\x07\u024A\x02\x02\u1140\u1135\x03\x02\x02\x02\u1140\u113C\x03\x02\x02" +
		"\x02\u1141\u020B\x03\x02\x02\x02\u1142\u1143\x07\u02B7\x02\x02\u1143\u1144" +
		"\x05\u022A\u0116\x02\u1144\u020D\x03\x02\x02\x02\u1145\u1146\x07\u02AC" +
		"\x02\x02\u1146\u114E\x07\u02B3\x02\x02\u1147\u114F\x05\u022A\u0116\x02" +
		"\u1148\u114A\x07\u01AD\x02\x02\u1149\u114B\x05\u020C\u0107\x02\u114A\u1149" +
		"\x03\x02\x02\x02\u114A\u114B\x03\x02\x02\x02\u114B\u114F\x03\x02\x02\x02" +
		"\u114C\u114F\x07\xF1\x02\x02\u114D\u114F\x07\u01E0\x02\x02\u114E\u1147" +
		"\x03\x02\x02\x02\u114E\u1148\x03\x02\x02\x02\u114E\u114C\x03\x02\x02\x02" +
		"\u114E\u114D\x03\x02\x02\x02\u114F\u020F\x03\x02\x02\x02\u1150\u1151\x07" +
		"\u01B1\x02\x02\u1151\u1153\x07\u016E\x02\x02\u1152\u1154\x05\u020E\u0108" +
		"\x02\u1153\u1152\x03\x02\x02\x02\u1153\u1154\x03\x02\x02\x02\u1154\u0211" +
		"\x03\x02\x02\x02\u1155\u1156\x06\u010Ac\x02\u1156\u1157\x05\u01FE\u0100" +
		"\x02\u1157\u0213\x03\x02\x02\x02\u1158\u1159\x07\u025E\x02\x02\u1159\u115A" +
		"\x07\u016E\x02\x02\u115A\u115B\x05\u03FC\u01FF\x02\u115B\u115C\x07\u028F" +
		"\x02\x02\u115C\u1164\x05\u03FC\u01FF\x02\u115D\u115E\x07\u0198\x02\x02" +
		"\u115E\u115F\x05\u03FC\u01FF\x02\u115F\u1160\x07\u028F\x02\x02\u1160\u1161" +
		"\x05\u03FC\u01FF\x02\u1161\u1163\x03\x02\x02\x02\u1162\u115D\x03\x02\x02" +
		"\x02\u1163\u1166\x03\x02\x02\x02\u1164\u1162\x03\x02\x02\x02\u1164\u1165" +
		"\x03\x02\x02\x02\u1165\u0215\x03\x02\x02\x02\u1166\u1164\x03\x02\x02\x02" +
		"\u1167\u1189\x07\u0265\x02\x02\u1168\u1169\x06\u010Cd\x02\u1169\u116A" +
		"\x05\u021C\u010F\x02\u116A\u116B\x07\u01FD\x02\x02\u116B\u116C\x05\u03EA" +
		"\u01F6\x02\u116C\u118A\x03\x02\x02\x02\u116D\u116E\x05\u021C\u010F\x02" +
		"\u116E\u116F\x05\u0218\u010D\x02\u116F\u1170\x07\u01FD\x02\x02\u1170\u1171" +
		"\x05\u03EA\u01F6\x02\u1171\u118A\x03\x02\x02\x02\u1172\u1174\x07\u01AD" +
		"\x02\x02\u1173\u1175\x07\u0106\x02\x02\u1174\u1173\x03\x02\x02\x02\u1174" +
		"\u1175\x03\x02\x02\x02\u1175\u1181\x03\x02\x02\x02\u1176\u1177\x06\u010C" +
		"e\x02\u1177\u1179\x07\u0245\x02\x02\u1178\u117A\x05\u021A\u010E\x02\u1179" +
		"\u1178\x03\x02\x02\x02\u1179\u117A\x03\x02\x02\x02\u117A\u117B\x03\x02" +
		"\x02\x02\u117B\u1182\x05\u0220\u0111\x02\u117C\u117D\x07\u0198\x02\x02" +
		"\u117D\u117E\x07\u0201\x02\x02\u117E\u117F\x07\u024A\x02\x02\u117F\u1180" +
		"\x07\u01FD\x02\x02\u1180\u1182\x05\u03EA\u01F6\x02\u1181\u1176\x03\x02" +
		"\x02\x02\u1181\u117C\x03\x02\x02\x02\u1182\u118A\x03\x02\x02\x02\u1183" +
		"\u1184\x07\u010B\x02\x02\u1184\u1185\x07\u0245\x02\x02\u1185\u1186\x05" +
		"\u03FC\u01FF\x02\u1186\u1187\x07\u01FD\x02\x02\u1187\u1188\x05\u03EA\u01F6" +
		"\x02\u1188\u118A\x03\x02\x02\x02\u1189\u1168\x03\x02\x02\x02\u1189\u116D" +
		"\x03\x02\x02\x02\u1189\u1172\x03\x02\x02\x02\u1189\u1183\x03\x02\x02\x02" +
		"\u118A\u0217\x03\x02\x02\x02\u118B\u118C\x06\u010Df\x02\u118C\u118E\x07" +
		"\u0245\x02\x02\u118D\u118F\x05\u021A\u010E\x02\u118E\u118D\x03\x02\x02" +
		"\x02\u118E\u118F\x03\x02\x02\x02\u118F\u1190\x03\x02\x02\x02\u1190\u119A" +
		"\x05\u0220\u0111\x02\u1191\u1197\x06\u010Dg\x02\u1192\u1194\x07\u0245" +
		"\x02\x02\u1193\u1195\x05\u021A\u010E\x02\u1194\u1193\x03\x02\x02\x02\u1194" +
		"\u1195\x03\x02\x02\x02\u1195\u1196\x03\x02\x02\x02\u1196\u1198\x05\u0220" +
		"\u0111\x02\u1197\u1192\x03\x02\x02\x02\u1197\u1198\x03\x02\x02\x02\u1198" +
		"\u119A\x03\x02\x02\x02\u1199\u118B\x03\x02\x02\x02\u1199\u1191\x03\x02" +
		"\x02\x02\u119A\u0219\x03\x02\x02\x02\u119B\u119C\t4\x02\x02\u119C\u021B" +
		"\x03\x02\x02\x02\u119D\u11A2\x05\u021E\u0110\x02\u119E\u119F\x07\u0198" +
		"\x02\x02\u119F\u11A1\x05\u021E\u0110\x02\u11A0\u119E\x03\x02\x02\x02\u11A1" +
		"\u11A4\x03\x02\x02\x02\u11A2\u11A0\x03\x02\x02\x02\u11A2\u11A3\x03\x02" +
		"\x02\x02\u11A3\u021D\x03\x02\x02\x02\u11A4\u11A2\x03\x02\x02\x02\u11A5" +
		"\u11B0\x06\u0110h\x02\u11A6\u11A8\x05\u049A\u024E\x02\u11A7\u11A9\x05" +
		"\u040E\u0208\x02\u11A8\u11A7\x03\x02\x02\x02\u11A8\u11A9\x03\x02\x02\x02" +
		"\u11A9\u11B1\x03\x02\x02\x02\u11AA\u11AE\x05\u049A\u024E\x02\u11AB\u11AF" +
		"\x07\u01A3\x02\x02\u11AC\u11AD\x07\u01A2\x02\x02\u11AD\u11AF\x05\u0496" +
		"\u024C\x02\u11AE\u11AB\x03\x02\x02\x02\u11AE\u11AC\x03\x02\x02\x02\u11AF" +
		"\u11B1\x03\x02\x02\x02\u11B0\u11A6\x03\x02\x02\x02\u11B0\u11AA\x03\x02" +
		"\x02\x02\u11B1\u11CF\x03\x02\x02\x02\u11B2\u11B4\t5\x02\x02\u11B3\u11B5" +
		"\x05\u040E\u0208\x02\u11B4\u11B3\x03\x02\x02\x02\u11B4\u11B5\x03\x02\x02" +
		"\x02\u11B5\u11CF\x03\x02\x02\x02\u11B6\u11CF\t6\x02\x02\u11B7\u11B8\x07" +
		"\u0201\x02\x02\u11B8\u11CF\x07\u024A\x02\x02\u11B9\u11BA\x07\u026F\x02" +
		"\x02\u11BA\u11CF\x07\u01D6\x02\x02\u11BB\u11BF\x07\u01CD\x02\x02\u11BC" +
		"\u11BD\x07\u0159\x02\x02\u11BD\u11C0\x07\u0156\x02\x02\u11BE\u11C0\t7" +
		"\x02\x02\u11BF\u11BC\x03\x02\x02\x02\u11BF\u11BE\x03\x02\x02\x02\u11BF" +
		"\u11C0\x03\x02\x02\x02\u11C0\u11CF\x03\x02\x02\x02\u11C1\u11C2\x07\u0226" +
		"\x02\x02\u11C2\u11CF\x07\u0156\x02\x02\u11C3\u11C4\x07\u011D\x02\x02\u11C4" +
		"\u11CF\t8\x02\x02\u11C5\u11C6\x07\u026F\x02\x02\u11C6\u11CF\x07\u0171" +
		"\x02\x02\u11C7\u11C9\x07\u01AE\x02\x02\u11C8\u11CA\x07\u012B\x02\x02\u11C9" +
		"\u11C8\x03\x02\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA\u11CF\x03\x02" +
		"\x02\x02\u11CB\u11CC\x06\u0110i\x02\u11CC\u11CD\t9\x02\x02\u11CD\u11CF" +
		"\x07\u02B3\x02\x02\u11CE\u11A5\x03\x02\x02\x02\u11CE\u11B2\x03\x02\x02" +
		"\x02\u11CE\u11B6\x03\x02\x02\x02\u11CE\u11B7\x03\x02\x02\x02\u11CE\u11B9" +
		"\x03\x02\x02\x02\u11CE\u11BB\x03\x02\x02\x02\u11CE\u11C1\x03\x02\x02\x02" +
		"\u11CE\u11C3\x03\x02\x02\x02\u11CE\u11C5\x03\x02\x02\x02\u11CE\u11C7\x03" +
		"\x02\x02\x02\u11CE\u11CB\x03\x02\x02\x02\u11CF\u021F\x03\x02\x02\x02\u11D0" +
		"\u11D3\x07\u018B\x02\x02\u11D1\u11D2\x07\u0197\x02\x02\u11D2\u11D4\x07" +
		"\u018B\x02\x02\u11D3\u11D1\x03\x02\x02\x02\u11D3\u11D4\x03\x02\x02\x02" +
		"\u11D4\u11E1\x03\x02\x02\x02\u11D5\u11D8\x05\u041C\u020F\x02\u11D6\u11D7" +
		"\x07\u0197\x02\x02\u11D7\u11D9\x07\u018B\x02\x02\u11D8\u11D6\x03\x02\x02" +
		"\x02\u11D8\u11D9\x03\x02\x02\x02\u11D9\u11E1\x03\x02\x02\x02\u11DA\u11E1" +
		"\x05\u0448\u0225\x02\u11DB\u11DC\x06\u0111j\x02\u11DC\u11DD\x05\u041C" +
		"\u020F\x02\u11DD\u11DE\x07\u0197\x02\x02\u11DE\u11DF\x05\u0448\u0225\x02" +
		"\u11DF\u11E1\x03\x02\x02\x02\u11E0\u11D0\x03\x02\x02\x02\u11E0\u11D5\x03" +
		"\x02\x02\x02\u11E0\u11DA\x03\x02\x02\x02\u11E0\u11DB\x03\x02\x02\x02\u11E1" +
		"\u0221\x03\x02\x02\x02\u11E2\u11E9\x05\u0224\u0113\x02\u11E3\u11E5\x07" +
		"\u01B0\x02\x02\u11E4\u11E3\x03\x02\x02\x02\u11E4\u11E5\x03\x02\x02\x02" +
		"\u11E5\u11E6\x03\x02\x02\x02\u11E6\u11E8\x05\u0224\u0113\x02\u11E7\u11E4" +
		"\x03\x02\x02\x02\u11E8\u11EB\x03\x02\x02\x02\u11E9\u11E7\x03\x02\x02\x02" +
		"\u11E9\u11EA\x03\x02\x02\x02\u11EA\u0223\x03\x02\x02\x02\u11EB\u11E9\x03" +
		"\x02\x02\x02\u11EC\u11ED\x07T\x02\x02\u11ED\u11F3\x05\u047E\u0240\x02" +
		"\u11EE\u11EF\x07\xAC\x02\x02\u11EF\u11F3\x05\u047E\u0240\x02\u11F0\u11F1" +
		"\x07\u014E\x02\x02\u11F1\u11F3\x05\u047E\u0240\x02\u11F2\u11EC\x03\x02" +
		"\x02\x02\u11F2\u11EE\x03\x02\x02\x02\u11F2\u11F0\x03\x02\x02\x02\u11F3" +
		"\u0225\x03\x02\x02\x02\u11F4\u11F5\x07\u0201\x02\x02\u11F5\u11FF\x07\u024A" +
		"\x02\x02\u11F6\u11F7\x07\xD2\x02\x02\u11F7\u11FF\x05\u046E\u0238\x02\u11F8" +
		"\u11F9\x07\xD5\x02\x02\u11F9\u11FF\x05\u046E\u0238\x02\u11FA\u11FB\x07" +
		"\xD1\x02\x02\u11FB\u11FF\x05\u046E\u0238\x02\u11FC\u11FD\x07\xD6\x02\x02" +
		"\u11FD\u11FF\x05\u046E\u0238\x02\u11FE\u11F4\x03\x02\x02\x02\u11FE\u11F6" +
		"\x03\x02\x02\x02\u11FE\u11F8\x03\x02\x02\x02\u11FE\u11FA\x03\x02\x02\x02" +
		"\u11FE\u11FC\x03\x02\x02\x02\u11FF\u0227\x03\x02\x02\x02\u1200\u1201\x07" +
		"\u026D\x02\x02\u1201\u1202\x07\u02B3\x02\x02\u1202\u1218\x05\u022A\u0116" +
		"\x02\u1203\u1204\x07\u026D\x02\x02\u1204\u1205\x07\u02B3\x02\x02\u1205" +
		"\u1218\t:\x02\x02\u1206\u1207\x07\u026D\x02\x02\u1207\u1208\x07\u01E0" +
		"\x02\x02\u1208\u120C\x07\u02B3\x02\x02\u1209\u120D\x05\u022A\u0116\x02" +
		"\u120A\u120D\x07\xF1\x02\x02\u120B\u120D\x07\u01AD\x02\x02\u120C\u1209" +
		"\x03\x02\x02\x02\u120C\u120A\x03\x02\x02\x02\u120C\u120B\x03\x02\x02\x02" +
		"\u120D\u120E\x03\x02\x02\x02\u120E\u120F\x07\u028F\x02\x02\u120F\u1218" +
		"\x05\u022A\u0116\x02\u1210\u1211\x07\u026D\x02\x02\u1211\u1212\x07\u02B3" +
		"\x02\x02\u1212\u1215\x07\u01AD\x02\x02\u1213\u1214\x07\u02B7\x02\x02\u1214" +
		"\u1216\x05\u022A\u0116\x02\u1215\u1213\x03\x02\x02\x02\u1215\u1216\x03" +
		"\x02\x02\x02\u1216\u1218\x03\x02\x02\x02\u1217\u1200\x03\x02\x02\x02\u1217" +
		"\u1203\x03\x02\x02\x02\u1217\u1206\x03\x02\x02\x02\u1217\u1210\x03\x02" +
		"\x02\x02\u1218\u0229\x03\x02\x02\x02\u1219\u121E\x05\u022C\u0117\x02\u121A" +
		"\u121B\x07\u0198\x02\x02\u121B\u121D\x05\u022C\u0117\x02\u121C\u121A\x03" +
		"\x02\x02\x02\u121D\u1220\x03\x02\x02\x02\u121E\u121C\x03\x02\x02\x02\u121E" +
		"\u121F\x03\x02\x02\x02\u121F\u022B\x03\x02\x02\x02\u1220\u121E\x03\x02" +
		"\x02\x02\u1221\u1225\x05\u049A\u024E\x02\u1222\u1223\x07\u01A2\x02\x02" +
		"\u1223\u1226\x05\u0496\u024C\x02\u1224\u1226\x07\u01A3\x02\x02\u1225\u1222" +
		"\x03\x02\x02\x02\u1225\u1224\x03\x02\x02\x02\u1225\u1226\x03\x02\x02\x02" +
		"\u1226\u022D\x03\x02\x02\x02\u1227\u1229\x07A\x02\x02\u1228\u122A\x05" +
		"\u0404\u0203\x02\u1229\u1228\x03\x02\x02\x02\u1229\u122A\x03\x02\x02\x02" +
		"\u122A\u122B\x03\x02\x02\x02\u122B\u122C\x07\u0289\x02\x02\u122C\u122F" +
		"\x05\u044A\u0226\x02\u122D\u122E\x06\u0118k\x02\u122E\u1230\x05\u0230" +
		"\u0119\x02\u122F\u122D\x03\x02\x02\x02\u122F\u1230\x03\x02\x02\x02\u1230" +
		"\u1253\x03\x02\x02\x02\u1231\u1232\x07\u01C5\x02\x02\u1232\u1233\x07\u0289" +
		"\x02\x02\u1233\u1237\x05\u044A\u0226\x02\u1234\u1236\x05\u0232\u011A\x02" +
		"\u1235\u1234\x03\x02\x02\x02\u1236\u1239\x03\x02\x02\x02\u1237\u1235\x03" +
		"\x02\x02\x02\u1237\u1238\x03\x02\x02\x02\u1238\u1253\x03\x02\x02\x02\u1239" +
		"\u1237\x03\x02\x02\x02\u123A\u123B\x07\v\x02\x02\u123B\u123C\x07\u0289" +
		"\x02\x02\u123C\u123E\x05\u044A\u0226\x02\u123D\u123F\t;\x02\x02\u123E" +
		"\u123D\x03\x02\x02\x02\u123E\u123F\x03\x02\x02\x02\u123F\u1253\x03\x02" +
		"\x02\x02\u1240\u1242\x07\u0248\x02\x02\u1241\u1243\x05\u0404\u0203\x02" +
		"\u1242\u1241\x03\x02\x02\x02\u1242\u1243\x03\x02\x02\x02\u1243\u1244\x03" +
		"\x02\x02\x02\u1244\u1245\x07\u0289\x02\x02\u1245\u1253\x05\u044A\u0226" +
		"\x02\u1246\u1248\x07\'\x02\x02\u1247\u1249\x05\u0404\u0203\x02\u1248\u1247" +
		"\x03\x02\x02\x02\u1248\u1249\x03\x02\x02\x02\u1249\u124A\x03\x02\x02\x02" +
		"\u124A\u124B\x07\u0289\x02\x02\u124B\u124F\x05\u044A\u0226\x02\u124C\u124E" +
		"\x05\u0234\u011B\x02\u124D\u124C\x03\x02\x02\x02\u124E\u1251\x03\x02\x02" +
		"\x02\u124F\u124D\x03\x02\x02\x02\u124F\u1250\x03\x02\x02\x02\u1250\u1253" +
		"\x03\x02\x02\x02\u1251\u124F\x03\x02\x02\x02\u1252\u1227\x03\x02\x02\x02" +
		"\u1252\u1231\x03\x02\x02\x02\u1252\u123A\x03\x02\x02\x02\u1252\u1240\x03" +
		"\x02\x02\x02\u1252\u1246\x03\x02\x02\x02\u1253\u022F\x03\x02\x02\x02\u1254" +
		"\u1255\x07\u0299\x02\x02\u1255\u1256\x07\u02C2\x02\x02\u1256\u1257\x07" +
		"\u0245\x02\x02\u1257\u125B\x05\u0464\u0233\x02\u1258\u1259\x07\u02AC\x02" +
		"\x02\u1259\u125A\x07\u017E\x02\x02\u125A\u125C\x07\u02C3\x02\x02\u125B" +
		"\u1258\x03\x02\x02\x02\u125B\u125C\x03\x02\x02\x02\u125C\u1262\x03\x02" +
		"\x02\x02\u125D\u125E\x07\u01E9\x02\x02\u125E\u125F\x07\u02C2\x02\x02\u125F" +
		"\u1260\x07\u0245\x02\x02\u1260\u1262\x05\u0464\u0233\x02\u1261\u1254\x03" +
		"\x02\x02\x02\u1261\u125D\x03\x02\x02\x02";
	private static readonly _serializedATNSegment10: string =
		"\u1262\u0231\x03\x02\x02\x02\u1263\u1264\x07\u01FC\x02\x02\u1264\u1267" +
		"\x077\x02\x02\u1265\u1267\t<\x02\x02\u1266\u1263\x03\x02\x02\x02\u1266" +
		"\u1265\x03\x02\x02\x02\u1267\u0233\x03\x02\x02\x02\u1268\u1269\t=\x02" +
		"\x02\u1269\u0235\x03\x02\x02\x02\u126A\u126B\x07\x1B\x02\x02\u126B\u126C" +
		"\x07\u0100\x02\x02\u126C\u126D\x05\u0462\u0232\x02\u126D\u126E\x071\x02" +
		"\x02\u126E\u126F\x05\u047C\u023F\x02\u126F\u1281\x03\x02\x02\x02\u1270" +
		"\u1271\x07\x1B\x02\x02\u1271\u1272\x07\u02B8\x02\x02\u1272\u1281\x05\u0486" +
		"\u0244\x02\u1273\u1274\x076\x02\x02\u1274\u1275\x07\u0100\x02\x02\u1275" +
		"\u1281\x05\u0458\u022D\x02\u1276\u1277\x076\x02\x02\u1277\u1278\x07\u02B8" +
		"\x02\x02\u1278\u127D\x05\u045A\u022E\x02\u1279\u127A\x07\u0198\x02\x02" +
		"\u127A\u127C\x05\u045A\u022E\x02\u127B\u1279\x03\x02\x02\x02\u127C\u127F" +
		"\x03\x02\x02\x02\u127D\u127B\x03\x02\x02\x02\u127D\u127E\x03\x02\x02\x02" +
		"\u127E\u1281\x03\x02\x02\x02\u127F\u127D\x03\x02\x02\x02\u1280\u126A\x03" +
		"\x02\x02\x02\u1280\u1270\x03\x02\x02\x02\u1280\u1273\x03\x02\x02\x02\u1280" +
		"\u1276\x03\x02\x02\x02\u1281\u0237\x03\x02\x02\x02\u1282\u1283\x07\u026D" +
		"\x02\x02\u1283\u1284\x05\u023A\u011E\x02\u1284\u0239\x03\x02\x02\x02\u1285" +
		"\u1286\x05\u0244\u0123\x02\u1286\u1287\x05\u0242\u0122\x02\u1287\u12BE" +
		"\x03\x02\x02\x02\u1288\u1289\x07\u015D\x02\x02\u1289\u12BE\x05\u023C\u011F" +
		"\x02\u128A\u128B\x05\u04A2\u0252\x02\u128B\u128C\x05\u024A\u0126\x02\u128C" +
		"\u12BE\x03\x02\x02\x02\u128D\u1290\x07\xFD\x02\x02\u128E\u128F\x07\u01FC" +
		"\x02\x02\u128F\u1291\x05\u03FC\u01FF\x02\u1290\u128E\x03\x02\x02\x02\u1290" +
		"\u1291\x03\x02\x02\x02\u1291\u1292\x03\x02\x02\x02\u1292\u12AD\x05\u04A0" +
		"\u0251\x02\u1293\u1295\x05\u047E\u0240\x02\u1294\u1296\x05\u03F8\u01FD" +
		"\x02\u1295\u1294\x03\x02\x02\x02\u1295\u1296\x03\x02\x02\x02\u1296\u1298" +
		"\x03\x02\x02\x02\u1297\u1299\x05\u03F4\u01FB\x02\u1298\u1297\x03\x02\x02" +
		"\x02\u1298\u1299\x03\x02\x02\x02\u1299\u12AE\x03\x02\x02\x02\u129A\u129C" +
		"\x05\u047E\u0240\x02\u129B\u129D\x05\u03F8\u01FD\x02\u129C\u129B\x03\x02" +
		"\x02\x02\u129C\u129D\x03\x02\x02\x02\u129D\u129F\x03\x02\x02\x02\u129E" +
		"\u12A0\x05\u03F4\u01FB\x02\u129F\u129E\x03\x02\x02\x02\u129F\u12A0\x03" +
		"\x02\x02\x02\u12A0\u12AE\x03\x02\x02\x02\u12A1\u12A2\x06\u011El\x02\u12A2" +
		"\u12A3\x07\xF5\x02\x02\u12A3\u12A4\x07\u019B\x02\x02\u12A4\u12A5\x05\u047E" +
		"\u0240\x02\u12A5\u12A6\x07\u019C\x02\x02\u12A6\u12AE\x03\x02\x02\x02\u12A7" +
		"\u12A8\x06\u011Em\x02\u12A8\u12A9\x07\xFD\x02\x02\u12A9\u12AA\x07\u019B" +
		"\x02\x02\u12AA\u12AB\x05\u047E\u0240\x02\u12AB\u12AC\x07\u019C\x02\x02" +
		"\u12AC\u12AE\x03\x02\x02\x02\u12AD\u1293\x03\x02\x02\x02\u12AD\u129A\x03" +
		"\x02\x02\x02\u12AD\u12A1\x03\x02\x02\x02\u12AD\u12A7\x03\x02\x02\x02\u12AE" +
		"\u12BE\x03\x02\x02\x02\u12AF\u12B0\x06\u011En\x02\u12B0\u12B3\x07\xFD" +
		"\x02\x02\u12B1\u12B2\x07\u01FC\x02\x02\u12B2\u12B4\x05\u03FC\u01FF\x02" +
		"\u12B3\u12B1\x03\x02\x02\x02\u12B3\u12B4\x03\x02\x02\x02\u12B4\u12B5\x03" +
		"\x02\x02\x02\u12B5\u12B6\x07\u028F\x02\x02\u12B6\u12B8\x07\u02FE\x02\x02" +
		"\u12B7\u12B9\x05\u03F8\u01FD\x02\u12B8\u12B7\x03\x02\x02\x02\u12B8\u12B9" +
		"\x03\x02\x02\x02\u12B9\u12BB\x03\x02\x02\x02\u12BA\u12BC\x05\u03F4\u01FB" +
		"\x02\u12BB\u12BA\x03\x02\x02\x02\u12BB\u12BC\x03\x02\x02\x02\u12BC\u12BE" +
		"\x03\x02\x02\x02\u12BD\u1285\x03\x02\x02\x02\u12BD\u1288\x03\x02\x02\x02" +
		"\u12BD\u128A\x03\x02\x02\x02\u12BD\u128D\x03\x02\x02\x02\u12BD\u12AF\x03" +
		"\x02\x02\x02\u12BE\u023B\x03\x02\x02\x02\u12BF\u12C1\x05\u023E\u0120\x02" +
		"\u12C0\u12C2\x05\u0240\u0121\x02\u12C1\u12C0\x03\x02\x02\x02\u12C1\u12C2" +
		"\x03\x02\x02\x02\u12C2\u12C9\x03\x02\x02\x02\u12C3\u12C6\x05\u0240\u0121" +
		"\x02\u12C4\u12C5\x07\u0198\x02\x02\u12C5\u12C7\x05\u023E\u0120\x02\u12C6" +
		"\u12C4\x03\x02\x02\x02\u12C6\u12C7\x03\x02\x02\x02\u12C7\u12C9\x03\x02" +
		"\x02\x02\u12C8\u12BF\x03\x02\x02\x02\u12C8\u12C3\x03\x02\x02\x02\u12C9" +
		"\u023D\x03\x02\x02\x02\u12CA\u12CB\x07\u0258\x02\x02\u12CB\u12CC\t)\x02" +
		"\x02\u12CC\u023F\x03\x02\x02\x02\u12CD\u12CE\x07\xAB\x02\x02\u12CE\u12D4" +
		"\x07\xB3\x02\x02\u12CF\u12D0\x07\u011C\x02\x02\u12D0\u12D5\x07\u0258\x02" +
		"\x02\u12D1\u12D2\x07\u0258\x02\x02\u12D2\u12D5\t>\x02\x02\u12D3\u12D5" +
		"\x07\u0135\x02\x02\u12D4\u12CF\x03\x02\x02\x02\u12D4\u12D1\x03\x02\x02" +
		"\x02\u12D4\u12D3\x03\x02\x02\x02\u12D5\u0241\x03\x02\x02\x02\u12D6\u12D7" +
		"\x07\u0198\x02\x02\u12D7\u12D9\x05\u0246\u0124\x02\u12D8\u12D6\x03\x02" +
		"\x02\x02\u12D9\u12DC\x03\x02\x02\x02\u12DA\u12D8\x03\x02\x02\x02\u12DA" +
		"\u12DB\x03\x02\x02\x02\u12DB\u0243\x03\x02\x02\x02\u12DC\u12DA\x03\x02" +
		"\x02\x02\u12DD\u12DE\x05\u02E4\u0173\x02\u12DE\u12DF\x05\u04A0\u0251\x02" +
		"\u12DF\u12E0\x05\u024E\u0128\x02\u12E0\u12F7\x03\x02\x02\x02\u12E1\u12F7" +
		"\x05\u03E0\u01F1\x02\u12E2\u12E3\x05\u02E0\u0171\x02\u12E3\u12E4\x05\u04A0" +
		"\u0251\x02\u12E4\u12E5\x05\u029E\u0150\x02\u12E5\u12F7\x03\x02\x02\x02" +
		"\u12E6\u12E7\x05\u0248\u0125\x02\u12E7\u12E8\x05\u04A0\u0251\x02\u12E8" +
		"\u12E9\x05\u024E\u0128\x02\u12E9\u12F7\x03\x02\x02\x02\u12EA\u12F4\x07" +
		"\xE8\x02\x02\u12EB\u12EC\x05\u04A0\u0251\x02\u12EC\u12ED\x05\u029E\u0150" +
		"\x02\u12ED\u12F5\x03\x02\x02\x02\u12EE\u12F0\x05\u03A2\u01D2\x02\u12EF" +
		"\u12F1\x05\u03D4\u01EB\x02\u12F0\u12EF\x03\x02\x02\x02\u12F0\u12F1\x03" +
		"\x02\x02\x02\u12F1\u12F5\x03\x02\x02\x02\u12F2\u12F3\x06\u0123o\x02\u12F3" +
		"\u12F5\x07\u01E0\x02\x02\u12F4\u12EB\x03\x02\x02\x02\u12F4\u12EE\x03\x02" +
		"\x02\x02\u12F4\u12F2\x03\x02\x02\x02\u12F5\u12F7\x03\x02\x02\x02\u12F6" +
		"\u12DD\x03\x02\x02\x02\u12F6\u12E1\x03\x02\x02\x02\u12F6\u12E2\x03\x02" +
		"\x02\x02\u12F6\u12E6\x03\x02\x02\x02\u12F6\u12EA\x03\x02\x02\x02\u12F7" +
		"\u0245\x03\x02\x02\x02\u12F8\u12F9\x05\u04A2\u0252\x02\u12F9\u12FA\x05" +
		"\u02E4\u0173\x02\u12FA\u12FB\x05\u04A0\u0251\x02\u12FB\u12FC\x05\u024E" +
		"\u0128\x02\u12FC\u12FF\x03\x02\x02\x02\u12FD\u12FF\x05\u0244\u0123\x02" +
		"\u12FE\u12F8\x03\x02\x02\x02\u12FE\u12FD\x03\x02\x02\x02\u12FF\u0247\x03" +
		"\x02\x02\x02\u1300\u1302\x07\u01A4\x02\x02\u1301\u1303\x05\u04A6\u0254" +
		"\x02\u1302\u1301\x03\x02\x02\x02\u1302\u1303\x03\x02\x02\x02\u1303\u1304" +
		"\x03\x02\x02\x02\u1304\u1305\x05\u02E4\u0173\x02\u1305\u0249\x03\x02\x02" +
		"\x02\u1306\u1307\x05\u024C\u0127\x02\u1307\u1308\x05\u0242\u0122\x02\u1308" +
		"\u130C\x03\x02\x02\x02\u1309\u130A\x07\u015D\x02\x02\u130A\u130C\x05\u023C" +
		"\u011F\x02\u130B\u1306\x03\x02\x02\x02\u130B\u1309\x03\x02\x02\x02\u130C" +
		"\u024B\x03\x02\x02\x02\u130D\u130E\x05\u02E4\u0173\x02\u130E\u130F\x05" +
		"\u04A0\u0251\x02\u130F\u1310\x05\u024E\u0128\x02\u1310\u024D\x03\x02\x02" +
		"\x02\u1311\u1316\x05\u029E\u0150\x02\u1312\u1316\t?\x02\x02\u1313\u1314" +
		"\x06\u0128p\x02\u1314\u1316\t@\x02\x02\u1315\u1311\x03\x02\x02\x02\u1315" +
		"\u1312\x03\x02\x02\x02\u1315\u1313\x03\x02\x02\x02\u1316\u024F\x03\x02" +
		"\x02\x02\u1317\u13F3\x07\u026F\x02\x02\u1318\u1319\x06\u0129q\x02\u1319" +
		"\u13F4\x07D\x02\x02\u131A\u131C\x07\u01D6\x02\x02\u131B\u131D\x05\u0400" +
		"\u0201\x02\u131C\u131B\x03\x02\x02\x02\u131C\u131D\x03\x02\x02\x02\u131D" +
		"\u13F4\x03\x02\x02\x02\u131E\u1320\x05\u0252\u012A\x02\u131F\u131E\x03" +
		"\x02\x02\x02\u131F\u1320\x03\x02\x02\x02\u1320\u1321\x03\x02\x02\x02\u1321" +
		"\u1323\x07\u0156\x02\x02\u1322\u1324\x05\u0258\u012D\x02\u1323\u1322\x03" +
		"\x02\x02\x02\u1323\u1324\x03\x02\x02\x02\u1324\u1326\x03\x02\x02\x02\u1325" +
		"\u1327\x05\u0400\u0201\x02\u1326\u1325\x03\x02\x02\x02\u1326\u1327\x03" +
		"\x02\x02\x02\u1327\u13F4\x03\x02\x02\x02\u1328\u132A\x07\x92\x02\x02\u1329" +
		"\u1328\x03\x02\x02\x02\u1329\u132A\x03\x02\x02\x02\u132A\u132B\x03\x02" +
		"\x02\x02\u132B\u132D\x07\u015E\x02\x02\u132C\u132E\x05\u0258\u012D\x02" +
		"\u132D\u132C\x03\x02\x02\x02\u132D\u132E\x03\x02\x02\x02\u132E\u1330\x03" +
		"\x02\x02\x02\u132F\u1331\x05\u0400\u0201\x02\u1330\u132F\x03\x02\x02\x02" +
		"\u1330\u1331\x03\x02\x02\x02\u1331\u13F4\x03\x02\x02\x02\u1332\u1334\x07" +
		"\x88\x02\x02\u1333\u1335\x05\u0258\u012D\x02\u1334\u1333\x03\x02\x02\x02" +
		"\u1334\u1335\x03\x02\x02\x02\u1335\u1337\x03\x02\x02\x02\u1336\u1338\x05" +
		"\u0400\u0201\x02\u1337\u1336\x03\x02\x02\x02\u1337\u1338\x03\x02\x02\x02" +
		"\u1338\u13F4\x03\x02\x02\x02\u1339\u133A\x07\u0289\x02\x02\u133A\u133C" +
		"\x07\u0149\x02\x02\u133B\u133D\x05\u0258\u012D\x02\u133C\u133B\x03\x02" +
		"\x02\x02\u133C\u133D\x03\x02\x02\x02\u133D\u133F\x03\x02\x02\x02\u133E" +
		"\u1340\x05\u0400\u0201\x02\u133F\u133E\x03\x02\x02\x02\u133F\u1340\x03" +
		"\x02\x02\x02\u1340\u13F4\x03\x02\x02\x02\u1341\u1342\x07\x1E\x02\x02\u1342" +
		"\u1344\x07\u0156\x02\x02\u1343\u1345\x05\u0258\u012D\x02\u1344\u1343\x03" +
		"\x02\x02\x02\u1344\u1345\x03\x02\x02\x02\u1345\u1347\x03\x02\x02\x02\u1346" +
		"\u1348\x05\u0400\u0201\x02\u1347\u1346\x03\x02\x02\x02\u1347\u1348\x03" +
		"\x02\x02\x02\u1348\u13F4\x03\x02\x02\x02\u1349\u13F4\x07\u0101\x02\x02" +
		"\u134A\u134D\x07\x82\x02\x02\u134B\u134E\x05\u0440\u0221\x02\u134C\u134E" +
		"\x07\u01AD\x02\x02\u134D\u134B\x03\x02\x02\x02\u134D\u134C\x03\x02\x02" +
		"\x02\u134E\u134F\x03\x02\x02\x02\u134F\u13F4\tA\x02\x02\u1350\u1352\x05" +
		"\u0252\u012A\x02\u1351\u1350\x03\x02\x02\x02\u1351\u1352\x03\x02\x02\x02" +
		"\u1352\u1353\x03\x02\x02\x02\u1353\u1354\x07\\\x02\x02\u1354\u1355\tB" +
		"\x02\x02\u1355\u1357\x05\u0448\u0225\x02\u1356\u1358\x05\u0258\u012D\x02" +
		"\u1357\u1356\x03\x02\x02\x02\u1357\u1358\x03\x02\x02\x02\u1358\u135A\x03" +
		"\x02\x02\x02\u1359\u135B\x05\u0400\u0201\x02\u135A\u1359\x03\x02\x02\x02" +
		"\u135A\u135B\x03\x02\x02\x02\u135B\u13F4\x03\x02\x02\x02\u135C\u135D\t" +
		",\x02\x02\u135D\u13F4\x07\xB9\x02\x02\u135E\u1365\x07/\x02\x02\u135F\u1366" +
		"\x07\x9F\x02\x02\u1360\u1361\x07\u0149\x02\x02\u1361\u1363\x05\u0254\u012B" +
		"\x02\u1362\u1364\x05\u0308\u0185\x02\u1363\u1362\x03\x02\x02\x02\u1363" +
		"\u1364\x03\x02\x02\x02\u1364\u1366\x03\x02\x02\x02\u1365\u135F\x03\x02" +
		"\x02\x02\u1365\u1360\x03\x02\x02\x02\u1366\u13F4\x03\x02\x02\x02\u1367" +
		"\u1368\tC\x02\x02\u1368\u136B\x07\x88\x02\x02\u1369\u136A\x07\u0214\x02" +
		"\x02\u136A\u136C\x05\u047E\u0240\x02\u136B\u1369\x03\x02\x02\x02\u136B" +
		"\u136C\x03\x02\x02\x02\u136C\u136F\x03\x02\x02\x02\u136D\u136E\x07\u01FD" +
		"\x02\x02\u136E\u1370\x05\u0472\u023A\x02\u136F\u136D\x03\x02\x02\x02\u136F" +
		"\u1370\x03\x02\x02\x02\u1370\u1372\x03\x02\x02\x02\u1371\u1373\x05\u0120" +
		"\x91\x02\u1372\u1371\x03\x02\x02\x02\u1372\u1373\x03\x02\x02\x02\u1373" +
		"\u1375\x03\x02\x02\x02\u1374\u1376\x05\u0308\u0185\x02\u1375\u1374\x03" +
		"\x02\x02\x02\u1375\u1376\x03\x02\x02\x02\u1376\u13F4\x03\x02\x02\x02\u1377" +
		"\u1378\x06\u0129r\x02\u1378\u137A\x07\x8C\x02\x02\u1379\u1377\x03\x02" +
		"\x02\x02\u1379\u137A\x03\x02\x02\x02\u137A\u137B\x03\x02\x02\x02\u137B" +
		"\u137C\tD\x02\x02\u137C\u137D\x05\u0256\u012C\x02\u137D\u137F\x05\u0448" +
		"\u0225\x02\u137E\u1380\x05\u0258\u012D\x02\u137F\u137E\x03\x02\x02\x02" +
		"\u137F\u1380\x03\x02\x02\x02\u1380\u1382\x03\x02\x02\x02\u1381\u1383\x05" +
		"\u0162\xB2\x02\u1382\u1381\x03\x02\x02\x02\u1382\u1383\x03\x02\x02\x02" +
		"\u1383\u13F4\x03\x02\x02\x02\u1384\u1386\x07\u014A\x02\x02\u1385\u1384" +
		"\x03\x02\x02\x02\u1385\u1386\x03\x02\x02\x02\u1386\u1387\x03\x02\x02\x02" +
		"\u1387\u13F4\x07\x83\x02\x02\u1388\u1389\x07\u01CC\x02\x02\u1389\u138A" +
		"\x07\u019B\x02\x02\u138A\u138B\x07\u018B\x02\x02\u138B\u138C\x07\u019C" +
		"\x02\x02\u138C\u13F4\tE\x02\x02\u138D\u138F\x07\u0173\x02\x02\u138E\u1390" +
		"\x05\u0120\x91\x02\u138F\u138E\x03\x02\x02\x02\u138F\u1390\x03\x02\x02" +
		"\x02\u1390\u13F4\x03\x02\x02\x02\u1391\u1393\x07\x85\x02\x02\u1392\u1394" +
		"\x05\u0120\x91\x02\u1393\u1392\x03\x02\x02\x02\u1393\u1394\x03\x02\x02" +
		"\x02\u1394\u13F4\x03\x02\x02\x02\u1395\u13F4\x07\u010A\x02\x02\u1396\u139F" +
		"\x07\u0109\x02\x02\u1397\u139C\x05\u025A\u012E\x02\u1398\u1399\x07\u0198" +
		"\x02\x02\u1399\u139B\x05\u025A\u012E\x02\u139A\u1398\x03\x02\x02\x02\u139B" +
		"\u139E\x03\x02\x02\x02\u139C\u139A\x03\x02\x02\x02\u139C\u139D\x03\x02" +
		"\x02\x02\u139D\u13A0\x03\x02\x02\x02\u139E\u139C\x03\x02\x02\x02\u139F" +
		"\u1397\x03\x02\x02\x02\u139F\u13A0\x03\x02\x02\x02\u13A0\u13A4\x03\x02" +
		"\x02\x02\u13A1\u13A2\x07\u01FC\x02\x02\u13A2\u13A3\x07\u010D\x02\x02\u13A3" +
		"\u13A5\x07\u017E\x02\x02\u13A4\u13A1\x03\x02\x02\x02\u13A4\u13A5\x03\x02" +
		"\x02\x02\u13A5\u13A7\x03\x02\x02\x02\u13A6\u13A8\x05\u0120\x91\x02\u13A7" +
		"\u13A6\x03\x02\x02\x02\u13A7\u13A8\x03\x02\x02\x02\u13A8\u13F4\x03\x02" +
		"\x02\x02\u13A9\u13AB\x05\u04A2\u0252\x02\u13AA\u13A9\x03\x02\x02\x02\u13AA" +
		"\u13AB\x03\x02\x02\x02\u13AB\u13AC\x03\x02\x02\x02\u13AC\u13AE\tF\x02" +
		"\x02\u13AD\u13AF\x05\u0400\u0201\x02\u13AE\u13AD\x03\x02\x02\x02\u13AE" +
		"\u13AF\x03\x02\x02\x02\u13AF\u13F4\x03\x02\x02\x02\u13B0\u13B2\x07\x92" +
		"\x02\x02\u13B1\u13B0\x03\x02\x02\x02\u13B1\u13B2\x03\x02\x02\x02\u13B2" +
		"\u13B3\x03\x02\x02\x02\u13B3\u13F4\x07\u0108\x02\x02\u13B4\u13B6\x05\u02F0" +
		"\u0179\x02\u13B5\u13B7\x05\u0400\u0201\x02\u13B6\u13B5\x03\x02\x02\x02" +
		"\u13B6\u13B7\x03\x02\x02\x02\u13B7\u13F4\x03\x02\x02\x02\u13B8\u13BA\x07" +
		"Y\x02\x02\u13B9\u13BB\x05\u0400\u0201\x02\u13BA\u13B9\x03\x02\x02\x02" +
		"\u13BA\u13BB\x03\x02\x02\x02\u13BB\u13F4\x03\x02\x02\x02\u13BC\u13BD\x06" +
		"\u0129s\x02\u13BD\u13F4\x07j\x02\x02\u13BE\u13F4\x07\u0106\x02\x02\u13BF" +
		"\u13C2\x07\x9C\x02\x02\u13C0\u13C1\x07\u01FC\x02\x02\u13C1\u13C3\x05\u03FC" +
		"\u01FF\x02\u13C2\u13C0\x03\x02\x02\x02\u13C2\u13C3\x03\x02\x02\x02\u13C3" +
		"\u13F4\x03\x02\x02\x02\u13C4\u13C5\x07\x9C\x02\x02\u13C5\u13C6\x07\u01FC" +
		"\x02\x02\u13C6\u13C7\x05\u03FC\u01FF\x02\u13C7\u13C8\x07\u029C\x02\x02" +
		"\u13C8\u13C9\x05\u03EA\u01F6\x02\u13C9\u13F4\x03\x02\x02\x02\u13CA\u13CB" +
		"\x07\xBB\x02\x02\u13CB\u13F4\x07\u0149\x02\x02\u13CC\u13E1\x07\u01CD\x02" +
		"\x02\u13CD\u13CF\x07\u01D5\x02\x02\u13CE\u13D0\x05\u03CE\u01E8\x02\u13CF" +
		"\u13CE\x03\x02\x02\x02\u13CF\u13D0\x03\x02\x02\x02\u13D0\u13D1\x03\x02" +
		"\x02\x02\u13D1\u13E2\x05\u041C\u020F\x02\u13D2\u13D3\x07\x87\x02\x02\u13D3" +
		"\u13E2\x05\u0438\u021D\x02\u13D4\u13D5\x07\u0166\x02\x02\u13D5\u13E2\x05" +
		"\u0424\u0213\x02\u13D6\u13D7\x07\u0254\x02\x02\u13D7\u13E2\x05\u0420\u0211" +
		"\x02\u13D8\u13D9\x07\u0289\x02\x02\u13D9\u13E2\x05\u0448\u0225\x02\u13DA" +
		"\u13DB\x07\u0291\x02\x02\u13DB\u13E2\x05\u0428\u0215\x02\u13DC\u13DD\x07" +
		"\u0171\x02\x02\u13DD\u13E2\x05\u042C\u0217\x02\u13DE\u13DF\x06\u0129t" +
		"\x02\u13DF\u13E0\x07\u016E\x02\x02\u13E0\u13E2\x05\u03FC\u01FF\x02\u13E1" +
		"\u13CD\x03\x02\x02\x02\u13E1\u13D2\x03\x02\x02\x02\u13E1\u13D4\x03\x02" +
		"\x02\x02\u13E1\u13D6\x03\x02\x02\x02\u13E1\u13D8\x03\x02\x02\x02\u13E1" +
		"\u13DA\x03\x02\x02\x02\u13E1\u13DC\x03\x02\x02\x02\u13E1\u13DE\x03\x02" +
		"\x02\x02\u13E2\u13F4\x03\x02\x02\x02\u13E3\u13E4\x07\u0254\x02\x02\u13E4" +
		"\u13E6\x07\u0149\x02\x02\u13E5\u13E7\x05\u0400\u0201\x02\u13E6\u13E5\x03" +
		"\x02\x02\x02\u13E6\u13E7\x03\x02\x02\x02\u13E7\u13F4\x03\x02\x02\x02\u13E8" +
		"\u13E9\x07\u0166\x02\x02\u13E9\u13EB\x07\u0149\x02\x02\u13EA\u13EC\x05" +
		"\u0400\u0201\x02\u13EB\u13EA\x03\x02\x02\x02\u13EB\u13EC\x03\x02\x02\x02" +
		"\u13EC\u13F4\x03\x02\x02\x02\u13ED\u13EE\x07\u0254\x02\x02\u13EE\u13EF" +
		"\x07X\x02\x02\u13EF\u13F4\x05\u0420\u0211\x02\u13F0\u13F1\x07\u0166\x02" +
		"\x02\u13F1\u13F2\x07X\x02\x02\u13F2\u13F4\x05\u0424\u0213\x02\u13F3\u1318" +
		"\x03\x02\x02\x02\u13F3\u131A\x03\x02\x02\x02\u13F3\u131F\x03\x02\x02\x02" +
		"\u13F3\u1329\x03\x02\x02\x02\u13F3\u1332\x03\x02\x02\x02\u13F3\u1339\x03" +
		"\x02\x02\x02\u13F3\u1341\x03\x02\x02\x02\u13F3\u1349\x03\x02\x02\x02\u13F3" +
		"\u134A\x03\x02\x02\x02\u13F3\u1351\x03\x02\x02\x02\u13F3\u135C\x03\x02" +
		"\x02\x02\u13F3\u135E\x03\x02\x02\x02\u13F3\u1367\x03\x02\x02\x02\u13F3" +
		"\u1379\x03\x02\x02\x02\u13F3\u1385\x03\x02\x02\x02\u13F3\u1388\x03\x02" +
		"\x02\x02\u13F3\u138D\x03\x02\x02\x02\u13F3\u1391\x03\x02\x02\x02\u13F3" +
		"\u1395\x03\x02\x02\x02\u13F3\u1396\x03\x02\x02\x02\u13F3\u13AA\x03\x02" +
		"\x02\x02\u13F3\u13B1\x03\x02\x02\x02\u13F3\u13B4\x03\x02\x02\x02\u13F3" +
		"\u13B8\x03\x02\x02\x02\u13F3\u13BC\x03\x02\x02\x02\u13F3\u13BE\x03\x02" +
		"\x02\x02\u13F3\u13BF\x03\x02\x02\x02\u13F3\u13C4\x03\x02\x02\x02\u13F3" +
		"\u13CA\x03\x02\x02\x02\u13F3\u13CC\x03\x02\x02\x02\u13F3\u13E3\x03\x02" +
		"\x02\x02\u13F3\u13E8\x03\x02\x02\x02\u13F3\u13ED\x03\x02\x02\x02\u13F3" +
		"\u13F0\x03\x02\x02\x02\u13F4\u0251\x03\x02\x02\x02\u13F5\u13FC\x07\x92" +
		"\x02\x02\u13F6\u13F7\x06\u012Au\x02\u13F7\u13F9\x07\x8C\x02\x02\u13F8" +
		"\u13FA\x07\x92\x02\x02\u13F9\u13F8\x03\x02\x02\x02\u13F9\u13FA\x03\x02" +
		"\x02\x02\u13FA\u13FC\x03\x02\x02\x02\u13FB\u13F5\x03\x02\x02\x02\u13FB" +
		"\u13F6\x03\x02\x02\x02\u13FC\u0253\x03\x02\x02\x02\u13FD\u13FF\x06\u012B" +
		"v\x02\u13FE\u1400\x07\u023E\x02\x02\u13FF\u13FE\x03\x02\x02\x02\u13FF" +
		"\u1400\x03\x02\x02\x02\u1400\u1403\x03\x02\x02\x02\u1401\u1403\x03\x02" +
		"\x02\x02\u1402\u13FD\x03\x02\x02\x02\u1402\u1401\x03\x02\x02\x02\u1403" +
		"\u0255\x03\x02\x02\x02\u1404\u1405\tB\x02\x02\u1405\u0257\x03\x02\x02" +
		"\x02\u1406\u1407\x05\u0256\u012C\x02\u1407\u1408\x05\u0462\u0232\x02\u1408" +
		"\u0259\x03\x02\x02\x02\u1409\u140A\x07K\x02\x02\u140A\u1411\x07\xA9\x02" +
		"\x02\u140B\u140C\x07i\x02\x02\u140C\u1411\x07\u0154\x02\x02\u140D\u140E" +
		"\x07\xF9\x02\x02\u140E\u1411\x07\x8E\x02\x02\u140F\u1411\tG\x02\x02\u1410" +
		"\u1409\x03\x02\x02\x02\u1410\u140B\x03\x02\x02\x02\u1410\u140D\x03\x02" +
		"\x02\x02\u1410\u140F\x03\x02\x02\x02\u1411\u025B\x03\x02\x02\x02\u1412" +
		"\u1413\x07I\x02\x02\u1413\u1438\x05\u0482\u0242\x02\u1414\u1415\x07\t" +
		"\x02\x02\u1415\u1416\x07\u020B\x02\x02\u1416\u1417\x05\u025E\u0130\x02" +
		"\u1417\u141A\x07\u0214\x02\x02\u1418\u141B\x05\u0462\u0232\x02\u1419\u141B" +
		"\x07\u01E0\x02\x02\u141A\u1418\x03\x02\x02\x02\u141A\u1419\x03\x02\x02" +
		"\x02\u141B\u1438\x03\x02\x02\x02\u141C\u141E\x07\x14\x02\x02\u141D\u141F" +
		"\x05\u0404\u0203\x02\u141E\u141D\x03\x02\x02\x02\u141E\u141F\x03\x02\x02" +
		"\x02\u141F\u1429\x03\x02\x02\x02\u1420\u142A\x05\u0270\u0139\x02\u1421" +
		"\u1426\x05\u026C\u0137\x02\u1422\u1423\x07\u0198\x02\x02\u1423\u1425\x05" +
		"\u026C\u0137\x02\u1424\u1422\x03\x02\x02\x02\u1425\u1428\x03\x02\x02\x02" +
		"\u1426\u1424\x03\x02\x02\x02\u1426\u1427\x03\x02\x02\x02\u1427\u142A\x03" +
		"\x02\x02\x02\u1428\u1426\x03\x02\x02\x02\u1429\u1420\x03\x02\x02\x02\u1429" +
		"\u1421\x03\x02\x02\x02\u142A\u1438\x03\x02\x02\x02\u142B\u142D\x07\u021C" +
		"\x02\x02\u142C\u142E\tH\x02\x02\u142D\u142C\x03\x02\x02\x02\u142D\u142E" +
		"\x03\x02\x02\x02\u142E\u142F\x03\x02\x02\x02\u142F\u1438\x05\u029E\u0150" +
		"\x02\u1430\u1431\x07\u0224\x02\x02\u1431\u1432\x07\u020B\x02\x02\u1432" +
		"\u1433\x07\u0212\x02\x02\u1433\u1434\x07\t\x02\x02\u1434\u1438\x05\u0274" +
		"\u013B\x02\u1435\u1436\x06\u012Fw\x02\u1436\u1438\x07:\x02\x02\u1437\u1412" +
		"\x03\x02\x02\x02\u1437\u1414\x03\x02\x02\x02\u1437\u141C\x03\x02\x02\x02" +
		"\u1437\u142B\x03\x02\x02\x02\u1437\u1430\x03\x02\x02\x02\u1437\u1435\x03" +
		"\x02\x02\x02\u1438\u025D\x03\x02\x02\x02\u1439\u143C\x05\u0260\u0131\x02" +
		"\u143A\u143C\x05\u0264\u0133\x02\u143B\u1439\x03\x02\x02\x02\u143B\u143A" +
		"\x03\x02\x02\x02\u143C\u025F\x03\x02\x02\x02\u143D\u1442\x05\u0262\u0132" +
		"\x02\u143E\u143F\x07\u0198\x02\x02\u143F\u1441\x05\u0262\u0132\x02\u1440" +
		"\u143E\x03\x02\x02\x02\u1441\u1444\x03\x02\x02\x02\u1442\u1440\x03\x02" +
		"\x02\x02\u1442\u1443\x03\x02\x02\x02\u1443\u0261\x03\x02\x02\x02\u1444" +
		"\u1442\x03\x02\x02\x02\u1445\u1447\x05\u0448\u0225\x02\u1446\u1448\x05" +
		"\u0266\u0134\x02\u1447\u1446\x03\x02\x02\x02\u1447\u1448\x03\x02\x02\x02" +
		"\u1448\u0263\x03\x02\x02\x02\u1449\u144A\x05\u0448\u0225\x02\u144A\u144B" +
		"\x07\"\x02\x02\u144B\u144C\x07\u019B\x02\x02\u144C\u144D\x058\x1D\x02" +
		"\u144D\u144F\x07\u019C\x02\x02\u144E\u1450\x05\u0266\u0134\x02\u144F\u144E" +
		"\x03\x02\x02\x02\u144F\u1450\x03\x02\x02\x02\u1450\u0265\x03\x02\x02\x02" +
		"\u1451\u1452\x05\u0192\xCA\x02\u1452\u1454\x07\u019B\x02\x02\u1453\u1455" +
		"\x05\u026A\u0136\x02\u1454\u1453\x03\x02\x02\x02\u1454\u1455\x03\x02\x02" +
		"\x02\u1455\u1456\x03\x02\x02\x02\u1456\u1457\x07\u019C\x02\x02\u1457\u0267" +
		"\x03\x02\x02\x02\u1458\u145B\x05\u0462\u0232\x02\u1459\u145B\x07\u0253" +
		"\x02\x02\u145A\u1458\x03\x02\x02\x02\u145A\u1459\x03\x02\x02\x02\u145B" +
		"\u0269\x03\x02\x02\x02\u145C\u1461\x05\u0268\u0135\x02\u145D\u145E\x07" +
		"\u0198\x02\x02\u145E\u1460\x05\u0268\u0135\x02\u145F\u145D\x03\x02\x02" +
		"\x02\u1460\u1463\x03\x02\x02\x02\u1461\u145F\x03\x02\x02\x02\u1461\u1462" +
		"\x03\x02\x02\x02\u1462\u026B\x03\x02\x02\x02\u1463\u1461\x03\x02\x02\x02" +
		"\u1464\u1474\tI\x02\x02\u1465\u1467\x05\u026E\u0138\x02\u1466\u1465\x03" +
		"\x02\x02\x02\u1466\u1467\x03\x02\x02\x02\u1467\u1468\x03\x02\x02\x02\u1468" +
		"\u1474\x07\xB9\x02\x02\u1469\u146A\x07\u0115\x02\x02\u146A\u146C\x07\xB9" +
		"\x02\x02\u146B\u146D\x05\u0308\u0185\x02\u146C\u146B\x03\x02\x02\x02\u146C" +
		"\u146D\x03\x02\x02\x02\u146D\u1474\x03\x02\x02\x02\u146E\u146F\x06\u0137" +
		"x\x02\u146F\u1470\x07\u010D\x02\x02\u1470\u1474\x07\t\x02\x02\u1471\u1472" +
		"\x06\u0137y\x02\u1472\u1474\x07\u0249\x02\x02\u1473\u1464\x03\x02\x02" +
		"\x02\u1473\u1466\x03\x02\x02\x02\u1473\u1469\x03\x02\x02\x02\u1473\u146E" +
		"\x03\x02\x02\x02\u1473\u1471\x03\x02\x02\x02\u1474\u026D\x03\x02\x02\x02" +
		"\u1475\u1476\tJ\x02\x02\u1476\u026F\x03\x02\x02\x02\u1477\u147F\t\x14" +
		"\x02\x02\u1478\u1479\x07\u02AC\x02\x02\u1479\u147A\x07\u0258\x02\x02\u147A" +
		"\u1480\x07\u0226\x02\x02\u147B\u147D\x05\u0464\u0233\x02\u147C\u147E\x05" +
		"\u0272\u013A\x02\u147D\u147C\x03\x02\x02\x02\u147D\u147E\x03\x02\x02\x02" +
		"\u147E\u1480\x03\x02\x02\x02\u147F\u1478\x03\x02\x02\x02\u147F\u147B\x03" +
		"\x02\x02\x02\u147F\u1480\x03\x02\x02\x02\u1480\u0271\x03\x02\x02\x02\u1481" +
		"\u1482\x06\u013Az\x02\u1482\u1483\x07\u01FC\x02\x02\u1483\u1488\x07\x8B" +
		"\x02\x02\u1484\u1485\x07\u02AC\x02\x02\u1485\u1486\x07\u0258\x02\x02\u1486" +
		"\u1488\x07\u0226\x02\x02\u1487\u1481\x03\x02\x02\x02\u1487\u1484\x03\x02" +
		"\x02\x02\u1488\u0273\x03\x02\x02\x02\u1489\u148A\x05\u0448\u0225\x02\u148A" +
		"\u148C\x05\u027A\u013E\x02\u148B\u148D\x05\u0266\u0134\x02\u148C\u148B" +
		"\x03\x02\x02\x02\u148C\u148D\x03\x02\x02\x02\u148D\u1490\x03\x02\x02\x02" +
		"\u148E\u148F\x07\u020A\x02\x02\u148F\u1491\x07\xB1\x02\x02\u1490\u148E" +
		"\x03\x02\x02\x02\u1490\u1491\x03\x02\x02\x02\u1491\u1494\x03\x02\x02\x02" +
		"\u1492\u1494\x05\u0276\u013C\x02\u1493\u1489\x03\x02\x02\x02\u1493\u1492" +
		"\x03\x02\x02\x02\u1494\u0275\x03\x02\x02\x02\u1495\u149A\x05\u0278\u013D" +
		"\x02\u1496\u1497\x07\u0198\x02\x02\u1497\u1499\x05\u0278\u013D\x02\u1498" +
		"\u1496\x03\x02\x02\x02\u1499\u149C\x03\x02\x02\x02\u149A\u1498\x03\x02" +
		"\x02\x02\u149A\u149B\x03\x02\x02\x02\u149B\u0277\x03\x02\x02\x02\u149C" +
		"\u149A\x03\x02\x02\x02\u149D\u149F\x05\u0448\u0225\x02\u149E\u14A0\x05" +
		"\u0266\u0134\x02\u149F\u149E\x03\x02\x02\x02\u149F\u14A0\x03\x02\x02\x02" +
		"\u14A0\u14A3\x03\x02\x02\x02\u14A1\u14A2\x07\u020A\x02\x02\u14A2\u14A4" +
		"\x07\xB1\x02\x02\u14A3\u14A1\x03\x02\x02\x02\u14A3\u14A4\x03\x02\x02\x02" +
		"\u14A4\u0279\x03\x02\x02\x02\u14A5\u14A6\x07\"\x02\x02\u14A6\u14A7\x07" +
		"\u019B\x02\x02\u14A7\u14A8\x058\x1D\x02\u14A8\u14A9\x07\u019C\x02\x02" +
		"\u14A9\u027B\x03\x02\x02\x02\u14AA\u14AF\x05\u027E\u0140\x02\u14AB\u14AF" +
		"\x05\u0288\u0145\x02\u14AC\u14AF\x05\u028A\u0146\x02\u14AD\u14AF\x05\u028E" +
		"\u0148\x02\u14AE\u14AA\x03\x02\x02\x02\u14AE\u14AB\x03\x02\x02\x02\u14AE" +
		"\u14AC\x03\x02\x02\x02\u14AE\u14AD\x03\x02\x02\x02\u14AF\u027D\x03\x02" +
		"\x02\x02\u14B0\u14B1\x07\u01CD\x02\x02\u14B1\u14B2\x07\u02E5\x02\x02\u14B2" +
		"\u14B3\x07\u0202\x02\x02\u14B3\u14B4\x05\u0462\u0232\x02\u14B4\u14B6\x07" +
		"\u0164\x02\x02\u14B5\u14B7\x05\u04A0\u0251\x02\u14B6\u14B5\x03\x02\x02" +
		"\x02\u14B6\u14B7\x03\x02\x02\x02\u14B7\u14B8\x03\x02\x02\x02\u14B8\u14BA" +
		"\tK\x02\x02\u14B9\u14BB\x05\u0280\u0141\x02\u14BA\u14B9\x03\x02\x02\x02" +
		"\u14BA\u14BB\x03\x02\x02\x02\u14BB\u14BD\x03\x02\x02\x02\u14BC\u14BE\x05" +
		"\u0284\u0143\x02\u14BD\u14BC\x03\x02\x02\x02\u14BD\u14BE\x03\x02\x02\x02" +
		"\u14BE\u14C0\x03\x02\x02\x02\u14BF\u14C1\x05\u0286\u0144\x02\u14C0\u14BF" +
		"\x03\x02\x02\x02\u14C0\u14C1\x03\x02\x02\x02\u14C1\u027F\x03\x02\x02\x02" +
		"\u14C2\u14C4\x07\u02E7\x02\x02\u14C3\u14C5\x05\u04A0\u0251\x02\u14C4\u14C3" +
		"\x03\x02\x02\x02\u14C4\u14C5\x03\x02\x02\x02\u14C5\u14C6\x03\x02\x02\x02" +
		"\u14C6\u14CD\x05\u0282\u0142\x02\u14C7\u14C9\x07\u0198\x02\x02\u14C8\u14C7" +
		"\x03\x02\x02\x02\u14C8\u14C9\x03\x02\x02\x02\u14C9\u14CA\x03\x02\x02\x02" +
		"\u14CA\u14CC\x05\u0282\u0142\x02\u14CB\u14C8\x03\x02\x02\x02\u14CC\u14CF" +
		"\x03\x02\x02\x02\u14CD\u14CB\x03\x02\x02\x02\u14CD\u14CE\x03\x02\x02\x02" +
		"\u14CE\u0281\x03\x02\x02\x02\u14CF\u14CD\x03\x02\x02\x02\u14D0\u14D3\x07" +
		"\u017E\x02\x02\u14D1\u14D2\x07\u018A\x02\x02\u14D2\u14D4\x07\u017E\x02" +
		"\x02\u14D3\u14D1\x03\x02\x02\x02\u14D3\u14D4\x03\x02\x02\x02\u14D4\u0283" +
		"\x03\x02\x02\x02\u14D5\u14D7\x07\u02E4\x02\x02\u14D6\u14D8\x05\u04A0\u0251" +
		"\x02\u14D7\u14D6\x03\x02\x02\x02\u14D7\u14D8\x03\x02\x02\x02\u14D8\u14D9" +
		"\x03\x02\x02\x02\u14D9\u14DA\x07\u017E\x02\x02\u14DA\u0285\x03\x02\x02" +
		"\x02\u14DB\u14DC\tL\x02\x02\u14DC\u0287\x03\x02\x02\x02\u14DD\u14DE\x07" +
		"\u01AE\x02\x02\u14DE\u14DF\x07\u02E5\x02\x02\u14DF\u14E0\x07\u0202\x02" +
		"\x02\u14E0\u14E2\x05\u045C\u022F\x02\u14E1\u14E3\x05\u0280\u0141\x02\u14E2" +
		"\u14E1\x03\x02\x02\x02\u14E2\u14E3\x03\x02\x02\x02\u14E3\u14E5\x03\x02" +
		"\x02\x02\u14E4\u14E6\x05\u0284\u0143\x02\u14E5\u14E4\x03\x02\x02\x02\u14E5" +
		"\u14E6\x03\x02\x02\x02\u14E6\u14E8\x03\x02\x02\x02\u14E7\u14E9\x05\u0286" +
		"\u0144\x02\u14E8\u14E7\x03\x02\x02\x02\u14E8\u14E9\x03\x02\x02\x02\u14E9" +
		"\u14EB\x03\x02\x02\x02\u14EA\u14EC\x07\u01FA\x02\x02\u14EB\u14EA\x03\x02" +
		"\x02\x02\u14EB\u14EC\x03\x02\x02\x02\u14EC\u0289\x03\x02\x02\x02\u14ED" +
		"\u14EE\x07\u026D\x02\x02\u14EE\u14EF\x07\u02E5\x02\x02\u14EF\u14F0\x07" +
		"\u0202\x02\x02\u14F0\u14F3\x05\u0462\u0232\x02\u14F1\u14F2\x07\u01FC\x02" +
		"\x02\u14F2\u14F4\x05\u028C\u0147\x02\u14F3\u14F1";
	private static readonly _serializedATNSegment11: string =
		"\x03\x02\x02\x02\u14F3\u14F4\x03\x02\x02\x02\u14F4\u028B\x03\x02\x02\x02" +
		"\u14F5\u14FC\x05\u0470\u0239\x02\u14F6\u14F8\x07\u0198\x02\x02\u14F7\u14F6" +
		"\x03\x02\x02\x02\u14F7\u14F8\x03\x02\x02\x02\u14F8\u14F9\x03\x02\x02\x02" +
		"\u14F9\u14FB\x05\u0470\u0239\x02\u14FA\u14F7\x03\x02\x02\x02\u14FB\u14FE" +
		"\x03\x02\x02\x02\u14FC\u14FA\x03\x02\x02\x02\u14FC\u14FD\x03\x02\x02\x02" +
		"\u14FD\u028D\x03\x02\x02\x02\u14FE\u14FC\x03\x02\x02\x02\u14FF\u1500\x07" +
		"\u01E9\x02\x02\u1500\u1501\x07\u02E5\x02\x02\u1501\u1502\x07\u0202\x02" +
		"\x02\u1502\u1504\x05\u045C\u022F\x02\u1503\u1505\x07\u01FA\x02\x02\u1504" +
		"\u1503\x03\x02\x02\x02\u1504\u1505\x03\x02\x02\x02\u1505\u028F\x03\x02" +
		"\x02\x02\u1506\u150D\x05\u0292\u014A\x02\u1507\u150D\x05\u0294\u014B\x02" +
		"\u1508\u150D\x05\u0298\u014D\x02\u1509\u150D\x05\u029A\u014E\x02\u150A" +
		"\u150B\x06\u0149{\x02\u150B\u150D\x05\u029C\u014F\x02\u150C\u1506\x03" +
		"\x02\x02\x02\u150C\u1507\x03\x02\x02\x02\u150C\u1508\x03\x02\x02\x02\u150C" +
		"\u1509\x03\x02\x02\x02\u150C\u150A\x03\x02\x02\x02\u150D\u0291\x03\x02" +
		"\x02\x02\u150E\u150F\tM\x02\x02\u150F\u1512\x05\u0448\u0225\x02\u1510" +
		"\u1513\x05\u047E\u0240\x02\u1511\u1513\x05\u0410\u0209\x02\u1512\u1510" +
		"\x03\x02\x02\x02\u1512\u1511\x03\x02\x02\x02\u1512\u1513\x03\x02\x02\x02" +
		"\u1513\u0293\x03\x02\x02\x02\u1514\u151F\tM\x02\x02\u1515\u1516\x06\u014B" +
		"|\x02\u1516\u1520\x07\x8C\x02\x02\u1517\u1518\x06\u014B}\x02\u1518\u1520" +
		"\x07\xFC\x02\x02\u1519\u151A\x06\u014B~\x02\u151A\u151B\x07\x16\x02\x02" +
		"\u151B\u151C\x07\u0181\x02\x02\u151C\u1520\x05\u0496\u024C\x02\u151D\u151E" +
		"\x06\u014B\x7F\x02\u151E\u1520\x07A\x02\x02\u151F\u1515\x03\x02\x02\x02" +
		"\u151F\u1517\x03\x02\x02\x02\u151F\u1519\x03\x02\x02\x02\u151F\u151D\x03" +
		"\x02\x02\x02\u151F\u1520\x03\x02\x02\x02\u1520\u1521\x03\x02\x02\x02\u1521" +
		"\u1522\x05\u0296\u014C\x02\u1522\u0295\x03\x02\x02\x02\u1523\u1530\x05" +
		"\u0110\x89\x02\u1524\u1529\x06\u014C\x80\x02\u1525\u152A\x05\xE2r\x02" +
		"\u1526\u152A\x05\xEEx\x02\u1527\u152A\x05\u010E\x88\x02\u1528\u152A\x05" +
		"\u019C\xCF\x02\u1529\u1525\x03\x02\x02\x02\u1529\u1526\x03\x02\x02\x02" +
		"\u1529\u1527\x03\x02\x02\x02\u1529\u1528\x03\x02\x02\x02\u152A\u1530\x03" +
		"\x02\x02\x02\u152B\u152C\x06\u014C\x81\x02\u152C\u152D\x07\u01FC\x02\x02" +
		"\u152D\u152E\x07d\x02\x02\u152E\u1530\x05\u0470\u0239\x02\u152F\u1523" +
		"\x03\x02\x02\x02\u152F\u1524\x03\x02\x02\x02\u152F\u152B\x03\x02\x02\x02" +
		"\u1530\u0297\x03\x02\x02\x02\u1531\u1532\x07\x19\x02\x02\u1532\u1533\x05" +
		"\u0496\u024C\x02\u1533\u0299\x03\x02\x02\x02\u1534\u1535\x07\u029B\x02" +
		"\x02\u1535\u1536\x05\u0462\u0232\x02\u1536\u029B\x03\x02\x02\x02\u1537" +
		"\u1538\x07\u02EA\x02\x02\u1538\u029D\x03\x02\x02\x02\u1539\u153A\b\u0150" +
		"\x01\x02\u153A\u1540\x05\u02A0\u0151\x02\u153B\u153D\x07\u0217\x02\x02" +
		"\u153C\u153E\x05\u02F2\u017A\x02\u153D\u153C\x03\x02\x02\x02\u153D\u153E" +
		"\x03\x02\x02\x02\u153E\u153F\x03\x02\x02\x02\u153F\u1541\tN\x02\x02\u1540" +
		"\u153B\x03\x02\x02\x02\u1540\u1541\x03\x02\x02\x02\u1541\u1545\x03\x02" +
		"\x02\x02\u1542\u1543\x07\u023F\x02\x02\u1543\u1545\x05\u029E\u0150\x06" +
		"\u1544\u1539\x03\x02\x02\x02\u1544\u1542\x03\x02\x02\x02\u1545\u1551\x03" +
		"\x02\x02\x02\u1546\u1547\f\x05\x02\x02\u1547\u1548\tO\x02\x02\u1548\u1550" +
		"\x05\u029E\u0150\x06\u1549\u154A\f\x04\x02\x02\u154A\u154B\x07\u02AF\x02" +
		"\x02\u154B\u1550\x05\u029E\u0150\x05\u154C\u154D\f\x03\x02\x02\u154D\u154E" +
		"\tP\x02\x02\u154E\u1550\x05\u029E\u0150\x04\u154F\u1546\x03\x02\x02\x02" +
		"\u154F\u1549\x03\x02\x02\x02\u154F\u154C\x03\x02\x02\x02\u1550\u1553\x03" +
		"\x02\x02\x02\u1551\u154F\x03\x02\x02\x02\u1551\u1552\x03\x02\x02\x02\u1552" +
		"\u029F\x03\x02\x02\x02\u1553\u1551\x03\x02\x02\x02\u1554\u1555\b\u0151" +
		"\x01\x02\u1555\u1556\x05\u02A4\u0153\x02\u1556\u1568\x03\x02\x02\x02\u1557" +
		"\u1558\f\x05\x02\x02\u1558\u155A\x07\u0217\x02\x02\u1559\u155B\x05\u02F2" +
		"\u017A\x02\u155A\u1559\x03\x02\x02\x02\u155A\u155B\x03\x02\x02\x02\u155B" +
		"\u155C\x03\x02\x02\x02\u155C\u1567\x07\u0242\x02\x02\u155D\u155E\f\x04" +
		"\x02\x02\u155E\u155F\x05\u02A2\u0152\x02\u155F\u1560\x05\u02A4\u0153\x02" +
		"\u1560\u1567\x03\x02\x02\x02\u1561\u1562\f\x03\x02\x02\u1562\u1563\x05" +
		"\u02A2\u0152\x02\u1563\u1564\tQ\x02\x02\u1564\u1565\x05\u011C\x8F\x02" +
		"\u1565\u1567\x03\x02\x02\x02\u1566\u1557\x03\x02\x02\x02\u1566\u155D\x03" +
		"\x02\x02\x02\u1566\u1561\x03\x02\x02\x02\u1567\u156A\x03\x02\x02\x02\u1568" +
		"\u1566\x03\x02\x02\x02\u1568\u1569\x03\x02\x02\x02\u1569\u02A1\x03\x02" +
		"\x02\x02\u156A\u1568\x03\x02\x02\x02\u156B\u156C\tR\x02\x02\u156C\u02A3" +
		"\x03\x02\x02\x02\u156D\u157B\x05\u02A8\u0155\x02\u156E\u1570\x05\u02F2" +
		"\u017A\x02\u156F\u156E\x03\x02\x02\x02\u156F\u1570\x03\x02\x02\x02\u1570" +
		"\u1571\x03\x02\x02\x02\u1571\u157C\x05\u02A6\u0154\x02\u1572\u1573\x06" +
		"\u0153\x88\x02\u1573\u1575\x07\u02FD\x02\x02\u1574\u1576\x07\u02BC\x02" +
		"\x02\u1575\u1574\x03\x02\x02\x02\u1575\u1576\x03\x02\x02\x02\u1576\u1577" +
		"\x03\x02\x02\x02\u1577\u157C\x05\u02FE\u0180\x02\u1578\u1579\x07\u013B" +
		"\x02\x02\u1579\u157A\x07\u0220\x02\x02\u157A\u157C\x05\u02A8\u0155\x02" +
		"\u157B\u156F\x03\x02\x02\x02\u157B\u1572\x03\x02\x02\x02\u157B\u1578\x03" +
		"\x02\x02\x02\u157B\u157C\x03\x02\x02\x02\u157C\u02A5\x03\x02\x02\x02\u157D" +
		"\u1583\x07\u0214\x02\x02\u157E\u1584\x05\u011C\x8F\x02\u157F\u1580\x07" +
		"\u019B\x02\x02\u1580\u1581\x05\u02EE\u0178\x02\u1581\u1582\x07\u019C\x02" +
		"\x02\u1582\u1584\x03\x02\x02\x02\u1583\u157E\x03\x02\x02\x02\u1583\u157F" +
		"\x03\x02\x02\x02\u1584\u1593\x03\x02\x02\x02\u1585\u1586\x07\u01B5\x02" +
		"\x02\u1586\u1587\x05\u02A8\u0155\x02\u1587\u1588\x07\u01B0\x02\x02\u1588" +
		"\u1589\x05\u02A4\u0153\x02\u1589\u1593\x03\x02\x02\x02\u158A\u158B\x07" +
		"\u0220\x02\x02\u158B\u158E\x05\u02AA\u0156\x02\u158C\u158D\x07\x86\x02" +
		"\x02\u158D\u158F\x05\u02AA\u0156\x02\u158E\u158C\x03\x02\x02\x02\u158E" +
		"\u158F\x03\x02\x02\x02\u158F\u1593\x03\x02\x02\x02\u1590\u1591\x07\u025C" +
		"\x02\x02\u1591\u1593\x05\u02A8\u0155\x02\u1592\u157D\x03\x02\x02\x02\u1592" +
		"\u1585\x03\x02\x02\x02\u1592\u158A\x03\x02\x02\x02\u1592\u1590\x03\x02" +
		"\x02\x02\u1593\u02A7\x03\x02\x02\x02\u1594\u1595\b\u0155\x01\x02\u1595" +
		"\u1596\x05\u02AA\u0156\x02\u1596\u15B1\x03\x02\x02\x02\u1597\u1598\f\t" +
		"\x02\x02\u1598\u1599\x07\u0194\x02\x02\u1599\u15B0\x05\u02A8\u0155\n\u159A" +
		"\u159B\f\b\x02\x02\u159B\u159C\tS\x02\x02\u159C\u15B0\x05\u02A8\u0155" +
		"\t\u159D\u159E\f\x07\x02\x02\u159E\u159F\tT\x02\x02\u159F\u15B0\x05\u02A8" +
		"\u0155\b\u15A0\u15A1\f\x05\x02\x02\u15A1\u15A2\tU\x02\x02\u15A2\u15B0" +
		"\x05\u02A8\u0155\x06\u15A3\u15A4\f\x04\x02\x02\u15A4\u15A5\x07\u0193\x02" +
		"\x02\u15A5\u15B0\x05\u02A8\u0155\x05\u15A6\u15A7\f\x03\x02\x02\u15A7\u15A8" +
		"\x07\u0196\x02\x02\u15A8\u15B0\x05\u02A8\u0155\x04\u15A9\u15AA\f\x06\x02" +
		"\x02\u15AA\u15AB\tT\x02\x02\u15AB\u15AC\x07\u0211\x02\x02\u15AC\u15AD" +
		"\x05\u029E\u0150\x02\u15AD\u15AE\x05\u02F6\u017C\x02\u15AE\u15B0\x03\x02" +
		"\x02\x02\u15AF\u1597\x03\x02\x02\x02\u15AF\u159A\x03\x02\x02\x02\u15AF" +
		"\u159D\x03\x02\x02\x02\u15AF\u15A0\x03\x02\x02\x02\u15AF\u15A3\x03\x02" +
		"\x02\x02\u15AF\u15A6\x03\x02\x02\x02\u15AF\u15A9\x03\x02\x02\x02\u15B0" +
		"\u15B3\x03\x02\x02\x02\u15B1\u15AF\x03\x02\x02\x02\u15B1\u15B2\x03\x02" +
		"\x02\x02\u15B2\u02A9\x03\x02\x02\x02\u15B3\u15B1\x03\x02\x02\x02\u15B4" +
		"\u15B5\b\u0156\x01\x02\u15B5\u161D\x05\u02DE\u0170\x02\u15B6\u15B8\x05" +
		"\u0410\u0209\x02\u15B7\u15B9\x05\u02AE\u0158\x02\u15B8\u15B7\x03\x02\x02" +
		"\x02\u15B8\u15B9\x03\x02\x02\x02\u15B9\u161D\x03\x02\x02\x02\u15BA\u161D" +
		"\x05\u02C6\u0164\x02\u15BB\u161D\x05\u02D8\u016D\x02\u15BC\u161D\x05\u0476" +
		"\u023C\x02\u15BD\u161D\x07\u01A6\x02\x02\u15BE\u161D\x05\u02B0\u0159\x02" +
		"\u15BF\u15C0\x06\u0156\x90\x02\u15C0\u161D\x05\u02B2\u015A\x02\u15C1\u15C2" +
		"\x06\u0156\x91\x02\u15C2\u161D\x05\u02B4\u015B\x02\u15C3\u15C4\tV\x02" +
		"\x02\u15C4\u161D\x05\u02AA\u0156\x10\u15C5\u15C6\x05\u02F4\u017B\x02\u15C6" +
		"\u15C7\x05\u02AA\u0156\x0F\u15C7\u161D\x03\x02\x02\x02\u15C8\u15CA\x07" +
		"\u012F\x02\x02\u15C9\u15C8\x03\x02\x02\x02\u15C9\u15CA\x03\x02\x02\x02" +
		"\u15CA\u15CB\x03\x02\x02\x02\u15CB\u15CC\x07\u019B\x02\x02\u15CC\u15CD" +
		"\x05\u02EE\u0178\x02\u15CD\u15CE\x07\u019C\x02\x02\u15CE\u161D\x03\x02" +
		"\x02\x02\u15CF\u15D1\x07\u01F2\x02\x02\u15D0\u15CF\x03\x02\x02\x02\u15D0" +
		"\u15D1\x03\x02\x02\x02\u15D1\u15D2\x03\x02\x02\x02\u15D2\u161D\x05\u011C" +
		"\x8F\x02\u15D3\u15D4\x07\u019D\x02\x02\u15D4\u15D5\x05\u0462\u0232\x02" +
		"\u15D5\u15D6\x05\u029E\u0150\x02\u15D6\u15D7\x07\u019E\x02\x02\u15D7\u161D" +
		"\x03\x02\x02\x02\u15D8\u15D9\x07\u022F\x02\x02\u15D9\u15DA\x05\u02C0\u0161" +
		"\x02\u15DA\u15DB\x07>\x02\x02\u15DB\u15DC\x07\u019B\x02\x02\u15DC\u15DE" +
		"\x05\u02A8\u0155\x02\u15DD\u15DF\x05\u02C4\u0163\x02\u15DE\u15DD\x03\x02" +
		"\x02\x02\u15DE\u15DF\x03\x02\x02\x02\u15DF\u15E0\x03\x02\x02\x02\u15E0" +
		"\u15E1\x07\u019C\x02\x02\u15E1\u161D\x03\x02\x02\x02\u15E2\u15E3\x07\u01B7" +
		"\x02\x02\u15E3\u161D\x05\u02AA\u0156\n\u15E4\u15E5\x07\u01C2\x02\x02\u15E5" +
		"\u15E6\x07\u019B\x02\x02\u15E6\u15E7\x05\u029E\u0150\x02\u15E7\u15E8\x07" +
		"\u01B1\x02\x02\u15E8\u15EA\x05\u02EC\u0177\x02\u15E9\u15EB\x05\u02AC\u0157" +
		"\x02\u15EA\u15E9\x03\x02\x02\x02\u15EA\u15EB\x03\x02\x02\x02\u15EB\u15EC" +
		"\x03\x02\x02\x02\u15EC\u15ED\x07\u019C\x02\x02\u15ED\u161D\x03\x02\x02" +
		"\x02\u15EE\u15F0\x07\u01C1\x02\x02\u15EF\u15F1\x05\u029E\u0150\x02\u15F0" +
		"\u15EF\x03\x02\x02\x02\u15F0\u15F1\x03\x02\x02\x02\u15F1\u15F5\x03\x02" +
		"\x02\x02\u15F2\u15F3\x05\u02E6\u0174\x02\u15F3\u15F4\x05\u02E8\u0175\x02" +
		"\u15F4\u15F6\x03\x02\x02\x02\u15F5\u15F2\x03\x02\x02\x02\u15F6\u15F7\x03" +
		"\x02\x02\x02\u15F7\u15F5\x03\x02\x02\x02\u15F7\u15F8\x03\x02\x02\x02\u15F8" +
		"\u15FA\x03\x02\x02\x02\u15F9\u15FB\x05\u02EA\u0176\x02\u15FA\u15F9\x03" +
		"\x02\x02\x02\u15FA\u15FB\x03\x02\x02\x02\u15FB\u15FC\x03\x02\x02\x02\u15FC" +
		"\u15FD\x07\x12\x02\x02\u15FD\u161D\x03\x02\x02\x02\u15FE\u15FF\x07\u01CB" +
		"\x02\x02\u15FF\u1600\x07\u019B\x02\x02\u1600\u1601\x05\u029E\u0150\x02" +
		"\u1601\u1602\x07\u0198\x02\x02\u1602\u1603\x05\u02EC\u0177\x02\u1603\u1604" +
		"\x07\u019C\x02\x02\u1604\u161D\x03\x02\x02\x02\u1605\u1606\x07\u01CB\x02" +
		"\x02\u1606\u1607\x07\u019B\x02\x02\u1607\u1608\x05\u029E\u0150\x02\u1608" +
		"\u1609\x07\u029C\x02\x02\u1609\u160A\x05\u03A2\u01D2\x02\u160A\u160B\x07" +
		"\u019C\x02\x02\u160B\u161D\x03\x02\x02\x02\u160C\u160D\x07\u01E0\x02\x02" +
		"\u160D\u160E\x07\u019B\x02\x02\u160E\u160F\x05\u046A\u0236\x02\u160F\u1610" +
		"\x07\u019C\x02\x02\u1610\u161D\x03\x02\x02\x02\u1611\u1612\x07\u02A1\x02" +
		"\x02\u1612\u1613\x07\u019B\x02\x02\u1613\u1614\x05\u046A\u0236\x02\u1614" +
		"\u1615\x07\u019C\x02\x02\u1615\u161D\x03\x02\x02\x02\u1616\u1617\x07\u0211" +
		"\x02\x02\u1617\u1618\x05\u029E\u0150\x02\u1618\u1619\x05\u02F6\u017C\x02" +
		"\u1619\u161A\x07\u0189\x02\x02\u161A\u161B\x05\u029E\u0150\x02\u161B\u161D" +
		"\x03\x02\x02\x02\u161C\u15B4\x03\x02\x02\x02\u161C\u15B6\x03\x02\x02\x02" +
		"\u161C\u15BA\x03\x02\x02\x02\u161C\u15BB\x03\x02\x02\x02\u161C\u15BC\x03" +
		"\x02\x02\x02\u161C\u15BD\x03\x02\x02\x02\u161C\u15BE\x03\x02\x02\x02\u161C" +
		"\u15BF\x03\x02\x02\x02\u161C\u15C1\x03\x02\x02\x02\u161C\u15C3\x03\x02" +
		"\x02\x02\u161C\u15C5\x03\x02\x02\x02\u161C\u15C9\x03\x02\x02\x02\u161C" +
		"\u15D0\x03\x02\x02\x02\u161C\u15D3\x03\x02\x02\x02\u161C\u15D8\x03\x02" +
		"\x02\x02\u161C\u15E2\x03\x02\x02\x02\u161C\u15E4\x03\x02\x02\x02\u161C" +
		"\u15EE\x03\x02\x02\x02\u161C\u15FE\x03\x02\x02\x02\u161C\u1605\x03\x02" +
		"\x02\x02\u161C\u160C\x03\x02\x02\x02\u161C\u1611\x03\x02\x02\x02\u161C" +
		"\u1616\x03\x02\x02\x02\u161D\u1626\x03\x02\x02\x02\u161E\u161F\f\x11\x02" +
		"\x02\u161F\u1620\x07\u017D\x02\x02\u1620\u1625\x05\u02AA\u0156\x12\u1621" +
		"\u1622\f\x17\x02\x02\u1622\u1623\x07\u01C6\x02\x02\u1623\u1625\x05\u0496" +
		"\u024C\x02\u1624\u161E\x03\x02\x02\x02\u1624\u1621\x03\x02\x02\x02\u1625" +
		"\u1628\x03\x02\x02\x02\u1626\u1624\x03\x02\x02\x02\u1626\u1627\x03\x02" +
		"\x02\x02\u1627\u02AB\x03\x02\x02\x02\u1628\u1626\x03\x02\x02\x02\u1629" +
		"\u162A\x06\u0157\x94\x02\u162A\u162B\x07\u02FB\x02\x02\u162B\u02AD\x03" +
		"\x02\x02\x02\u162C\u162D\x06\u0158\x95\x02\u162D\u162E\x07\u01A0\x02\x02" +
		"\u162E\u1633\x05\u047C\u023F\x02\u162F\u1630\x06\u0158\x96\x02\u1630\u1631" +
		"\x07\u01A1\x02\x02\u1631\u1633\x05\u047C\u023F\x02\u1632\u162C\x03\x02" +
		"\x02\x02\u1632\u162F\x03\x02\x02\x02\u1633\u02AF\x03\x02\x02\x02\u1634" +
		"\u1635\x07H\x02\x02\u1635\u1637\x07\u019B\x02\x02\u1636\u1638\x07\u01E6" +
		"\x02\x02\u1637\u1636\x03\x02\x02\x02\u1637\u1638\x03\x02\x02\x02\u1638" +
		"\u1639\x03\x02\x02\x02\u1639\u163A\x05\u02BE\u0160\x02\u163A\u163D\x07" +
		"\u019C\x02\x02\u163B\u163C\x06\u0159\x97\x02\u163C\u163E\x05\u02B6\u015C" +
		"\x02\u163D\u163B\x03\x02\x02\x02\u163D\u163E\x03\x02\x02\x02\u163E\u16B8" +
		"\x03\x02\x02\x02\u163F\u1640\tW\x02\x02\u1640\u1641\x07\u019B\x02\x02" +
		"\u1641\u1642\x05\u02BE\u0160\x02\u1642\u1645\x07\u019C\x02\x02\u1643\u1644" +
		"\x06\u0159\x98\x02\u1644\u1646\x05\u02B6\u015C\x02\u1645\u1643\x03\x02" +
		"\x02\x02\u1645\u1646\x03\x02\x02\x02\u1646\u16B8\x03\x02\x02\x02\u1647" +
		"\u1648\x06\u0159\x99\x02\u1648\u16B8\x05\u02BC\u015F\x02\u1649\u164A\x07" +
		"\u01CC\x02\x02\u164A\u164C\x07\u019B\x02\x02\u164B\u164D\x07\u01AD\x02" +
		"\x02\u164C\u164B\x03\x02\x02\x02\u164C\u164D\x03\x02\x02\x02\u164D\u164E" +
		"\x03\x02\x02\x02\u164E\u164F\x07\u018B\x02\x02\u164F\u1652\x07\u019C\x02" +
		"\x02\u1650\u1651\x06\u0159\x9A\x02\u1651\u1653\x05\u02B6\u015C\x02\u1652" +
		"\u1650\x03\x02\x02\x02\u1652\u1653\x03\x02\x02\x02\u1653\u16B8\x03\x02" +
		"\x02\x02\u1654\u1655\x07\u01CC\x02\x02\u1655\u165D\x07\u019B\x02\x02\u1656" +
		"\u1658\x07\u01AD\x02\x02\u1657\u1656\x03\x02\x02\x02\u1657\u1658\x03\x02" +
		"\x02\x02\u1658\u1659\x03\x02\x02\x02\u1659\u165E\x07\u018B\x02\x02\u165A" +
		"\u165E\x05\u02BE\u0160\x02\u165B\u165C\x07\u01E6\x02\x02\u165C\u165E\x05" +
		"\u02EE\u0178\x02\u165D\u1657\x03\x02\x02\x02\u165D\u165A\x03\x02\x02\x02" +
		"\u165D\u165B\x03\x02\x02\x02\u165E\u165F\x03\x02\x02\x02\u165F\u1662\x07" +
		"\u019C\x02\x02\u1660\u1661\x06\u0159\x9B\x02\u1661\u1663\x05\u02B6\u015C" +
		"\x02\u1662\u1660\x03\x02\x02\x02\u1662\u1663\x03\x02\x02\x02\u1663\u16B8" +
		"\x03\x02\x02\x02\u1664\u1665\x07\u0238\x02\x02\u1665\u1667\x07\u019B\x02" +
		"\x02\u1666\u1668\x07\u01E6\x02\x02\u1667\u1666\x03\x02\x02\x02\u1667\u1668" +
		"\x03\x02\x02\x02\u1668\u1669\x03\x02\x02\x02\u1669\u166A\x05\u02BE\u0160" +
		"\x02\u166A\u166D\x07\u019C\x02\x02\u166B\u166C\x06\u0159\x9C\x02\u166C" +
		"\u166E\x05\u02B6\u015C\x02\u166D\u166B\x03\x02\x02\x02\u166D\u166E\x03" +
		"\x02\x02\x02\u166E\u16B8\x03\x02\x02\x02\u166F\u1670\x07\u0230\x02\x02" +
		"\u1670\u1672\x07\u019B\x02\x02\u1671\u1673\x07\u01E6\x02\x02\u1672\u1671" +
		"\x03\x02\x02\x02\u1672\u1673\x03\x02\x02\x02\u1673\u1674\x03\x02\x02\x02" +
		"\u1674\u1675\x05\u02BE\u0160\x02\u1675\u1678\x07\u019C\x02\x02\u1676\u1677" +
		"\x06\u0159\x9D\x02\u1677\u1679\x05\u02B6\u015C\x02\u1678\u1676\x03\x02" +
		"\x02\x02\u1678\u1679\x03\x02\x02\x02\u1679\u16B8\x03\x02\x02\x02\u167A" +
		"\u167B\x07\u0280\x02\x02\u167B\u167C\x07\u019B\x02\x02\u167C\u167D\x05" +
		"\u02BE\u0160\x02\u167D\u1680\x07\u019C\x02\x02\u167E\u167F\x06\u0159\x9E" +
		"\x02\u167F\u1681\x05\u02B6\u015C\x02\u1680\u167E\x03\x02\x02\x02\u1680" +
		"\u1681\x03\x02\x02\x02\u1681\u16B8\x03\x02\x02\x02\u1682\u1683\x07\u02A4" +
		"\x02\x02\u1683\u1684\x07\u019B\x02\x02\u1684\u1685\x05\u02BE\u0160\x02" +
		"\u1685\u1688\x07\u019C\x02\x02\u1686\u1687\x06\u0159\x9F\x02\u1687\u1689" +
		"\x05\u02B6\u015C\x02\u1688\u1686\x03\x02\x02\x02\u1688\u1689\x03\x02\x02" +
		"\x02\u1689\u16B8\x03\x02\x02\x02\u168A\u168B\x07\u027D\x02\x02\u168B\u168C" +
		"\x07\u019B\x02\x02\u168C\u168D\x05\u02BE\u0160\x02\u168D\u1690\x07\u019C" +
		"\x02\x02\u168E\u168F\x06\u0159\xA0\x02\u168F\u1691\x05\u02B6\u015C\x02" +
		"\u1690\u168E\x03\x02\x02\x02\u1690\u1691\x03\x02\x02\x02\u1691\u16B8\x03" +
		"\x02\x02\x02\u1692\u1693\x07\u02A7\x02\x02\u1693\u1694\x07\u019B\x02\x02" +
		"\u1694\u1695\x05\u02BE\u0160\x02\u1695\u1698\x07\u019C\x02\x02\u1696\u1697" +
		"\x06\u0159\xA1\x02\u1697\u1699\x05\u02B6\u015C\x02\u1698\u1696\x03\x02" +
		"\x02\x02\u1698\u1699\x03\x02\x02\x02\u1699\u16B8\x03\x02\x02\x02\u169A" +
		"\u169B\x07\u0285\x02\x02\u169B\u169D\x07\u019B\x02\x02\u169C\u169E\x07" +
		"\u01E6\x02\x02\u169D\u169C\x03\x02\x02\x02\u169D\u169E\x03\x02\x02\x02" +
		"\u169E\u169F\x03\x02\x02\x02\u169F\u16A0\x05\u02BE\u0160\x02\u16A0\u16A3" +
		"\x07\u019C\x02\x02\u16A1\u16A2\x06\u0159\xA2\x02\u16A2\u16A4\x05\u02B6" +
		"\u015C\x02\u16A3\u16A1\x03\x02\x02\x02\u16A3\u16A4\x03\x02\x02\x02\u16A4" +
		"\u16B8\x03\x02\x02\x02\u16A5\u16A6\x07\u0203\x02\x02\u16A6\u16A8\x07\u019B" +
		"\x02\x02\u16A7\u16A9\x07\u01E6\x02\x02\u16A8\u16A7\x03\x02\x02\x02\u16A8" +
		"\u16A9\x03\x02\x02\x02\u16A9\u16AA\x03\x02\x02\x02\u16AA\u16AC\x05\u02EE" +
		"\u0178\x02\u16AB\u16AD\x05\u014C\xA7\x02\u16AC\u16AB\x03\x02\x02\x02\u16AC" +
		"\u16AD\x03\x02\x02\x02\u16AD\u16B0\x03\x02\x02\x02\u16AE\u16AF\x07\u026A" +
		"\x02\x02\u16AF\u16B1\x05\u047E\u0240\x02\u16B0\u16AE\x03\x02\x02\x02\u16B0" +
		"\u16B1\x03\x02\x02\x02\u16B1\u16B2\x03\x02\x02\x02\u16B2\u16B5\x07\u019C" +
		"\x02\x02\u16B3\u16B4\x06\u0159\xA3\x02\u16B4\u16B6\x05\u02B6\u015C\x02" +
		"\u16B5\u16B3\x03\x02\x02\x02\u16B5\u16B6\x03\x02\x02\x02\u16B6\u16B8\x03" +
		"\x02\x02\x02\u16B7\u1634\x03\x02\x02\x02\u16B7\u163F\x03\x02\x02\x02\u16B7" +
		"\u1647\x03\x02\x02\x02\u16B7\u1649\x03\x02\x02\x02\u16B7\u1654\x03\x02" +
		"\x02\x02\u16B7\u1664\x03\x02\x02\x02\u16B7\u166F\x03\x02\x02\x02\u16B7" +
		"\u167A\x03\x02\x02\x02\u16B7\u1682\x03\x02\x02\x02\u16B7\u168A\x03\x02" +
		"\x02\x02\u16B7\u1692\x03\x02\x02\x02\u16B7\u169A\x03\x02\x02\x02\u16B7" +
		"\u16A5\x03\x02\x02\x02\u16B8\u02B1\x03\x02\x02\x02\u16B9\u16BA\x07\u02C0" +
		"\x02\x02\u16BA\u16BB\x07\u019B\x02\x02\u16BB\u16BC\x05\u02EE\u0178\x02" +
		"\u16BC\u16BD\x07\u019C\x02\x02\u16BD\u02B3\x03\x02\x02\x02\u16BE\u16BF" +
		"\tX\x02\x02\u16BF\u16C0\x05\u049E\u0250\x02\u16C0\u16C1\x05\u02B6\u015C" +
		"\x02\u16C1\u16E9\x03\x02\x02\x02\u16C2\u16C3\x07\u02D0\x02\x02\u16C3\u16C4" +
		"\x05\u02FE\u0180\x02\u16C4\u16C5\x05\u02B6\u015C\x02\u16C5\u16E9\x03\x02" +
		"\x02\x02\u16C6\u16C7\tY\x02\x02\u16C7\u16C8\x07\u019B\x02\x02\u16C8\u16CA" +
		"\x05\u029E\u0150\x02\u16C9\u16CB\x05\u02B8\u015D\x02\u16CA\u16C9\x03\x02" +
		"\x02\x02\u16CA\u16CB\x03\x02\x02\x02\u16CB\u16CC\x03\x02\x02\x02\u16CC" +
		"\u16CE\x07\u019C\x02\x02\u16CD\u16CF\x05\u02BA\u015E\x02\u16CE\u16CD\x03" +
		"\x02\x02\x02\u16CE\u16CF\x03\x02\x02\x02\u16CF\u16D0\x03\x02\x02\x02\u16D0" +
		"\u16D1\x05\u02B6\u015C\x02\u16D1\u16E9\x03\x02\x02\x02\u16D2\u16D3\tZ" +
		"\x02\x02\u16D3\u16D5\x05\u02FC\u017F\x02\u16D4\u16D6\x05\u02BA\u015E\x02" +
		"\u16D5\u16D4\x03\x02\x02\x02\u16D5\u16D6\x03\x02\x02\x02\u16D6\u16D7\x03" +
		"\x02\x02\x02\u16D7\u16D8\x05\u02B6\u015C\x02\u16D8\u16E9\x03\x02\x02\x02" +
		"\u16D9\u16DA\x07\u02CF\x02\x02\u16DA\u16DB\x07\u019B\x02\x02\u16DB\u16DC" +
		"\x05\u029E\u0150\x02\u16DC\u16DD\x07\u0198\x02\x02\u16DD\u16DE\x05\u02AA" +
		"\u0156\x02\u16DE\u16E1\x07\u019C\x02\x02\u16DF\u16E0\x07\u01FD\x02\x02" +
		"\u16E0\u16E2\t[\x02\x02\u16E1\u16DF\x03\x02\x02\x02\u16E1\u16E2\x03\x02" +
		"\x02\x02\u16E2\u16E4\x03\x02\x02\x02\u16E3\u16E5\x05\u02BA\u015E\x02\u16E4" +
		"\u16E3\x03\x02\x02\x02\u16E4\u16E5\x03\x02\x02\x02\u16E5\u16E6\x03\x02" +
		"\x02\x02\u16E6\u16E7\x05\u02B6\u015C\x02\u16E7\u16E9\x03\x02\x02\x02\u16E8" +
		"\u16BE\x03\x02\x02\x02\u16E8\u16C2\x03\x02\x02\x02\u16E8\u16C6\x03\x02" +
		"\x02\x02\u16E8\u16D2\x03\x02\x02\x02\u16E8\u16D9\x03\x02\x02\x02\u16E9" +
		"\u02B5\x03\x02\x02\x02\u16EA\u16ED\x07\u02D3\x02\x02\u16EB\u16EE\x05\u045E" +
		"\u0230\x02\u16EC\u16EE\x05\u0132\x9A\x02\u16ED\u16EB\x03\x02\x02\x02\u16ED" +
		"\u16EC\x03\x02\x02\x02\u16EE\u02B7\x03\x02\x02\x02\u16EF\u16F2\x07\u0198" +
		"\x02\x02\u16F0\u16F3\x05\u0472\u023A\x02\u16F1\u16F3\x07\u01A6\x02\x02" +
		"\u16F2\u16F0\x03\x02\x02\x02\u16F2\u16F1\x03\x02\x02\x02\u16F3\u16F6\x03" +
		"\x02\x02\x02\u16F4\u16F5\x07\u0198\x02\x02\u16F5\u16F7\x05\u029E\u0150" +
		"\x02\u16F6\u16F4\x03\x02\x02\x02\u16F6\u16F7\x03\x02\x02\x02\u16F7\u02B9" +
		"\x03\x02\x02\x02\u16F8\u16F9\t\\\x02\x02\u16F9\u16FA\x07\u02D1\x02\x02" +
		"\u16FA\u02BB\x03\x02\x02\x02\u16FB\u16FC\x07\u02BB\x02\x02\u16FC\u16FD" +
		"\x07\u019B\x02\x02\u16FD\u16FE\x05\u02BE\u0160\x02\u16FE\u1700\x07\u019C" +
		"\x02\x02\u16FF\u1701\x05\u02B6\u015C\x02\u1700\u16FF\x03\x02\x02\x02\u1700" +
		"\u1701\x03\x02\x02\x02\u1701\u170C\x03\x02\x02\x02\u1702\u1703\x07\u02BA" +
		"\x02\x02\u1703\u1704\x07\u019B\x02\x02\u1704\u1705\x05\u02BE\u0160\x02" +
		"\u1705\u1706\x07\u0198\x02\x02\u1706\u1707\x05\u02BE\u0160\x02\u1707\u1709" +
		"\x07\u019C\x02\x02\u1708\u170A\x05\u02B6\u015C\x02\u1709\u1708\x03\x02" +
		"\x02\x02\u1709\u170A\x03\x02\x02\x02\u170A\u170C\x03\x02\x02\x02\u170B" +
		"\u16FB\x03\x02\x02\x02\u170B\u1702\x03\x02\x02\x02\u170C\u02BD\x03\x02" +
		"\x02\x02\u170D\u170F\x07\u01AD\x02\x02\u170E\u170D\x03\x02\x02\x02\u170E" +
		"\u170F\x03\x02\x02\x02\u170F\u1710\x03\x02\x02\x02\u1710\u1711\x05\u029E" +
		"\u0150\x02\u1711\u02BF\x03\x02\x02\x02\u1712\u1718\x05\u02C2\u0162\x02" +
		"\u1713\u1714\x07\u019B\x02\x02\u1714\u1715\x05\u02C2\u0162\x02\u1715\u1716" +
		"\x07\u019C\x02\x02\u1716\u1718\x03\x02\x02\x02\u1717\u1712\x03\x02\x02" +
		"\x02\u1717\u1713\x03\x02\x02\x02\u1718\u02C1\x03\x02\x02\x02\u1719\u171E" +
		"\x05\u046A\u0236\x02\u171A\u171B\x07\u0198\x02\x02\u171B\u171D\x05\u046A" +
		"\u0236\x02\u171C\u171A\x03\x02\x02\x02\u171D\u1720\x03\x02\x02\x02\u171E" +
		"\u171C\x03\x02\x02\x02\u171E\u171F\x03\x02\x02\x02\u171F\u02C3\x03\x02" +
		"\x02\x02\u1720\u171E\x03\x02\x02\x02\u1721\u1722\x07\u0214\x02\x02\u1722" +
		"\u1723\x07M\x02\x02\u1723\u1731\x07\xE0\x02\x02\u1724\u1725\x07\u0214" +
		"\x02\x02\u1725\u1726\x07\u023B\x02\x02\u1726\u1727\x07\x1C\x02\x02\u1727" +
		"\u172B\x07\xE0\x02\x02\u1728\u1729\x07\u02AC\x02\x02\u1729\u172A\x07\u010D" +
		"\x02\x02\u172A\u172C\x07\x8A\x02\x02\u172B\u1728\x03\x02\x02\x02\u172B" +
		"\u172C\x03\x02\x02\x02\u172C\u1731\x03\x02\x02\x02\u172D\u172E\x07\u02AC" +
		"\x02\x02\u172E\u172F\x07\u010D\x02\x02\u172F\u1731\x07\x8A\x02\x02\u1730" +
		"\u1721\x03\x02\x02\x02\u1730\u1724\x03\x02\x02\x02\u1730\u172D\x03\x02" +
		"\x02\x02\u1731\u02C5\x03\x02\x02\x02\u1732\u1733\x07\u01C4\x02\x02\u1733" +
		"\u1734\x07\u019B\x02\x02\u1734\u1737\x05\u02EE\u0178\x02\u1735\u1736\x07" +
		"\u029C\x02\x02\u1736\u1738\x05\u03A2\u01D2\x02\u1737\u1735\x03\x02\x02" +
		"\x02\u1737\u1738\x03\x02\x02\x02\u1738\u1739\x03\x02\x02\x02\u1739\u173A" +
		"\x07\u019C\x02\x02\u173A\u1844\x03\x02\x02\x02\u173B\u173D\x07\u01D2\x02" +
		"\x02\u173C\u173E\x05\u049E\u0250\x02\u173D\u173C\x03\x02\x02\x02\u173D" +
		"\u173E\x03\x02\x02\x02\u173E\u1844\x03\x02\x02\x02\u173F\u1740\x07r\x02" +
		"\x02\u1740\u1844\x05\u02FC\u017F\x02\u1741\u1742\x07s\x02\x02\u1742\u1844" +
		"\x05\u02FC\u017F\x02\u1743\u1744\x07\xA0\x02\x02\u1744\u1844\x05\u02FC" +
		"\u017F\x02\u1745\u1746\x07\u0210\x02\x02\u1746\u1747\x07\u019B\x02\x02" +
		"\u1747\u1748\x05\u029E\u0150\x02\u1748\u1749\x07\u0198\x02\x02\u1749\u174A" +
		"\x05\u029E\u0150\x02\u174A\u174B\x07\u0198\x02\x02\u174B\u174C\x05\u029E" +
		"\u0150\x02\u174C\u174D\x07\u0198\x02\x02\u174D\u174E\x05\u029E\u0150\x02" +
		"\u174E\u174F\x07\u019C\x02\x02\u174F\u1844\x03\x02\x02\x02\u1750\u1751" +
		"\x07\u0211\x02\x02\u1751\u1752\x07\u019B\x02\x02\u1752\u1755\x05\u029E" +
		"\u0150\x02\u1753\u1754\x07\u0198\x02\x02\u1754\u1756\x05\u029E\u0150\x02" +
		"\u1755\u1753\x03\x02\x02\x02\u1756\u1757\x03\x02\x02\x02\u1757\u1755\x03" +
		"\x02\x02\x02\u1757\u1758\x03\x02\x02\x02\u1758\u1759\x03\x02\x02\x02\u1759" +
		"\u175A\x07\u019C\x02\x02\u175A\u1844\x03\x02\x02\x02\u175B\u175C\x07\u021F" +
		"\x02\x02\u175C\u175D\x07\u019B\x02\x02\u175D\u175E\x05\u029E\u0150\x02" +
		"\u175E\u175F\x07\u0198\x02\x02\u175F\u1760\x05\u029E\u0150\x02\u1760\u1761" +
		"\x07\u019C\x02\x02\u1761\u1844\x03\x02\x02\x02\u1762\u1763\x07\xDD\x02" +
		"\x02\u1763\u1844\x05\u02FC\u017F\x02\u1764\u1765\x07\xE1\x02\x02\u1765" +
		"\u1844\x05\u02FC\u017F\x02\u1766\u1767\x07\u0266\x02\x02\u1767\u1768\x07" +
		"\u019B\x02\x02\u1768\u1769\x05\u029E\u0150\x02\u1769\u176A\x07\u0198\x02" +
		"\x02\u176A\u176B\x05\u029E\u0150\x02\u176B\u176C\x07\u019C\x02\x02\u176C" +
		"\u1844\x03\x02\x02\x02\u176D\u176E\x07\u0133\x02\x02\u176E\u1844\x05\u02FC" +
		"\u017F\x02\u176F\u1770\x07\u0162\x02\x02\u1770\u1844\x05\u02FC\u017F\x02" +
		"\u1771\u1772\x07\u015F\x02\x02\u1772\u1773\x07\u019B\x02\x02\u1773\u1776" +
		"\x05\u029E\u0150\x02\u1774\u1775\x07\u0198\x02\x02\u1775\u1777\x05\u029E" +
		"\u0150\x02\u1776\u1774\x03\x02\x02\x02\u1776\u1777\x03\x02\x02\x02\u1777" +
		"\u1778\x03\x02\x02\x02\u1778\u1779\x07\u019C\x02\x02\u1779\u1844\x03\x02" +
		"\x02\x02\u177A\u1844\x05\u02D4\u016B\x02\u177B\u177C\x07\u016E\x02\x02" +
		"\u177C\u1844\x05\u049E\u0250\x02\u177D\u177E\x07\u02A1\x02\x02\u177E\u1844" +
		"\x05\u02FC\u017F\x02\u177F\u1780\x07\u017B\x02\x02\u1780\u1844\x05\u02FC" +
		"\u017F\x02\u1781\u1782\t]\x02\x02\u1782\u1783\x07\u019B\x02\x02\u1783" +
		"\u1784\x05\u029E\u0150\x02\u1784\u178A\x07\u0198\x02\x02\u1785\u178B\x05" +
		"\u029E\u0150\x02\u1786\u1787\x07\u0211\x02\x02\u1787\u1788\x05\u029E\u0150" +
		"\x02\u1788\u1789\x05\u02F6\u017C\x02\u1789\u178B\x03\x02\x02\x02\u178A" +
		"\u1785\x03\x02\x02\x02\u178A\u1786\x03\x02\x02\x02\u178B\u178C\x03\x02" +
		"\x02\x02\u178C\u178D\x07\u019C\x02\x02\u178D\u1844\x03\x02\x02\x02\u178E" +
		"\u1790\x07\u01CF\x02\x02\u178F\u1791\x05\u049E\u0250\x02\u1790\u178F\x03" +
		"\x02\x02\x02\u1790\u1791\x03\x02\x02\x02\u1791\u1844\x03\x02\x02\x02\u1792" +
		"\u1794\x07\u01D4\x02\x02\u1793\u1795\x05\u02CA\u0166\x02\u1794\u1793\x03" +
		"\x02\x02\x02\u1794\u1795\x03\x02\x02\x02\u1795\u1844\x03\x02\x02\x02\u1796" +
		"\u1797\t^\x02\x02\u1797\u1798\x07\u019B\x02\x02\u1798\u1799\x05\u029E" +
		"\u0150\x02\u1799\u179A\x07\u0198\x02\x02\u179A\u179B\x07\u0211\x02\x02" +
		"\u179B\u179C\x05\u029E\u0150\x02\u179C\u179D\x05\u02F6\u017C\x02\u179D" +
		"\u179E\x07\u019C\x02\x02\u179E\u1844\x03\x02\x02\x02\u179F\u17A0\x07\u01F6" +
		"\x02\x02\u17A0\u17A1\x07\u019B\x02\x02\u17A1\u17A2\x05\u02F6\u017C\x02" +
		"\u17A2\u17A3\x07\u01FD\x02\x02\u17A3\u17A4\x05\u029E\u0150\x02\u17A4\u17A5" +
		"\x07\u019C\x02\x02\u17A5\u1844\x03\x02\x02\x02\u17A6\u17A7\x07\x9B";
	private static readonly _serializedATNSegment12: string =
		"\x02\x02\u17A7\u17A8\x07\u019B\x02\x02\u17A8\u17A9\x05\u02D2\u016A\x02" +
		"\u17A9\u17AA\x07\u0198\x02\x02\u17AA\u17AB\x05\u029E\u0150\x02\u17AB\u17AC" +
		"\x07\u019C\x02\x02\u17AC\u1844\x03\x02\x02\x02\u17AD\u17AF\x07\u0240\x02" +
		"\x02\u17AE\u17B0\x05\u02CA\u0166\x02\u17AF\u17AE\x03\x02\x02\x02\u17AF" +
		"\u17B0\x03\x02\x02\x02\u17B0\u1844\x03\x02\x02\x02\u17B1\u17B2\x07\u0251" +
		"\x02\x02\u17B2\u17B3\x07\u019B\x02\x02\u17B3\u17B4\x05\u02A8\u0155\x02" +
		"\u17B4\u17B5\x07\u0214\x02\x02\u17B5\u17B6\x05\u029E\u0150\x02\u17B6\u17B7" +
		"\x07\u019C\x02\x02\u17B7\u1844\x03\x02\x02\x02\u17B8\u1844\x05\u02D6\u016C" +
		"\x02\u17B9\u17BB\x07\u0286\x02\x02\u17BA\u17BC\x05\u02CA\u0166\x02\u17BB" +
		"\u17BA\x03\x02\x02\x02\u17BB\u17BC\x03\x02\x02\x02\u17BC\u1844\x03\x02" +
		"\x02\x02\u17BD\u17BE\t_\x02\x02\u17BE\u17BF\x07\u019B\x02\x02\u17BF\u17C0" +
		"\x05\u02F8\u017D\x02\u17C0\u17C1\x07\u0198\x02\x02\u17C1\u17C2\x05\u029E" +
		"\u0150\x02\u17C2\u17C3\x07\u0198\x02\x02\u17C3\u17C4\x05\u029E\u0150\x02" +
		"\u17C4\u17C5\x07\u019C\x02\x02\u17C5\u1844\x03\x02\x02\x02\u17C6\u17C8" +
		"\x07\u029D\x02\x02\u17C7\u17C9\x05\u049E\u0250\x02\u17C8\u17C7\x03\x02" +
		"\x02\x02\u17C8\u17C9\x03\x02\x02\x02\u17C9\u1844\x03\x02\x02\x02\u17CA" +
		"\u17CC\x07\u029F\x02\x02\u17CB\u17CD\x05\u02CA\u0166\x02\u17CC\u17CB\x03" +
		"\x02\x02\x02\u17CC\u17CD\x03\x02\x02\x02\u17CD\u1844\x03\x02\x02\x02\u17CE" +
		"\u17D0\x07\u029E\x02\x02\u17CF\u17D1\x05\u02CA\u0166\x02\u17D0\u17CF\x03" +
		"\x02\x02\x02\u17D0\u17D1\x03\x02\x02\x02\u17D1\u1844\x03\x02\x02\x02\u17D2" +
		"\u17D3\x07\x04\x02\x02\u17D3\u1844\x05\u02FC\u017F\x02\u17D4\u17D5\x07" +
		"\n\x02\x02\u17D5\u1844\x05\u02FC\u017F\x02\u17D6\u17D7\x07W\x02\x02\u17D7" +
		"\u1844\x05\u02FA\u017E\x02\u17D8\u17D9\x07Y\x02\x02\u17D9\u1844\x05\u02FC" +
		"\u017F\x02\u17DA\u17DB\x07\u01D5\x02\x02\u17DB\u1844\x05\u049E\u0250\x02" +
		"\u17DC\u17DD\x07\u0209\x02\x02\u17DD\u17DE\x07\u019B\x02\x02\u17DE\u17DF" +
		"\x05\u029E\u0150\x02\u17DF\u17E0\x07\u0198\x02\x02\u17E0\u17E1\x05\u029E" +
		"\u0150\x02\u17E1\u17E2\x07\u0198\x02\x02\u17E2\u17E3\x05\u029E\u0150\x02" +
		"\u17E3\u17E4\x07\u019C\x02\x02\u17E4\u1844\x03\x02\x02\x02\u17E5\u17E6" +
		"\x07\x16\x02\x02\u17E6\u17E7\x07\u019B\x02\x02\u17E7\u17E8\x05\u029E\u0150" +
		"\x02\u17E8\u17E9\x07\u0198\x02\x02\u17E9\u17EC\x05\u029E\u0150\x02\u17EA" +
		"\u17EB\x07\u0198\x02\x02\u17EB\u17ED\x05\u029E\u0150\x02\u17EC\u17EA\x03" +
		"\x02\x02\x02\u17EC\u17ED\x03\x02\x02\x02\u17ED\u17EE\x03\x02\x02\x02\u17EE" +
		"\u17EF\x07\u019C\x02\x02\u17EF\u1844\x03\x02\x02\x02\u17F0\u17F1\x07\xDB" +
		"\x02\x02\u17F1\u1844\x05\u02FC\u017F\x02\u17F2\u17F3\x07\u023A\x02\x02" +
		"\u17F3\u17F4\x07\u019B\x02\x02\u17F4\u17F5\x05\u029E\u0150\x02\u17F5\u17F6" +
		"\x07\u0198\x02\x02\u17F6\u17F7\x05\u029E\u0150\x02\u17F7\u17F8\x07\u019C" +
		"\x02\x02\u17F8\u1844\x03\x02\x02\x02\u17F9\u17FA\x06\u0164\xA4\x02\u17FA" +
		"\u17FB\x07\xF5\x02\x02\u17FB\u17FC\x07\u019B\x02\x02\u17FC\u17FD\x05\u0482" +
		"\u0242\x02\u17FD\u17FE\x07\u019C\x02\x02\u17FE\u1844\x03\x02\x02\x02\u17FF" +
		"\u1800\x06\u0164\xA5\x02\u1800\u1801\x07\xFD\x02\x02\u1801\u1844\x05\u02FC" +
		"\u017F\x02\u1802\u1803\x07\u010C\x02\x02\u1803\u1844\x05\u02FC\u017F\x02" +
		"\u1804\u1805\x07\u025F\x02\x02\u1805\u1806\x07\u019B\x02\x02\u1806\u1807" +
		"\x05\u029E\u0150\x02\u1807\u1808\x07\u0198\x02\x02\u1808\u1809\x05\u029E" +
		"\u0150\x02\u1809\u180A\x07\u019C\x02\x02\u180A\u1844\x03\x02\x02\x02\u180B" +
		"\u180C\x07\u0260\x02\x02\u180C\u180D\x07\u019B\x02\x02\u180D\u180E\x05" +
		"\u029E\u0150\x02\u180E\u180F\x07\u0198\x02\x02\u180F\u1810\x05\u029E\u0150" +
		"\x02\u1810\u1811\x07\u0198\x02\x02\u1811\u1812\x05\u029E\u0150\x02\u1812" +
		"\u1813\x07\u019C\x02\x02\u1813\u1844\x03\x02\x02\x02\u1814\u1815\x07\u0128" +
		"\x02\x02\u1815\u1844\x05\u02FC\u017F\x02\u1816\u1817\x07\u012D\x02\x02" +
		"\u1817\u1844\x05\u049E\u0250\x02\u1818\u1819\x074\x02\x02\u1819\u181A" +
		"\x07\u019B\x02\x02\u181A\u181B\x05\u029E\u0150\x02\u181B\u181C\x07\u0198" +
		"\x02\x02\u181C\u181D\x05\u029E\u0150\x02\u181D\u181E\x07\u019C\x02\x02" +
		"\u181E\u1844\x03\x02\x02\x02\u181F\u1820\x07\u0175\x02\x02\u1820\u1821" +
		"\x07\u019B\x02\x02\u1821\u1824\x05\u029E\u0150\x02\u1822\u1823\x07\u0198" +
		"\x02\x02\u1823\u1825\x05\u029E\u0150\x02\u1824\u1822\x03\x02\x02\x02\u1824" +
		"\u1825\x03\x02\x02\x02\u1825\u1826\x03\x02\x02\x02\u1826\u1827\x07\u019C" +
		"\x02\x02\u1827\u1844\x03\x02\x02\x02\u1828\u1829\x07\u0177\x02\x02\u1829" +
		"\u182A\x07\u019B\x02\x02\u182A\u183E\x05\u029E\u0150\x02\u182B\u182C\x07" +
		"\u01B1\x02\x02\u182C\u182D\x07\u01C4\x02\x02\u182D\u182F\x05\u039E\u01D0" +
		"\x02\u182E\u182B\x03\x02\x02\x02\u182E\u182F\x03\x02\x02\x02\u182F\u1832" +
		"\x03\x02\x02\x02\u1830\u1831\x06\u0164\xA6\x02\u1831\u1833\x05\u02CE\u0168" +
		"\x02\u1832\u1830\x03\x02\x02\x02\u1832\u1833\x03\x02\x02\x02\u1833\u183F" +
		"\x03\x02\x02\x02\u1834\u1835\x07\u01B1\x02\x02\u1835\u1836\x07\u01B7\x02" +
		"\x02\u1836\u183F\x05\u039E\u01D0\x02\u1837\u1838\x07\u0198\x02\x02\u1838" +
		"\u1839\x05\u046E\u0238\x02\u1839\u183A\x07\u0198\x02\x02\u183A\u183B\x05" +
		"\u046E\u0238\x02\u183B\u183C\x07\u0198\x02\x02\u183C\u183D\x05\u046E\u0238" +
		"\x02\u183D\u183F\x03\x02\x02\x02\u183E\u182E\x03\x02\x02\x02\u183E\u1834" +
		"\x03\x02\x02\x02\u183E\u1837\x03\x02\x02\x02\u183F\u1840\x03\x02\x02\x02" +
		"\u1840\u1841\x07\u019C\x02\x02\u1841\u1844\x03\x02\x02\x02\u1842\u1844" +
		"\x05\u02C8\u0165\x02\u1843\u1732\x03\x02\x02\x02\u1843\u173B\x03\x02\x02" +
		"\x02\u1843\u173F\x03\x02\x02\x02\u1843\u1741\x03\x02\x02\x02\u1843\u1743" +
		"\x03\x02\x02\x02\u1843\u1745\x03\x02\x02\x02\u1843\u1750\x03\x02\x02\x02" +
		"\u1843\u175B\x03\x02\x02\x02\u1843\u1762\x03\x02\x02\x02\u1843\u1764\x03" +
		"\x02\x02\x02\u1843\u1766\x03\x02\x02\x02\u1843\u176D\x03\x02\x02\x02\u1843" +
		"\u176F\x03\x02\x02\x02\u1843\u1771\x03\x02\x02\x02\u1843\u177A\x03\x02" +
		"\x02\x02\u1843\u177B\x03\x02\x02\x02\u1843\u177D\x03\x02\x02\x02\u1843" +
		"\u177F\x03\x02\x02\x02\u1843\u1781\x03\x02\x02\x02\u1843\u178E\x03\x02" +
		"\x02\x02\u1843\u1792\x03\x02\x02\x02\u1843\u1796\x03\x02\x02\x02\u1843" +
		"\u179F\x03\x02\x02\x02\u1843\u17A6\x03\x02\x02\x02\u1843\u17AD\x03\x02" +
		"\x02\x02\u1843\u17B1\x03\x02\x02\x02\u1843\u17B8\x03\x02\x02\x02\u1843" +
		"\u17B9\x03\x02\x02\x02\u1843\u17BD\x03\x02\x02\x02\u1843\u17C6\x03\x02" +
		"\x02\x02\u1843\u17CA\x03\x02\x02\x02\u1843\u17CE\x03\x02\x02\x02\u1843" +
		"\u17D2\x03\x02\x02\x02\u1843\u17D4\x03\x02\x02\x02\u1843\u17D6\x03\x02" +
		"\x02\x02\u1843\u17D8\x03\x02\x02\x02\u1843\u17DA\x03\x02\x02\x02\u1843" +
		"\u17DC\x03\x02\x02\x02\u1843\u17E5\x03\x02\x02\x02\u1843\u17F0\x03\x02" +
		"\x02\x02\u1843\u17F2\x03\x02\x02\x02\u1843\u17F9\x03\x02\x02\x02\u1843" +
		"\u17FF\x03\x02\x02\x02\u1843\u1802\x03\x02\x02\x02\u1843\u1804\x03\x02" +
		"\x02\x02\u1843\u180B\x03\x02\x02\x02\u1843\u1814\x03\x02\x02\x02\u1843" +
		"\u1816\x03\x02\x02\x02\u1843\u1818\x03\x02\x02\x02\u1843\u181F\x03\x02" +
		"\x02\x02\u1843\u1828\x03\x02\x02\x02\u1843\u1842\x03\x02\x02\x02\u1844" +
		"\u02C7\x03\x02\x02\x02\u1845\u1846\x06\u0165\xA7\x02\u1846\u1847\x07\x0F" +
		"\x02\x02\u1847\u1848\x07\u019B\x02\x02\u1848\u1849\x05\u029E\u0150\x02" +
		"\u1849\u184A\x07\u0198\x02\x02\u184A\u184B\x05\u029E\u0150\x02\u184B\u184C" +
		"\x07\u019C\x02\x02\u184C\u1865\x03\x02\x02\x02\u184D\u184E\x07\x9A\x02" +
		"\x02\u184E\u1850\x07\u019B\x02\x02\u184F\u1851\x05\u02EE\u0178\x02\u1850" +
		"\u184F\x03\x02\x02\x02\u1850\u1851\x03\x02\x02\x02\u1851\u1852\x03\x02" +
		"\x02\x02\u1852\u1865\x07\u019C\x02\x02\u1853\u1854\x07\xB4\x02\x02\u1854" +
		"\u1865\x05\u02FA\u017E\x02\u1855\u1856\x07\xE2\x02\x02\u1856\u1865\x05" +
		"\u02FA\u017E\x02\u1857\u1858\x07\xE3\x02\x02\u1858\u1865\x05\u02FA\u017E" +
		"\x02\u1859\u185A\x07\xE4\x02\x02\u185A\u1865\x05\u02FA\u017E\x02\u185B" +
		"\u185C\x07\u0102\x02\x02\u185C\u185D\x07\u019B\x02\x02\u185D\u185E\x05" +
		"\u029E\u0150\x02\u185E\u185F\x07\u0198\x02\x02\u185F\u1860\x05\u029E\u0150" +
		"\x02\u1860\u1861\x07\u019C\x02\x02\u1861\u1865\x03\x02\x02\x02\u1862\u1863" +
		"\x07\u0103\x02\x02\u1863\u1865\x05\u02FA\u017E\x02\u1864\u1845\x03\x02" +
		"\x02\x02\u1864\u184D\x03\x02\x02\x02\u1864\u1853\x03\x02\x02\x02\u1864" +
		"\u1855\x03\x02\x02\x02\u1864\u1857\x03\x02\x02\x02\u1864\u1859\x03\x02" +
		"\x02\x02\u1864\u185B\x03\x02\x02\x02\u1864\u1862\x03\x02\x02\x02\u1865" +
		"\u02C9\x03\x02\x02\x02\u1866\u1868\x07\u019B\x02\x02\u1867\u1869\x05\u02CC" +
		"\u0167\x02\u1868\u1867\x03\x02\x02\x02\u1868\u1869\x03\x02\x02\x02\u1869" +
		"\u186A\x03\x02\x02\x02\u186A\u186B\x07\u019C\x02\x02\u186B\u02CB\x03\x02" +
		"\x02\x02\u186C\u186D\x06\u0167\xA8\x02\u186D\u186E\x07\u017E\x02\x02\u186E" +
		"\u02CD\x03\x02\x02\x02\u186F\u187C\x07\xB3\x02\x02\u1870\u1871\x05\u0470" +
		"\u0239\x02\u1871\u1872\x07\u018A\x02\x02\u1872\u1873\x05\u0470\u0239\x02" +
		"\u1873\u187D\x03\x02\x02\x02\u1874\u1879\x05\u02D0\u0169\x02\u1875\u1876" +
		"\x07\u0198\x02\x02\u1876\u1878\x05\u02D0\u0169\x02\u1877\u1875\x03\x02" +
		"\x02\x02\u1878\u187B\x03\x02\x02\x02\u1879\u1877\x03\x02\x02\x02\u1879" +
		"\u187A\x03\x02\x02\x02\u187A\u187D\x03\x02\x02\x02\u187B\u1879\x03\x02" +
		"\x02\x02\u187C\u1870\x03\x02\x02\x02\u187C\u1874\x03\x02\x02\x02\u187D" +
		"\u02CF\x03\x02\x02\x02\u187E\u1884\x05\u0470\u0239\x02\u187F\u1881\t#" +
		"\x02\x02\u1880\u1882\x07\u0128\x02\x02\u1881\u1880\x03\x02\x02\x02\u1881" +
		"\u1882\x03\x02\x02\x02\u1882\u1885\x03\x02\x02\x02\u1883\u1885\x07\u0128" +
		"\x02\x02\u1884\u187F\x03\x02\x02\x02\u1884\u1883\x03\x02\x02\x02\u1884" +
		"\u1885\x03\x02\x02\x02\u1885\u02D1\x03\x02\x02\x02\u1886\u1887\t`\x02" +
		"\x02\u1887\u02D3\x03\x02\x02\x02\u1888\u1889\x07\u0292\x02\x02\u1889\u18A1" +
		"\x07\u019B\x02\x02\u188A\u188D\x05\u029E\u0150\x02\u188B\u188C\x07\u01FD" +
		"\x02\x02\u188C\u188E\x05\u029E\u0150\x02\u188D\u188B\x03\x02\x02\x02\u188D" +
		"\u188E\x03\x02\x02\x02\u188E\u18A2\x03\x02\x02\x02\u188F\u1891\x07\u021D" +
		"\x02\x02\u1890\u1892\x05\u029E\u0150\x02\u1891\u1890\x03\x02\x02\x02\u1891" +
		"\u1892\x03\x02\x02\x02\u1892\u1893\x03\x02\x02\x02\u1893\u1894\x07\u01FD" +
		"\x02\x02\u1894\u18A2\x05\u029E\u0150\x02\u1895\u1897\x07\u0290\x02\x02" +
		"\u1896\u1898\x05\u029E\u0150\x02\u1897\u1896\x03\x02\x02\x02\u1897\u1898" +
		"\x03\x02\x02\x02\u1898\u1899\x03\x02\x02\x02\u1899\u189A\x07\u01FD\x02" +
		"\x02\u189A\u18A2\x05\u029E\u0150\x02\u189B\u189D\x07\u01BD\x02\x02\u189C" +
		"\u189E\x05\u029E\u0150\x02\u189D\u189C\x03\x02\x02\x02\u189D\u189E\x03" +
		"\x02\x02\x02\u189E\u189F\x03\x02\x02\x02\u189F\u18A0\x07\u01FD\x02\x02" +
		"\u18A0\u18A2\x05\u029E\u0150\x02\u18A1\u188A\x03\x02\x02\x02\u18A1\u188F" +
		"\x03\x02\x02\x02\u18A1\u1895\x03\x02\x02\x02\u18A1\u189B\x03\x02\x02\x02" +
		"\u18A2\u18A3\x03\x02\x02\x02\u18A3\u18A4\x07\u019C\x02\x02\u18A4\u02D5" +
		"\x03\x02\x02\x02\u18A5\u18A6\x07\u0284\x02\x02\u18A6\u18A7\x07\u019B\x02" +
		"\x02\u18A7\u18B4\x05\u029E\u0150\x02\u18A8\u18A9\x07\u0198\x02\x02\u18A9" +
		"\u18AC\x05\u029E\u0150\x02\u18AA\u18AB\x07\u0198\x02\x02\u18AB\u18AD\x05" +
		"\u029E\u0150\x02\u18AC\u18AA\x03\x02\x02\x02\u18AC\u18AD\x03\x02\x02\x02" +
		"\u18AD\u18B5\x03\x02\x02\x02\u18AE\u18AF\x07\u01FD\x02\x02\u18AF\u18B2" +
		"\x05\u029E\u0150\x02\u18B0\u18B1\x07\u01FC\x02\x02\u18B1\u18B3\x05\u029E" +
		"\u0150\x02\u18B2\u18B0\x03\x02\x02\x02\u18B2\u18B3\x03\x02\x02\x02\u18B3" +
		"\u18B5\x03\x02\x02\x02\u18B4\u18A8\x03\x02\x02\x02\u18B4\u18AE\x03\x02" +
		"\x02\x02\u18B5\u18B6\x03\x02\x02\x02\u18B6\u18B7\x07\u019C\x02\x02\u18B7" +
		"\u02D7\x03\x02\x02\x02\u18B8\u18B9\x05\u0460\u0231\x02\u18B9\u18BB\x07" +
		"\u019B\x02\x02\u18BA\u18BC\x05\u02DA\u016E\x02\u18BB\u18BA\x03\x02\x02" +
		"\x02\u18BB\u18BC\x03\x02\x02\x02\u18BC\u18BD\x03\x02\x02\x02\u18BD\u18BE" +
		"\x07\u019C\x02\x02\u18BE\u18C7\x03\x02\x02\x02\u18BF\u18C0\x05\u0468\u0235" +
		"\x02\u18C0\u18C2\x07\u019B\x02\x02\u18C1\u18C3\x05\u02EE\u0178\x02\u18C2" +
		"\u18C1\x03\x02\x02\x02\u18C2\u18C3\x03\x02\x02\x02\u18C3\u18C4\x03\x02" +
		"\x02\x02\u18C4\u18C5\x07\u019C\x02\x02\u18C5\u18C7\x03\x02\x02\x02\u18C6" +
		"\u18B8\x03\x02\x02\x02\u18C6\u18BF\x03\x02\x02\x02\u18C7\u02D9\x03\x02" +
		"\x02\x02\u18C8\u18CD\x05\u02DC\u016F\x02\u18C9\u18CA\x07\u0198\x02\x02" +
		"\u18CA\u18CC\x05\u02DC\u016F\x02\u18CB\u18C9\x03\x02\x02\x02\u18CC\u18CF" +
		"\x03\x02\x02\x02\u18CD\u18CB\x03\x02\x02\x02\u18CD\u18CE\x03\x02\x02\x02" +
		"\u18CE\u02DB\x03\x02\x02\x02\u18CF\u18CD\x03\x02\x02\x02\u18D0\u18D2\x05" +
		"\u029E\u0150\x02\u18D1\u18D3\x05\u0160\xB1\x02\u18D2\u18D1\x03\x02\x02" +
		"\x02\u18D2\u18D3\x03\x02\x02\x02\u18D3\u02DD\x03\x02\x02\x02\u18D4\u18D7" +
		"\x05\u02E0\u0171\x02\u18D5\u18D6\x07\u0182\x02\x02\u18D6\u18D8\x05\u029E" +
		"\u0150\x02\u18D7\u18D5\x03\x02\x02\x02\u18D7\u18D8\x03\x02\x02\x02\u18D8" +
		"\u18DB\x03\x02\x02\x02\u18D9\u18DB\x05\u02E2\u0172\x02\u18DA\u18D4\x03" +
		"\x02\x02\x02\u18DA\u18D9\x03\x02\x02\x02\u18DB\u02DF\x03\x02\x02\x02\u18DC" +
		"\u18DD\x07\u01A2\x02\x02\u18DD\u18E0\x05\u0496\u024C\x02\u18DE\u18E0\x07" +
		"\u01A3\x02\x02\u18DF\u18DC\x03\x02\x02\x02\u18DF\u18DE\x03\x02\x02\x02" +
		"\u18E0\u02E1\x03\x02\x02\x02\u18E1\u18E3\x07\u01A4\x02\x02\u18E2\u18E4" +
		"\x05\u04A4\u0253\x02\u18E3\u18E2\x03\x02\x02\x02\u18E3\u18E4\x03\x02\x02" +
		"\x02\u18E4\u18E5\x03\x02\x02\x02\u18E5\u18E7\x05\u0496\u024C\x02\u18E6" +
		"\u18E8\x05\u046C\u0237\x02\u18E7\u18E6\x03\x02\x02\x02\u18E7\u18E8\x03" +
		"\x02\x02\x02\u18E8\u02E3\x03\x02\x02\x02\u18E9\u18EA\x06\u0173\xA9\x02" +
		"\u18EA\u18EC\x05\u0462\u0232\x02\u18EB\u18ED\x05\u046C\u0237\x02\u18EC" +
		"\u18EB\x03\x02\x02\x02\u18EC\u18ED\x03\x02\x02\x02\u18ED\u18F4\x03\x02" +
		"\x02\x02\u18EE\u18EF\x06\u0173\xAA\x02\u18EF\u18F1\x05\u0498\u024D\x02" +
		"\u18F0\u18F2\x05\u046C\u0237\x02\u18F1\u18F0\x03\x02\x02\x02\u18F1\u18F2" +
		"\x03\x02\x02\x02\u18F2\u18F4\x03\x02\x02\x02\u18F3\u18E9\x03\x02\x02\x02" +
		"\u18F3\u18EE\x03\x02\x02\x02\u18F4\u18F8\x03\x02\x02\x02\u18F5\u18F6\x07" +
		"\u01E0\x02\x02\u18F6\u18F8\x05\u046C\u0237\x02\u18F7\u18F3\x03\x02\x02" +
		"\x02\u18F7\u18F5\x03\x02\x02\x02\u18F8\u02E5\x03\x02\x02\x02\u18F9\u18FA" +
		"\x07\u02A9\x02\x02\u18FA\u18FB\x05\u029E\u0150\x02\u18FB\u02E7\x03\x02" +
		"\x02\x02\u18FC\u18FD\x07\u028B\x02\x02\u18FD\u18FE\x05\u029E\u0150\x02" +
		"\u18FE\u02E9\x03\x02\x02\x02\u18FF\u1900\x07\u01EC\x02\x02\u1900\u1901" +
		"\x05\u029E\u0150\x02\u1901\u02EB\x03\x02\x02\x02\u1902\u1904\x07\u01B7" +
		"\x02\x02\u1903\u1905\x05\u0394\u01CB\x02\u1904\u1903\x03\x02\x02\x02\u1904" +
		"\u1905\x03\x02\x02\x02\u1905\u1930\x03\x02\x02\x02\u1906\u1908\x07\u01C4" +
		"\x02\x02\u1907\u1909\x05\u0394\u01CB\x02\u1908\u1907\x03\x02\x02\x02\u1908" +
		"\u1909\x03\x02\x02\x02\u1909\u190B\x03\x02\x02\x02\u190A\u190C\x05\u0398" +
		"\u01CD\x02\u190B\u190A\x03\x02\x02\x02\u190B\u190C\x03\x02\x02\x02\u190C" +
		"\u1930\x03\x02\x02\x02\u190D\u190F\x05\u0390\u01C9\x02\u190E\u1910\x05" +
		"\u0394\u01CB\x02\u190F\u190E\x03\x02\x02\x02\u190F\u1910\x03\x02\x02\x02" +
		"\u1910\u1930\x03\x02\x02\x02\u1911\u1913\x07.\x02\x02\u1912\u1914\x07" +
		"\u0213\x02\x02\u1913\u1912\x03\x02\x02\x02\u1913\u1914\x03\x02\x02\x02" +
		"\u1914\u1930\x03\x02\x02\x02\u1915\u1917\x07\u0298\x02\x02\u1916\u1918" +
		"\x07\u0213\x02\x02\u1917\u1916\x03\x02\x02\x02\u1917\u1918\x03\x02\x02" +
		"\x02\u1918\u1930\x03\x02\x02\x02\u1919\u1930\x07r\x02\x02\u191A\u191C" +
		"\x07\u0162\x02\x02\u191B\u191D\x05\u03A0\u01D1\x02\u191C\u191B\x03\x02" +
		"\x02\x02\u191C\u191D\x03\x02\x02\x02\u191D\u1930\x03\x02\x02\x02\u191E" +
		"\u1920\x07q\x02\x02\u191F\u1921\x05\u03A0\u01D1\x02\u1920\u191F\x03\x02" +
		"\x02\x02\u1920\u1921\x03\x02\x02\x02\u1921\u1930\x03\x02\x02\x02\u1922" +
		"\u1924\x07\u01DE\x02\x02\u1923\u1925\x05\u0490\u0249\x02\u1924\u1923\x03" +
		"\x02\x02\x02\u1924\u1925\x03\x02\x02\x02\u1925\u1930\x03\x02\x02\x02\u1926" +
		"\u1927\x06\u0177\xAB\x02\u1927\u1930\x07\xAE\x02\x02\u1928\u1929\x06\u0177" +
		"\xAC\x02\u1929\u1930\x05\u0392\u01CA\x02\u192A\u192B\x06\u0177\xAD\x02" +
		"\u192B\u192D\x07\u01F9\x02\x02\u192C\u192E\x05\u0492\u024A\x02\u192D\u192C" +
		"\x03\x02\x02\x02\u192D\u192E\x03\x02\x02\x02\u192E\u1930\x03\x02\x02\x02" +
		"\u192F\u1902\x03\x02\x02\x02\u192F\u1906\x03\x02\x02\x02\u192F\u190D\x03" +
		"\x02\x02\x02\u192F\u1911\x03\x02\x02\x02\u192F\u1915\x03\x02\x02\x02\u192F" +
		"\u1919\x03\x02\x02\x02\u192F\u191A\x03\x02\x02\x02\u192F\u191E\x03\x02" +
		"\x02\x02\u192F\u1922\x03\x02\x02\x02\u192F\u1926\x03\x02\x02\x02\u192F" +
		"\u1928\x03\x02\x02\x02\u192F\u192A\x03\x02\x02\x02\u1930\u02ED\x03\x02" +
		"\x02\x02\u1931\u1936\x05\u029E\u0150\x02\u1932\u1933\x07\u0198\x02\x02" +
		"\u1933\u1935\x05\u029E\u0150\x02\u1934\u1932\x03\x02\x02\x02\u1935\u1938" +
		"\x03\x02\x02\x02\u1936\u1934\x03\x02\x02\x02\u1936\u1937\x03\x02\x02\x02" +
		"\u1937\u02EF\x03\x02\x02\x02\u1938\u1936\x03\x02\x02\x02\u1939\u193A\x07" +
		"\u01C4\x02\x02\u193A\u193D\x07\u026D\x02\x02\u193B\u193D\x07\n\x02\x02" +
		"\u193C\u1939\x03\x02\x02\x02\u193C\u193B\x03\x02\x02\x02\u193D\u02F1\x03" +
		"\x02\x02\x02\u193E\u193F\ta\x02\x02\u193F\u02F3\x03\x02\x02\x02\u1940" +
		"\u1941\tb\x02\x02\u1941\u02F5\x03\x02\x02\x02\u1942\u1945\x05\u02F8\u017D" +
		"\x02\u1943\u1945\tc\x02\x02\u1944\u1942\x03\x02\x02\x02\u1944\u1943\x03" +
		"\x02\x02\x02\u1945\u02F7\x03\x02\x02\x02\u1946\u1947\td\x02\x02\u1947" +
		"\u02F9\x03\x02\x02\x02\u1948\u1949\x07\u019B\x02\x02\u1949\u194A\x05\u02EE" +
		"\u0178\x02\u194A\u194B\x07\u019C\x02\x02\u194B\u02FB\x03\x02\x02\x02\u194C" +
		"\u194D\x07\u019B\x02\x02\u194D\u194E\x05\u029E\u0150\x02\u194E\u194F\x07" +
		"\u019C\x02\x02\u194F\u02FD\x03\x02\x02\x02\u1950\u1951\x07\u019B\x02\x02" +
		"\u1951\u1952\x05\u02AA\u0156\x02\u1952\u1953\x07\u019C\x02\x02\u1953\u02FF" +
		"\x03\x02\x02\x02\u1954\u1959\x05\u0302\u0182\x02\u1955\u1956\x07\u0198" +
		"\x02\x02\u1956\u1958\x05\u0302\u0182\x02\u1957\u1955\x03\x02\x02\x02\u1958" +
		"\u195B\x03\x02\x02\x02\u1959\u1957\x03\x02\x02\x02\u1959\u195A\x03\x02" +
		"\x02\x02\u195A\u0301\x03\x02\x02\x02\u195B\u1959\x03\x02\x02\x02\u195C" +
		"\u195E\x05\u029E\u0150\x02\u195D\u195F\x05\u014E\xA8\x02\u195E\u195D\x03" +
		"\x02\x02\x02\u195E\u195F\x03\x02\x02\x02\u195F\u0303\x03\x02\x02\x02\u1960" +
		"\u1965\x05\u0306\u0184\x02\u1961\u1962\x07\u0198\x02\x02\u1962\u1964\x05" +
		"\u0306\u0184\x02\u1963\u1961\x03\x02\x02\x02\u1964\u1967\x03\x02\x02\x02" +
		"\u1965\u1963\x03\x02\x02\x02\u1965\u1966\x03\x02\x02\x02\u1966\u0305\x03" +
		"\x02\x02\x02\u1967\u1965\x03\x02\x02\x02\u1968\u1969\x05\u029E\u0150\x02" +
		"\u1969\u0307\x03\x02\x02\x02\u196A\u196B\x06\u0185\xAE\x02\u196B\u196C" +
		"\x07\u01FC\x02\x02\u196C\u196D\x07S\x02\x02\u196D\u196E\x05\u0484\u0243" +
		"\x02\u196E\u0309\x03\x02\x02\x02\u196F\u197D\x05\x06\x04\x02\u1970\u197D" +
		"\x05\u030C\u0187\x02\u1971\u197D\x05\u030E\u0188\x02\u1972\u197D\x05\u0316" +
		"\u018C\x02\u1973\u197D\x05\u031A\u018E\x02\u1974\u197D\x05\u031C\u018F" +
		"\x02\u1975\u197D\x05\u0322\u0192\x02\u1976\u197D\x05\u0324\u0193\x02\u1977" +
		"\u197D\x05\u0340\u01A1\x02\u1978\u197D\x05\u033E\u01A0\x02\u1979\u197D" +
		"\x05\u0352\u01AA\x02\u197A\u197D\x05\u0356\u01AC\x02\u197B\u197D\x05\u0354" +
		"\u01AB\x02\u197C\u196F\x03\x02\x02\x02\u197C\u1970\x03\x02\x02\x02\u197C" +
		"\u1971\x03\x02\x02\x02\u197C\u1972\x03\x02\x02\x02\u197C\u1973\x03\x02" +
		"\x02\x02\u197C\u1974\x03\x02\x02\x02\u197C\u1975\x03\x02\x02\x02\u197C" +
		"\u1976\x03\x02\x02\x02\u197C\u1977\x03\x02\x02\x02\u197C\u1978\x03\x02" +
		"\x02\x02\u197C\u1979\x03\x02\x02\x02\u197C\u197A\x03\x02\x02\x02\u197C" +
		"\u197B\x03\x02\x02\x02\u197D\u030B\x03\x02\x02\x02\u197E\u197F\x07\u0264" +
		"\x02\x02\u197F\u1980\x05\u029E\u0150\x02\u1980\u030D\x03\x02\x02\x02\u1981" +
		"\u1982\x07\u0209\x02\x02\u1982\u1983\x05\u0310\u0189\x02\u1983\u1984\x07" +
		"\x12\x02\x02\u1984\u1985\x07\u0209\x02\x02\u1985\u030F\x03\x02\x02\x02" +
		"\u1986\u1987\x05\u029E\u0150\x02\u1987\u198C\x05\u0312\u018A\x02\u1988" +
		"\u1989\x07\u01ED\x02\x02\u1989\u198D\x05\u0310\u0189\x02\u198A\u198B\x07" +
		"\u01EC\x02\x02\u198B\u198D\x05\u0314\u018B\x02\u198C\u1988\x03\x02\x02" +
		"\x02\u198C\u198A\x03\x02\x02\x02\u198C\u198D\x03\x02\x02\x02\u198D\u0311" +
		"\x03\x02\x02\x02\u198E\u198F\x07\u028B\x02\x02\u198F\u1990\x05\u0314\u018B" +
		"\x02\u1990\u0313\x03\x02\x02\x02\u1991\u1992\x05\u030A\u0186\x02\u1992" +
		"\u1993\x07\u0199\x02\x02\u1993\u1995\x03\x02\x02\x02\u1994\u1991\x03\x02" +
		"\x02\x02\u1995\u1996\x03\x02\x02\x02\u1996\u1994\x03\x02\x02\x02\u1996" +
		"\u1997\x03\x02\x02\x02\u1997\u0315\x03\x02\x02\x02\u1998\u199A\x07\u01C1" +
		"\x02\x02\u1999\u199B\x05\u029E\u0150\x02\u199A\u1999\x03\x02\x02\x02\u199A" +
		"\u199B\x03\x02\x02\x02\u199B\u199F\x03\x02\x02\x02\u199C\u199D\x05\u02E6" +
		"\u0174\x02\u199D\u199E\x05\u0312\u018A\x02\u199E\u19A0\x03\x02\x02\x02" +
		"\u199F\u199C\x03\x02\x02\x02\u19A0\u19A1\x03\x02\x02\x02\u19A1\u199F\x03" +
		"\x02\x02\x02\u19A1\u19A2\x03\x02\x02\x02\u19A2\u19A4\x03\x02\x02\x02\u19A3" +
		"\u19A5\x05\u0318\u018D\x02\u19A4\u19A3\x03\x02\x02\x02\u19A4\u19A5\x03" +
		"\x02\x02\x02\u19A5\u19A6\x03\x02\x02\x02\u19A6\u19A7\x07\x12\x02\x02\u19A7" +
		"\u19A8\x07\u01C1\x02\x02\u19A8\u0317\x03\x02\x02\x02\u19A9\u19AA\x07\u01EC" +
		"\x02\x02\u19AA\u19AB\x05\u0314\u018B\x02\u19AB\u0319\x03\x02\x02\x02\u19AC" +
		"\u19AD\x05\u031E\u0190\x02\u19AD\u19AF\x05\u0320\u0191\x02\u19AE\u19B0" +
		"\x05\u0452\u022A\x02\u19AF\u19AE\x03\x02\x02\x02\u19AF\u19B0\x03\x02\x02" +
		"\x02\u19B0\u031B\x03\x02\x02\x02\u19B1\u19B2\x05\u0320\u0191\x02\u19B2" +
		"\u031D\x03\x02\x02\x02\u19B3\u19B4\x05\u0450\u0229\x02\u19B4\u19B5\x07" +
		"\u019A\x02\x02\u19B5\u031F\x03\x02\x02\x02\u19B6\u19B8\x07\x07\x02\x02" +
		"\u19B7\u19B9\x05\u032C\u0197\x02\u19B8\u19B7\x03\x02\x02\x02\u19B8\u19B9" +
		"\x03\x02\x02\x02\u19B9\u19BB\x03\x02\x02\x02\u19BA\u19BC\x05\u0314\u018B" +
		"\x02\u19BB\u19BA\x03\x02\x02\x02\u19BB\u19BC\x03\x02\x02\x02\u19BC\u19BD" +
		"\x03\x02\x02\x02\u19BD\u19BE\x07\x12\x02\x02\u19BE\u0321\x03\x02\x02\x02" +
		"\u19BF\u19C0\x05\u031E\u0190\x02\u19C0\u19C2\x05\u0324\u0193\x02\u19C1" +
		"\u19C3\x05\u0452\u022A\x02\u19C2\u19C1\x03\x02\x02\x02\u19C2\u19C3\x03" +
		"\x02\x02\x02\u19C3\u0323\x03\x02\x02\x02\u19C4\u19C8\x05\u0326\u0194\x02" +
		"\u19C5\u19C8\x05\u0328\u0195\x02\u19C6\u19C8\x05\u032A\u0196\x02\u19C7" +
		"\u19C4\x03\x02\x02\x02\u19C7\u19C5\x03\x02\x02\x02\u19C7\u19C6\x03\x02" +
		"\x02\x02\u19C8\u0325\x03\x02\x02\x02\u19C9\u19CA\x07\u022B\x02\x02\u19CA" +
		"\u19CB\x05\u0314\u018B\x02\u19CB\u19CC\x07\x12\x02\x02\u19CC\u19CD\x07" +
		"\u022B\x02\x02\u19CD\u0327\x03\x02\x02\x02\u19CE\u19CF\x07\u02AB\x02\x02" +
		"\u19CF\u19D0\x05\u029E\u0150\x02\u19D0\u19D1\x07\x11\x02\x02\u19D1\u19D2" +
		"\x05\u0314\u018B\x02\u19D2\u19D3\x07\x12\x02\x02\u19D3\u19D4\x07\u02AB" +
		"\x02\x02\u19D4\u0329\x03\x02\x02\x02\u19D5\u19D6\x07\u025F\x02\x02\u19D6" +
		"\u19D7\x05\u0314\u018B\x02\u19D7\u19D8\x07\u016C\x02\x02\u19D8\u19D9\x05" +
		"\u029E\u0150\x02\u19D9\u19DA\x07\x12\x02\x02\u19DA\u19DB\x07\u025F\x02" +
		"\x02\u19DB\u032B\x03\x02\x02\x02\u19DC\u19DD\x05\u032E\u0198\x02\u19DD" +
		"\u19DE\x07\u0199\x02\x02\u19DE\u19E0\x03\x02\x02\x02\u19DF\u19DC\x03\x02" +
		"\x02\x02\u19E0\u19E1\x03\x02\x02\x02\u19E1\u19DF\x03\x02\x02\x02\u19E1" +
		"\u19E2\x03\x02\x02\x02\u19E2\u032D\x03\x02\x02\x02\u19E3\u19E8\x05\u0330" +
		"\u0199\x02\u19E4\u19E8\x05\u0332\u019A\x02\u19E5\u19E8\x05\u0338\u019D" +
		"\x02\u19E6\u19E8\x05\u033C\u019F\x02\u19E7\u19E3\x03\x02\x02\x02\u19E7" +
		"\u19E4\x03\x02\x02\x02\u19E7\u19E5\x03\x02\x02\x02\u19E7\u19E6\x03\x02" +
		"\x02\x02\u19E8\u032F\x03\x02\x02\x02\u19E9\u19EA\x07\u01DF\x02\x02\u19EA" +
		"\u19EB\x05\u0464\u0233\x02\u19EB\u19ED\x05\u038E\u01C8\x02\u19EC\u19EE" +
		"\x05\u03D4\u01EB\x02\u19ED\u19EC\x03\x02\x02\x02\u19ED\u19EE\x03\x02\x02" +
		"\x02\u19EE\u19F1\x03\x02\x02\x02\u19EF\u19F0\x07\u01E0\x02\x02\u19F0\u19F2" +
		"\x05\u029E\u0150\x02\u19F1\u19EF\x03\x02\x02\x02\u19F1\u19F2\x03\x02\x02" +
		"\x02\u19F2\u0331\x03\x02\x02\x02\u19F3\u19F4\x07\u01DF\x02\x02\u19F4\u19F5" +
		"\x05\u0462\u0232\x02\u19F5\u19F6\x07\u01C8\x02\x02\u19F6\u19F7\x07\u01FC" +
		"\x02\x02\u19F7\u19F8\x05\u0334\u019B\x02\u19F8\u0333\x03\x02\x02\x02\u19F9" +
		"\u19FC\x05\u046E\u0238\x02\u19FA\u19FC\x05\u0336\u019C\x02\u19FB\u19F9" +
		"\x03\x02\x02\x02\u19FB\u19FA\x03\x02\x02\x02\u19FC\u0335\x03\x02\x02\x02" +
		"\u19FD\u19FF\x07\u0275\x02\x02\u19FE\u1A00\x07\u0172\x02\x02\u19FF\u19FE" +
		"\x03\x02\x02\x02\u19FF\u1A00\x03\x02\x02\x02\u1A00\u1A01\x03\x02\x02\x02" +
		"\u1A01\u1A02\x05\u0482\u0242\x02\u1A02\u0337\x03\x02\x02\x02\u1A03\u1A04" +
		"\x07\u01DF\x02\x02\u1A04\u1A05\te\x02\x02\u1A05\u1A06\x07\x18\x02\x02" +
		"\u1A06\u1A07\x07\u01FC\x02\x02\u1A07\u1A0C\x05\u033A\u019E\x02\u1A08\u1A09" +
		"\x07\u0198\x02\x02\u1A09\u1A0B\x05\u033A\u019E\x02\u1A0A\u1A08\x03\x02" +
		"\x02\x02\u1A0B\u1A0E\x03\x02\x02\x02\u1A0C\u1A0A\x03\x02\x02\x02\u1A0C" +
		"\u1A0D\x03\x02\x02\x02\u1A0D\u1A0F\x03\x02\x02\x02\u1A0E\u1A0C\x03\x02" +
		"\x02\x02\u1A0F\u1A10\x05\u030A\u0186\x02\u1A10\u0339\x03\x02\x02\x02\u1A11" +
		"\u1A19\x05\u0334\u019B\x02\u1A12\u1A19\x05\u0462\u0232\x02\u1A13\u1A19" +
		"\x07\u0276\x02\x02\u1A14\u1A15\x05\u02F2\u017A\x02\u1A15\u1A16\x07\x90" +
		"\x02\x02\u1A16\u1A19\x03\x02\x02\x02\u1A17\u1A19\x07\u0274\x02\x02\u1A18" +
		"\u1A11\x03\x02\x02\x02\u1A18\u1A12\x03\x02\x02\x02\u1A18\u1A13\x03\x02" +
		"\x02\x02\u1A18\u1A14\x03\x02\x02\x02\u1A18\u1A17\x03\x02\x02\x02\u1A19" +
		"\u033B\x03\x02\x02\x02\u1A1A\u1A1B\x07\u01DF\x02\x02\u1A1B\u1A1C\x05\u0462" +
		"\u0232\x02\u1A1C\u1A1D\x07\u01D3\x02\x02\u1A1D\u1A1E\x07\u01FC\x02\x02" +
		"\u1A1E\u1A1F\x05\u0110\x89\x02\u1A1F\u033D\x03\x02\x02\x02\u1A20\u1A21" +
		"\x07\u0218\x02\x02\u1A21\u1A22\x05\u0452\u022A\x02\u1A22\u033F\x03\x02" +
		"\x02\x02\u1A23\u1A24\x07\u021E\x02\x02\u1A24\u1A25\x05\u0452\u022A\x02" +
		"\u1A25\u0341\x03\x02\x02\x02\u1A26\u1A2A\x07\u01FF\x02\x02\u1A27\u1A2B" +
		"\x07m\x02\x02\u1A28\u1A29\x06\u01A2\xAF\x02\u1A29\u1A2B\x07\u0144\x02" +
		"\x02\u1A2A\u1A27\x03\x02\x02\x02\u1A2A\u1A28\x03\x02\x02\x02\u1A2A\u1A2B" +
		"\x03\x02\x02\x02\u1A2B\u1A2C\x03\x02\x02\x02\u1A2C\u1A3F\x07x\x02\x02" +
		"\u1A2D\u1A32\x05\u0346\u01A4\x02\u1A2E\u1A2F\x07\u0198\x02\x02\u1A2F\u1A31" +
		"\x05\u0346\u01A4\x02\u1A30\u1A2E\x03\x02\x02\x02\u1A31\u1A34\x03\x02\x02" +
		"\x02\u1A32\u1A30\x03\x02\x02\x02\u1A32\u1A33\x03\x02\x02\x02\u1A33\u1A40" +
		"\x03\x02\x02\x02\u1A34\u1A32\x03\x02\x02\x02\u1A35\u1A36\x07\u01C8\x02" +
		"\x02\u1A36\u1A37\x05\u0344\u01A3\x02\u1A37\u1A3C\x05\u0348\u01A5\x02\u1A38" +
		"\u1A39\x07\u0198\x02\x02\u1A39\u1A3B\x05\u0348\u01A5\x02\u1A3A\u1A38\x03" +
		"\x02\x02\x02\u1A3B\u1A3E\x03\x02\x02\x02\u1A3C\u1A3A\x03\x02\x02\x02\u1A3C" +
		"\u1A3D\x03\x02\x02\x02\u1A3D\u1A40\x03\x02\x02\x02\u1A3E\u1A3C\x03\x02" +
		"\x02\x02\u1A3F\u1A2D\x03\x02\x02\x02";
	private static readonly _serializedATNSegment13: string =
		"\u1A3F\u1A35\x03\x02\x02\x02\u1A40\u0343\x03\x02\x02\x02\u1A41\u1A45\x05" +
		"\u0476\u023C\x02\u1A42\u1A45\x05\u02DE\u0170\x02\u1A43\u1A45\x05\u0468" +
		"\u0235\x02\u1A44\u1A41\x03\x02\x02\x02\u1A44\u1A42\x03\x02\x02\x02\u1A44" +
		"\u1A43\x03\x02\x02\x02\u1A45\u0345\x03\x02\x02\x02\u1A46\u1A49\x05\u02DE" +
		"\u0170\x02\u1A47\u1A49\x05\u0462\u0232\x02\u1A48\u1A46\x03\x02\x02\x02" +
		"\u1A48\u1A47\x03\x02\x02\x02\u1A49\u1A4A\x03\x02\x02\x02\u1A4A\u1A4B\x07" +
		"\u0181\x02\x02\u1A4B\u1A4C\tf\x02\x02\u1A4C\u0347\x03\x02\x02\x02\u1A4D" +
		"\u1A50\x05\u02DE\u0170\x02\u1A4E\u1A50\x05\u0462\u0232\x02\u1A4F\u1A4D" +
		"\x03\x02\x02\x02\u1A4F\u1A4E\x03\x02\x02\x02\u1A50\u1A51\x03\x02\x02\x02" +
		"\u1A51\u1A54\x07\u0181\x02\x02\u1A52\u1A55\x05\u034A\u01A6\x02\u1A53\u1A55" +
		"\x07\u0126\x02\x02\u1A54\u1A52\x03\x02\x02\x02\u1A54\u1A53\x03\x02\x02" +
		"\x02\u1A55\u0349\x03\x02\x02\x02\u1A56\u1A57\tg\x02\x02\u1A57\u034B\x03" +
		"\x02\x02\x02\u1A58\u1A5B\x07\u0270\x02\x02\u1A59\u1A5C\x05\u0462\u0232" +
		"\x02\u1A5A\u1A5C\x05\u0336\u019C\x02\u1A5B\u1A59\x03\x02\x02\x02\u1A5B" +
		"\u1A5A\x03\x02\x02\x02\u1A5C\u1A66\x03\x02\x02\x02\u1A5D\u1A5E\x07\u026D" +
		"\x02\x02\u1A5E\u1A63\x05\u0350\u01A9\x02\u1A5F\u1A60\x07\u0198\x02\x02" +
		"\u1A60\u1A62\x05\u0350\u01A9\x02\u1A61\u1A5F\x03\x02\x02\x02\u1A62\u1A65" +
		"\x03\x02\x02\x02\u1A63\u1A61\x03\x02\x02\x02\u1A63\u1A64\x03\x02\x02\x02" +
		"\u1A64\u1A67\x03\x02\x02\x02\u1A65\u1A63\x03\x02\x02\x02\u1A66\u1A5D\x03" +
		"\x02\x02\x02\u1A66\u1A67\x03\x02\x02\x02\u1A67\u034D\x03\x02\x02\x02\u1A68" +
		"\u1A6E\x07\u0262\x02\x02\u1A69\u1A6B\x07\u0275\x02\x02\u1A6A\u1A6C\x07" +
		"\u0172\x02\x02\u1A6B\u1A6A\x03\x02\x02\x02\u1A6B\u1A6C\x03\x02\x02\x02" +
		"\u1A6C\u1A6D\x03\x02\x02\x02\u1A6D\u1A6F\x05\u0496\u024C\x02\u1A6E\u1A69" +
		"\x03\x02\x02\x02\u1A6E\u1A6F\x03\x02\x02\x02\u1A6F\u1A79\x03\x02\x02\x02" +
		"\u1A70\u1A71\x07\u026D\x02\x02\u1A71\u1A76\x05\u0350\u01A9\x02\u1A72\u1A73" +
		"\x07\u0198\x02\x02\u1A73\u1A75\x05\u0350\u01A9\x02\u1A74\u1A72\x03\x02" +
		"\x02\x02\u1A75\u1A78\x03\x02\x02\x02\u1A76\u1A74\x03\x02\x02\x02\u1A76" +
		"\u1A77\x03\x02\x02\x02\u1A77\u1A7A\x03\x02\x02\x02\u1A78\u1A76\x03\x02" +
		"\x02\x02\u1A79\u1A70\x03\x02\x02\x02\u1A79\u1A7A\x03\x02\x02\x02\u1A7A" +
		"\u034F\x03\x02\x02\x02\u1A7B\u1A7C\x05\u034A\u01A6\x02\u1A7C\u1A7D\x07" +
		"\u0181\x02\x02\u1A7D\u1A7E\x05\u0344\u01A3\x02\u1A7E\u0351\x03\x02\x02" +
		"\x02\u1A7F\u1A80\x07\x1E\x02\x02\u1A80\u1A81\x05\u0462\u0232\x02\u1A81" +
		"\u0353\x03\x02\x02\x02\u1A82\u1A83\x07\f\x02\x02\u1A83\u1A84\x05\u0462" +
		"\u0232\x02\u1A84\u0355\x03\x02\x02\x02\u1A85\u1A8A\x07\u01F8\x02\x02\u1A86" +
		"\u1A88\x07\xED\x02\x02\u1A87\u1A86\x03\x02\x02\x02\u1A87\u1A88\x03\x02" +
		"\x02\x02\u1A88\u1A89\x03\x02\x02\x02\u1A89\u1A8B\x07\u01FD\x02\x02\u1A8A" +
		"\u1A87\x03\x02\x02\x02\u1A8A\u1A8B\x03\x02\x02\x02\u1A8B\u1A8C\x03\x02" +
		"\x02\x02\u1A8C\u1A8D\x05\u0462\u0232\x02\u1A8D\u1A8E\x07\u0212\x02\x02" +
		"\u1A8E\u1A8F\x05\u0464\u0233\x02\u1A8F\u0357\x03\x02\x02\x02\u1A90\u1A91" +
		"\x07C\x02\x02\u1A91\u1A9E\x05\u029E\u0150\x02\u1A92\u1A93\x07\x89\x02" +
		"\x02\u1A93\u1A94\x05\u029E\u0150\x02\u1A94\u1A97\x05\u02F6\u017C\x02\u1A95" +
		"\u1A96\x07\u0145\x02\x02\u1A96\u1A98\x05\u029E\u0150\x02\u1A97\u1A95\x03" +
		"\x02\x02\x02\u1A97\u1A98\x03\x02\x02\x02\u1A98\u1A9B\x03\x02\x02\x02\u1A99" +
		"\u1A9A\x07\x80\x02\x02\u1A9A\u1A9C\x05\u029E\u0150\x02\u1A9B\u1A99\x03" +
		"\x02\x02\x02\u1A9B\u1A9C\x03\x02\x02\x02\u1A9C\u1A9E\x03\x02\x02\x02\u1A9D" +
		"\u1A90\x03\x02\x02\x02\u1A9D\u1A92\x03\x02\x02\x02\u1A9E\u0359\x03\x02" +
		"\x02\x02\u1A9F\u1AA0\x05\u040A\u0206\x02\u1AA0\u1AA2\x05\u0366\u01B4\x02" +
		"\u1AA1\u1AA3\x05\u035C\u01AF\x02\u1AA2\u1AA1\x03\x02\x02\x02\u1AA2\u1AA3" +
		"\x03\x02\x02\x02\u1AA3\u035B\x03\x02\x02\x02\u1AA4\u1AA5\x06\u01AF\xB0" +
		"\x02\u1AA5\u1AA8\x05\u035E\u01B0\x02\u1AA6\u1AA8\x05\u0370\u01B9\x02\u1AA7" +
		"\u1AA4\x03\x02\x02\x02\u1AA7\u1AA6\x03\x02\x02\x02\u1AA8\u035D\x03\x02" +
		"\x02\x02\u1AA9\u1AAA\x07\u01C5\x02\x02\u1AAA\u1AAB\x05\u02FC\u017F\x02" +
		"\u1AAB\u035F\x03\x02\x02\x02\u1AAC\u1AAE\x07\u023F\x02\x02\u1AAD\u1AAC" +
		"\x03\x02\x02\x02\u1AAD\u1AAE\x03\x02\x02\x02\u1AAE\u1AAF\x03\x02\x02\x02" +
		"\u1AAF\u1AB0\x07\u02FA\x02\x02\u1AB0\u0361\x03\x02\x02\x02\u1AB1\u1AB3" +
		"\t(\x02\x02\u1AB2\u1AB4\x05r:\x02\u1AB3\u1AB2\x03\x02\x02\x02\u1AB3\u1AB4" +
		"\x03\x02\x02\x02\u1AB4\u1AB5\x03\x02\x02\x02\u1AB5\u1AB9\x05\u037C\u01BF" +
		"\x02\u1AB6\u1AB8\x05\u0380\u01C1\x02\u1AB7\u1AB6\x03\x02\x02\x02\u1AB8" +
		"\u1ABB\x03\x02\x02\x02\u1AB9\u1AB7\x03\x02\x02\x02\u1AB9\u1ABA\x03\x02" +
		"\x02\x02\u1ABA\u1AFD\x03\x02\x02\x02\u1ABB\u1AB9\x03\x02\x02\x02\u1ABC" +
		"\u1ABE\x07\u01FE\x02\x02\u1ABD\u1ABF\x05\u0192\xCA\x02\u1ABE\u1ABD\x03" +
		"\x02\x02\x02\u1ABE\u1ABF\x03\x02\x02\x02\u1ABF\u1AC1\x03\x02\x02\x02\u1AC0" +
		"\u1AC2\x05\u0414\u020B\x02\u1AC1\u1AC0\x03\x02\x02\x02\u1AC1\u1AC2\x03" +
		"\x02\x02\x02\u1AC2\u1AC3\x03\x02\x02\x02\u1AC3\u1AC7\x05\u037C\u01BF\x02" +
		"\u1AC4\u1AC6\x05\u0388\u01C5\x02\u1AC5\u1AC4\x03\x02\x02\x02\u1AC6\u1AC9" +
		"\x03\x02\x02\x02\u1AC7\u1AC5\x03\x02\x02\x02\u1AC7\u1AC8\x03\x02\x02\x02" +
		"\u1AC8\u1AFD\x03\x02\x02\x02\u1AC9\u1AC7\x03\x02\x02\x02\u1ACA\u1ACC\x07" +
		"\u0272\x02\x02\u1ACB\u1ACD\x05\u0192\xCA\x02\u1ACC\u1ACB\x03\x02\x02\x02" +
		"\u1ACC\u1ACD\x03\x02\x02\x02\u1ACD\u1ACF\x03\x02\x02\x02\u1ACE\u1AD0\x05" +
		"\u0414\u020B\x02\u1ACF\u1ACE\x03\x02\x02\x02\u1ACF\u1AD0\x03\x02\x02\x02" +
		"\u1AD0\u1AD1\x03\x02\x02\x02\u1AD1\u1AD5\x05\u037C\u01BF\x02\u1AD2\u1AD4" +
		"\x05\u038A\u01C6\x02\u1AD3\u1AD2\x03\x02\x02\x02\u1AD4\u1AD7\x03\x02\x02" +
		"\x02\u1AD5\u1AD3\x03\x02\x02\x02\u1AD5\u1AD6\x03\x02\x02\x02\u1AD6\u1AFD" +
		"\x03\x02\x02\x02\u1AD7\u1AD5\x03\x02\x02\x02\u1AD8\u1ADA\x05\u0364\u01B3" +
		"\x02\u1AD9\u1AD8\x03\x02\x02\x02\u1AD9\u1ADA\x03\x02\x02\x02\u1ADA\u1AFA" +
		"\x03\x02\x02\x02\u1ADB\u1ADC\x07\u0253\x02\x02\u1ADC\u1AE2\x07\u021B\x02" +
		"\x02\u1ADD\u1ADF\x07\u0296\x02\x02\u1ADE\u1AE0\x05\u0192\xCA\x02\u1ADF" +
		"\u1ADE\x03\x02\x02\x02\u1ADF\u1AE0\x03\x02\x02\x02\u1AE0\u1AE2\x03\x02" +
		"\x02\x02\u1AE1\u1ADB\x03\x02\x02\x02\u1AE1\u1ADD\x03\x02\x02\x02\u1AE2" +
		"\u1AE4\x03\x02\x02\x02\u1AE3\u1AE5\x05r:\x02\u1AE4\u1AE3\x03\x02\x02\x02" +
		"\u1AE4\u1AE5\x03\x02\x02\x02\u1AE5\u1AE6\x03\x02\x02\x02\u1AE6\u1AEA\x05" +
		"\u037C\u01BF\x02\u1AE7\u1AE9\x05\u0380\u01C1\x02\u1AE8\u1AE7\x03\x02\x02" +
		"\x02\u1AE9\u1AEC\x03\x02\x02\x02\u1AEA\u1AE8\x03\x02\x02\x02\u1AEA\u1AEB" +
		"\x03\x02\x02\x02\u1AEB\u1AFB\x03\x02\x02\x02\u1AEC\u1AEA\x03\x02\x02\x02" +
		"\u1AED\u1AEE\x07\u01FB\x02\x02\u1AEE\u1AF0\x07\u021B\x02\x02\u1AEF\u1AF1" +
		"\x05\u0414\u020B\x02\u1AF0\u1AEF\x03\x02\x02\x02\u1AF0\u1AF1\x03\x02\x02" +
		"\x02\u1AF1\u1AF2\x03\x02\x02\x02\u1AF2\u1AF3\x05\u0374\u01BB\x02\u1AF3" +
		"\u1AF4\x05\u0370\u01B9\x02\u1AF4\u1AFB\x03\x02\x02\x02\u1AF5\u1AF8\x05" +
		"\u035E\u01B0\x02\u1AF6\u1AF7\x06\u01B2\xB1\x02\u1AF7\u1AF9\x05\u0360\u01B1" +
		"\x02\u1AF8\u1AF6\x03\x02\x02\x02\u1AF8\u1AF9\x03\x02\x02\x02\u1AF9\u1AFB" +
		"\x03\x02\x02\x02\u1AFA\u1AE1\x03\x02\x02\x02\u1AFA\u1AED\x03\x02\x02\x02" +
		"\u1AFA\u1AF5\x03\x02\x02\x02\u1AFB\u1AFD\x03\x02\x02\x02\u1AFC\u1AB1\x03" +
		"\x02\x02\x02\u1AFC\u1ABC\x03\x02\x02\x02\u1AFC\u1ACA\x03\x02\x02\x02\u1AFC" +
		"\u1AD9\x03\x02\x02\x02\u1AFD\u0363\x03\x02\x02\x02\u1AFE\u1B00\x07\u01C9" +
		"\x02\x02\u1AFF\u1B01\x05\u0462\u0232\x02\u1B00\u1AFF\x03\x02\x02\x02\u1B00" +
		"\u1B01\x03\x02\x02\x02\u1B01\u0365\x03\x02\x02\x02\u1B02\u1B26\x05\u038E" +
		"\u01C8\x02\u1B03\u1B05\x05\u0368\u01B5\x02\u1B04\u1B03\x03\x02\x02\x02" +
		"\u1B05\u1B08\x03\x02\x02\x02\u1B06\u1B04\x03\x02\x02\x02\u1B06\u1B07\x03" +
		"\x02\x02\x02\u1B07\u1B27\x03\x02\x02\x02\u1B08\u1B06\x03\x02\x02\x02\u1B09" +
		"\u1B0B\x06\u01B4\xB2\x02\u1B0A\u1B0C\x05\u03D4\u01EB\x02\u1B0B\u1B0A\x03" +
		"\x02\x02\x02\u1B0B\u1B0C\x03\x02\x02\x02\u1B0C\u1B0F\x03\x02\x02\x02\u1B0D" +
		"\u1B0E\x07\u0200\x02\x02\u1B0E\u1B10\x07\x05\x02\x02\u1B0F\u1B0D\x03\x02" +
		"\x02\x02\u1B0F\u1B10\x03\x02\x02\x02\u1B10\u1B11\x03\x02\x02\x02\u1B11" +
		"\u1B12\x07\u01B1\x02\x02\u1B12\u1B14\x05\u02FC\u017F\x02\u1B13\u1B15\t" +
		"h\x02\x02\u1B14\u1B13\x03\x02\x02\x02\u1B14\u1B15\x03\x02\x02\x02\u1B15" +
		"\u1B24\x03\x02\x02\x02\u1B16\u1B1A\x06\u01B4\xB3\x02\u1B17\u1B19\x05\u036E" +
		"\u01B8\x02\u1B18\u1B17\x03\x02\x02\x02\u1B19\u1B1C\x03\x02\x02\x02\u1B1A" +
		"\u1B18\x03\x02\x02\x02\u1B1A\u1B1B\x03\x02\x02\x02\u1B1B\u1B25\x03\x02" +
		"\x02\x02\u1B1C\u1B1A\x03\x02\x02\x02\u1B1D\u1B21\x06\u01B4\xB4\x02\u1B1E" +
		"\u1B20\x05\u0368\u01B5\x02\u1B1F\u1B1E\x03\x02\x02\x02\u1B20\u1B23\x03" +
		"\x02\x02\x02\u1B21\u1B1F\x03\x02\x02\x02\u1B21\u1B22\x03\x02\x02\x02\u1B22" +
		"\u1B25\x03\x02\x02\x02\u1B23\u1B21\x03\x02\x02\x02\u1B24\u1B16\x03\x02" +
		"\x02\x02\u1B24\u1B1D\x03\x02\x02\x02\u1B25\u1B27\x03\x02\x02\x02\u1B26" +
		"\u1B06\x03\x02\x02\x02\u1B26\u1B09\x03\x02\x02\x02\u1B27\u0367\x03\x02" +
		"\x02\x02\u1B28\u1B2A\x07\u023F\x02\x02\u1B29\u1B28\x03\x02\x02\x02\u1B29" +
		"\u1B2A\x03\x02\x02\x02\u1B2A\u1B2B\x03\x02\x02\x02\u1B2B\u1B5D\x05\u048C" +
		"\u0247\x02\u1B2C\u1B2D\x06\u01B5\xB5\x02\u1B2D\u1B2E\x07\u023F\x02\x02" +
		"\u1B2E\u1B5D\x07\u02F0\x02\x02\u1B2F\u1B37\x07\u01E0\x02\x02\u1B30\u1B38" +
		"\x05\u0478\u023D\x02\u1B31\u1B33\x07\u0240\x02\x02\u1B32\u1B34\x05\u02CA" +
		"\u0166\x02\u1B33\u1B32\x03\x02\x02\x02\u1B33\u1B34\x03\x02\x02\x02\u1B34" +
		"\u1B38\x03\x02\x02\x02\u1B35\u1B36\x06\u01B5\xB6\x02\u1B36\u1B38\x05\u02FC" +
		"\u017F\x02\u1B37\u1B30\x03\x02\x02\x02\u1B37\u1B31\x03\x02\x02\x02\u1B37" +
		"\u1B35\x03\x02\x02\x02\u1B38\u1B5D\x03\x02\x02\x02\u1B39\u1B3A\x07\u0245" +
		"\x02\x02\u1B3A\u1B3B\x07\u0299\x02\x02\u1B3B\u1B3D\x07\u0240\x02\x02\u1B3C" +
		"\u1B3E\x05\u02CA\u0166\x02\u1B3D\u1B3C\x03\x02\x02\x02\u1B3D\u1B3E\x03" +
		"\x02\x02\x02\u1B3E\u1B5D\x03\x02\x02\x02\u1B3F\u1B5D\x07E\x02\x02\u1B40" +
		"\u1B41\x07\u0134\x02\x02\u1B41\u1B42\x07\u01E0\x02\x02\u1B42\u1B5D\x07" +
		"\u0172\x02\x02\u1B43\u1B45\x07\u0253\x02\x02\u1B44\u1B43\x03\x02\x02\x02" +
		"\u1B44\u1B45\x03\x02\x02\x02\u1B45\u1B46\x03\x02\x02\x02\u1B46\u1B5D\x07" +
		"\u021B\x02\x02\u1B47\u1B49\x07\u0296\x02\x02\u1B48\u1B4A\x07\u021B\x02" +
		"\x02\u1B49\u1B48\x03\x02\x02\x02\u1B49\u1B4A\x03\x02\x02\x02\u1B4A\u1B5D" +
		"\x03\x02\x02\x02\u1B4B\u1B4C\x07\r\x02\x02\u1B4C\u1B5D\x05\u0482\u0242" +
		"\x02\u1B4D\u1B5D\x05\u03D4\u01EB\x02\u1B4E\u1B4F\x07[\x02\x02\u1B4F\u1B5D" +
		"\x05\u036A\u01B6\x02\u1B50\u1B51\x07\u014A\x02\x02\u1B51\u1B5D\x05\u036C" +
		"\u01B7\x02\u1B52\u1B53\x06\u01B5\xB7\x02\u1B53\u1B54\x07\u02E3\x02\x02" +
		"\u1B54\u1B5D\x05\u0474\u023B\x02\u1B55\u1B57\x06\u01B5\xB8\x02\u1B56\u1B58" +
		"\x05\u0364\u01B3\x02\u1B57\u1B56\x03\x02\x02\x02\u1B57\u1B58\x03\x02\x02" +
		"\x02\u1B58\u1B59\x03\x02\x02\x02\u1B59\u1B5D\x05\u035E\u01B0\x02\u1B5A" +
		"\u1B5B\x06\u01B5\xB9\x02\u1B5B\u1B5D\x05\u0360\u01B1\x02\u1B5C\u1B29\x03" +
		"\x02\x02\x02\u1B5C\u1B2C\x03\x02\x02\x02\u1B5C\u1B2F\x03\x02\x02\x02\u1B5C" +
		"\u1B39\x03\x02\x02\x02\u1B5C\u1B3F\x03\x02\x02\x02\u1B5C\u1B40\x03\x02" +
		"\x02\x02\u1B5C\u1B44\x03\x02\x02\x02\u1B5C\u1B47\x03\x02\x02\x02\u1B5C" +
		"\u1B4B\x03\x02\x02\x02\u1B5C\u1B4D\x03\x02\x02\x02\u1B5C\u1B4E\x03\x02" +
		"\x02\x02\u1B5C\u1B50\x03\x02\x02\x02\u1B5C\u1B52\x03\x02\x02\x02\u1B5C" +
		"\u1B55\x03\x02\x02\x02\u1B5C\u1B5A\x03\x02\x02\x02\u1B5D\u0369\x03\x02" +
		"\x02\x02\u1B5E\u1B5F\ti\x02\x02\u1B5F\u036B\x03\x02\x02\x02\u1B60\u1B61" +
		"\tj\x02\x02\u1B61\u036D\x03\x02\x02\x02\u1B62\u1B64\x07\u0296\x02\x02" +
		"\u1B63\u1B65\x07\u021B\x02\x02\u1B64\u1B63\x03\x02\x02\x02\u1B64\u1B65" +
		"\x03\x02\x02\x02\u1B65\u1B71\x03\x02\x02\x02\u1B66\u1B67\x07\r\x02\x02" +
		"\u1B67\u1B71\x05\u047E\u0240\x02\u1B68\u1B6A\x05\u02F2\u017A\x02\u1B69" +
		"\u1B68\x03\x02\x02\x02\u1B69\u1B6A\x03\x02\x02\x02\u1B6A\u1B6B\x03\x02" +
		"\x02\x02\u1B6B\u1B71\x07\u0242\x02\x02\u1B6C\u1B6E\x07\u0253\x02\x02\u1B6D" +
		"\u1B6C\x03\x02\x02\x02\u1B6D\u1B6E\x03\x02\x02\x02\u1B6E\u1B6F\x03\x02" +
		"\x02\x02\u1B6F\u1B71\x07\u021B\x02\x02\u1B70\u1B62\x03\x02\x02\x02\u1B70" +
		"\u1B66\x03\x02\x02\x02\u1B70\u1B69\x03\x02\x02\x02\u1B70\u1B6D\x03\x02" +
		"\x02\x02\u1B71\u036F\x03\x02\x02\x02\u1B72\u1B73\x07\u025B\x02\x02\u1B73" +
		"\u1B75\x05\u0448\u0225\x02\u1B74\u1B76\x05\u0466\u0234\x02\u1B75\u1B74" +
		"\x03\x02\x02\x02\u1B75\u1B76\x03\x02\x02\x02\u1B76\u1B79\x03\x02\x02\x02" +
		"\u1B77\u1B78\x07\u022F\x02\x02\u1B78\u1B7A\tk\x02\x02\u1B79\u1B77\x03" +
		"\x02\x02\x02\u1B79\u1B7A\x03\x02\x02\x02\u1B7A\u1B8B\x03\x02\x02\x02\u1B7B" +
		"\u1B7C\x07\u0245\x02\x02\u1B7C\u1B7D\x07\u0299\x02\x02\u1B7D\u1B81\x05" +
		"\u0372\u01BA\x02\u1B7E\u1B7F\x07\u0245\x02\x02\u1B7F\u1B80\x07\u01E2\x02" +
		"\x02\u1B80\u1B82\x05\u0372\u01BA\x02\u1B81\u1B7E\x03\x02\x02\x02\u1B81" +
		"\u1B82\x03\x02\x02\x02\u1B82\u1B8C\x03\x02\x02\x02\u1B83\u1B84\x07\u0245" +
		"\x02\x02\u1B84\u1B85\x07\u01E2\x02\x02\u1B85\u1B89\x05\u0372\u01BA\x02" +
		"\u1B86\u1B87\x07\u0245\x02\x02\u1B87\u1B88\x07\u0299\x02\x02\u1B88\u1B8A" +
		"\x05\u0372\u01BA\x02\u1B89\u1B86\x03\x02\x02\x02\u1B89\u1B8A\x03\x02\x02" +
		"\x02\u1B8A\u1B8C\x03\x02\x02\x02\u1B8B\u1B7B\x03\x02\x02\x02\u1B8B\u1B83" +
		"\x03\x02\x02\x02\u1B8B\u1B8C\x03\x02\x02\x02\u1B8C\u0371\x03\x02\x02\x02" +
		"\u1B8D\u1B93\t\x04\x02\x02\u1B8E\u1B8F\x07\u026D\x02\x02\u1B8F\u1B93\x05" +
		"\u048C\u0247\x02\u1B90\u1B91\x07\x1D\x02\x02\u1B91\u1B93\x07;\x02\x02" +
		"\u1B92\u1B8D\x03\x02\x02\x02\u1B92\u1B8E\x03\x02\x02\x02\u1B92\u1B90\x03" +
		"\x02\x02\x02\u1B93\u0373\x03\x02\x02\x02\u1B94\u1B95\x07\u019B\x02\x02" +
		"\u1B95\u1B9A\x05\u0376\u01BC\x02\u1B96\u1B97\x07\u0198\x02\x02\u1B97\u1B99" +
		"\x05\u0376\u01BC\x02\u1B98\u1B96\x03\x02\x02\x02\u1B99\u1B9C\x03\x02\x02" +
		"\x02\u1B9A\u1B98\x03\x02\x02\x02\u1B9A\u1B9B\x03\x02\x02\x02\u1B9B\u1B9D" +
		"\x03\x02\x02\x02\u1B9C\u1B9A\x03\x02\x02\x02\u1B9D\u1B9E\x07\u019C\x02" +
		"\x02\u1B9E\u0375\x03\x02\x02\x02\u1B9F\u1BA1\x05\u0462\u0232\x02\u1BA0" +
		"\u1BA2\x05\u0394\u01CB\x02\u1BA1\u1BA0\x03\x02\x02\x02\u1BA1\u1BA2\x03" +
		"\x02\x02\x02\u1BA2\u1BA4\x03\x02\x02\x02\u1BA3\u1BA5\x05\u014E\xA8\x02" +
		"\u1BA4\u1BA3\x03\x02\x02\x02\u1BA4\u1BA5\x03\x02\x02\x02\u1BA5\u0377\x03" +
		"\x02\x02\x02\u1BA6\u1BA7\x07\u019B\x02\x02\u1BA7\u1BAC\x05\u037A\u01BE" +
		"\x02\u1BA8\u1BA9\x07\u0198\x02\x02\u1BA9\u1BAB\x05\u037A\u01BE\x02\u1BAA" +
		"\u1BA8\x03\x02\x02\x02\u1BAB\u1BAE\x03\x02\x02\x02\u1BAC\u1BAA\x03\x02" +
		"\x02\x02\u1BAC\u1BAD\x03\x02\x02\x02\u1BAD\u1BAF\x03\x02\x02\x02\u1BAE" +
		"\u1BAC\x03\x02\x02\x02\u1BAF\u1BB0\x07\u019C\x02\x02\u1BB0\u0379\x03\x02" +
		"\x02\x02\u1BB1\u1BB7\x05\u0376\u01BC\x02\u1BB2\u1BB4\x05\u02FC\u017F\x02" +
		"\u1BB3\u1BB5\x05\u014E\xA8\x02\u1BB4\u1BB3\x03\x02\x02\x02\u1BB4\u1BB5" +
		"\x03\x02\x02\x02\u1BB5\u1BB7\x03\x02\x02\x02\u1BB6\u1BB1\x03\x02\x02\x02" +
		"\u1BB6\u1BB2\x03\x02\x02\x02\u1BB7\u037B\x03\x02\x02\x02\u1BB8\u1BB9\x06" +
		"\u01BF\xBA\x02\u1BB9\u1BBD\x05\u0378\u01BD\x02\u1BBA\u1BBB\x06\u01BF\xBB" +
		"\x02\u1BBB\u1BBD\x05\u0374\u01BB\x02\u1BBC\u1BB8\x03\x02\x02\x02\u1BBC" +
		"\u1BBA\x03\x02\x02\x02\u1BBD\u037D\x03\x02\x02\x02\u1BBE\u1BBF\tl\x02" +
		"\x02\u1BBF\u037F\x03\x02\x02\x02\u1BC0\u1BC3\x05\u0382\u01C2\x02\u1BC1" +
		"\u1BC3\x05\u0386\u01C4\x02\u1BC2\u1BC0\x03\x02\x02\x02\u1BC2\u1BC1\x03" +
		"\x02\x02\x02\u1BC3\u0381\x03\x02\x02\x02\u1BC4\u1BC6\x07\xAF\x02\x02\u1BC5" +
		"\u1BC7\x07\u0181\x02\x02\u1BC6\u1BC5\x03\x02\x02\x02\u1BC6\u1BC7\x03\x02" +
		"\x02\x02\u1BC7\u1BC8\x03\x02\x02\x02\u1BC8\u1BCE\x05\u046E\u0238\x02\u1BC9" +
		"\u1BCA\x07\r\x02\x02\u1BCA\u1BCE\x05\u0482\u0242\x02\u1BCB\u1BCC\x06\u01C2" +
		"\xBC\x02\u1BCC\u1BCE\x05\u0384\u01C3\x02\u1BCD\u1BC4\x03\x02\x02\x02\u1BCD" +
		"\u1BC9\x03\x02\x02\x02\u1BCD\u1BCB\x03\x02\x02\x02\u1BCE\u0383\x03\x02" +
		"\x02\x02\u1BCF\u1BD0\tm\x02\x02\u1BD0\u0385\x03\x02\x02\x02\u1BD1\u1BD2" +
		"\tn\x02\x02\u1BD2\u1BD3\x05\u037E\u01C0\x02\u1BD3\u0387\x03\x02\x02\x02" +
		"\u1BD4\u1BD9\x05\u0382\u01C2\x02\u1BD5\u1BD6\x07\u02AC\x02\x02\u1BD6\u1BD7" +
		"\x07!\x02\x02\u1BD7\u1BD9\x05\u0462\u0232\x02\u1BD8\u1BD4\x03\x02\x02" +
		"\x02\u1BD8\u1BD5\x03\x02\x02\x02\u1BD9\u0389\x03\x02\x02\x02\u1BDA\u1BDB" +
		"\x05\u0382\u01C2\x02\u1BDB\u038B\x03\x02\x02\x02\u1BDC\u1BDD\x05\u038E" +
		"\u01C8\x02\u1BDD\u1BDE\x07\x02\x02\x03\u1BDE\u038D\x03\x02\x02\x02\u1BDF" +
		"\u1BE1\to\x02\x02\u1BE0\u1BE2\x05\u0394\u01CB\x02\u1BE1\u1BE0\x03\x02" +
		"\x02\x02\u1BE1\u1BE2\x03\x02\x02\x02\u1BE2\u1BE4\x03\x02\x02\x02\u1BE3" +
		"\u1BE5\x05\u0396\u01CC\x02\u1BE4\u1BE3\x03\x02\x02\x02\u1BE4\u1BE5\x03" +
		"\x02\x02\x02\u1BE5\u1C73\x03\x02\x02\x02\u1BE6\u1BEC\x07\u025A\x02\x02" +
		"\u1BE7\u1BE9\x07\u01E8\x02\x02\u1BE8\u1BEA\x07\u0252\x02\x02\u1BE9\u1BE8" +
		"\x03\x02\x02\x02\u1BE9\u1BEA\x03\x02\x02\x02\u1BEA\u1BEC\x03\x02\x02\x02" +
		"\u1BEB\u1BE6\x03\x02\x02\x02\u1BEB\u1BE7\x03\x02\x02\x02\u1BEC\u1BEE\x03" +
		"\x02\x02\x02\u1BED\u1BEF\x05\u0494\u024B\x02\u1BEE\u1BED\x03\x02\x02\x02" +
		"\u1BEE\u1BEF\x03\x02\x02\x02\u1BEF\u1BF1\x03\x02\x02\x02\u1BF0\u1BF2\x05" +
		"\u0396\u01CC\x02\u1BF1\u1BF0\x03\x02\x02\x02\u1BF1\u1BF2\x03\x02\x02\x02" +
		"\u1BF2\u1C73\x03\x02\x02\x02\u1BF3\u1BF5\tp\x02\x02\u1BF4\u1BF6\x05\u0490" +
		"\u0249\x02\u1BF5\u1BF4\x03\x02\x02\x02\u1BF5\u1BF6\x03\x02\x02\x02\u1BF6" +
		"\u1BF8\x03\x02\x02\x02\u1BF7\u1BF9\x05\u0396\u01CC\x02\u1BF8\u1BF7\x03" +
		"\x02\x02\x02\u1BF8\u1BF9\x03\x02\x02\x02\u1BF9\u1C73\x03\x02\x02\x02\u1BFA" +
		"\u1BFC\x07J\x02\x02\u1BFB\u1BFD\x05\u0394\u01CB\x02\u1BFC\u1BFB\x03\x02" +
		"\x02\x02\u1BFC\u1BFD\x03\x02\x02\x02\u1BFD\u1C73\x03\x02\x02\x02\u1BFE" +
		"\u1C73\tq\x02\x02\u1BFF\u1C01\x07\u01C4\x02\x02\u1C00\u1C02\x05\u0394" +
		"\u01CB\x02\u1C01\u1C00\x03\x02\x02\x02\u1C01\u1C02\x03\x02\x02\x02\u1C02" +
		"\u1C04\x03\x02\x02\x02\u1C03\u1C05\x05\u0398\u01CD\x02\u1C04\u1C03\x03" +
		"\x02\x02\x02\u1C04\u1C05\x03\x02\x02\x02\u1C05\u1C73\x03\x02\x02\x02\u1C06" +
		"\u1C08\x05\u0390\u01C9\x02\u1C07\u1C09\x05\u0394\u01CB\x02\u1C08\u1C07" +
		"\x03\x02\x02\x02\u1C08\u1C09\x03\x02\x02\x02\u1C09\u1C0B\x03\x02\x02\x02" +
		"\u1C0A\u1C0C\x07\u01B7\x02\x02\u1C0B\u1C0A\x03\x02\x02\x02\u1C0B\u1C0C" +
		"\x03\x02\x02\x02\u1C0C\u1C73\x03\x02\x02\x02\u1C0D\u1C0F\x07\u01B7\x02" +
		"\x02\u1C0E\u1C10\x05\u0394\u01CB\x02\u1C0F\u1C0E\x03\x02\x02\x02\u1C0F" +
		"\u1C10\x03\x02\x02\x02\u1C10\u1C73\x03\x02\x02\x02\u1C11\u1C12\x07\u01C4" +
		"\x02\x02\u1C12\u1C15\x07\u02A5\x02\x02\u1C13\u1C15\x07\u02A3\x02\x02\u1C14" +
		"\u1C11\x03\x02\x02\x02\u1C14\u1C13\x03\x02\x02\x02\u1C15\u1C16\x03\x02" +
		"\x02\x02\u1C16\u1C18\x05\u0394\u01CB\x02\u1C17\u1C19\x05\u0398\u01CD\x02" +
		"\u1C18\u1C17\x03\x02\x02\x02\u1C18\u1C19\x03\x02\x02\x02\u1C19\u1C73\x03" +
		"\x02\x02\x02\u1C1A\u1C1B\x07\xE9\x02\x02\u1C1B\u1C25\x07\u02A3\x02\x02" +
		"\u1C1C\u1C25\x07\xF3\x02\x02\u1C1D\u1C1E\x07\xEA\x02\x02\u1C1E\u1C25\x07" +
		"\u02A3\x02\x02\u1C1F\u1C20\x07\xE9\x02\x02\u1C20\u1C21\x07\u01C4\x02\x02" +
		"\u1C21\u1C25\x07\u02A5\x02\x02\u1C22\u1C23\x07\xEA\x02\x02\u1C23\u1C25" +
		"\x07\u02A5\x02\x02\u1C24\u1C1A\x03\x02\x02\x02\u1C24\u1C1C\x03\x02\x02" +
		"\x02\u1C24\u1C1D\x03\x02\x02\x02\u1C24\u1C1F\x03\x02\x02\x02\u1C24\u1C22" +
		"\x03\x02\x02\x02\u1C25\u1C26\x03\x02\x02\x02\u1C26\u1C28\x05\u0394\u01CB" +
		"\x02\u1C27\u1C29\x07\u01B7\x02\x02\u1C28\u1C27\x03\x02\x02\x02\u1C28\u1C29" +
		"\x03\x02\x02\x02\u1C29\u1C73\x03\x02\x02\x02\u1C2A\u1C2B\x07\u02A2\x02" +
		"\x02\u1C2B\u1C73\x05\u0394\u01CB\x02\u1C2C\u1C2E\x07\u017B\x02\x02\u1C2D" +
		"\u1C2F\x05\u0394\u01CB\x02\u1C2E\u1C2D\x03\x02\x02\x02\u1C2E\u1C2F\x03" +
		"\x02\x02\x02\u1C2F\u1C31\x03\x02\x02\x02\u1C30\u1C32\x05\u0396\u01CC\x02" +
		"\u1C31\u1C30\x03\x02\x02\x02\u1C31\u1C32\x03\x02\x02\x02\u1C32\u1C73\x03" +
		"\x02\x02\x02\u1C33\u1C73\x07r\x02\x02\u1C34\u1C36\x07\u0162\x02\x02\u1C35" +
		"\u1C37\x05\u03A0\u01D1\x02\u1C36\u1C35\x03\x02\x02\x02\u1C36\u1C37\x03" +
		"\x02\x02\x02\u1C37\u1C73\x03\x02\x02\x02\u1C38\u1C3A\x07\u015F\x02\x02" +
		"\u1C39\u1C3B\x05\u03A0\u01D1\x02\u1C3A\u1C39\x03\x02\x02\x02\u1C3A\u1C3B" +
		"\x03\x02\x02\x02\u1C3B\u1C73\x03\x02\x02\x02\u1C3C\u1C3E\x07q\x02\x02" +
		"\u1C3D\u1C3F\x05\u03A0\u01D1\x02\u1C3E\u1C3D\x03\x02\x02\x02\u1C3E\u1C3F" +
		"\x03\x02\x02\x02\u1C3F\u1C73\x03\x02\x02\x02\u1C40\u1C73\x07\u028C\x02" +
		"\x02\u1C41\u1C43\x07\u01BC\x02\x02\u1C42\u1C44\x05\u0394\u01CB\x02\u1C43" +
		"\u1C42\x03\x02\x02\x02\u1C43\u1C44\x03\x02\x02\x02\u1C44\u1C73\x03\x02" +
		"\x02\x02\u1C45\u1C73\tr\x02\x02\u1C46\u1C47\x07\u022A\x02\x02\u1C47\u1C73" +
		"\x07\u02A2\x02\x02\u1C48\u1C4C\x07\u022A\x02\x02\u1C49\u1C4A\x07\u01C4" +
		"\x02\x02\u1C4A\u1C4D\x07\u02A5\x02\x02\u1C4B\u1C4D\x07\u02A3\x02\x02\u1C4C" +
		"\u1C49\x03\x02\x02\x02\u1C4C\u1C4B\x03\x02\x02\x02\u1C4C\u1C4D\x03\x02" +
		"\x02\x02\u1C4D\u1C4F\x03\x02\x02\x02\u1C4E\u1C50\x05\u0398\u01CD\x02\u1C4F" +
		"\u1C4E\x03\x02\x02\x02\u1C4F\u1C50\x03\x02\x02\x02\u1C50\u1C73\x03\x02" +
		"\x02\x02\u1C51\u1C53\x07\u028E\x02\x02\u1C52\u1C54\x05\u0398\u01CD\x02" +
		"\u1C53\u1C52\x03\x02\x02\x02\u1C53\u1C54\x03\x02\x02\x02\u1C54\u1C73\x03" +
		"\x02\x02\x02\u1C55\u1C57\x07\u015B\x02\x02\u1C56\u1C58\x05\u0394\u01CB" +
		"\x02\u1C57\u1C56\x03\x02\x02\x02\u1C57\u1C58\x03\x02\x02\x02\u1C58\u1C5A" +
		"\x03\x02\x02\x02\u1C59\u1C5B\x05\u0398\u01CD\x02\u1C5A\u1C59\x03\x02\x02" +
		"\x02\u1C5A\u1C5B\x03\x02\x02\x02\u1C5B\u1C73\x03\x02\x02\x02\u1C5C\u1C5E" +
		"\x07\u0234\x02\x02\u1C5D\u1C5F\x05\u0398\u01CD\x02\u1C5E\u1C5D\x03\x02" +
		"\x02\x02\u1C5E\u1C5F\x03\x02\x02\x02\u1C5F\u1C73\x03\x02\x02\x02\u1C60" +
		"\u1C62\x07\u0228\x02\x02\u1C61\u1C63\x05\u0398\u01CD\x02\u1C62\u1C61\x03" +
		"\x02\x02\x02\u1C62\u1C63\x03\x02\x02\x02\u1C63\u1C73\x03\x02\x02\x02\u1C64" +
		"\u1C65\x07\x81\x02\x02\u1C65\u1C67\x05\u047A\u023E\x02\u1C66\u1C68\x05" +
		"\u0398\u01CD\x02\u1C67\u1C66\x03\x02\x02\x02\u1C67\u1C68\x03\x02\x02\x02" +
		"\u1C68\u1C73\x03\x02\x02\x02\u1C69\u1C6A\x07\u026D\x02\x02\u1C6A\u1C6C" +
		"\x05\u047A\u023E\x02\u1C6B\u1C6D\x05\u0398\u01CD\x02\u1C6C\u1C6B\x03\x02" +
		"\x02\x02\u1C6C\u1C6D\x03\x02\x02\x02\u1C6D\u1C73\x03\x02\x02\x02\u1C6E" +
		"\u1C73\x07\u0134\x02\x02\u1C6F\u1C70\x06\u01C8\xBD\x02\u1C70\u1C73\x07" +
		"\xAE\x02\x02\u1C71\u1C73\ts\x02\x02\u1C72\u1BDF\x03\x02\x02\x02\u1C72" +
		"\u1BEB\x03\x02\x02\x02\u1C72\u1BF3\x03\x02\x02\x02\u1C72\u1BFA\x03\x02" +
		"\x02\x02\u1C72\u1BFE\x03\x02\x02\x02\u1C72\u1BFF\x03\x02\x02\x02\u1C72" +
		"\u1C06\x03\x02\x02\x02\u1C72\u1C0D\x03\x02\x02\x02\u1C72\u1C14\x03\x02" +
		"\x02\x02\u1C72\u1C24\x03\x02\x02\x02\u1C72\u1C2A\x03\x02\x02\x02\u1C72" +
		"\u1C2C\x03\x02\x02\x02\u1C72\u1C33\x03\x02\x02\x02\u1C72\u1C34\x03\x02" +
		"\x02\x02\u1C72\u1C38\x03\x02\x02\x02\u1C72\u1C3C\x03\x02\x02\x02\u1C72" +
		"\u1C40\x03\x02\x02\x02\u1C72\u1C41\x03\x02\x02\x02\u1C72\u1C45\x03\x02" +
		"\x02\x02\u1C72\u1C46\x03\x02\x02\x02\u1C72\u1C48\x03\x02\x02\x02\u1C72" +
		"\u1C51\x03\x02\x02\x02\u1C72\u1C55\x03\x02\x02\x02\u1C72\u1C5C\x03\x02" +
		"\x02\x02\u1C72\u1C60\x03\x02\x02\x02\u1C72\u1C64\x03\x02\x02\x02\u1C72" +
		"\u1C69\x03\x02\x02\x02\u1C72\u1C6E\x03\x02\x02\x02\u1C72\u1C6F\x03\x02" +
		"\x02\x02\u1C72\u1C71\x03\x02\x02\x02\u1C73\u038F\x03\x02\x02\x02\u1C74" +
		"\u1C78\x07\xEA\x02\x02\u1C75\u1C76\x07\xE9\x02\x02\u1C76\u1C78\x07\u01C4" +
		"\x02\x02\u1C77\u1C74\x03\x02\x02\x02\u1C77\u1C75\x03\x02\x02\x02\u1C78" +
		"\u0391\x03\x02\x02\x02\u1C79\u1C7F\x07\u025A\x02\x02\u1C7A\u1C7C\x07\u01E8" +
		"\x02\x02\u1C7B\u1C7D\x07\u0252\x02\x02\u1C7C\u1C7B\x03\x02\x02\x02\u1C7C" +
		"\u1C7D\x03\x02\x02\x02\u1C7D\u1C7F\x03\x02\x02\x02\u1C7E\u1C79\x03\x02" +
		"\x02\x02\u1C7E\u1C7A\x03\x02\x02\x02\u1C7F\u0393\x03\x02\x02\x02\u1C80" +
		"\u1C83\x07\u019B\x02\x02\u1C81\u1C84\x05\u0474\u023B\x02\u1C82\u1C84\x07" +
		"\u01A9\x02\x02\u1C83\u1C81\x03\x02\x02\x02\u1C83\u1C82\x03\x02\x02\x02" +
		"\u1C84\u1C85\x03\x02\x02\x02\u1C85\u1C86\x07\u019C\x02\x02\u1C86\u0395" +
		"\x03\x02\x02\x02\u1C87\u1C89\tt\x02\x02\u1C88\u1C87\x03\x02\x02\x02\u1C89" +
		"\u1C8A\x03\x02\x02\x02\u1C8A\u1C88\x03\x02\x02\x02\u1C8A\u1C8B\x03\x02" +
		"\x02\x02\u1C8B\u0397\x03\x02\x02\x02\u1C8C\u1C9B\x05\u039A\u01CE\x02\u1C8D" +
		"\u1C9B\x05\u039C\u01CF\x02\u1C8E\u1C9B\x07\b\x02\x02\u1C8F\u1C90\x05\u02F0" +
		"\u0179\x02\u1C90\u1C92\x05\u03A2\u01D2\x02\u1C91\u1C93\x07\u01B7\x02\x02" +
		"\u1C92\u1C91\x03\x02\x02\x02\u1C92\u1C93\x03\x02\x02\x02\u1C93\u1C9B\x03" +
		"\x02\x02\x02\u1C94\u1C98\x07\u01B7\x02\x02\u1C95\u1C96\x05\u02F0\u0179" +
		"\x02\u1C96\u1C97\x05\u03A2\u01D2\x02\u1C97\u1C99\x03\x02\x02\x02\u1C98" +
		"\u1C95\x03\x02\x02\x02\u1C98\u1C99\x03\x02\x02\x02\u1C99\u1C9B\x03\x02" +
		"\x02\x02\u1C9A\u1C8C\x03\x02\x02\x02\u1C9A\u1C8D\x03\x02\x02\x02\u1C9A" +
		"\u1C8E\x03\x02\x02\x02\u1C9A\u1C8F\x03\x02\x02\x02\u1C9A\u1C94\x03\x02" +
		"\x02\x02\u1C9B\u0399\x03\x02\x02\x02\u1C9C\u1C9E\x07\x04\x02\x02\u1C9D" +
		"\u1C9F\x07\u01B7\x02\x02\u1C9E\u1C9D\x03\x02\x02\x02\u1C9E\u1C9F\x03\x02" +
		"\x02\x02\u1C9F\u1CA3\x03\x02\x02\x02\u1CA0\u1CA1\x07\u01B7\x02\x02\u1CA1" +
		"\u1CA3\x07\x04\x02\x02\u1CA2\u1C9C\x03\x02\x02\x02\u1CA2\u1CA0\x03\x02" +
		"\x02\x02\u1CA3\u039B\x03\x02\x02\x02\u1CA4\u1CA6\x075\x02\x02\u1CA5\u1CA7" +
		"\x07\u01B7\x02\x02\u1CA6\u1CA5\x03\x02\x02\x02\u1CA6\u1CA7\x03\x02\x02" +
		"\x02\u1CA7\u1CAB\x03\x02\x02\x02\u1CA8\u1CA9\x07\u01B7\x02\x02\u1CA9\u1CAB" +
		"\x075\x02\x02\u1CAA\u1CA4\x03\x02\x02\x02\u1CAA\u1CA8\x03\x02\x02\x02" +
		"\u1CAB\u039D\x03\x02\x02\x02\u1CAC\u1CAD\x07\u019B\x02\x02\u1CAD\u1CAE" +
		"\x05\u0470\u0239\x02\u1CAE\u1CAF\x07\u019C\x02\x02\u1CAF\u039F\x03\x02" +
		"\x02\x02\u1CB0\u1CB1\x07\u019B\x02\x02\u1CB1\u1CB2\x07\u017E\x02\x02\u1CB2" +
		"\u1CB3\x07\u019C\x02\x02\u1CB3\u03A1\x03\x02\x02\x02\u1CB4\u1CB9\x05\u0496" +
		"\u024C\x02\u1CB5\u1CB9\x07\u01B7\x02\x02\u1CB6\u1CB7\x06\u01D2\xBE\x02" +
		"\u1CB7\u1CB9\x07\u01E0\x02\x02\u1CB8\u1CB4\x03\x02\x02\x02\u1CB8\u1CB5" +
		"\x03\x02\x02\x02\u1CB8\u1CB6\x03\x02\x02\x02\u1CB9\u03A3\x03\x02\x02\x02" +
		"\u1CBA\u1CC0\x05\u0496\u024C\x02\u1CBB\u1CBC\x06\u01D3\xBF\x02\u1CBC\u1CC0" +
		"\x07\u01E0\x02\x02\u1CBD\u1CBE\x06\u01D3\xC0\x02\u1CBE\u1CC0\x07\u01B7" +
		"\x02\x02\u1CBF\u1CBA\x03\x02\x02\x02\u1CBF\u1CBB\x03\x02\x02\x02\u1CBF" +
		"\u1CBD\x03\x02\x02\x02\u1CC0\u03A5\x03\x02\x02\x02\u1CC1\u1CC8\x05\u03AA" +
		"\u01D6\x02\u1CC2\u1CC4\x07\u0198\x02\x02\u1CC3\u1CC2\x03\x02\x02\x02\u1CC3" +
		"\u1CC4\x03\x02\x02\x02\u1CC4\u1CC5\x03\x02\x02\x02\u1CC5\u1CC7\x05\u03AA" +
		"\u01D6\x02\u1CC6\u1CC3\x03\x02\x02\x02\u1CC7\u1CCA\x03\x02\x02\x02\u1CC8" +
		"\u1CC6\x03\x02\x02\x02\u1CC8\u1CC9";
	private static readonly _serializedATNSegment14: string =
		"\x03\x02\x02\x02\u1CC9\u03A7\x03\x02\x02\x02\u1CCA\u1CC8\x03\x02\x02\x02" +
		"\u1CCB\u1CCD\x05\u03AA\u01D6\x02\u1CCC\u1CCB\x03\x02\x02\x02\u1CCD\u1CCE" +
		"\x03\x02\x02\x02\u1CCE\u1CCC\x03\x02\x02\x02\u1CCE\u1CCF\x03\x02\x02\x02" +
		"\u1CCF\u03A9\x03\x02\x02\x02\u1CD0\u1CD2\x07\x82\x02\x02\u1CD1\u1CD3\x07" +
		"\u0181\x02\x02\u1CD2\u1CD1\x03\x02\x02\x02\u1CD2\u1CD3\x03\x02\x02\x02" +
		"\u1CD3\u1CD4\x03\x02\x02\x02\u1CD4\u1D52\x05\u0440\u0221\x02\u1CD5\u1CD6" +
		"\x06\u01D6\xC1\x02\u1CD6\u1CD8\x07\u02F1\x02\x02\u1CD7\u1CD9\x05\u04A0" +
		"\u0251\x02\u1CD8\u1CD7\x03\x02\x02\x02\u1CD8\u1CD9\x03\x02\x02\x02\u1CD9" +
		"\u1CDC\x03\x02\x02\x02\u1CDA\u1CDD\x07\u0242\x02\x02\u1CDB\u1CDD\x05\u0496" +
		"\u024C\x02\u1CDC\u1CDA\x03\x02\x02\x02\u1CDC\u1CDB\x03\x02\x02\x02\u1CDD" +
		"\u1D52\x03\x02\x02\x02\u1CDE\u1CE0\x07\xBA\x02\x02\u1CDF\u1CE1\x07\u0181" +
		"\x02\x02\u1CE0\u1CDF\x03\x02\x02\x02\u1CE0\u1CE1\x03\x02\x02\x02\u1CE1" +
		"\u1CE2\x03\x02\x02\x02\u1CE2\u1D52\x05\u0472\u023A\x02\u1CE3\u1CE5\x07" +
		"\xDE\x02\x02\u1CE4\u1CE6\x07\u0181\x02\x02\u1CE5\u1CE4\x03\x02\x02\x02" +
		"\u1CE5\u1CE6\x03\x02\x02\x02\u1CE6\u1CE7\x03\x02\x02\x02\u1CE7\u1D52\x05" +
		"\u0472\u023A\x02\u1CE8\u1CEA\x07G\x02\x02\u1CE9\u1CEB\x07\u0181\x02\x02" +
		"\u1CEA\u1CE9\x03\x02\x02\x02\u1CEA\u1CEB\x03\x02\x02\x02\u1CEB\u1CEC\x03" +
		"\x02\x02\x02\u1CEC\u1D52\x05\u046E\u0238\x02\u1CED\u1CEF\x07\xFD\x02\x02" +
		"\u1CEE\u1CF0\x07\u0181\x02\x02\u1CEF\u1CEE\x03\x02\x02\x02\u1CEF\u1CF0" +
		"\x03\x02\x02\x02\u1CF0\u1CF1\x03\x02\x02\x02\u1CF1\u1D52\x05\u047C\u023F" +
		"\x02\u1CF2\u1CF4\x07\r\x02\x02\u1CF3\u1CF5\x07\u0181\x02\x02\u1CF4\u1CF3" +
		"\x03\x02\x02\x02\u1CF4\u1CF5\x03\x02\x02\x02\u1CF5\u1CF6\x03\x02\x02\x02" +
		"\u1CF6\u1D52\x05\u047C\u023F\x02\u1CF7\u1CF8\x06\u01D6\xC2\x02\u1CF8\u1CFA" +
		"\x07a\x02\x02\u1CF9\u1CFB\x07\u0181\x02\x02\u1CFA\u1CF9\x03\x02\x02\x02" +
		"\u1CFA\u1CFB\x03\x02\x02\x02\u1CFB\u1CFC\x03\x02\x02\x02\u1CFC\u1D52\x05" +
		"\u047E\u0240\x02\u1CFD\u1CFE\x06\u01D6\xC3\x02\u1CFE\u1D00\x07b\x02\x02" +
		"\u1CFF\u1D01\x07\u0181\x02\x02\u1D00\u1CFF\x03\x02\x02\x02\u1D00\u1D01" +
		"\x03\x02\x02\x02\u1D01\u1D02\x03\x02\x02\x02\u1D02\u1D52\x05\u047E\u0240" +
		"\x02\u1D03\u1D05\x07E\x02\x02\u1D04\u1D06\x07\u0181\x02\x02\u1D05\u1D04" +
		"\x03\x02\x02\x02\u1D05\u1D06\x03\x02\x02\x02\u1D06\u1D07\x03\x02\x02\x02" +
		"\u1D07\u1D52\x05\u0472\u023A\x02\u1D08\u1D0A\x07\xF8\x02\x02\u1D09\u1D0B" +
		"\x07\u0181\x02\x02\u1D0A\u1D09\x03\x02\x02\x02\u1D0A\u1D0B\x03\x02\x02" +
		"\x02\u1D0B\u1D0C\x03\x02\x02\x02\u1D0C\u1D52\x05\u03AC\u01D7\x02\u1D0D" +
		"\u1D0F\tu\x02\x02\u1D0E\u1D10\x07\u0181\x02\x02\u1D0F\u1D0E\x03\x02\x02" +
		"\x02\u1D0F\u1D10\x03\x02\x02\x02\u1D10\u1D11\x03\x02\x02\x02\u1D11\u1D52" +
		"\x05\u03AC\u01D7\x02\u1D12\u1D14\tv\x02\x02\u1D13\u1D15\x07\u0181\x02" +
		"\x02\u1D14\u1D13\x03\x02\x02\x02\u1D14\u1D15\x03\x02\x02\x02\u1D15\u1D16" +
		"\x03\x02\x02\x02\u1D16\u1D52\x05\u046E\u0238\x02\u1D17\u1D19\x07v\x02" +
		"\x02\u1D18\u1D1A\x07\u0181\x02\x02\u1D19\u1D18\x03\x02\x02\x02\u1D19\u1D1A" +
		"\x03\x02\x02\x02\u1D1A\u1D1B\x03\x02\x02\x02\u1D1B\u1D52\x05\u046E\u0238" +
		"\x02\u1D1C\u1D1E\x07\u012E\x02\x02\u1D1D\u1D1F\x07\u0181\x02\x02\u1D1E" +
		"\u1D1D\x03\x02\x02\x02\u1D1E\u1D1F\x03\x02\x02\x02\u1D1F\u1D20\x03\x02" +
		"\x02\x02\u1D20\u1D52\tw\x02\x02\u1D21\u1D23\x07\u0295\x02\x02\u1D22\u1D24" +
		"\x07\u0181\x02\x02\u1D23\u1D22\x03\x02\x02\x02\u1D23\u1D24\x03\x02\x02" +
		"\x02\u1D24\u1D25\x03\x02\x02\x02\u1D25\u1D26\x07\u019B\x02\x02\u1D26\u1D27" +
		"\x05\u044A\u0226\x02\u1D27\u1D28\x07\u019C\x02\x02\u1D28\u1D52\x03\x02" +
		"\x02\x02\u1D29\u1D52\x05\u03B2\u01DA\x02\u1D2A\u1D52\x05\u03AE\u01D8\x02" +
		"\u1D2B\u1D2D\x07\xAD\x02\x02\u1D2C\u1D2E\x07\u0181\x02\x02\u1D2D\u1D2C" +
		"\x03\x02\x02\x02\u1D2D\u1D2E\x03\x02\x02\x02\u1D2E\u1D2F\x03\x02\x02\x02" +
		"\u1D2F\u1D52\tx\x02\x02\u1D30\u1D31\x07o\x02\x02\u1D31\u1D33\x07y\x02" +
		"\x02\u1D32\u1D34\x07\u0181\x02\x02\u1D33\u1D32\x03\x02\x02\x02\u1D33\u1D34" +
		"\x03\x02\x02\x02\u1D34\u1D35\x03\x02\x02\x02\u1D35\u1D52\x05\u047E\u0240" +
		"\x02\u1D36\u1D37\x07\u020B\x02\x02\u1D37\u1D39\x07y\x02\x02\u1D38\u1D3A" +
		"\x07\u0181\x02\x02\u1D39\u1D38\x03\x02\x02\x02\u1D39\u1D3A\x03\x02\x02" +
		"\x02\u1D3A\u1D3B\x03\x02\x02\x02\u1D3B\u1D52\x05\u047E\u0240\x02\u1D3C" +
		"\u1D42\x07\u0158\x02\x02\u1D3D\u1D3F\x06\u01D6\xC4\x02\u1D3E\u1D40\x07" +
		"\u0181\x02\x02\u1D3F\u1D3E\x03\x02\x02\x02\u1D3F\u1D40\x03\x02\x02\x02" +
		"\u1D40\u1D43\x03\x02\x02\x02\u1D41\u1D43\x03\x02\x02\x02\u1D42\u1D3D\x03" +
		"\x02\x02\x02\u1D42\u1D41\x03\x02\x02\x02\u1D43\u1D44\x03\x02\x02\x02\u1D44" +
		"\u1D52\x05\u0462\u0232\x02\u1D45\u1D46\x07\u014A\x02\x02\u1D46\u1D52\t" +
		"y\x02\x02\u1D47\u1D49\x07d\x02\x02\u1D48\u1D4A\x07\u0181\x02\x02\u1D49" +
		"\u1D48\x03\x02\x02\x02\u1D49\u1D4A\x03\x02\x02\x02\u1D4A\u1D4B\x03\x02" +
		"\x02\x02\u1D4B\u1D52\x05\u047E\u0240\x02\u1D4C\u1D4E\x07\xAF\x02\x02\u1D4D" +
		"\u1D4F\x07\u0181\x02\x02\u1D4E\u1D4D\x03\x02\x02\x02\u1D4E\u1D4F\x03\x02" +
		"\x02\x02\u1D4F\u1D50\x03\x02\x02\x02\u1D50\u1D52\x05\u046E\u0238\x02\u1D51" +
		"\u1CD0\x03\x02\x02\x02\u1D51\u1CD5\x03\x02\x02\x02\u1D51\u1CDE\x03\x02" +
		"\x02\x02\u1D51\u1CE3\x03\x02\x02\x02\u1D51\u1CE8\x03\x02\x02\x02\u1D51" +
		"\u1CED\x03\x02\x02\x02\u1D51\u1CF2\x03\x02\x02\x02\u1D51\u1CF7\x03\x02" +
		"\x02\x02\u1D51\u1CFD\x03\x02\x02\x02\u1D51\u1D03\x03\x02\x02\x02\u1D51" +
		"\u1D08\x03\x02\x02\x02\u1D51\u1D0D\x03\x02\x02\x02\u1D51\u1D12\x03\x02" +
		"\x02\x02\u1D51\u1D17\x03\x02\x02\x02\u1D51\u1D1C\x03\x02\x02\x02\u1D51" +
		"\u1D21\x03\x02\x02\x02\u1D51\u1D29\x03\x02\x02\x02\u1D51\u1D2A\x03\x02" +
		"\x02\x02\u1D51\u1D2B\x03\x02\x02\x02\u1D51\u1D30\x03\x02\x02\x02\u1D51" +
		"\u1D36\x03\x02\x02\x02\u1D51\u1D3C\x03\x02\x02\x02\u1D51\u1D45\x03\x02" +
		"\x02\x02\u1D51\u1D47\x03\x02\x02\x02\u1D51\u1D4C\x03\x02\x02\x02\u1D52" +
		"\u03AB\x03\x02\x02\x02\u1D53\u1D56\x05\u046E\u0238\x02\u1D54\u1D56\x07" +
		"\u01E0\x02\x02\u1D55\u1D53\x03\x02\x02\x02\u1D55\u1D54\x03\x02\x02\x02" +
		"\u1D56\u03AD\x03\x02\x02\x02\u1D57\u1D59\x07\u01E0\x02\x02\u1D58\u1D57" +
		"\x03\x02\x02\x02\u1D58\u1D59\x03\x02\x02\x02\u1D59\u1D5A\x03\x02\x02\x02" +
		"\u1D5A\u1D5C\x07\u01C6\x02\x02\u1D5B\u1D5D\x07\u0181\x02\x02\u1D5C\u1D5B" +
		"\x03\x02\x02\x02\u1D5C\u1D5D\x03\x02\x02\x02\u1D5D\u1D5E\x03\x02\x02\x02" +
		"\u1D5E\u1D5F\x05\u03A4\u01D3\x02\u1D5F\u03AF\x03\x02\x02\x02\u1D60\u1D62" +
		"\x07\u01E0\x02\x02\u1D61\u1D60\x03\x02\x02\x02\u1D61\u1D62\x03\x02\x02" +
		"\x02\u1D62\u1D63\x03\x02\x02\x02\u1D63\u1D65\x07b\x02\x02\u1D64\u1D66" +
		"\x07\u0181\x02\x02\u1D65\u1D64\x03\x02\x02\x02\u1D65\u1D66\x03\x02\x02" +
		"\x02\u1D66\u1D67\x03\x02\x02\x02\u1D67\u1D68\x05\u047C\u023F\x02\u1D68" +
		"\u03B1\x03\x02\x02\x02\u1D69\u1D6B\x07\u01E0\x02\x02\u1D6A\u1D69\x03\x02" +
		"\x02\x02\u1D6A\u1D6B\x03\x02\x02\x02\u1D6B\u1D6C\x03\x02\x02\x02\u1D6C" +
		"\u1D6E\x05\u02F0\u0179\x02\u1D6D\u1D6F\x07\u0181\x02\x02\u1D6E\u1D6D\x03" +
		"\x02\x02\x02\u1D6E\u1D6F\x03\x02\x02\x02\u1D6F\u1D70\x03\x02\x02\x02\u1D70" +
		"\u1D71\x05\u03A2\u01D2\x02\u1D71\u03B3\x03\x02\x02\x02\u1D72\u1D73\x07" +
		"\"\x02\x02\u1D73\u1D74\x07\u01BE\x02\x02\u1D74\u1D77\x05\u03B6\u01DC\x02" +
		"\u1D75\u1D76\x07\xFC\x02\x02\u1D76\u1D78\x05\u0470\u0239\x02\u1D77\u1D75" +
		"\x03\x02\x02\x02\u1D77\u1D78\x03\x02\x02\x02\u1D78\u1D7A\x03\x02\x02\x02" +
		"\u1D79\u1D7B\x05\u03B8\u01DD\x02\u1D7A\u1D79\x03\x02\x02\x02\u1D7A\u1D7B" +
		"\x03\x02\x02\x02\u1D7B\u1D7D\x03\x02\x02\x02\u1D7C\u1D7E\x05\u03BC\u01DF" +
		"\x02\u1D7D\u1D7C\x03\x02\x02\x02\u1D7D\u1D7E\x03\x02\x02\x02\u1D7E\u03B5" +
		"\x03\x02\x02\x02\u1D7F\u1D81\x07\u0222\x02\x02\u1D80\u1D7F\x03\x02\x02" +
		"\x02\u1D80\u1D81\x03\x02\x02\x02\u1D81\u1D82\x03\x02\x02\x02\u1D82\u1D84" +
		"\x07\u021B\x02\x02\u1D83\u1D85\x05\u03BA\u01DE\x02\u1D84\u1D83\x03\x02" +
		"\x02\x02\u1D84\u1D85\x03\x02\x02\x02\u1D85\u1D86\x03\x02\x02\x02\u1D86" +
		"\u1D88\x07\u019B\x02\x02\u1D87\u1D89\x05\u0464\u0233\x02\u1D88\u1D87\x03" +
		"\x02\x02\x02\u1D88\u1D89\x03\x02\x02\x02\u1D89\u1D8A\x03\x02\x02\x02\u1D8A" +
		"\u1DA1\x07\u019C\x02\x02\u1D8B\u1D8D\x07\u0222\x02\x02\u1D8C\u1D8B\x03" +
		"\x02\x02\x02\u1D8C\u1D8D\x03\x02\x02\x02\u1D8D\u1D8E\x03\x02\x02\x02\u1D8E" +
		"\u1D8F\x07\x9E\x02\x02\u1D8F\u1D90\x07\u019B\x02\x02\u1D90\u1D91\x05\u02A8" +
		"\u0155\x02\u1D91\u1D92\x07\u019C\x02\x02\u1D92\u1DA1\x03\x02\x02\x02\u1D93" +
		"\u1D9E\tz\x02\x02\u1D94\u1D95\x07\u019B\x02\x02\u1D95\u1D96\x05\u02A8" +
		"\u0155\x02\u1D96\u1D97\x07\u019C\x02\x02\u1D97\u1D9F\x03\x02\x02\x02\u1D98" +
		"\u1D99\x07\\\x02\x02\u1D99\u1D9B\x07\u019B\x02\x02\u1D9A\u1D9C\x05\u0464" +
		"\u0233\x02\u1D9B\u1D9A\x03\x02\x02\x02\u1D9B\u1D9C\x03\x02\x02\x02\u1D9C" +
		"\u1D9D\x03\x02\x02\x02\u1D9D\u1D9F\x07\u019C\x02\x02\u1D9E\u1D94\x03\x02" +
		"\x02\x02\u1D9E\u1D98\x03\x02\x02\x02\u1D9F\u1DA1\x03\x02\x02\x02\u1DA0" +
		"\u1D80\x03\x02\x02\x02\u1DA0\u1D8C\x03\x02\x02\x02\u1DA0\u1D93\x03\x02" +
		"\x02\x02\u1DA1\u03B7\x03\x02\x02\x02\u1DA2\u1DA3\x07\u014F\x02\x02\u1DA3" +
		"\u1DA5\x07\u01BE\x02\x02\u1DA4\u1DA6\x07\u0222\x02\x02\u1DA5\u1DA4\x03" +
		"\x02\x02\x02\u1DA5\u1DA6\x03\x02\x02\x02\u1DA6\u1DB1\x03\x02\x02\x02\u1DA7" +
		"\u1DA8\x07\x9E\x02\x02\u1DA8\u1DA9\x07\u019B\x02\x02\u1DA9\u1DAA\x05\u02A8" +
		"\u0155\x02\u1DAA\u1DAB\x07\u019C\x02\x02\u1DAB\u1DB2\x03\x02\x02\x02\u1DAC" +
		"\u1DAE\x07\u021B\x02\x02\u1DAD\u1DAF\x05\u03BA\u01DE\x02\u1DAE\u1DAD\x03" +
		"\x02\x02\x02\u1DAE\u1DAF\x03\x02\x02\x02\u1DAF\u1DB0\x03\x02\x02\x02\u1DB0" +
		"\u1DB2\x05\u0466\u0234\x02\u1DB1\u1DA7\x03\x02\x02\x02\u1DB1\u1DAC\x03" +
		"\x02\x02\x02\u1DB2\u1DB5\x03\x02\x02\x02\u1DB3\u1DB4\x07\u0150\x02\x02" +
		"\u1DB4\u1DB6\x05\u0470\u0239\x02\u1DB5\u1DB3\x03\x02\x02\x02\u1DB5\u1DB6" +
		"\x03\x02\x02\x02\u1DB6\u03B9\x03\x02\x02\x02\u1DB7\u1DB8\x06\u01DE\xC5" +
		"\x02\u1DB8\u1DB9\x07@\x02\x02\u1DB9\u1DBA\x07\u0181\x02\x02\u1DBA\u1DBB" +
		"\x05\u0470\u0239\x02\u1DBB\u03BB\x03\x02\x02\x02\u1DBC\u1DBD\x07\u019B" +
		"\x02\x02\u1DBD\u1DC2\x05\u03BE\u01E0\x02\u1DBE\u1DBF\x07\u0198\x02\x02" +
		"\u1DBF\u1DC1\x05\u03BE\u01E0\x02\u1DC0\u1DBE\x03\x02\x02\x02\u1DC1\u1DC4" +
		"\x03\x02\x02\x02\u1DC2\u1DC0\x03\x02\x02\x02\u1DC2\u1DC3\x03\x02\x02\x02" +
		"\u1DC3\u1DC5\x03\x02\x02\x02\u1DC4\u1DC2\x03\x02\x02\x02\u1DC5\u1DC6\x07" +
		"\u019C\x02\x02\u1DC6\u03BD\x03\x02\x02\x02\u1DC7\u1DC8\x07\"\x02\x02\u1DC8" +
		"\u1DD3\x05\u0462\u0232\x02\u1DC9\u1DCA\x07\u02A1\x02\x02\u1DCA\u1DCB\x07" +
		"\xB2\x02\x02\u1DCB\u1DCE\x07\u015C\x02\x02\u1DCC\u1DCF\x05\u03C6\u01E4" +
		"\x02\u1DCD\u1DCF\x07\u0231\x02\x02\u1DCE\u1DCC\x03\x02\x02\x02\u1DCE\u1DCD" +
		"\x03\x02\x02\x02\u1DCF\u1DD4\x03\x02\x02\x02\u1DD0\u1DD1\x07\u02A1\x02" +
		"\x02\u1DD1\u1DD2\x07\u0214\x02\x02\u1DD2\u1DD4\x05\u03C0\u01E1\x02\u1DD3" +
		"\u1DC9\x03\x02\x02\x02\u1DD3\u1DD0\x03\x02\x02\x02\u1DD3\u1DD4\x03\x02" +
		"\x02\x02\u1DD4\u1DD8\x03\x02\x02\x02\u1DD5\u1DD7\x05\u03C2\u01E2\x02\u1DD6" +
		"\u1DD5\x03\x02\x02\x02\u1DD7\u1DDA\x03\x02\x02\x02\u1DD8\u1DD6\x03\x02" +
		"\x02\x02\u1DD8\u1DD9\x03\x02\x02\x02\u1DD9\u1DE6\x03\x02\x02\x02\u1DDA" +
		"\u1DD8\x03\x02\x02\x02\u1DDB\u1DDC\x07\u019B\x02\x02\u1DDC\u1DE1\x05\u03C4" +
		"\u01E3\x02\u1DDD\u1DDE\x07\u0198\x02\x02\u1DDE\u1DE0\x05\u03C4\u01E3\x02" +
		"\u1DDF\u1DDD\x03\x02\x02\x02\u1DE0\u1DE3\x03\x02\x02\x02\u1DE1\u1DDF\x03" +
		"\x02\x02\x02\u1DE1\u1DE2\x03\x02\x02\x02\u1DE2\u1DE4\x03\x02\x02\x02\u1DE3" +
		"\u1DE1\x03\x02\x02\x02\u1DE4\u1DE5\x07\u019C\x02\x02\u1DE5\u1DE7\x03\x02" +
		"\x02\x02\u1DE6\u1DDB\x03\x02\x02\x02\u1DE6\u1DE7\x03\x02\x02\x02\u1DE7" +
		"\u03BF\x03\x02\x02\x02\u1DE8\u1DF5\x05\u03C6\u01E4\x02\u1DE9\u1DEA\x07" +
		"\u019B\x02\x02\u1DEA\u1DEF\x05\u03C6\u01E4\x02\u1DEB\u1DEC\x07\u0198\x02" +
		"\x02\u1DEC\u1DEE\x05\u03C6\u01E4\x02\u1DED\u1DEB\x03\x02\x02\x02\u1DEE" +
		"\u1DF1\x03\x02\x02\x02\u1DEF\u1DED\x03\x02\x02\x02\u1DEF\u1DF0\x03\x02" +
		"\x02\x02\u1DF0\u1DF2\x03\x02\x02\x02\u1DF1\u1DEF\x03\x02\x02\x02\u1DF2" +
		"\u1DF3\x07\u019C\x02\x02\u1DF3\u1DF5\x03\x02\x02\x02\u1DF4\u1DE8\x03\x02" +
		"\x02\x02\u1DF4\u1DE9\x03\x02\x02\x02\u1DF5\u03C1\x03\x02\x02\x02\u1DF6" +
		"\u1DF8\x07\u0158\x02\x02\u1DF7\u1DF9\x07\u0181\x02\x02\u1DF8\u1DF7\x03" +
		"\x02\x02\x02\u1DF8\u1DF9\x03\x02\x02\x02\u1DF9\u1DFA\x03\x02\x02\x02\u1DFA" +
		"\u1E19\x05\u0462\u0232\x02\u1DFB\u1DFD\x07\u014A\x02\x02\u1DFC\u1DFB\x03" +
		"\x02\x02\x02\u1DFC\u1DFD\x03\x02\x02\x02\u1DFD\u1DFE\x03\x02\x02\x02\u1DFE" +
		"\u1E00\x07\x82\x02\x02\u1DFF\u1E01\x07\u0181\x02\x02\u1E00\u1DFF\x03\x02" +
		"\x02\x02\u1E00\u1E01\x03\x02\x02\x02\u1E01\u1E02\x03\x02\x02\x02\u1E02" +
		"\u1E19\x05\u0440\u0221\x02\u1E03\u1E05\x07\xF0\x02\x02\u1E04\u1E06\x07" +
		"\u0181\x02\x02\u1E05\u1E04\x03\x02\x02\x02\u1E05\u1E06\x03\x02\x02\x02" +
		"\u1E06\u1E07\x03\x02\x02\x02\u1E07\u1E19\x05\u0470\u0239\x02\u1E08\u1E0A" +
		"\t{\x02\x02\u1E09\u1E0B\x07\u0181\x02\x02\u1E0A\u1E09\x03\x02\x02\x02" +
		"\u1E0A\u1E0B\x03\x02\x02\x02\u1E0B\u1E0C\x03\x02\x02\x02\u1E0C\u1E19\x05" +
		"\u0470\u0239\x02\u1E0D\u1E0E\t|\x02\x02\u1E0E\u1E10\x07y\x02\x02\u1E0F" +
		"\u1E11\x07\u0181\x02\x02\u1E10\u1E0F\x03\x02\x02\x02\u1E10\u1E11\x03\x02" +
		"\x02\x02\u1E11\u1E12\x03\x02\x02\x02\u1E12\u1E19\x05\u0482\u0242\x02\u1E13" +
		"\u1E15\x07\r\x02\x02\u1E14\u1E16\x07\u0181\x02\x02\u1E15\u1E14\x03\x02" +
		"\x02\x02\u1E15\u1E16\x03\x02\x02\x02\u1E16\u1E17\x03\x02\x02\x02\u1E17" +
		"\u1E19\x05\u0482\u0242\x02\u1E18\u1DF6\x03\x02\x02\x02\u1E18\u1DFC\x03" +
		"\x02\x02\x02\u1E18\u1E03\x03\x02\x02\x02\u1E18\u1E08\x03\x02\x02\x02\u1E18" +
		"\u1E0D\x03\x02\x02\x02\u1E18\u1E13\x03\x02\x02\x02\u1E19\u03C3\x03\x02" +
		"\x02\x02\u1E1A\u1E1B\x07\u014F\x02\x02\u1E1B\u1E1F\x05\u0496\u024C\x02" +
		"\u1E1C\u1E1E\x05\u03C2\u01E2\x02\u1E1D\u1E1C\x03\x02\x02\x02\u1E1E\u1E21" +
		"\x03\x02\x02\x02\u1E1F\u1E1D\x03\x02\x02\x02\u1E1F\u1E20\x03\x02\x02\x02" +
		"\u1E20\u03C5\x03\x02\x02\x02\u1E21\u1E1F\x03\x02\x02\x02\u1E22\u1E23\x07" +
		"\u019B\x02\x02\u1E23\u1E28\x05\u03C8\u01E5\x02\u1E24\u1E25\x07\u0198\x02" +
		"\x02\u1E25\u1E27\x05\u03C8\u01E5\x02\u1E26\u1E24\x03\x02\x02\x02\u1E27" +
		"\u1E2A\x03\x02\x02\x02\u1E28\u1E26\x03\x02\x02\x02\u1E28\u1E29\x03\x02" +
		"\x02\x02\u1E29\u1E2B\x03\x02\x02\x02\u1E2A\u1E28\x03\x02\x02\x02\u1E2B" +
		"\u1E2C\x07\u019C\x02\x02\u1E2C\u03C7\x03\x02\x02\x02\u1E2D\u1E30\x05\u02A8" +
		"\u0155\x02\u1E2E\u1E30\x07\u0231\x02\x02\u1E2F\u1E2D\x03\x02\x02\x02\u1E2F" +
		"\u1E2E\x03\x02\x02\x02\u1E30\u03C9\x03\x02\x02\x02\u1E31\u1E32\x07u\x02" +
		"\x02\u1E32\u1E33\x07\u0181\x02\x02\u1E33\u1E34\x05\u03FC\u01FF\x02\u1E34" +
		"\u03CB\x03\x02\x02\x02\u1E35\u1E36\x07\u0209\x02\x02\u1E36\u1E37\x07\u01F2" +
		"\x02\x02\u1E37\u03CD\x03\x02\x02\x02\u1E38\u1E39\x07\u0209\x02\x02\u1E39" +
		"\u1E3A\x05\u02F2\u017A\x02\u1E3A\u1E3B\x07\u01F2\x02\x02\u1E3B\u03CF\x03" +
		"\x02\x02\x02\u1E3C\u1E3E\t}\x02\x02\u1E3D\u1E3C\x03\x02\x02\x02\u1E3D" +
		"\u1E3E\x03\x02\x02\x02\u1E3E\u1E3F\x03\x02\x02\x02\u1E3F\u1E40\x05\u03D2" +
		"\u01EA\x02\u1E40\u03D1\x03\x02\x02\x02\u1E41\u1E42\x05\u044E\u0228\x02" +
		"\u1E42\u1E43\x05\u03D6\u01EC\x02\u1E43\u03D3\x03\x02\x02\x02\u1E44\u1E45" +
		"\x07\u01C6\x02\x02\u1E45\u1E46\x05\u03A4\u01D3\x02\u1E46\u03D5\x03\x02" +
		"\x02\x02\u1E47\u1E49\x05\u038E\u01C8\x02\u1E48\u1E4A\x05\u03D4\u01EB\x02" +
		"\u1E49\u1E48\x03\x02\x02\x02\u1E49\u1E4A\x03\x02\x02\x02\u1E4A\u03D7\x03" +
		"\x02\x02\x02\u1E4B\u1E4C\x07\u019B\x02\x02\u1E4C\u1E4D\x05\u041C\u020F" +
		"\x02\u1E4D\u1E4E\x07\u0198\x02\x02\u1E4E\u1E4F\x05\u041C\u020F\x02\u1E4F" +
		"\u1E50\x07\u019C\x02\x02\u1E50\u03D9\x03\x02\x02\x02\u1E51\u1E56\x05\u042C" +
		"\u0217\x02\u1E52\u1E53\x07\u0198\x02\x02\u1E53\u1E55\x05\u042C\u0217\x02" +
		"\u1E54\u1E52\x03\x02\x02\x02\u1E55\u1E58\x03\x02\x02\x02\u1E56\u1E54\x03" +
		"\x02\x02\x02\u1E56\u1E57\x03\x02\x02\x02\u1E57\u03DB\x03\x02\x02\x02\u1E58" +
		"\u1E56\x03\x02\x02\x02\u1E59\u1E5E\x05\u03DE\u01F0\x02\u1E5A\u1E5B\x07" +
		"\u0198\x02\x02\u1E5B\u1E5D\x05\u03DE\u01F0\x02\u1E5C\u1E5A\x03\x02\x02" +
		"\x02\u1E5D\u1E60\x03\x02\x02\x02\u1E5E\u1E5C\x03\x02\x02\x02\u1E5E\u1E5F" +
		"\x03\x02\x02\x02\u1E5F\u03DD\x03\x02\x02\x02\u1E60\u1E5E\x03\x02\x02\x02" +
		"\u1E61\u1E62\x05\u0410\u0209\x02\u1E62\u1E65\x07\u0181\x02\x02\u1E63\u1E66" +
		"\x05\u029E\u0150\x02\u1E64\u1E66\x07\u01E0\x02\x02\u1E65\u1E63\x03\x02" +
		"\x02\x02\u1E65\u1E64\x03\x02\x02\x02\u1E66\u03DF\x03\x02\x02\x02\u1E67" +
		"\u1E68\x05\u02F0\u0179\x02\u1E68\u1E69\x05\u03A2\u01D2\x02\u1E69\u03E1" +
		"\x03\x02\x02\x02\u1E6A\u1E6C\x07\\\x02\x02\u1E6B\u1E6D\x05\u03E4\u01F3" +
		"\x02\u1E6C\u1E6B\x03\x02\x02\x02\u1E6D\u1E6E\x03\x02\x02\x02\u1E6E\u1E6C" +
		"\x03\x02\x02\x02\u1E6E\u1E6F\x03\x02\x02\x02\u1E6F\u03E3\x03\x02\x02\x02" +
		"\u1E70\u1E71\x07\u028A\x02\x02\u1E71\u1E72\x07\u01BE\x02\x02\u1E72\u1E7D" +
		"\x05\u047E\u0240\x02\u1E73\u1E75\x07\u024B\x02\x02\u1E74\u1E73\x03\x02" +
		"\x02\x02\u1E74\u1E75\x03\x02\x02\x02\u1E75\u1E76\x03\x02\x02\x02\u1E76" +
		"\u1E77\x07\u01EE\x02\x02\u1E77\u1E78\x07\u01BE\x02\x02\u1E78\u1E7D\x05" +
		"\u047E\u0240\x02\u1E79\u1E7A\x07\u01F0\x02\x02\u1E7A\u1E7B\x07\u01BE\x02" +
		"\x02\u1E7B\u1E7D\x05\u047E\u0240\x02\u1E7C\u1E70\x03\x02\x02\x02\u1E7C" +
		"\u1E74\x03\x02\x02\x02\u1E7C\u1E79\x03\x02\x02\x02\u1E7D\u03E5\x03\x02" +
		"\x02\x02\u1E7E\u1E80\x07\u0223\x02\x02\u1E7F\u1E81\x05\u03E8\u01F5\x02" +
		"\u1E80\u1E7F\x03\x02\x02\x02\u1E81\u1E82\x03\x02\x02\x02\u1E82\u1E80\x03" +
		"\x02\x02\x02\u1E82\u1E83\x03\x02\x02\x02\u1E83\u03E7\x03\x02\x02\x02\u1E84" +
		"\u1E85\t~\x02\x02\u1E85\u1E86\x07\u01BE\x02\x02\u1E86\u1E87\x05\u047E" +
		"\u0240\x02\u1E87\u03E9\x03\x02\x02\x02\u1E88\u1E8D\x05\u03FC\u01FF\x02" +
		"\u1E89\u1E8A\x07\u0198\x02\x02\u1E8A\u1E8C\x05\u03FC\u01FF\x02\u1E8B\u1E89" +
		"\x03\x02\x02\x02\u1E8C\u1E8F\x03\x02\x02\x02\u1E8D\u1E8B\x03\x02\x02\x02" +
		"\u1E8D\u1E8E\x03\x02\x02\x02\u1E8E\u03EB\x03\x02\x02\x02\u1E8F\u1E8D\x03" +
		"\x02\x02\x02\u1E90\u1E95\x05\u03F0\u01F9\x02\u1E91\u1E92\x07\u0198\x02" +
		"\x02\u1E92\u1E94\x05\u03F0\u01F9\x02\u1E93\u1E91\x03\x02\x02\x02\u1E94" +
		"\u1E97\x03\x02\x02\x02\u1E95\u1E93\x03\x02\x02\x02\u1E95\u1E96\x03\x02" +
		"\x02\x02\u1E96\u03ED\x03\x02\x02\x02\u1E97\u1E95\x03\x02\x02\x02\u1E98" +
		"\u1E9D\x05\u03F2\u01FA\x02\u1E99\u1E9A\x07\u0198\x02\x02\u1E9A\u1E9C\x05" +
		"\u03F2\u01FA\x02\u1E9B\u1E99\x03\x02\x02\x02\u1E9C\u1E9F\x03\x02\x02\x02" +
		"\u1E9D\u1E9B\x03\x02\x02\x02\u1E9D\u1E9E\x03\x02\x02\x02\u1E9E\u03EF\x03" +
		"\x02\x02\x02\u1E9F\u1E9D\x03\x02\x02\x02\u1EA0\u1EBB\x05\u03FC\u01FF\x02" +
		"\u1EA1\u1EB9\x07\xA1\x02\x02\u1EA2\u1EA5\x07\u01BE\x02\x02\u1EA3\u1EA4" +
		"\x06\u01F9\xC6\x02\u1EA4\u1EA6\x07\xFD\x02\x02\u1EA5\u1EA3\x03\x02\x02" +
		"\x02\u1EA5\u1EA6\x03\x02\x02\x02\u1EA6\u1EA7\x03\x02\x02\x02\u1EA7\u1EBA" +
		"\x05\u047E\u0240\x02\u1EA8\u1EA9\x07\u02AC\x02\x02\u1EA9\u1EAF\x05\u0496" +
		"\u024C\x02\u1EAA\u1EAB\x07\u01B1\x02\x02\u1EAB\u1EB0\x05\u0480\u0241\x02" +
		"\u1EAC\u1EAD\x06\u01F9\xC7\x02\u1EAD\u1EAE\x07\u01BE\x02\x02\u1EAE\u1EB0" +
		"\x05\u047E\u0240\x02\u1EAF\u1EAA\x03\x02\x02\x02\u1EAF\u1EAC\x03\x02\x02" +
		"\x02\u1EAF\u1EB0\x03\x02\x02\x02\u1EB0\u1EBA\x03\x02\x02\x02\u1EB1\u1EB4" +
		"\x06\u01F9\xC8\x02\u1EB2\u1EB3\x07\u02AC\x02\x02\u1EB3\u1EB5\x05\u0496" +
		"\u024C\x02\u1EB4\u1EB2\x03\x02\x02\x02\u1EB4\u1EB5\x03\x02\x02\x02\u1EB5" +
		"\u1EB6\x03\x02\x02\x02\u1EB6\u1EB7\x07\u01BE\x02\x02\u1EB7\u1EB8\x07\u02FE" +
		"\x02\x02\u1EB8\u1EBA\x07\xFD\x02\x02\u1EB9\u1EA2\x03\x02\x02\x02\u1EB9" +
		"\u1EA8\x03\x02\x02\x02\u1EB9\u1EB1\x03\x02\x02\x02\u1EBA\u1EBC\x03\x02" +
		"\x02\x02\u1EBB\u1EA1\x03\x02\x02\x02\u1EBB\u1EBC\x03\x02\x02\x02\u1EBC" +
		"\u03F1\x03\x02\x02\x02\u1EBD\u1EDA\x05\u03FC\u01FF\x02\u1EBE\u1ED5\x07" +
		"\xA1\x02\x02\u1EBF\u1EC0\x07\u02AC\x02\x02\u1EC0\u1EC2\x05\u0496\u024C" +
		"\x02\u1EC1\u1EBF\x03\x02\x02\x02\u1EC1\u1EC2\x03\x02\x02\x02\u1EC2\u1EC3" +
		"\x03\x02\x02\x02\u1EC3\u1EC4\x07\u01BE\x02\x02\u1EC4\u1EC7\x05\u047E\u0240" +
		"\x02\u1EC5\u1EC6\x07\u0260\x02\x02\u1EC6\u1EC8\x05\u047E\u0240\x02\u1EC7" +
		"\u1EC5\x03\x02\x02\x02\u1EC7\u1EC8\x03\x02\x02\x02\u1EC8\u1ECA\x03\x02" +
		"\x02\x02\u1EC9\u1ECB\x05\u03F4\u01FB\x02\u1ECA\u1EC9\x03\x02\x02\x02\u1ECA" +
		"\u1ECB\x03\x02\x02\x02\u1ECB\u1ED6\x03\x02\x02\x02\u1ECC\u1ECD\x07\u02AC" +
		"\x02\x02\u1ECD\u1ED3\x05\u0496\u024C\x02\u1ECE\u1ECF\x07\u01B1\x02\x02" +
		"\u1ECF\u1ED1\x05\u0480\u0241\x02\u1ED0\u1ED2\x05\u03F4\u01FB\x02\u1ED1" +
		"\u1ED0\x03\x02\x02\x02\u1ED1\u1ED2\x03\x02\x02\x02\u1ED2\u1ED4\x03\x02" +
		"\x02\x02\u1ED3\u1ECE\x03\x02\x02\x02\u1ED3\u1ED4\x03\x02\x02\x02\u1ED4" +
		"\u1ED6\x03\x02\x02\x02\u1ED5\u1EC1\x03\x02\x02\x02\u1ED5\u1ECC\x03\x02" +
		"\x02\x02\u1ED5\u1ED6\x03\x02\x02\x02\u1ED6\u1EDB\x03\x02\x02\x02\u1ED7" +
		"\u1ED9\x05\u03F6\u01FC\x02\u1ED8\u1ED7\x03\x02\x02\x02\u1ED8\u1ED9\x03" +
		"\x02\x02\x02\u1ED9\u1EDB\x03\x02\x02\x02\u1EDA\u1EBE\x03\x02\x02\x02\u1EDA" +
		"\u1ED8\x03\x02\x02\x02\u1EDB\u03F3\x03\x02\x02\x02\u1EDC\u1EDD\x07\u02F7" +
		"\x02\x02\u1EDD\u1EDE\x07m\x02\x02\u1EDE\u1EDF\x07\xFD\x02\x02\u1EDF\u03F5" +
		"\x03\x02\x02\x02\u1EE0\u1EE1\x07{\x02\x02\u1EE1\u1EE2\x07\u02F8\x02\x02" +
		"\u1EE2\u1EE3\x07\xFD\x02\x02\u1EE3\u03F7\x03\x02\x02\x02\u1EE4\u1EE5\x07" +
		"\u0260\x02\x02\u1EE5\u1EE6\x05\u047E\u0240\x02\u1EE6\u03F9\x03\x02\x02" +
		"\x02\u1EE7\u1EEB\x05\u0496\u024C\x02\u1EE8\u1EE9\x07\u01A2\x02\x02\u1EE9" +
		"\u1EEC\x05\u0496\u024C\x02\u1EEA\u1EEC\x07\u01A3\x02\x02\u1EEB\u1EE8\x03" +
		"\x02\x02\x02\u1EEB\u1EEA\x03\x02\x02\x02\u1EEB\u1EEC\x03\x02\x02\x02\u1EEC" +
		"\u03FB\x03\x02\x02\x02\u1EED\u1EF3\x05\u03FA\u01FE\x02\u1EEE\u1EF0\x07" +
		"\u01D2\x02\x02\u1EEF\u1EF1\x05\u049E\u0250\x02\u1EF0\u1EEF\x03\x02\x02" +
		"\x02\u1EF0\u1EF1\x03\x02\x02\x02\u1EF1\u1EF3\x03\x02\x02\x02\u1EF2\u1EED" +
		"\x03\x02\x02\x02\u1EF2\u1EEE\x03\x02\x02\x02\u1EF3\u03FD\x03\x02\x02\x02" +
		"\u1EF4\u1EF5\x07\u0220\x02\x02\u1EF5\u1EF6\x05\u047C\u023F\x02\u1EF6\u03FF" +
		"\x03\x02\x02\x02\u1EF7\u1EFA\x05\u03FE\u0200\x02\u1EF8\u1EFA\x05\u0162" +
		"\xB2\x02\u1EF9\u1EF7\x03\x02\x02\x02\u1EF9\u1EF8\x03\x02\x02\x02\u1EFA" +
		"\u0401\x03\x02\x02\x02\u1EFB\u1EFC\t\x7F\x02\x02\u1EFC\u0403\x03\x02\x02" +
		"\x02\u1EFD\u1EFE\t\x80\x02\x02\u1EFE\u0405\x03\x02\x02\x02\u1EFF\u1F00" +
		"\x06\u0204\xC9\x02\u1F00\u1F01\x07\"\x02\x02\u1F01\u1F02\x05\u0466\u0234" +
		"\x02\u1F02\u0407\x03\x02\x02\x02\u1F03\u1F09\x05\u046C\u0237\x02\u1F04" +
		"\u1F06\x05\u0468\u0235\x02\u1F05\u1F07\x05\u046C\u0237\x02\u1F06\u1F05" +
		"\x03\x02\x02\x02\u1F06\u1F07\x03\x02\x02\x02\u1F07\u1F09\x03\x02\x02\x02" +
		"\u1F08\u1F03\x03\x02\x02\x02\u1F08\u1F04\x03\x02\x02\x02\u1F09\u0409\x03" +
		"\x02\x02\x02\u1F0A\u1F0B\x06\u0206\xCA\x02\u1F0B\u1F0F\x05\u0462\u0232" +
		"\x02\u1F0C\u1F0D\x06\u0206\xCB\x02\u1F0D\u1F0F\x05\u0408\u0205\x02\u1F0E" +
		"\u1F0A\x03\x02\x02\x02\u1F0E\u1F0C\x03\x02\x02\x02\u1F0F\u040B\x03\x02" +
		"\x02\x02\u1F10\u1F11\x05\u0462\u0232\x02\u1F11\u040D\x03\x02\x02\x02\u1F12" +
		"\u1F13\x07\u019B\x02\x02\u1F13\u1F18\x05\u040C\u0207\x02\u1F14\u1F15\x07" +
		"\u0198\x02\x02\u1F15\u1F17\x05\u040C\u0207\x02\u1F16\u1F14\x03\x02\x02" +
		"\x02\u1F17\u1F1A\x03\x02\x02\x02\u1F18\u1F16\x03\x02\x02\x02\u1F18\u1F19" +
		"\x03\x02\x02\x02\u1F19\u1F1B\x03\x02\x02\x02\u1F1A\u1F18\x03\x02\x02\x02" +
		"\u1F1B\u1F1C\x07\u019C\x02\x02\u1F1C\u040F\x03\x02\x02\x02\u1F1D\u1F1E" +
		"\x05\u0408\u0205\x02\u1F1E\u0411\x03\x02\x02\x02\u1F1F\u1F22\x05\u0410" +
		"\u0209\x02\u1F20\u1F22\x05\u0418\u020D\x02\u1F21\u1F1F\x03\x02\x02\x02" +
		"\u1F21\u1F20\x03\x02\x02\x02\u1F22\u0413\x03\x02\x02\x02\u1F23\u1F24\x05" +
		"\u0462\u0232\x02\u1F24\u0415\x03\x02\x02\x02\u1F25\u1F26\x05\u0408\u0205" +
		"\x02\u1F26\u0417\x03\x02\x02\x02\u1F27\u1F28\x05\u0462\u0232\x02\u1F28" +
		"\u1F2C\x07\u0197\x02\x02\u1F29\u1F2A\x05\u0462\u0232\x02\u1F2A\u1F2B\x07" +
		"\u0197\x02\x02\u1F2B\u1F2D\x03\x02\x02\x02\u1F2C\u1F29\x03\x02\x02\x02" +
		"\u1F2C\u1F2D\x03\x02\x02\x02\u1F2D\u1F2E\x03\x02\x02\x02\u1F2E\u1F2F\x07" +
		"\u018B\x02\x02\u1F2F\u0419\x03\x02\x02\x02\u1F30\u1F31\x05\u0462\u0232" +
		"\x02\u1F31\u041B\x03\x02\x02\x02\u1F32\u1F33\x05\u0462\u0232\x02\u1F33" +
		"\u041D\x03\x02\x02\x02\u1F34\u1F35\x05\u0468\u0235\x02\u1F35\u041F\x03" +
		"\x02\x02\x02\u1F36\u1F37\x05\u0468\u0235\x02\u1F37\u0421\x03\x02\x02\x02" +
		"\u1F38\u1F39\x05\u0468\u0235\x02\u1F39\u0423\x03\x02\x02\x02\u1F3A\u1F3B" +
		"\x05\u0468\u0235\x02\u1F3B\u0425\x03\x02\x02\x02\u1F3C\u1F3D\x05\u0468" +
		"\u0235\x02\u1F3D\u0427\x03\x02\x02\x02\u1F3E\u1F3F\x05\u0468\u0235\x02" +
		"\u1F3F\u0429\x03\x02\x02\x02\u1F40\u1F43\x05\u0468\u0235\x02\u1F41\u1F43" +
		"\x05\u046C\u0237\x02\u1F42\u1F40\x03\x02\x02\x02\u1F42\u1F41\x03\x02\x02" +
		"\x02\u1F43\u042B\x03\x02\x02\x02\u1F44\u1F47\x05\u0468\u0235\x02\u1F45" +
		"\u1F47\x05\u046C\u0237\x02\u1F46\u1F44\x03\x02\x02\x02\u1F46\u1F45\x03" +
		"\x02\x02\x02\u1F47\u042D\x03\x02\x02\x02\u1F48\u1F49\x05\u0462\u0232\x02" +
		"\u1F49\u042F\x03\x02\x02\x02\u1F4A\u1F4B\x05\u0462\u0232\x02\u1F4B\u0431" +
		"\x03\x02\x02\x02\u1F4C\u1F4D\x05\u0462\u0232\x02\u1F4D\u0433\x03\x02\x02" +
		"\x02\u1F4E\u1F4F\x05\u0462\u0232\x02\u1F4F\u0435\x03\x02\x02\x02\u1F50" +
		"\u1F51\x05\u0468\u0235\x02\u1F51\u0437\x03\x02\x02\x02\u1F52\u1F53\x05" +
		"\u0468\u0235\x02\u1F53\u0439\x03\x02\x02\x02\u1F54\u1F55\x05\u0462\u0232" +
		"\x02\u1F55\u043B\x03\x02\x02\x02\u1F56\u1F57\x05\u0496\u024C\x02\u1F57" +
		"\u043D\x03\x02\x02\x02\u1F58\u1F59\x05\u0496\u024C\x02\u1F59\u043F\x03" +
		"\x02\x02\x02\u1F5A\u1F5B\x05\u0496\u024C\x02\u1F5B\u0441\x03\x02\x02\x02" +
		"\u1F5C\u1F5F\x05\u0468\u0235\x02\u1F5D\u1F5F\x05\u046C\u0237\x02\u1F5E" +
		"\u1F5C\x03\x02\x02\x02\u1F5E\u1F5D\x03\x02\x02\x02\u1F5F\u0443\x03\x02" +
		"\x02\x02\u1F60\u1F61\x05\u041C\u020F\x02\u1F61\u1F62\x05\u046C\u0237\x02" +
		"\u1F62\u0445\x03\x02\x02\x02\u1F63\u1F6B\x05\u0462\u0232\x02\u1F64\u1F65" +
		"\x07\u0197\x02\x02\u1F65\u1F6C\x07\u018B\x02\x02\u1F66\u1F69\x05\u046C" +
		"\u0237\x02\u1F67\u1F68\x07\u0197\x02\x02\u1F68\u1F6A\x07\u018B\x02\x02" +
		"\u1F69\u1F67\x03\x02\x02\x02\u1F69\u1F6A\x03\x02\x02\x02\u1F6A\u1F6C\x03" +
		"\x02\x02\x02\u1F6B\u1F64\x03\x02\x02\x02\u1F6B\u1F66\x03\x02\x02\x02\u1F6B" +
		"\u1F6C\x03\x02\x02\x02\u1F6C\u0447\x03\x02\x02\x02\u1F6D\u1F70\x05\u0468" +
		"\u0235\x02\u1F6E\u1F70\x05\u046C\u0237\x02\u1F6F\u1F6D\x03\x02\x02\x02" +
		"\u1F6F\u1F6E\x03\x02\x02\x02\u1F70\u0449\x03\x02\x02\x02\u1F71\u1F76\x05" +
		"\u0448\u0225\x02\u1F72\u1F73\x07\u0198\x02\x02\u1F73\u1F75\x05\u0448\u0225" +
		"\x02\u1F74\u1F72\x03\x02\x02\x02\u1F75\u1F78\x03\x02\x02\x02\u1F76\u1F74" +
		"\x03\x02\x02\x02\u1F76\u1F77\x03\x02\x02\x02\u1F77\u044B\x03\x02\x02\x02" +
		"\u1F78\u1F76\x03\x02\x02\x02\u1F79\u1F7E\x05\u0446\u0224\x02\u1F7A\u1F7B" +
		"\x07\u0198";
	private static readonly _serializedATNSegment15: string =
		"\x02\x02\u1F7B\u1F7D\x05\u0446\u0224\x02\u1F7C\u1F7A\x03\x02\x02\x02\u1F7D" +
		"\u1F80\x03\x02\x02\x02\u1F7E\u1F7C\x03\x02\x02\x02\u1F7E\u1F7F\x03\x02" +
		"\x02\x02\u1F7F\u044D\x03\x02\x02\x02\u1F80\u1F7E\x03\x02\x02\x02\u1F81" +
		"\u1F82\x05\u0462\u0232\x02\u1F82\u044F\x03\x02\x02\x02\u1F83\u1F86\x05" +
		"\u0460\u0231\x02\u1F84\u1F86\x05\u04AE\u0258\x02\u1F85\u1F83\x03\x02\x02" +
		"\x02\u1F85\u1F84\x03\x02\x02\x02\u1F86\u0451\x03\x02\x02\x02\u1F87\u1F88" +
		"\x05\u0450\u0229\x02\u1F88\u0453\x03\x02\x02\x02\u1F89\u1F8C\x05\u0460" +
		"\u0231\x02\u1F8A\u1F8C\x05\u04B4\u025B\x02\u1F8B\u1F89\x03\x02\x02\x02" +
		"\u1F8B\u1F8A\x03\x02\x02\x02\u1F8C\u0455\x03\x02\x02\x02\u1F8D\u1F8E\x05" +
		"\u0454\u022B\x02\u1F8E\u0457\x03\x02\x02\x02\u1F8F\u1F90\x05\u0462\u0232" +
		"\x02\u1F90\u0459\x03\x02\x02\x02\u1F91\u1F92\x05\u047C\u023F\x02\u1F92" +
		"\u045B\x03\x02\x02\x02\u1F93\u1F94\x05\u0462\u0232\x02\u1F94\u045D\x03" +
		"\x02\x02\x02\u1F95\u1F96\x05\u0462\u0232\x02\u1F96\u045F\x03\x02\x02\x02" +
		"\u1F97\u1F9B\t\x81\x02\x02\u1F98\u1F99\x06\u0231\xCC\x02\u1F99\u1F9B\x07" +
		"\u0309\x02\x02\u1F9A\u1F97\x03\x02\x02\x02\u1F9A\u1F98\x03\x02\x02\x02" +
		"\u1F9B\u0461\x03\x02\x02\x02\u1F9C\u1F9F\x05\u0460\u0231\x02\u1F9D\u1F9F" +
		"\x05\u04A8\u0255\x02\u1F9E\u1F9C\x03\x02\x02\x02\u1F9E\u1F9D\x03\x02\x02" +
		"\x02\u1F9F\u0463\x03\x02\x02\x02\u1FA0\u1FA5\x05\u0462\u0232\x02\u1FA1" +
		"\u1FA2\x07\u0198\x02\x02\u1FA2\u1FA4\x05\u0462\u0232\x02\u1FA3\u1FA1\x03" +
		"\x02\x02\x02\u1FA4\u1FA7\x03\x02\x02\x02\u1FA5\u1FA3\x03\x02\x02\x02\u1FA5" +
		"\u1FA6\x03\x02\x02\x02\u1FA6\u0465\x03\x02\x02\x02\u1FA7\u1FA5\x03\x02" +
		"\x02\x02\u1FA8\u1FA9\x07\u019B\x02\x02\u1FA9\u1FAA\x05\u0464\u0233\x02" +
		"\u1FAA\u1FAB\x07\u019C\x02\x02\u1FAB\u0467\x03\x02\x02\x02\u1FAC\u1FAE" +
		"\x05\u0462\u0232\x02\u1FAD\u1FAF\x05\u046C\u0237\x02\u1FAE\u1FAD\x03\x02" +
		"\x02\x02\u1FAE\u1FAF\x03\x02\x02\x02\u1FAF\u0469\x03\x02\x02\x02\u1FB0" +
		"\u1FB5\x05\u0462\u0232\x02\u1FB1\u1FB3\x05\u046C\u0237\x02\u1FB2\u1FB4" +
		"\x05\u046C\u0237\x02\u1FB3\u1FB2\x03\x02\x02\x02\u1FB3\u1FB4\x03\x02\x02" +
		"\x02\u1FB4\u1FB6\x03\x02\x02\x02\u1FB5\u1FB1\x03\x02\x02\x02\u1FB5\u1FB6" +
		"\x03\x02\x02\x02\u1FB6\u1FBC\x03\x02\x02\x02\u1FB7\u1FB8\x06\u0236\xCD" +
		"\x02\u1FB8\u1FB9\x05\u046C\u0237\x02\u1FB9\u1FBA\x05\u046C\u0237\x02\u1FBA" +
		"\u1FBC\x03\x02\x02\x02\u1FBB\u1FB0\x03\x02\x02\x02\u1FBB\u1FB7\x03\x02" +
		"\x02\x02\u1FBC\u046B\x03\x02\x02\x02\u1FBD\u1FBE\x07\u0197\x02\x02\u1FBE" +
		"\u1FBF\x05\u0462\u0232\x02\u1FBF\u046D\x03\x02\x02\x02\u1FC0\u1FC1\t\x82" +
		"\x02\x02\u1FC1\u046F\x03\x02\x02\x02\u1FC2\u1FC3\t\x83\x02\x02\u1FC3\u0471" +
		"\x03\x02\x02\x02\u1FC4\u1FC5\t\x84\x02\x02\u1FC5\u0473\x03\x02\x02\x02" +
		"\u1FC6\u1FCC\x07\u017E\x02\x02\u1FC7\u1FC8\x06\u023B\xCE\x02\u1FC8\u1FCC" +
		"\x07\u01A7\x02\x02\u1FC9\u1FCC\x07\u0180\x02\x02\u1FCA\u1FCC\x07\u017F" +
		"\x02\x02\u1FCB\u1FC6\x03\x02\x02\x02\u1FCB\u1FC7\x03\x02\x02\x02\u1FCB" +
		"\u1FC9\x03\x02\x02\x02\u1FCB\u1FCA\x03\x02\x02\x02\u1FCC\u0475\x03\x02" +
		"\x02\x02\u1FCD\u1FD7\x05\u0482\u0242\x02\u1FCE\u1FD7\x05\u0488\u0245\x02" +
		"\u1FCF\u1FD7\x05\u048E\u0248\x02\u1FD0\u1FD7\x05\u048C\u0247\x02\u1FD1" +
		"\u1FD7\x05\u048A\u0246\x02\u1FD2\u1FD4\x07\u0305\x02\x02\u1FD3\u1FD2\x03" +
		"\x02\x02\x02\u1FD3\u1FD4\x03\x02\x02\x02\u1FD4\u1FD5\x03\x02\x02\x02\u1FD5" +
		"\u1FD7\t\x85\x02\x02\u1FD6\u1FCD\x03\x02\x02\x02\u1FD6\u1FCE\x03\x02\x02" +
		"\x02\u1FD6\u1FCF\x03\x02\x02\x02\u1FD6\u1FD0\x03\x02\x02\x02\u1FD6\u1FD1" +
		"\x03\x02\x02\x02\u1FD6\u1FD3\x03\x02\x02\x02\u1FD7\u0477\x03\x02\x02\x02" +
		"\u1FD8\u1FDE\x05\u0476\u023C\x02\u1FD9\u1FDA\x07\u0189\x02\x02\u1FDA\u1FDE" +
		"\x05\u046E\u0238\x02\u1FDB\u1FDC\x07\u018A\x02\x02\u1FDC\u1FDE\x05\u046E" +
		"\u0238\x02\u1FDD\u1FD8\x03\x02\x02\x02\u1FDD\u1FD9\x03\x02\x02\x02\u1FDD" +
		"\u1FDB\x03\x02\x02\x02\u1FDE\u0479\x03\x02\x02\x02\u1FDF\u1FE0\x07\u019B" +
		"\x02\x02\u1FE0\u1FE5\x05\u047E\u0240\x02\u1FE1\u1FE2\x07\u0198\x02\x02" +
		"\u1FE2\u1FE4\x05\u047E\u0240\x02\u1FE3\u1FE1\x03\x02\x02\x02\u1FE4\u1FE7" +
		"\x03\x02\x02\x02\u1FE5\u1FE3\x03\x02\x02\x02\u1FE5\u1FE6\x03\x02\x02\x02" +
		"\u1FE6\u1FE8\x03\x02\x02\x02\u1FE7\u1FE5\x03\x02\x02\x02\u1FE8\u1FE9\x07" +
		"\u019C\x02\x02\u1FE9\u047B\x03\x02\x02\x02\u1FEA\u1FEE\x07\u030A\x02\x02" +
		"\u1FEB\u1FEC\x06\u023F\xCF\x02\u1FEC\u1FEE\x07\u0309\x02\x02\u1FED\u1FEA" +
		"\x03\x02\x02\x02\u1FED\u1FEB\x03\x02\x02\x02\u1FEE\u047D\x03\x02\x02\x02" +
		"\u1FEF\u1FF3\x05\u047C\u023F\x02\u1FF0\u1FF3\x07\u01A7\x02\x02\u1FF1\u1FF3" +
		"\x07\u01A8\x02\x02\u1FF2\u1FEF\x03\x02\x02\x02\u1FF2\u1FF0\x03\x02\x02" +
		"\x02\u1FF2\u1FF1\x03\x02\x02\x02\u1FF3\u047F\x03\x02\x02\x02\u1FF4\u1FF8" +
		"\x05\u047C\u023F\x02\u1FF5\u1FF6\x06\u0241\xD0\x02\u1FF6\u1FF8\x07\u01A7" +
		"\x02\x02\u1FF7\u1FF4\x03\x02\x02\x02\u1FF7\u1FF5\x03\x02\x02\x02\u1FF8" +
		"\u0481\x03\x02\x02\x02\u1FF9\u1FFB\x07\u0305\x02\x02\u1FFA\u1FF9\x03\x02" +
		"\x02\x02\u1FFA\u1FFB\x03\x02\x02\x02\u1FFB\u1FFC\x03\x02\x02\x02\u1FFC" +
		"\u1FFF\x05\u047C\u023F\x02\u1FFD\u1FFF\x07\u0307\x02\x02\u1FFE\u1FFA\x03" +
		"\x02\x02\x02\u1FFE\u1FFD\x03\x02\x02\x02\u1FFF\u2003\x03\x02\x02\x02\u2000" +
		"\u2002\x05\u047C\u023F\x02\u2001\u2000\x03\x02\x02\x02\u2002\u2005\x03" +
		"\x02\x02\x02\u2003\u2001\x03\x02\x02\x02\u2003\u2004\x03\x02\x02\x02\u2004" +
		"\u0483\x03\x02\x02\x02\u2005\u2003\x03\x02\x02\x02\u2006\u2007\x05\u047C" +
		"\u023F\x02\u2007\u0485\x03\x02\x02\x02\u2008\u200D\x05\u047C\u023F\x02" +
		"\u2009\u200A\x07\u0198\x02\x02\u200A\u200C\x05\u047C\u023F\x02\u200B\u2009" +
		"\x03\x02\x02\x02\u200C\u200F\x03\x02\x02\x02\u200D\u200B\x03\x02\x02\x02" +
		"\u200D\u200E\x03\x02\x02\x02\u200E\u0487\x03\x02\x02\x02\u200F\u200D\x03" +
		"\x02\x02\x02\u2010\u2011\t\x84\x02\x02\u2011\u0489\x03\x02\x02\x02\u2012" +
		"\u2013\t\x86\x02\x02\u2013\u048B\x03\x02\x02\x02\u2014\u2015\t\x87\x02" +
		"\x02\u2015\u048D\x03\x02\x02\x02\u2016\u2017\x07r\x02\x02\u2017\u201D" +
		"\x07\u030A\x02\x02\u2018\u2019\x07\u0162\x02\x02\u2019\u201D\x07\u030A" +
		"\x02\x02\u201A\u201B\x07\u015F\x02\x02\u201B\u201D\x07\u030A\x02\x02\u201C" +
		"\u2016\x03\x02\x02\x02\u201C\u2018\x03\x02\x02\x02\u201C\u201A\x03\x02" +
		"\x02\x02\u201D\u048F\x03\x02\x02\x02\u201E\u2021\x05\u0394\u01CB\x02\u201F" +
		"\u2021\x05\u0494\u024B\x02\u2020\u201E\x03\x02\x02\x02\u2020\u201F\x03" +
		"\x02\x02\x02\u2021\u0491\x03\x02\x02\x02\u2022\u2023\x05\u0494\u024B\x02" +
		"\u2023\u0493\x03\x02\x02\x02\u2024\u2025\x07\u019B\x02\x02\u2025\u2026" +
		"\x07\u017E\x02\x02\u2026\u2027\x07\u0198\x02\x02\u2027\u2028\x07\u017E" +
		"\x02\x02\u2028\u2029\x07\u019C\x02\x02\u2029\u0495\x03\x02\x02\x02\u202A" +
		"\u202D\x07\u030A\x02\x02\u202B\u202D\x05\u0462\u0232\x02\u202C\u202A\x03" +
		"\x02\x02\x02\u202C\u202B\x03\x02\x02\x02\u202D\u0497\x03\x02\x02\x02\u202E" +
		"\u2031\x05\u0460\u0231\x02\u202F\u2031\x05\u04B6\u025C\x02\u2030\u202E" +
		"\x03\x02\x02\x02\u2030\u202F\x03\x02\x02\x02\u2031\u0499\x03\x02\x02\x02" +
		"\u2032\u2035\x05\u0454\u022B\x02\u2033\u2035\x05\u047C\u023F\x02\u2034" +
		"\u2032\x03\x02\x02\x02\u2034\u2033\x03\x02\x02\x02\u2035\u049B\x03\x02" +
		"\x02\x02\u2036\u2039\x05\u0474\u023B\x02\u2037\u2039\x05\u0460\u0231\x02" +
		"\u2038\u2036\x03\x02\x02\x02\u2038\u2037\x03\x02\x02\x02\u2039\u049D\x03" +
		"\x02\x02\x02\u203A\u203B\x07\u019B\x02\x02\u203B\u203C\x07\u019C\x02\x02" +
		"\u203C\u049F\x03\x02\x02\x02\u203D\u203E\t\x88\x02\x02\u203E\u04A1\x03" +
		"\x02\x02\x02\u203F\u2040\t\x89\x02\x02\u2040\u04A3\x03\x02\x02\x02\u2041" +
		"\u2042\x07\x9D\x02\x02\u2042\u2048\x07\u0197\x02\x02\u2043\u2044\x07\xB6" +
		"\x02\x02\u2044\u2048\x07\u0197\x02\x02\u2045\u2046\x07\u0136\x02\x02\u2046" +
		"\u2048\x07\u0197\x02\x02\u2047\u2041\x03\x02\x02\x02\u2047\u2043\x03\x02" +
		"\x02\x02\u2047\u2045\x03\x02\x02\x02\u2048\u04A5\x03\x02\x02\x02\u2049" +
		"\u204A\x07\u02B2\x02\x02\u204A\u2054\x07\u0197\x02\x02\u204B\u204C\x07" +
		"\u02C1\x02\x02\u204C\u2054\x07\u0197\x02\x02\u204D\u204E\x07\x9D\x02\x02" +
		"\u204E\u2054\x07\u0197\x02\x02\u204F\u2050\x07\xB6\x02\x02\u2050\u2054" +
		"\x07\u0197\x02\x02\u2051\u2052\x07\u0136\x02\x02\u2052\u2054\x07\u0197" +
		"\x02\x02\u2053\u2049\x03\x02\x02\x02\u2053\u204B\x03\x02\x02\x02\u2053" +
		"\u204D\x03\x02\x02\x02\u2053\u204F\x03\x02\x02\x02\u2053\u2051\x03\x02" +
		"\x02\x02\u2054\u04A7\x03\x02\x02\x02\u2055\u205D\x06\u0255\xD1\x02\u2056" +
		"\u205E\x05\u04AE\u0258\x02\u2057\u205E\x05\u04BA\u025E\x02\u2058\u205E" +
		"\x07\x13\x02\x02\u2059\u205A\x06\u0255\xD2\x02\u205A\u205E\x07:\x02\x02" +
		"\u205B\u205C\x06\u0255\xD3\x02\u205C\u205E\x07\u02EA\x02\x02\u205D\u2056" +
		"\x03\x02\x02\x02\u205D\u2057\x03\x02\x02\x02\u205D\u2058\x03\x02\x02\x02" +
		"\u205D\u2059\x03\x02\x02\x02\u205D\u205B\x03\x02\x02\x02\u205E\u2067\x03" +
		"\x02\x02\x02\u205F\u2065\x05\u04B2\u025A\x02\u2060\u2065\x05\u04AA\u0256" +
		"\x02\u2061\u2065\x05\u04AC\u0257\x02\u2062\u2065\x05\u04B0\u0259\x02\u2063" +
		"\u2065\x05\u04B8\u025D\x02\u2064\u205F\x03\x02\x02\x02\u2064\u2060\x03" +
		"\x02\x02\x02\u2064\u2061\x03\x02\x02\x02\u2064\u2062\x03\x02\x02\x02\u2064" +
		"\u2063\x03\x02\x02\x02\u2065\u2067\x03\x02\x02\x02\u2066\u2055\x03\x02" +
		"\x02\x02\u2066\u2064\x03\x02\x02\x02\u2067\u04A9\x03\x02\x02\x02\u2068" +
		"\u2069\t\x8A\x02\x02\u2069\u04AB\x03\x02\x02\x02\u206A\u206B\t\x8B\x02" +
		"\x02\u206B\u04AD\x03\x02\x02\x02\u206C\u2077\x06\u0258\xD4\x02\u206D\u2078" +
		"\x05\u04BC\u025F\x02\u206E\u2078\x07\x87\x02\x02\u206F\u2078\x07\x93\x02" +
		"\x02\u2070\u2078\x07\xF1\x02\x02\u2071\u2078\x07\u0107\x02\x02\u2072\u2078" +
		"\x07\u010B\x02\x02\u2073\u2078\x07\u011A\x02\x02\u2074\u2078\x07\u011D" +
		"\x02\x02\u2075\u2078\x07\u02E5\x02\x02\u2076\u2078\x07\u0151\x02\x02\u2077" +
		"\u206D\x03\x02\x02\x02\u2077\u206E\x03\x02\x02\x02\u2077\u206F\x03\x02" +
		"\x02\x02\u2077\u2070\x03\x02\x02\x02\u2077\u2071\x03\x02\x02\x02\u2077" +
		"\u2072\x03\x02\x02\x02\u2077\u2073\x03\x02\x02\x02\u2077\u2074\x03\x02" +
		"\x02\x02\u2077\u2075\x03\x02\x02\x02\u2077\u2076\x03\x02\x02\x02\u2078" +
		"\u207F\x03\x02\x02\x02\u2079\u207D\x05\u04B2\u025A\x02\u207A\u207D\x05" +
		"\u04B0\u0259\x02\u207B\u207D\x05\u04B8\u025D\x02\u207C\u2079\x03\x02\x02" +
		"\x02\u207C\u207A\x03\x02\x02\x02\u207C\u207B\x03\x02\x02\x02\u207D\u207F" +
		"\x03\x02\x02\x02\u207E\u206C\x03\x02\x02\x02\u207E\u207C\x03\x02\x02\x02" +
		"\u207F\u04AF\x03\x02\x02\x02\u2080\u2081\t\x8C\x02\x02\u2081\u04B1\x03" +
		"\x02\x02\x02\u2082\u2083\t\x8D\x02\x02\u2083\u04B3\x03\x02\x02\x02\u2084" +
		"\u2087\x06\u025B\xD5\x02\u2085\u2088\x05\u04BC\u025F\x02\u2086\u2088\x05" +
		"\u04BA\u025E\x02\u2087\u2085\x03\x02\x02\x02\u2087\u2086\x03\x02\x02\x02" +
		"\u2088\u208F\x03\x02\x02\x02\u2089\u208D\x05\u04B2\u025A\x02\u208A\u208D" +
		"\x05\u04AC\u0257\x02\u208B\u208D\x05\u04B8\u025D\x02\u208C\u2089\x03\x02" +
		"\x02\x02\u208C\u208A\x03\x02\x02\x02\u208C\u208B\x03\x02\x02\x02\u208D" +
		"\u208F\x03\x02\x02\x02\u208E\u2084\x03\x02\x02\x02\u208E\u208C\x03\x02" +
		"\x02\x02\u208F\u04B5\x03\x02\x02\x02\u2090\u2095\x05\u04B2\u025A\x02\u2091" +
		"\u2095\x05\u04AA\u0256\x02\u2092\u2095\x05\u04AC\u0257\x02\u2093\u2095" +
		"\x05\u04B0\u0259\x02\u2094\u2090\x03\x02\x02\x02\u2094\u2091\x03\x02\x02" +
		"\x02\u2094\u2092\x03\x02\x02\x02\u2094\u2093\x03\x02\x02\x02\u2095\u04B7" +
		"\x03\x02\x02\x02\u2096\u2097\t\x89\x02\x02\u2097\u04B9\x03\x02\x02\x02" +
		"\u2098\u209E\t\x8E\x02\x02\u2099\u209A\x06\u025E\xD6\x02\u209A\u209E\x07" +
		":\x02\x02\u209B\u209C\x06\u025E\xD7\x02\u209C\u209E\x07\xA4\x02\x02\u209D" +
		"\u2098\x03\x02\x02\x02\u209D\u2099\x03\x02\x02\x02\u209D\u209B\x03\x02" +
		"\x02\x02\u209E\u04BB\x03\x02\x02\x02\u209F\u20A9\t\x8F\x02\x02\u20A0\u20A1" +
		"\x06\u025F\xD8\x02\u20A1\u20A9\x07:\x02\x02\u20A2\u20A3\x06\u025F\xD9" +
		"\x02\u20A3\u20A9\t\x90\x02\x02\u20A4\u20A5\x06\u025F\xDA\x02\u20A5\u20A9" +
		"\t\x91\x02\x02\u20A6\u20A7\x06\u025F\xDB\x02\u20A7\u20A9\x07\u02B4\x02" +
		"\x02\u20A8\u209F\x03\x02\x02\x02\u20A8\u20A0\x03\x02\x02\x02\u20A8\u20A2" +
		"\x03\x02\x02\x02\u20A8\u20A4\x03\x02\x02\x02\u20A8\u20A6\x03\x02\x02\x02" +
		"\u20A9\u04BD\x03\x02\x02\x02\u0461\u04C1\u04C8\u04CB\u04EF\u04F7\u04FC" +
		"\u050C\u0513\u051A\u051D\u0524\u0529\u052C\u0531\u0537\u0539\u053D\u0541" +
		"\u054A\u054E\u0553\u0559\u0560\u0564\u0569\u056E\u0575\u0578\u057E\u0581" +
		"\u0588\u0592\u0597\u059C\u05A4\u05AA\u05AE\u05B3\u05BC\u05C2\u05C8\u05CE" +
		"\u05D8\u05DE\u05E7\u05F5\u05F9\u05FF\u0603\u0609\u060D\u0612\u0615\u061B" +
		"\u0621\u0627\u062B\u0630\u0634\u0638\u0640\u0642\u0649\u0651\u0659\u065D" +
		"\u0674\u0684\u0687\u0690\u0695\u069B\u06A0\u06A4\u06A9\u06AD\u06B1\u06B5" +
		"\u06B9\u06BD\u06BF\u06CA\u06CF\u06D5\u06DD\u06E6\u06EB\u06EE\u06F3\u06FA" +
		"\u0702\u0706\u070B\u0712\u0717\u071C\u0724\u0728\u072D\u0730\u0733\u0736" +
		"\u073D\u0744\u0748\u0760\u0764\u076A\u0771\u0774\u0778\u077F\u0782\u0785" +
		"\u0788\u0791\u0798\u079D\u07A0\u07A3\u07A9\u07AF\u07B2\u07B7\u07C1\u07C4" +
		"\u07CA\u07D0\u07DA\u07DD\u07E5\u07EB\u07F6\u07F9\u07FE\u0811\u0814\u0817" +
		"\u081D\u0820\u0822\u0828\u0832\u083C\u083F\u0842\u0847\u084D\u085A\u085E" +
		"\u0863\u086C\u087D\u0890\u0899\u089C\u08A4\u08A9\u08AD\u08B4\u08B9\u08C8" +
		"\u08CC\u08D2\u08D8\u08DE\u08E4\u08EA\u08EF\u08F3\u08FB\u0901\u0907\u090C" +
		"\u090F\u0912\u091B\u091E\u0929\u0935\u093E\u0942\u094B\u094E\u0954\u0956" +
		"\u095A\u0961\u096E\u0975\u097B\u097E\u098F\u09A3\u09A7\u09AD\u09B3\u09B9" +
		"\u09BE\u09C5\u09CC\u09D1\u09D4\u09D8\u09DC\u09E1\u09E5\u09E9\u09EF\u09F4" +
		"\u09F7\u09FB\u0A01\u0A05\u0A09\u0A11\u0A19\u0A22\u0A2B\u0A38\u0A3B\u0A3F" +
		"\u0A45\u0A4D\u0A52\u0A55\u0A58\u0A5B\u0A5E\u0A60\u0A66\u0A68\u0A77\u0A7D" +
		"\u0A84\u0A87\u0A89\u0A8B\u0A95\u0A97\u0A9B\u0A9E\u0AA1\u0AA5\u0AAA\u0AB0" +
		"\u0AB3\u0AB6\u0ABC\u0ABF\u0AC8\u0AD1\u0AD5\u0AD9\u0ADF\u0AE4\u0AE9\u0AEE" +
		"\u0AF2\u0AF8\u0B03\u0B06\u0B0B\u0B11\u0B14\u0B17\u0B1A\u0B1D\u0B2B\u0B2E" +
		"\u0B32\u0B36\u0B3C\u0B41\u0B45\u0B4A\u0B4D\u0B51\u0B57\u0B5C\u0B65\u0B69" +
		"\u0B6D\u0B70\u0B75\u0B78\u0B7A\u0B7E\u0B81\u0B87\u0B89\u0B90\u0B94\u0B96" +
		"\u0B9B\u0B9F\u0BA3\u0BA9\u0BB1\u0BB6\u0BB9\u0BBC\u0BBF\u0BC2\u0BC6\u0BD5" +
		"\u0BD9\u0BDF\u0BE2\u0BE5\u0BEB\u0BF0\u0BF4\u0BF7\u0BFF\u0C01\u0C0E\u0C1A" +
		"\u0C1F\u0C22\u0C25\u0C2A\u0C30\u0C40\u0C54\u0C5D\u0C61\u0C68\u0C6D\u0C76" +
		"\u0C7D\u0C88\u0C8F\u0C9A\u0CA1\u0CA5\u0CAB\u0CB0\u0CB5\u0CB9\u0CBF\u0CC5" +
		"\u0CC7\u0CCA\u0CCE\u0CD8\u0CDD\u0CE2\u0CE9\u0CF2\u0CFA\u0CFF\u0D03\u0D09" +
		"\u0D0C\u0D0F\u0D13\u0D17\u0D21\u0D25\u0D28\u0D2B\u0D30\u0D36\u0D3A\u0D40" +
		"\u0D43\u0D45\u0D4A\u0D56\u0D5F\u0D6C\u0D6F\u0D74\u0D7B\u0D7F\u0D83\u0D85" +
		"\u0D93\u0D9A\u0DA3\u0DA9\u0DB2\u0DB6\u0DBA\u0DC4\u0DC6\u0DCE\u0DD5\u0DDA" +
		"\u0DDE\u0DE2\u0DE5\u0DEB\u0DEE\u0DF1\u0DF7\u0DFE\u0E03\u0E07\u0E0A\u0E0D" +
		"\u0E10\u0E12\u0E16\u0E1E\u0E24\u0E28\u0E2D\u0E30\u0E33\u0E36\u0E38\u0E3D" +
		"\u0E46\u0E53\u0E55\u0E59\u0E5F\u0E62\u0E65\u0E6B\u0E72\u0E74\u0E7C\u0E82" +
		"\u0E87\u0E8A\u0E91\u0E93\u0E9C\u0EA5\u0EAE\u0EB6\u0EBA\u0EC1\u0EC4\u0EC6" +
		"\u0ECE\u0ED4\u0EDE\u0EE5\u0F3D\u0F41\u0F45\u0F53\u0F5B\u0F5E\u0F6A\u0F6F" +
		"\u0F75\u0F7C\u0F83\u0F8A\u0F91\u0F98\u0F9F\u0FA2\u0FA9\u0FB1\u0FB9\u0FC3" +
		"\u0FC9\u0FCD\u0FD1\u0FD6\u0FD9\u0FDB\u0FE4\u0FEA\u0FF1\u0FF6\u0FFB\u1000" +
		"\u1003\u100A\u1017\u101D\u1023\u102A\u1032\u1038\u1044\u1046\u104C\u1050" +
		"\u1052\u1056\u1063\u1069\u1071\u107C\u1080\u108D\u1094\u109A\u109C\u10A6" +
		"\u10AE\u10B1\u10B6\u10BA\u10C0\u10C3\u10C8\u10D3\u10D5\u10E1\u10E6\u10EE" +
		"\u10F4\u10F6\u10F8\u10FE\u110A\u110F\u1111\u1115\u111B\u111E\u1121\u112B" +
		"\u112D\u1133\u113A\u1140\u114A\u114E\u1153\u1164\u1174\u1179\u1181\u1189" +
		"\u118E\u1194\u1197\u1199\u11A2\u11A8\u11AE\u11B0\u11B4\u11BF\u11C9\u11CE" +
		"\u11D3\u11D8\u11E0\u11E4\u11E9\u11F2\u11FE\u120C\u1215\u1217\u121E\u1225" +
		"\u1229\u122F\u1237\u123E\u1242\u1248\u124F\u1252\u125B\u1261\u1266\u127D" +
		"\u1280\u1290\u1295\u1298\u129C\u129F\u12AD\u12B3\u12B8\u12BB\u12BD\u12C1" +
		"\u12C6\u12C8\u12D4\u12DA\u12F0\u12F4\u12F6\u12FE\u1302\u130B\u1315\u131C" +
		"\u131F\u1323\u1326\u1329\u132D\u1330\u1334\u1337\u133C\u133F\u1344\u1347" +
		"\u134D\u1351\u1357\u135A\u1363\u1365\u136B\u136F\u1372\u1375\u1379\u137F" +
		"\u1382\u1385\u138F\u1393\u139C\u139F\u13A4\u13A7\u13AA\u13AE\u13B1\u13B6" +
		"\u13BA\u13C2\u13CF\u13E1\u13E6\u13EB\u13F3\u13F9\u13FB\u13FF\u1402\u1410" +
		"\u141A\u141E\u1426\u1429\u142D\u1437\u143B\u1442\u1447\u144F\u1454\u145A" +
		"\u1461\u1466\u146C\u1473\u147D\u147F\u1487\u148C\u1490\u1493\u149A\u149F" +
		"\u14A3\u14AE\u14B6\u14BA\u14BD\u14C0\u14C4\u14C8\u14CD\u14D3\u14D7\u14E2" +
		"\u14E5\u14E8\u14EB\u14F3\u14F7\u14FC\u1504\u150C\u1512\u151F\u1529\u152F" +
		"\u153D\u1540\u1544\u154F\u1551\u155A\u1566\u1568\u156F\u1575\u157B\u1583" +
		"\u158E\u1592\u15AF\u15B1\u15B8\u15C9\u15D0\u15DE\u15EA\u15F0\u15F7\u15FA" +
		"\u161C\u1624\u1626\u1632\u1637\u163D\u1645\u164C\u1652\u1657\u165D\u1662" +
		"\u1667\u166D\u1672\u1678\u1680\u1688\u1690\u1698\u169D\u16A3\u16A8\u16AC" +
		"\u16B0\u16B5\u16B7\u16CA\u16CE\u16D5\u16E1\u16E4\u16E8\u16ED\u16F2\u16F6" +
		"\u1700\u1709\u170B\u170E\u1717\u171E\u172B\u1730\u1737\u173D\u1757\u1776" +
		"\u178A\u1790\u1794\u17AF\u17BB\u17C8\u17CC\u17D0\u17EC\u1824\u182E\u1832" +
		"\u183E\u1843\u1850\u1864\u1868\u1879\u187C\u1881\u1884\u188D\u1891\u1897" +
		"\u189D\u18A1\u18AC\u18B2\u18B4\u18BB\u18C2\u18C6\u18CD\u18D2\u18D7\u18DA" +
		"\u18DF\u18E3\u18E7\u18EC\u18F1\u18F3\u18F7\u1904\u1908\u190B\u190F\u1913" +
		"\u1917\u191C\u1920\u1924\u192D\u192F\u1936\u193C\u1944\u1959\u195E\u1965" +
		"\u197C\u198C\u1996\u199A\u19A1\u19A4\u19AF\u19B8\u19BB\u19C2\u19C7\u19E1" +
		"\u19E7\u19ED\u19F1\u19FB\u19FF\u1A0C\u1A18\u1A2A\u1A32\u1A3C\u1A3F\u1A44" +
		"\u1A48\u1A4F\u1A54\u1A5B\u1A63\u1A66\u1A6B\u1A6E\u1A76\u1A79\u1A87\u1A8A" +
		"\u1A97\u1A9B\u1A9D\u1AA2\u1AA7\u1AAD\u1AB3\u1AB9\u1ABE\u1AC1\u1AC7\u1ACC" +
		"\u1ACF\u1AD5\u1AD9\u1ADF\u1AE1\u1AE4\u1AEA\u1AF0\u1AF8\u1AFA\u1AFC\u1B00" +
		"\u1B06\u1B0B\u1B0F\u1B14\u1B1A\u1B21\u1B24\u1B26\u1B29\u1B33\u1B37\u1B3D" +
		"\u1B44\u1B49\u1B57\u1B5C\u1B64\u1B69\u1B6D\u1B70\u1B75\u1B79\u1B81\u1B89" +
		"\u1B8B\u1B92\u1B9A\u1BA1\u1BA4\u1BAC\u1BB4\u1BB6\u1BBC\u1BC2\u1BC6\u1BCD" +
		"\u1BD8\u1BE1\u1BE4\u1BE9\u1BEB\u1BEE\u1BF1\u1BF5\u1BF8\u1BFC\u1C01\u1C04" +
		"\u1C08\u1C0B\u1C0F\u1C14\u1C18\u1C24\u1C28\u1C2E\u1C31\u1C36\u1C3A\u1C3E" +
		"\u1C43\u1C4C\u1C4F\u1C53\u1C57\u1C5A\u1C5E\u1C62\u1C67\u1C6C\u1C72\u1C77" +
		"\u1C7C\u1C7E\u1C83\u1C8A\u1C92\u1C98\u1C9A\u1C9E\u1CA2\u1CA6\u1CAA\u1CB8" +
		"\u1CBF\u1CC3\u1CC8\u1CCE\u1CD2\u1CD8\u1CDC\u1CE0\u1CE5\u1CEA\u1CEF\u1CF4" +
		"\u1CFA\u1D00\u1D05\u1D0A\u1D0F\u1D14\u1D19\u1D1E\u1D23\u1D2D\u1D33\u1D39" +
		"\u1D3F\u1D42\u1D49\u1D4E\u1D51\u1D55\u1D58\u1D5C\u1D61\u1D65\u1D6A\u1D6E" +
		"\u1D77\u1D7A\u1D7D\u1D80\u1D84\u1D88\u1D8C\u1D9B\u1D9E\u1DA0\u1DA5\u1DAE" +
		"\u1DB1\u1DB5\u1DC2\u1DCE\u1DD3\u1DD8\u1DE1\u1DE6\u1DEF\u1DF4\u1DF8\u1DFC" +
		"\u1E00\u1E05\u1E0A\u1E10\u1E15\u1E18\u1E1F\u1E28\u1E2F\u1E3D\u1E49\u1E56" +
		"\u1E5E\u1E65\u1E6E\u1E74\u1E7C\u1E82\u1E8D\u1E95\u1E9D\u1EA5\u1EAF\u1EB4" +
		"\u1EB9\u1EBB\u1EC1\u1EC7\u1ECA\u1ED1\u1ED3\u1ED5\u1ED8\u1EDA\u1EEB\u1EF0" +
		"\u1EF2\u1EF9\u1F06\u1F08\u1F0E\u1F18\u1F21\u1F2C\u1F42\u1F46\u1F5E\u1F69" +
		"\u1F6B\u1F6F\u1F76\u1F7E\u1F85\u1F8B\u1F9A\u1F9E\u1FA5\u1FAE\u1FB3\u1FB5" +
		"\u1FBB\u1FCB\u1FD3\u1FD6\u1FDD\u1FE5\u1FED\u1FF2\u1FF7\u1FFA\u1FFE\u2003" +
		"\u200D\u201C\u2020\u202C\u2030\u2034\u2038\u2047\u2053\u205D\u2064\u2066" +
		"\u2077\u207C\u207E\u2087\u208C\u208E\u2094\u209D\u20A8";
	public static readonly _serializedATN: string = Utils.join(
		[
			MultiQueryMySQLParser._serializedATNSegment0,
			MultiQueryMySQLParser._serializedATNSegment1,
			MultiQueryMySQLParser._serializedATNSegment2,
			MultiQueryMySQLParser._serializedATNSegment3,
			MultiQueryMySQLParser._serializedATNSegment4,
			MultiQueryMySQLParser._serializedATNSegment5,
			MultiQueryMySQLParser._serializedATNSegment6,
			MultiQueryMySQLParser._serializedATNSegment7,
			MultiQueryMySQLParser._serializedATNSegment8,
			MultiQueryMySQLParser._serializedATNSegment9,
			MultiQueryMySQLParser._serializedATNSegment10,
			MultiQueryMySQLParser._serializedATNSegment11,
			MultiQueryMySQLParser._serializedATNSegment12,
			MultiQueryMySQLParser._serializedATNSegment13,
			MultiQueryMySQLParser._serializedATNSegment14,
			MultiQueryMySQLParser._serializedATNSegment15,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MultiQueryMySQLParser.__ATN) {
			MultiQueryMySQLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MultiQueryMySQLParser._serializedATN));
		}

		return MultiQueryMySQLParser.__ATN;
	}

}

export class Sql_scriptContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EOF, 0); }
	public query(): QueryContext[];
	public query(i: number): QueryContext;
	public query(i?: number): QueryContext | QueryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QueryContext);
		} else {
			return this.getRuleContext(i, QueryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_sql_script; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSql_script) {
			listener.enterSql_script(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSql_script) {
			listener.exitSql_script(this);
		}
	}
}


export class QueryContext extends ParserRuleContext {
	public simpleStatement(): SimpleStatementContext | undefined {
		return this.tryGetRuleContext(0, SimpleStatementContext);
	}
	public beginWork(): BeginWorkContext | undefined {
		return this.tryGetRuleContext(0, BeginWorkContext);
	}
	public SEMICOLON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_query; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQuery) {
			listener.enterQuery(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQuery) {
			listener.exitQuery(this);
		}
	}
}


export class SimpleStatementContext extends ParserRuleContext {
	public alterStatement(): AlterStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementContext);
	}
	public createStatement(): CreateStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateStatementContext);
	}
	public dropStatement(): DropStatementContext | undefined {
		return this.tryGetRuleContext(0, DropStatementContext);
	}
	public renameTableStatement(): RenameTableStatementContext | undefined {
		return this.tryGetRuleContext(0, RenameTableStatementContext);
	}
	public truncateTableStatement(): TruncateTableStatementContext | undefined {
		return this.tryGetRuleContext(0, TruncateTableStatementContext);
	}
	public importStatement(): ImportStatementContext | undefined {
		return this.tryGetRuleContext(0, ImportStatementContext);
	}
	public callStatement(): CallStatementContext | undefined {
		return this.tryGetRuleContext(0, CallStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public doStatement(): DoStatementContext | undefined {
		return this.tryGetRuleContext(0, DoStatementContext);
	}
	public handlerStatement(): HandlerStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public loadStatement(): LoadStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public transactionOrLockingStatement(): TransactionOrLockingStatementContext | undefined {
		return this.tryGetRuleContext(0, TransactionOrLockingStatementContext);
	}
	public replicationStatement(): ReplicationStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplicationStatementContext);
	}
	public preparedStatement(): PreparedStatementContext | undefined {
		return this.tryGetRuleContext(0, PreparedStatementContext);
	}
	public cloneStatement(): CloneStatementContext | undefined {
		return this.tryGetRuleContext(0, CloneStatementContext);
	}
	public accountManagementStatement(): AccountManagementStatementContext | undefined {
		return this.tryGetRuleContext(0, AccountManagementStatementContext);
	}
	public tableAdministrationStatement(): TableAdministrationStatementContext | undefined {
		return this.tryGetRuleContext(0, TableAdministrationStatementContext);
	}
	public installUninstallStatment(): InstallUninstallStatmentContext | undefined {
		return this.tryGetRuleContext(0, InstallUninstallStatmentContext);
	}
	public setStatement(): SetStatementContext | undefined {
		return this.tryGetRuleContext(0, SetStatementContext);
	}
	public showStatement(): ShowStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatementContext);
	}
	public resourceGroupManagement(): ResourceGroupManagementContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupManagementContext);
	}
	public otherAdministrativeStatement(): OtherAdministrativeStatementContext | undefined {
		return this.tryGetRuleContext(0, OtherAdministrativeStatementContext);
	}
	public utilityStatement(): UtilityStatementContext | undefined {
		return this.tryGetRuleContext(0, UtilityStatementContext);
	}
	public getDiagnostics(): GetDiagnosticsContext | undefined {
		return this.tryGetRuleContext(0, GetDiagnosticsContext);
	}
	public signalStatement(): SignalStatementContext | undefined {
		return this.tryGetRuleContext(0, SignalStatementContext);
	}
	public resignalStatement(): ResignalStatementContext | undefined {
		return this.tryGetRuleContext(0, ResignalStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_simpleStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleStatement) {
			listener.enterSimpleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleStatement) {
			listener.exitSimpleStatement(this);
		}
	}
}


export class AlterStatementContext extends ParserRuleContext {
	public ALTER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
	public alterTable(): AlterTableContext | undefined {
		return this.tryGetRuleContext(0, AlterTableContext);
	}
	public alterDatabase(): AlterDatabaseContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseContext);
	}
	public PROCEDURE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
	public procedureRef(): ProcedureRefContext | undefined {
		return this.tryGetRuleContext(0, ProcedureRefContext);
	}
	public FUNCTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public functionRef(): FunctionRefContext | undefined {
		return this.tryGetRuleContext(0, FunctionRefContext);
	}
	public alterView(): AlterViewContext | undefined {
		return this.tryGetRuleContext(0, AlterViewContext);
	}
	public alterEvent(): AlterEventContext | undefined {
		return this.tryGetRuleContext(0, AlterEventContext);
	}
	public alterTablespace(): AlterTablespaceContext | undefined {
		return this.tryGetRuleContext(0, AlterTablespaceContext);
	}
	public alterUndoTablespace(): AlterUndoTablespaceContext | undefined {
		return this.tryGetRuleContext(0, AlterUndoTablespaceContext);
	}
	public alterLogfileGroup(): AlterLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, AlterLogfileGroupContext);
	}
	public alterServer(): AlterServerContext | undefined {
		return this.tryGetRuleContext(0, AlterServerContext);
	}
	public INSTANCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
	public ROTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROTATE_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public MASTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public routineAlterOptions(): RoutineAlterOptionsContext | undefined {
		return this.tryGetRuleContext(0, RoutineAlterOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterStatement) {
			listener.enterAlterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterStatement) {
			listener.exitAlterStatement(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	public DATABASE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
	public schemaRef(): SchemaRefContext {
		return this.getRuleContext(0, SchemaRefContext);
	}
	public UPGRADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterDatabase; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterDatabase) {
			listener.enterAlterDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterDatabase) {
			listener.exitAlterDatabase(this);
		}
	}
}


export class AlterEventContext extends ParserRuleContext {
	public EVENT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public eventRef(): EventRefContext {
		return this.getRuleContext(0, EventRefContext);
	}
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public ON_SYMBOL(): TerminalNode[];
	public ON_SYMBOL(i: number): TerminalNode;
	public ON_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.ON_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, i);
		}
	}
	public SCHEDULE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
	public schedule(): ScheduleContext | undefined {
		return this.tryGetRuleContext(0, ScheduleContext);
	}
	public COMPLETION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
	public PRESERVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
	public RENAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public ENABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
	public DISABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public DO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
	public compoundStatement(): CompoundStatementContext | undefined {
		return this.tryGetRuleContext(0, CompoundStatementContext);
	}
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterEvent; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterEvent) {
			listener.enterAlterEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterEvent) {
			listener.exitAlterEvent(this);
		}
	}
}


export class AlterLogfileGroupContext extends ParserRuleContext {
	public LOGFILE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public logfileGroupRef(): LogfileGroupRefContext {
		return this.getRuleContext(0, LogfileGroupRefContext);
	}
	public ADD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public UNDOFILE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext | undefined {
		return this.tryGetRuleContext(0, AlterLogfileGroupOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterLogfileGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterLogfileGroup) {
			listener.enterAlterLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterLogfileGroup) {
			listener.exitAlterLogfileGroup(this);
		}
	}
}


export class AlterLogfileGroupOptionsContext extends ParserRuleContext {
	public alterLogfileGroupOption(): AlterLogfileGroupOptionContext[];
	public alterLogfileGroupOption(i: number): AlterLogfileGroupOptionContext;
	public alterLogfileGroupOption(i?: number): AlterLogfileGroupOptionContext | AlterLogfileGroupOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterLogfileGroupOptionContext);
		} else {
			return this.getRuleContext(i, AlterLogfileGroupOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterLogfileGroupOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterLogfileGroupOptions) {
			listener.enterAlterLogfileGroupOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterLogfileGroupOptions) {
			listener.exitAlterLogfileGroupOptions(this);
		}
	}
}


export class AlterLogfileGroupOptionContext extends ParserRuleContext {
	public tsOptionInitialSize(): TsOptionInitialSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionInitialSizeContext);
	}
	public tsOptionEngine(): TsOptionEngineContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEngineContext);
	}
	public tsOptionWait(): TsOptionWaitContext | undefined {
		return this.tryGetRuleContext(0, TsOptionWaitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterLogfileGroupOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterLogfileGroupOption) {
			listener.enterAlterLogfileGroupOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterLogfileGroupOption) {
			listener.exitAlterLogfileGroupOption(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	public SERVER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
	public serverRef(): ServerRefContext {
		return this.getRuleContext(0, ServerRefContext);
	}
	public serverOptions(): ServerOptionsContext {
		return this.getRuleContext(0, ServerOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterServer; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterServer) {
			listener.enterAlterServer(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterServer) {
			listener.exitAlterServer(this);
		}
	}
}


export class AlterTableContext extends ParserRuleContext {
	public TABLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public onlineOption(): OnlineOptionContext | undefined {
		return this.tryGetRuleContext(0, OnlineOptionContext);
	}
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	public alterTableActions(): AlterTableActionsContext | undefined {
		return this.tryGetRuleContext(0, AlterTableActionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterTable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterTable) {
			listener.enterAlterTable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterTable) {
			listener.exitAlterTable(this);
		}
	}
}


export class AlterTableActionsContext extends ParserRuleContext {
	public alterCommandList(): AlterCommandListContext | undefined {
		return this.tryGetRuleContext(0, AlterCommandListContext);
	}
	public partitionClause(): PartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, PartitionClauseContext);
	}
	public removePartitioning(): RemovePartitioningContext | undefined {
		return this.tryGetRuleContext(0, RemovePartitioningContext);
	}
	public standaloneAlterCommands(): StandaloneAlterCommandsContext | undefined {
		return this.tryGetRuleContext(0, StandaloneAlterCommandsContext);
	}
	public alterCommandsModifierList(): AlterCommandsModifierListContext | undefined {
		return this.tryGetRuleContext(0, AlterCommandsModifierListContext);
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterTableActions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterTableActions) {
			listener.enterAlterTableActions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterTableActions) {
			listener.exitAlterTableActions(this);
		}
	}
}


export class AlterCommandListContext extends ParserRuleContext {
	public alterCommandsModifierList(): AlterCommandsModifierListContext | undefined {
		return this.tryGetRuleContext(0, AlterCommandsModifierListContext);
	}
	public alterList(): AlterListContext | undefined {
		return this.tryGetRuleContext(0, AlterListContext);
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterCommandList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterCommandList) {
			listener.enterAlterCommandList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterCommandList) {
			listener.exitAlterCommandList(this);
		}
	}
}


export class AlterCommandsModifierListContext extends ParserRuleContext {
	public alterCommandsModifier(): AlterCommandsModifierContext[];
	public alterCommandsModifier(i: number): AlterCommandsModifierContext;
	public alterCommandsModifier(i?: number): AlterCommandsModifierContext | AlterCommandsModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterCommandsModifierContext);
		} else {
			return this.getRuleContext(i, AlterCommandsModifierContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterCommandsModifierList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterCommandsModifierList) {
			listener.enterAlterCommandsModifierList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterCommandsModifierList) {
			listener.exitAlterCommandsModifierList(this);
		}
	}
}


export class StandaloneAlterCommandsContext extends ParserRuleContext {
	public DISCARD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public IMPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
	public alterPartition(): AlterPartitionContext | undefined {
		return this.tryGetRuleContext(0, AlterPartitionContext);
	}
	public SECONDARY_LOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
	public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_standaloneAlterCommands; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStandaloneAlterCommands) {
			listener.enterStandaloneAlterCommands(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStandaloneAlterCommands) {
			listener.exitStandaloneAlterCommands(this);
		}
	}
}


export class AlterPartitionContext extends ParserRuleContext {
	public ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public PARTITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public PARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	public noWriteToBinLog(): NoWriteToBinLogContext[];
	public noWriteToBinLog(i: number): NoWriteToBinLogContext;
	public noWriteToBinLog(i?: number): NoWriteToBinLogContext | NoWriteToBinLogContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NoWriteToBinLogContext);
		} else {
			return this.getRuleContext(i, NoWriteToBinLogContext);
		}
	}
	public DROP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public REBUILD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REBUILD_SYMBOL, 0); }
	public allOrPartitionNameList(): AllOrPartitionNameListContext | undefined {
		return this.tryGetRuleContext(0, AllOrPartitionNameListContext);
	}
	public OPTIMIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIMIZE_SYMBOL, 0); }
	public ANALYZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANALYZE_SYMBOL, 0); }
	public CHECK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
	public checkOption(): CheckOptionContext[];
	public checkOption(i: number): CheckOptionContext;
	public checkOption(i?: number): CheckOptionContext | CheckOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CheckOptionContext);
		} else {
			return this.getRuleContext(i, CheckOptionContext);
		}
	}
	public REPAIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
	public repairType(): RepairTypeContext[];
	public repairType(i: number): RepairTypeContext;
	public repairType(i?: number): RepairTypeContext | RepairTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RepairTypeContext);
		} else {
			return this.getRuleContext(i, RepairTypeContext);
		}
	}
	public COALESCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
	public TRUNCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
	public reorgPartitionRule(): ReorgPartitionRuleContext | undefined {
		return this.tryGetRuleContext(0, ReorgPartitionRuleContext);
	}
	public REORGANIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
	public INTO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public EXCHANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXCHANGE_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	public withValidation(): WithValidationContext | undefined {
		return this.tryGetRuleContext(0, WithValidationContext);
	}
	public DISCARD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public IMPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterPartition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterPartition) {
			listener.enterAlterPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterPartition) {
			listener.exitAlterPartition(this);
		}
	}
}


export class AlterListContext extends ParserRuleContext {
	public alterListItem(): AlterListItemContext[];
	public alterListItem(i: number): AlterListItemContext;
	public alterListItem(i?: number): AlterListItemContext | AlterListItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterListItemContext);
		} else {
			return this.getRuleContext(i, AlterListItemContext);
		}
	}
	public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext[];
	public createTableOptionsSpaceSeparated(i: number): CreateTableOptionsSpaceSeparatedContext;
	public createTableOptionsSpaceSeparated(i?: number): CreateTableOptionsSpaceSeparatedContext | CreateTableOptionsSpaceSeparatedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateTableOptionsSpaceSeparatedContext);
		} else {
			return this.getRuleContext(i, CreateTableOptionsSpaceSeparatedContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public alterCommandsModifier(): AlterCommandsModifierContext[];
	public alterCommandsModifier(i: number): AlterCommandsModifierContext;
	public alterCommandsModifier(i?: number): AlterCommandsModifierContext | AlterCommandsModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterCommandsModifierContext);
		} else {
			return this.getRuleContext(i, AlterCommandsModifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterList) {
			listener.enterAlterList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterList) {
			listener.exitAlterList(this);
		}
	}
}


export class AlterCommandsModifierContext extends ParserRuleContext {
	public alterAlgorithmOption(): AlterAlgorithmOptionContext | undefined {
		return this.tryGetRuleContext(0, AlterAlgorithmOptionContext);
	}
	public alterLockOption(): AlterLockOptionContext | undefined {
		return this.tryGetRuleContext(0, AlterLockOptionContext);
	}
	public withValidation(): WithValidationContext | undefined {
		return this.tryGetRuleContext(0, WithValidationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterCommandsModifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterCommandsModifier) {
			listener.enterAlterCommandsModifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterCommandsModifier) {
			listener.exitAlterCommandsModifier(this);
		}
	}
}


export class AlterListItemContext extends ParserRuleContext {
	public ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public fieldDefinition(): FieldDefinitionContext | undefined {
		return this.tryGetRuleContext(0, FieldDefinitionContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public tableElementList(): TableElementListContext | undefined {
		return this.tryGetRuleContext(0, TableElementListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COLUMN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_SYMBOL, 0); }
	public checkOrReferences(): CheckOrReferencesContext | undefined {
		return this.tryGetRuleContext(0, CheckOrReferencesContext);
	}
	public place(): PlaceContext | undefined {
		return this.tryGetRuleContext(0, PlaceContext);
	}
	public tableConstraintDef(): TableConstraintDefContext | undefined {
		return this.tryGetRuleContext(0, TableConstraintDefContext);
	}
	public CHANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
	public columnInternalRef(): ColumnInternalRefContext | undefined {
		return this.tryGetRuleContext(0, ColumnInternalRefContext);
	}
	public MODIFY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODIFY_SYMBOL, 0); }
	public DROP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public FOREIGN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOREIGN_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	public keyOrIndex(): KeyOrIndexContext | undefined {
		return this.tryGetRuleContext(0, KeyOrIndexContext);
	}
	public indexRef(): IndexRefContext | undefined {
		return this.tryGetRuleContext(0, IndexRefContext);
	}
	public restrict(): RestrictContext | undefined {
		return this.tryGetRuleContext(0, RestrictContext);
	}
	public DISABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
	public KEYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEYS_SYMBOL, 0); }
	public ENABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
	public ALTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public exprWithParentheses(): ExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprWithParenthesesContext);
	}
	public signedLiteral(): SignedLiteralContext | undefined {
		return this.tryGetRuleContext(0, SignedLiteralContext);
	}
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public visibility(): VisibilityContext | undefined {
		return this.tryGetRuleContext(0, VisibilityContext);
	}
	public CHECK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
	public constraintEnforcement(): ConstraintEnforcementContext | undefined {
		return this.tryGetRuleContext(0, ConstraintEnforcementContext);
	}
	public RENAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public indexName(): IndexNameContext | undefined {
		return this.tryGetRuleContext(0, IndexNameContext);
	}
	public CONVERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
	public charset(): CharsetContext | undefined {
		return this.tryGetRuleContext(0, CharsetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	public FORCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
	public ORDER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORDER_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public alterOrderList(): AlterOrderListContext | undefined {
		return this.tryGetRuleContext(0, AlterOrderListContext);
	}
	public UPGRADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
	public PARTITIONING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterListItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterListItem) {
			listener.enterAlterListItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterListItem) {
			listener.exitAlterListItem(this);
		}
	}
}


export class PlaceContext extends ParserRuleContext {
	public AFTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FIRST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_place; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPlace) {
			listener.enterPlace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPlace) {
			listener.exitPlace(this);
		}
	}
}


export class RestrictContext extends ParserRuleContext {
	public RESTRICT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
	public CASCADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_restrict; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRestrict) {
			listener.enterRestrict(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRestrict) {
			listener.exitRestrict(this);
		}
	}
}


export class AlterOrderListContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public direction(): DirectionContext[];
	public direction(i: number): DirectionContext;
	public direction(i?: number): DirectionContext | DirectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DirectionContext);
		} else {
			return this.getRuleContext(i, DirectionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterOrderList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterOrderList) {
			listener.enterAlterOrderList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterOrderList) {
			listener.exitAlterOrderList(this);
		}
	}
}


export class AlterAlgorithmOptionContext extends ParserRuleContext {
	public ALGORITHM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterAlgorithmOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterAlgorithmOption) {
			listener.enterAlterAlgorithmOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterAlgorithmOption) {
			listener.exitAlterAlgorithmOption(this);
		}
	}
}


export class AlterLockOptionContext extends ParserRuleContext {
	public LOCK_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterLockOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterLockOption) {
			listener.enterAlterLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterLockOption) {
			listener.exitAlterLockOption(this);
		}
	}
}


export class IndexLockAndAlgorithmContext extends ParserRuleContext {
	public alterAlgorithmOption(): AlterAlgorithmOptionContext | undefined {
		return this.tryGetRuleContext(0, AlterAlgorithmOptionContext);
	}
	public alterLockOption(): AlterLockOptionContext | undefined {
		return this.tryGetRuleContext(0, AlterLockOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexLockAndAlgorithm; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexLockAndAlgorithm) {
			listener.enterIndexLockAndAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexLockAndAlgorithm) {
			listener.exitIndexLockAndAlgorithm(this);
		}
	}
}


export class WithValidationContext extends ParserRuleContext {
	public VALIDATION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.VALIDATION_SYMBOL, 0); }
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public WITHOUT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITHOUT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_withValidation; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWithValidation) {
			listener.enterWithValidation(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWithValidation) {
			listener.exitWithValidation(this);
		}
	}
}


export class RemovePartitioningContext extends ParserRuleContext {
	public REMOVE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REMOVE_SYMBOL, 0); }
	public PARTITIONING_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_removePartitioning; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRemovePartitioning) {
			listener.enterRemovePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRemovePartitioning) {
			listener.exitRemovePartitioning(this);
		}
	}
}


export class AllOrPartitionNameListContext extends ParserRuleContext {
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_allOrPartitionNameList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAllOrPartitionNameList) {
			listener.enterAllOrPartitionNameList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAllOrPartitionNameList) {
			listener.exitAllOrPartitionNameList(this);
		}
	}
}


export class ReorgPartitionRuleContext extends ParserRuleContext {
	public REORGANIZE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public noWriteToBinLog(): NoWriteToBinLogContext | undefined {
		return this.tryGetRuleContext(0, NoWriteToBinLogContext);
	}
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public INTO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_reorgPartitionRule; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReorgPartitionRule) {
			listener.enterReorgPartitionRule(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReorgPartitionRule) {
			listener.exitReorgPartitionRule(this);
		}
	}
}


export class AlterTablespaceContext extends ParserRuleContext {
	public TABLESPACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public tablespaceRef(): TablespaceRefContext {
		return this.getRuleContext(0, TablespaceRefContext);
	}
	public DATAFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public RENAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public alterTablespaceOptions(): AlterTablespaceOptionsContext | undefined {
		return this.tryGetRuleContext(0, AlterTablespaceOptionsContext);
	}
	public ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public DROP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public CHANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	public ACCESSIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACCESSIBLE_SYMBOL, 0); }
	public READ_ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_ONLY_SYMBOL, 0); }
	public READ_WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_WRITE_SYMBOL, 0); }
	public changeTablespaceOption(): ChangeTablespaceOptionContext[];
	public changeTablespaceOption(i: number): ChangeTablespaceOptionContext;
	public changeTablespaceOption(i?: number): ChangeTablespaceOptionContext | ChangeTablespaceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ChangeTablespaceOptionContext);
		} else {
			return this.getRuleContext(i, ChangeTablespaceOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterTablespace; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterTablespace) {
			listener.enterAlterTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterTablespace) {
			listener.exitAlterTablespace(this);
		}
	}
}


export class AlterUndoTablespaceContext extends ParserRuleContext {
	public UNDO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public tablespaceRef(): TablespaceRefContext {
		return this.getRuleContext(0, TablespaceRefContext);
	}
	public SET_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public ACTIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACTIVE_SYMBOL, 0); }
	public INACTIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INACTIVE_SYMBOL, 0); }
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | undefined {
		return this.tryGetRuleContext(0, UndoTableSpaceOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterUndoTablespace; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterUndoTablespace) {
			listener.enterAlterUndoTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterUndoTablespace) {
			listener.exitAlterUndoTablespace(this);
		}
	}
}


export class UndoTableSpaceOptionsContext extends ParserRuleContext {
	public undoTableSpaceOption(): UndoTableSpaceOptionContext[];
	public undoTableSpaceOption(i: number): UndoTableSpaceOptionContext;
	public undoTableSpaceOption(i?: number): UndoTableSpaceOptionContext | UndoTableSpaceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UndoTableSpaceOptionContext);
		} else {
			return this.getRuleContext(i, UndoTableSpaceOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_undoTableSpaceOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUndoTableSpaceOptions) {
			listener.enterUndoTableSpaceOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUndoTableSpaceOptions) {
			listener.exitUndoTableSpaceOptions(this);
		}
	}
}


export class UndoTableSpaceOptionContext extends ParserRuleContext {
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getRuleContext(0, TsOptionEngineContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_undoTableSpaceOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUndoTableSpaceOption) {
			listener.enterUndoTableSpaceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUndoTableSpaceOption) {
			listener.exitUndoTableSpaceOption(this);
		}
	}
}


export class AlterTablespaceOptionsContext extends ParserRuleContext {
	public alterTablespaceOption(): AlterTablespaceOptionContext[];
	public alterTablespaceOption(i: number): AlterTablespaceOptionContext;
	public alterTablespaceOption(i?: number): AlterTablespaceOptionContext | AlterTablespaceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterTablespaceOptionContext);
		} else {
			return this.getRuleContext(i, AlterTablespaceOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterTablespaceOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterTablespaceOptions) {
			listener.enterAlterTablespaceOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterTablespaceOptions) {
			listener.exitAlterTablespaceOptions(this);
		}
	}
}


export class AlterTablespaceOptionContext extends ParserRuleContext {
	public INITIAL_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext | undefined {
		return this.tryGetRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionAutoextendSizeContext);
	}
	public tsOptionMaxSize(): TsOptionMaxSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionMaxSizeContext);
	}
	public tsOptionEngine(): TsOptionEngineContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEngineContext);
	}
	public tsOptionWait(): TsOptionWaitContext | undefined {
		return this.tryGetRuleContext(0, TsOptionWaitContext);
	}
	public tsOptionEncryption(): TsOptionEncryptionContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEncryptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterTablespaceOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterTablespaceOption) {
			listener.enterAlterTablespaceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterTablespaceOption) {
			listener.exitAlterTablespaceOption(this);
		}
	}
}


export class ChangeTablespaceOptionContext extends ParserRuleContext {
	public INITIAL_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext | undefined {
		return this.tryGetRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionAutoextendSizeContext);
	}
	public tsOptionMaxSize(): TsOptionMaxSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionMaxSizeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_changeTablespaceOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterChangeTablespaceOption) {
			listener.enterChangeTablespaceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitChangeTablespaceOption) {
			listener.exitChangeTablespaceOption(this);
		}
	}
}


export class AlterViewContext extends ParserRuleContext {
	public VIEW_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public viewRef(): ViewRefContext {
		return this.getRuleContext(0, ViewRefContext);
	}
	public viewTail(): ViewTailContext {
		return this.getRuleContext(0, ViewTailContext);
	}
	public viewAlgorithm(): ViewAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, ViewAlgorithmContext);
	}
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public viewSuid(): ViewSuidContext | undefined {
		return this.tryGetRuleContext(0, ViewSuidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterView; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterView) {
			listener.enterAlterView(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterView) {
			listener.exitAlterView(this);
		}
	}
}


export class ViewTailContext extends ParserRuleContext {
	public AS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public viewSelect(): ViewSelectContext {
		return this.getRuleContext(0, ViewSelectContext);
	}
	public columnInternalRefList(): ColumnInternalRefListContext | undefined {
		return this.tryGetRuleContext(0, ColumnInternalRefListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewTail; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewTail) {
			listener.enterViewTail(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewTail) {
			listener.exitViewTail(this);
		}
	}
}


export class ViewSelectContext extends ParserRuleContext {
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		return this.getRuleContext(0, QueryExpressionOrParensContext);
	}
	public viewCheckOption(): ViewCheckOptionContext | undefined {
		return this.tryGetRuleContext(0, ViewCheckOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewSelect; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewSelect) {
			listener.enterViewSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewSelect) {
			listener.exitViewSelect(this);
		}
	}
}


export class ViewCheckOptionContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public CHECK_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
	public OPTION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
	public CASCADED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADED_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewCheckOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewCheckOption) {
			listener.enterViewCheckOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewCheckOption) {
			listener.exitViewCheckOption(this);
		}
	}
}


export class CreateStatementContext extends ParserRuleContext {
	public CREATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
	public createDatabase(): CreateDatabaseContext | undefined {
		return this.tryGetRuleContext(0, CreateDatabaseContext);
	}
	public createTable(): CreateTableContext | undefined {
		return this.tryGetRuleContext(0, CreateTableContext);
	}
	public createFunction(): CreateFunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionContext);
	}
	public createProcedure(): CreateProcedureContext | undefined {
		return this.tryGetRuleContext(0, CreateProcedureContext);
	}
	public createUdf(): CreateUdfContext | undefined {
		return this.tryGetRuleContext(0, CreateUdfContext);
	}
	public createLogfileGroup(): CreateLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, CreateLogfileGroupContext);
	}
	public createView(): CreateViewContext | undefined {
		return this.tryGetRuleContext(0, CreateViewContext);
	}
	public createTrigger(): CreateTriggerContext | undefined {
		return this.tryGetRuleContext(0, CreateTriggerContext);
	}
	public createIndex(): CreateIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexContext);
	}
	public createServer(): CreateServerContext | undefined {
		return this.tryGetRuleContext(0, CreateServerContext);
	}
	public createTablespace(): CreateTablespaceContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceContext);
	}
	public createEvent(): CreateEventContext | undefined {
		return this.tryGetRuleContext(0, CreateEventContext);
	}
	public createRole(): CreateRoleContext | undefined {
		return this.tryGetRuleContext(0, CreateRoleContext);
	}
	public createSpatialReference(): CreateSpatialReferenceContext | undefined {
		return this.tryGetRuleContext(0, CreateSpatialReferenceContext);
	}
	public createUndoTablespace(): CreateUndoTablespaceContext | undefined {
		return this.tryGetRuleContext(0, CreateUndoTablespaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateStatement) {
			listener.enterCreateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateStatement) {
			listener.exitCreateStatement(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	public DATABASE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
	public schemaName(): SchemaNameContext {
		return this.getRuleContext(0, SchemaNameContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createDatabase; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateDatabase) {
			listener.enterCreateDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateDatabase) {
			listener.exitCreateDatabase(this);
		}
	}
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
	public defaultCharset(): DefaultCharsetContext | undefined {
		return this.tryGetRuleContext(0, DefaultCharsetContext);
	}
	public defaultCollation(): DefaultCollationContext | undefined {
		return this.tryGetRuleContext(0, DefaultCollationContext);
	}
	public defaultEncryption(): DefaultEncryptionContext | undefined {
		return this.tryGetRuleContext(0, DefaultEncryptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createDatabaseOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateDatabaseOption) {
			listener.enterCreateDatabaseOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateDatabaseOption) {
			listener.exitCreateDatabaseOption(this);
		}
	}
}


export class CreateTableContext extends ParserRuleContext {
	public TABLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public LIKE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public TEMPORARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public tableElementList(): TableElementListContext | undefined {
		return this.tryGetRuleContext(0, TableElementListContext);
	}
	public createTableOptions(): CreateTableOptionsContext | undefined {
		return this.tryGetRuleContext(0, CreateTableOptionsContext);
	}
	public partitionClause(): PartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, PartitionClauseContext);
	}
	public duplicateAsQueryExpression(): DuplicateAsQueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, DuplicateAsQueryExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createTable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateTable) {
			listener.enterCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateTable) {
			listener.exitCreateTable(this);
		}
	}
}


export class TableElementListContext extends ParserRuleContext {
	public tableElement(): TableElementContext[];
	public tableElement(i: number): TableElementContext;
	public tableElement(i?: number): TableElementContext | TableElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableElementContext);
		} else {
			return this.getRuleContext(i, TableElementContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableElementList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableElementList) {
			listener.enterTableElementList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableElementList) {
			listener.exitTableElementList(this);
		}
	}
}


export class TableElementContext extends ParserRuleContext {
	public columnDefinition(): ColumnDefinitionContext | undefined {
		return this.tryGetRuleContext(0, ColumnDefinitionContext);
	}
	public tableConstraintDef(): TableConstraintDefContext | undefined {
		return this.tryGetRuleContext(0, TableConstraintDefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableElement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableElement) {
			listener.enterTableElement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableElement) {
			listener.exitTableElement(this);
		}
	}
}


export class DuplicateAsQueryExpressionContext extends ParserRuleContext {
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		return this.getRuleContext(0, QueryExpressionOrParensContext);
	}
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public REPLACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_duplicateAsQueryExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDuplicateAsQueryExpression) {
			listener.enterDuplicateAsQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDuplicateAsQueryExpression) {
			listener.exitDuplicateAsQueryExpression(this);
		}
	}
}


export class QueryExpressionOrParensContext extends ParserRuleContext {
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public queryExpressionParens(): QueryExpressionParensContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionParensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_queryExpressionOrParens; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQueryExpressionOrParens) {
			listener.enterQueryExpressionOrParens(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQueryExpressionOrParens) {
			listener.exitQueryExpressionOrParens(this);
		}
	}
}


export class CreateRoutineContext extends ParserRuleContext {
	public CREATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
	public EOF(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EOF, 0); }
	public createProcedure(): CreateProcedureContext | undefined {
		return this.tryGetRuleContext(0, CreateProcedureContext);
	}
	public createFunction(): CreateFunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionContext);
	}
	public createUdf(): CreateUdfContext | undefined {
		return this.tryGetRuleContext(0, CreateUdfContext);
	}
	public SEMICOLON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createRoutine; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateRoutine) {
			listener.enterCreateRoutine(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateRoutine) {
			listener.exitCreateRoutine(this);
		}
	}
}


export class CreateProcedureContext extends ParserRuleContext {
	public PROCEDURE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public compoundStatement(): CompoundStatementContext {
		return this.getRuleContext(0, CompoundStatementContext);
	}
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public procedureParameter(): ProcedureParameterContext[];
	public procedureParameter(i: number): ProcedureParameterContext;
	public procedureParameter(i?: number): ProcedureParameterContext | ProcedureParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureParameterContext);
		} else {
			return this.getRuleContext(i, ProcedureParameterContext);
		}
	}
	public routineCreateOption(): RoutineCreateOptionContext[];
	public routineCreateOption(i: number): RoutineCreateOptionContext;
	public routineCreateOption(i?: number): RoutineCreateOptionContext | RoutineCreateOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineCreateOptionContext);
		} else {
			return this.getRuleContext(i, RoutineCreateOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createProcedure; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateProcedure) {
			listener.enterCreateProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateProcedure) {
			listener.exitCreateProcedure(this);
		}
	}
}


export class CreateFunctionContext extends ParserRuleContext {
	public FUNCTION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public functionName(): FunctionNameContext {
		return this.getRuleContext(0, FunctionNameContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public RETURNS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
	public typeWithOptCollate(): TypeWithOptCollateContext {
		return this.getRuleContext(0, TypeWithOptCollateContext);
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getRuleContext(0, CompoundStatementContext);
	}
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public functionParameter(): FunctionParameterContext[];
	public functionParameter(i: number): FunctionParameterContext;
	public functionParameter(i?: number): FunctionParameterContext | FunctionParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionParameterContext);
		} else {
			return this.getRuleContext(i, FunctionParameterContext);
		}
	}
	public routineCreateOption(): RoutineCreateOptionContext[];
	public routineCreateOption(i: number): RoutineCreateOptionContext;
	public routineCreateOption(i?: number): RoutineCreateOptionContext | RoutineCreateOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineCreateOptionContext);
		} else {
			return this.getRuleContext(i, RoutineCreateOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateFunction) {
			listener.enterCreateFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateFunction) {
			listener.exitCreateFunction(this);
		}
	}
}


export class CreateUdfContext extends ParserRuleContext {
	public _type: Token;
	public FUNCTION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public udfName(): UdfNameContext {
		return this.getRuleContext(0, UdfNameContext);
	}
	public RETURNS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
	public SONAME_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	public STRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STRING_SYMBOL, 0); }
	public INT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_SYMBOL, 0); }
	public REAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REAL_SYMBOL, 0); }
	public DECIMAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_SYMBOL, 0); }
	public AGGREGATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AGGREGATE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createUdf; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateUdf) {
			listener.enterCreateUdf(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateUdf) {
			listener.exitCreateUdf(this);
		}
	}
}


export class RoutineCreateOptionContext extends ParserRuleContext {
	public routineOption(): RoutineOptionContext | undefined {
		return this.tryGetRuleContext(0, RoutineOptionContext);
	}
	public DETERMINISTIC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DETERMINISTIC_SYMBOL, 0); }
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_routineCreateOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoutineCreateOption) {
			listener.enterRoutineCreateOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoutineCreateOption) {
			listener.exitRoutineCreateOption(this);
		}
	}
}


export class RoutineAlterOptionsContext extends ParserRuleContext {
	public routineCreateOption(): RoutineCreateOptionContext[];
	public routineCreateOption(i: number): RoutineCreateOptionContext;
	public routineCreateOption(i?: number): RoutineCreateOptionContext | RoutineCreateOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineCreateOptionContext);
		} else {
			return this.getRuleContext(i, RoutineCreateOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_routineAlterOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoutineAlterOptions) {
			listener.enterRoutineAlterOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoutineAlterOptions) {
			listener.exitRoutineAlterOptions(this);
		}
	}
}


export class RoutineOptionContext extends ParserRuleContext {
	public _option: Token;
	public _security: Token;
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public SQL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_SYMBOL, 0); }
	public LANGUAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	public CONTAINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public READS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READS_SYMBOL, 0); }
	public MODIFIES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODIFIES_SYMBOL, 0); }
	public SECURITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
	public DEFINER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
	public INVOKER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_routineOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoutineOption) {
			listener.enterRoutineOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoutineOption) {
			listener.exitRoutineOption(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public _type: Token;
	public createIndexTarget(): CreateIndexTargetContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexTargetContext);
	}
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public indexName(): IndexNameContext | undefined {
		return this.tryGetRuleContext(0, IndexNameContext);
	}
	public onlineOption(): OnlineOptionContext | undefined {
		return this.tryGetRuleContext(0, OnlineOptionContext);
	}
	public FULLTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULLTEXT_SYMBOL, 0); }
	public SPATIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
	public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, IndexLockAndAlgorithmContext);
	}
	public UNIQUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public fulltextIndexOption(): FulltextIndexOptionContext[];
	public fulltextIndexOption(i: number): FulltextIndexOptionContext;
	public fulltextIndexOption(i?: number): FulltextIndexOptionContext | FulltextIndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FulltextIndexOptionContext);
		} else {
			return this.getRuleContext(i, FulltextIndexOptionContext);
		}
	}
	public spatialIndexOption(): SpatialIndexOptionContext[];
	public spatialIndexOption(i: number): SpatialIndexOptionContext;
	public spatialIndexOption(i?: number): SpatialIndexOptionContext | SpatialIndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SpatialIndexOptionContext);
		} else {
			return this.getRuleContext(i, SpatialIndexOptionContext);
		}
	}
	public indexTypeClause(): IndexTypeClauseContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeClauseContext);
	}
	public indexNameAndType(): IndexNameAndTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexNameAndTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createIndex; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateIndex) {
			listener.enterCreateIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateIndex) {
			listener.exitCreateIndex(this);
		}
	}
}


export class IndexNameAndTypeContext extends ParserRuleContext {
	public indexName(): IndexNameContext {
		return this.getRuleContext(0, IndexNameContext);
	}
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public TYPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexNameAndType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexNameAndType) {
			listener.enterIndexNameAndType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexNameAndType) {
			listener.exitIndexNameAndType(this);
		}
	}
}


export class CreateIndexTargetContext extends ParserRuleContext {
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public keyListVariants(): KeyListVariantsContext {
		return this.getRuleContext(0, KeyListVariantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createIndexTarget; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateIndexTarget) {
			listener.enterCreateIndexTarget(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateIndexTarget) {
			listener.exitCreateIndexTarget(this);
		}
	}
}


export class CreateLogfileGroupContext extends ParserRuleContext {
	public LOGFILE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public logfileGroupName(): LogfileGroupNameContext {
		return this.getRuleContext(0, LogfileGroupNameContext);
	}
	public ADD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	public UNDOFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
	public REDOFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDOFILE_SYMBOL, 0); }
	public logfileGroupOptions(): LogfileGroupOptionsContext | undefined {
		return this.tryGetRuleContext(0, LogfileGroupOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createLogfileGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateLogfileGroup) {
			listener.enterCreateLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateLogfileGroup) {
			listener.exitCreateLogfileGroup(this);
		}
	}
}


export class LogfileGroupOptionsContext extends ParserRuleContext {
	public logfileGroupOption(): LogfileGroupOptionContext[];
	public logfileGroupOption(i: number): LogfileGroupOptionContext;
	public logfileGroupOption(i?: number): LogfileGroupOptionContext | LogfileGroupOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LogfileGroupOptionContext);
		} else {
			return this.getRuleContext(i, LogfileGroupOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_logfileGroupOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLogfileGroupOptions) {
			listener.enterLogfileGroupOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLogfileGroupOptions) {
			listener.exitLogfileGroupOptions(this);
		}
	}
}


export class LogfileGroupOptionContext extends ParserRuleContext {
	public tsOptionInitialSize(): TsOptionInitialSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionInitialSizeContext);
	}
	public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionUndoRedoBufferSizeContext);
	}
	public tsOptionNodegroup(): TsOptionNodegroupContext | undefined {
		return this.tryGetRuleContext(0, TsOptionNodegroupContext);
	}
	public tsOptionEngine(): TsOptionEngineContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEngineContext);
	}
	public tsOptionWait(): TsOptionWaitContext | undefined {
		return this.tryGetRuleContext(0, TsOptionWaitContext);
	}
	public tsOptionComment(): TsOptionCommentContext | undefined {
		return this.tryGetRuleContext(0, TsOptionCommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_logfileGroupOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLogfileGroupOption) {
			listener.enterLogfileGroupOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLogfileGroupOption) {
			listener.exitLogfileGroupOption(this);
		}
	}
}


export class CreateServerContext extends ParserRuleContext {
	public SERVER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
	public serverName(): ServerNameContext {
		return this.getRuleContext(0, ServerNameContext);
	}
	public FOREIGN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOREIGN_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public WRAPPER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WRAPPER_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	public serverOptions(): ServerOptionsContext {
		return this.getRuleContext(0, ServerOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createServer; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateServer) {
			listener.enterCreateServer(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateServer) {
			listener.exitCreateServer(this);
		}
	}
}


export class ServerOptionsContext extends ParserRuleContext {
	public OPTIONS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPTIONS_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_serverOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterServerOptions) {
			listener.enterServerOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitServerOptions) {
			listener.exitServerOptions(this);
		}
	}
}


export class ServerOptionContext extends ParserRuleContext {
	public _option: Token;
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public HOST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOST_SYMBOL, 0); }
	public DATABASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public SOCKET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOCKET_SYMBOL, 0); }
	public OWNER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OWNER_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public PORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PORT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_serverOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterServerOption) {
			listener.enterServerOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitServerOption) {
			listener.exitServerOption(this);
		}
	}
}


export class CreateTablespaceContext extends ParserRuleContext {
	public TABLESPACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public tablespaceName(): TablespaceNameContext {
		return this.getRuleContext(0, TablespaceNameContext);
	}
	public tsDataFileName(): TsDataFileNameContext {
		return this.getRuleContext(0, TsDataFileNameContext);
	}
	public USE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USE_SYMBOL, 0); }
	public LOGFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public logfileGroupRef(): LogfileGroupRefContext | undefined {
		return this.tryGetRuleContext(0, LogfileGroupRefContext);
	}
	public tablespaceOptions(): TablespaceOptionsContext | undefined {
		return this.tryGetRuleContext(0, TablespaceOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createTablespace; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateTablespace) {
			listener.enterCreateTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateTablespace) {
			listener.exitCreateTablespace(this);
		}
	}
}


export class CreateUndoTablespaceContext extends ParserRuleContext {
	public UNDO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public tablespaceName(): TablespaceNameContext {
		return this.getRuleContext(0, TablespaceNameContext);
	}
	public ADD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public tsDataFile(): TsDataFileContext {
		return this.getRuleContext(0, TsDataFileContext);
	}
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | undefined {
		return this.tryGetRuleContext(0, UndoTableSpaceOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createUndoTablespace; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateUndoTablespace) {
			listener.enterCreateUndoTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateUndoTablespace) {
			listener.exitCreateUndoTablespace(this);
		}
	}
}


export class TsDataFileNameContext extends ParserRuleContext {
	public ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
	public tsDataFile(): TsDataFileContext | undefined {
		return this.tryGetRuleContext(0, TsDataFileContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsDataFileName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsDataFileName) {
			listener.enterTsDataFileName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsDataFileName) {
			listener.exitTsDataFileName(this);
		}
	}
}


export class TsDataFileContext extends ParserRuleContext {
	public DATAFILE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsDataFile; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsDataFile) {
			listener.enterTsDataFile(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsDataFile) {
			listener.exitTsDataFile(this);
		}
	}
}


export class TablespaceOptionsContext extends ParserRuleContext {
	public tablespaceOption(): TablespaceOptionContext[];
	public tablespaceOption(i: number): TablespaceOptionContext;
	public tablespaceOption(i?: number): TablespaceOptionContext | TablespaceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TablespaceOptionContext);
		} else {
			return this.getRuleContext(i, TablespaceOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tablespaceOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTablespaceOptions) {
			listener.enterTablespaceOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTablespaceOptions) {
			listener.exitTablespaceOptions(this);
		}
	}
}


export class TablespaceOptionContext extends ParserRuleContext {
	public tsOptionInitialSize(): TsOptionInitialSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionInitialSizeContext);
	}
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionAutoextendSizeContext);
	}
	public tsOptionMaxSize(): TsOptionMaxSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionMaxSizeContext);
	}
	public tsOptionExtentSize(): TsOptionExtentSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionExtentSizeContext);
	}
	public tsOptionNodegroup(): TsOptionNodegroupContext | undefined {
		return this.tryGetRuleContext(0, TsOptionNodegroupContext);
	}
	public tsOptionEngine(): TsOptionEngineContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEngineContext);
	}
	public tsOptionWait(): TsOptionWaitContext | undefined {
		return this.tryGetRuleContext(0, TsOptionWaitContext);
	}
	public tsOptionComment(): TsOptionCommentContext | undefined {
		return this.tryGetRuleContext(0, TsOptionCommentContext);
	}
	public tsOptionFileblockSize(): TsOptionFileblockSizeContext | undefined {
		return this.tryGetRuleContext(0, TsOptionFileblockSizeContext);
	}
	public tsOptionEncryption(): TsOptionEncryptionContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEncryptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tablespaceOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTablespaceOption) {
			listener.enterTablespaceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTablespaceOption) {
			listener.exitTablespaceOption(this);
		}
	}
}


export class TsOptionInitialSizeContext extends ParserRuleContext {
	public INITIAL_SIZE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext {
		return this.getRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionInitialSize; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionInitialSize) {
			listener.enterTsOptionInitialSize(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionInitialSize) {
			listener.exitTsOptionInitialSize(this);
		}
	}
}


export class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
	public sizeNumber(): SizeNumberContext {
		return this.getRuleContext(0, SizeNumberContext);
	}
	public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
	public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionUndoRedoBufferSize; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionUndoRedoBufferSize) {
			listener.enterTsOptionUndoRedoBufferSize(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionUndoRedoBufferSize) {
			listener.exitTsOptionUndoRedoBufferSize(this);
		}
	}
}


export class TsOptionAutoextendSizeContext extends ParserRuleContext {
	public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext {
		return this.getRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionAutoextendSize; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionAutoextendSize) {
			listener.enterTsOptionAutoextendSize(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionAutoextendSize) {
			listener.exitTsOptionAutoextendSize(this);
		}
	}
}


export class TsOptionMaxSizeContext extends ParserRuleContext {
	public MAX_SIZE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.MAX_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext {
		return this.getRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionMaxSize; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionMaxSize) {
			listener.enterTsOptionMaxSize(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionMaxSize) {
			listener.exitTsOptionMaxSize(this);
		}
	}
}


export class TsOptionExtentSizeContext extends ParserRuleContext {
	public EXTENT_SIZE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext {
		return this.getRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionExtentSize; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionExtentSize) {
			listener.enterTsOptionExtentSize(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionExtentSize) {
			listener.exitTsOptionExtentSize(this);
		}
	}
}


export class TsOptionNodegroupContext extends ParserRuleContext {
	public NODEGROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getRuleContext(0, Real_ulong_numberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionNodegroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionNodegroup) {
			listener.enterTsOptionNodegroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionNodegroup) {
			listener.exitTsOptionNodegroup(this);
		}
	}
}


export class TsOptionEngineContext extends ParserRuleContext {
	public ENGINE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public engineRef(): EngineRefContext {
		return this.getRuleContext(0, EngineRefContext);
	}
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionEngine; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionEngine) {
			listener.enterTsOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionEngine) {
			listener.exitTsOptionEngine(this);
		}
	}
}


export class TsOptionWaitContext extends ParserRuleContext {
	public WAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WAIT_SYMBOL, 0); }
	public NO_WAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_WAIT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionWait; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionWait) {
			listener.enterTsOptionWait(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionWait) {
			listener.exitTsOptionWait(this);
		}
	}
}


export class TsOptionCommentContext extends ParserRuleContext {
	public COMMENT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionComment; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionComment) {
			listener.enterTsOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionComment) {
			listener.exitTsOptionComment(this);
		}
	}
}


export class TsOptionFileblockSizeContext extends ParserRuleContext {
	public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
	public sizeNumber(): SizeNumberContext {
		return this.getRuleContext(0, SizeNumberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionFileblockSize; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionFileblockSize) {
			listener.enterTsOptionFileblockSize(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionFileblockSize) {
			listener.exitTsOptionFileblockSize(this);
		}
	}
}


export class TsOptionEncryptionContext extends ParserRuleContext {
	public ENCRYPTION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tsOptionEncryption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTsOptionEncryption) {
			listener.enterTsOptionEncryption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTsOptionEncryption) {
			listener.exitTsOptionEncryption(this);
		}
	}
}


export class CreateViewContext extends ParserRuleContext {
	public VIEW_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public viewName(): ViewNameContext {
		return this.getRuleContext(0, ViewNameContext);
	}
	public viewTail(): ViewTailContext {
		return this.getRuleContext(0, ViewTailContext);
	}
	public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, ViewReplaceOrAlgorithmContext);
	}
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public viewSuid(): ViewSuidContext | undefined {
		return this.tryGetRuleContext(0, ViewSuidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createView; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateView) {
			listener.enterCreateView(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateView) {
			listener.exitCreateView(this);
		}
	}
}


export class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
	public OR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OR_SYMBOL, 0); }
	public REPLACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public viewAlgorithm(): ViewAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, ViewAlgorithmContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewReplaceOrAlgorithm; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewReplaceOrAlgorithm) {
			listener.enterViewReplaceOrAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewReplaceOrAlgorithm) {
			listener.exitViewReplaceOrAlgorithm(this);
		}
	}
}


export class ViewAlgorithmContext extends ParserRuleContext {
	public _algorithm: Token;
	public ALGORITHM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public UNDEFINED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDEFINED_SYMBOL, 0); }
	public MERGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MERGE_SYMBOL, 0); }
	public TEMPTABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPTABLE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewAlgorithm; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewAlgorithm) {
			listener.enterViewAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewAlgorithm) {
			listener.exitViewAlgorithm(this);
		}
	}
}


export class ViewSuidContext extends ParserRuleContext {
	public SQL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SQL_SYMBOL, 0); }
	public SECURITY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
	public DEFINER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
	public INVOKER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewSuid; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewSuid) {
			listener.enterViewSuid(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewSuid) {
			listener.exitViewSuid(this);
		}
	}
}


export class CreateTriggerContext extends ParserRuleContext {
	public _timing: Token;
	public _event: Token;
	public TRIGGER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
	public triggerName(): TriggerNameContext {
		return this.getRuleContext(0, TriggerNameContext);
	}
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public FOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public EACH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EACH_SYMBOL, 0); }
	public ROW_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
	public compoundStatement(): CompoundStatementContext {
		return this.getRuleContext(0, CompoundStatementContext);
	}
	public BEFORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BEFORE_SYMBOL, 0); }
	public AFTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
	public INSERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
	public UPDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public DELETE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext | undefined {
		return this.tryGetRuleContext(0, TriggerFollowsPrecedesClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createTrigger; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateTrigger) {
			listener.enterCreateTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateTrigger) {
			listener.exitCreateTrigger(this);
		}
	}
}


export class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
	public _ordering: Token;
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	public FOLLOWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOLLOWS_SYMBOL, 0); }
	public PRECEDES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECEDES_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_triggerFollowsPrecedesClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTriggerFollowsPrecedesClause) {
			listener.enterTriggerFollowsPrecedesClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTriggerFollowsPrecedesClause) {
			listener.exitTriggerFollowsPrecedesClause(this);
		}
	}
}


export class CreateEventContext extends ParserRuleContext {
	public EVENT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public eventName(): EventNameContext {
		return this.getRuleContext(0, EventNameContext);
	}
	public ON_SYMBOL(): TerminalNode[];
	public ON_SYMBOL(i: number): TerminalNode;
	public ON_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.ON_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, i);
		}
	}
	public SCHEDULE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
	public schedule(): ScheduleContext {
		return this.getRuleContext(0, ScheduleContext);
	}
	public DO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
	public compoundStatement(): CompoundStatementContext {
		return this.getRuleContext(0, CompoundStatementContext);
	}
	public definerClause(): DefinerClauseContext | undefined {
		return this.tryGetRuleContext(0, DefinerClauseContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMPLETION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
	public PRESERVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
	public ENABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
	public DISABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createEvent; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateEvent) {
			listener.enterCreateEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateEvent) {
			listener.exitCreateEvent(this);
		}
	}
}


export class CreateRoleContext extends ParserRuleContext {
	public ROLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public roleList(): RoleListContext {
		return this.getRuleContext(0, RoleListContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createRole; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateRole) {
			listener.enterCreateRole(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateRole) {
			listener.exitCreateRole(this);
		}
	}
}


export class CreateSpatialReferenceContext extends ParserRuleContext {
	public OR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OR_SYMBOL, 0); }
	public REPLACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public SPATIAL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
	public REFERENCE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REFERENCE_SYMBOL, 0); }
	public SYSTEM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getRuleContext(0, Real_ulonglong_numberContext);
	}
	public srsAttribute(): SrsAttributeContext[];
	public srsAttribute(i: number): SrsAttributeContext;
	public srsAttribute(i?: number): SrsAttributeContext | SrsAttributeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SrsAttributeContext);
		} else {
			return this.getRuleContext(i, SrsAttributeContext);
		}
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createSpatialReference; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateSpatialReference) {
			listener.enterCreateSpatialReference(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateSpatialReference) {
			listener.exitCreateSpatialReference(this);
		}
	}
}


export class SrsAttributeContext extends ParserRuleContext {
	public NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
	public TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getRuleContext(0, TextStringNoLinebreakContext);
	}
	public DEFINITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFINITION_SYMBOL, 0); }
	public ORGANIZATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORGANIZATION_SYMBOL, 0); }
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public real_ulonglong_number(): Real_ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
	}
	public DESCRIPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESCRIPTION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_srsAttribute; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSrsAttribute) {
			listener.enterSrsAttribute(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSrsAttribute) {
			listener.exitSrsAttribute(this);
		}
	}
}


export class DropStatementContext extends ParserRuleContext {
	public DROP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public dropDatabase(): DropDatabaseContext | undefined {
		return this.tryGetRuleContext(0, DropDatabaseContext);
	}
	public dropEvent(): DropEventContext | undefined {
		return this.tryGetRuleContext(0, DropEventContext);
	}
	public dropFunction(): DropFunctionContext | undefined {
		return this.tryGetRuleContext(0, DropFunctionContext);
	}
	public dropProcedure(): DropProcedureContext | undefined {
		return this.tryGetRuleContext(0, DropProcedureContext);
	}
	public dropIndex(): DropIndexContext | undefined {
		return this.tryGetRuleContext(0, DropIndexContext);
	}
	public dropLogfileGroup(): DropLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, DropLogfileGroupContext);
	}
	public dropServer(): DropServerContext | undefined {
		return this.tryGetRuleContext(0, DropServerContext);
	}
	public dropTable(): DropTableContext | undefined {
		return this.tryGetRuleContext(0, DropTableContext);
	}
	public dropTableSpace(): DropTableSpaceContext | undefined {
		return this.tryGetRuleContext(0, DropTableSpaceContext);
	}
	public dropTrigger(): DropTriggerContext | undefined {
		return this.tryGetRuleContext(0, DropTriggerContext);
	}
	public dropView(): DropViewContext | undefined {
		return this.tryGetRuleContext(0, DropViewContext);
	}
	public dropRole(): DropRoleContext | undefined {
		return this.tryGetRuleContext(0, DropRoleContext);
	}
	public dropSpatialReference(): DropSpatialReferenceContext | undefined {
		return this.tryGetRuleContext(0, DropSpatialReferenceContext);
	}
	public dropUndoTablespace(): DropUndoTablespaceContext | undefined {
		return this.tryGetRuleContext(0, DropUndoTablespaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropStatement) {
			listener.enterDropStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropStatement) {
			listener.exitDropStatement(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	public DATABASE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
	public schemaRef(): SchemaRefContext {
		return this.getRuleContext(0, SchemaRefContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropDatabase; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropDatabase) {
			listener.enterDropDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropDatabase) {
			listener.exitDropDatabase(this);
		}
	}
}


export class DropEventContext extends ParserRuleContext {
	public EVENT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public eventRef(): EventRefContext {
		return this.getRuleContext(0, EventRefContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropEvent; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropEvent) {
			listener.enterDropEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropEvent) {
			listener.exitDropEvent(this);
		}
	}
}


export class DropFunctionContext extends ParserRuleContext {
	public FUNCTION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public functionRef(): FunctionRefContext {
		return this.getRuleContext(0, FunctionRefContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropFunction) {
			listener.enterDropFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropFunction) {
			listener.exitDropFunction(this);
		}
	}
}


export class DropProcedureContext extends ParserRuleContext {
	public PROCEDURE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
	public procedureRef(): ProcedureRefContext {
		return this.getRuleContext(0, ProcedureRefContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropProcedure; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropProcedure) {
			listener.enterDropProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropProcedure) {
			listener.exitDropProcedure(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public _type: Token;
	public indexRef(): IndexRefContext {
		return this.getRuleContext(0, IndexRefContext);
	}
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public INDEX_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public onlineOption(): OnlineOptionContext | undefined {
		return this.tryGetRuleContext(0, OnlineOptionContext);
	}
	public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, IndexLockAndAlgorithmContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropIndex; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropIndex) {
			listener.enterDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropIndex) {
			listener.exitDropIndex(this);
		}
	}
}


export class DropLogfileGroupContext extends ParserRuleContext {
	public LOGFILE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public logfileGroupRef(): LogfileGroupRefContext {
		return this.getRuleContext(0, LogfileGroupRefContext);
	}
	public dropLogfileGroupOption(): DropLogfileGroupOptionContext[];
	public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext;
	public dropLogfileGroupOption(i?: number): DropLogfileGroupOptionContext | DropLogfileGroupOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DropLogfileGroupOptionContext);
		} else {
			return this.getRuleContext(i, DropLogfileGroupOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropLogfileGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropLogfileGroup) {
			listener.enterDropLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropLogfileGroup) {
			listener.exitDropLogfileGroup(this);
		}
	}
}


export class DropLogfileGroupOptionContext extends ParserRuleContext {
	public tsOptionWait(): TsOptionWaitContext | undefined {
		return this.tryGetRuleContext(0, TsOptionWaitContext);
	}
	public tsOptionEngine(): TsOptionEngineContext | undefined {
		return this.tryGetRuleContext(0, TsOptionEngineContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropLogfileGroupOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropLogfileGroupOption) {
			listener.enterDropLogfileGroupOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropLogfileGroupOption) {
			listener.exitDropLogfileGroupOption(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	public SERVER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
	public serverRef(): ServerRefContext {
		return this.getRuleContext(0, ServerRefContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropServer; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropServer) {
			listener.enterDropServer(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropServer) {
			listener.exitDropServer(this);
		}
	}
}


export class DropTableContext extends ParserRuleContext {
	public _type: Token;
	public tableRefList(): TableRefListContext {
		return this.getRuleContext(0, TableRefListContext);
	}
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public TEMPORARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public RESTRICT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
	public CASCADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropTable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropTable) {
			listener.enterDropTable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropTable) {
			listener.exitDropTable(this);
		}
	}
}


export class DropTableSpaceContext extends ParserRuleContext {
	public TABLESPACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public tablespaceRef(): TablespaceRefContext {
		return this.getRuleContext(0, TablespaceRefContext);
	}
	public dropLogfileGroupOption(): DropLogfileGroupOptionContext[];
	public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext;
	public dropLogfileGroupOption(i?: number): DropLogfileGroupOptionContext | DropLogfileGroupOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DropLogfileGroupOptionContext);
		} else {
			return this.getRuleContext(i, DropLogfileGroupOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropTableSpace; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropTableSpace) {
			listener.enterDropTableSpace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropTableSpace) {
			listener.exitDropTableSpace(this);
		}
	}
}


export class DropTriggerContext extends ParserRuleContext {
	public TRIGGER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
	public triggerRef(): TriggerRefContext {
		return this.getRuleContext(0, TriggerRefContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropTrigger; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropTrigger) {
			listener.enterDropTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropTrigger) {
			listener.exitDropTrigger(this);
		}
	}
}


export class DropViewContext extends ParserRuleContext {
	public VIEW_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public viewRefList(): ViewRefListContext {
		return this.getRuleContext(0, ViewRefListContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public RESTRICT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
	public CASCADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropView; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropView) {
			listener.enterDropView(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropView) {
			listener.exitDropView(this);
		}
	}
}


export class DropRoleContext extends ParserRuleContext {
	public ROLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public roleList(): RoleListContext {
		return this.getRuleContext(0, RoleListContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropRole; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropRole) {
			listener.enterDropRole(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropRole) {
			listener.exitDropRole(this);
		}
	}
}


export class DropSpatialReferenceContext extends ParserRuleContext {
	public SPATIAL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
	public REFERENCE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REFERENCE_SYMBOL, 0); }
	public SYSTEM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getRuleContext(0, Real_ulonglong_numberContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropSpatialReference; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropSpatialReference) {
			listener.enterDropSpatialReference(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropSpatialReference) {
			listener.exitDropSpatialReference(this);
		}
	}
}


export class DropUndoTablespaceContext extends ParserRuleContext {
	public UNDO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public tablespaceRef(): TablespaceRefContext {
		return this.getRuleContext(0, TablespaceRefContext);
	}
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | undefined {
		return this.tryGetRuleContext(0, UndoTableSpaceOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropUndoTablespace; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropUndoTablespace) {
			listener.enterDropUndoTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropUndoTablespace) {
			listener.exitDropUndoTablespace(this);
		}
	}
}


export class RenameTableStatementContext extends ParserRuleContext {
	public RENAME_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
	public renamePair(): RenamePairContext[];
	public renamePair(i: number): RenamePairContext;
	public renamePair(i?: number): RenamePairContext | RenamePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenamePairContext);
		} else {
			return this.getRuleContext(i, RenamePairContext);
		}
	}
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_renameTableStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRenameTableStatement) {
			listener.enterRenameTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRenameTableStatement) {
			listener.exitRenameTableStatement(this);
		}
	}
}


export class RenamePairContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public TO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_renamePair; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRenamePair) {
			listener.enterRenamePair(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRenamePair) {
			listener.exitRenamePair(this);
		}
	}
}


export class TruncateTableStatementContext extends ParserRuleContext {
	public TRUNCATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_truncateTableStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTruncateTableStatement) {
			listener.enterTruncateTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTruncateTableStatement) {
			listener.exitTruncateTableStatement(this);
		}
	}
}


export class ImportStatementContext extends ParserRuleContext {
	public IMPORT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public textStringLiteralList(): TextStringLiteralListContext {
		return this.getRuleContext(0, TextStringLiteralListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_importStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterImportStatement) {
			listener.enterImportStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitImportStatement) {
			listener.exitImportStatement(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	public CALL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CALL_SYMBOL, 0); }
	public procedureRef(): ProcedureRefContext {
		return this.getRuleContext(0, ProcedureRefContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_callStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCallStatement) {
			listener.enterCallStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCallStatement) {
			listener.exitCallStatement(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public DELETE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public tableAliasRefList(): TableAliasRefListContext | undefined {
		return this.tryGetRuleContext(0, TableAliasRefListContext);
	}
	public tableReferenceList(): TableReferenceListContext | undefined {
		return this.tryGetRuleContext(0, TableReferenceListContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public deleteStatementOption(): DeleteStatementOptionContext[];
	public deleteStatementOption(i: number): DeleteStatementOptionContext;
	public deleteStatementOption(i?: number): DeleteStatementOptionContext | DeleteStatementOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeleteStatementOptionContext);
		} else {
			return this.getRuleContext(i, DeleteStatementOptionContext);
		}
	}
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public tableAlias(): TableAliasContext | undefined {
		return this.tryGetRuleContext(0, TableAliasContext);
	}
	public partitionDelete(): PartitionDeleteContext | undefined {
		return this.tryGetRuleContext(0, PartitionDeleteContext);
	}
	public orderClause(): OrderClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderClauseContext);
	}
	public simpleLimitClause(): SimpleLimitClauseContext | undefined {
		return this.tryGetRuleContext(0, SimpleLimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
}


export class PartitionDeleteContext extends ParserRuleContext {
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionDelete; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionDelete) {
			listener.enterPartitionDelete(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionDelete) {
			listener.exitPartitionDelete(this);
		}
	}
}


export class DeleteStatementOptionContext extends ParserRuleContext {
	public QUICK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
	public LOW_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_deleteStatementOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDeleteStatementOption) {
			listener.enterDeleteStatementOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDeleteStatementOption) {
			listener.exitDeleteStatementOption(this);
		}
	}
}


export class DoStatementContext extends ParserRuleContext {
	public DO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	public selectItemList(): SelectItemListContext | undefined {
		return this.tryGetRuleContext(0, SelectItemListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_doStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDoStatement) {
			listener.enterDoStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDoStatement) {
			listener.exitDoStatement(this);
		}
	}
}


export class HandlerStatementContext extends ParserRuleContext {
	public HANDLER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	public OPEN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public CLOSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
	public READ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public handlerReadOrScan(): HandlerReadOrScanContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadOrScanContext);
	}
	public tableAlias(): TableAliasContext | undefined {
		return this.tryGetRuleContext(0, TableAliasContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_handlerStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHandlerStatement) {
			listener.enterHandlerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHandlerStatement) {
			listener.exitHandlerStatement(this);
		}
	}
}


export class HandlerReadOrScanContext extends ParserRuleContext {
	public FIRST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
	public NEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public values(): ValuesContext | undefined {
		return this.tryGetRuleContext(0, ValuesContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public PREV_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREV_SYMBOL, 0); }
	public LAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public LESS_THAN_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_THAN_OPERATOR, 0); }
	public GREATER_THAN_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GREATER_THAN_OPERATOR, 0); }
	public LESS_OR_EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
	public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_handlerReadOrScan; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHandlerReadOrScan) {
			listener.enterHandlerReadOrScan(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHandlerReadOrScan) {
			listener.exitHandlerReadOrScan(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	public INSERT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public insertFromConstructor(): InsertFromConstructorContext | undefined {
		return this.tryGetRuleContext(0, InsertFromConstructorContext);
	}
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public updateList(): UpdateListContext | undefined {
		return this.tryGetRuleContext(0, UpdateListContext);
	}
	public insertQueryExpression(): InsertQueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, InsertQueryExpressionContext);
	}
	public insertLockOption(): InsertLockOptionContext | undefined {
		return this.tryGetRuleContext(0, InsertLockOptionContext);
	}
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	public INTO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public usePartition(): UsePartitionContext | undefined {
		return this.tryGetRuleContext(0, UsePartitionContext);
	}
	public insertUpdateList(): InsertUpdateListContext | undefined {
		return this.tryGetRuleContext(0, InsertUpdateListContext);
	}
	public valuesReference(): ValuesReferenceContext | undefined {
		return this.tryGetRuleContext(0, ValuesReferenceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertStatement) {
			listener.enterInsertStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertStatement) {
			listener.exitInsertStatement(this);
		}
	}
}


export class InsertLockOptionContext extends ParserRuleContext {
	public LOW_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
	public DELAYED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELAYED_SYMBOL, 0); }
	public HIGH_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertLockOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertLockOption) {
			listener.enterInsertLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertLockOption) {
			listener.exitInsertLockOption(this);
		}
	}
}


export class InsertFromConstructorContext extends ParserRuleContext {
	public insertValues(): InsertValuesContext {
		return this.getRuleContext(0, InsertValuesContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public fields(): FieldsContext | undefined {
		return this.tryGetRuleContext(0, FieldsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertFromConstructor; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertFromConstructor) {
			listener.enterInsertFromConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertFromConstructor) {
			listener.exitInsertFromConstructor(this);
		}
	}
}


export class FieldsContext extends ParserRuleContext {
	public insertIdentifier(): InsertIdentifierContext[];
	public insertIdentifier(i: number): InsertIdentifierContext;
	public insertIdentifier(i?: number): InsertIdentifierContext | InsertIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InsertIdentifierContext);
		} else {
			return this.getRuleContext(i, InsertIdentifierContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fields; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFields) {
			listener.enterFields(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFields) {
			listener.exitFields(this);
		}
	}
}


export class InsertValuesContext extends ParserRuleContext {
	public valueList(): ValueListContext {
		return this.getRuleContext(0, ValueListContext);
	}
	public VALUES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
	public VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertValues; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertValues) {
			listener.enterInsertValues(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertValues) {
			listener.exitInsertValues(this);
		}
	}
}


export class InsertQueryExpressionContext extends ParserRuleContext {
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		return this.getRuleContext(0, QueryExpressionOrParensContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public fields(): FieldsContext | undefined {
		return this.tryGetRuleContext(0, FieldsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertQueryExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertQueryExpression) {
			listener.enterInsertQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertQueryExpression) {
			listener.exitInsertQueryExpression(this);
		}
	}
}


export class ValueListContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode[];
	public OPEN_PAR_SYMBOL(i: number): TerminalNode;
	public OPEN_PAR_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.OPEN_PAR_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, i);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode[];
	public CLOSE_PAR_SYMBOL(i: number): TerminalNode;
	public CLOSE_PAR_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, i);
		}
	}
	public values(): ValuesContext[];
	public values(i: number): ValuesContext;
	public values(i?: number): ValuesContext | ValuesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValuesContext);
		} else {
			return this.getRuleContext(i, ValuesContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_valueList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterValueList) {
			listener.enterValueList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitValueList) {
			listener.exitValueList(this);
		}
	}
}


export class ValuesContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public DEFAULT_SYMBOL(): TerminalNode[];
	public DEFAULT_SYMBOL(i: number): TerminalNode;
	public DEFAULT_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.DEFAULT_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, i);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_values; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterValues) {
			listener.enterValues(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitValues) {
			listener.exitValues(this);
		}
	}
}


export class ValuesReferenceContext extends ParserRuleContext {
	public AS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public columnInternalRefList(): ColumnInternalRefListContext | undefined {
		return this.tryGetRuleContext(0, ColumnInternalRefListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_valuesReference; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterValuesReference) {
			listener.enterValuesReference(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitValuesReference) {
			listener.exitValuesReference(this);
		}
	}
}


export class InsertUpdateListContext extends ParserRuleContext {
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public DUPLICATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DUPLICATE_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public UPDATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public updateList(): UpdateListContext {
		return this.getRuleContext(0, UpdateListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertUpdateList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertUpdateList) {
			listener.enterInsertUpdateList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertUpdateList) {
			listener.exitInsertUpdateList(this);
		}
	}
}


export class LoadStatementContext extends ParserRuleContext {
	public LOAD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LOAD_SYMBOL, 0); }
	public dataOrXml(): DataOrXmlContext {
		return this.getRuleContext(0, DataOrXmlContext);
	}
	public INFILE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INFILE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	public INTO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public loadDataFileTail(): LoadDataFileTailContext {
		return this.getRuleContext(0, LoadDataFileTailContext);
	}
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public usePartition(): UsePartitionContext | undefined {
		return this.tryGetRuleContext(0, UsePartitionContext);
	}
	public charsetClause(): CharsetClauseContext | undefined {
		return this.tryGetRuleContext(0, CharsetClauseContext);
	}
	public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext | undefined {
		return this.tryGetRuleContext(0, XmlRowsIdentifiedByContext);
	}
	public fieldsClause(): FieldsClauseContext | undefined {
		return this.tryGetRuleContext(0, FieldsClauseContext);
	}
	public linesClause(): LinesClauseContext | undefined {
		return this.tryGetRuleContext(0, LinesClauseContext);
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
	public CONCURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONCURRENT_SYMBOL, 0); }
	public REPLACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_loadStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLoadStatement) {
			listener.enterLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLoadStatement) {
			listener.exitLoadStatement(this);
		}
	}
}


export class DataOrXmlContext extends ParserRuleContext {
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public XML_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XML_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dataOrXml; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDataOrXml) {
			listener.enterDataOrXml(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDataOrXml) {
			listener.exitDataOrXml(this);
		}
	}
}


export class XmlRowsIdentifiedByContext extends ParserRuleContext {
	public ROWS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
	public IDENTIFIED_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public textString(): TextStringContext {
		return this.getRuleContext(0, TextStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_xmlRowsIdentifiedBy; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterXmlRowsIdentifiedBy) {
			listener.enterXmlRowsIdentifiedBy(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitXmlRowsIdentifiedBy) {
			listener.exitXmlRowsIdentifiedBy(this);
		}
	}
}


export class LoadDataFileTailContext extends ParserRuleContext {
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public loadDataFileTargetList(): LoadDataFileTargetListContext | undefined {
		return this.tryGetRuleContext(0, LoadDataFileTargetListContext);
	}
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public updateList(): UpdateListContext | undefined {
		return this.tryGetRuleContext(0, UpdateListContext);
	}
	public LINES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINES_SYMBOL, 0); }
	public ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_loadDataFileTail; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLoadDataFileTail) {
			listener.enterLoadDataFileTail(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLoadDataFileTail) {
			listener.exitLoadDataFileTail(this);
		}
	}
}


export class LoadDataFileTargetListContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public fieldOrVariableList(): FieldOrVariableListContext | undefined {
		return this.tryGetRuleContext(0, FieldOrVariableListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_loadDataFileTargetList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLoadDataFileTargetList) {
			listener.enterLoadDataFileTargetList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLoadDataFileTargetList) {
			listener.exitLoadDataFileTargetList(this);
		}
	}
}


export class FieldOrVariableListContext extends ParserRuleContext {
	public columnRef(): ColumnRefContext[];
	public columnRef(i: number): ColumnRefContext;
	public columnRef(i?: number): ColumnRefContext | ColumnRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnRefContext);
		} else {
			return this.getRuleContext(i, ColumnRefContext);
		}
	}
	public userVariable(): UserVariableContext[];
	public userVariable(i: number): UserVariableContext;
	public userVariable(i?: number): UserVariableContext | UserVariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserVariableContext);
		} else {
			return this.getRuleContext(i, UserVariableContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldOrVariableList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldOrVariableList) {
			listener.enterFieldOrVariableList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldOrVariableList) {
			listener.exitFieldOrVariableList(this);
		}
	}
}


export class ReplaceStatementContext extends ParserRuleContext {
	public REPLACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public insertFromConstructor(): InsertFromConstructorContext | undefined {
		return this.tryGetRuleContext(0, InsertFromConstructorContext);
	}
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public updateList(): UpdateListContext | undefined {
		return this.tryGetRuleContext(0, UpdateListContext);
	}
	public insertQueryExpression(): InsertQueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, InsertQueryExpressionContext);
	}
	public INTO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public usePartition(): UsePartitionContext | undefined {
		return this.tryGetRuleContext(0, UsePartitionContext);
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
	public DELAYED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELAYED_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_replaceStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReplaceStatement) {
			listener.enterReplaceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReplaceStatement) {
			listener.exitReplaceStatement(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public queryExpressionParens(): QueryExpressionParensContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionParensContext);
	}
	public selectStatementWithInto(): SelectStatementWithIntoContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementWithIntoContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_selectStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSelectStatement) {
			listener.enterSelectStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSelectStatement) {
			listener.exitSelectStatement(this);
		}
	}
}


export class SelectStatementWithIntoContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public selectStatementWithInto(): SelectStatementWithIntoContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementWithIntoContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public intoClause(): IntoClauseContext | undefined {
		return this.tryGetRuleContext(0, IntoClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_selectStatementWithInto; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSelectStatementWithInto) {
			listener.enterSelectStatementWithInto(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSelectStatementWithInto) {
			listener.exitSelectStatementWithInto(this);
		}
	}
}


export class QueryExpressionContext extends ParserRuleContext {
	public queryExpressionBody(): QueryExpressionBodyContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionBodyContext);
	}
	public queryExpressionParens(): QueryExpressionParensContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionParensContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public procedureAnalyseClause(): ProcedureAnalyseClauseContext | undefined {
		return this.tryGetRuleContext(0, ProcedureAnalyseClauseContext);
	}
	public lockingClause(): LockingClauseContext | undefined {
		return this.tryGetRuleContext(0, LockingClauseContext);
	}
	public orderClause(): OrderClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_queryExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQueryExpression) {
			listener.enterQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQueryExpression) {
			listener.exitQueryExpression(this);
		}
	}
}


export class QueryExpressionBodyContext extends ParserRuleContext {
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public queryExpressionBody(): QueryExpressionBodyContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionBodyContext);
	}
	public UNION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNION_SYMBOL, 0); }
	public queryExpressionParens(): QueryExpressionParensContext[];
	public queryExpressionParens(i: number): QueryExpressionParensContext;
	public queryExpressionParens(i?: number): QueryExpressionParensContext | QueryExpressionParensContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QueryExpressionParensContext);
		} else {
			return this.getRuleContext(i, QueryExpressionParensContext);
		}
	}
	public unionOption(): UnionOptionContext | undefined {
		return this.tryGetRuleContext(0, UnionOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_queryExpressionBody; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQueryExpressionBody) {
			listener.enterQueryExpressionBody(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQueryExpressionBody) {
			listener.exitQueryExpressionBody(this);
		}
	}
}


export class QueryExpressionParensContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public queryExpressionParens(): QueryExpressionParensContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionParensContext);
	}
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_queryExpressionParens; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQueryExpressionParens) {
			listener.enterQueryExpressionParens(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQueryExpressionParens) {
			listener.exitQueryExpressionParens(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	public SELECT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SELECT_SYMBOL, 0); }
	public selectItemList(): SelectItemListContext {
		return this.getRuleContext(0, SelectItemListContext);
	}
	public selectOption(): SelectOptionContext[];
	public selectOption(i: number): SelectOptionContext;
	public selectOption(i?: number): SelectOptionContext | SelectOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectOptionContext);
		} else {
			return this.getRuleContext(i, SelectOptionContext);
		}
	}
	public intoClause(): IntoClauseContext | undefined {
		return this.tryGetRuleContext(0, IntoClauseContext);
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public groupByClause(): GroupByClauseContext | undefined {
		return this.tryGetRuleContext(0, GroupByClauseContext);
	}
	public havingClause(): HavingClauseContext | undefined {
		return this.tryGetRuleContext(0, HavingClauseContext);
	}
	public windowClause(): WindowClauseContext | undefined {
		return this.tryGetRuleContext(0, WindowClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_querySpecification; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQuerySpecification) {
			listener.enterQuerySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQuerySpecification) {
			listener.exitQuerySpecification(this);
		}
	}
}


export class SubqueryContext extends ParserRuleContext {
	public queryExpressionParens(): QueryExpressionParensContext {
		return this.getRuleContext(0, QueryExpressionParensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_subquery; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSubquery) {
			listener.enterSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSubquery) {
			listener.exitSubquery(this);
		}
	}
}


export class QuerySpecOptionContext extends ParserRuleContext {
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public DISTINCT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISTINCT_SYMBOL, 0); }
	public STRAIGHT_JOIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
	public HIGH_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
	public SQL_SMALL_RESULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
	public SQL_BIG_RESULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
	public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
	public SQL_CALC_FOUND_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_querySpecOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQuerySpecOption) {
			listener.enterQuerySpecOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQuerySpecOption) {
			listener.exitQuerySpecOption(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public LIMIT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LIMIT_SYMBOL, 0); }
	public limitOptions(): LimitOptionsContext {
		return this.getRuleContext(0, LimitOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_limitClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLimitClause) {
			listener.enterLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLimitClause) {
			listener.exitLimitClause(this);
		}
	}
}


export class SimpleLimitClauseContext extends ParserRuleContext {
	public LIMIT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LIMIT_SYMBOL, 0); }
	public limitOption(): LimitOptionContext {
		return this.getRuleContext(0, LimitOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_simpleLimitClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleLimitClause) {
			listener.enterSimpleLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleLimitClause) {
			listener.exitSimpleLimitClause(this);
		}
	}
}


export class LimitOptionsContext extends ParserRuleContext {
	public limitOption(): LimitOptionContext[];
	public limitOption(i: number): LimitOptionContext;
	public limitOption(i?: number): LimitOptionContext | LimitOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LimitOptionContext);
		} else {
			return this.getRuleContext(i, LimitOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public OFFSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OFFSET_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_limitOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLimitOptions) {
			listener.enterLimitOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLimitOptions) {
			listener.exitLimitOptions(this);
		}
	}
}


export class LimitOptionContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public PARAM_MARKER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
	public ULONGLONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
	public LONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_limitOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLimitOption) {
			listener.enterLimitOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLimitOption) {
			listener.exitLimitOption(this);
		}
	}
}


export class IntoClauseContext extends ParserRuleContext {
	public INTO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public OUTFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OUTFILE_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public DUMPFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DUMPFILE_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext[];
	public textOrIdentifier(i: number): TextOrIdentifierContext;
	public textOrIdentifier(i?: number): TextOrIdentifierContext | TextOrIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextOrIdentifierContext);
		} else {
			return this.getRuleContext(i, TextOrIdentifierContext);
		}
	}
	public userVariable(): UserVariableContext[];
	public userVariable(i: number): UserVariableContext;
	public userVariable(i?: number): UserVariableContext | UserVariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserVariableContext);
		} else {
			return this.getRuleContext(i, UserVariableContext);
		}
	}
	public charsetClause(): CharsetClauseContext | undefined {
		return this.tryGetRuleContext(0, CharsetClauseContext);
	}
	public fieldsClause(): FieldsClauseContext | undefined {
		return this.tryGetRuleContext(0, FieldsClauseContext);
	}
	public linesClause(): LinesClauseContext | undefined {
		return this.tryGetRuleContext(0, LinesClauseContext);
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_intoClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIntoClause) {
			listener.enterIntoClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIntoClause) {
			listener.exitIntoClause(this);
		}
	}
}


export class ProcedureAnalyseClauseContext extends ParserRuleContext {
	public PROCEDURE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
	public ANALYSE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ANALYSE_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode[];
	public INT_NUMBER(i: number): TerminalNode;
	public INT_NUMBER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.INT_NUMBER);
		} else {
			return this.getToken(MultiQueryMySQLParser.INT_NUMBER, i);
		}
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_procedureAnalyseClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterProcedureAnalyseClause) {
			listener.enterProcedureAnalyseClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitProcedureAnalyseClause) {
			listener.exitProcedureAnalyseClause(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	public HAVING_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.HAVING_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_havingClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHavingClause) {
			listener.enterHavingClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHavingClause) {
			listener.exitHavingClause(this);
		}
	}
}


export class WindowClauseContext extends ParserRuleContext {
	public WINDOW_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WINDOW_SYMBOL, 0); }
	public windowDefinition(): WindowDefinitionContext[];
	public windowDefinition(i: number): WindowDefinitionContext;
	public windowDefinition(i?: number): WindowDefinitionContext | WindowDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WindowDefinitionContext);
		} else {
			return this.getRuleContext(i, WindowDefinitionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowClause) {
			listener.enterWindowClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowClause) {
			listener.exitWindowClause(this);
		}
	}
}


export class WindowDefinitionContext extends ParserRuleContext {
	public windowName(): WindowNameContext {
		return this.getRuleContext(0, WindowNameContext);
	}
	public AS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public windowSpec(): WindowSpecContext {
		return this.getRuleContext(0, WindowSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowDefinition) {
			listener.enterWindowDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowDefinition) {
			listener.exitWindowDefinition(this);
		}
	}
}


export class WindowSpecContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public windowSpecDetails(): WindowSpecDetailsContext {
		return this.getRuleContext(0, WindowSpecDetailsContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowSpec; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowSpec) {
			listener.enterWindowSpec(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowSpec) {
			listener.exitWindowSpec(this);
		}
	}
}


export class WindowSpecDetailsContext extends ParserRuleContext {
	public windowName(): WindowNameContext | undefined {
		return this.tryGetRuleContext(0, WindowNameContext);
	}
	public PARTITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public orderList(): OrderListContext | undefined {
		return this.tryGetRuleContext(0, OrderListContext);
	}
	public orderClause(): OrderClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderClauseContext);
	}
	public windowFrameClause(): WindowFrameClauseContext | undefined {
		return this.tryGetRuleContext(0, WindowFrameClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowSpecDetails; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowSpecDetails) {
			listener.enterWindowSpecDetails(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowSpecDetails) {
			listener.exitWindowSpecDetails(this);
		}
	}
}


export class WindowFrameClauseContext extends ParserRuleContext {
	public windowFrameUnits(): WindowFrameUnitsContext {
		return this.getRuleContext(0, WindowFrameUnitsContext);
	}
	public windowFrameExtent(): WindowFrameExtentContext {
		return this.getRuleContext(0, WindowFrameExtentContext);
	}
	public windowFrameExclusion(): WindowFrameExclusionContext | undefined {
		return this.tryGetRuleContext(0, WindowFrameExclusionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameClause) {
			listener.enterWindowFrameClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameClause) {
			listener.exitWindowFrameClause(this);
		}
	}
}


export class WindowFrameUnitsContext extends ParserRuleContext {
	public ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
	public RANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RANGE_SYMBOL, 0); }
	public GROUPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUPS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameUnits; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameUnits) {
			listener.enterWindowFrameUnits(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameUnits) {
			listener.exitWindowFrameUnits(this);
		}
	}
}


export class WindowFrameExtentContext extends ParserRuleContext {
	public windowFrameStart(): WindowFrameStartContext | undefined {
		return this.tryGetRuleContext(0, WindowFrameStartContext);
	}
	public windowFrameBetween(): WindowFrameBetweenContext | undefined {
		return this.tryGetRuleContext(0, WindowFrameBetweenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameExtent; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameExtent) {
			listener.enterWindowFrameExtent(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameExtent) {
			listener.exitWindowFrameExtent(this);
		}
	}
}


export class WindowFrameStartContext extends ParserRuleContext {
	public UNBOUNDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
	public PRECEDING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECEDING_SYMBOL, 0); }
	public ulonglong_number(): Ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulonglong_numberContext);
	}
	public PARAM_MARKER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
	public INTERVAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public CURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public ROW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameStart; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameStart) {
			listener.enterWindowFrameStart(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameStart) {
			listener.exitWindowFrameStart(this);
		}
	}
}


export class WindowFrameBetweenContext extends ParserRuleContext {
	public BETWEEN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BETWEEN_SYMBOL, 0); }
	public windowFrameBound(): WindowFrameBoundContext[];
	public windowFrameBound(i: number): WindowFrameBoundContext;
	public windowFrameBound(i?: number): WindowFrameBoundContext | WindowFrameBoundContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WindowFrameBoundContext);
		} else {
			return this.getRuleContext(i, WindowFrameBoundContext);
		}
	}
	public AND_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameBetween; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameBetween) {
			listener.enterWindowFrameBetween(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameBetween) {
			listener.exitWindowFrameBetween(this);
		}
	}
}


export class WindowFrameBoundContext extends ParserRuleContext {
	public windowFrameStart(): WindowFrameStartContext | undefined {
		return this.tryGetRuleContext(0, WindowFrameStartContext);
	}
	public UNBOUNDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
	public FOLLOWING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOLLOWING_SYMBOL, 0); }
	public ulonglong_number(): Ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulonglong_numberContext);
	}
	public PARAM_MARKER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
	public INTERVAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameBound; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameBound) {
			listener.enterWindowFrameBound(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameBound) {
			listener.exitWindowFrameBound(this);
		}
	}
}


export class WindowFrameExclusionContext extends ParserRuleContext {
	public EXCLUDE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EXCLUDE_SYMBOL, 0); }
	public CURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public ROW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public TIES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIES_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	public OTHERS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OTHERS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFrameExclusion; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFrameExclusion) {
			listener.enterWindowFrameExclusion(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFrameExclusion) {
			listener.exitWindowFrameExclusion(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public commonTableExpression(): CommonTableExpressionContext[];
	public commonTableExpression(i: number): CommonTableExpressionContext;
	public commonTableExpression(i?: number): CommonTableExpressionContext | CommonTableExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CommonTableExpressionContext);
		} else {
			return this.getRuleContext(i, CommonTableExpressionContext);
		}
	}
	public RECURSIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RECURSIVE_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_withClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWithClause) {
			listener.enterWithClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWithClause) {
			listener.exitWithClause(this);
		}
	}
}


export class CommonTableExpressionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public AS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	public columnInternalRefList(): ColumnInternalRefListContext | undefined {
		return this.tryGetRuleContext(0, ColumnInternalRefListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_commonTableExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCommonTableExpression) {
			listener.enterCommonTableExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCommonTableExpression) {
			listener.exitCommonTableExpression(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public orderList(): OrderListContext {
		return this.getRuleContext(0, OrderListContext);
	}
	public olapOption(): OlapOptionContext | undefined {
		return this.tryGetRuleContext(0, OlapOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_groupByClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGroupByClause) {
			listener.enterGroupByClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGroupByClause) {
			listener.exitGroupByClause(this);
		}
	}
}


export class OlapOptionContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public ROLLUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLUP_SYMBOL, 0); }
	public CUBE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CUBE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_olapOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOlapOption) {
			listener.enterOlapOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOlapOption) {
			listener.exitOlapOption(this);
		}
	}
}


export class OrderClauseContext extends ParserRuleContext {
	public ORDER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ORDER_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public orderList(): OrderListContext {
		return this.getRuleContext(0, OrderListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_orderClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOrderClause) {
			listener.enterOrderClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOrderClause) {
			listener.exitOrderClause(this);
		}
	}
}


export class DirectionContext extends ParserRuleContext {
	public ASC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASC_SYMBOL, 0); }
	public DESC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_direction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDirection) {
			listener.enterDirection(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDirection) {
			listener.exitDirection(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	public FROM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public DUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DUAL_SYMBOL, 0); }
	public tableReferenceList(): TableReferenceListContext | undefined {
		return this.tryGetRuleContext(0, TableReferenceListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fromClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFromClause) {
			listener.enterFromClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFromClause) {
			listener.exitFromClause(this);
		}
	}
}


export class TableReferenceListContext extends ParserRuleContext {
	public tableReference(): TableReferenceContext[];
	public tableReference(i: number): TableReferenceContext;
	public tableReference(i?: number): TableReferenceContext | TableReferenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableReferenceContext);
		} else {
			return this.getRuleContext(i, TableReferenceContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableReferenceList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableReferenceList) {
			listener.enterTableReferenceList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableReferenceList) {
			listener.exitTableReferenceList(this);
		}
	}
}


export class SelectOptionContext extends ParserRuleContext {
	public querySpecOption(): QuerySpecOptionContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecOptionContext);
	}
	public SQL_NO_CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
	public SQL_CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_CACHE_SYMBOL, 0); }
	public MAX_STATEMENT_TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_selectOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSelectOption) {
			listener.enterSelectOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSelectOption) {
			listener.exitSelectOption(this);
		}
	}
}


export class LockingClauseContext extends ParserRuleContext {
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public lockStrengh(): LockStrenghContext | undefined {
		return this.tryGetRuleContext(0, LockStrenghContext);
	}
	public OF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OF_SYMBOL, 0); }
	public tableAliasRefList(): TableAliasRefListContext | undefined {
		return this.tryGetRuleContext(0, TableAliasRefListContext);
	}
	public lockedRowAction(): LockedRowActionContext | undefined {
		return this.tryGetRuleContext(0, LockedRowActionContext);
	}
	public LOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public SHARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
	public MODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lockingClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLockingClause) {
			listener.enterLockingClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLockingClause) {
			listener.exitLockingClause(this);
		}
	}
}


export class LockStrenghContext extends ParserRuleContext {
	public UPDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public SHARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lockStrengh; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLockStrengh) {
			listener.enterLockStrengh(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLockStrengh) {
			listener.exitLockStrengh(this);
		}
	}
}


export class LockedRowActionContext extends ParserRuleContext {
	public SKIP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SKIP_SYMBOL, 0); }
	public LOCKED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCKED_SYMBOL, 0); }
	public NOWAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOWAIT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lockedRowAction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLockedRowAction) {
			listener.enterLockedRowAction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLockedRowAction) {
			listener.exitLockedRowAction(this);
		}
	}
}


export class SelectItemListContext extends ParserRuleContext {
	public selectItem(): SelectItemContext[];
	public selectItem(i: number): SelectItemContext;
	public selectItem(i?: number): SelectItemContext | SelectItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectItemContext);
		} else {
			return this.getRuleContext(i, SelectItemContext);
		}
	}
	public MULT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_selectItemList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSelectItemList) {
			listener.enterSelectItemList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSelectItemList) {
			listener.exitSelectItemList(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	public tableWild(): TableWildContext | undefined {
		return this.tryGetRuleContext(0, TableWildContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public selectAlias(): SelectAliasContext | undefined {
		return this.tryGetRuleContext(0, SelectAliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_selectItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSelectItem) {
			listener.enterSelectItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSelectItem) {
			listener.exitSelectItem(this);
		}
	}
}


export class SelectAliasContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_selectAlias; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSelectAlias) {
			listener.enterSelectAlias(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSelectAlias) {
			listener.exitSelectAlias(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	public WHERE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WHERE_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_whereClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWhereClause) {
			listener.enterWhereClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWhereClause) {
			listener.exitWhereClause(this);
		}
	}
}


export class TableReferenceContext extends ParserRuleContext {
	public tableFactor(): TableFactorContext | undefined {
		return this.tryGetRuleContext(0, TableFactorContext);
	}
	public OPEN_CURLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_CURLY_SYMBOL, 0); }
	public escapedTableReference(): EscapedTableReferenceContext | undefined {
		return this.tryGetRuleContext(0, EscapedTableReferenceContext);
	}
	public CLOSE_CURLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_CURLY_SYMBOL, 0); }
	public joinedTable(): JoinedTableContext[];
	public joinedTable(i: number): JoinedTableContext;
	public joinedTable(i?: number): JoinedTableContext | JoinedTableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinedTableContext);
		} else {
			return this.getRuleContext(i, JoinedTableContext);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public OJ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OJ_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableReference; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableReference) {
			listener.enterTableReference(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableReference) {
			listener.exitTableReference(this);
		}
	}
}


export class EscapedTableReferenceContext extends ParserRuleContext {
	public tableFactor(): TableFactorContext {
		return this.getRuleContext(0, TableFactorContext);
	}
	public joinedTable(): JoinedTableContext[];
	public joinedTable(i: number): JoinedTableContext;
	public joinedTable(i?: number): JoinedTableContext | JoinedTableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinedTableContext);
		} else {
			return this.getRuleContext(i, JoinedTableContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_escapedTableReference; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterEscapedTableReference) {
			listener.enterEscapedTableReference(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitEscapedTableReference) {
			listener.exitEscapedTableReference(this);
		}
	}
}


export class JoinedTableContext extends ParserRuleContext {
	public innerJoinType(): InnerJoinTypeContext | undefined {
		return this.tryGetRuleContext(0, InnerJoinTypeContext);
	}
	public tableReference(): TableReferenceContext | undefined {
		return this.tryGetRuleContext(0, TableReferenceContext);
	}
	public ON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListWithParenthesesContext);
	}
	public outerJoinType(): OuterJoinTypeContext | undefined {
		return this.tryGetRuleContext(0, OuterJoinTypeContext);
	}
	public naturalJoinType(): NaturalJoinTypeContext | undefined {
		return this.tryGetRuleContext(0, NaturalJoinTypeContext);
	}
	public tableFactor(): TableFactorContext | undefined {
		return this.tryGetRuleContext(0, TableFactorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_joinedTable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterJoinedTable) {
			listener.enterJoinedTable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitJoinedTable) {
			listener.exitJoinedTable(this);
		}
	}
}


export class NaturalJoinTypeContext extends ParserRuleContext {
	public NATURAL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.NATURAL_SYMBOL, 0); }
	public JOIN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
	public INNER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INNER_SYMBOL, 0); }
	public LEFT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEFT_SYMBOL, 0); }
	public RIGHT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RIGHT_SYMBOL, 0); }
	public OUTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OUTER_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_naturalJoinType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNaturalJoinType) {
			listener.enterNaturalJoinType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNaturalJoinType) {
			listener.exitNaturalJoinType(this);
		}
	}
}


export class InnerJoinTypeContext extends ParserRuleContext {
	public _type: Token;
	public JOIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
	public INNER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INNER_SYMBOL, 0); }
	public CROSS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CROSS_SYMBOL, 0); }
	public STRAIGHT_JOIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_innerJoinType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInnerJoinType) {
			listener.enterInnerJoinType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInnerJoinType) {
			listener.exitInnerJoinType(this);
		}
	}
}


export class OuterJoinTypeContext extends ParserRuleContext {
	public _type: Token;
	public JOIN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
	public LEFT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEFT_SYMBOL, 0); }
	public RIGHT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RIGHT_SYMBOL, 0); }
	public OUTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OUTER_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_outerJoinType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOuterJoinType) {
			listener.enterOuterJoinType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOuterJoinType) {
			listener.exitOuterJoinType(this);
		}
	}
}


export class TableFactorContext extends ParserRuleContext {
	public singleTable(): SingleTableContext | undefined {
		return this.tryGetRuleContext(0, SingleTableContext);
	}
	public singleTableParens(): SingleTableParensContext | undefined {
		return this.tryGetRuleContext(0, SingleTableParensContext);
	}
	public derivedTable(): DerivedTableContext | undefined {
		return this.tryGetRuleContext(0, DerivedTableContext);
	}
	public tableReferenceListParens(): TableReferenceListParensContext | undefined {
		return this.tryGetRuleContext(0, TableReferenceListParensContext);
	}
	public tableFunction(): TableFunctionContext | undefined {
		return this.tryGetRuleContext(0, TableFunctionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableFactor; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableFactor) {
			listener.enterTableFactor(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableFactor) {
			listener.exitTableFactor(this);
		}
	}
}


export class SingleTableContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public usePartition(): UsePartitionContext | undefined {
		return this.tryGetRuleContext(0, UsePartitionContext);
	}
	public tableAlias(): TableAliasContext | undefined {
		return this.tryGetRuleContext(0, TableAliasContext);
	}
	public indexHintList(): IndexHintListContext | undefined {
		return this.tryGetRuleContext(0, IndexHintListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_singleTable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSingleTable) {
			listener.enterSingleTable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSingleTable) {
			listener.exitSingleTable(this);
		}
	}
}


export class SingleTableParensContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public singleTable(): SingleTableContext | undefined {
		return this.tryGetRuleContext(0, SingleTableContext);
	}
	public singleTableParens(): SingleTableParensContext | undefined {
		return this.tryGetRuleContext(0, SingleTableParensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_singleTableParens; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSingleTableParens) {
			listener.enterSingleTableParens(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSingleTableParens) {
			listener.exitSingleTableParens(this);
		}
	}
}


export class DerivedTableContext extends ParserRuleContext {
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	public tableAlias(): TableAliasContext | undefined {
		return this.tryGetRuleContext(0, TableAliasContext);
	}
	public columnInternalRefList(): ColumnInternalRefListContext | undefined {
		return this.tryGetRuleContext(0, ColumnInternalRefListContext);
	}
	public LATERAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LATERAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_derivedTable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDerivedTable) {
			listener.enterDerivedTable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDerivedTable) {
			listener.exitDerivedTable(this);
		}
	}
}


export class TableReferenceListParensContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public tableReferenceList(): TableReferenceListContext | undefined {
		return this.tryGetRuleContext(0, TableReferenceListContext);
	}
	public tableReferenceListParens(): TableReferenceListParensContext | undefined {
		return this.tryGetRuleContext(0, TableReferenceListParensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableReferenceListParens; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableReferenceListParens) {
			listener.enterTableReferenceListParens(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableReferenceListParens) {
			listener.exitTableReferenceListParens(this);
		}
	}
}


export class TableFunctionContext extends ParserRuleContext {
	public JSON_TABLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.JSON_TABLE_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public COMMA_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	public columnsClause(): ColumnsClauseContext {
		return this.getRuleContext(0, ColumnsClauseContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public tableAlias(): TableAliasContext | undefined {
		return this.tryGetRuleContext(0, TableAliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableFunction) {
			listener.enterTableFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableFunction) {
			listener.exitTableFunction(this);
		}
	}
}


export class ColumnsClauseContext extends ParserRuleContext {
	public COLUMNS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public jtColumn(): JtColumnContext[];
	public jtColumn(i: number): JtColumnContext;
	public jtColumn(i?: number): JtColumnContext | JtColumnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JtColumnContext);
		} else {
			return this.getRuleContext(i, JtColumnContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnsClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnsClause) {
			listener.enterColumnsClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnsClause) {
			listener.exitColumnsClause(this);
		}
	}
}


export class JtColumnContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public ORDINALITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORDINALITY_SYMBOL, 0); }
	public dataType(): DataTypeContext | undefined {
		return this.tryGetRuleContext(0, DataTypeContext);
	}
	public PATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PATH_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	public EXISTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
	public onEmptyOrError(): OnEmptyOrErrorContext | undefined {
		return this.tryGetRuleContext(0, OnEmptyOrErrorContext);
	}
	public NESTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NESTED_SYMBOL, 0); }
	public columnsClause(): ColumnsClauseContext | undefined {
		return this.tryGetRuleContext(0, ColumnsClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_jtColumn; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterJtColumn) {
			listener.enterJtColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitJtColumn) {
			listener.exitJtColumn(this);
		}
	}
}


export class OnEmptyOrErrorContext extends ParserRuleContext {
	public onEmpty(): OnEmptyContext | undefined {
		return this.tryGetRuleContext(0, OnEmptyContext);
	}
	public onError(): OnErrorContext | undefined {
		return this.tryGetRuleContext(0, OnErrorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_onEmptyOrError; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOnEmptyOrError) {
			listener.enterOnEmptyOrError(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOnEmptyOrError) {
			listener.exitOnEmptyOrError(this);
		}
	}
}


export class OnEmptyContext extends ParserRuleContext {
	public jtOnResponse(): JtOnResponseContext {
		return this.getRuleContext(0, JtOnResponseContext);
	}
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public EMPTY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EMPTY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_onEmpty; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOnEmpty) {
			listener.enterOnEmpty(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOnEmpty) {
			listener.exitOnEmpty(this);
		}
	}
}


export class OnErrorContext extends ParserRuleContext {
	public jtOnResponse(): JtOnResponseContext {
		return this.getRuleContext(0, JtOnResponseContext);
	}
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public ERROR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_onError; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOnError) {
			listener.enterOnError(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOnError) {
			listener.exitOnError(this);
		}
	}
}


export class JtOnResponseContext extends ParserRuleContext {
	public ERROR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
	public NULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_jtOnResponse; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterJtOnResponse) {
			listener.enterJtOnResponse(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitJtOnResponse) {
			listener.exitJtOnResponse(this);
		}
	}
}


export class UnionOptionContext extends ParserRuleContext {
	public DISTINCT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISTINCT_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_unionOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUnionOption) {
			listener.enterUnionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUnionOption) {
			listener.exitUnionOption(this);
		}
	}
}


export class TableAliasContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableAlias; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableAlias) {
			listener.enterTableAlias(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableAlias) {
			listener.exitTableAlias(this);
		}
	}
}


export class IndexHintListContext extends ParserRuleContext {
	public indexHint(): IndexHintContext[];
	public indexHint(i: number): IndexHintContext;
	public indexHint(i?: number): IndexHintContext | IndexHintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexHintContext);
		} else {
			return this.getRuleContext(i, IndexHintContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexHintList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexHintList) {
			listener.enterIndexHintList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexHintList) {
			listener.exitIndexHintList(this);
		}
	}
}


export class IndexHintContext extends ParserRuleContext {
	public indexHintType(): IndexHintTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexHintTypeContext);
	}
	public keyOrIndex(): KeyOrIndexContext {
		return this.getRuleContext(0, KeyOrIndexContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public indexList(): IndexListContext | undefined {
		return this.tryGetRuleContext(0, IndexListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public indexHintClause(): IndexHintClauseContext | undefined {
		return this.tryGetRuleContext(0, IndexHintClauseContext);
	}
	public USE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexHint; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexHint) {
			listener.enterIndexHint(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexHint) {
			listener.exitIndexHint(this);
		}
	}
}


export class IndexHintTypeContext extends ParserRuleContext {
	public FORCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexHintType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexHintType) {
			listener.enterIndexHintType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexHintType) {
			listener.exitIndexHintType(this);
		}
	}
}


export class KeyOrIndexContext extends ParserRuleContext {
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyOrIndex; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyOrIndex) {
			listener.enterKeyOrIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyOrIndex) {
			listener.exitKeyOrIndex(this);
		}
	}
}


export class ConstraintKeyTypeContext extends ParserRuleContext {
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public UNIQUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
	public keyOrIndex(): KeyOrIndexContext | undefined {
		return this.tryGetRuleContext(0, KeyOrIndexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_constraintKeyType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterConstraintKeyType) {
			listener.enterConstraintKeyType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitConstraintKeyType) {
			listener.exitConstraintKeyType(this);
		}
	}
}


export class IndexHintClauseContext extends ParserRuleContext {
	public FOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public JOIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
	public ORDER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORDER_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexHintClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexHintClause) {
			listener.enterIndexHintClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexHintClause) {
			listener.exitIndexHintClause(this);
		}
	}
}


export class IndexListContext extends ParserRuleContext {
	public indexListElement(): IndexListElementContext[];
	public indexListElement(i: number): IndexListElementContext;
	public indexListElement(i?: number): IndexListElementContext | IndexListElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexListElementContext);
		} else {
			return this.getRuleContext(i, IndexListElementContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexList) {
			listener.enterIndexList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexList) {
			listener.exitIndexList(this);
		}
	}
}


export class IndexListElementContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexListElement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexListElement) {
			listener.enterIndexListElement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexListElement) {
			listener.exitIndexListElement(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	public UPDATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public tableReferenceList(): TableReferenceListContext {
		return this.getRuleContext(0, TableReferenceListContext);
	}
	public SET_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public updateList(): UpdateListContext {
		return this.getRuleContext(0, UpdateListContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public orderClause(): OrderClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderClauseContext);
	}
	public simpleLimitClause(): SimpleLimitClauseContext | undefined {
		return this.tryGetRuleContext(0, SimpleLimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_updateStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUpdateStatement) {
			listener.enterUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUpdateStatement) {
			listener.exitUpdateStatement(this);
		}
	}
}


export class TransactionOrLockingStatementContext extends ParserRuleContext {
	public transactionStatement(): TransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, TransactionStatementContext);
	}
	public savepointStatement(): SavepointStatementContext | undefined {
		return this.tryGetRuleContext(0, SavepointStatementContext);
	}
	public lockStatement(): LockStatementContext | undefined {
		return this.tryGetRuleContext(0, LockStatementContext);
	}
	public xaStatement(): XaStatementContext | undefined {
		return this.tryGetRuleContext(0, XaStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_transactionOrLockingStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTransactionOrLockingStatement) {
			listener.enterTransactionOrLockingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTransactionOrLockingStatement) {
			listener.exitTransactionOrLockingStatement(this);
		}
	}
}


export class TransactionStatementContext extends ParserRuleContext {
	public START_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
	public TRANSACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
	public transactionCharacteristic(): TransactionCharacteristicContext[];
	public transactionCharacteristic(i: number): TransactionCharacteristicContext;
	public transactionCharacteristic(i?: number): TransactionCharacteristicContext | TransactionCharacteristicContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionCharacteristicContext);
		} else {
			return this.getRuleContext(i, TransactionCharacteristicContext);
		}
	}
	public COMMIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
	public WORK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
	public AND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
	public CHAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
	public RELEASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELEASE_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode[];
	public NO_SYMBOL(i: number): TerminalNode;
	public NO_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.NO_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.NO_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_transactionStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTransactionStatement) {
			listener.enterTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTransactionStatement) {
			listener.exitTransactionStatement(this);
		}
	}
}


export class BeginWorkContext extends ParserRuleContext {
	public BEGIN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
	public WORK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_beginWork; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterBeginWork) {
			listener.enterBeginWork(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitBeginWork) {
			listener.exitBeginWork(this);
		}
	}
}


export class TransactionCharacteristicContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public CONSISTENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSISTENT_SYMBOL, 0); }
	public SNAPSHOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SNAPSHOT_SYMBOL, 0); }
	public READ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WRITE_SYMBOL, 0); }
	public ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_transactionCharacteristic; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTransactionCharacteristic) {
			listener.enterTransactionCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTransactionCharacteristic) {
			listener.exitTransactionCharacteristic(this);
		}
	}
}


export class SavepointStatementContext extends ParserRuleContext {
	public SAVEPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SAVEPOINT_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public ROLLBACK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public WORK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
	public AND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
	public CHAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
	public RELEASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELEASE_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode[];
	public NO_SYMBOL(i: number): TerminalNode;
	public NO_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.NO_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.NO_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_savepointStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSavepointStatement) {
			listener.enterSavepointStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSavepointStatement) {
			listener.exitSavepointStatement(this);
		}
	}
}


export class LockStatementContext extends ParserRuleContext {
	public LOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	public lockItem(): LockItemContext[];
	public lockItem(i: number): LockItemContext;
	public lockItem(i?: number): LockItemContext | LockItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LockItemContext);
		} else {
			return this.getRuleContext(i, LockItemContext);
		}
	}
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public INSTANCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public BACKUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BACKUP_SYMBOL, 0); }
	public UNLOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNLOCK_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lockStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLockStatement) {
			listener.enterLockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLockStatement) {
			listener.exitLockStatement(this);
		}
	}
}


export class LockItemContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public lockOption(): LockOptionContext {
		return this.getRuleContext(0, LockOptionContext);
	}
	public tableAlias(): TableAliasContext | undefined {
		return this.tryGetRuleContext(0, TableAliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lockItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLockItem) {
			listener.enterLockItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLockItem) {
			listener.exitLockItem(this);
		}
	}
}


export class LockOptionContext extends ParserRuleContext {
	public READ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WRITE_SYMBOL, 0); }
	public LOW_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lockOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLockOption) {
			listener.enterLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLockOption) {
			listener.exitLockOption(this);
		}
	}
}


export class XaStatementContext extends ParserRuleContext {
	public XA_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.XA_SYMBOL, 0); }
	public xid(): XidContext | undefined {
		return this.tryGetRuleContext(0, XidContext);
	}
	public END_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	public PREPARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
	public COMMIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
	public ROLLBACK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
	public RECOVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RECOVER_SYMBOL, 0); }
	public xaConvert(): XaConvertContext | undefined {
		return this.tryGetRuleContext(0, XaConvertContext);
	}
	public START_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
	public BEGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
	public SUSPEND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUSPEND_SYMBOL, 0); }
	public ONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONE_SYMBOL, 0); }
	public PHASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PHASE_SYMBOL, 0); }
	public JOIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
	public RESUME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESUME_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public MIGRATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIGRATE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_xaStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterXaStatement) {
			listener.enterXaStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitXaStatement) {
			listener.exitXaStatement(this);
		}
	}
}


export class XaConvertContext extends ParserRuleContext {
	public CONVERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
	public XID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XID_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_xaConvert; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterXaConvert) {
			listener.enterXaConvert(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitXaConvert) {
			listener.exitXaConvert(this);
		}
	}
}


export class XidContext extends ParserRuleContext {
	public textString(): TextStringContext[];
	public textString(i: number): TextStringContext;
	public textString(i?: number): TextStringContext | TextStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextStringContext);
		} else {
			return this.getRuleContext(i, TextStringContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_xid; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterXid) {
			listener.enterXid(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitXid) {
			listener.exitXid(this);
		}
	}
}


export class ReplicationStatementContext extends ParserRuleContext {
	public PURGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PURGE_SYMBOL, 0); }
	public LOGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public MASTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public BEFORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BEFORE_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public changeMaster(): ChangeMasterContext | undefined {
		return this.tryGetRuleContext(0, ChangeMasterContext);
	}
	public RESET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESET_SYMBOL, 0); }
	public resetOption(): ResetOptionContext[];
	public resetOption(i: number): ResetOptionContext;
	public resetOption(i?: number): ResetOptionContext | ResetOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResetOptionContext);
		} else {
			return this.getRuleContext(i, ResetOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public PERSIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public slave(): SlaveContext | undefined {
		return this.tryGetRuleContext(0, SlaveContext);
	}
	public changeReplication(): ChangeReplicationContext | undefined {
		return this.tryGetRuleContext(0, ChangeReplicationContext);
	}
	public replicationLoad(): ReplicationLoadContext | undefined {
		return this.tryGetRuleContext(0, ReplicationLoadContext);
	}
	public groupReplication(): GroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, GroupReplicationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_replicationStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReplicationStatement) {
			listener.enterReplicationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReplicationStatement) {
			listener.exitReplicationStatement(this);
		}
	}
}


export class ResetOptionContext extends ParserRuleContext {
	public _option: Token;
	public MASTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public masterResetOptions(): MasterResetOptionsContext | undefined {
		return this.tryGetRuleContext(0, MasterResetOptionsContext);
	}
	public CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public channel(): ChannelContext | undefined {
		return this.tryGetRuleContext(0, ChannelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resetOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResetOption) {
			listener.enterResetOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResetOption) {
			listener.exitResetOption(this);
		}
	}
}


export class MasterResetOptionsContext extends ParserRuleContext {
	public TO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_masterResetOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterMasterResetOptions) {
			listener.enterMasterResetOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitMasterResetOptions) {
			listener.exitMasterResetOptions(this);
		}
	}
}


export class ReplicationLoadContext extends ParserRuleContext {
	public LOAD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LOAD_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public MASTER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_replicationLoad; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReplicationLoad) {
			listener.enterReplicationLoad(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReplicationLoad) {
			listener.exitReplicationLoad(this);
		}
	}
}


export class ChangeMasterContext extends ParserRuleContext {
	public CHANGE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
	public MASTER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public changeMasterOptions(): ChangeMasterOptionsContext {
		return this.getRuleContext(0, ChangeMasterOptionsContext);
	}
	public channel(): ChannelContext | undefined {
		return this.tryGetRuleContext(0, ChannelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_changeMaster; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterChangeMaster) {
			listener.enterChangeMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitChangeMaster) {
			listener.exitChangeMaster(this);
		}
	}
}


export class ChangeMasterOptionsContext extends ParserRuleContext {
	public masterOption(): MasterOptionContext[];
	public masterOption(i: number): MasterOptionContext;
	public masterOption(i?: number): MasterOptionContext | MasterOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MasterOptionContext);
		} else {
			return this.getRuleContext(i, MasterOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_changeMasterOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterChangeMasterOptions) {
			listener.enterChangeMasterOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitChangeMasterOptions) {
			listener.exitChangeMasterOptions(this);
		}
	}
}


export class MasterOptionContext extends ParserRuleContext {
	public MASTER_HOST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_HOST_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public textStringNoLinebreak(): TextStringNoLinebreakContext | undefined {
		return this.tryGetRuleContext(0, TextStringNoLinebreakContext);
	}
	public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
	public MASTER_BIND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_BIND_SYMBOL, 0); }
	public MASTER_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_USER_SYMBOL, 0); }
	public MASTER_PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
	public MASTER_PORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PORT_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
	public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
	public MASTER_DELAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL, 0); }
	public MASTER_SSL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_SYMBOL, 0); }
	public MASTER_SSL_CA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
	public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
	public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
	public MASTER_SSL_CERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
	public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
	public masterTlsCiphersuitesDef(): MasterTlsCiphersuitesDefContext | undefined {
		return this.tryGetRuleContext(0, MasterTlsCiphersuitesDefContext);
	}
	public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
	public MASTER_SSL_KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
	public MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
	public MASTER_SSL_CRL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
	public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
	public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
	public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
	public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
	public serverIdList(): ServerIdListContext | undefined {
		return this.tryGetRuleContext(0, ServerIdListContext);
	}
	public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
	public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
	public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
	public privilegeCheckDef(): PrivilegeCheckDefContext | undefined {
		return this.tryGetRuleContext(0, PrivilegeCheckDefContext);
	}
	public masterFileDef(): MasterFileDefContext | undefined {
		return this.tryGetRuleContext(0, MasterFileDefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_masterOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterMasterOption) {
			listener.enterMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitMasterOption) {
			listener.exitMasterOption(this);
		}
	}
}


export class PrivilegeCheckDefContext extends ParserRuleContext {
	public userIdentifierOrText(): UserIdentifierOrTextContext | undefined {
		return this.tryGetRuleContext(0, UserIdentifierOrTextContext);
	}
	public NULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_privilegeCheckDef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPrivilegeCheckDef) {
			listener.enterPrivilegeCheckDef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPrivilegeCheckDef) {
			listener.exitPrivilegeCheckDef(this);
		}
	}
}


export class MasterTlsCiphersuitesDefContext extends ParserRuleContext {
	public textStringNoLinebreak(): TextStringNoLinebreakContext | undefined {
		return this.tryGetRuleContext(0, TextStringNoLinebreakContext);
	}
	public NULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_masterTlsCiphersuitesDef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterMasterTlsCiphersuitesDef) {
			listener.enterMasterTlsCiphersuitesDef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitMasterTlsCiphersuitesDef) {
			listener.exitMasterTlsCiphersuitesDef(this);
		}
	}
}


export class MasterFileDefContext extends ParserRuleContext {
	public MASTER_LOG_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public textStringNoLinebreak(): TextStringNoLinebreakContext | undefined {
		return this.tryGetRuleContext(0, TextStringNoLinebreakContext);
	}
	public MASTER_LOG_POS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
	public ulonglong_number(): Ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulonglong_numberContext);
	}
	public RELAY_LOG_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
	public RELAY_LOG_POS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_masterFileDef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterMasterFileDef) {
			listener.enterMasterFileDef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitMasterFileDef) {
			listener.exitMasterFileDef(this);
		}
	}
}


export class ServerIdListContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext[];
	public ulong_number(i: number): Ulong_numberContext;
	public ulong_number(i?: number): Ulong_numberContext | Ulong_numberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ulong_numberContext);
		} else {
			return this.getRuleContext(i, Ulong_numberContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_serverIdList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterServerIdList) {
			listener.enterServerIdList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitServerIdList) {
			listener.exitServerIdList(this);
		}
	}
}


export class ChangeReplicationContext extends ParserRuleContext {
	public CHANGE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
	public REPLICATION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
	public FILTER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FILTER_SYMBOL, 0); }
	public filterDefinition(): FilterDefinitionContext[];
	public filterDefinition(i: number): FilterDefinitionContext;
	public filterDefinition(i?: number): FilterDefinitionContext | FilterDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FilterDefinitionContext);
		} else {
			return this.getRuleContext(i, FilterDefinitionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public channel(): ChannelContext | undefined {
		return this.tryGetRuleContext(0, ChannelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_changeReplication; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterChangeReplication) {
			listener.enterChangeReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitChangeReplication) {
			listener.exitChangeReplication(this);
		}
	}
}


export class FilterDefinitionContext extends ParserRuleContext {
	public REPLICATE_DO_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public filterDbList(): FilterDbListContext | undefined {
		return this.tryGetRuleContext(0, FilterDbListContext);
	}
	public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
	public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
	public filterTableList(): FilterTableListContext | undefined {
		return this.tryGetRuleContext(0, FilterTableListContext);
	}
	public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
	public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
	public filterStringList(): FilterStringListContext | undefined {
		return this.tryGetRuleContext(0, FilterStringListContext);
	}
	public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
	public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
	public filterDbPairList(): FilterDbPairListContext | undefined {
		return this.tryGetRuleContext(0, FilterDbPairListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterDefinition) {
			listener.enterFilterDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterDefinition) {
			listener.exitFilterDefinition(this);
		}
	}
}


export class FilterDbListContext extends ParserRuleContext {
	public schemaRef(): SchemaRefContext[];
	public schemaRef(i: number): SchemaRefContext;
	public schemaRef(i?: number): SchemaRefContext | SchemaRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SchemaRefContext);
		} else {
			return this.getRuleContext(i, SchemaRefContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterDbList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterDbList) {
			listener.enterFilterDbList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterDbList) {
			listener.exitFilterDbList(this);
		}
	}
}


export class FilterTableListContext extends ParserRuleContext {
	public filterTableRef(): FilterTableRefContext[];
	public filterTableRef(i: number): FilterTableRefContext;
	public filterTableRef(i?: number): FilterTableRefContext | FilterTableRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FilterTableRefContext);
		} else {
			return this.getRuleContext(i, FilterTableRefContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterTableList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterTableList) {
			listener.enterFilterTableList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterTableList) {
			listener.exitFilterTableList(this);
		}
	}
}


export class FilterStringListContext extends ParserRuleContext {
	public filterWildDbTableString(): FilterWildDbTableStringContext[];
	public filterWildDbTableString(i: number): FilterWildDbTableStringContext;
	public filterWildDbTableString(i?: number): FilterWildDbTableStringContext | FilterWildDbTableStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FilterWildDbTableStringContext);
		} else {
			return this.getRuleContext(i, FilterWildDbTableStringContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterStringList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterStringList) {
			listener.enterFilterStringList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterStringList) {
			listener.exitFilterStringList(this);
		}
	}
}


export class FilterWildDbTableStringContext extends ParserRuleContext {
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getRuleContext(0, TextStringNoLinebreakContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterWildDbTableString; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterWildDbTableString) {
			listener.enterFilterWildDbTableString(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterWildDbTableString) {
			listener.exitFilterWildDbTableString(this);
		}
	}
}


export class FilterDbPairListContext extends ParserRuleContext {
	public schemaIdentifierPair(): SchemaIdentifierPairContext[];
	public schemaIdentifierPair(i: number): SchemaIdentifierPairContext;
	public schemaIdentifierPair(i?: number): SchemaIdentifierPairContext | SchemaIdentifierPairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SchemaIdentifierPairContext);
		} else {
			return this.getRuleContext(i, SchemaIdentifierPairContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterDbPairList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterDbPairList) {
			listener.enterFilterDbPairList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterDbPairList) {
			listener.exitFilterDbPairList(this);
		}
	}
}


export class SlaveContext extends ParserRuleContext {
	public START_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	public slaveConnectionOptions(): SlaveConnectionOptionsContext | undefined {
		return this.tryGetRuleContext(0, SlaveConnectionOptionsContext);
	}
	public slaveThreadOptions(): SlaveThreadOptionsContext | undefined {
		return this.tryGetRuleContext(0, SlaveThreadOptionsContext);
	}
	public UNTIL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
	public slaveUntilOptions(): SlaveUntilOptionsContext | undefined {
		return this.tryGetRuleContext(0, SlaveUntilOptionsContext);
	}
	public channel(): ChannelContext | undefined {
		return this.tryGetRuleContext(0, ChannelContext);
	}
	public STOP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_slave; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSlave) {
			listener.enterSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSlave) {
			listener.exitSlave(this);
		}
	}
}


export class SlaveUntilOptionsContext extends ParserRuleContext {
	public masterFileDef(): MasterFileDefContext[];
	public masterFileDef(i: number): MasterFileDefContext;
	public masterFileDef(i?: number): MasterFileDefContext | MasterFileDefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MasterFileDefContext);
		} else {
			return this.getRuleContext(i, MasterFileDefContext);
		}
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
	public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
	public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_slaveUntilOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSlaveUntilOptions) {
			listener.enterSlaveUntilOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSlaveUntilOptions) {
			listener.exitSlaveUntilOptions(this);
		}
	}
}


export class SlaveConnectionOptionsContext extends ParserRuleContext {
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode[];
	public EQUAL_OPERATOR(i: number): TerminalNode;
	public EQUAL_OPERATOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.EQUAL_OPERATOR);
		} else {
			return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, i);
		}
	}
	public textString(): TextStringContext[];
	public textString(i: number): TextStringContext;
	public textString(i?: number): TextStringContext | TextStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextStringContext);
		} else {
			return this.getRuleContext(i, TextStringContext);
		}
	}
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public DEFAULT_AUTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
	public PLUGIN_DIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_slaveConnectionOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSlaveConnectionOptions) {
			listener.enterSlaveConnectionOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSlaveConnectionOptions) {
			listener.exitSlaveConnectionOptions(this);
		}
	}
}


export class SlaveThreadOptionsContext extends ParserRuleContext {
	public slaveThreadOption(): SlaveThreadOptionContext[];
	public slaveThreadOption(i: number): SlaveThreadOptionContext;
	public slaveThreadOption(i?: number): SlaveThreadOptionContext | SlaveThreadOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SlaveThreadOptionContext);
		} else {
			return this.getRuleContext(i, SlaveThreadOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_slaveThreadOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSlaveThreadOptions) {
			listener.enterSlaveThreadOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSlaveThreadOptions) {
			listener.exitSlaveThreadOptions(this);
		}
	}
}


export class SlaveThreadOptionContext extends ParserRuleContext {
	public RELAY_THREAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_THREAD_SYMBOL, 0); }
	public SQL_THREAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_THREAD_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_slaveThreadOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSlaveThreadOption) {
			listener.enterSlaveThreadOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSlaveThreadOption) {
			listener.exitSlaveThreadOption(this);
		}
	}
}


export class GroupReplicationContext extends ParserRuleContext {
	public GROUP_REPLICATION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
	public START_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
	public STOP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_groupReplication; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGroupReplication) {
			listener.enterGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGroupReplication) {
			listener.exitGroupReplication(this);
		}
	}
}


export class PreparedStatementContext extends ParserRuleContext {
	public _type: Token;
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public PREPARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public userVariable(): UserVariableContext | undefined {
		return this.tryGetRuleContext(0, UserVariableContext);
	}
	public executeStatement(): ExecuteStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecuteStatementContext);
	}
	public DEALLOCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEALLOCATE_SYMBOL, 0); }
	public DROP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_preparedStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPreparedStatement) {
			listener.enterPreparedStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPreparedStatement) {
			listener.exitPreparedStatement(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	public EXECUTE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public executeVarList(): ExecuteVarListContext | undefined {
		return this.tryGetRuleContext(0, ExecuteVarListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_executeStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExecuteStatement) {
			listener.enterExecuteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExecuteStatement) {
			listener.exitExecuteStatement(this);
		}
	}
}


export class ExecuteVarListContext extends ParserRuleContext {
	public userVariable(): UserVariableContext[];
	public userVariable(i: number): UserVariableContext;
	public userVariable(i?: number): UserVariableContext | UserVariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserVariableContext);
		} else {
			return this.getRuleContext(i, UserVariableContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_executeVarList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExecuteVarList) {
			listener.enterExecuteVarList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExecuteVarList) {
			listener.exitExecuteVarList(this);
		}
	}
}


export class CloneStatementContext extends ParserRuleContext {
	public CLONE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLONE_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public REMOTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REMOTE_SYMBOL, 0); }
	public INSTANCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public COLON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLON_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public REPLICATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
	public dataDirSSL(): DataDirSSLContext | undefined {
		return this.tryGetRuleContext(0, DataDirSSLContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_cloneStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCloneStatement) {
			listener.enterCloneStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCloneStatement) {
			listener.exitCloneStatement(this);
		}
	}
}


export class DataDirSSLContext extends ParserRuleContext {
	public ssl(): SslContext | undefined {
		return this.tryGetRuleContext(0, SslContext);
	}
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dataDirSSL; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDataDirSSL) {
			listener.enterDataDirSSL(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDataDirSSL) {
			listener.exitDataDirSSL(this);
		}
	}
}


export class SslContext extends ParserRuleContext {
	public REQUIRE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REQUIRE_SYMBOL, 0); }
	public SSL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SSL_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ssl; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSsl) {
			listener.enterSsl(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSsl) {
			listener.exitSsl(this);
		}
	}
}


export class AccountManagementStatementContext extends ParserRuleContext {
	public alterUser(): AlterUserContext | undefined {
		return this.tryGetRuleContext(0, AlterUserContext);
	}
	public createUser(): CreateUserContext | undefined {
		return this.tryGetRuleContext(0, CreateUserContext);
	}
	public dropUser(): DropUserContext | undefined {
		return this.tryGetRuleContext(0, DropUserContext);
	}
	public grant(): GrantContext | undefined {
		return this.tryGetRuleContext(0, GrantContext);
	}
	public renameUser(): RenameUserContext | undefined {
		return this.tryGetRuleContext(0, RenameUserContext);
	}
	public revoke(): RevokeContext | undefined {
		return this.tryGetRuleContext(0, RevokeContext);
	}
	public setRole(): SetRoleContext | undefined {
		return this.tryGetRuleContext(0, SetRoleContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_accountManagementStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAccountManagementStatement) {
			listener.enterAccountManagementStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAccountManagementStatement) {
			listener.exitAccountManagementStatement(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	public ALTER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public alterUserTail(): AlterUserTailContext {
		return this.getRuleContext(0, AlterUserTailContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterUser; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterUser) {
			listener.enterAlterUser(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterUser) {
			listener.exitAlterUser(this);
		}
	}
}


export class AlterUserTailContext extends ParserRuleContext {
	public createUserTail(): CreateUserTailContext | undefined {
		return this.tryGetRuleContext(0, CreateUserTailContext);
	}
	public createUserList(): CreateUserListContext | undefined {
		return this.tryGetRuleContext(0, CreateUserListContext);
	}
	public alterUserList(): AlterUserListContext | undefined {
		return this.tryGetRuleContext(0, AlterUserListContext);
	}
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public replacePassword(): ReplacePasswordContext | undefined {
		return this.tryGetRuleContext(0, ReplacePasswordContext);
	}
	public retainCurrentPassword(): RetainCurrentPasswordContext | undefined {
		return this.tryGetRuleContext(0, RetainCurrentPasswordContext);
	}
	public discardOldPassword(): DiscardOldPasswordContext | undefined {
		return this.tryGetRuleContext(0, DiscardOldPasswordContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public NONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	public RANDOM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RANDOM_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterUserTail; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterUserTail) {
			listener.enterAlterUserTail(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterUserTail) {
			listener.exitAlterUserTail(this);
		}
	}
}


export class UserFunctionContext extends ParserRuleContext {
	public USER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public parentheses(): ParenthesesContext {
		return this.getRuleContext(0, ParenthesesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_userFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUserFunction) {
			listener.enterUserFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUserFunction) {
			listener.exitUserFunction(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	public CREATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public createUserList(): CreateUserListContext {
		return this.getRuleContext(0, CreateUserListContext);
	}
	public defaultRoleClause(): DefaultRoleClauseContext {
		return this.getRuleContext(0, DefaultRoleClauseContext);
	}
	public createUserTail(): CreateUserTailContext {
		return this.getRuleContext(0, CreateUserTailContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createUser; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateUser) {
			listener.enterCreateUser(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateUser) {
			listener.exitCreateUser(this);
		}
	}
}


export class CreateUserTailContext extends ParserRuleContext {
	public requireClause(): RequireClauseContext | undefined {
		return this.tryGetRuleContext(0, RequireClauseContext);
	}
	public connectOptions(): ConnectOptionsContext | undefined {
		return this.tryGetRuleContext(0, ConnectOptionsContext);
	}
	public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext[];
	public accountLockPasswordExpireOptions(i: number): AccountLockPasswordExpireOptionsContext;
	public accountLockPasswordExpireOptions(i?: number): AccountLockPasswordExpireOptionsContext | AccountLockPasswordExpireOptionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AccountLockPasswordExpireOptionsContext);
		} else {
			return this.getRuleContext(i, AccountLockPasswordExpireOptionsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createUserTail; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateUserTail) {
			listener.enterCreateUserTail(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateUserTail) {
			listener.exitCreateUserTail(this);
		}
	}
}


export class DefaultRoleClauseContext extends ParserRuleContext {
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_defaultRoleClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDefaultRoleClause) {
			listener.enterDefaultRoleClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDefaultRoleClause) {
			listener.exitDefaultRoleClause(this);
		}
	}
}


export class RequireClauseContext extends ParserRuleContext {
	public _option: Token;
	public REQUIRE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REQUIRE_SYMBOL, 0); }
	public requireList(): RequireListContext | undefined {
		return this.tryGetRuleContext(0, RequireListContext);
	}
	public SSL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SSL_SYMBOL, 0); }
	public X509_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.X509_SYMBOL, 0); }
	public NONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_requireClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRequireClause) {
			listener.enterRequireClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRequireClause) {
			listener.exitRequireClause(this);
		}
	}
}


export class ConnectOptionsContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode[];
	public MAX_QUERIES_PER_HOUR_SYMBOL(i: number): TerminalNode;
	public MAX_QUERIES_PER_HOUR_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
	}
	public ulong_number(): Ulong_numberContext[];
	public ulong_number(i: number): Ulong_numberContext;
	public ulong_number(i?: number): Ulong_numberContext | Ulong_numberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ulong_numberContext);
		} else {
			return this.getRuleContext(i, Ulong_numberContext);
		}
	}
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode[];
	public MAX_UPDATES_PER_HOUR_SYMBOL(i: number): TerminalNode;
	public MAX_UPDATES_PER_HOUR_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
	}
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode[];
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i: number): TerminalNode;
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
	}
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode[];
	public MAX_USER_CONNECTIONS_SYMBOL(i: number): TerminalNode;
	public MAX_USER_CONNECTIONS_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_connectOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterConnectOptions) {
			listener.enterConnectOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitConnectOptions) {
			listener.exitConnectOptions(this);
		}
	}
}


export class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
	public ACCOUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACCOUNT_SYMBOL, 0); }
	public LOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	public UNLOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNLOCK_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public EXPIRE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPIRE_SYMBOL, 0); }
	public HISTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HISTORY_SYMBOL, 0); }
	public REUSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REUSE_SYMBOL, 0); }
	public INTERVAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
	public REQUIRE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REQUIRE_SYMBOL, 0); }
	public CURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public DAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
	public NEVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEVER_SYMBOL, 0); }
	public OPTIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIONAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_accountLockPasswordExpireOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAccountLockPasswordExpireOptions) {
			listener.enterAccountLockPasswordExpireOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAccountLockPasswordExpireOptions) {
			listener.exitAccountLockPasswordExpireOptions(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	public DROP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public userList(): UserListContext {
		return this.getRuleContext(0, UserListContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropUser; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropUser) {
			listener.enterDropUser(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropUser) {
			listener.exitDropUser(this);
		}
	}
}


export class GrantContext extends ParserRuleContext {
	public GRANT_SYMBOL(): TerminalNode[];
	public GRANT_SYMBOL(i: number): TerminalNode;
	public GRANT_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.GRANT_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.GRANT_SYMBOL, i);
		}
	}
	public roleOrPrivilegesList(): RoleOrPrivilegesListContext | undefined {
		return this.tryGetRuleContext(0, RoleOrPrivilegesListContext);
	}
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public userList(): UserListContext | undefined {
		return this.tryGetRuleContext(0, UserListContext);
	}
	public ON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public grantIdentifier(): GrantIdentifierContext | undefined {
		return this.tryGetRuleContext(0, GrantIdentifierContext);
	}
	public grantTargetList(): GrantTargetListContext | undefined {
		return this.tryGetRuleContext(0, GrantTargetListContext);
	}
	public PROXY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public ADMIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADMIN_SYMBOL, 0); }
	public OPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
	public aclType(): AclTypeContext | undefined {
		return this.tryGetRuleContext(0, AclTypeContext);
	}
	public versionedRequireClause(): VersionedRequireClauseContext | undefined {
		return this.tryGetRuleContext(0, VersionedRequireClauseContext);
	}
	public grantOptions(): GrantOptionsContext | undefined {
		return this.tryGetRuleContext(0, GrantOptionsContext);
	}
	public grantAs(): GrantAsContext | undefined {
		return this.tryGetRuleContext(0, GrantAsContext);
	}
	public PRIVILEGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_grant; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGrant) {
			listener.enterGrant(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGrant) {
			listener.exitGrant(this);
		}
	}
}


export class GrantTargetListContext extends ParserRuleContext {
	public createUserList(): CreateUserListContext | undefined {
		return this.tryGetRuleContext(0, CreateUserListContext);
	}
	public userList(): UserListContext | undefined {
		return this.tryGetRuleContext(0, UserListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_grantTargetList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGrantTargetList) {
			listener.enterGrantTargetList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGrantTargetList) {
			listener.exitGrantTargetList(this);
		}
	}
}


export class GrantOptionsContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public grantOption(): GrantOptionContext[];
	public grantOption(i: number): GrantOptionContext;
	public grantOption(i?: number): GrantOptionContext | GrantOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GrantOptionContext);
		} else {
			return this.getRuleContext(i, GrantOptionContext);
		}
	}
	public GRANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
	public OPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_grantOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGrantOptions) {
			listener.enterGrantOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGrantOptions) {
			listener.exitGrantOptions(this);
		}
	}
}


export class ExceptRoleListContext extends ParserRuleContext {
	public EXCEPT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EXCEPT_SYMBOL, 0); }
	public roleList(): RoleListContext {
		return this.getRuleContext(0, RoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_exceptRoleList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExceptRoleList) {
			listener.enterExceptRoleList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExceptRoleList) {
			listener.exitExceptRoleList(this);
		}
	}
}


export class WithRolesContext extends ParserRuleContext {
	public WITH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public NONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public exceptRoleList(): ExceptRoleListContext | undefined {
		return this.tryGetRuleContext(0, ExceptRoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_withRoles; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWithRoles) {
			listener.enterWithRoles(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWithRoles) {
			listener.exitWithRoles(this);
		}
	}
}


export class GrantAsContext extends ParserRuleContext {
	public AS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public withRoles(): WithRolesContext | undefined {
		return this.tryGetRuleContext(0, WithRolesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_grantAs; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGrantAs) {
			listener.enterGrantAs(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGrantAs) {
			listener.exitGrantAs(this);
		}
	}
}


export class VersionedRequireClauseContext extends ParserRuleContext {
	public requireClause(): RequireClauseContext {
		return this.getRuleContext(0, RequireClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_versionedRequireClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterVersionedRequireClause) {
			listener.enterVersionedRequireClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitVersionedRequireClause) {
			listener.exitVersionedRequireClause(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	public RENAME_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public user(): UserContext[];
	public user(i: number): UserContext;
	public user(i?: number): UserContext | UserContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserContext);
		} else {
			return this.getRuleContext(i, UserContext);
		}
	}
	public TO_SYMBOL(): TerminalNode[];
	public TO_SYMBOL(i: number): TerminalNode;
	public TO_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.TO_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.TO_SYMBOL, i);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_renameUser; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRenameUser) {
			listener.enterRenameUser(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRenameUser) {
			listener.exitRenameUser(this);
		}
	}
}


export class RevokeContext extends ParserRuleContext {
	public REVOKE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REVOKE_SYMBOL, 0); }
	public roleOrPrivilegesList(): RoleOrPrivilegesListContext | undefined {
		return this.tryGetRuleContext(0, RoleOrPrivilegesListContext);
	}
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public userList(): UserListContext | undefined {
		return this.tryGetRuleContext(0, UserListContext);
	}
	public onTypeTo(): OnTypeToContext | undefined {
		return this.tryGetRuleContext(0, OnTypeToContext);
	}
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public PROXY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
	public ON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public grantIdentifier(): GrantIdentifierContext | undefined {
		return this.tryGetRuleContext(0, GrantIdentifierContext);
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public GRANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
	public OPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
	public PRIVILEGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
	public aclType(): AclTypeContext | undefined {
		return this.tryGetRuleContext(0, AclTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_revoke; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRevoke) {
			listener.enterRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRevoke) {
			listener.exitRevoke(this);
		}
	}
}


export class OnTypeToContext extends ParserRuleContext {
	public ON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public grantIdentifier(): GrantIdentifierContext | undefined {
		return this.tryGetRuleContext(0, GrantIdentifierContext);
	}
	public aclType(): AclTypeContext | undefined {
		return this.tryGetRuleContext(0, AclTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_onTypeTo; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOnTypeTo) {
			listener.enterOnTypeTo(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOnTypeTo) {
			listener.exitOnTypeTo(this);
		}
	}
}


export class AclTypeContext extends ParserRuleContext {
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public FUNCTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public PROCEDURE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_aclType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAclType) {
			listener.enterAclType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAclType) {
			listener.exitAclType(this);
		}
	}
}


export class RoleOrPrivilegesListContext extends ParserRuleContext {
	public roleOrPrivilege(): RoleOrPrivilegeContext[];
	public roleOrPrivilege(i: number): RoleOrPrivilegeContext;
	public roleOrPrivilege(i?: number): RoleOrPrivilegeContext | RoleOrPrivilegeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleOrPrivilegeContext);
		} else {
			return this.getRuleContext(i, RoleOrPrivilegeContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleOrPrivilegesList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleOrPrivilegesList) {
			listener.enterRoleOrPrivilegesList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleOrPrivilegesList) {
			listener.exitRoleOrPrivilegesList(this);
		}
	}
}


export class RoleOrPrivilegeContext extends ParserRuleContext {
	public _object: Token;
	public roleIdentifierOrText(): RoleIdentifierOrTextContext | undefined {
		return this.tryGetRuleContext(0, RoleIdentifierOrTextContext);
	}
	public AT_TEXT_SUFFIX(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
	public AT_SIGN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public columnInternalRefList(): ColumnInternalRefListContext | undefined {
		return this.tryGetRuleContext(0, ColumnInternalRefListContext);
	}
	public SELECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SELECT_SYMBOL, 0); }
	public INSERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
	public UPDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public REFERENCES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REFERENCES_SYMBOL, 0); }
	public DELETE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
	public USAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USAGE_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public DROP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public EXECUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
	public RELOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELOAD_SYMBOL, 0); }
	public SHUTDOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
	public PROCESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCESS_SYMBOL, 0); }
	public FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILE_SYMBOL, 0); }
	public PROXY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
	public SUPER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
	public EVENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public TRIGGER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
	public GRANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
	public OPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
	public SHOW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHOW_SYMBOL, 0); }
	public DATABASES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATABASES_SYMBOL, 0); }
	public CREATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
	public TEMPORARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public ROUTINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROUTINE_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public VIEW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public LOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	public REPLICATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
	public CLIENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLIENT_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	public ALTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleOrPrivilege; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleOrPrivilege) {
			listener.enterRoleOrPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleOrPrivilege) {
			listener.exitRoleOrPrivilege(this);
		}
	}
}


export class GrantIdentifierContext extends ParserRuleContext {
	public MULT_OPERATOR(): TerminalNode[];
	public MULT_OPERATOR(i: number): TerminalNode;
	public MULT_OPERATOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.MULT_OPERATOR);
		} else {
			return this.getToken(MultiQueryMySQLParser.MULT_OPERATOR, i);
		}
	}
	public DOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
	public schemaRef(): SchemaRefContext | undefined {
		return this.tryGetRuleContext(0, SchemaRefContext);
	}
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_grantIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGrantIdentifier) {
			listener.enterGrantIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGrantIdentifier) {
			listener.exitGrantIdentifier(this);
		}
	}
}


export class RequireListContext extends ParserRuleContext {
	public requireListElement(): RequireListElementContext[];
	public requireListElement(i: number): RequireListElementContext;
	public requireListElement(i?: number): RequireListElementContext | RequireListElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RequireListElementContext);
		} else {
			return this.getRuleContext(i, RequireListElementContext);
		}
	}
	public AND_SYMBOL(): TerminalNode[];
	public AND_SYMBOL(i: number): TerminalNode;
	public AND_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.AND_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.AND_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_requireList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRequireList) {
			listener.enterRequireList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRequireList) {
			listener.exitRequireList(this);
		}
	}
}


export class RequireListElementContext extends ParserRuleContext {
	public _element: Token;
	public textString(): TextStringContext {
		return this.getRuleContext(0, TextStringContext);
	}
	public CIPHER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CIPHER_SYMBOL, 0); }
	public ISSUER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ISSUER_SYMBOL, 0); }
	public SUBJECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBJECT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_requireListElement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRequireListElement) {
			listener.enterRequireListElement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRequireListElement) {
			listener.exitRequireListElement(this);
		}
	}
}


export class GrantOptionContext extends ParserRuleContext {
	public _option: Token;
	public OPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
	public GRANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_grantOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGrantOption) {
			listener.enterGrantOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGrantOption) {
			listener.exitGrantOption(this);
		}
	}
}


export class SetRoleContext extends ParserRuleContext {
	public SET_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public roleList(): RoleListContext[];
	public roleList(i: number): RoleListContext;
	public roleList(i?: number): RoleListContext | RoleListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleListContext);
		} else {
			return this.getRuleContext(i, RoleListContext);
		}
	}
	public NONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public EXCEPT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXCEPT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_setRole; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSetRole) {
			listener.enterSetRole(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSetRole) {
			listener.exitSetRole(this);
		}
	}
}


export class RoleListContext extends ParserRuleContext {
	public role(): RoleContext[];
	public role(i: number): RoleContext;
	public role(i?: number): RoleContext | RoleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleContext);
		} else {
			return this.getRuleContext(i, RoleContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleList) {
			listener.enterRoleList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleList) {
			listener.exitRoleList(this);
		}
	}
}


export class RoleContext extends ParserRuleContext {
	public roleIdentifierOrText(): RoleIdentifierOrTextContext {
		return this.getRuleContext(0, RoleIdentifierOrTextContext);
	}
	public AT_SIGN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public AT_TEXT_SUFFIX(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_role; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRole) {
			listener.enterRole(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRole) {
			listener.exitRole(this);
		}
	}
}


export class TableAdministrationStatementContext extends ParserRuleContext {
	public _type: Token;
	public TABLE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public tableRefList(): TableRefListContext {
		return this.getRuleContext(0, TableRefListContext);
	}
	public ANALYZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANALYZE_SYMBOL, 0); }
	public noWriteToBinLog(): NoWriteToBinLogContext | undefined {
		return this.tryGetRuleContext(0, NoWriteToBinLogContext);
	}
	public histogram(): HistogramContext | undefined {
		return this.tryGetRuleContext(0, HistogramContext);
	}
	public CHECK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
	public checkOption(): CheckOptionContext[];
	public checkOption(i: number): CheckOptionContext;
	public checkOption(i?: number): CheckOptionContext | CheckOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CheckOptionContext);
		} else {
			return this.getRuleContext(i, CheckOptionContext);
		}
	}
	public CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
	public QUICK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public OPTIMIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIMIZE_SYMBOL, 0); }
	public REPAIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
	public repairType(): RepairTypeContext[];
	public repairType(i: number): RepairTypeContext;
	public repairType(i?: number): RepairTypeContext | RepairTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RepairTypeContext);
		} else {
			return this.getRuleContext(i, RepairTypeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableAdministrationStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableAdministrationStatement) {
			listener.enterTableAdministrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableAdministrationStatement) {
			listener.exitTableAdministrationStatement(this);
		}
	}
}


export class HistogramContext extends ParserRuleContext {
	public UPDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public HISTOGRAM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.HISTOGRAM_SYMBOL, 0); }
	public ON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public BUCKETS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BUCKETS_SYMBOL, 0); }
	public DROP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_histogram; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHistogram) {
			listener.enterHistogram(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHistogram) {
			listener.exitHistogram(this);
		}
	}
}


export class CheckOptionContext extends ParserRuleContext {
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public UPGRADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
	public QUICK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
	public FAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FAST_SYMBOL, 0); }
	public MEDIUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEDIUM_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public CHANGED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANGED_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_checkOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCheckOption) {
			listener.enterCheckOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCheckOption) {
			listener.exitCheckOption(this);
		}
	}
}


export class RepairTypeContext extends ParserRuleContext {
	public QUICK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public USE_FRM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USE_FRM_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_repairType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRepairType) {
			listener.enterRepairType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRepairType) {
			listener.exitRepairType(this);
		}
	}
}


export class InstallUninstallStatmentContext extends ParserRuleContext {
	public _action: Token;
	public _type: Token;
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public SONAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public INSTALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTALL_SYMBOL, 0); }
	public PLUGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGIN_SYMBOL, 0); }
	public textStringLiteralList(): TextStringLiteralListContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralListContext);
	}
	public COMPONENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPONENT_SYMBOL, 0); }
	public pluginRef(): PluginRefContext | undefined {
		return this.tryGetRuleContext(0, PluginRefContext);
	}
	public UNINSTALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNINSTALL_SYMBOL, 0); }
	public componentRef(): ComponentRefContext[];
	public componentRef(i: number): ComponentRefContext;
	public componentRef(i?: number): ComponentRefContext | ComponentRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ComponentRefContext);
		} else {
			return this.getRuleContext(i, ComponentRefContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_installUninstallStatment; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInstallUninstallStatment) {
			listener.enterInstallUninstallStatment(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInstallUninstallStatment) {
			listener.exitInstallUninstallStatment(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	public SET_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public startOptionValueList(): StartOptionValueListContext {
		return this.getRuleContext(0, StartOptionValueListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_setStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSetStatement) {
			listener.enterSetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSetStatement) {
			listener.exitSetStatement(this);
		}
	}
}


export class StartOptionValueListContext extends ParserRuleContext {
	public optionValueNoOptionType(): OptionValueNoOptionTypeContext | undefined {
		return this.tryGetRuleContext(0, OptionValueNoOptionTypeContext);
	}
	public optionValueListContinued(): OptionValueListContinuedContext | undefined {
		return this.tryGetRuleContext(0, OptionValueListContinuedContext);
	}
	public TRANSACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
	public transactionCharacteristics(): TransactionCharacteristicsContext | undefined {
		return this.tryGetRuleContext(0, TransactionCharacteristicsContext);
	}
	public optionType(): OptionTypeContext | undefined {
		return this.tryGetRuleContext(0, OptionTypeContext);
	}
	public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext | undefined {
		return this.tryGetRuleContext(0, StartOptionValueListFollowingOptionTypeContext);
	}
	public PASSWORD_SYMBOL(): TerminalNode[];
	public PASSWORD_SYMBOL(i: number): TerminalNode;
	public PASSWORD_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.PASSWORD_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, i);
		}
	}
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public OLD_PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public replacePassword(): ReplacePasswordContext | undefined {
		return this.tryGetRuleContext(0, ReplacePasswordContext);
	}
	public retainCurrentPassword(): RetainCurrentPasswordContext | undefined {
		return this.tryGetRuleContext(0, RetainCurrentPasswordContext);
	}
	public TO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
	public RANDOM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RANDOM_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_startOptionValueList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStartOptionValueList) {
			listener.enterStartOptionValueList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStartOptionValueList) {
			listener.exitStartOptionValueList(this);
		}
	}
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
	public transactionAccessMode(): TransactionAccessModeContext | undefined {
		return this.tryGetRuleContext(0, TransactionAccessModeContext);
	}
	public isolationLevel(): IsolationLevelContext | undefined {
		return this.tryGetRuleContext(0, IsolationLevelContext);
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_transactionCharacteristics; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTransactionCharacteristics) {
			listener.enterTransactionCharacteristics(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTransactionCharacteristics) {
			listener.exitTransactionCharacteristics(this);
		}
	}
}


export class TransactionAccessModeContext extends ParserRuleContext {
	public READ_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WRITE_SYMBOL, 0); }
	public ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_transactionAccessMode; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTransactionAccessMode) {
			listener.enterTransactionAccessMode(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTransactionAccessMode) {
			listener.exitTransactionAccessMode(this);
		}
	}
}


export class IsolationLevelContext extends ParserRuleContext {
	public ISOLATION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ISOLATION_SYMBOL, 0); }
	public LEVEL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
	public REPEATABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPEATABLE_SYMBOL, 0); }
	public READ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public SERIALIZABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL, 0); }
	public COMMITTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMITTED_SYMBOL, 0); }
	public UNCOMMITTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNCOMMITTED_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_isolationLevel; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIsolationLevel) {
			listener.enterIsolationLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIsolationLevel) {
			listener.exitIsolationLevel(this);
		}
	}
}


export class OptionValueListContinuedContext extends ParserRuleContext {
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public optionValue(): OptionValueContext[];
	public optionValue(i: number): OptionValueContext;
	public optionValue(i?: number): OptionValueContext | OptionValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OptionValueContext);
		} else {
			return this.getRuleContext(i, OptionValueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_optionValueListContinued; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOptionValueListContinued) {
			listener.enterOptionValueListContinued(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOptionValueListContinued) {
			listener.exitOptionValueListContinued(this);
		}
	}
}


export class OptionValueNoOptionTypeContext extends ParserRuleContext {
	public internalVariableName(): InternalVariableNameContext | undefined {
		return this.tryGetRuleContext(0, InternalVariableNameContext);
	}
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public setExprOrDefault(): SetExprOrDefaultContext | undefined {
		return this.tryGetRuleContext(0, SetExprOrDefaultContext);
	}
	public charsetClause(): CharsetClauseContext | undefined {
		return this.tryGetRuleContext(0, CharsetClauseContext);
	}
	public userVariable(): UserVariableContext | undefined {
		return this.tryGetRuleContext(0, UserVariableContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public setSystemVariable(): SetSystemVariableContext | undefined {
		return this.tryGetRuleContext(0, SetSystemVariableContext);
	}
	public NAMES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAMES_SYMBOL, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_optionValueNoOptionType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOptionValueNoOptionType) {
			listener.enterOptionValueNoOptionType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOptionValueNoOptionType) {
			listener.exitOptionValueNoOptionType(this);
		}
	}
}


export class OptionValueContext extends ParserRuleContext {
	public optionType(): OptionTypeContext | undefined {
		return this.tryGetRuleContext(0, OptionTypeContext);
	}
	public internalVariableName(): InternalVariableNameContext | undefined {
		return this.tryGetRuleContext(0, InternalVariableNameContext);
	}
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public setExprOrDefault(): SetExprOrDefaultContext | undefined {
		return this.tryGetRuleContext(0, SetExprOrDefaultContext);
	}
	public optionValueNoOptionType(): OptionValueNoOptionTypeContext | undefined {
		return this.tryGetRuleContext(0, OptionValueNoOptionTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_optionValue; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOptionValue) {
			listener.enterOptionValue(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOptionValue) {
			listener.exitOptionValue(this);
		}
	}
}


export class SetSystemVariableContext extends ParserRuleContext {
	public AT_AT_SIGN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL, 0); }
	public internalVariableName(): InternalVariableNameContext {
		return this.getRuleContext(0, InternalVariableNameContext);
	}
	public setVarIdentType(): SetVarIdentTypeContext | undefined {
		return this.tryGetRuleContext(0, SetVarIdentTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_setSystemVariable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSetSystemVariable) {
			listener.enterSetSystemVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSetSystemVariable) {
			listener.exitSetSystemVariable(this);
		}
	}
}


export class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
	public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext | undefined {
		return this.tryGetRuleContext(0, OptionValueFollowingOptionTypeContext);
	}
	public optionValueListContinued(): OptionValueListContinuedContext | undefined {
		return this.tryGetRuleContext(0, OptionValueListContinuedContext);
	}
	public TRANSACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
	public transactionCharacteristics(): TransactionCharacteristicsContext | undefined {
		return this.tryGetRuleContext(0, TransactionCharacteristicsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_startOptionValueListFollowingOptionType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStartOptionValueListFollowingOptionType) {
			listener.enterStartOptionValueListFollowingOptionType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStartOptionValueListFollowingOptionType) {
			listener.exitStartOptionValueListFollowingOptionType(this);
		}
	}
}


export class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
	public internalVariableName(): InternalVariableNameContext {
		return this.getRuleContext(0, InternalVariableNameContext);
	}
	public equal(): EqualContext {
		return this.getRuleContext(0, EqualContext);
	}
	public setExprOrDefault(): SetExprOrDefaultContext {
		return this.getRuleContext(0, SetExprOrDefaultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_optionValueFollowingOptionType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOptionValueFollowingOptionType) {
			listener.enterOptionValueFollowingOptionType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOptionValueFollowingOptionType) {
			listener.exitOptionValueFollowingOptionType(this);
		}
	}
}


export class SetExprOrDefaultContext extends ParserRuleContext {
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public ON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public ROW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
	public SYSTEM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_setExprOrDefault; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSetExprOrDefault) {
			listener.enterSetExprOrDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSetExprOrDefault) {
			listener.exitSetExprOrDefault(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	public _value: Token;
	public _object: Token;
	public SHOW_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SHOW_SYMBOL, 0); }
	public STATUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	public EVENTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENTS_SYMBOL, 0); }
	public fromOrIn(): FromOrInContext | undefined {
		return this.tryGetRuleContext(0, FromOrInContext);
	}
	public COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COUNT_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public MULT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public charset(): CharsetContext | undefined {
		return this.tryGetRuleContext(0, CharsetContext);
	}
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public userList(): UserListContext | undefined {
		return this.tryGetRuleContext(0, UserListContext);
	}
	public CODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CODE_SYMBOL, 0); }
	public procedureRef(): ProcedureRefContext | undefined {
		return this.tryGetRuleContext(0, ProcedureRefContext);
	}
	public functionRef(): FunctionRefContext | undefined {
		return this.tryGetRuleContext(0, FunctionRefContext);
	}
	public AUTHORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTHORS_SYMBOL, 0); }
	public DATABASES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATABASES_SYMBOL, 0); }
	public TRIGGERS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRIGGERS_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public OPEN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
	public PLUGINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGINS_SYMBOL, 0); }
	public ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public MUTEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MUTEX_SYMBOL, 0); }
	public LOGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
	public COLUMNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public MASTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	public ENGINES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINES_SYMBOL, 0); }
	public WARNINGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WARNINGS_SYMBOL, 0); }
	public ERRORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERRORS_SYMBOL, 0); }
	public PROFILES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROFILES_SYMBOL, 0); }
	public PROFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROFILE_SYMBOL, 0); }
	public PROCESSLIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCESSLIST_SYMBOL, 0); }
	public COLLATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
	public CONTRIBUTORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTRIBUTORS_SYMBOL, 0); }
	public PRIVILEGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
	public GRANTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANTS_SYMBOL, 0); }
	public CREATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
	public PROCEDURE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
	public FUNCTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public engineRef(): EngineRefContext | undefined {
		return this.tryGetRuleContext(0, EngineRefContext);
	}
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public HOSTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
	public nonBlocking(): NonBlockingContext | undefined {
		return this.tryGetRuleContext(0, NonBlockingContext);
	}
	public BINLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
	public RELAYLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAYLOG_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public INDEXES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEXES_SYMBOL, 0); }
	public KEYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEYS_SYMBOL, 0); }
	public VARIABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARIABLES_SYMBOL, 0); }
	public schemaRef(): SchemaRefContext | undefined {
		return this.tryGetRuleContext(0, SchemaRefContext);
	}
	public eventRef(): EventRefContext | undefined {
		return this.tryGetRuleContext(0, EventRefContext);
	}
	public triggerRef(): TriggerRefContext | undefined {
		return this.tryGetRuleContext(0, TriggerRefContext);
	}
	public viewRef(): ViewRefContext | undefined {
		return this.tryGetRuleContext(0, ViewRefContext);
	}
	public likeOrWhere(): LikeOrWhereContext | undefined {
		return this.tryGetRuleContext(0, LikeOrWhereContext);
	}
	public showCommandType(): ShowCommandTypeContext | undefined {
		return this.tryGetRuleContext(0, ShowCommandTypeContext);
	}
	public inDb(): InDbContext | undefined {
		return this.tryGetRuleContext(0, InDbContext);
	}
	public FULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public ulonglong_number(): Ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulonglong_numberContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public channel(): ChannelContext | undefined {
		return this.tryGetRuleContext(0, ChannelContext);
	}
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public profileType(): ProfileTypeContext[];
	public profileType(i: number): ProfileTypeContext;
	public profileType(i?: number): ProfileTypeContext | ProfileTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProfileTypeContext);
		} else {
			return this.getRuleContext(i, ProfileTypeContext);
		}
	}
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public optionType(): OptionTypeContext | undefined {
		return this.tryGetRuleContext(0, OptionTypeContext);
	}
	public DATABASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
	public EVENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public TRIGGER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
	public VIEW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_showStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterShowStatement) {
			listener.enterShowStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitShowStatement) {
			listener.exitShowStatement(this);
		}
	}
}


export class ShowCommandTypeContext extends ParserRuleContext {
	public FULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_showCommandType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterShowCommandType) {
			listener.enterShowCommandType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitShowCommandType) {
			listener.exitShowCommandType(this);
		}
	}
}


export class NonBlockingContext extends ParserRuleContext {
	public NONBLOCKING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONBLOCKING_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_nonBlocking; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNonBlocking) {
			listener.enterNonBlocking(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNonBlocking) {
			listener.exitNonBlocking(this);
		}
	}
}


export class FromOrInContext extends ParserRuleContext {
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fromOrIn; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFromOrIn) {
			listener.enterFromOrIn(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFromOrIn) {
			listener.exitFromOrIn(this);
		}
	}
}


export class InDbContext extends ParserRuleContext {
	public fromOrIn(): FromOrInContext {
		return this.getRuleContext(0, FromOrInContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_inDb; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInDb) {
			listener.enterInDb(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInDb) {
			listener.exitInDb(this);
		}
	}
}


export class ProfileTypeContext extends ParserRuleContext {
	public BLOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BLOCK_SYMBOL, 0); }
	public IO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IO_SYMBOL, 0); }
	public CONTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTEXT_SYMBOL, 0); }
	public SWITCHES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SWITCHES_SYMBOL, 0); }
	public PAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PAGE_SYMBOL, 0); }
	public FAULTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FAULTS_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public CPU_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CPU_SYMBOL, 0); }
	public IPC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IPC_SYMBOL, 0); }
	public MEMORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
	public SOURCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOURCE_SYMBOL, 0); }
	public SWAPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SWAPS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_profileType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterProfileType) {
			listener.enterProfileType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitProfileType) {
			listener.exitProfileType(this);
		}
	}
}


export class OtherAdministrativeStatementContext extends ParserRuleContext {
	public _type: Token;
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public BINLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public keyCacheListOrParts(): KeyCacheListOrPartsContext | undefined {
		return this.tryGetRuleContext(0, KeyCacheListOrPartsContext);
	}
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public FLUSH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLUSH_SYMBOL, 0); }
	public flushTables(): FlushTablesContext | undefined {
		return this.tryGetRuleContext(0, FlushTablesContext);
	}
	public flushOption(): FlushOptionContext[];
	public flushOption(i: number): FlushOptionContext;
	public flushOption(i?: number): FlushOptionContext | FlushOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FlushOptionContext);
		} else {
			return this.getRuleContext(i, FlushOptionContext);
		}
	}
	public noWriteToBinLog(): NoWriteToBinLogContext | undefined {
		return this.tryGetRuleContext(0, NoWriteToBinLogContext);
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public KILL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KILL_SYMBOL, 0); }
	public CONNECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public INTO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public preloadTail(): PreloadTailContext | undefined {
		return this.tryGetRuleContext(0, PreloadTailContext);
	}
	public LOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOAD_SYMBOL, 0); }
	public SHUTDOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_otherAdministrativeStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOtherAdministrativeStatement) {
			listener.enterOtherAdministrativeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOtherAdministrativeStatement) {
			listener.exitOtherAdministrativeStatement(this);
		}
	}
}


export class KeyCacheListOrPartsContext extends ParserRuleContext {
	public keyCacheList(): KeyCacheListContext | undefined {
		return this.tryGetRuleContext(0, KeyCacheListContext);
	}
	public assignToKeycachePartition(): AssignToKeycachePartitionContext | undefined {
		return this.tryGetRuleContext(0, AssignToKeycachePartitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyCacheListOrParts; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyCacheListOrParts) {
			listener.enterKeyCacheListOrParts(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyCacheListOrParts) {
			listener.exitKeyCacheListOrParts(this);
		}
	}
}


export class KeyCacheListContext extends ParserRuleContext {
	public assignToKeycache(): AssignToKeycacheContext[];
	public assignToKeycache(i: number): AssignToKeycacheContext;
	public assignToKeycache(i?: number): AssignToKeycacheContext | AssignToKeycacheContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignToKeycacheContext);
		} else {
			return this.getRuleContext(i, AssignToKeycacheContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyCacheList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyCacheList) {
			listener.enterKeyCacheList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyCacheList) {
			listener.exitKeyCacheList(this);
		}
	}
}


export class AssignToKeycacheContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public cacheKeyList(): CacheKeyListContext | undefined {
		return this.tryGetRuleContext(0, CacheKeyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_assignToKeycache; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAssignToKeycache) {
			listener.enterAssignToKeycache(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAssignToKeycache) {
			listener.exitAssignToKeycache(this);
		}
	}
}


export class AssignToKeycachePartitionContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		return this.getRuleContext(0, AllOrPartitionNameListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public cacheKeyList(): CacheKeyListContext | undefined {
		return this.tryGetRuleContext(0, CacheKeyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_assignToKeycachePartition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAssignToKeycachePartition) {
			listener.enterAssignToKeycachePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAssignToKeycachePartition) {
			listener.exitAssignToKeycachePartition(this);
		}
	}
}


export class CacheKeyListContext extends ParserRuleContext {
	public keyOrIndex(): KeyOrIndexContext {
		return this.getRuleContext(0, KeyOrIndexContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public keyUsageList(): KeyUsageListContext | undefined {
		return this.tryGetRuleContext(0, KeyUsageListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_cacheKeyList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCacheKeyList) {
			listener.enterCacheKeyList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCacheKeyList) {
			listener.exitCacheKeyList(this);
		}
	}
}


export class KeyUsageElementContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyUsageElement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyUsageElement) {
			listener.enterKeyUsageElement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyUsageElement) {
			listener.exitKeyUsageElement(this);
		}
	}
}


export class KeyUsageListContext extends ParserRuleContext {
	public keyUsageElement(): KeyUsageElementContext[];
	public keyUsageElement(i: number): KeyUsageElementContext;
	public keyUsageElement(i?: number): KeyUsageElementContext | KeyUsageElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyUsageElementContext);
		} else {
			return this.getRuleContext(i, KeyUsageElementContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyUsageList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyUsageList) {
			listener.enterKeyUsageList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyUsageList) {
			listener.exitKeyUsageList(this);
		}
	}
}


export class FlushOptionContext extends ParserRuleContext {
	public _option: Token;
	public DES_KEY_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DES_KEY_FILE_SYMBOL, 0); }
	public HOSTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
	public PRIVILEGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
	public STATUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
	public USER_RESOURCES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_RESOURCES_SYMBOL, 0); }
	public LOGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
	public logType(): LogTypeContext | undefined {
		return this.tryGetRuleContext(0, LogTypeContext);
	}
	public RELAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_SYMBOL, 0); }
	public channel(): ChannelContext | undefined {
		return this.tryGetRuleContext(0, ChannelContext);
	}
	public CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public OPTIMIZER_COSTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_flushOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFlushOption) {
			listener.enterFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFlushOption) {
			listener.exitFlushOption(this);
		}
	}
}


export class LogTypeContext extends ParserRuleContext {
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public ERROR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
	public GENERAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GENERAL_SYMBOL, 0); }
	public SLOW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLOW_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_logType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLogType) {
			listener.enterLogType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLogType) {
			listener.exitLogType(this);
		}
	}
}


export class FlushTablesContext extends ParserRuleContext {
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public READ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public LOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public flushTablesOptions(): FlushTablesOptionsContext | undefined {
		return this.tryGetRuleContext(0, FlushTablesOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_flushTables; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFlushTables) {
			listener.enterFlushTables(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFlushTables) {
			listener.exitFlushTables(this);
		}
	}
}


export class FlushTablesOptionsContext extends ParserRuleContext {
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public EXPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPORT_SYMBOL, 0); }
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public READ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
	public LOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_flushTablesOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFlushTablesOptions) {
			listener.enterFlushTablesOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFlushTablesOptions) {
			listener.exitFlushTablesOptions(this);
		}
	}
}


export class PreloadTailContext extends ParserRuleContext {
	public tableRef(): TableRefContext | undefined {
		return this.tryGetRuleContext(0, TableRefContext);
	}
	public adminPartition(): AdminPartitionContext | undefined {
		return this.tryGetRuleContext(0, AdminPartitionContext);
	}
	public cacheKeyList(): CacheKeyListContext | undefined {
		return this.tryGetRuleContext(0, CacheKeyListContext);
	}
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	public LEAVES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
	public preloadList(): PreloadListContext | undefined {
		return this.tryGetRuleContext(0, PreloadListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_preloadTail; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPreloadTail) {
			listener.enterPreloadTail(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPreloadTail) {
			listener.exitPreloadTail(this);
		}
	}
}


export class PreloadListContext extends ParserRuleContext {
	public preloadKeys(): PreloadKeysContext[];
	public preloadKeys(i: number): PreloadKeysContext;
	public preloadKeys(i?: number): PreloadKeysContext | PreloadKeysContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PreloadKeysContext);
		} else {
			return this.getRuleContext(i, PreloadKeysContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_preloadList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPreloadList) {
			listener.enterPreloadList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPreloadList) {
			listener.exitPreloadList(this);
		}
	}
}


export class PreloadKeysContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public cacheKeyList(): CacheKeyListContext | undefined {
		return this.tryGetRuleContext(0, CacheKeyListContext);
	}
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	public LEAVES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_preloadKeys; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPreloadKeys) {
			listener.enterPreloadKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPreloadKeys) {
			listener.exitPreloadKeys(this);
		}
	}
}


export class AdminPartitionContext extends ParserRuleContext {
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		return this.getRuleContext(0, AllOrPartitionNameListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_adminPartition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAdminPartition) {
			listener.enterAdminPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAdminPartition) {
			listener.exitAdminPartition(this);
		}
	}
}


export class ResourceGroupManagementContext extends ParserRuleContext {
	public createResourceGroup(): CreateResourceGroupContext | undefined {
		return this.tryGetRuleContext(0, CreateResourceGroupContext);
	}
	public alterResourceGroup(): AlterResourceGroupContext | undefined {
		return this.tryGetRuleContext(0, AlterResourceGroupContext);
	}
	public setResourceGroup(): SetResourceGroupContext | undefined {
		return this.tryGetRuleContext(0, SetResourceGroupContext);
	}
	public dropResourceGroup(): DropResourceGroupContext | undefined {
		return this.tryGetRuleContext(0, DropResourceGroupContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resourceGroupManagement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResourceGroupManagement) {
			listener.enterResourceGroupManagement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResourceGroupManagement) {
			listener.exitResourceGroupManagement(this);
		}
	}
}


export class CreateResourceGroupContext extends ParserRuleContext {
	public CREATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
	public RESOURCE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public TYPE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public SYSTEM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public resourceGroupVcpuList(): ResourceGroupVcpuListContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupVcpuListContext);
	}
	public resourceGroupPriority(): ResourceGroupPriorityContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupPriorityContext);
	}
	public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupEnableDisableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createResourceGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateResourceGroup) {
			listener.enterCreateResourceGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateResourceGroup) {
			listener.exitCreateResourceGroup(this);
		}
	}
}


export class ResourceGroupVcpuListContext extends ParserRuleContext {
	public VCPU_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.VCPU_SYMBOL, 0); }
	public vcpuNumOrRange(): VcpuNumOrRangeContext[];
	public vcpuNumOrRange(i: number): VcpuNumOrRangeContext;
	public vcpuNumOrRange(i?: number): VcpuNumOrRangeContext | VcpuNumOrRangeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VcpuNumOrRangeContext);
		} else {
			return this.getRuleContext(i, VcpuNumOrRangeContext);
		}
	}
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resourceGroupVcpuList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResourceGroupVcpuList) {
			listener.enterResourceGroupVcpuList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResourceGroupVcpuList) {
			listener.exitResourceGroupVcpuList(this);
		}
	}
}


export class VcpuNumOrRangeContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode[];
	public INT_NUMBER(i: number): TerminalNode;
	public INT_NUMBER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.INT_NUMBER);
		} else {
			return this.getToken(MultiQueryMySQLParser.INT_NUMBER, i);
		}
	}
	public MINUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_vcpuNumOrRange; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterVcpuNumOrRange) {
			listener.enterVcpuNumOrRange(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitVcpuNumOrRange) {
			listener.exitVcpuNumOrRange(this);
		}
	}
}


export class ResourceGroupPriorityContext extends ParserRuleContext {
	public THREAD_PRIORITY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resourceGroupPriority; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResourceGroupPriority) {
			listener.enterResourceGroupPriority(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResourceGroupPriority) {
			listener.exitResourceGroupPriority(this);
		}
	}
}


export class ResourceGroupEnableDisableContext extends ParserRuleContext {
	public ENABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
	public DISABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resourceGroupEnableDisable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResourceGroupEnableDisable) {
			listener.enterResourceGroupEnableDisable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResourceGroupEnableDisable) {
			listener.exitResourceGroupEnableDisable(this);
		}
	}
}


export class AlterResourceGroupContext extends ParserRuleContext {
	public ALTER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
	public RESOURCE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public resourceGroupRef(): ResourceGroupRefContext {
		return this.getRuleContext(0, ResourceGroupRefContext);
	}
	public resourceGroupVcpuList(): ResourceGroupVcpuListContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupVcpuListContext);
	}
	public resourceGroupPriority(): ResourceGroupPriorityContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupPriorityContext);
	}
	public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | undefined {
		return this.tryGetRuleContext(0, ResourceGroupEnableDisableContext);
	}
	public FORCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterResourceGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterResourceGroup) {
			listener.enterAlterResourceGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterResourceGroup) {
			listener.exitAlterResourceGroup(this);
		}
	}
}


export class SetResourceGroupContext extends ParserRuleContext {
	public SET_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public RESOURCE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public threadIdList(): ThreadIdListContext | undefined {
		return this.tryGetRuleContext(0, ThreadIdListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_setResourceGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSetResourceGroup) {
			listener.enterSetResourceGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSetResourceGroup) {
			listener.exitSetResourceGroup(this);
		}
	}
}


export class ThreadIdListContext extends ParserRuleContext {
	public real_ulong_number(): Real_ulong_numberContext[];
	public real_ulong_number(i: number): Real_ulong_numberContext;
	public real_ulong_number(i?: number): Real_ulong_numberContext | Real_ulong_numberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Real_ulong_numberContext);
		} else {
			return this.getRuleContext(i, Real_ulong_numberContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_threadIdList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterThreadIdList) {
			listener.enterThreadIdList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitThreadIdList) {
			listener.exitThreadIdList(this);
		}
	}
}


export class DropResourceGroupContext extends ParserRuleContext {
	public DROP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
	public RESOURCE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
	public GROUP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
	public resourceGroupRef(): ResourceGroupRefContext {
		return this.getRuleContext(0, ResourceGroupRefContext);
	}
	public FORCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dropResourceGroup; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDropResourceGroup) {
			listener.enterDropResourceGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDropResourceGroup) {
			listener.exitDropResourceGroup(this);
		}
	}
}


export class UtilityStatementContext extends ParserRuleContext {
	public describeCommand(): DescribeCommandContext | undefined {
		return this.tryGetRuleContext(0, DescribeCommandContext);
	}
	public explainCommand(): ExplainCommandContext | undefined {
		return this.tryGetRuleContext(0, ExplainCommandContext);
	}
	public helpCommand(): HelpCommandContext | undefined {
		return this.tryGetRuleContext(0, HelpCommandContext);
	}
	public useCommand(): UseCommandContext | undefined {
		return this.tryGetRuleContext(0, UseCommandContext);
	}
	public restartServer(): RestartServerContext | undefined {
		return this.tryGetRuleContext(0, RestartServerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_utilityStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUtilityStatement) {
			listener.enterUtilityStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUtilityStatement) {
			listener.exitUtilityStatement(this);
		}
	}
}


export class DescribeCommandContext extends ParserRuleContext {
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public EXPLAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPLAIN_SYMBOL, 0); }
	public DESCRIBE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESCRIBE_SYMBOL, 0); }
	public DESC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public columnRef(): ColumnRefContext | undefined {
		return this.tryGetRuleContext(0, ColumnRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_describeCommand; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDescribeCommand) {
			listener.enterDescribeCommand(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDescribeCommand) {
			listener.exitDescribeCommand(this);
		}
	}
}


export class ExplainCommandContext extends ParserRuleContext {
	public explainableStatement(): ExplainableStatementContext {
		return this.getRuleContext(0, ExplainableStatementContext);
	}
	public EXPLAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPLAIN_SYMBOL, 0); }
	public DESCRIBE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESCRIBE_SYMBOL, 0); }
	public DESC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public PARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
	public FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public ANALYZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANALYZE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_explainCommand; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExplainCommand) {
			listener.enterExplainCommand(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExplainCommand) {
			listener.exitExplainCommand(this);
		}
	}
}


export class ExplainableStatementContext extends ParserRuleContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public CONNECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_explainableStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExplainableStatement) {
			listener.enterExplainableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExplainableStatement) {
			listener.exitExplainableStatement(this);
		}
	}
}


export class HelpCommandContext extends ParserRuleContext {
	public HELP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.HELP_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_helpCommand; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHelpCommand) {
			listener.enterHelpCommand(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHelpCommand) {
			listener.exitHelpCommand(this);
		}
	}
}


export class UseCommandContext extends ParserRuleContext {
	public USE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USE_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_useCommand; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUseCommand) {
			listener.enterUseCommand(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUseCommand) {
			listener.exitUseCommand(this);
		}
	}
}


export class RestartServerContext extends ParserRuleContext {
	public RESTART_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RESTART_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_restartServer; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRestartServer) {
			listener.enterRestartServer(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRestartServer) {
			listener.exitRestartServer(this);
		}
	}
}


export class ExprContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_expr; }
	public copyFrom(ctx: ExprContext): void {
		super.copyFrom(ctx);
	}
}
export class ExprIsContext extends ExprContext {
	public _type: Token;
	public boolPri(): BoolPriContext {
		return this.getRuleContext(0, BoolPriContext);
	}
	public IS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IS_SYMBOL, 0); }
	public TRUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRUE_SYMBOL, 0); }
	public FALSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FALSE_SYMBOL, 0); }
	public UNKNOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNKNOWN_SYMBOL, 0); }
	public notRule(): NotRuleContext | undefined {
		return this.tryGetRuleContext(0, NotRuleContext);
	}
	constructor(ctx: ExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprIs) {
			listener.enterExprIs(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprIs) {
			listener.exitExprIs(this);
		}
	}
}
export class ExprNotContext extends ExprContext {
	public NOT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(ctx: ExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprNot) {
			listener.enterExprNot(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprNot) {
			listener.exitExprNot(this);
		}
	}
}
export class ExprAndContext extends ExprContext {
	public _op: Token;
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public AND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
	public LOGICAL_AND_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGICAL_AND_OPERATOR, 0); }
	constructor(ctx: ExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprAnd) {
			listener.enterExprAnd(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprAnd) {
			listener.exitExprAnd(this);
		}
	}
}
export class ExprXorContext extends ExprContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public XOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.XOR_SYMBOL, 0); }
	constructor(ctx: ExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprXor) {
			listener.enterExprXor(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprXor) {
			listener.exitExprXor(this);
		}
	}
}
export class ExprOrContext extends ExprContext {
	public _op: Token;
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public OR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OR_SYMBOL, 0); }
	public LOGICAL_OR_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGICAL_OR_OPERATOR, 0); }
	constructor(ctx: ExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprOr) {
			listener.enterExprOr(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprOr) {
			listener.exitExprOr(this);
		}
	}
}


export class BoolPriContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_boolPri; }
	public copyFrom(ctx: BoolPriContext): void {
		super.copyFrom(ctx);
	}
}
export class PrimaryExprPredicateContext extends BoolPriContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: BoolPriContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPrimaryExprPredicate) {
			listener.enterPrimaryExprPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPrimaryExprPredicate) {
			listener.exitPrimaryExprPredicate(this);
		}
	}
}
export class PrimaryExprIsNullContext extends BoolPriContext {
	public boolPri(): BoolPriContext {
		return this.getRuleContext(0, BoolPriContext);
	}
	public IS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.IS_SYMBOL, 0); }
	public NULL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	public notRule(): NotRuleContext | undefined {
		return this.tryGetRuleContext(0, NotRuleContext);
	}
	constructor(ctx: BoolPriContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPrimaryExprIsNull) {
			listener.enterPrimaryExprIsNull(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPrimaryExprIsNull) {
			listener.exitPrimaryExprIsNull(this);
		}
	}
}
export class PrimaryExprCompareContext extends BoolPriContext {
	public boolPri(): BoolPriContext {
		return this.getRuleContext(0, BoolPriContext);
	}
	public compOp(): CompOpContext {
		return this.getRuleContext(0, CompOpContext);
	}
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: BoolPriContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPrimaryExprCompare) {
			listener.enterPrimaryExprCompare(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPrimaryExprCompare) {
			listener.exitPrimaryExprCompare(this);
		}
	}
}
export class PrimaryExprAllAnyContext extends BoolPriContext {
	public boolPri(): BoolPriContext {
		return this.getRuleContext(0, BoolPriContext);
	}
	public compOp(): CompOpContext {
		return this.getRuleContext(0, CompOpContext);
	}
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public ANY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANY_SYMBOL, 0); }
	constructor(ctx: BoolPriContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPrimaryExprAllAny) {
			listener.enterPrimaryExprAllAny(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPrimaryExprAllAny) {
			listener.exitPrimaryExprAllAny(this);
		}
	}
}


export class CompOpContext extends ParserRuleContext {
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public NULL_SAFE_EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
	public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
	public GREATER_THAN_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GREATER_THAN_OPERATOR, 0); }
	public LESS_OR_EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
	public LESS_THAN_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_THAN_OPERATOR, 0); }
	public NOT_EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_compOp; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCompOp) {
			listener.enterCompOp(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCompOp) {
			listener.exitCompOp(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	public bitExpr(): BitExprContext[];
	public bitExpr(i: number): BitExprContext;
	public bitExpr(i?: number): BitExprContext | BitExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitExprContext);
		} else {
			return this.getRuleContext(i, BitExprContext);
		}
	}
	public predicateOperations(): PredicateOperationsContext | undefined {
		return this.tryGetRuleContext(0, PredicateOperationsContext);
	}
	public MEMBER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEMBER_SYMBOL, 0); }
	public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, SimpleExprWithParenthesesContext);
	}
	public SOUNDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOUNDS_SYMBOL, 0); }
	public LIKE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
	public notRule(): NotRuleContext | undefined {
		return this.tryGetRuleContext(0, NotRuleContext);
	}
	public OF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OF_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_predicate; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPredicate) {
			listener.enterPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPredicate) {
			listener.exitPredicate(this);
		}
	}
}


export class PredicateOperationsContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_predicateOperations; }
	public copyFrom(ctx: PredicateOperationsContext): void {
		super.copyFrom(ctx);
	}
}
export class PredicateExprInContext extends PredicateOperationsContext {
	public IN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public subquery(): SubqueryContext | undefined {
		return this.tryGetRuleContext(0, SubqueryContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPredicateExprIn) {
			listener.enterPredicateExprIn(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPredicateExprIn) {
			listener.exitPredicateExprIn(this);
		}
	}
}
export class PredicateExprBetweenContext extends PredicateOperationsContext {
	public BETWEEN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BETWEEN_SYMBOL, 0); }
	public bitExpr(): BitExprContext {
		return this.getRuleContext(0, BitExprContext);
	}
	public AND_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPredicateExprBetween) {
			listener.enterPredicateExprBetween(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPredicateExprBetween) {
			listener.exitPredicateExprBetween(this);
		}
	}
}
export class PredicateExprLikeContext extends PredicateOperationsContext {
	public LIKE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
	public simpleExpr(): SimpleExprContext[];
	public simpleExpr(i: number): SimpleExprContext;
	public simpleExpr(i?: number): SimpleExprContext | SimpleExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SimpleExprContext);
		} else {
			return this.getRuleContext(i, SimpleExprContext);
		}
	}
	public ESCAPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ESCAPE_SYMBOL, 0); }
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPredicateExprLike) {
			listener.enterPredicateExprLike(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPredicateExprLike) {
			listener.exitPredicateExprLike(this);
		}
	}
}
export class PredicateExprRegexContext extends PredicateOperationsContext {
	public REGEXP_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REGEXP_SYMBOL, 0); }
	public bitExpr(): BitExprContext {
		return this.getRuleContext(0, BitExprContext);
	}
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPredicateExprRegex) {
			listener.enterPredicateExprRegex(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPredicateExprRegex) {
			listener.exitPredicateExprRegex(this);
		}
	}
}


export class BitExprContext extends ParserRuleContext {
	public _op: Token;
	public simpleExpr(): SimpleExprContext | undefined {
		return this.tryGetRuleContext(0, SimpleExprContext);
	}
	public bitExpr(): BitExprContext[];
	public bitExpr(i: number): BitExprContext;
	public bitExpr(i?: number): BitExprContext | BitExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitExprContext);
		} else {
			return this.getRuleContext(i, BitExprContext);
		}
	}
	public BITWISE_XOR_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BITWISE_XOR_OPERATOR, 0); }
	public MULT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
	public DIV_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIV_OPERATOR, 0); }
	public MOD_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MOD_OPERATOR, 0); }
	public DIV_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIV_SYMBOL, 0); }
	public MOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MOD_SYMBOL, 0); }
	public PLUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
	public MINUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
	public INTERVAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public SHIFT_LEFT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHIFT_LEFT_OPERATOR, 0); }
	public SHIFT_RIGHT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
	public BITWISE_AND_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BITWISE_AND_OPERATOR, 0); }
	public BITWISE_OR_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BITWISE_OR_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_bitExpr; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterBitExpr) {
			listener.enterBitExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitBitExpr) {
			listener.exitBitExpr(this);
		}
	}
}


export class SimpleExprContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_simpleExpr; }
	public copyFrom(ctx: SimpleExprContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleExprVariableContext extends SimpleExprContext {
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprVariable) {
			listener.enterSimpleExprVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprVariable) {
			listener.exitSimpleExprVariable(this);
		}
	}
}
export class SimpleExprColumnRefContext extends SimpleExprContext {
	public columnRef(): ColumnRefContext {
		return this.getRuleContext(0, ColumnRefContext);
	}
	public jsonOperator(): JsonOperatorContext | undefined {
		return this.tryGetRuleContext(0, JsonOperatorContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprColumnRef) {
			listener.enterSimpleExprColumnRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprColumnRef) {
			listener.exitSimpleExprColumnRef(this);
		}
	}
}
export class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
	public runtimeFunctionCall(): RuntimeFunctionCallContext {
		return this.getRuleContext(0, RuntimeFunctionCallContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprRuntimeFunction) {
			listener.enterSimpleExprRuntimeFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprRuntimeFunction) {
			listener.exitSimpleExprRuntimeFunction(this);
		}
	}
}
export class SimpleExprFunctionContext extends SimpleExprContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprFunction) {
			listener.enterSimpleExprFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprFunction) {
			listener.exitSimpleExprFunction(this);
		}
	}
}
export class SimpleExprCollateContext extends SimpleExprContext {
	public simpleExpr(): SimpleExprContext {
		return this.getRuleContext(0, SimpleExprContext);
	}
	public COLLATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COLLATE_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprCollate) {
			listener.enterSimpleExprCollate(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprCollate) {
			listener.exitSimpleExprCollate(this);
		}
	}
}
export class SimpleExprLiteralContext extends SimpleExprContext {
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprLiteral) {
			listener.enterSimpleExprLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprLiteral) {
			listener.exitSimpleExprLiteral(this);
		}
	}
}
export class SimpleExprParamMarkerContext extends SimpleExprContext {
	public PARAM_MARKER(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprParamMarker) {
			listener.enterSimpleExprParamMarker(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprParamMarker) {
			listener.exitSimpleExprParamMarker(this);
		}
	}
}
export class SimpleExprSumContext extends SimpleExprContext {
	public sumExpr(): SumExprContext {
		return this.getRuleContext(0, SumExprContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprSum) {
			listener.enterSimpleExprSum(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprSum) {
			listener.exitSimpleExprSum(this);
		}
	}
}
export class SimpleExprGroupingOperationContext extends SimpleExprContext {
	public groupingOperation(): GroupingOperationContext {
		return this.getRuleContext(0, GroupingOperationContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprGroupingOperation) {
			listener.enterSimpleExprGroupingOperation(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprGroupingOperation) {
			listener.exitSimpleExprGroupingOperation(this);
		}
	}
}
export class SimpleExprWindowingFunctionContext extends SimpleExprContext {
	public windowFunctionCall(): WindowFunctionCallContext {
		return this.getRuleContext(0, WindowFunctionCallContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprWindowingFunction) {
			listener.enterSimpleExprWindowingFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprWindowingFunction) {
			listener.exitSimpleExprWindowingFunction(this);
		}
	}
}
export class SimpleExprConcatContext extends SimpleExprContext {
	public simpleExpr(): SimpleExprContext[];
	public simpleExpr(i: number): SimpleExprContext;
	public simpleExpr(i?: number): SimpleExprContext | SimpleExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SimpleExprContext);
		} else {
			return this.getRuleContext(i, SimpleExprContext);
		}
	}
	public CONCAT_PIPES_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CONCAT_PIPES_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprConcat) {
			listener.enterSimpleExprConcat(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprConcat) {
			listener.exitSimpleExprConcat(this);
		}
	}
}
export class SimpleExprUnaryContext extends SimpleExprContext {
	public _op: Token;
	public simpleExpr(): SimpleExprContext {
		return this.getRuleContext(0, SimpleExprContext);
	}
	public PLUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
	public MINUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
	public BITWISE_NOT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BITWISE_NOT_OPERATOR, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprUnary) {
			listener.enterSimpleExprUnary(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprUnary) {
			listener.exitSimpleExprUnary(this);
		}
	}
}
export class SimpleExprNotContext extends SimpleExprContext {
	public not2Rule(): Not2RuleContext {
		return this.getRuleContext(0, Not2RuleContext);
	}
	public simpleExpr(): SimpleExprContext {
		return this.getRuleContext(0, SimpleExprContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprNot) {
			listener.enterSimpleExprNot(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprNot) {
			listener.exitSimpleExprNot(this);
		}
	}
}
export class SimpleExprListContext extends SimpleExprContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public exprList(): ExprListContext {
		return this.getRuleContext(0, ExprListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public ROW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprList) {
			listener.enterSimpleExprList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprList) {
			listener.exitSimpleExprList(this);
		}
	}
}
export class SimpleExprSubQueryContext extends SimpleExprContext {
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	public EXISTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprSubQuery) {
			listener.enterSimpleExprSubQuery(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprSubQuery) {
			listener.exitSimpleExprSubQuery(this);
		}
	}
}
export class SimpleExprOdbcContext extends SimpleExprContext {
	public OPEN_CURLY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_CURLY_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public CLOSE_CURLY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_CURLY_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprOdbc) {
			listener.enterSimpleExprOdbc(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprOdbc) {
			listener.exitSimpleExprOdbc(this);
		}
	}
}
export class SimpleExprMatchContext extends SimpleExprContext {
	public MATCH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.MATCH_SYMBOL, 0); }
	public identListArg(): IdentListArgContext {
		return this.getRuleContext(0, IdentListArgContext);
	}
	public AGAINST_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AGAINST_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public bitExpr(): BitExprContext {
		return this.getRuleContext(0, BitExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public fulltextOptions(): FulltextOptionsContext | undefined {
		return this.tryGetRuleContext(0, FulltextOptionsContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprMatch) {
			listener.enterSimpleExprMatch(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprMatch) {
			listener.exitSimpleExprMatch(this);
		}
	}
}
export class SimpleExprBinaryContext extends SimpleExprContext {
	public BINARY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public simpleExpr(): SimpleExprContext {
		return this.getRuleContext(0, SimpleExprContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprBinary) {
			listener.enterSimpleExprBinary(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprBinary) {
			listener.exitSimpleExprBinary(this);
		}
	}
}
export class SimpleExprCastContext extends SimpleExprContext {
	public CAST_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CAST_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public AS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public castType(): CastTypeContext {
		return this.getRuleContext(0, CastTypeContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public arrayCast(): ArrayCastContext | undefined {
		return this.tryGetRuleContext(0, ArrayCastContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprCast) {
			listener.enterSimpleExprCast(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprCast) {
			listener.exitSimpleExprCast(this);
		}
	}
}
export class SimpleExprCaseContext extends SimpleExprContext {
	public CASE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CASE_SYMBOL, 0); }
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public whenExpression(): WhenExpressionContext[];
	public whenExpression(i: number): WhenExpressionContext;
	public whenExpression(i?: number): WhenExpressionContext | WhenExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenExpressionContext);
		} else {
			return this.getRuleContext(i, WhenExpressionContext);
		}
	}
	public thenExpression(): ThenExpressionContext[];
	public thenExpression(i: number): ThenExpressionContext;
	public thenExpression(i?: number): ThenExpressionContext | ThenExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThenExpressionContext);
		} else {
			return this.getRuleContext(i, ThenExpressionContext);
		}
	}
	public elseExpression(): ElseExpressionContext | undefined {
		return this.tryGetRuleContext(0, ElseExpressionContext);
	}
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprCase) {
			listener.enterSimpleExprCase(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprCase) {
			listener.exitSimpleExprCase(this);
		}
	}
}
export class SimpleExprConvertContext extends SimpleExprContext {
	public CONVERT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public COMMA_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public castType(): CastTypeContext {
		return this.getRuleContext(0, CastTypeContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprConvert) {
			listener.enterSimpleExprConvert(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprConvert) {
			listener.exitSimpleExprConvert(this);
		}
	}
}
export class SimpleExprConvertUsingContext extends SimpleExprContext {
	public CONVERT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public USING_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprConvertUsing) {
			listener.enterSimpleExprConvertUsing(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprConvertUsing) {
			listener.exitSimpleExprConvertUsing(this);
		}
	}
}
export class SimpleExprDefaultContext extends SimpleExprContext {
	public DEFAULT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public simpleIdentifier(): SimpleIdentifierContext {
		return this.getRuleContext(0, SimpleIdentifierContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprDefault) {
			listener.enterSimpleExprDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprDefault) {
			listener.exitSimpleExprDefault(this);
		}
	}
}
export class SimpleExprValuesContext extends SimpleExprContext {
	public VALUES_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public simpleIdentifier(): SimpleIdentifierContext {
		return this.getRuleContext(0, SimpleIdentifierContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprValues) {
			listener.enterSimpleExprValues(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprValues) {
			listener.exitSimpleExprValues(this);
		}
	}
}
export class SimpleExprIntervalContext extends SimpleExprContext {
	public INTERVAL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public interval(): IntervalContext {
		return this.getRuleContext(0, IntervalContext);
	}
	public PLUS_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
	constructor(ctx: SimpleExprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprInterval) {
			listener.enterSimpleExprInterval(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprInterval) {
			listener.exitSimpleExprInterval(this);
		}
	}
}


export class ArrayCastContext extends ParserRuleContext {
	public ARRAY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ARRAY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_arrayCast; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterArrayCast) {
			listener.enterArrayCast(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitArrayCast) {
			listener.exitArrayCast(this);
		}
	}
}


export class JsonOperatorContext extends ParserRuleContext {
	public JSON_SEPARATOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	public JSON_UNQUOTED_SEPARATOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_jsonOperator; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterJsonOperator) {
			listener.enterJsonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitJsonOperator) {
			listener.exitJsonOperator(this);
		}
	}
}


export class SumExprContext extends ParserRuleContext {
	public _name: Token;
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public inSumExpr(): InSumExprContext | undefined {
		return this.tryGetRuleContext(0, InSumExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public AVG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AVG_SYMBOL, 0); }
	public DISTINCT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISTINCT_SYMBOL, 0); }
	public windowingClause(): WindowingClauseContext | undefined {
		return this.tryGetRuleContext(0, WindowingClauseContext);
	}
	public BIT_AND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIT_AND_SYMBOL, 0); }
	public BIT_OR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIT_OR_SYMBOL, 0); }
	public BIT_XOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIT_XOR_SYMBOL, 0); }
	public jsonFunction(): JsonFunctionContext | undefined {
		return this.tryGetRuleContext(0, JsonFunctionContext);
	}
	public MULT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
	public COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COUNT_SYMBOL, 0); }
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	public MIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIN_SYMBOL, 0); }
	public MAX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_SYMBOL, 0); }
	public STD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STD_SYMBOL, 0); }
	public VARIANCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARIANCE_SYMBOL, 0); }
	public STDDEV_SAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STDDEV_SAMP_SYMBOL, 0); }
	public VAR_SAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VAR_SAMP_SYMBOL, 0); }
	public SUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUM_SYMBOL, 0); }
	public GROUP_CONCAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUP_CONCAT_SYMBOL, 0); }
	public orderClause(): OrderClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderClauseContext);
	}
	public SEPARATOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SEPARATOR_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_sumExpr; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSumExpr) {
			listener.enterSumExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSumExpr) {
			listener.exitSumExpr(this);
		}
	}
}


export class GroupingOperationContext extends ParserRuleContext {
	public GROUPING_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GROUPING_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public exprList(): ExprListContext {
		return this.getRuleContext(0, ExprListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_groupingOperation; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGroupingOperation) {
			listener.enterGroupingOperation(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGroupingOperation) {
			listener.exitGroupingOperation(this);
		}
	}
}


export class WindowFunctionCallContext extends ParserRuleContext {
	public parentheses(): ParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ParenthesesContext);
	}
	public windowingClause(): WindowingClauseContext {
		return this.getRuleContext(0, WindowingClauseContext);
	}
	public ROW_NUMBER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_NUMBER_SYMBOL, 0); }
	public RANK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RANK_SYMBOL, 0); }
	public DENSE_RANK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DENSE_RANK_SYMBOL, 0); }
	public CUME_DIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CUME_DIST_SYMBOL, 0); }
	public PERCENT_RANK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERCENT_RANK_SYMBOL, 0); }
	public NTILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NTILE_SYMBOL, 0); }
	public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, SimpleExprWithParenthesesContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public LEAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEAD_SYMBOL, 0); }
	public LAG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAG_SYMBOL, 0); }
	public leadLagInfo(): LeadLagInfoContext | undefined {
		return this.tryGetRuleContext(0, LeadLagInfoContext);
	}
	public nullTreatment(): NullTreatmentContext | undefined {
		return this.tryGetRuleContext(0, NullTreatmentContext);
	}
	public exprWithParentheses(): ExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprWithParenthesesContext);
	}
	public FIRST_VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_VALUE_SYMBOL, 0); }
	public LAST_VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAST_VALUE_SYMBOL, 0); }
	public NTH_VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NTH_VALUE_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public simpleExpr(): SimpleExprContext | undefined {
		return this.tryGetRuleContext(0, SimpleExprContext);
	}
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public FIRST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
	public LAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowFunctionCall; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowFunctionCall) {
			listener.enterWindowFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowFunctionCall) {
			listener.exitWindowFunctionCall(this);
		}
	}
}


export class WindowingClauseContext extends ParserRuleContext {
	public OVER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OVER_SYMBOL, 0); }
	public windowName(): WindowNameContext | undefined {
		return this.tryGetRuleContext(0, WindowNameContext);
	}
	public windowSpec(): WindowSpecContext | undefined {
		return this.tryGetRuleContext(0, WindowSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowingClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowingClause) {
			listener.enterWindowingClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowingClause) {
			listener.exitWindowingClause(this);
		}
	}
}


export class LeadLagInfoContext extends ParserRuleContext {
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public ulonglong_number(): Ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulonglong_numberContext);
	}
	public PARAM_MARKER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_leadLagInfo; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLeadLagInfo) {
			listener.enterLeadLagInfo(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLeadLagInfo) {
			listener.exitLeadLagInfo(this);
		}
	}
}


export class NullTreatmentContext extends ParserRuleContext {
	public NULLS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.NULLS_SYMBOL, 0); }
	public RESPECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESPECT_SYMBOL, 0); }
	public IGNORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_nullTreatment; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNullTreatment) {
			listener.enterNullTreatment(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNullTreatment) {
			listener.exitNullTreatment(this);
		}
	}
}


export class JsonFunctionContext extends ParserRuleContext {
	public JSON_ARRAYAGG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public inSumExpr(): InSumExprContext[];
	public inSumExpr(i: number): InSumExprContext;
	public inSumExpr(i?: number): InSumExprContext | InSumExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InSumExprContext);
		} else {
			return this.getRuleContext(i, InSumExprContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public windowingClause(): WindowingClauseContext | undefined {
		return this.tryGetRuleContext(0, WindowingClauseContext);
	}
	public JSON_OBJECTAGG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_jsonFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterJsonFunction) {
			listener.enterJsonFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitJsonFunction) {
			listener.exitJsonFunction(this);
		}
	}
}


export class InSumExprContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public ALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_inSumExpr; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInSumExpr) {
			listener.enterInSumExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInSumExpr) {
			listener.exitInSumExpr(this);
		}
	}
}


export class IdentListArgContext extends ParserRuleContext {
	public identList(): IdentListContext {
		return this.getRuleContext(0, IdentListContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identListArg; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentListArg) {
			listener.enterIdentListArg(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentListArg) {
			listener.exitIdentListArg(this);
		}
	}
}


export class IdentListContext extends ParserRuleContext {
	public simpleIdentifier(): SimpleIdentifierContext[];
	public simpleIdentifier(i: number): SimpleIdentifierContext;
	public simpleIdentifier(i?: number): SimpleIdentifierContext | SimpleIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SimpleIdentifierContext);
		} else {
			return this.getRuleContext(i, SimpleIdentifierContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentList) {
			listener.enterIdentList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentList) {
			listener.exitIdentList(this);
		}
	}
}


export class FulltextOptionsContext extends ParserRuleContext {
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public BOOLEAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
	public MODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
	public NATURAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NATURAL_SYMBOL, 0); }
	public LANGUAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public EXPANSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPANSION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fulltextOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFulltextOptions) {
			listener.enterFulltextOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFulltextOptions) {
			listener.exitFulltextOptions(this);
		}
	}
}


export class RuntimeFunctionCallContext extends ParserRuleContext {
	public _name: Token;
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public CHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CURRENT_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_USER_SYMBOL, 0); }
	public parentheses(): ParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ParenthesesContext);
	}
	public exprWithParentheses(): ExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprWithParenthesesContext);
	}
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public DAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
	public HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public INSERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
	public INTERVAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
	public LEFT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEFT_SYMBOL, 0); }
	public MINUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
	public MONTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
	public RIGHT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RIGHT_SYMBOL, 0); }
	public SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
	public trimFunction(): TrimFunctionContext | undefined {
		return this.tryGetRuleContext(0, TrimFunctionContext);
	}
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public VALUES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
	public YEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
	public ADDDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADDDATE_SYMBOL, 0); }
	public SUBDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBDATE_SYMBOL, 0); }
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public CURDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURDATE_SYMBOL, 0); }
	public CURTIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURTIME_SYMBOL, 0); }
	public timeFunctionParameters(): TimeFunctionParametersContext | undefined {
		return this.tryGetRuleContext(0, TimeFunctionParametersContext);
	}
	public DATE_ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_ADD_SYMBOL, 0); }
	public DATE_SUB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SUB_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public EXTRACT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTRACT_SYMBOL, 0); }
	public dateTimeTtype(): DateTimeTtypeContext | undefined {
		return this.tryGetRuleContext(0, DateTimeTtypeContext);
	}
	public GET_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GET_FORMAT_SYMBOL, 0); }
	public NOW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOW_SYMBOL, 0); }
	public bitExpr(): BitExprContext | undefined {
		return this.tryGetRuleContext(0, BitExprContext);
	}
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public POSITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POSITION_SYMBOL, 0); }
	public substringFunction(): SubstringFunctionContext | undefined {
		return this.tryGetRuleContext(0, SubstringFunctionContext);
	}
	public SYSDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SYSDATE_SYMBOL, 0); }
	public intervalTimeStamp(): IntervalTimeStampContext | undefined {
		return this.tryGetRuleContext(0, IntervalTimeStampContext);
	}
	public TIMESTAMP_ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
	public TIMESTAMP_DIFF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
	public UTC_DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UTC_DATE_SYMBOL, 0); }
	public UTC_TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UTC_TIME_SYMBOL, 0); }
	public UTC_TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
	public ASCII_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
	public CHARSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
	public exprListWithParentheses(): ExprListWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprListWithParenthesesContext);
	}
	public COALESCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
	public COLLATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
	public DATABASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
	public IF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IF_SYMBOL, 0); }
	public FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
	public MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
	public MOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MOD_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public OLD_PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public QUARTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
	public REPEAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPEAT_SYMBOL, 0); }
	public REPLACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public REVERSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
	public ROW_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
	public TRUNCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
	public WEEK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
	public WEIGHT_STRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL, 0); }
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public wsNumCodepoints(): WsNumCodepointsContext | undefined {
		return this.tryGetRuleContext(0, WsNumCodepointsContext);
	}
	public ulong_number(): Ulong_numberContext[];
	public ulong_number(i: number): Ulong_numberContext;
	public ulong_number(i?: number): Ulong_numberContext | Ulong_numberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ulong_numberContext);
		} else {
			return this.getRuleContext(i, Ulong_numberContext);
		}
	}
	public weightStringLevels(): WeightStringLevelsContext | undefined {
		return this.tryGetRuleContext(0, WeightStringLevelsContext);
	}
	public geometryFunction(): GeometryFunctionContext | undefined {
		return this.tryGetRuleContext(0, GeometryFunctionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_runtimeFunctionCall; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRuntimeFunctionCall) {
			listener.enterRuntimeFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRuntimeFunctionCall) {
			listener.exitRuntimeFunctionCall(this);
		}
	}
}


export class GeometryFunctionContext extends ParserRuleContext {
	public _name: Token;
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public CONTAINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	public exprListWithParentheses(): ExprListWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprListWithParenthesesContext);
	}
	public LINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
	public MULTILINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
	public MULTIPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
	public MULTIPOLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
	public POINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
	public POLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_geometryFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGeometryFunction) {
			listener.enterGeometryFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGeometryFunction) {
			listener.exitGeometryFunction(this);
		}
	}
}


export class TimeFunctionParametersContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public fractionalPrecision(): FractionalPrecisionContext | undefined {
		return this.tryGetRuleContext(0, FractionalPrecisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_timeFunctionParameters; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTimeFunctionParameters) {
			listener.enterTimeFunctionParameters(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTimeFunctionParameters) {
			listener.exitTimeFunctionParameters(this);
		}
	}
}


export class FractionalPrecisionContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fractionalPrecision; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFractionalPrecision) {
			listener.enterFractionalPrecision(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFractionalPrecision) {
			listener.exitFractionalPrecision(this);
		}
	}
}


export class WeightStringLevelsContext extends ParserRuleContext {
	public LEVEL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext[];
	public real_ulong_number(i: number): Real_ulong_numberContext;
	public real_ulong_number(i?: number): Real_ulong_numberContext | Real_ulong_numberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Real_ulong_numberContext);
		} else {
			return this.getRuleContext(i, Real_ulong_numberContext);
		}
	}
	public MINUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
	public weightStringLevelListItem(): WeightStringLevelListItemContext[];
	public weightStringLevelListItem(i: number): WeightStringLevelListItemContext;
	public weightStringLevelListItem(i?: number): WeightStringLevelListItemContext | WeightStringLevelListItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WeightStringLevelListItemContext);
		} else {
			return this.getRuleContext(i, WeightStringLevelListItemContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_weightStringLevels; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWeightStringLevels) {
			listener.enterWeightStringLevels(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWeightStringLevels) {
			listener.exitWeightStringLevels(this);
		}
	}
}


export class WeightStringLevelListItemContext extends ParserRuleContext {
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getRuleContext(0, Real_ulong_numberContext);
	}
	public REVERSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
	public ASC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASC_SYMBOL, 0); }
	public DESC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_weightStringLevelListItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWeightStringLevelListItem) {
			listener.enterWeightStringLevelListItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWeightStringLevelListItem) {
			listener.exitWeightStringLevelListItem(this);
		}
	}
}


export class DateTimeTtypeContext extends ParserRuleContext {
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public DATETIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
	public TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dateTimeTtype; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDateTimeTtype) {
			listener.enterDateTimeTtype(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDateTimeTtype) {
			listener.exitDateTimeTtype(this);
		}
	}
}


export class TrimFunctionContext extends ParserRuleContext {
	public TRIM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.TRIM_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public LEADING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEADING_SYMBOL, 0); }
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public TRAILING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRAILING_SYMBOL, 0); }
	public BOTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOTH_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_trimFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTrimFunction) {
			listener.enterTrimFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTrimFunction) {
			listener.exitTrimFunction(this);
		}
	}
}


export class SubstringFunctionContext extends ParserRuleContext {
	public SUBSTRING_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SUBSTRING_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_substringFunction; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSubstringFunction) {
			listener.enterSubstringFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSubstringFunction) {
			listener.exitSubstringFunction(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	public pureIdentifier(): PureIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PureIdentifierContext);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public udfExprList(): UdfExprListContext | undefined {
		return this.tryGetRuleContext(0, UdfExprListContext);
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	public exprList(): ExprListContext | undefined {
		return this.tryGetRuleContext(0, ExprListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_functionCall; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFunctionCall) {
			listener.enterFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFunctionCall) {
			listener.exitFunctionCall(this);
		}
	}
}


export class UdfExprListContext extends ParserRuleContext {
	public udfExpr(): UdfExprContext[];
	public udfExpr(i: number): UdfExprContext;
	public udfExpr(i?: number): UdfExprContext | UdfExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UdfExprContext);
		} else {
			return this.getRuleContext(i, UdfExprContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_udfExprList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUdfExprList) {
			listener.enterUdfExprList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUdfExprList) {
			listener.exitUdfExprList(this);
		}
	}
}


export class UdfExprContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public selectAlias(): SelectAliasContext | undefined {
		return this.tryGetRuleContext(0, SelectAliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_udfExpr; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUdfExpr) {
			listener.enterUdfExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUdfExpr) {
			listener.exitUdfExpr(this);
		}
	}
}


export class VariableContext extends ParserRuleContext {
	public userVariable(): UserVariableContext | undefined {
		return this.tryGetRuleContext(0, UserVariableContext);
	}
	public ASSIGN_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASSIGN_OPERATOR, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public systemVariable(): SystemVariableContext | undefined {
		return this.tryGetRuleContext(0, SystemVariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_variable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterVariable) {
			listener.enterVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitVariable) {
			listener.exitVariable(this);
		}
	}
}


export class UserVariableContext extends ParserRuleContext {
	public AT_SIGN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public AT_TEXT_SUFFIX(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_userVariable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUserVariable) {
			listener.enterUserVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUserVariable) {
			listener.exitUserVariable(this);
		}
	}
}


export class SystemVariableContext extends ParserRuleContext {
	public AT_AT_SIGN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	public varIdentType(): VarIdentTypeContext | undefined {
		return this.tryGetRuleContext(0, VarIdentTypeContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_systemVariable; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSystemVariable) {
			listener.enterSystemVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSystemVariable) {
			listener.exitSystemVariable(this);
		}
	}
}


export class InternalVariableNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public lValueIdentifier(): LValueIdentifierContext | undefined {
		return this.tryGetRuleContext(0, LValueIdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_internalVariableName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInternalVariableName) {
			listener.enterInternalVariableName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInternalVariableName) {
			listener.exitInternalVariableName(this);
		}
	}
}


export class WhenExpressionContext extends ParserRuleContext {
	public WHEN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.WHEN_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_whenExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWhenExpression) {
			listener.enterWhenExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWhenExpression) {
			listener.exitWhenExpression(this);
		}
	}
}


export class ThenExpressionContext extends ParserRuleContext {
	public THEN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.THEN_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_thenExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterThenExpression) {
			listener.enterThenExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitThenExpression) {
			listener.exitThenExpression(this);
		}
	}
}


export class ElseExpressionContext extends ParserRuleContext {
	public ELSE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ELSE_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_elseExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterElseExpression) {
			listener.enterElseExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitElseExpression) {
			listener.exitElseExpression(this);
		}
	}
}


export class CastTypeContext extends ParserRuleContext {
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public fieldLength(): FieldLengthContext | undefined {
		return this.tryGetRuleContext(0, FieldLengthContext);
	}
	public CHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
	public charsetWithOptBinary(): CharsetWithOptBinaryContext | undefined {
		return this.tryGetRuleContext(0, CharsetWithOptBinaryContext);
	}
	public nchar(): NcharContext | undefined {
		return this.tryGetRuleContext(0, NcharContext);
	}
	public SIGNED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SIGNED_SYMBOL, 0); }
	public INT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_SYMBOL, 0); }
	public UNSIGNED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNSIGNED_SYMBOL, 0); }
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public typeDatetimePrecision(): TypeDatetimePrecisionContext | undefined {
		return this.tryGetRuleContext(0, TypeDatetimePrecisionContext);
	}
	public DATETIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
	public DECIMAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_SYMBOL, 0); }
	public floatOptions(): FloatOptionsContext | undefined {
		return this.tryGetRuleContext(0, FloatOptionsContext);
	}
	public JSON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
	public realType(): RealTypeContext | undefined {
		return this.tryGetRuleContext(0, RealTypeContext);
	}
	public FLOAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLOAT_SYMBOL, 0); }
	public standardFloatOptions(): StandardFloatOptionsContext | undefined {
		return this.tryGetRuleContext(0, StandardFloatOptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_castType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCastType) {
			listener.enterCastType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCastType) {
			listener.exitCastType(this);
		}
	}
}


export class ExprListContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_exprList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprList) {
			listener.enterExprList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprList) {
			listener.exitExprList(this);
		}
	}
}


export class CharsetContext extends ParserRuleContext {
	public CHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public CHARSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_charset; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCharset) {
			listener.enterCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCharset) {
			listener.exitCharset(this);
		}
	}
}


export class NotRuleContext extends ParserRuleContext {
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	public NOT2_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT2_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_notRule; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNotRule) {
			listener.enterNotRule(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNotRule) {
			listener.exitNotRule(this);
		}
	}
}


export class Not2RuleContext extends ParserRuleContext {
	public LOGICAL_NOT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGICAL_NOT_OPERATOR, 0); }
	public NOT2_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT2_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_not2Rule; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNot2Rule) {
			listener.enterNot2Rule(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNot2Rule) {
			listener.exitNot2Rule(this);
		}
	}
}


export class IntervalContext extends ParserRuleContext {
	public intervalTimeStamp(): IntervalTimeStampContext | undefined {
		return this.tryGetRuleContext(0, IntervalTimeStampContext);
	}
	public SECOND_MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
	public MINUTE_MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
	public MINUTE_SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUTE_SECOND_SYMBOL, 0); }
	public HOUR_MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
	public HOUR_SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_SECOND_SYMBOL, 0); }
	public HOUR_MINUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_MINUTE_SYMBOL, 0); }
	public DAY_MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
	public DAY_SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_SECOND_SYMBOL, 0); }
	public DAY_MINUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_MINUTE_SYMBOL, 0); }
	public DAY_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_HOUR_SYMBOL, 0); }
	public YEAR_MONTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.YEAR_MONTH_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_interval; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInterval) {
			listener.enterInterval(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInterval) {
			listener.exitInterval(this);
		}
	}
}


export class IntervalTimeStampContext extends ParserRuleContext {
	public MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
	public SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
	public MINUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
	public HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
	public DAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
	public WEEK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
	public MONTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
	public QUARTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
	public YEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_intervalTimeStamp; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIntervalTimeStamp) {
			listener.enterIntervalTimeStamp(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIntervalTimeStamp) {
			listener.exitIntervalTimeStamp(this);
		}
	}
}


export class ExprListWithParenthesesContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public exprList(): ExprListContext {
		return this.getRuleContext(0, ExprListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_exprListWithParentheses; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprListWithParentheses) {
			listener.enterExprListWithParentheses(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprListWithParentheses) {
			listener.exitExprListWithParentheses(this);
		}
	}
}


export class ExprWithParenthesesContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_exprWithParentheses; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterExprWithParentheses) {
			listener.enterExprWithParentheses(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitExprWithParentheses) {
			listener.exitExprWithParentheses(this);
		}
	}
}


export class SimpleExprWithParenthesesContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public simpleExpr(): SimpleExprContext {
		return this.getRuleContext(0, SimpleExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_simpleExprWithParentheses; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleExprWithParentheses) {
			listener.enterSimpleExprWithParentheses(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleExprWithParentheses) {
			listener.exitSimpleExprWithParentheses(this);
		}
	}
}


export class OrderListContext extends ParserRuleContext {
	public orderExpression(): OrderExpressionContext[];
	public orderExpression(i: number): OrderExpressionContext;
	public orderExpression(i?: number): OrderExpressionContext | OrderExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderExpressionContext);
		} else {
			return this.getRuleContext(i, OrderExpressionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_orderList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOrderList) {
			listener.enterOrderList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOrderList) {
			listener.exitOrderList(this);
		}
	}
}


export class OrderExpressionContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public direction(): DirectionContext | undefined {
		return this.tryGetRuleContext(0, DirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_orderExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOrderExpression) {
			listener.enterOrderExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOrderExpression) {
			listener.exitOrderExpression(this);
		}
	}
}


export class GroupListContext extends ParserRuleContext {
	public groupingExpression(): GroupingExpressionContext[];
	public groupingExpression(i: number): GroupingExpressionContext;
	public groupingExpression(i?: number): GroupingExpressionContext | GroupingExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingExpressionContext);
		} else {
			return this.getRuleContext(i, GroupingExpressionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_groupList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGroupList) {
			listener.enterGroupList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGroupList) {
			listener.exitGroupList(this);
		}
	}
}


export class GroupingExpressionContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_groupingExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGroupingExpression) {
			listener.enterGroupingExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGroupingExpression) {
			listener.exitGroupingExpression(this);
		}
	}
}


export class ChannelContext extends ParserRuleContext {
	public FOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public CHANNEL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CHANNEL_SYMBOL, 0); }
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getRuleContext(0, TextStringNoLinebreakContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_channel; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterChannel) {
			listener.enterChannel(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitChannel) {
			listener.exitChannel(this);
		}
	}
}


export class CompoundStatementContext extends ParserRuleContext {
	public simpleStatement(): SimpleStatementContext | undefined {
		return this.tryGetRuleContext(0, SimpleStatementContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public ifStatement(): IfStatementContext | undefined {
		return this.tryGetRuleContext(0, IfStatementContext);
	}
	public caseStatement(): CaseStatementContext | undefined {
		return this.tryGetRuleContext(0, CaseStatementContext);
	}
	public labeledBlock(): LabeledBlockContext | undefined {
		return this.tryGetRuleContext(0, LabeledBlockContext);
	}
	public unlabeledBlock(): UnlabeledBlockContext | undefined {
		return this.tryGetRuleContext(0, UnlabeledBlockContext);
	}
	public labeledControl(): LabeledControlContext | undefined {
		return this.tryGetRuleContext(0, LabeledControlContext);
	}
	public unlabeledControl(): UnlabeledControlContext | undefined {
		return this.tryGetRuleContext(0, UnlabeledControlContext);
	}
	public leaveStatement(): LeaveStatementContext | undefined {
		return this.tryGetRuleContext(0, LeaveStatementContext);
	}
	public iterateStatement(): IterateStatementContext | undefined {
		return this.tryGetRuleContext(0, IterateStatementContext);
	}
	public cursorOpen(): CursorOpenContext | undefined {
		return this.tryGetRuleContext(0, CursorOpenContext);
	}
	public cursorFetch(): CursorFetchContext | undefined {
		return this.tryGetRuleContext(0, CursorFetchContext);
	}
	public cursorClose(): CursorCloseContext | undefined {
		return this.tryGetRuleContext(0, CursorCloseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_compoundStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCompoundStatement) {
			listener.enterCompoundStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCompoundStatement) {
			listener.exitCompoundStatement(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	public RETURN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RETURN_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_returnStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public IF_SYMBOL(): TerminalNode[];
	public IF_SYMBOL(i: number): TerminalNode;
	public IF_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.IF_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.IF_SYMBOL, i);
		}
	}
	public ifBody(): IfBodyContext {
		return this.getRuleContext(0, IfBodyContext);
	}
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ifStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
}


export class IfBodyContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public thenStatement(): ThenStatementContext {
		return this.getRuleContext(0, ThenStatementContext);
	}
	public ELSEIF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ELSEIF_SYMBOL, 0); }
	public ifBody(): IfBodyContext | undefined {
		return this.tryGetRuleContext(0, IfBodyContext);
	}
	public ELSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ELSE_SYMBOL, 0); }
	public compoundStatementList(): CompoundStatementListContext | undefined {
		return this.tryGetRuleContext(0, CompoundStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ifBody; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIfBody) {
			listener.enterIfBody(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIfBody) {
			listener.exitIfBody(this);
		}
	}
}


export class ThenStatementContext extends ParserRuleContext {
	public THEN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.THEN_SYMBOL, 0); }
	public compoundStatementList(): CompoundStatementListContext {
		return this.getRuleContext(0, CompoundStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_thenStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterThenStatement) {
			listener.enterThenStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitThenStatement) {
			listener.exitThenStatement(this);
		}
	}
}


export class CompoundStatementListContext extends ParserRuleContext {
	public compoundStatement(): CompoundStatementContext[];
	public compoundStatement(i: number): CompoundStatementContext;
	public compoundStatement(i?: number): CompoundStatementContext | CompoundStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CompoundStatementContext);
		} else {
			return this.getRuleContext(i, CompoundStatementContext);
		}
	}
	public SEMICOLON_SYMBOL(): TerminalNode[];
	public SEMICOLON_SYMBOL(i: number): TerminalNode;
	public SEMICOLON_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.SEMICOLON_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_compoundStatementList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCompoundStatementList) {
			listener.enterCompoundStatementList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCompoundStatementList) {
			listener.exitCompoundStatementList(this);
		}
	}
}


export class CaseStatementContext extends ParserRuleContext {
	public CASE_SYMBOL(): TerminalNode[];
	public CASE_SYMBOL(i: number): TerminalNode;
	public CASE_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.CASE_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.CASE_SYMBOL, i);
		}
	}
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public whenExpression(): WhenExpressionContext[];
	public whenExpression(i: number): WhenExpressionContext;
	public whenExpression(i?: number): WhenExpressionContext | WhenExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenExpressionContext);
		} else {
			return this.getRuleContext(i, WhenExpressionContext);
		}
	}
	public thenStatement(): ThenStatementContext[];
	public thenStatement(i: number): ThenStatementContext;
	public thenStatement(i?: number): ThenStatementContext | ThenStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThenStatementContext);
		} else {
			return this.getRuleContext(i, ThenStatementContext);
		}
	}
	public elseStatement(): ElseStatementContext | undefined {
		return this.tryGetRuleContext(0, ElseStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_caseStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCaseStatement) {
			listener.enterCaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCaseStatement) {
			listener.exitCaseStatement(this);
		}
	}
}


export class ElseStatementContext extends ParserRuleContext {
	public ELSE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ELSE_SYMBOL, 0); }
	public compoundStatementList(): CompoundStatementListContext {
		return this.getRuleContext(0, CompoundStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_elseStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterElseStatement) {
			listener.enterElseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitElseStatement) {
			listener.exitElseStatement(this);
		}
	}
}


export class LabeledBlockContext extends ParserRuleContext {
	public label(): LabelContext {
		return this.getRuleContext(0, LabelContext);
	}
	public beginEndBlock(): BeginEndBlockContext {
		return this.getRuleContext(0, BeginEndBlockContext);
	}
	public labelRef(): LabelRefContext | undefined {
		return this.tryGetRuleContext(0, LabelRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_labeledBlock; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLabeledBlock) {
			listener.enterLabeledBlock(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLabeledBlock) {
			listener.exitLabeledBlock(this);
		}
	}
}


export class UnlabeledBlockContext extends ParserRuleContext {
	public beginEndBlock(): BeginEndBlockContext {
		return this.getRuleContext(0, BeginEndBlockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_unlabeledBlock; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUnlabeledBlock) {
			listener.enterUnlabeledBlock(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUnlabeledBlock) {
			listener.exitUnlabeledBlock(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public labelIdentifier(): LabelIdentifierContext {
		return this.getRuleContext(0, LabelIdentifierContext);
	}
	public COLON_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COLON_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_label; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
}


export class BeginEndBlockContext extends ParserRuleContext {
	public BEGIN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	public spDeclarations(): SpDeclarationsContext | undefined {
		return this.tryGetRuleContext(0, SpDeclarationsContext);
	}
	public compoundStatementList(): CompoundStatementListContext | undefined {
		return this.tryGetRuleContext(0, CompoundStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_beginEndBlock; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterBeginEndBlock) {
			listener.enterBeginEndBlock(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitBeginEndBlock) {
			listener.exitBeginEndBlock(this);
		}
	}
}


export class LabeledControlContext extends ParserRuleContext {
	public label(): LabelContext {
		return this.getRuleContext(0, LabelContext);
	}
	public unlabeledControl(): UnlabeledControlContext {
		return this.getRuleContext(0, UnlabeledControlContext);
	}
	public labelRef(): LabelRefContext | undefined {
		return this.tryGetRuleContext(0, LabelRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_labeledControl; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLabeledControl) {
			listener.enterLabeledControl(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLabeledControl) {
			listener.exitLabeledControl(this);
		}
	}
}


export class UnlabeledControlContext extends ParserRuleContext {
	public loopBlock(): LoopBlockContext | undefined {
		return this.tryGetRuleContext(0, LoopBlockContext);
	}
	public whileDoBlock(): WhileDoBlockContext | undefined {
		return this.tryGetRuleContext(0, WhileDoBlockContext);
	}
	public repeatUntilBlock(): RepeatUntilBlockContext | undefined {
		return this.tryGetRuleContext(0, RepeatUntilBlockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_unlabeledControl; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUnlabeledControl) {
			listener.enterUnlabeledControl(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUnlabeledControl) {
			listener.exitUnlabeledControl(this);
		}
	}
}


export class LoopBlockContext extends ParserRuleContext {
	public LOOP_SYMBOL(): TerminalNode[];
	public LOOP_SYMBOL(i: number): TerminalNode;
	public LOOP_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.LOOP_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.LOOP_SYMBOL, i);
		}
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getRuleContext(0, CompoundStatementListContext);
	}
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_loopBlock; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLoopBlock) {
			listener.enterLoopBlock(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLoopBlock) {
			listener.exitLoopBlock(this);
		}
	}
}


export class WhileDoBlockContext extends ParserRuleContext {
	public WHILE_SYMBOL(): TerminalNode[];
	public WHILE_SYMBOL(i: number): TerminalNode;
	public WHILE_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.WHILE_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.WHILE_SYMBOL, i);
		}
	}
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public DO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
	public compoundStatementList(): CompoundStatementListContext {
		return this.getRuleContext(0, CompoundStatementListContext);
	}
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_whileDoBlock; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWhileDoBlock) {
			listener.enterWhileDoBlock(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWhileDoBlock) {
			listener.exitWhileDoBlock(this);
		}
	}
}


export class RepeatUntilBlockContext extends ParserRuleContext {
	public REPEAT_SYMBOL(): TerminalNode[];
	public REPEAT_SYMBOL(i: number): TerminalNode;
	public REPEAT_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.REPEAT_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.REPEAT_SYMBOL, i);
		}
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getRuleContext(0, CompoundStatementListContext);
	}
	public UNTIL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public END_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_repeatUntilBlock; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRepeatUntilBlock) {
			listener.enterRepeatUntilBlock(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRepeatUntilBlock) {
			listener.exitRepeatUntilBlock(this);
		}
	}
}


export class SpDeclarationsContext extends ParserRuleContext {
	public spDeclaration(): SpDeclarationContext[];
	public spDeclaration(i: number): SpDeclarationContext;
	public spDeclaration(i?: number): SpDeclarationContext | SpDeclarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SpDeclarationContext);
		} else {
			return this.getRuleContext(i, SpDeclarationContext);
		}
	}
	public SEMICOLON_SYMBOL(): TerminalNode[];
	public SEMICOLON_SYMBOL(i: number): TerminalNode;
	public SEMICOLON_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.SEMICOLON_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_spDeclarations; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSpDeclarations) {
			listener.enterSpDeclarations(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSpDeclarations) {
			listener.exitSpDeclarations(this);
		}
	}
}


export class SpDeclarationContext extends ParserRuleContext {
	public variableDeclaration(): VariableDeclarationContext | undefined {
		return this.tryGetRuleContext(0, VariableDeclarationContext);
	}
	public conditionDeclaration(): ConditionDeclarationContext | undefined {
		return this.tryGetRuleContext(0, ConditionDeclarationContext);
	}
	public handlerDeclaration(): HandlerDeclarationContext | undefined {
		return this.tryGetRuleContext(0, HandlerDeclarationContext);
	}
	public cursorDeclaration(): CursorDeclarationContext | undefined {
		return this.tryGetRuleContext(0, CursorDeclarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_spDeclaration; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSpDeclaration) {
			listener.enterSpDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSpDeclaration) {
			listener.exitSpDeclaration(this);
		}
	}
}


export class VariableDeclarationContext extends ParserRuleContext {
	public DECLARE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_variableDeclaration; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterVariableDeclaration) {
			listener.enterVariableDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitVariableDeclaration) {
			listener.exitVariableDeclaration(this);
		}
	}
}


export class ConditionDeclarationContext extends ParserRuleContext {
	public DECLARE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public CONDITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CONDITION_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public spCondition(): SpConditionContext {
		return this.getRuleContext(0, SpConditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_conditionDeclaration; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterConditionDeclaration) {
			listener.enterConditionDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitConditionDeclaration) {
			listener.exitConditionDeclaration(this);
		}
	}
}


export class SpConditionContext extends ParserRuleContext {
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public sqlstate(): SqlstateContext | undefined {
		return this.tryGetRuleContext(0, SqlstateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_spCondition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSpCondition) {
			listener.enterSpCondition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSpCondition) {
			listener.exitSpCondition(this);
		}
	}
}


export class SqlstateContext extends ParserRuleContext {
	public SQLSTATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SQLSTATE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext {
		return this.getRuleContext(0, TextLiteralContext);
	}
	public VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_sqlstate; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSqlstate) {
			listener.enterSqlstate(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSqlstate) {
			listener.exitSqlstate(this);
		}
	}
}


export class HandlerDeclarationContext extends ParserRuleContext {
	public DECLARE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
	public HANDLER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public handlerCondition(): HandlerConditionContext[];
	public handlerCondition(i: number): HandlerConditionContext;
	public handlerCondition(i?: number): HandlerConditionContext | HandlerConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HandlerConditionContext);
		} else {
			return this.getRuleContext(i, HandlerConditionContext);
		}
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getRuleContext(0, CompoundStatementContext);
	}
	public CONTINUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTINUE_SYMBOL, 0); }
	public EXIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXIT_SYMBOL, 0); }
	public UNDO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_handlerDeclaration; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHandlerDeclaration) {
			listener.enterHandlerDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHandlerDeclaration) {
			listener.exitHandlerDeclaration(this);
		}
	}
}


export class HandlerConditionContext extends ParserRuleContext {
	public spCondition(): SpConditionContext | undefined {
		return this.tryGetRuleContext(0, SpConditionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public SQLWARNING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQLWARNING_SYMBOL, 0); }
	public notRule(): NotRuleContext | undefined {
		return this.tryGetRuleContext(0, NotRuleContext);
	}
	public FOUND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOUND_SYMBOL, 0); }
	public SQLEXCEPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQLEXCEPTION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_handlerCondition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterHandlerCondition) {
			listener.enterHandlerCondition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitHandlerCondition) {
			listener.exitHandlerCondition(this);
		}
	}
}


export class CursorDeclarationContext extends ParserRuleContext {
	public DECLARE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public CURSOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CURSOR_SYMBOL, 0); }
	public FOR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_cursorDeclaration; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCursorDeclaration) {
			listener.enterCursorDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCursorDeclaration) {
			listener.exitCursorDeclaration(this);
		}
	}
}


export class IterateStatementContext extends ParserRuleContext {
	public ITERATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ITERATE_SYMBOL, 0); }
	public labelRef(): LabelRefContext {
		return this.getRuleContext(0, LabelRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_iterateStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIterateStatement) {
			listener.enterIterateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIterateStatement) {
			listener.exitIterateStatement(this);
		}
	}
}


export class LeaveStatementContext extends ParserRuleContext {
	public LEAVE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LEAVE_SYMBOL, 0); }
	public labelRef(): LabelRefContext {
		return this.getRuleContext(0, LabelRefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_leaveStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLeaveStatement) {
			listener.enterLeaveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLeaveStatement) {
			listener.exitLeaveStatement(this);
		}
	}
}


export class GetDiagnosticsContext extends ParserRuleContext {
	public GET_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.GET_SYMBOL, 0); }
	public DIAGNOSTICS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL, 0); }
	public statementInformationItem(): StatementInformationItemContext[];
	public statementInformationItem(i: number): StatementInformationItemContext;
	public statementInformationItem(i?: number): StatementInformationItemContext | StatementInformationItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementInformationItemContext);
		} else {
			return this.getRuleContext(i, StatementInformationItemContext);
		}
	}
	public CONDITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONDITION_SYMBOL, 0); }
	public signalAllowedExpr(): SignalAllowedExprContext | undefined {
		return this.tryGetRuleContext(0, SignalAllowedExprContext);
	}
	public conditionInformationItem(): ConditionInformationItemContext[];
	public conditionInformationItem(i: number): ConditionInformationItemContext;
	public conditionInformationItem(i?: number): ConditionInformationItemContext | ConditionInformationItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConditionInformationItemContext);
		} else {
			return this.getRuleContext(i, ConditionInformationItemContext);
		}
	}
	public CURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public STACKED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STACKED_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_getDiagnostics; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGetDiagnostics) {
			listener.enterGetDiagnostics(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGetDiagnostics) {
			listener.exitGetDiagnostics(this);
		}
	}
}


export class SignalAllowedExprContext extends ParserRuleContext {
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_signalAllowedExpr; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSignalAllowedExpr) {
			listener.enterSignalAllowedExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSignalAllowedExpr) {
			listener.exitSignalAllowedExpr(this);
		}
	}
}


export class StatementInformationItemContext extends ParserRuleContext {
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public NUMBER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NUMBER_SYMBOL, 0); }
	public ROW_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_statementInformationItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStatementInformationItem) {
			listener.enterStatementInformationItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStatementInformationItem) {
			listener.exitStatementInformationItem(this);
		}
	}
}


export class ConditionInformationItemContext extends ParserRuleContext {
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public signalInformationItemName(): SignalInformationItemNameContext | undefined {
		return this.tryGetRuleContext(0, SignalInformationItemNameContext);
	}
	public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_conditionInformationItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterConditionInformationItem) {
			listener.enterConditionInformationItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitConditionInformationItem) {
			listener.exitConditionInformationItem(this);
		}
	}
}


export class SignalInformationItemNameContext extends ParserRuleContext {
	public CLASS_ORIGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
	public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
	public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
	public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
	public CONSTRAINT_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
	public CATALOG_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CATALOG_NAME_SYMBOL, 0); }
	public SCHEMA_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL, 0); }
	public TABLE_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_NAME_SYMBOL, 0); }
	public COLUMN_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_NAME_SYMBOL, 0); }
	public CURSOR_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURSOR_NAME_SYMBOL, 0); }
	public MESSAGE_TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
	public MYSQL_ERRNO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_signalInformationItemName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSignalInformationItemName) {
			listener.enterSignalInformationItemName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSignalInformationItemName) {
			listener.exitSignalInformationItemName(this);
		}
	}
}


export class SignalStatementContext extends ParserRuleContext {
	public SIGNAL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SIGNAL_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public sqlstate(): SqlstateContext | undefined {
		return this.tryGetRuleContext(0, SqlstateContext);
	}
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public signalInformationItem(): SignalInformationItemContext[];
	public signalInformationItem(i: number): SignalInformationItemContext;
	public signalInformationItem(i?: number): SignalInformationItemContext | SignalInformationItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SignalInformationItemContext);
		} else {
			return this.getRuleContext(i, SignalInformationItemContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_signalStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSignalStatement) {
			listener.enterSignalStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSignalStatement) {
			listener.exitSignalStatement(this);
		}
	}
}


export class ResignalStatementContext extends ParserRuleContext {
	public RESIGNAL_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RESIGNAL_SYMBOL, 0); }
	public SQLSTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQLSTATE_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public signalInformationItem(): SignalInformationItemContext[];
	public signalInformationItem(i: number): SignalInformationItemContext;
	public signalInformationItem(i?: number): SignalInformationItemContext | SignalInformationItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SignalInformationItemContext);
		} else {
			return this.getRuleContext(i, SignalInformationItemContext);
		}
	}
	public VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resignalStatement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResignalStatement) {
			listener.enterResignalStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResignalStatement) {
			listener.exitResignalStatement(this);
		}
	}
}


export class SignalInformationItemContext extends ParserRuleContext {
	public signalInformationItemName(): SignalInformationItemNameContext {
		return this.getRuleContext(0, SignalInformationItemNameContext);
	}
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public signalAllowedExpr(): SignalAllowedExprContext {
		return this.getRuleContext(0, SignalAllowedExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_signalInformationItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSignalInformationItem) {
			listener.enterSignalInformationItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSignalInformationItem) {
			listener.exitSignalInformationItem(this);
		}
	}
}


export class CursorOpenContext extends ParserRuleContext {
	public OPEN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_cursorOpen; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCursorOpen) {
			listener.enterCursorOpen(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCursorOpen) {
			listener.exitCursorOpen(this);
		}
	}
}


export class CursorCloseContext extends ParserRuleContext {
	public CLOSE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_cursorClose; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCursorClose) {
			listener.enterCursorClose(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCursorClose) {
			listener.exitCursorClose(this);
		}
	}
}


export class CursorFetchContext extends ParserRuleContext {
	public FETCH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.FETCH_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public INTO_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public FROM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
	public NEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_cursorFetch; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCursorFetch) {
			listener.enterCursorFetch(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCursorFetch) {
			listener.exitCursorFetch(this);
		}
	}
}


export class ScheduleContext extends ParserRuleContext {
	public AT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SYMBOL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public EVERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVERY_SYMBOL, 0); }
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public STARTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STARTS_SYMBOL, 0); }
	public ENDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENDS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_schedule; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSchedule) {
			listener.enterSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSchedule) {
			listener.exitSchedule(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	public columnName(): ColumnNameContext {
		return this.getRuleContext(0, ColumnNameContext);
	}
	public fieldDefinition(): FieldDefinitionContext {
		return this.getRuleContext(0, FieldDefinitionContext);
	}
	public checkOrReferences(): CheckOrReferencesContext | undefined {
		return this.tryGetRuleContext(0, CheckOrReferencesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnDefinition) {
			listener.enterColumnDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnDefinition) {
			listener.exitColumnDefinition(this);
		}
	}
}


export class CheckOrReferencesContext extends ParserRuleContext {
	public checkConstraint(): CheckConstraintContext | undefined {
		return this.tryGetRuleContext(0, CheckConstraintContext);
	}
	public references(): ReferencesContext | undefined {
		return this.tryGetRuleContext(0, ReferencesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_checkOrReferences; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCheckOrReferences) {
			listener.enterCheckOrReferences(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCheckOrReferences) {
			listener.exitCheckOrReferences(this);
		}
	}
}


export class CheckConstraintContext extends ParserRuleContext {
	public CHECK_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getRuleContext(0, ExprWithParenthesesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_checkConstraint; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCheckConstraint) {
			listener.enterCheckConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCheckConstraint) {
			listener.exitCheckConstraint(this);
		}
	}
}


export class ConstraintEnforcementContext extends ParserRuleContext {
	public ENFORCED_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ENFORCED_SYMBOL, 0); }
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_constraintEnforcement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterConstraintEnforcement) {
			listener.enterConstraintEnforcement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitConstraintEnforcement) {
			listener.exitConstraintEnforcement(this);
		}
	}
}


export class TableConstraintDefContext extends ParserRuleContext {
	public _type: Token;
	public keyListVariants(): KeyListVariantsContext | undefined {
		return this.tryGetRuleContext(0, KeyListVariantsContext);
	}
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public indexNameAndType(): IndexNameAndTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexNameAndTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public FULLTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULLTEXT_SYMBOL, 0); }
	public keyOrIndex(): KeyOrIndexContext | undefined {
		return this.tryGetRuleContext(0, KeyOrIndexContext);
	}
	public indexName(): IndexNameContext | undefined {
		return this.tryGetRuleContext(0, IndexNameContext);
	}
	public fulltextIndexOption(): FulltextIndexOptionContext[];
	public fulltextIndexOption(i: number): FulltextIndexOptionContext;
	public fulltextIndexOption(i?: number): FulltextIndexOptionContext | FulltextIndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FulltextIndexOptionContext);
		} else {
			return this.getRuleContext(i, FulltextIndexOptionContext);
		}
	}
	public SPATIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
	public spatialIndexOption(): SpatialIndexOptionContext[];
	public spatialIndexOption(i: number): SpatialIndexOptionContext;
	public spatialIndexOption(i?: number): SpatialIndexOptionContext | SpatialIndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SpatialIndexOptionContext);
		} else {
			return this.getRuleContext(i, SpatialIndexOptionContext);
		}
	}
	public keyList(): KeyListContext | undefined {
		return this.tryGetRuleContext(0, KeyListContext);
	}
	public references(): ReferencesContext | undefined {
		return this.tryGetRuleContext(0, ReferencesContext);
	}
	public checkConstraint(): CheckConstraintContext | undefined {
		return this.tryGetRuleContext(0, CheckConstraintContext);
	}
	public constraintName(): ConstraintNameContext | undefined {
		return this.tryGetRuleContext(0, ConstraintNameContext);
	}
	public FOREIGN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOREIGN_SYMBOL, 0); }
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	public UNIQUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
	public constraintEnforcement(): ConstraintEnforcementContext | undefined {
		return this.tryGetRuleContext(0, ConstraintEnforcementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableConstraintDef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableConstraintDef) {
			listener.enterTableConstraintDef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableConstraintDef) {
			listener.exitTableConstraintDef(this);
		}
	}
}


export class ConstraintNameContext extends ParserRuleContext {
	public CONSTRAINT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CONSTRAINT_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_constraintName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterConstraintName) {
			listener.enterConstraintName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitConstraintName) {
			listener.exitConstraintName(this);
		}
	}
}


export class FieldDefinitionContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public exprWithParentheses(): ExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprWithParenthesesContext);
	}
	public columnAttribute(): ColumnAttributeContext[];
	public columnAttribute(i: number): ColumnAttributeContext;
	public columnAttribute(i?: number): ColumnAttributeContext | ColumnAttributeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnAttributeContext);
		} else {
			return this.getRuleContext(i, ColumnAttributeContext);
		}
	}
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	public GENERATED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GENERATED_SYMBOL, 0); }
	public ALWAYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALWAYS_SYMBOL, 0); }
	public VIRTUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VIRTUAL_SYMBOL, 0); }
	public STORED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORED_SYMBOL, 0); }
	public gcolAttribute(): GcolAttributeContext[];
	public gcolAttribute(i: number): GcolAttributeContext;
	public gcolAttribute(i?: number): GcolAttributeContext | GcolAttributeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GcolAttributeContext);
		} else {
			return this.getRuleContext(i, GcolAttributeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldDefinition) {
			listener.enterFieldDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldDefinition) {
			listener.exitFieldDefinition(this);
		}
	}
}


export class ColumnAttributeContext extends ParserRuleContext {
	public _value: Token;
	public nullLiteral(): NullLiteralContext | undefined {
		return this.tryGetRuleContext(0, NullLiteralContext);
	}
	public NOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
	public SECONDARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public signedLiteral(): SignedLiteralContext | undefined {
		return this.tryGetRuleContext(0, SignedLiteralContext);
	}
	public NOW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOW_SYMBOL, 0); }
	public exprWithParentheses(): ExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprWithParenthesesContext);
	}
	public timeFunctionParameters(): TimeFunctionParametersContext | undefined {
		return this.tryGetRuleContext(0, TimeFunctionParametersContext);
	}
	public UPDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public ON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
	public AUTO_INCREMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
	public VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
	public SERIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	public UNIQUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	public columnFormat(): ColumnFormatContext | undefined {
		return this.tryGetRuleContext(0, ColumnFormatContext);
	}
	public COLUMN_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
	public storageMedia(): StorageMediaContext | undefined {
		return this.tryGetRuleContext(0, StorageMediaContext);
	}
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public real_ulonglong_number(): Real_ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
	}
	public SRID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SRID_SYMBOL, 0); }
	public checkConstraint(): CheckConstraintContext | undefined {
		return this.tryGetRuleContext(0, CheckConstraintContext);
	}
	public constraintName(): ConstraintNameContext | undefined {
		return this.tryGetRuleContext(0, ConstraintNameContext);
	}
	public constraintEnforcement(): ConstraintEnforcementContext | undefined {
		return this.tryGetRuleContext(0, ConstraintEnforcementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnAttribute; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnAttribute) {
			listener.enterColumnAttribute(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnAttribute) {
			listener.exitColumnAttribute(this);
		}
	}
}


export class ColumnFormatContext extends ParserRuleContext {
	public FIXED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
	public DYNAMIC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnFormat; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnFormat) {
			listener.enterColumnFormat(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnFormat) {
			listener.exitColumnFormat(this);
		}
	}
}


export class StorageMediaContext extends ParserRuleContext {
	public DISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
	public MEMORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_storageMedia; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStorageMedia) {
			listener.enterStorageMedia(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStorageMedia) {
			listener.exitStorageMedia(this);
		}
	}
}


export class GcolAttributeContext extends ParserRuleContext {
	public UNIQUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public NULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	public notRule(): NotRuleContext | undefined {
		return this.tryGetRuleContext(0, NotRuleContext);
	}
	public PRIMARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_gcolAttribute; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterGcolAttribute) {
			listener.enterGcolAttribute(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitGcolAttribute) {
			listener.exitGcolAttribute(this);
		}
	}
}


export class ReferencesContext extends ParserRuleContext {
	public _match: Token;
	public _option: Token;
	public REFERENCES_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REFERENCES_SYMBOL, 0); }
	public tableRef(): TableRefContext {
		return this.getRuleContext(0, TableRefContext);
	}
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListWithParenthesesContext);
	}
	public MATCH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MATCH_SYMBOL, 0); }
	public ON_SYMBOL(): TerminalNode[];
	public ON_SYMBOL(i: number): TerminalNode;
	public ON_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.ON_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.ON_SYMBOL, i);
		}
	}
	public deleteOption(): DeleteOptionContext[];
	public deleteOption(i: number): DeleteOptionContext;
	public deleteOption(i?: number): DeleteOptionContext | DeleteOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeleteOptionContext);
		} else {
			return this.getRuleContext(i, DeleteOptionContext);
		}
	}
	public UPDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
	public DELETE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
	public FULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
	public PARTIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTIAL_SYMBOL, 0); }
	public SIMPLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SIMPLE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_references; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReferences) {
			listener.enterReferences(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReferences) {
			listener.exitReferences(this);
		}
	}
}


export class DeleteOptionContext extends ParserRuleContext {
	public RESTRICT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
	public CASCADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public nullLiteral(): NullLiteralContext | undefined {
		return this.tryGetRuleContext(0, NullLiteralContext);
	}
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	public ACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACTION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_deleteOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDeleteOption) {
			listener.enterDeleteOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDeleteOption) {
			listener.exitDeleteOption(this);
		}
	}
}


export class KeyListContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public keyPart(): KeyPartContext[];
	public keyPart(i: number): KeyPartContext;
	public keyPart(i?: number): KeyPartContext | KeyPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyPartContext);
		} else {
			return this.getRuleContext(i, KeyPartContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyList) {
			listener.enterKeyList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyList) {
			listener.exitKeyList(this);
		}
	}
}


export class KeyPartContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public fieldLength(): FieldLengthContext | undefined {
		return this.tryGetRuleContext(0, FieldLengthContext);
	}
	public direction(): DirectionContext | undefined {
		return this.tryGetRuleContext(0, DirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyPart; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyPart) {
			listener.enterKeyPart(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyPart) {
			listener.exitKeyPart(this);
		}
	}
}


export class KeyListWithExpressionContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public keyPartOrExpression(): KeyPartOrExpressionContext[];
	public keyPartOrExpression(i: number): KeyPartOrExpressionContext;
	public keyPartOrExpression(i?: number): KeyPartOrExpressionContext | KeyPartOrExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyPartOrExpressionContext);
		} else {
			return this.getRuleContext(i, KeyPartOrExpressionContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyListWithExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyListWithExpression) {
			listener.enterKeyListWithExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyListWithExpression) {
			listener.exitKeyListWithExpression(this);
		}
	}
}


export class KeyPartOrExpressionContext extends ParserRuleContext {
	public keyPart(): KeyPartContext | undefined {
		return this.tryGetRuleContext(0, KeyPartContext);
	}
	public exprWithParentheses(): ExprWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ExprWithParenthesesContext);
	}
	public direction(): DirectionContext | undefined {
		return this.tryGetRuleContext(0, DirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyPartOrExpression; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyPartOrExpression) {
			listener.enterKeyPartOrExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyPartOrExpression) {
			listener.exitKeyPartOrExpression(this);
		}
	}
}


export class KeyListVariantsContext extends ParserRuleContext {
	public keyListWithExpression(): KeyListWithExpressionContext | undefined {
		return this.tryGetRuleContext(0, KeyListWithExpressionContext);
	}
	public keyList(): KeyListContext | undefined {
		return this.tryGetRuleContext(0, KeyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_keyListVariants; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterKeyListVariants) {
			listener.enterKeyListVariants(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitKeyListVariants) {
			listener.exitKeyListVariants(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	public _algorithm: Token;
	public BTREE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BTREE_SYMBOL, 0); }
	public RTREE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RTREE_SYMBOL, 0); }
	public HASH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexType) {
			listener.enterIndexType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexType) {
			listener.exitIndexType(this);
		}
	}
}


export class IndexOptionContext extends ParserRuleContext {
	public commonIndexOption(): CommonIndexOptionContext | undefined {
		return this.tryGetRuleContext(0, CommonIndexOptionContext);
	}
	public indexTypeClause(): IndexTypeClauseContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexOption) {
			listener.enterIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexOption) {
			listener.exitIndexOption(this);
		}
	}
}


export class CommonIndexOptionContext extends ParserRuleContext {
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public visibility(): VisibilityContext | undefined {
		return this.tryGetRuleContext(0, VisibilityContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_commonIndexOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCommonIndexOption) {
			listener.enterCommonIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCommonIndexOption) {
			listener.exitCommonIndexOption(this);
		}
	}
}


export class VisibilityContext extends ParserRuleContext {
	public VISIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VISIBLE_SYMBOL, 0); }
	public INVISIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVISIBLE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_visibility; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterVisibility) {
			listener.enterVisibility(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitVisibility) {
			listener.exitVisibility(this);
		}
	}
}


export class IndexTypeClauseContext extends ParserRuleContext {
	public indexType(): IndexTypeContext {
		return this.getRuleContext(0, IndexTypeContext);
	}
	public USING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
	public TYPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexTypeClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexTypeClause) {
			listener.enterIndexTypeClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexTypeClause) {
			listener.exitIndexTypeClause(this);
		}
	}
}


export class FulltextIndexOptionContext extends ParserRuleContext {
	public commonIndexOption(): CommonIndexOptionContext | undefined {
		return this.tryGetRuleContext(0, CommonIndexOptionContext);
	}
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public PARSER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARSER_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fulltextIndexOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFulltextIndexOption) {
			listener.enterFulltextIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFulltextIndexOption) {
			listener.exitFulltextIndexOption(this);
		}
	}
}


export class SpatialIndexOptionContext extends ParserRuleContext {
	public commonIndexOption(): CommonIndexOptionContext {
		return this.getRuleContext(0, CommonIndexOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_spatialIndexOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSpatialIndexOption) {
			listener.enterSpatialIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSpatialIndexOption) {
			listener.exitSpatialIndexOption(this);
		}
	}
}


export class DataTypeDefinitionContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public EOF(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dataTypeDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDataTypeDefinition) {
			listener.enterDataTypeDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDataTypeDefinition) {
			listener.exitDataTypeDefinition(this);
		}
	}
}


export class DataTypeContext extends ParserRuleContext {
	public _type: Token;
	public INT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_SYMBOL, 0); }
	public TINYINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TINYINT_SYMBOL, 0); }
	public SMALLINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SMALLINT_SYMBOL, 0); }
	public MEDIUMINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEDIUMINT_SYMBOL, 0); }
	public BIGINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIGINT_SYMBOL, 0); }
	public fieldLength(): FieldLengthContext | undefined {
		return this.tryGetRuleContext(0, FieldLengthContext);
	}
	public fieldOptions(): FieldOptionsContext | undefined {
		return this.tryGetRuleContext(0, FieldOptionsContext);
	}
	public REAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REAL_SYMBOL, 0); }
	public DOUBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DOUBLE_SYMBOL, 0); }
	public precision(): PrecisionContext | undefined {
		return this.tryGetRuleContext(0, PrecisionContext);
	}
	public PRECISION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECISION_SYMBOL, 0); }
	public FLOAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLOAT_SYMBOL, 0); }
	public DECIMAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_SYMBOL, 0); }
	public NUMERIC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NUMERIC_SYMBOL, 0); }
	public FIXED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
	public floatOptions(): FloatOptionsContext | undefined {
		return this.tryGetRuleContext(0, FloatOptionsContext);
	}
	public BIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIT_SYMBOL, 0); }
	public BOOL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOL_SYMBOL, 0); }
	public BOOLEAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
	public CHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
	public charsetWithOptBinary(): CharsetWithOptBinaryContext | undefined {
		return this.tryGetRuleContext(0, CharsetWithOptBinaryContext);
	}
	public nchar(): NcharContext | undefined {
		return this.tryGetRuleContext(0, NcharContext);
	}
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public VARYING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARYING_SYMBOL, 0); }
	public VARCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARCHAR_SYMBOL, 0); }
	public NATIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
	public NVARCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NVARCHAR_SYMBOL, 0); }
	public NCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
	public VARBINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARBINARY_SYMBOL, 0); }
	public YEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public typeDatetimePrecision(): TypeDatetimePrecisionContext | undefined {
		return this.tryGetRuleContext(0, TypeDatetimePrecisionContext);
	}
	public TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
	public DATETIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
	public TINYBLOB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TINYBLOB_SYMBOL, 0); }
	public BLOB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BLOB_SYMBOL, 0); }
	public MEDIUMBLOB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEDIUMBLOB_SYMBOL, 0); }
	public LONGBLOB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONGBLOB_SYMBOL, 0); }
	public LONG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_SYMBOL, 0); }
	public TINYTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TINYTEXT_SYMBOL, 0); }
	public TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
	public MEDIUMTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEDIUMTEXT_SYMBOL, 0); }
	public LONGTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONGTEXT_SYMBOL, 0); }
	public stringList(): StringListContext | undefined {
		return this.tryGetRuleContext(0, StringListContext);
	}
	public ENUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENUM_SYMBOL, 0); }
	public SET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
	public SERIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
	public JSON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
	public GEOMETRY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRY_SYMBOL, 0); }
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
	public POINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
	public MULTIPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
	public LINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
	public MULTILINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
	public POLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
	public MULTIPOLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dataType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDataType) {
			listener.enterDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDataType) {
			listener.exitDataType(this);
		}
	}
}


export class NcharContext extends ParserRuleContext {
	public _type: Token;
	public NCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
	public CHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
	public NATIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_nchar; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNchar) {
			listener.enterNchar(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNchar) {
			listener.exitNchar(this);
		}
	}
}


export class RealTypeContext extends ParserRuleContext {
	public _type: Token;
	public REAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REAL_SYMBOL, 0); }
	public DOUBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DOUBLE_SYMBOL, 0); }
	public PRECISION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECISION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_realType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRealType) {
			listener.enterRealType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRealType) {
			listener.exitRealType(this);
		}
	}
}


export class FieldLengthContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public real_ulonglong_number(): Real_ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
	}
	public DECIMAL_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldLength; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldLength) {
			listener.enterFieldLength(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldLength) {
			listener.exitFieldLength(this);
		}
	}
}


export class FieldOptionsContext extends ParserRuleContext {
	public SIGNED_SYMBOL(): TerminalNode[];
	public SIGNED_SYMBOL(i: number): TerminalNode;
	public SIGNED_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.SIGNED_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.SIGNED_SYMBOL, i);
		}
	}
	public UNSIGNED_SYMBOL(): TerminalNode[];
	public UNSIGNED_SYMBOL(i: number): TerminalNode;
	public UNSIGNED_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.UNSIGNED_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.UNSIGNED_SYMBOL, i);
		}
	}
	public ZEROFILL_SYMBOL(): TerminalNode[];
	public ZEROFILL_SYMBOL(i: number): TerminalNode;
	public ZEROFILL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.ZEROFILL_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.ZEROFILL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldOptions) {
			listener.enterFieldOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldOptions) {
			listener.exitFieldOptions(this);
		}
	}
}


export class CharsetWithOptBinaryContext extends ParserRuleContext {
	public ascii(): AsciiContext | undefined {
		return this.tryGetRuleContext(0, AsciiContext);
	}
	public unicode(): UnicodeContext | undefined {
		return this.tryGetRuleContext(0, UnicodeContext);
	}
	public BYTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BYTE_SYMBOL, 0); }
	public charset(): CharsetContext | undefined {
		return this.tryGetRuleContext(0, CharsetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_charsetWithOptBinary; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCharsetWithOptBinary) {
			listener.enterCharsetWithOptBinary(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCharsetWithOptBinary) {
			listener.exitCharsetWithOptBinary(this);
		}
	}
}


export class AsciiContext extends ParserRuleContext {
	public ASCII_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ascii; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAscii) {
			listener.enterAscii(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAscii) {
			listener.exitAscii(this);
		}
	}
}


export class UnicodeContext extends ParserRuleContext {
	public UNICODE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.UNICODE_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_unicode; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUnicode) {
			listener.enterUnicode(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUnicode) {
			listener.exitUnicode(this);
		}
	}
}


export class WsNumCodepointsContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getRuleContext(0, Real_ulong_numberContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_wsNumCodepoints; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWsNumCodepoints) {
			listener.enterWsNumCodepoints(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWsNumCodepoints) {
			listener.exitWsNumCodepoints(this);
		}
	}
}


export class TypeDatetimePrecisionContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode { return this.getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_typeDatetimePrecision; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTypeDatetimePrecision) {
			listener.enterTypeDatetimePrecision(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTypeDatetimePrecision) {
			listener.exitTypeDatetimePrecision(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_charsetName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCharsetName) {
			listener.enterCharsetName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCharsetName) {
			listener.exitCharsetName(this);
		}
	}
}


export class CollationNameContext extends ParserRuleContext {
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public BINARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_collationName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCollationName) {
			listener.enterCollationName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCollationName) {
			listener.exitCollationName(this);
		}
	}
}


export class CreateTableOptionsContext extends ParserRuleContext {
	public createTableOption(): CreateTableOptionContext[];
	public createTableOption(i: number): CreateTableOptionContext;
	public createTableOption(i?: number): CreateTableOptionContext | CreateTableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateTableOptionContext);
		} else {
			return this.getRuleContext(i, CreateTableOptionContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createTableOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateTableOptions) {
			listener.enterCreateTableOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateTableOptions) {
			listener.exitCreateTableOptions(this);
		}
	}
}


export class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
	public createTableOption(): CreateTableOptionContext[];
	public createTableOption(i: number): CreateTableOptionContext;
	public createTableOption(i?: number): CreateTableOptionContext | CreateTableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateTableOptionContext);
		} else {
			return this.getRuleContext(i, CreateTableOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createTableOptionsSpaceSeparated; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateTableOptionsSpaceSeparated) {
			listener.enterCreateTableOptionsSpaceSeparated(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateTableOptionsSpaceSeparated) {
			listener.exitCreateTableOptionsSpaceSeparated(this);
		}
	}
}


export class CreateTableOptionContext extends ParserRuleContext {
	public _option: Token;
	public _format: Token;
	public _method: Token;
	public engineRef(): EngineRefContext | undefined {
		return this.tryGetRuleContext(0, EngineRefContext);
	}
	public ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public SECONDARY_ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
	public NULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public equal(): EqualContext | undefined {
		return this.tryGetRuleContext(0, EqualContext);
	}
	public ulonglong_number(): Ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulonglong_numberContext);
	}
	public MAX_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
	public MIN_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public COMPRESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPRESSION_SYMBOL, 0); }
	public ENCRYPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
	public AUTO_INCREMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
	public ternaryOption(): TernaryOptionContext | undefined {
		return this.tryGetRuleContext(0, TernaryOptionContext);
	}
	public PACK_KEYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PACK_KEYS_SYMBOL, 0); }
	public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
	public STATS_PERSISTENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
	public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
	public CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
	public TABLE_CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
	public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
	public ROW_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL, 0); }
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public DYNAMIC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
	public FIXED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
	public COMPRESSED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPRESSED_SYMBOL, 0); }
	public REDUNDANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDUNDANT_SYMBOL, 0); }
	public COMPACT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPACT_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public tableRefList(): TableRefListContext | undefined {
		return this.tryGetRuleContext(0, TableRefListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public UNION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNION_SYMBOL, 0); }
	public defaultCharset(): DefaultCharsetContext | undefined {
		return this.tryGetRuleContext(0, DefaultCharsetContext);
	}
	public defaultCollation(): DefaultCollationContext | undefined {
		return this.tryGetRuleContext(0, DefaultCollationContext);
	}
	public INSERT_METHOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	public FIRST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
	public LAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public DISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
	public MEMORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
	public CONNECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createTableOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateTableOption) {
			listener.enterCreateTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateTableOption) {
			listener.exitCreateTableOption(this);
		}
	}
}


export class TernaryOptionContext extends ParserRuleContext {
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ternaryOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTernaryOption) {
			listener.enterTernaryOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTernaryOption) {
			listener.exitTernaryOption(this);
		}
	}
}


export class DefaultCollationContext extends ParserRuleContext {
	public COLLATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COLLATE_SYMBOL, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_defaultCollation; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDefaultCollation) {
			listener.enterDefaultCollation(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDefaultCollation) {
			listener.exitDefaultCollation(this);
		}
	}
}


export class DefaultEncryptionContext extends ParserRuleContext {
	public ENCRYPTION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_defaultEncryption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDefaultEncryption) {
			listener.enterDefaultEncryption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDefaultEncryption) {
			listener.exitDefaultEncryption(this);
		}
	}
}


export class DefaultCharsetContext extends ParserRuleContext {
	public charset(): CharsetContext {
		return this.getRuleContext(0, CharsetContext);
	}
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_defaultCharset; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDefaultCharset) {
			listener.enterDefaultCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDefaultCharset) {
			listener.exitDefaultCharset(this);
		}
	}
}


export class PartitionClauseContext extends ParserRuleContext {
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public partitionTypeDef(): PartitionTypeDefContext {
		return this.getRuleContext(0, PartitionTypeDefContext);
	}
	public PARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	public subPartitions(): SubPartitionsContext | undefined {
		return this.tryGetRuleContext(0, SubPartitionsContext);
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionClause) {
			listener.enterPartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionClause) {
			listener.exitPartitionClause(this);
		}
	}
}


export class PartitionTypeDefContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionTypeDef; }
	public copyFrom(ctx: PartitionTypeDefContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionDefKeyContext extends PartitionTypeDefContext {
	public KEY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public LINEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINEAR_SYMBOL, 0); }
	public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, PartitionKeyAlgorithmContext);
	}
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	constructor(ctx: PartitionTypeDefContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionDefKey) {
			listener.enterPartitionDefKey(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionDefKey) {
			listener.exitPartitionDefKey(this);
		}
	}
}
export class PartitionDefHashContext extends PartitionTypeDefContext {
	public HASH_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public bitExpr(): BitExprContext {
		return this.getRuleContext(0, BitExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public LINEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINEAR_SYMBOL, 0); }
	constructor(ctx: PartitionTypeDefContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionDefHash) {
			listener.enterPartitionDefHash(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionDefHash) {
			listener.exitPartitionDefHash(this);
		}
	}
}
export class PartitionDefRangeListContext extends PartitionTypeDefContext {
	public RANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RANGE_SYMBOL, 0); }
	public LIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LIST_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public bitExpr(): BitExprContext | undefined {
		return this.tryGetRuleContext(0, BitExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COLUMNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	constructor(ctx: PartitionTypeDefContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionDefRangeList) {
			listener.enterPartitionDefRangeList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionDefRangeList) {
			listener.exitPartitionDefRangeList(this);
		}
	}
}


export class SubPartitionsContext extends ParserRuleContext {
	public SUBPARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public HASH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public bitExpr(): BitExprContext | undefined {
		return this.tryGetRuleContext(0, BitExprContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListWithParenthesesContext);
	}
	public LINEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINEAR_SYMBOL, 0); }
	public SUBPARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | undefined {
		return this.tryGetRuleContext(0, PartitionKeyAlgorithmContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_subPartitions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSubPartitions) {
			listener.enterSubPartitions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSubPartitions) {
			listener.exitSubPartitions(this);
		}
	}
}


export class PartitionKeyAlgorithmContext extends ParserRuleContext {
	public ALGORITHM_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getRuleContext(0, Real_ulong_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionKeyAlgorithm; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionKeyAlgorithm) {
			listener.enterPartitionKeyAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionKeyAlgorithm) {
			listener.exitPartitionKeyAlgorithm(this);
		}
	}
}


export class PartitionDefinitionsContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionDefinitions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionDefinitions) {
			listener.enterPartitionDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionDefinitions) {
			listener.exitPartitionDefinitions(this);
		}
	}
}


export class PartitionDefinitionContext extends ParserRuleContext {
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public VALUES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_SYMBOL, 0); }
	public THAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.THAN_SYMBOL, 0); }
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public partitionValuesIn(): PartitionValuesInContext | undefined {
		return this.tryGetRuleContext(0, PartitionValuesInContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public partitionValueItemListParen(): PartitionValueItemListParenContext | undefined {
		return this.tryGetRuleContext(0, PartitionValueItemListParenContext);
	}
	public MAXVALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAXVALUE_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionDefinition) {
			listener.enterPartitionDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionDefinition) {
			listener.exitPartitionDefinition(this);
		}
	}
}


export class PartitionValuesInContext extends ParserRuleContext {
	public partitionValueItemListParen(): PartitionValueItemListParenContext[];
	public partitionValueItemListParen(i: number): PartitionValueItemListParenContext;
	public partitionValueItemListParen(i?: number): PartitionValueItemListParenContext | PartitionValueItemListParenContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionValueItemListParenContext);
		} else {
			return this.getRuleContext(i, PartitionValueItemListParenContext);
		}
	}
	public OPEN_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionValuesIn; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionValuesIn) {
			listener.enterPartitionValuesIn(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionValuesIn) {
			listener.exitPartitionValuesIn(this);
		}
	}
}


export class PartitionOptionContext extends ParserRuleContext {
	public _option: Token;
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public engineRef(): EngineRefContext | undefined {
		return this.tryGetRuleContext(0, EngineRefContext);
	}
	public ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public real_ulong_number(): Real_ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulong_numberContext);
	}
	public NODEGROUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
	public MAX_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
	public MIN_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public INDEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionOption) {
			listener.enterPartitionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionOption) {
			listener.exitPartitionOption(this);
		}
	}
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
	public SUBPARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_subpartitionDefinition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSubpartitionDefinition) {
			listener.enterSubpartitionDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSubpartitionDefinition) {
			listener.exitSubpartitionDefinition(this);
		}
	}
}


export class PartitionValueItemListParenContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public partitionValueItem(): PartitionValueItemContext[];
	public partitionValueItem(i: number): PartitionValueItemContext;
	public partitionValueItem(i?: number): PartitionValueItemContext | PartitionValueItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionValueItemContext);
		} else {
			return this.getRuleContext(i, PartitionValueItemContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionValueItemListParen; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionValueItemListParen) {
			listener.enterPartitionValueItemListParen(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionValueItemListParen) {
			listener.exitPartitionValueItemListParen(this);
		}
	}
}


export class PartitionValueItemContext extends ParserRuleContext {
	public bitExpr(): BitExprContext | undefined {
		return this.tryGetRuleContext(0, BitExprContext);
	}
	public MAXVALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAXVALUE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_partitionValueItem; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPartitionValueItem) {
			listener.enterPartitionValueItem(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPartitionValueItem) {
			listener.exitPartitionValueItem(this);
		}
	}
}


export class DefinerClauseContext extends ParserRuleContext {
	public DEFINER_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_definerClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDefinerClause) {
			listener.enterDefinerClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDefinerClause) {
			listener.exitDefinerClause(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	public IF_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.IF_SYMBOL, 0); }
	public EXISTS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ifExists; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIfExists) {
			listener.enterIfExists(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIfExists) {
			listener.exitIfExists(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	public IF_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.IF_SYMBOL, 0); }
	public notRule(): NotRuleContext {
		return this.getRuleContext(0, NotRuleContext);
	}
	public EXISTS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ifNotExists; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIfNotExists) {
			listener.enterIfNotExists(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIfNotExists) {
			listener.exitIfNotExists(this);
		}
	}
}


export class ProcedureParameterContext extends ParserRuleContext {
	public _type: Token;
	public functionParameter(): FunctionParameterContext {
		return this.getRuleContext(0, FunctionParameterContext);
	}
	public IN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
	public OUT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OUT_SYMBOL, 0); }
	public INOUT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INOUT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_procedureParameter; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterProcedureParameter) {
			listener.enterProcedureParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitProcedureParameter) {
			listener.exitProcedureParameter(this);
		}
	}
}


export class FunctionParameterContext extends ParserRuleContext {
	public parameterName(): ParameterNameContext {
		return this.getRuleContext(0, ParameterNameContext);
	}
	public typeWithOptCollate(): TypeWithOptCollateContext {
		return this.getRuleContext(0, TypeWithOptCollateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_functionParameter; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFunctionParameter) {
			listener.enterFunctionParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFunctionParameter) {
			listener.exitFunctionParameter(this);
		}
	}
}


export class CollateContext extends ParserRuleContext {
	public COLLATE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COLLATE_SYMBOL, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_collate; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCollate) {
			listener.enterCollate(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCollate) {
			listener.exitCollate(this);
		}
	}
}


export class TypeWithOptCollateContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public collate(): CollateContext | undefined {
		return this.tryGetRuleContext(0, CollateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_typeWithOptCollate; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTypeWithOptCollate) {
			listener.enterTypeWithOptCollate(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTypeWithOptCollate) {
			listener.exitTypeWithOptCollate(this);
		}
	}
}


export class SchemaIdentifierPairContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public schemaRef(): SchemaRefContext[];
	public schemaRef(i: number): SchemaRefContext;
	public schemaRef(i?: number): SchemaRefContext | SchemaRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SchemaRefContext);
		} else {
			return this.getRuleContext(i, SchemaRefContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_schemaIdentifierPair; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSchemaIdentifierPair) {
			listener.enterSchemaIdentifierPair(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSchemaIdentifierPair) {
			listener.exitSchemaIdentifierPair(this);
		}
	}
}


export class ViewRefListContext extends ParserRuleContext {
	public viewRef(): ViewRefContext[];
	public viewRef(i: number): ViewRefContext;
	public viewRef(i?: number): ViewRefContext | ViewRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ViewRefContext);
		} else {
			return this.getRuleContext(i, ViewRefContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewRefList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewRefList) {
			listener.enterViewRefList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewRefList) {
			listener.exitViewRefList(this);
		}
	}
}


export class UpdateListContext extends ParserRuleContext {
	public updateElement(): UpdateElementContext[];
	public updateElement(i: number): UpdateElementContext;
	public updateElement(i?: number): UpdateElementContext | UpdateElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdateElementContext);
		} else {
			return this.getRuleContext(i, UpdateElementContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_updateList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUpdateList) {
			listener.enterUpdateList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUpdateList) {
			listener.exitUpdateList(this);
		}
	}
}


export class UpdateElementContext extends ParserRuleContext {
	public columnRef(): ColumnRefContext {
		return this.getRuleContext(0, ColumnRefContext);
	}
	public EQUAL_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public DEFAULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_updateElement; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUpdateElement) {
			listener.enterUpdateElement(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUpdateElement) {
			listener.exitUpdateElement(this);
		}
	}
}


export class CharsetClauseContext extends ParserRuleContext {
	public charset(): CharsetContext {
		return this.getRuleContext(0, CharsetContext);
	}
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_charsetClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCharsetClause) {
			listener.enterCharsetClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCharsetClause) {
			listener.exitCharsetClause(this);
		}
	}
}


export class FieldsClauseContext extends ParserRuleContext {
	public COLUMNS_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
	public fieldTerm(): FieldTermContext[];
	public fieldTerm(i: number): FieldTermContext;
	public fieldTerm(i?: number): FieldTermContext | FieldTermContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FieldTermContext);
		} else {
			return this.getRuleContext(i, FieldTermContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldsClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldsClause) {
			listener.enterFieldsClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldsClause) {
			listener.exitFieldsClause(this);
		}
	}
}


export class FieldTermContext extends ParserRuleContext {
	public TERMINATED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TERMINATED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public textString(): TextStringContext {
		return this.getRuleContext(0, TextStringContext);
	}
	public ENCLOSED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENCLOSED_SYMBOL, 0); }
	public OPTIONALLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIONALLY_SYMBOL, 0); }
	public ESCAPED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ESCAPED_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldTerm; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldTerm) {
			listener.enterFieldTerm(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldTerm) {
			listener.exitFieldTerm(this);
		}
	}
}


export class LinesClauseContext extends ParserRuleContext {
	public LINES_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LINES_SYMBOL, 0); }
	public lineTerm(): LineTermContext[];
	public lineTerm(i: number): LineTermContext;
	public lineTerm(i?: number): LineTermContext | LineTermContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LineTermContext);
		} else {
			return this.getRuleContext(i, LineTermContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_linesClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLinesClause) {
			listener.enterLinesClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLinesClause) {
			listener.exitLinesClause(this);
		}
	}
}


export class LineTermContext extends ParserRuleContext {
	public BY_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public textString(): TextStringContext {
		return this.getRuleContext(0, TextStringContext);
	}
	public TERMINATED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TERMINATED_SYMBOL, 0); }
	public STARTING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STARTING_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lineTerm; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLineTerm) {
			listener.enterLineTerm(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLineTerm) {
			listener.exitLineTerm(this);
		}
	}
}


export class UserListContext extends ParserRuleContext {
	public user(): UserContext[];
	public user(i: number): UserContext;
	public user(i?: number): UserContext | UserContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserContext);
		} else {
			return this.getRuleContext(i, UserContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_userList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUserList) {
			listener.enterUserList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUserList) {
			listener.exitUserList(this);
		}
	}
}


export class CreateUserListContext extends ParserRuleContext {
	public createUserEntry(): CreateUserEntryContext[];
	public createUserEntry(i: number): CreateUserEntryContext;
	public createUserEntry(i?: number): CreateUserEntryContext | CreateUserEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateUserEntryContext);
		} else {
			return this.getRuleContext(i, CreateUserEntryContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createUserList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateUserList) {
			listener.enterCreateUserList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateUserList) {
			listener.exitCreateUserList(this);
		}
	}
}


export class AlterUserListContext extends ParserRuleContext {
	public alterUserEntry(): AlterUserEntryContext[];
	public alterUserEntry(i: number): AlterUserEntryContext;
	public alterUserEntry(i?: number): AlterUserEntryContext | AlterUserEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterUserEntryContext);
		} else {
			return this.getRuleContext(i, AlterUserEntryContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterUserList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterUserList) {
			listener.enterAlterUserList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterUserList) {
			listener.exitAlterUserList(this);
		}
	}
}


export class CreateUserEntryContext extends ParserRuleContext {
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public textString(): TextStringContext | undefined {
		return this.tryGetRuleContext(0, TextStringContext);
	}
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public RANDOM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RANDOM_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public textStringHash(): TextStringHashContext | undefined {
		return this.tryGetRuleContext(0, TextStringHashContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_createUserEntry; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterCreateUserEntry) {
			listener.enterCreateUserEntry(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitCreateUserEntry) {
			listener.exitCreateUserEntry(this);
		}
	}
}


export class AlterUserEntryContext extends ParserRuleContext {
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public BY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
	public textString(): TextStringContext[];
	public textString(i: number): TextStringContext;
	public textString(i?: number): TextStringContext | TextStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextStringContext);
		} else {
			return this.getRuleContext(i, TextStringContext);
		}
	}
	public WITH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
	public textOrIdentifier(): TextOrIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TextOrIdentifierContext);
	}
	public discardOldPassword(): DiscardOldPasswordContext | undefined {
		return this.tryGetRuleContext(0, DiscardOldPasswordContext);
	}
	public REPLACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public retainCurrentPassword(): RetainCurrentPasswordContext | undefined {
		return this.tryGetRuleContext(0, RetainCurrentPasswordContext);
	}
	public AS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
	public textStringHash(): TextStringHashContext | undefined {
		return this.tryGetRuleContext(0, TextStringHashContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_alterUserEntry; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterAlterUserEntry) {
			listener.enterAlterUserEntry(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitAlterUserEntry) {
			listener.exitAlterUserEntry(this);
		}
	}
}


export class RetainCurrentPasswordContext extends ParserRuleContext {
	public RETAIN_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.RETAIN_SYMBOL, 0); }
	public CURRENT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_retainCurrentPassword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRetainCurrentPassword) {
			listener.enterRetainCurrentPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRetainCurrentPassword) {
			listener.exitRetainCurrentPassword(this);
		}
	}
}


export class DiscardOldPasswordContext extends ParserRuleContext {
	public DISCARD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
	public OLD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OLD_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_discardOldPassword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDiscardOldPassword) {
			listener.enterDiscardOldPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDiscardOldPassword) {
			listener.exitDiscardOldPassword(this);
		}
	}
}


export class ReplacePasswordContext extends ParserRuleContext {
	public REPLACE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
	public textString(): TextStringContext {
		return this.getRuleContext(0, TextStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_replacePassword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReplacePassword) {
			listener.enterReplacePassword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReplacePassword) {
			listener.exitReplacePassword(this);
		}
	}
}


export class UserIdentifierOrTextContext extends ParserRuleContext {
	public textOrIdentifier(): TextOrIdentifierContext[];
	public textOrIdentifier(i: number): TextOrIdentifierContext;
	public textOrIdentifier(i?: number): TextOrIdentifierContext | TextOrIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextOrIdentifierContext);
		} else {
			return this.getRuleContext(i, TextOrIdentifierContext);
		}
	}
	public AT_SIGN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
	public AT_TEXT_SUFFIX(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_userIdentifierOrText; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUserIdentifierOrText) {
			listener.enterUserIdentifierOrText(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUserIdentifierOrText) {
			listener.exitUserIdentifierOrText(this);
		}
	}
}


export class UserContext extends ParserRuleContext {
	public userIdentifierOrText(): UserIdentifierOrTextContext | undefined {
		return this.tryGetRuleContext(0, UserIdentifierOrTextContext);
	}
	public CURRENT_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_USER_SYMBOL, 0); }
	public parentheses(): ParenthesesContext | undefined {
		return this.tryGetRuleContext(0, ParenthesesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_user; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUser) {
			listener.enterUser(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUser) {
			listener.exitUser(this);
		}
	}
}


export class LikeClauseContext extends ParserRuleContext {
	public LIKE_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_likeClause; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLikeClause) {
			listener.enterLikeClause(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLikeClause) {
			listener.exitLikeClause(this);
		}
	}
}


export class LikeOrWhereContext extends ParserRuleContext {
	public likeClause(): LikeClauseContext | undefined {
		return this.tryGetRuleContext(0, LikeClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_likeOrWhere; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLikeOrWhere) {
			listener.enterLikeOrWhere(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLikeOrWhere) {
			listener.exitLikeOrWhere(this);
		}
	}
}


export class OnlineOptionContext extends ParserRuleContext {
	public ONLINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONLINE_SYMBOL, 0); }
	public OFFLINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OFFLINE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_onlineOption; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOnlineOption) {
			listener.enterOnlineOption(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOnlineOption) {
			listener.exitOnlineOption(this);
		}
	}
}


export class NoWriteToBinLogContext extends ParserRuleContext {
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public NO_WRITE_TO_BINLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_noWriteToBinLog; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNoWriteToBinLog) {
			listener.enterNoWriteToBinLog(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNoWriteToBinLog) {
			listener.exitNoWriteToBinLog(this);
		}
	}
}


export class UsePartitionContext extends ParserRuleContext {
	public PARTITION_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		return this.getRuleContext(0, IdentifierListWithParenthesesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_usePartition; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUsePartition) {
			listener.enterUsePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUsePartition) {
			listener.exitUsePartition(this);
		}
	}
}


export class FieldIdentifierContext extends ParserRuleContext {
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_fieldIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFieldIdentifier) {
			listener.enterFieldIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFieldIdentifier) {
			listener.exitFieldIdentifier(this);
		}
	}
}


export class ColumnNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public fieldIdentifier(): FieldIdentifierContext | undefined {
		return this.tryGetRuleContext(0, FieldIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnName) {
			listener.enterColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnName) {
			listener.exitColumnName(this);
		}
	}
}


export class ColumnInternalRefContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnInternalRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnInternalRef) {
			listener.enterColumnInternalRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnInternalRef) {
			listener.exitColumnInternalRef(this);
		}
	}
}


export class ColumnInternalRefListContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public columnInternalRef(): ColumnInternalRefContext[];
	public columnInternalRef(i: number): ColumnInternalRefContext;
	public columnInternalRef(i?: number): ColumnInternalRefContext | ColumnInternalRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnInternalRefContext);
		} else {
			return this.getRuleContext(i, ColumnInternalRefContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnInternalRefList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnInternalRefList) {
			listener.enterColumnInternalRefList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnInternalRefList) {
			listener.exitColumnInternalRefList(this);
		}
	}
}


export class ColumnRefContext extends ParserRuleContext {
	public fieldIdentifier(): FieldIdentifierContext {
		return this.getRuleContext(0, FieldIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_columnRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterColumnRef) {
			listener.enterColumnRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitColumnRef) {
			listener.exitColumnRef(this);
		}
	}
}


export class InsertIdentifierContext extends ParserRuleContext {
	public columnRef(): ColumnRefContext | undefined {
		return this.tryGetRuleContext(0, ColumnRefContext);
	}
	public tableWild(): TableWildContext | undefined {
		return this.tryGetRuleContext(0, TableWildContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_insertIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterInsertIdentifier) {
			listener.enterInsertIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitInsertIdentifier) {
			listener.exitInsertIdentifier(this);
		}
	}
}


export class IndexNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexName) {
			listener.enterIndexName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexName) {
			listener.exitIndexName(this);
		}
	}
}


export class IndexRefContext extends ParserRuleContext {
	public fieldIdentifier(): FieldIdentifierContext {
		return this.getRuleContext(0, FieldIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_indexRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIndexRef) {
			listener.enterIndexRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIndexRef) {
			listener.exitIndexRef(this);
		}
	}
}


export class TableWildContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT_SYMBOL(): TerminalNode[];
	public DOT_SYMBOL(i: number): TerminalNode;
	public DOT_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.DOT_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.DOT_SYMBOL, i);
		}
	}
	public MULT_OPERATOR(): TerminalNode { return this.getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableWild; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableWild) {
			listener.enterTableWild(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableWild) {
			listener.exitTableWild(this);
		}
	}
}


export class SchemaNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_schemaName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSchemaName) {
			listener.enterSchemaName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSchemaName) {
			listener.exitSchemaName(this);
		}
	}
}


export class SchemaRefContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_schemaRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSchemaRef) {
			listener.enterSchemaRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSchemaRef) {
			listener.exitSchemaRef(this);
		}
	}
}


export class ProcedureNameContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_procedureName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterProcedureName) {
			listener.enterProcedureName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitProcedureName) {
			listener.exitProcedureName(this);
		}
	}
}


export class ProcedureRefContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_procedureRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterProcedureRef) {
			listener.enterProcedureRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitProcedureRef) {
			listener.exitProcedureRef(this);
		}
	}
}


export class FunctionNameContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_functionName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFunctionName) {
			listener.enterFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFunctionName) {
			listener.exitFunctionName(this);
		}
	}
}


export class FunctionRefContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_functionRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFunctionRef) {
			listener.enterFunctionRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFunctionRef) {
			listener.exitFunctionRef(this);
		}
	}
}


export class TriggerNameContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_triggerName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTriggerName) {
			listener.enterTriggerName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTriggerName) {
			listener.exitTriggerName(this);
		}
	}
}


export class TriggerRefContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_triggerRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTriggerRef) {
			listener.enterTriggerRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTriggerRef) {
			listener.exitTriggerRef(this);
		}
	}
}


export class ViewNameContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewName) {
			listener.enterViewName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewName) {
			listener.exitViewName(this);
		}
	}
}


export class ViewRefContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_viewRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterViewRef) {
			listener.enterViewRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitViewRef) {
			listener.exitViewRef(this);
		}
	}
}


export class TablespaceNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tablespaceName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTablespaceName) {
			listener.enterTablespaceName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTablespaceName) {
			listener.exitTablespaceName(this);
		}
	}
}


export class TablespaceRefContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tablespaceRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTablespaceRef) {
			listener.enterTablespaceRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTablespaceRef) {
			listener.exitTablespaceRef(this);
		}
	}
}


export class LogfileGroupNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_logfileGroupName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLogfileGroupName) {
			listener.enterLogfileGroupName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLogfileGroupName) {
			listener.exitLogfileGroupName(this);
		}
	}
}


export class LogfileGroupRefContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_logfileGroupRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLogfileGroupRef) {
			listener.enterLogfileGroupRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLogfileGroupRef) {
			listener.exitLogfileGroupRef(this);
		}
	}
}


export class EventNameContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_eventName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterEventName) {
			listener.enterEventName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitEventName) {
			listener.exitEventName(this);
		}
	}
}


export class EventRefContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getRuleContext(0, QualifiedIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_eventRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterEventRef) {
			listener.enterEventRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitEventRef) {
			listener.exitEventRef(this);
		}
	}
}


export class UdfNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_udfName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUdfName) {
			listener.enterUdfName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUdfName) {
			listener.exitUdfName(this);
		}
	}
}


export class ServerNameContext extends ParserRuleContext {
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_serverName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterServerName) {
			listener.enterServerName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitServerName) {
			listener.exitServerName(this);
		}
	}
}


export class ServerRefContext extends ParserRuleContext {
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_serverRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterServerRef) {
			listener.enterServerRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitServerRef) {
			listener.exitServerRef(this);
		}
	}
}


export class EngineRefContext extends ParserRuleContext {
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getRuleContext(0, TextOrIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_engineRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterEngineRef) {
			listener.enterEngineRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitEngineRef) {
			listener.exitEngineRef(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableName) {
			listener.enterTableName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableName) {
			listener.exitTableName(this);
		}
	}
}


export class FilterTableRefContext extends ParserRuleContext {
	public schemaRef(): SchemaRefContext {
		return this.getRuleContext(0, SchemaRefContext);
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_filterTableRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFilterTableRef) {
			listener.enterFilterTableRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFilterTableRef) {
			listener.exitFilterTableRef(this);
		}
	}
}


export class TableRefWithWildcardContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
	public MULT_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableRefWithWildcard; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableRefWithWildcard) {
			listener.enterTableRefWithWildcard(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableRefWithWildcard) {
			listener.exitTableRefWithWildcard(this);
		}
	}
}


export class TableRefContext extends ParserRuleContext {
	public qualifiedIdentifier(): QualifiedIdentifierContext | undefined {
		return this.tryGetRuleContext(0, QualifiedIdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableRef) {
			listener.enterTableRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableRef) {
			listener.exitTableRef(this);
		}
	}
}


export class TableRefListContext extends ParserRuleContext {
	public tableRef(): TableRefContext[];
	public tableRef(i: number): TableRefContext;
	public tableRef(i?: number): TableRefContext | TableRefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableRefContext);
		} else {
			return this.getRuleContext(i, TableRefContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableRefList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableRefList) {
			listener.enterTableRefList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableRefList) {
			listener.exitTableRefList(this);
		}
	}
}


export class TableAliasRefListContext extends ParserRuleContext {
	public tableRefWithWildcard(): TableRefWithWildcardContext[];
	public tableRefWithWildcard(i: number): TableRefWithWildcardContext;
	public tableRefWithWildcard(i?: number): TableRefWithWildcardContext | TableRefWithWildcardContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableRefWithWildcardContext);
		} else {
			return this.getRuleContext(i, TableRefWithWildcardContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_tableAliasRefList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTableAliasRefList) {
			listener.enterTableAliasRefList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTableAliasRefList) {
			listener.exitTableAliasRefList(this);
		}
	}
}


export class ParameterNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_parameterName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterParameterName) {
			listener.enterParameterName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitParameterName) {
			listener.exitParameterName(this);
		}
	}
}


export class LabelIdentifierContext extends ParserRuleContext {
	public pureIdentifier(): PureIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PureIdentifierContext);
	}
	public labelKeyword(): LabelKeywordContext | undefined {
		return this.tryGetRuleContext(0, LabelKeywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_labelIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLabelIdentifier) {
			listener.enterLabelIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLabelIdentifier) {
			listener.exitLabelIdentifier(this);
		}
	}
}


export class LabelRefContext extends ParserRuleContext {
	public labelIdentifier(): LabelIdentifierContext {
		return this.getRuleContext(0, LabelIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_labelRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLabelRef) {
			listener.enterLabelRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLabelRef) {
			listener.exitLabelRef(this);
		}
	}
}


export class RoleIdentifierContext extends ParserRuleContext {
	public pureIdentifier(): PureIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PureIdentifierContext);
	}
	public roleKeyword(): RoleKeywordContext | undefined {
		return this.tryGetRuleContext(0, RoleKeywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleIdentifier) {
			listener.enterRoleIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleIdentifier) {
			listener.exitRoleIdentifier(this);
		}
	}
}


export class RoleRefContext extends ParserRuleContext {
	public roleIdentifier(): RoleIdentifierContext {
		return this.getRuleContext(0, RoleIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleRef) {
			listener.enterRoleRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleRef) {
			listener.exitRoleRef(this);
		}
	}
}


export class PluginRefContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_pluginRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPluginRef) {
			listener.enterPluginRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPluginRef) {
			listener.exitPluginRef(this);
		}
	}
}


export class ComponentRefContext extends ParserRuleContext {
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_componentRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterComponentRef) {
			listener.enterComponentRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitComponentRef) {
			listener.exitComponentRef(this);
		}
	}
}


export class ResourceGroupRefContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_resourceGroupRef; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterResourceGroupRef) {
			listener.enterResourceGroupRef(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitResourceGroupRef) {
			listener.exitResourceGroupRef(this);
		}
	}
}


export class WindowNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_windowName; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterWindowName) {
			listener.enterWindowName(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitWindowName) {
			listener.exitWindowName(this);
		}
	}
}


export class PureIdentifierContext extends ParserRuleContext {
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIER, 0); }
	public BACK_TICK_QUOTED_ID(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BACK_TICK_QUOTED_ID, 0); }
	public DOUBLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DOUBLE_QUOTED_TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_pureIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPureIdentifier) {
			listener.enterPureIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPureIdentifier) {
			listener.exitPureIdentifier(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public pureIdentifier(): PureIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PureIdentifierContext);
	}
	public identifierKeyword(): IdentifierKeywordContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
}


export class IdentifierListContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierList) {
			listener.enterIdentifierList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierList) {
			listener.exitIdentifierList(this);
		}
	}
}


export class IdentifierListWithParenthesesContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierListWithParentheses; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierListWithParentheses) {
			listener.enterIdentifierListWithParentheses(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierListWithParentheses) {
			listener.exitIdentifierListWithParentheses(this);
		}
	}
}


export class QualifiedIdentifierContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DotIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_qualifiedIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterQualifiedIdentifier) {
			listener.enterQualifiedIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitQualifiedIdentifier) {
			listener.exitQualifiedIdentifier(this);
		}
	}
}


export class SimpleIdentifierContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public dotIdentifier(): DotIdentifierContext[];
	public dotIdentifier(i: number): DotIdentifierContext;
	public dotIdentifier(i?: number): DotIdentifierContext | DotIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DotIdentifierContext);
		} else {
			return this.getRuleContext(i, DotIdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_simpleIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSimpleIdentifier) {
			listener.enterSimpleIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSimpleIdentifier) {
			listener.exitSimpleIdentifier(this);
		}
	}
}


export class DotIdentifierContext extends ParserRuleContext {
	public DOT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_dotIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterDotIdentifier) {
			listener.enterDotIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitDotIdentifier) {
			listener.exitDotIdentifier(this);
		}
	}
}


export class Ulong_numberContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
	public LONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
	public ULONGLONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
	public DECIMAL_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
	public FLOAT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLOAT_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ulong_number; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUlong_number) {
			listener.enterUlong_number(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUlong_number) {
			listener.exitUlong_number(this);
		}
	}
}


export class Real_ulong_numberContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
	public LONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
	public ULONGLONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_real_ulong_number; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReal_ulong_number) {
			listener.enterReal_ulong_number(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReal_ulong_number) {
			listener.exitReal_ulong_number(this);
		}
	}
}


export class Ulonglong_numberContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public LONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
	public ULONGLONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
	public DECIMAL_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
	public FLOAT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLOAT_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_ulonglong_number; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterUlonglong_number) {
			listener.enterUlonglong_number(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitUlonglong_number) {
			listener.exitUlonglong_number(this);
		}
	}
}


export class Real_ulonglong_numberContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
	public ULONGLONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
	public LONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_real_ulonglong_number; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterReal_ulonglong_number) {
			listener.enterReal_ulonglong_number(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitReal_ulonglong_number) {
			listener.exitReal_ulonglong_number(this);
		}
	}
}


export class LiteralContext extends ParserRuleContext {
	public textLiteral(): TextLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextLiteralContext);
	}
	public numLiteral(): NumLiteralContext | undefined {
		return this.tryGetRuleContext(0, NumLiteralContext);
	}
	public temporalLiteral(): TemporalLiteralContext | undefined {
		return this.tryGetRuleContext(0, TemporalLiteralContext);
	}
	public nullLiteral(): NullLiteralContext | undefined {
		return this.tryGetRuleContext(0, NullLiteralContext);
	}
	public boolLiteral(): BoolLiteralContext | undefined {
		return this.tryGetRuleContext(0, BoolLiteralContext);
	}
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
	public BIN_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIN_NUMBER, 0); }
	public UNDERSCORE_CHARSET(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDERSCORE_CHARSET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_literal; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLiteral) {
			listener.enterLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLiteral) {
			listener.exitLiteral(this);
		}
	}
}


export class SignedLiteralContext extends ParserRuleContext {
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public PLUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
	public ulong_number(): Ulong_numberContext | undefined {
		return this.tryGetRuleContext(0, Ulong_numberContext);
	}
	public MINUS_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_signedLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSignedLiteral) {
			listener.enterSignedLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSignedLiteral) {
			listener.exitSignedLiteral(this);
		}
	}
}


export class StringListContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public textString(): TextStringContext[];
	public textString(i: number): TextStringContext;
	public textString(i?: number): TextStringContext | TextStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextStringContext);
		} else {
			return this.getRuleContext(i, TextStringContext);
		}
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_stringList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStringList) {
			listener.enterStringList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStringList) {
			listener.exitStringList(this);
		}
	}
}


export class TextStringLiteralContext extends ParserRuleContext {
	public _value: Token;
	public SINGLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT, 0); }
	public DOUBLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DOUBLE_QUOTED_TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textStringLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextStringLiteral) {
			listener.enterTextStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextStringLiteral) {
			listener.exitTextStringLiteral(this);
		}
	}
}


export class TextStringContext extends ParserRuleContext {
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
	public BIN_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIN_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textString; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextString) {
			listener.enterTextString(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextString) {
			listener.exitTextString(this);
		}
	}
}


export class TextStringHashContext extends ParserRuleContext {
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textStringHash; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextStringHash) {
			listener.enterTextStringHash(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextStringHash) {
			listener.exitTextStringHash(this);
		}
	}
}


export class TextLiteralContext extends ParserRuleContext {
	public textStringLiteral(): TextStringLiteralContext[];
	public textStringLiteral(i: number): TextStringLiteralContext;
	public textStringLiteral(i?: number): TextStringLiteralContext | TextStringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextStringLiteralContext);
		} else {
			return this.getRuleContext(i, TextStringLiteralContext);
		}
	}
	public NCHAR_TEXT(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NCHAR_TEXT, 0); }
	public UNDERSCORE_CHARSET(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDERSCORE_CHARSET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextLiteral) {
			listener.enterTextLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextLiteral) {
			listener.exitTextLiteral(this);
		}
	}
}


export class TextStringNoLinebreakContext extends ParserRuleContext {
	public textStringLiteral(): TextStringLiteralContext {
		return this.getRuleContext(0, TextStringLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textStringNoLinebreak; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextStringNoLinebreak) {
			listener.enterTextStringNoLinebreak(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextStringNoLinebreak) {
			listener.exitTextStringNoLinebreak(this);
		}
	}
}


export class TextStringLiteralListContext extends ParserRuleContext {
	public textStringLiteral(): TextStringLiteralContext[];
	public textStringLiteral(i: number): TextStringLiteralContext;
	public textStringLiteral(i?: number): TextStringLiteralContext | TextStringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextStringLiteralContext);
		} else {
			return this.getRuleContext(i, TextStringLiteralContext);
		}
	}
	public COMMA_SYMBOL(): TerminalNode[];
	public COMMA_SYMBOL(i: number): TerminalNode;
	public COMMA_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.COMMA_SYMBOL);
		} else {
			return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textStringLiteralList; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextStringLiteralList) {
			listener.enterTextStringLiteralList(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextStringLiteralList) {
			listener.exitTextStringLiteralList(this);
		}
	}
}


export class NumLiteralContext extends ParserRuleContext {
	public INT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
	public LONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
	public ULONGLONG_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
	public DECIMAL_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
	public FLOAT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLOAT_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_numLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNumLiteral) {
			listener.enterNumLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNumLiteral) {
			listener.exitNumLiteral(this);
		}
	}
}


export class BoolLiteralContext extends ParserRuleContext {
	public TRUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRUE_SYMBOL, 0); }
	public FALSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FALSE_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_boolLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterBoolLiteral) {
			listener.enterBoolLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitBoolLiteral) {
			listener.exitBoolLiteral(this);
		}
	}
}


export class NullLiteralContext extends ParserRuleContext {
	public NULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
	public NULL2_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULL2_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_nullLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterNullLiteral) {
			listener.enterNullLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitNullLiteral) {
			listener.exitNullLiteral(this);
		}
	}
}


export class TemporalLiteralContext extends ParserRuleContext {
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public SINGLE_QUOTED_TEXT(): TerminalNode { return this.getToken(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_temporalLiteral; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTemporalLiteral) {
			listener.enterTemporalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTemporalLiteral) {
			listener.exitTemporalLiteral(this);
		}
	}
}


export class FloatOptionsContext extends ParserRuleContext {
	public fieldLength(): FieldLengthContext | undefined {
		return this.tryGetRuleContext(0, FieldLengthContext);
	}
	public precision(): PrecisionContext | undefined {
		return this.tryGetRuleContext(0, PrecisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_floatOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterFloatOptions) {
			listener.enterFloatOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitFloatOptions) {
			listener.exitFloatOptions(this);
		}
	}
}


export class StandardFloatOptionsContext extends ParserRuleContext {
	public precision(): PrecisionContext {
		return this.getRuleContext(0, PrecisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_standardFloatOptions; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterStandardFloatOptions) {
			listener.enterStandardFloatOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitStandardFloatOptions) {
			listener.exitStandardFloatOptions(this);
		}
	}
}


export class PrecisionContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public INT_NUMBER(): TerminalNode[];
	public INT_NUMBER(i: number): TerminalNode;
	public INT_NUMBER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MultiQueryMySQLParser.INT_NUMBER);
		} else {
			return this.getToken(MultiQueryMySQLParser.INT_NUMBER, i);
		}
	}
	public COMMA_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_precision; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterPrecision) {
			listener.enterPrecision(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitPrecision) {
			listener.exitPrecision(this);
		}
	}
}


export class TextOrIdentifierContext extends ParserRuleContext {
	public SINGLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_textOrIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterTextOrIdentifier) {
			listener.enterTextOrIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitTextOrIdentifier) {
			listener.exitTextOrIdentifier(this);
		}
	}
}


export class LValueIdentifierContext extends ParserRuleContext {
	public pureIdentifier(): PureIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PureIdentifierContext);
	}
	public lValueKeyword(): LValueKeywordContext | undefined {
		return this.tryGetRuleContext(0, LValueKeywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lValueIdentifier; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLValueIdentifier) {
			listener.enterLValueIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLValueIdentifier) {
			listener.exitLValueIdentifier(this);
		}
	}
}


export class RoleIdentifierOrTextContext extends ParserRuleContext {
	public roleIdentifier(): RoleIdentifierContext | undefined {
		return this.tryGetRuleContext(0, RoleIdentifierContext);
	}
	public textStringLiteral(): TextStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, TextStringLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleIdentifierOrText; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleIdentifierOrText) {
			listener.enterRoleIdentifierOrText(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleIdentifierOrText) {
			listener.exitRoleIdentifierOrText(this);
		}
	}
}


export class SizeNumberContext extends ParserRuleContext {
	public real_ulonglong_number(): Real_ulonglong_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
	}
	public pureIdentifier(): PureIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PureIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_sizeNumber; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSizeNumber) {
			listener.enterSizeNumber(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSizeNumber) {
			listener.exitSizeNumber(this);
		}
	}
}


export class ParenthesesContext extends ParserRuleContext {
	public OPEN_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
	public CLOSE_PAR_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_parentheses; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterParentheses) {
			listener.enterParentheses(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitParentheses) {
			listener.exitParentheses(this);
		}
	}
}


export class EqualContext extends ParserRuleContext {
	public EQUAL_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
	public ASSIGN_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASSIGN_OPERATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_equal; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterEqual) {
			listener.enterEqual(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitEqual) {
			listener.exitEqual(this);
		}
	}
}


export class OptionTypeContext extends ParserRuleContext {
	public PERSIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
	public PERSIST_ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL, 0); }
	public GLOBAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public SESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_optionType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterOptionType) {
			listener.enterOptionType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitOptionType) {
			listener.exitOptionType(this);
		}
	}
}


export class VarIdentTypeContext extends ParserRuleContext {
	public GLOBAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
	public DOT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public SESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_varIdentType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterVarIdentType) {
			listener.enterVarIdentType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitVarIdentType) {
			listener.exitVarIdentType(this);
		}
	}
}


export class SetVarIdentTypeContext extends ParserRuleContext {
	public PERSIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
	public DOT_SYMBOL(): TerminalNode { return this.getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
	public PERSIST_ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL, 0); }
	public GLOBAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public SESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_setVarIdentType; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterSetVarIdentType) {
			listener.enterSetVarIdentType(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitSetVarIdentType) {
			listener.exitSetVarIdentType(this);
		}
	}
}


export class IdentifierKeywordContext extends ParserRuleContext {
	public labelKeyword(): LabelKeywordContext | undefined {
		return this.tryGetRuleContext(0, LabelKeywordContext);
	}
	public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | undefined {
		return this.tryGetRuleContext(0, RoleOrIdentifierKeywordContext);
	}
	public EXECUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
	public SHUTDOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
	public RESTART_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTART_SYMBOL, 0); }
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
	}
	public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous1RolesAndLabelsContext);
	}
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
	}
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
	}
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierKeyword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierKeyword) {
			listener.enterIdentifierKeyword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierKeyword) {
			listener.exitIdentifierKeyword(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
	public EXECUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
	public RESTART_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTART_SYMBOL, 0); }
	public SHUTDOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels) {
			listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels) {
			listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
	public ASCII_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
	public BEGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
	public BYTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BYTE_SYMBOL, 0); }
	public CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
	public CHARSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
	public CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
	public CLONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLONE_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public COMMIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
	public CONTAINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
	public DEALLOCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEALLOCATE_SYMBOL, 0); }
	public DO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
	public END_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	public FLUSH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLUSH_SYMBOL, 0); }
	public FOLLOWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOLLOWS_SYMBOL, 0); }
	public HANDLER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
	public HELP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HELP_SYMBOL, 0); }
	public IMPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
	public INSTALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTALL_SYMBOL, 0); }
	public LANGUAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	public PRECEDES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECEDES_SYMBOL, 0); }
	public PREPARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
	public REPAIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
	public RESET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESET_SYMBOL, 0); }
	public ROLLBACK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
	public SAVEPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SAVEPOINT_SYMBOL, 0); }
	public SIGNED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SIGNED_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	public START_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
	public STOP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
	public TRUNCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
	public UNICODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNICODE_SYMBOL, 0); }
	public UNINSTALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNINSTALL_SYMBOL, 0); }
	public XA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XA_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous2Labels; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierKeywordsAmbiguous2Labels) {
			listener.enterIdentifierKeywordsAmbiguous2Labels(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierKeywordsAmbiguous2Labels) {
			listener.exitIdentifierKeywordsAmbiguous2Labels(this);
		}
	}
}


export class LabelKeywordContext extends ParserRuleContext {
	public roleOrLabelKeyword(): RoleOrLabelKeywordContext | undefined {
		return this.tryGetRuleContext(0, RoleOrLabelKeywordContext);
	}
	public EVENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILE_SYMBOL, 0); }
	public NONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
	public PROCESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCESS_SYMBOL, 0); }
	public PROXY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
	public RELOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELOAD_SYMBOL, 0); }
	public REPLICATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
	public RESOURCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
	public SUPER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
	}
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
	}
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_labelKeyword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLabelKeyword) {
			listener.enterLabelKeyword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLabelKeyword) {
			listener.exitLabelKeyword(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
	public EVENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
	public FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILE_SYMBOL, 0); }
	public NONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
	public PROCESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCESS_SYMBOL, 0); }
	public PROXY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
	public RELOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELOAD_SYMBOL, 0); }
	public REPLICATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
	public RESOURCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
	public SUPER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous3Roles; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierKeywordsAmbiguous3Roles) {
			listener.enterIdentifierKeywordsAmbiguous3Roles(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierKeywordsAmbiguous3Roles) {
			listener.exitIdentifierKeywordsAmbiguous3Roles(this);
		}
	}
}


export class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
	public ACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACTION_SYMBOL, 0); }
	public ACCOUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACCOUNT_SYMBOL, 0); }
	public ACTIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACTIVE_SYMBOL, 0); }
	public ADDDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADDDATE_SYMBOL, 0); }
	public ADMIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADMIN_SYMBOL, 0); }
	public AFTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
	public AGAINST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AGAINST_SYMBOL, 0); }
	public AGGREGATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AGGREGATE_SYMBOL, 0); }
	public ALGORITHM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
	public ALWAYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALWAYS_SYMBOL, 0); }
	public ANY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANY_SYMBOL, 0); }
	public AT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SYMBOL, 0); }
	public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
	public AUTO_INCREMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
	public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
	public AVG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AVG_SYMBOL, 0); }
	public BACKUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BACKUP_SYMBOL, 0); }
	public BINLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
	public BIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIT_SYMBOL, 0); }
	public BLOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BLOCK_SYMBOL, 0); }
	public BOOLEAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
	public BOOL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOL_SYMBOL, 0); }
	public BTREE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BTREE_SYMBOL, 0); }
	public BUCKETS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BUCKETS_SYMBOL, 0); }
	public CASCADED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADED_SYMBOL, 0); }
	public CATALOG_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CATALOG_NAME_SYMBOL, 0); }
	public CHAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
	public CHANGED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANGED_SYMBOL, 0); }
	public CHANNEL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANNEL_SYMBOL, 0); }
	public CIPHER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CIPHER_SYMBOL, 0); }
	public CLASS_ORIGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
	public CLIENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLIENT_SYMBOL, 0); }
	public CLOSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
	public COALESCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
	public CODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CODE_SYMBOL, 0); }
	public COLLATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
	public COLUMNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
	public COLUMN_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
	public COLUMN_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_NAME_SYMBOL, 0); }
	public COMMITTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMITTED_SYMBOL, 0); }
	public COMPACT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPACT_SYMBOL, 0); }
	public COMPLETION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
	public COMPONENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPONENT_SYMBOL, 0); }
	public COMPRESSED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPRESSED_SYMBOL, 0); }
	public COMPRESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPRESSION_SYMBOL, 0); }
	public CONCURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONCURRENT_SYMBOL, 0); }
	public CONNECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
	public CONSISTENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSISTENT_SYMBOL, 0); }
	public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
	public CONSTRAINT_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
	public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
	public CONTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTEXT_SYMBOL, 0); }
	public CPU_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CPU_SYMBOL, 0); }
	public CURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public CURSOR_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURSOR_NAME_SYMBOL, 0); }
	public DATAFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public DATETIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public DAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
	public DEFAULT_AUTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
	public DEFINER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
	public DEFINITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFINITION_SYMBOL, 0); }
	public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
	public DESCRIPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESCRIPTION_SYMBOL, 0); }
	public DIAGNOSTICS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public DISABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
	public DISCARD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
	public DISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
	public DUMPFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DUMPFILE_SYMBOL, 0); }
	public DUPLICATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DUPLICATE_SYMBOL, 0); }
	public DYNAMIC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
	public ENABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
	public ENCRYPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
	public ENDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENDS_SYMBOL, 0); }
	public ENFORCED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENFORCED_SYMBOL, 0); }
	public ENGINES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINES_SYMBOL, 0); }
	public ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public ENUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENUM_SYMBOL, 0); }
	public ERRORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERRORS_SYMBOL, 0); }
	public ERROR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
	public ESCAPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ESCAPE_SYMBOL, 0); }
	public EVENTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENTS_SYMBOL, 0); }
	public EVERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVERY_SYMBOL, 0); }
	public EXCHANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXCHANGE_SYMBOL, 0); }
	public EXCLUDE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXCLUDE_SYMBOL, 0); }
	public EXPANSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPANSION_SYMBOL, 0); }
	public EXPIRE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPIRE_SYMBOL, 0); }
	public EXPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPORT_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public EXTENT_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL, 0); }
	public FAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FAST_SYMBOL, 0); }
	public FAULTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FAULTS_SYMBOL, 0); }
	public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
	public FILTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILTER_SYMBOL, 0); }
	public FIRST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
	public FIXED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
	public FOLLOWING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOLLOWING_SYMBOL, 0); }
	public FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
	public FOUND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOUND_SYMBOL, 0); }
	public FULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
	public GENERAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GENERAL_SYMBOL, 0); }
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
	public GEOMETRY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRY_SYMBOL, 0); }
	public GET_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GET_FORMAT_SYMBOL, 0); }
	public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
	public GRANTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANTS_SYMBOL, 0); }
	public GROUP_REPLICATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
	public HASH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
	public HISTOGRAM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HISTOGRAM_SYMBOL, 0); }
	public HISTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HISTORY_SYMBOL, 0); }
	public HOSTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
	public HOST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOST_SYMBOL, 0); }
	public HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
	public INACTIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INACTIVE_SYMBOL, 0); }
	public INDEXES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEXES_SYMBOL, 0); }
	public INITIAL_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
	public INSERT_METHOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL, 0); }
	public INSTANCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
	public INVISIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVISIBLE_SYMBOL, 0); }
	public INVOKER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
	public IO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IO_SYMBOL, 0); }
	public IPC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IPC_SYMBOL, 0); }
	public ISOLATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ISOLATION_SYMBOL, 0); }
	public ISSUER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ISSUER_SYMBOL, 0); }
	public JSON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
	public LAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
	public LEAVES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_SYMBOL, 0); }
	public LEVEL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
	public LINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
	public LIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LIST_SYMBOL, 0); }
	public LOCKED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCKED_SYMBOL, 0); }
	public LOCKS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCKS_SYMBOL, 0); }
	public LOGFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
	public LOGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
	public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
	public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
	public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
	public MASTER_DELAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL, 0); }
	public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
	public MASTER_HOST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_HOST_SYMBOL, 0); }
	public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
	public MASTER_LOG_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
	public MASTER_LOG_POS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
	public MASTER_PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
	public MASTER_PORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PORT_SYMBOL, 0); }
	public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
	public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
	public MASTER_SERVER_ID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
	public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
	public MASTER_SSL_CA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
	public MASTER_SSL_CERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
	public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
	public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
	public MASTER_SSL_CRL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
	public MASTER_SSL_KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
	public MASTER_SSL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_SYMBOL, 0); }
	public MASTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
	public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
	public MASTER_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_USER_SYMBOL, 0); }
	public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
	public MAX_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
	public MAX_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_SIZE_SYMBOL, 0); }
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
	public MEDIUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEDIUM_SYMBOL, 0); }
	public MEMORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
	public MERGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MERGE_SYMBOL, 0); }
	public MESSAGE_TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
	public MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
	public MIGRATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIGRATE_SYMBOL, 0); }
	public MINUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
	public MIN_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
	public MODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
	public MODIFY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODIFY_SYMBOL, 0); }
	public MONTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
	public MULTILINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
	public MULTIPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
	public MULTIPOLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
	public MUTEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MUTEX_SYMBOL, 0); }
	public MYSQL_ERRNO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
	public NAMES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAMES_SYMBOL, 0); }
	public NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
	public NATIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
	public NCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
	public NDBCLUSTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NDBCLUSTER_SYMBOL, 0); }
	public NESTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NESTED_SYMBOL, 0); }
	public NEVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEVER_SYMBOL, 0); }
	public NEW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEW_SYMBOL, 0); }
	public NEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
	public NODEGROUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
	public NOWAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOWAIT_SYMBOL, 0); }
	public NO_WAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_WAIT_SYMBOL, 0); }
	public NULLS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULLS_SYMBOL, 0); }
	public NUMBER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NUMBER_SYMBOL, 0); }
	public NVARCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NVARCHAR_SYMBOL, 0); }
	public OFFSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OFFSET_SYMBOL, 0); }
	public OJ_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OJ_SYMBOL, 0); }
	public OLD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OLD_SYMBOL, 0); }
	public ONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONE_SYMBOL, 0); }
	public ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
	public OPEN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
	public OPTIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIONAL_SYMBOL, 0); }
	public OPTIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIONS_SYMBOL, 0); }
	public ORDINALITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORDINALITY_SYMBOL, 0); }
	public ORGANIZATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORGANIZATION_SYMBOL, 0); }
	public OTHERS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OTHERS_SYMBOL, 0); }
	public OWNER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OWNER_SYMBOL, 0); }
	public PACK_KEYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PACK_KEYS_SYMBOL, 0); }
	public PAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PAGE_SYMBOL, 0); }
	public PARSER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARSER_SYMBOL, 0); }
	public PARTIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTIAL_SYMBOL, 0); }
	public PARTITIONING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
	public PARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public PATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PATH_SYMBOL, 0); }
	public PHASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PHASE_SYMBOL, 0); }
	public PLUGINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGINS_SYMBOL, 0); }
	public PLUGIN_DIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL, 0); }
	public PLUGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGIN_SYMBOL, 0); }
	public POINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
	public POLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
	public PORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PORT_SYMBOL, 0); }
	public PRECEDING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECEDING_SYMBOL, 0); }
	public PRESERVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
	public PREV_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREV_SYMBOL, 0); }
	public PRIVILEGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
	public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
	public PROCESSLIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCESSLIST_SYMBOL, 0); }
	public PROFILES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROFILES_SYMBOL, 0); }
	public PROFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROFILE_SYMBOL, 0); }
	public QUARTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public QUICK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
	public READ_ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_ONLY_SYMBOL, 0); }
	public REBUILD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REBUILD_SYMBOL, 0); }
	public RECOVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RECOVER_SYMBOL, 0); }
	public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
	public REDUNDANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDUNDANT_SYMBOL, 0); }
	public REFERENCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REFERENCE_SYMBOL, 0); }
	public RELAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_SYMBOL, 0); }
	public RELAYLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAYLOG_SYMBOL, 0); }
	public RELAY_LOG_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
	public RELAY_LOG_POS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
	public RELAY_THREAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_THREAD_SYMBOL, 0); }
	public REMOVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REMOVE_SYMBOL, 0); }
	public REORGANIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
	public REPEATABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPEATABLE_SYMBOL, 0); }
	public REPLICATE_DO_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
	public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
	public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
	public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
	public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
	public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
	public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
	public USER_RESOURCES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_RESOURCES_SYMBOL, 0); }
	public RESPECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESPECT_SYMBOL, 0); }
	public RESTORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTORE_SYMBOL, 0); }
	public RESUME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESUME_SYMBOL, 0); }
	public RETAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETAIN_SYMBOL, 0); }
	public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
	public RETURNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
	public REUSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REUSE_SYMBOL, 0); }
	public REVERSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public ROLLUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLUP_SYMBOL, 0); }
	public ROTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROTATE_SYMBOL, 0); }
	public ROUTINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROUTINE_SYMBOL, 0); }
	public ROW_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
	public ROW_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL, 0); }
	public RTREE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RTREE_SYMBOL, 0); }
	public SCHEDULE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
	public SCHEMA_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL, 0); }
	public SECONDARY_ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
	public SECONDARY_LOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
	public SECONDARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_SYMBOL, 0); }
	public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
	public SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
	public SECURITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
	public SERIALIZABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL, 0); }
	public SERIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
	public SERVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
	public SHARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
	public SIMPLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SIMPLE_SYMBOL, 0); }
	public SKIP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SKIP_SYMBOL, 0); }
	public SLOW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLOW_SYMBOL, 0); }
	public SNAPSHOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SNAPSHOT_SYMBOL, 0); }
	public SOCKET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOCKET_SYMBOL, 0); }
	public SONAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
	public SOUNDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOUNDS_SYMBOL, 0); }
	public SOURCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOURCE_SYMBOL, 0); }
	public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
	public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
	public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
	public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
	public SQL_NO_CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
	public SQL_THREAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_THREAD_SYMBOL, 0); }
	public SRID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SRID_SYMBOL, 0); }
	public STACKED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STACKED_SYMBOL, 0); }
	public STARTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STARTS_SYMBOL, 0); }
	public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
	public STATS_PERSISTENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
	public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
	public STATUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public STRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STRING_SYMBOL, 0); }
	public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
	public SUBDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBDATE_SYMBOL, 0); }
	public SUBJECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBJECT_SYMBOL, 0); }
	public SUBPARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL, 0); }
	public SUBPARTITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
	public SUSPEND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUSPEND_SYMBOL, 0); }
	public SWAPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SWAPS_SYMBOL, 0); }
	public SWITCHES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SWITCHES_SYMBOL, 0); }
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public TABLE_CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
	public TABLE_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_NAME_SYMBOL, 0); }
	public TEMPORARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
	public TEMPTABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPTABLE_SYMBOL, 0); }
	public TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
	public THAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.THAN_SYMBOL, 0); }
	public THREAD_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
	public TIES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIES_SYMBOL, 0); }
	public TIMESTAMP_ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
	public TIMESTAMP_DIFF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
	public TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public TRANSACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
	public TRIGGERS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRIGGERS_SYMBOL, 0); }
	public TYPES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TYPES_SYMBOL, 0); }
	public TYPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
	public UNBOUNDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
	public UNCOMMITTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNCOMMITTED_SYMBOL, 0); }
	public UNDEFINED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDEFINED_SYMBOL, 0); }
	public UNDOFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
	public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
	public UNKNOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNKNOWN_SYMBOL, 0); }
	public UNTIL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
	public UPGRADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public USE_FRM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USE_FRM_SYMBOL, 0); }
	public VALIDATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALIDATION_SYMBOL, 0); }
	public VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
	public VARIABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARIABLES_SYMBOL, 0); }
	public VCPU_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VCPU_SYMBOL, 0); }
	public VIEW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public VISIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VISIBLE_SYMBOL, 0); }
	public WAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WAIT_SYMBOL, 0); }
	public WARNINGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WARNINGS_SYMBOL, 0); }
	public WEEK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
	public WEIGHT_STRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL, 0); }
	public WITHOUT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITHOUT_SYMBOL, 0); }
	public WORK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
	public WRAPPER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WRAPPER_SYMBOL, 0); }
	public X509_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.X509_SYMBOL, 0); }
	public XID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XID_SYMBOL, 0); }
	public XML_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XML_SYMBOL, 0); }
	public YEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierKeywordsUnambiguous; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierKeywordsUnambiguous) {
			listener.enterIdentifierKeywordsUnambiguous(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierKeywordsUnambiguous) {
			listener.exitIdentifierKeywordsUnambiguous(this);
		}
	}
}


export class RoleKeywordContext extends ParserRuleContext {
	public roleOrLabelKeyword(): RoleOrLabelKeywordContext | undefined {
		return this.tryGetRuleContext(0, RoleOrLabelKeywordContext);
	}
	public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | undefined {
		return this.tryGetRuleContext(0, RoleOrIdentifierKeywordContext);
	}
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
	}
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
	}
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleKeyword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleKeyword) {
			listener.enterRoleKeyword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleKeyword) {
			listener.exitRoleKeyword(this);
		}
	}
}


export class LValueKeywordContext extends ParserRuleContext {
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
	}
	public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous1RolesAndLabelsContext);
	}
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
	}
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | undefined {
		return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_lValueKeyword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterLValueKeyword) {
			listener.enterLValueKeyword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitLValueKeyword) {
			listener.exitLValueKeyword(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
	public GLOBAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public PERSIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
	public PERSIST_ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL, 0); }
	public SESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterIdentifierKeywordsAmbiguous4SystemVariables) {
			listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitIdentifierKeywordsAmbiguous4SystemVariables) {
			listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}
}


export class RoleOrIdentifierKeywordContext extends ParserRuleContext {
	public ACCOUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACCOUNT_SYMBOL, 0); }
	public ASCII_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
	public ALWAYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALWAYS_SYMBOL, 0); }
	public BACKUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BACKUP_SYMBOL, 0); }
	public BEGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
	public BYTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BYTE_SYMBOL, 0); }
	public CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
	public CHARSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
	public CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
	public CLONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLONE_SYMBOL, 0); }
	public CLOSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
	public COMMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
	public COMMIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
	public CONTAINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
	public DEALLOCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEALLOCATE_SYMBOL, 0); }
	public DO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
	public END_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
	public FLUSH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FLUSH_SYMBOL, 0); }
	public FOLLOWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOLLOWS_SYMBOL, 0); }
	public FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
	public GROUP_REPLICATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
	public HANDLER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
	public HELP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HELP_SYMBOL, 0); }
	public HOST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOST_SYMBOL, 0); }
	public INSTALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTALL_SYMBOL, 0); }
	public INVISIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVISIBLE_SYMBOL, 0); }
	public LANGUAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
	public NO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
	public OPEN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
	public OPTIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIONS_SYMBOL, 0); }
	public OWNER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OWNER_SYMBOL, 0); }
	public PARSER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARSER_SYMBOL, 0); }
	public PARTITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
	public PORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PORT_SYMBOL, 0); }
	public PRECEDES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECEDES_SYMBOL, 0); }
	public PREPARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
	public REMOVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REMOVE_SYMBOL, 0); }
	public REPAIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
	public RESET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESET_SYMBOL, 0); }
	public RESTORE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESTORE_SYMBOL, 0); }
	public ROLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
	public ROLLBACK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
	public SAVEPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SAVEPOINT_SYMBOL, 0); }
	public SECONDARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_SYMBOL, 0); }
	public SECONDARY_ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
	public SECONDARY_LOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
	public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
	public SECURITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
	public SERVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
	public SIGNED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SIGNED_SYMBOL, 0); }
	public SOCKET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOCKET_SYMBOL, 0); }
	public SLAVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
	public SONAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
	public START_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
	public STOP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
	public TRUNCATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
	public UNICODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNICODE_SYMBOL, 0); }
	public UNINSTALL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNINSTALL_SYMBOL, 0); }
	public UPGRADE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
	public VISIBLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VISIBLE_SYMBOL, 0); }
	public WRAPPER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WRAPPER_SYMBOL, 0); }
	public XA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XA_SYMBOL, 0); }
	public SHUTDOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
	public IMPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleOrIdentifierKeyword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleOrIdentifierKeyword) {
			listener.enterRoleOrIdentifierKeyword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleOrIdentifierKeyword) {
			listener.exitRoleOrIdentifierKeyword(this);
		}
	}
}


export class RoleOrLabelKeywordContext extends ParserRuleContext {
	public ACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACTION_SYMBOL, 0); }
	public ACTIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ACTIVE_SYMBOL, 0); }
	public ADDDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADDDATE_SYMBOL, 0); }
	public AFTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
	public AGAINST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AGAINST_SYMBOL, 0); }
	public AGGREGATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AGGREGATE_SYMBOL, 0); }
	public ALGORITHM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
	public ANALYSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANALYSE_SYMBOL, 0); }
	public ANY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ANY_SYMBOL, 0); }
	public AT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AT_SYMBOL, 0); }
	public AUTHORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTHORS_SYMBOL, 0); }
	public AUTO_INCREMENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
	public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
	public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
	public AVG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.AVG_SYMBOL, 0); }
	public BINLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
	public BIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BIT_SYMBOL, 0); }
	public BLOCK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BLOCK_SYMBOL, 0); }
	public BOOL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOL_SYMBOL, 0); }
	public BOOLEAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
	public BTREE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BTREE_SYMBOL, 0); }
	public BUCKETS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.BUCKETS_SYMBOL, 0); }
	public CASCADED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CASCADED_SYMBOL, 0); }
	public CATALOG_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CATALOG_NAME_SYMBOL, 0); }
	public CHAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
	public CHANGED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANGED_SYMBOL, 0); }
	public CHANNEL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CHANNEL_SYMBOL, 0); }
	public CIPHER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CIPHER_SYMBOL, 0); }
	public CLIENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLIENT_SYMBOL, 0); }
	public CLASS_ORIGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
	public COALESCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
	public CODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CODE_SYMBOL, 0); }
	public COLLATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
	public COLUMN_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_NAME_SYMBOL, 0); }
	public COLUMN_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
	public COLUMNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
	public COMMITTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMMITTED_SYMBOL, 0); }
	public COMPACT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPACT_SYMBOL, 0); }
	public COMPLETION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
	public COMPONENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPONENT_SYMBOL, 0); }
	public COMPRESSED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPRESSED_SYMBOL, 0); }
	public COMPRESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.COMPRESSION_SYMBOL, 0); }
	public CONCURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONCURRENT_SYMBOL, 0); }
	public CONNECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
	public CONSISTENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSISTENT_SYMBOL, 0); }
	public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
	public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
	public CONSTRAINT_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
	public CONTEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTEXT_SYMBOL, 0); }
	public CONTRIBUTORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CONTRIBUTORS_SYMBOL, 0); }
	public CPU_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CPU_SYMBOL, 0); }
	public CURRENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
	public CURSOR_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CURSOR_NAME_SYMBOL, 0); }
	public DATA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
	public DATAFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
	public DATETIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
	public DATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
	public DAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
	public DEFAULT_AUTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
	public DEFINER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
	public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
	public DES_KEY_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DES_KEY_FILE_SYMBOL, 0); }
	public DESCRIPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DESCRIPTION_SYMBOL, 0); }
	public DIAGNOSTICS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL, 0); }
	public DIRECTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
	public DISABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
	public DISCARD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
	public DISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
	public DUMPFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DUMPFILE_SYMBOL, 0); }
	public DUPLICATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DUPLICATE_SYMBOL, 0); }
	public DYNAMIC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
	public ENCRYPTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
	public ENDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENDS_SYMBOL, 0); }
	public ENUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENUM_SYMBOL, 0); }
	public ENGINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
	public ENGINES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENGINES_SYMBOL, 0); }
	public ERROR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
	public ERRORS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ERRORS_SYMBOL, 0); }
	public ESCAPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ESCAPE_SYMBOL, 0); }
	public EVENTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVENTS_SYMBOL, 0); }
	public EVERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EVERY_SYMBOL, 0); }
	public EXCLUDE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXCLUDE_SYMBOL, 0); }
	public EXPANSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPANSION_SYMBOL, 0); }
	public EXPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPORT_SYMBOL, 0); }
	public EXTENDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
	public EXTENT_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL, 0); }
	public FAULTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FAULTS_SYMBOL, 0); }
	public FAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FAST_SYMBOL, 0); }
	public FOLLOWING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOLLOWING_SYMBOL, 0); }
	public FOUND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FOUND_SYMBOL, 0); }
	public ENABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
	public FULL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
	public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
	public FILTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FILTER_SYMBOL, 0); }
	public FIRST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
	public FIXED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
	public GENERAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GENERAL_SYMBOL, 0); }
	public GEOMETRY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRY_SYMBOL, 0); }
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
	public GET_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GET_FORMAT_SYMBOL, 0); }
	public GRANTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GRANTS_SYMBOL, 0); }
	public GLOBAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
	public HASH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
	public HISTOGRAM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HISTOGRAM_SYMBOL, 0); }
	public HISTORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HISTORY_SYMBOL, 0); }
	public HOSTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
	public HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
	public IDENTIFIED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
	public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
	public INVOKER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
	public INDEXES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INDEXES_SYMBOL, 0); }
	public INITIAL_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
	public INSTANCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
	public INACTIVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INACTIVE_SYMBOL, 0); }
	public IO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IO_SYMBOL, 0); }
	public IPC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IPC_SYMBOL, 0); }
	public ISOLATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ISOLATION_SYMBOL, 0); }
	public ISSUER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ISSUER_SYMBOL, 0); }
	public INSERT_METHOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL, 0); }
	public JSON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
	public LAST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
	public LEAVES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LESS_SYMBOL, 0); }
	public LEVEL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
	public LINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
	public LIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LIST_SYMBOL, 0); }
	public LOCAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
	public LOCKED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCKED_SYMBOL, 0); }
	public LOCKS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOCKS_SYMBOL, 0); }
	public LOGFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
	public LOGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
	public MAX_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
	public MASTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
	public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
	public MASTER_HOST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_HOST_SYMBOL, 0); }
	public MASTER_PORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PORT_SYMBOL, 0); }
	public MASTER_LOG_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
	public MASTER_LOG_POS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
	public MASTER_USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_USER_SYMBOL, 0); }
	public MASTER_PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
	public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
	public MASTER_SERVER_ID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
	public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
	public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
	public MASTER_DELAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL, 0); }
	public MASTER_SSL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_SYMBOL, 0); }
	public MASTER_SSL_CA_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
	public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
	public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
	public MASTER_SSL_CERT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
	public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
	public MASTER_SSL_CRL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
	public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
	public MASTER_SSL_KEY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
	public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
	public MAX_STATEMENT_TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
	public MAX_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_SIZE_SYMBOL, 0); }
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
	public MEDIUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEDIUM_SYMBOL, 0); }
	public MEMORY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
	public MERGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MERGE_SYMBOL, 0); }
	public MESSAGE_TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
	public MICROSECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
	public MIGRATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIGRATE_SYMBOL, 0); }
	public MINUTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
	public MIN_ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
	public MODIFY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODIFY_SYMBOL, 0); }
	public MODE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
	public MONTH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
	public MULTILINESTRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
	public MULTIPOINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
	public MULTIPOLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
	public MUTEX_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MUTEX_SYMBOL, 0); }
	public MYSQL_ERRNO_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
	public NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
	public NAMES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NAMES_SYMBOL, 0); }
	public NATIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
	public NCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
	public NDBCLUSTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NDBCLUSTER_SYMBOL, 0); }
	public NESTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NESTED_SYMBOL, 0); }
	public NEVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEVER_SYMBOL, 0); }
	public NEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
	public NEW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NEW_SYMBOL, 0); }
	public NO_WAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NO_WAIT_SYMBOL, 0); }
	public NODEGROUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
	public NULLS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NULLS_SYMBOL, 0); }
	public NOWAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NOWAIT_SYMBOL, 0); }
	public NUMBER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NUMBER_SYMBOL, 0); }
	public NVARCHAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.NVARCHAR_SYMBOL, 0); }
	public OFFSET_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OFFSET_SYMBOL, 0); }
	public OLD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OLD_SYMBOL, 0); }
	public OLD_PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL, 0); }
	public ONE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONE_SYMBOL, 0); }
	public OPTIONAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OPTIONAL_SYMBOL, 0); }
	public ORDINALITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORDINALITY_SYMBOL, 0); }
	public ORGANIZATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ORGANIZATION_SYMBOL, 0); }
	public OTHERS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.OTHERS_SYMBOL, 0); }
	public PACK_KEYS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PACK_KEYS_SYMBOL, 0); }
	public PAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PAGE_SYMBOL, 0); }
	public PARTIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTIAL_SYMBOL, 0); }
	public PARTITIONING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
	public PARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
	public PASSWORD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
	public PATH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PATH_SYMBOL, 0); }
	public PHASE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PHASE_SYMBOL, 0); }
	public PLUGIN_DIR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL, 0); }
	public PLUGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGIN_SYMBOL, 0); }
	public PLUGINS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PLUGINS_SYMBOL, 0); }
	public POINT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
	public POLYGON_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
	public PRECEDING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRECEDING_SYMBOL, 0); }
	public PRESERVE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
	public PREV_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PREV_SYMBOL, 0); }
	public THREAD_PRIORITY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
	public PRIVILEGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
	public PROCESSLIST_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROCESSLIST_SYMBOL, 0); }
	public PROFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROFILE_SYMBOL, 0); }
	public PROFILES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.PROFILES_SYMBOL, 0); }
	public QUARTER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
	public QUERY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
	public QUICK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
	public READ_ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.READ_ONLY_SYMBOL, 0); }
	public REBUILD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REBUILD_SYMBOL, 0); }
	public RECOVER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RECOVER_SYMBOL, 0); }
	public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
	public REDOFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDOFILE_SYMBOL, 0); }
	public REDUNDANT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REDUNDANT_SYMBOL, 0); }
	public RELAY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_SYMBOL, 0); }
	public RELAYLOG_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAYLOG_SYMBOL, 0); }
	public RELAY_LOG_FILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
	public RELAY_LOG_POS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
	public RELAY_THREAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RELAY_THREAD_SYMBOL, 0); }
	public REMOTE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REMOTE_SYMBOL, 0); }
	public REORGANIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
	public REPEATABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPEATABLE_SYMBOL, 0); }
	public REPLICATE_DO_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
	public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
	public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
	public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
	public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
	public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
	public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
	public USER_RESOURCES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_RESOURCES_SYMBOL, 0); }
	public RESPECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESPECT_SYMBOL, 0); }
	public RESUME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RESUME_SYMBOL, 0); }
	public RETAIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETAIN_SYMBOL, 0); }
	public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
	public RETURNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
	public REUSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REUSE_SYMBOL, 0); }
	public REVERSE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
	public ROLLUP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROLLUP_SYMBOL, 0); }
	public ROTATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROTATE_SYMBOL, 0); }
	public ROUTINE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROUTINE_SYMBOL, 0); }
	public ROW_COUNT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
	public ROW_FORMAT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL, 0); }
	public RTREE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.RTREE_SYMBOL, 0); }
	public SCHEDULE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
	public SCHEMA_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL, 0); }
	public SECOND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
	public SERIAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
	public SERIALIZABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL, 0); }
	public SESSION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
	public SHARE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
	public SIMPLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SIMPLE_SYMBOL, 0); }
	public SKIP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SKIP_SYMBOL, 0); }
	public SLOW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SLOW_SYMBOL, 0); }
	public SNAPSHOT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SNAPSHOT_SYMBOL, 0); }
	public SOUNDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOUNDS_SYMBOL, 0); }
	public SOURCE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SOURCE_SYMBOL, 0); }
	public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
	public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
	public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
	public SQL_CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_CACHE_SYMBOL, 0); }
	public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
	public SQL_NO_CACHE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
	public SQL_THREAD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SQL_THREAD_SYMBOL, 0); }
	public SRID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SRID_SYMBOL, 0); }
	public STACKED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STACKED_SYMBOL, 0); }
	public STARTS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STARTS_SYMBOL, 0); }
	public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
	public STATS_PERSISTENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
	public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
	public STATUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
	public STORAGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
	public STRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.STRING_SYMBOL, 0); }
	public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
	public SUBDATE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBDATE_SYMBOL, 0); }
	public SUBJECT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBJECT_SYMBOL, 0); }
	public SUBPARTITION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
	public SUBPARTITIONS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL, 0); }
	public SUPER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
	public SUSPEND_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SUSPEND_SYMBOL, 0); }
	public SWAPS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SWAPS_SYMBOL, 0); }
	public SWITCHES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SWITCHES_SYMBOL, 0); }
	public TABLE_NAME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_NAME_SYMBOL, 0); }
	public TABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
	public TABLE_CHECKSUM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
	public TABLESPACE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
	public TEMPORARY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
	public TEMPTABLE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEMPTABLE_SYMBOL, 0); }
	public TEXT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
	public THAN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.THAN_SYMBOL, 0); }
	public TIES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIES_SYMBOL, 0); }
	public TRANSACTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
	public TRIGGERS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TRIGGERS_SYMBOL, 0); }
	public TIMESTAMP_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
	public TIMESTAMP_ADD_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
	public TIMESTAMP_DIFF_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
	public TIME_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
	public TYPES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TYPES_SYMBOL, 0); }
	public TYPE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
	public UDF_RETURNS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UDF_RETURNS_SYMBOL, 0); }
	public UNBOUNDED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
	public UNCOMMITTED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNCOMMITTED_SYMBOL, 0); }
	public UNDEFINED_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDEFINED_SYMBOL, 0); }
	public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
	public UNDOFILE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
	public UNKNOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNKNOWN_SYMBOL, 0); }
	public UNTIL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
	public USER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
	public USE_FRM_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.USE_FRM_SYMBOL, 0); }
	public VARIABLES_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VARIABLES_SYMBOL, 0); }
	public VCPU_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VCPU_SYMBOL, 0); }
	public VIEW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
	public VALUE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
	public WARNINGS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WARNINGS_SYMBOL, 0); }
	public WAIT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WAIT_SYMBOL, 0); }
	public WEEK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
	public WORK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
	public WEIGHT_STRING_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL, 0); }
	public X509_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.X509_SYMBOL, 0); }
	public XID_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XID_SYMBOL, 0); }
	public XML_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.XML_SYMBOL, 0); }
	public YEAR_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
	public SHUTDOWN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
	public CUBE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.CUBE_SYMBOL, 0); }
	public IMPORT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
	public FUNCTION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
	public ROWS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
	public ROW_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
	public EXCHANGE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXCHANGE_SYMBOL, 0); }
	public EXPIRE_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.EXPIRE_SYMBOL, 0); }
	public ONLY_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
	public VALIDATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.VALIDATION_SYMBOL, 0); }
	public WITHOUT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.WITHOUT_SYMBOL, 0); }
	public ADMIN_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MultiQueryMySQLParser.ADMIN_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MultiQueryMySQLParser.RULE_roleOrLabelKeyword; }
	// @Override
	public enterRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.enterRoleOrLabelKeyword) {
			listener.enterRoleOrLabelKeyword(this);
		}
	}
	// @Override
	public exitRule(listener: MultiQueryMySQLParserListener): void {
		if (listener.exitRoleOrLabelKeyword) {
			listener.exitRoleOrLabelKeyword(this);
		}
	}
}


