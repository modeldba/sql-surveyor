// Generated from grammars/plpgsql/PLpgSQLParser.g4 by ANTLR 4.7.3-SNAPSHOT

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { PLpgSQLParserListener } from "./PLpgSQLParserListener";

export class PLpgSQLParser extends Parser {
	public static readonly ABORT = 1;
	public static readonly ABSOLUTE = 2;
	public static readonly ACCESS = 3;
	public static readonly ACTION = 4;
	public static readonly ADD = 5;
	public static readonly ADMIN = 6;
	public static readonly AFTER = 7;
	public static readonly AGGREGATE = 8;
	public static readonly ALSO = 9;
	public static readonly ALTER = 10;
	public static readonly ALWAYS = 11;
	public static readonly ASSERTION = 12;
	public static readonly ASSIGNMENT = 13;
	public static readonly AT = 14;
	public static readonly ATTACH = 15;
	public static readonly ATTRIBUTE = 16;
	public static readonly BACKWARD = 17;
	public static readonly BEFORE = 18;
	public static readonly BEGIN = 19;
	public static readonly BY = 20;
	public static readonly CACHE = 21;
	public static readonly CALL = 22;
	public static readonly CALLED = 23;
	public static readonly CASCADE = 24;
	public static readonly CASCADED = 25;
	public static readonly CATALOG = 26;
	public static readonly CHAIN = 27;
	public static readonly CHARACTERISTICS = 28;
	public static readonly CHECKPOINT = 29;
	public static readonly CLASS = 30;
	public static readonly CLOSE = 31;
	public static readonly CLUSTER = 32;
	public static readonly COLUMNS = 33;
	public static readonly COMMENT = 34;
	public static readonly COMMENTS = 35;
	public static readonly COMMIT = 36;
	public static readonly COMMITTED = 37;
	public static readonly CONFIGURATION = 38;
	public static readonly CONFLICT = 39;
	public static readonly CONNECTION = 40;
	public static readonly CONSTRAINTS = 41;
	public static readonly CONTENT = 42;
	public static readonly CONTINUE = 43;
	public static readonly CONVERSION = 44;
	public static readonly COPY = 45;
	public static readonly COST = 46;
	public static readonly CSV = 47;
	public static readonly CUBE = 48;
	public static readonly CURRENT = 49;
	public static readonly CURSOR = 50;
	public static readonly CYCLE = 51;
	public static readonly DATA = 52;
	public static readonly DATABASE = 53;
	public static readonly DAY = 54;
	public static readonly DEALLOCATE = 55;
	public static readonly DECLARE = 56;
	public static readonly DEFAULTS = 57;
	public static readonly DEFERRED = 58;
	public static readonly DEFINER = 59;
	public static readonly DELETE = 60;
	public static readonly DELIMITER = 61;
	public static readonly DELIMITERS = 62;
	public static readonly DEPENDS = 63;
	public static readonly DETACH = 64;
	public static readonly DICTIONARY = 65;
	public static readonly DISABLE = 66;
	public static readonly DISCARD = 67;
	public static readonly DOCUMENT = 68;
	public static readonly DOMAIN = 69;
	public static readonly DOUBLE = 70;
	public static readonly DROP = 71;
	public static readonly EACH = 72;
	public static readonly ENABLE = 73;
	public static readonly ENCODING = 74;
	public static readonly ENCRYPTED = 75;
	public static readonly ENUM = 76;
	public static readonly ESCAPE = 77;
	public static readonly EVENT = 78;
	public static readonly EXCLUDE = 79;
	public static readonly EXCLUDING = 80;
	public static readonly EXCLUSIVE = 81;
	public static readonly EXECUTE = 82;
	public static readonly EXPLAIN = 83;
	public static readonly EXTENSION = 84;
	public static readonly EXTERNAL = 85;
	public static readonly FAMILY = 86;
	public static readonly FILTER = 87;
	public static readonly FIRST = 88;
	public static readonly FOLLOWING = 89;
	public static readonly FORCE = 90;
	public static readonly FORWARD = 91;
	public static readonly FUNCTION = 92;
	public static readonly FUNCTIONS = 93;
	public static readonly GENERATED = 94;
	public static readonly GLOBAL = 95;
	public static readonly GRANTED = 96;
	public static readonly GROUPS = 97;
	public static readonly HANDLER = 98;
	public static readonly HEADER = 99;
	public static readonly HOLD = 100;
	public static readonly HOUR = 101;
	public static readonly IDENTITY = 102;
	public static readonly IF = 103;
	public static readonly IMMEDIATE = 104;
	public static readonly IMMUTABLE = 105;
	public static readonly IMPLICIT = 106;
	public static readonly IMPORT = 107;
	public static readonly INCLUDE = 108;
	public static readonly INCLUDING = 109;
	public static readonly INCREMENT = 110;
	public static readonly INDEX = 111;
	public static readonly INDEXES = 112;
	public static readonly INHERIT = 113;
	public static readonly INHERITS = 114;
	public static readonly INLINE = 115;
	public static readonly INPUT = 116;
	public static readonly INSENSITIVE = 117;
	public static readonly INSERT = 118;
	public static readonly INSTEAD = 119;
	public static readonly INVOKER = 120;
	public static readonly ISOLATION = 121;
	public static readonly KEY = 122;
	public static readonly LABEL = 123;
	public static readonly LANGUAGE = 124;
	public static readonly LARGE = 125;
	public static readonly LAST = 126;
	public static readonly LEAKPROOF = 127;
	public static readonly LEVEL = 128;
	public static readonly LISTEN = 129;
	public static readonly LOAD = 130;
	public static readonly LOCAL = 131;
	public static readonly LOCATION = 132;
	public static readonly LOCK = 133;
	public static readonly LOCKED = 134;
	public static readonly LOGGED = 135;
	public static readonly MAPPING = 136;
	public static readonly MATCH = 137;
	public static readonly MATERIALIZED = 138;
	public static readonly MAXVALUE = 139;
	public static readonly METHOD = 140;
	public static readonly MINUTE = 141;
	public static readonly MINVALUE = 142;
	public static readonly MODE = 143;
	public static readonly MONTH = 144;
	public static readonly MOVE = 145;
	public static readonly NAME = 146;
	public static readonly NAMES = 147;
	public static readonly NEW = 148;
	public static readonly NEXT = 149;
	public static readonly NO = 150;
	public static readonly NOTHING = 151;
	public static readonly NOTIFY = 152;
	public static readonly NOWAIT = 153;
	public static readonly NULLS = 154;
	public static readonly OBJECT = 155;
	public static readonly OF = 156;
	public static readonly OFF = 157;
	public static readonly OIDS = 158;
	public static readonly OLD = 159;
	public static readonly OPERATOR = 160;
	public static readonly OPTION = 161;
	public static readonly OPTIONS = 162;
	public static readonly ORDINALITY = 163;
	public static readonly OTHERS = 164;
	public static readonly OVER = 165;
	public static readonly OVERRIDING = 166;
	public static readonly OWNED = 167;
	public static readonly OWNER = 168;
	public static readonly PARALLEL = 169;
	public static readonly PARSER = 170;
	public static readonly PARTIAL = 171;
	public static readonly PARTITION = 172;
	public static readonly PASSING = 173;
	public static readonly PASSWORD = 174;
	public static readonly PLANS = 175;
	public static readonly POLICY = 176;
	public static readonly PRECEDING = 177;
	public static readonly PREPARE = 178;
	public static readonly PREPARED = 179;
	public static readonly PRESERVE = 180;
	public static readonly PRIOR = 181;
	public static readonly PRIVILEGES = 182;
	public static readonly PROCEDURAL = 183;
	public static readonly PROCEDURE = 184;
	public static readonly PROCEDURES = 185;
	public static readonly PROGRAM = 186;
	public static readonly PUBLICATION = 187;
	public static readonly QUOTE = 188;
	public static readonly RANGE = 189;
	public static readonly READ = 190;
	public static readonly REASSIGN = 191;
	public static readonly RECHECK = 192;
	public static readonly RECURSIVE = 193;
	public static readonly REF = 194;
	public static readonly REFERENCING = 195;
	public static readonly REFRESH = 196;
	public static readonly REINDEX = 197;
	public static readonly RELATIVE = 198;
	public static readonly RELEASE = 199;
	public static readonly RENAME = 200;
	public static readonly REPEATABLE = 201;
	public static readonly REPLACE = 202;
	public static readonly REPLICA = 203;
	public static readonly RESET = 204;
	public static readonly RESTART = 205;
	public static readonly RESTRICT = 206;
	public static readonly RETURNS = 207;
	public static readonly REVOKE = 208;
	public static readonly ROLE = 209;
	public static readonly ROLLBACK = 210;
	public static readonly ROLLUP = 211;
	public static readonly ROUTINE = 212;
	public static readonly ROUTINES = 213;
	public static readonly ROWS = 214;
	public static readonly RULE = 215;
	public static readonly SAVEPOINT = 216;
	public static readonly SCHEMA = 217;
	public static readonly SCHEMAS = 218;
	public static readonly SCROLL = 219;
	public static readonly SEARCH = 220;
	public static readonly SECOND = 221;
	public static readonly SECURITY = 222;
	public static readonly SEQUENCE = 223;
	public static readonly SEQUENCES = 224;
	public static readonly SERIALIZABLE = 225;
	public static readonly SERVER = 226;
	public static readonly SESSION = 227;
	public static readonly SET = 228;
	public static readonly SETS = 229;
	public static readonly SHARE = 230;
	public static readonly SHOW = 231;
	public static readonly SIMPLE = 232;
	public static readonly SKIP_ = 233;
	public static readonly SNAPSHOT = 234;
	public static readonly SQL = 235;
	public static readonly STABLE = 236;
	public static readonly STANDALONE = 237;
	public static readonly START = 238;
	public static readonly STATEMENT = 239;
	public static readonly STATISTICS = 240;
	public static readonly STDIN = 241;
	public static readonly STDOUT = 242;
	public static readonly STORAGE = 243;
	public static readonly STORED = 244;
	public static readonly STRICT = 245;
	public static readonly STRIP = 246;
	public static readonly SUBSCRIPTION = 247;
	public static readonly SUPPORT = 248;
	public static readonly SYSID = 249;
	public static readonly SYSTEM = 250;
	public static readonly TABLES = 251;
	public static readonly TABLESPACE = 252;
	public static readonly TEMP = 253;
	public static readonly TEMPLATE = 254;
	public static readonly TEMPORARY = 255;
	public static readonly TEXT = 256;
	public static readonly TIES = 257;
	public static readonly TRANSACTION = 258;
	public static readonly TRANSFORM = 259;
	public static readonly TRIGGER = 260;
	public static readonly TRUNCATE = 261;
	public static readonly TRUSTED = 262;
	public static readonly TYPE = 263;
	public static readonly TYPES = 264;
	public static readonly UNBOUNDED = 265;
	public static readonly UNCOMMITTED = 266;
	public static readonly UNENCRYPTED = 267;
	public static readonly UNKNOWN = 268;
	public static readonly UNLISTEN = 269;
	public static readonly UNLOGGED = 270;
	public static readonly UNTIL = 271;
	public static readonly UPDATE = 272;
	public static readonly VACUUM = 273;
	public static readonly VALID = 274;
	public static readonly VALIDATE = 275;
	public static readonly VALIDATOR = 276;
	public static readonly VALUE = 277;
	public static readonly VARYING = 278;
	public static readonly VERSION = 279;
	public static readonly VIEW = 280;
	public static readonly VIEWS = 281;
	public static readonly VOLATILE = 282;
	public static readonly WHITESPACE = 283;
	public static readonly WITHIN = 284;
	public static readonly WITHOUT = 285;
	public static readonly WORK = 286;
	public static readonly WRAPPER = 287;
	public static readonly WRITE = 288;
	public static readonly XML = 289;
	public static readonly YEAR = 290;
	public static readonly YES = 291;
	public static readonly ZONE = 292;
	public static readonly BETWEEN = 293;
	public static readonly BIGINT = 294;
	public static readonly BIT = 295;
	public static readonly BOOLEAN = 296;
	public static readonly CHAR = 297;
	public static readonly CHARACTER = 298;
	public static readonly COALESCE = 299;
	public static readonly DEC = 300;
	public static readonly DECIMAL = 301;
	public static readonly EXISTS = 302;
	public static readonly EXTRACT = 303;
	public static readonly FLOAT = 304;
	public static readonly GREATEST = 305;
	public static readonly GROUPING = 306;
	public static readonly INOUT = 307;
	public static readonly INT = 308;
	public static readonly INTEGER = 309;
	public static readonly INTERVAL = 310;
	public static readonly LEAST = 311;
	public static readonly NATIONAL = 312;
	public static readonly NCHAR = 313;
	public static readonly NONE = 314;
	public static readonly NULLIF = 315;
	public static readonly NUMERIC = 316;
	public static readonly OUT = 317;
	public static readonly OVERLAY = 318;
	public static readonly POSITION = 319;
	public static readonly PRECISION = 320;
	public static readonly REAL = 321;
	public static readonly ROW = 322;
	public static readonly SETOF = 323;
	public static readonly SMALLINT = 324;
	public static readonly SUBSTRING = 325;
	public static readonly TIME = 326;
	public static readonly TIMESTAMP = 327;
	public static readonly TREAT = 328;
	public static readonly TRIM = 329;
	public static readonly VALUES = 330;
	public static readonly VARCHAR = 331;
	public static readonly XMLATTRIBUTES = 332;
	public static readonly XMLCONCAT = 333;
	public static readonly XMLELEMENT = 334;
	public static readonly XMLEXISTS = 335;
	public static readonly XMLFOREST = 336;
	public static readonly XMLNAMESPACES = 337;
	public static readonly XMLPARSE = 338;
	public static readonly XMLPI = 339;
	public static readonly XMLROOT = 340;
	public static readonly XMLSERIALIZE = 341;
	public static readonly XMLTABLE = 342;
	public static readonly AUTHORIZATION = 343;
	public static readonly BINARY = 344;
	public static readonly COLLATION = 345;
	public static readonly CONCURRENTLY = 346;
	public static readonly CROSS = 347;
	public static readonly CURRENT_SCHEMA = 348;
	public static readonly FREEZE = 349;
	public static readonly FULL = 350;
	public static readonly ILIKE = 351;
	public static readonly INNER = 352;
	public static readonly IS = 353;
	public static readonly ISNULL = 354;
	public static readonly JOIN = 355;
	public static readonly LEFT = 356;
	public static readonly LIKE = 357;
	public static readonly NATURAL = 358;
	public static readonly NOTNULL = 359;
	public static readonly OUTER = 360;
	public static readonly OVERLAPS = 361;
	public static readonly RIGHT = 362;
	public static readonly SIMILAR = 363;
	public static readonly TABLESAMPLE = 364;
	public static readonly VERBOSE = 365;
	public static readonly ALL = 366;
	public static readonly ANALYSE = 367;
	public static readonly ANALYZE = 368;
	public static readonly AND = 369;
	public static readonly ANY = 370;
	public static readonly ARRAY = 371;
	public static readonly AS = 372;
	public static readonly ASC = 373;
	public static readonly ASYMMETRIC = 374;
	public static readonly BOTH = 375;
	public static readonly CASE = 376;
	public static readonly CAST = 377;
	public static readonly CHECK = 378;
	public static readonly COLLATE = 379;
	public static readonly COLUMN = 380;
	public static readonly CONSTRAINT = 381;
	public static readonly CREATE = 382;
	public static readonly CURRENT_CATALOG = 383;
	public static readonly CURRENT_DATE = 384;
	public static readonly CURRENT_ROLE = 385;
	public static readonly CURRENT_TIME = 386;
	public static readonly CURRENT_TIMESTAMP = 387;
	public static readonly CURRENT_USER = 388;
	public static readonly DEFAULT = 389;
	public static readonly DEFERRABLE = 390;
	public static readonly DESC = 391;
	public static readonly DISTINCT = 392;
	public static readonly DO = 393;
	public static readonly ELSE = 394;
	public static readonly END = 395;
	public static readonly EXCEPT = 396;
	public static readonly FALSE = 397;
	public static readonly FETCH = 398;
	public static readonly FOR = 399;
	public static readonly FOREIGN = 400;
	public static readonly FROM = 401;
	public static readonly GRANT = 402;
	public static readonly GROUP = 403;
	public static readonly HAVING = 404;
	public static readonly IN = 405;
	public static readonly INITIALLY = 406;
	public static readonly INTERSECT = 407;
	public static readonly INTO = 408;
	public static readonly LATERAL = 409;
	public static readonly LEADING = 410;
	public static readonly LIMIT = 411;
	public static readonly LOCALTIME = 412;
	public static readonly LOCALTIMESTAMP = 413;
	public static readonly NOT = 414;
	public static readonly NULL = 415;
	public static readonly OFFSET = 416;
	public static readonly ON = 417;
	public static readonly ONLY = 418;
	public static readonly OR = 419;
	public static readonly ORDER = 420;
	public static readonly PLACING = 421;
	public static readonly PRIMARY = 422;
	public static readonly REFERENCES = 423;
	public static readonly RETURNING = 424;
	public static readonly SELECT = 425;
	public static readonly SESSION_USER = 426;
	public static readonly SOME = 427;
	public static readonly SYMMETRIC = 428;
	public static readonly TABLE = 429;
	public static readonly THEN = 430;
	public static readonly TO = 431;
	public static readonly TRAILING = 432;
	public static readonly TRUE = 433;
	public static readonly UNION = 434;
	public static readonly UNIQUE = 435;
	public static readonly USER = 436;
	public static readonly USING = 437;
	public static readonly VARIADIC = 438;
	public static readonly WHEN = 439;
	public static readonly WHERE = 440;
	public static readonly WINDOW = 441;
	public static readonly WITH = 442;
	public static readonly ALIGNMENT = 443;
	public static readonly BASETYPE = 444;
	public static readonly BUFFERS = 445;
	public static readonly BYPASSRLS = 446;
	public static readonly CANONICAL = 447;
	public static readonly CATEGORY = 448;
	public static readonly COLLATABLE = 449;
	public static readonly COMBINEFUNC = 450;
	public static readonly COMMUTATOR = 451;
	public static readonly CONNECT = 452;
	public static readonly COSTS = 453;
	public static readonly CREATEDB = 454;
	public static readonly CREATEROLE = 455;
	public static readonly DESERIALFUNC = 456;
	public static readonly DETERMINISTIC = 457;
	public static readonly DISABLE_PAGE_SKIPPING = 458;
	public static readonly ELEMENT = 459;
	public static readonly EXTENDED = 460;
	public static readonly FINALFUNC = 461;
	public static readonly FINALFUNC_EXTRA = 462;
	public static readonly FINALFUNC_MODIFY = 463;
	public static readonly FORCE_NOT_NULL = 464;
	public static readonly FORCE_NULL = 465;
	public static readonly FORCE_QUOTE = 466;
	public static readonly FORMAT = 467;
	public static readonly GETTOKEN = 468;
	public static readonly HASH = 469;
	public static readonly HASHES = 470;
	public static readonly HEADLINE = 471;
	public static readonly HYPOTHETICAL = 472;
	public static readonly INDEX_CLEANUP = 473;
	public static readonly INIT = 474;
	public static readonly INITCOND = 475;
	public static readonly INTERNALLENGTH = 476;
	public static readonly JSON = 477;
	public static readonly LC_COLLATE = 478;
	public static readonly LC_CTYPE = 479;
	public static readonly LEFTARG = 480;
	public static readonly LEXIZE = 481;
	public static readonly LEXTYPES = 482;
	public static readonly LIST = 483;
	public static readonly LOCALE = 484;
	public static readonly LOGIN = 485;
	public static readonly MAIN = 486;
	public static readonly MERGES = 487;
	public static readonly MFINALFUNC = 488;
	public static readonly MFINALFUNC_EXTRA = 489;
	public static readonly MFINALFUNC_MODIFY = 490;
	public static readonly MINITCOND = 491;
	public static readonly MINVFUNC = 492;
	public static readonly MODULUS = 493;
	public static readonly MSFUNC = 494;
	public static readonly MSSPACE = 495;
	public static readonly MSTYPE = 496;
	public static readonly NEGATOR = 497;
	public static readonly NOBYPASSRLS = 498;
	public static readonly NOCREATEDB = 499;
	public static readonly NOCREATEROLE = 500;
	public static readonly NOINHERIT = 501;
	public static readonly NOLOGIN = 502;
	public static readonly NOREPLICATION = 503;
	public static readonly NOSUPERUSER = 504;
	public static readonly OUTPUT = 505;
	public static readonly PASSEDBYVALUE = 506;
	public static readonly PATH = 507;
	public static readonly PERMISSIVE = 508;
	public static readonly PLAIN = 509;
	public static readonly PREFERRED = 510;
	public static readonly PROVIDER = 511;
	public static readonly READ_ONLY = 512;
	public static readonly READ_WRITE = 513;
	public static readonly RECEIVE = 514;
	public static readonly REMAINDER = 515;
	public static readonly REPLICATION = 516;
	public static readonly RESTRICTED = 517;
	public static readonly RESTRICTIVE = 518;
	public static readonly RIGHTARG = 519;
	public static readonly SAFE = 520;
	public static readonly SEND = 521;
	public static readonly SERIALFUNC = 522;
	public static readonly SETTINGS = 523;
	public static readonly SFUNC = 524;
	public static readonly SHAREABLE = 525;
	public static readonly SKIP_LOCKED = 526;
	public static readonly SORTOP = 527;
	public static readonly SSPACE = 528;
	public static readonly STYPE = 529;
	public static readonly SUBTYPE_DIFF = 530;
	public static readonly SUBTYPE_OPCLASS = 531;
	public static readonly SUBTYPE = 532;
	public static readonly SUMMARY = 533;
	public static readonly SUPERUSER = 534;
	public static readonly TIMING = 535;
	public static readonly TYPMOD_IN = 536;
	public static readonly TYPMOD_OUT = 537;
	public static readonly UNSAFE = 538;
	public static readonly USAGE = 539;
	public static readonly VARIABLE = 540;
	public static readonly YAML = 541;
	public static readonly ALIAS = 542;
	public static readonly ASSERT = 543;
	public static readonly CONSTANT = 544;
	public static readonly DATATYPE = 545;
	public static readonly DEBUG = 546;
	public static readonly DETAIL = 547;
	public static readonly DIAGNOSTICS = 548;
	public static readonly ELSEIF = 549;
	public static readonly ELSIF = 550;
	public static readonly ERRCODE = 551;
	public static readonly EXIT = 552;
	public static readonly EXCEPTION = 553;
	public static readonly FOREACH = 554;
	public static readonly GET = 555;
	public static readonly HINT = 556;
	public static readonly INFO = 557;
	public static readonly LOG = 558;
	public static readonly LOOP = 559;
	public static readonly MESSAGE = 560;
	public static readonly NOTICE = 561;
	public static readonly OPEN = 562;
	public static readonly PERFORM = 563;
	public static readonly QUERY = 564;
	public static readonly RAISE = 565;
	public static readonly RECORD = 566;
	public static readonly RETURN = 567;
	public static readonly REVERSE = 568;
	public static readonly ROWTYPE = 569;
	public static readonly SLICE = 570;
	public static readonly SQLSTATE = 571;
	public static readonly STACKED = 572;
	public static readonly WARNING = 573;
	public static readonly WHILE = 574;
	public static readonly CAST_EXPRESSION = 575;
	public static readonly EQUAL = 576;
	public static readonly COLON = 577;
	public static readonly SEMI_COLON = 578;
	public static readonly COMMA = 579;
	public static readonly NOT_EQUAL = 580;
	public static readonly LTH = 581;
	public static readonly LEQ = 582;
	public static readonly GTH = 583;
	public static readonly GEQ = 584;
	public static readonly LEFT_PAREN = 585;
	public static readonly RIGHT_PAREN = 586;
	public static readonly PLUS = 587;
	public static readonly MINUS = 588;
	public static readonly MULTIPLY = 589;
	public static readonly DIVIDE = 590;
	public static readonly MODULAR = 591;
	public static readonly EXP = 592;
	public static readonly DOT = 593;
	public static readonly QUOTE_CHAR = 594;
	public static readonly DOUBLE_QUOTE = 595;
	public static readonly DOLLAR = 596;
	public static readonly LEFT_BRACKET = 597;
	public static readonly RIGHT_BRACKET = 598;
	public static readonly EQUAL_GTH = 599;
	public static readonly COLON_EQUAL = 600;
	public static readonly LESS_LESS = 601;
	public static readonly GREATER_GREATER = 602;
	public static readonly DOUBLE_DOT = 603;
	public static readonly HASH_SIGN = 604;
	public static readonly BlockComment = 605;
	public static readonly LineComment = 606;
	public static readonly OP_CHARS = 607;
	public static readonly NUMBER_LITERAL = 608;
	public static readonly REAL_NUMBER = 609;
	public static readonly DOLLAR_NUMBER = 610;
	public static readonly Identifier = 611;
	public static readonly QuotedIdentifier = 612;
	public static readonly Character_String_Literal = 613;
	public static readonly BeginDollarStringConstant = 614;
	public static readonly Space = 615;
	public static readonly White_Space = 616;
	public static readonly New_Line = 617;
	public static readonly Tab = 618;
	public static readonly BOM = 619;
	public static readonly BAD = 620;
	public static readonly Text_between_Dollar = 621;
	public static readonly EndDollarStringConstant = 622;
	public static readonly RULE_sql = 0;
	public static readonly RULE_qname_parser = 1;
	public static readonly RULE_function_args_parser = 2;
	public static readonly RULE_vex_eof = 3;
	public static readonly RULE_plpgsql_function = 4;
	public static readonly RULE_plpgsql_function_test_list = 5;
	public static readonly RULE_statement = 6;
	public static readonly RULE_data_statement = 7;
	public static readonly RULE_script_statement = 8;
	public static readonly RULE_script_transaction = 9;
	public static readonly RULE_transaction_mode = 10;
	public static readonly RULE_lock_table = 11;
	public static readonly RULE_lock_mode = 12;
	public static readonly RULE_script_additional = 13;
	public static readonly RULE_additional_statement = 14;
	public static readonly RULE_explain_statement = 15;
	public static readonly RULE_explain_query = 16;
	public static readonly RULE_execute_statement = 17;
	public static readonly RULE_declare_statement = 18;
	public static readonly RULE_show_statement = 19;
	public static readonly RULE_explain_option = 20;
	public static readonly RULE_user_name = 21;
	public static readonly RULE_table_cols_list = 22;
	public static readonly RULE_table_cols = 23;
	public static readonly RULE_vacuum_mode = 24;
	public static readonly RULE_vacuum_option = 25;
	public static readonly RULE_analyze_mode = 26;
	public static readonly RULE_boolean_value = 27;
	public static readonly RULE_fetch_move_direction = 28;
	public static readonly RULE_schema_statement = 29;
	public static readonly RULE_schema_create = 30;
	public static readonly RULE_schema_alter = 31;
	public static readonly RULE_schema_drop = 32;
	public static readonly RULE_schema_import = 33;
	public static readonly RULE_alter_function_statement = 34;
	public static readonly RULE_alter_aggregate_statement = 35;
	public static readonly RULE_alter_extension_statement = 36;
	public static readonly RULE_alter_extension_action = 37;
	public static readonly RULE_extension_member_object = 38;
	public static readonly RULE_alter_schema_statement = 39;
	public static readonly RULE_alter_language_statement = 40;
	public static readonly RULE_alter_table_statement = 41;
	public static readonly RULE_table_action = 42;
	public static readonly RULE_column_action = 43;
	public static readonly RULE_identity_body = 44;
	public static readonly RULE_alter_identity = 45;
	public static readonly RULE_storage_option = 46;
	public static readonly RULE_validate_constraint = 47;
	public static readonly RULE_drop_constraint = 48;
	public static readonly RULE_table_deferrable = 49;
	public static readonly RULE_table_initialy_immed = 50;
	public static readonly RULE_function_actions_common = 51;
	public static readonly RULE_function_def = 52;
	public static readonly RULE_alter_index_statement = 53;
	public static readonly RULE_index_def_action = 54;
	public static readonly RULE_alter_default_privileges = 55;
	public static readonly RULE_abbreviated_grant_or_revoke = 56;
	public static readonly RULE_grant_option_for = 57;
	public static readonly RULE_alter_sequence_statement = 58;
	public static readonly RULE_alter_view_statement = 59;
	public static readonly RULE_alter_event_trigger = 60;
	public static readonly RULE_alter_event_trigger_action = 61;
	public static readonly RULE_alter_type_statement = 62;
	public static readonly RULE_alter_domain_statement = 63;
	public static readonly RULE_alter_server_statement = 64;
	public static readonly RULE_alter_server_action = 65;
	public static readonly RULE_alter_fts_statement = 66;
	public static readonly RULE_alter_fts_configuration = 67;
	public static readonly RULE_type_action = 68;
	public static readonly RULE_set_def_column = 69;
	public static readonly RULE_drop_def = 70;
	public static readonly RULE_create_index_statement = 71;
	public static readonly RULE_index_rest = 72;
	public static readonly RULE_index_sort = 73;
	public static readonly RULE_including_index = 74;
	public static readonly RULE_index_where = 75;
	public static readonly RULE_create_extension_statement = 76;
	public static readonly RULE_create_language_statement = 77;
	public static readonly RULE_create_event_trigger = 78;
	public static readonly RULE_create_type_statement = 79;
	public static readonly RULE_create_domain_statement = 80;
	public static readonly RULE_create_server_statement = 81;
	public static readonly RULE_create_fts_dictionary = 82;
	public static readonly RULE_option_with_value = 83;
	public static readonly RULE_create_fts_configuration = 84;
	public static readonly RULE_create_fts_template = 85;
	public static readonly RULE_create_fts_parser = 86;
	public static readonly RULE_create_collation = 87;
	public static readonly RULE_alter_collation = 88;
	public static readonly RULE_collation_option = 89;
	public static readonly RULE_create_user_mapping = 90;
	public static readonly RULE_alter_user_mapping = 91;
	public static readonly RULE_alter_user_or_role = 92;
	public static readonly RULE_alter_user_or_role_set_reset = 93;
	public static readonly RULE_user_or_role_set_reset = 94;
	public static readonly RULE_alter_group = 95;
	public static readonly RULE_alter_group_action = 96;
	public static readonly RULE_alter_tablespace = 97;
	public static readonly RULE_alter_owner = 98;
	public static readonly RULE_alter_tablespace_action = 99;
	public static readonly RULE_alter_statistics = 100;
	public static readonly RULE_alter_foreign_data_wrapper = 101;
	public static readonly RULE_alter_foreign_data_wrapper_action = 102;
	public static readonly RULE_alter_operator_statement = 103;
	public static readonly RULE_alter_operator_action = 104;
	public static readonly RULE_operator_set_restrict_join = 105;
	public static readonly RULE_drop_user_mapping = 106;
	public static readonly RULE_drop_owned = 107;
	public static readonly RULE_drop_operator_statement = 108;
	public static readonly RULE_target_operator = 109;
	public static readonly RULE_domain_constraint = 110;
	public static readonly RULE_create_transform_statement = 111;
	public static readonly RULE_create_access_method = 112;
	public static readonly RULE_create_user_or_role = 113;
	public static readonly RULE_user_or_role_option = 114;
	public static readonly RULE_user_or_role_option_for_alter = 115;
	public static readonly RULE_user_or_role_or_group_common_option = 116;
	public static readonly RULE_user_or_role_common_option = 117;
	public static readonly RULE_user_or_role_or_group_option_for_create = 118;
	public static readonly RULE_create_group = 119;
	public static readonly RULE_group_option = 120;
	public static readonly RULE_create_tablespace = 121;
	public static readonly RULE_create_statistics = 122;
	public static readonly RULE_create_foreign_data_wrapper = 123;
	public static readonly RULE_option_without_equal = 124;
	public static readonly RULE_create_operator_statement = 125;
	public static readonly RULE_operator_name = 126;
	public static readonly RULE_operator_option = 127;
	public static readonly RULE_create_aggregate_statement = 128;
	public static readonly RULE_aggregate_param = 129;
	public static readonly RULE_set_statement = 130;
	public static readonly RULE_set_action = 131;
	public static readonly RULE_session_local_option = 132;
	public static readonly RULE_set_statement_value = 133;
	public static readonly RULE_create_rewrite_statement = 134;
	public static readonly RULE_rewrite_command = 135;
	public static readonly RULE_create_trigger_statement = 136;
	public static readonly RULE_trigger_referencing = 137;
	public static readonly RULE_when_trigger = 138;
	public static readonly RULE_rule_common = 139;
	public static readonly RULE_rule_member_object = 140;
	public static readonly RULE_columns_permissions = 141;
	public static readonly RULE_table_column_privileges = 142;
	public static readonly RULE_permissions = 143;
	public static readonly RULE_permission = 144;
	public static readonly RULE_other_rules = 145;
	public static readonly RULE_grant_to_rule = 146;
	public static readonly RULE_revoke_from_cascade_restrict = 147;
	public static readonly RULE_roles_names = 148;
	public static readonly RULE_role_name_with_group = 149;
	public static readonly RULE_comment_on_statement = 150;
	public static readonly RULE_security_label = 151;
	public static readonly RULE_comment_member_object = 152;
	public static readonly RULE_label_member_object = 153;
	public static readonly RULE_create_function_statement = 154;
	public static readonly RULE_create_funct_params = 155;
	public static readonly RULE_transform_for_type = 156;
	public static readonly RULE_function_ret_table = 157;
	public static readonly RULE_function_column_name_type = 158;
	public static readonly RULE_function_parameters = 159;
	public static readonly RULE_function_args = 160;
	public static readonly RULE_agg_order = 161;
	public static readonly RULE_character_string = 162;
	public static readonly RULE_function_arguments = 163;
	public static readonly RULE_argmode = 164;
	public static readonly RULE_create_sequence_statement = 165;
	public static readonly RULE_sequence_body = 166;
	public static readonly RULE_signed_number_literal = 167;
	public static readonly RULE_signed_numerical_literal = 168;
	public static readonly RULE_sign = 169;
	public static readonly RULE_create_schema_statement = 170;
	public static readonly RULE_create_policy_statement = 171;
	public static readonly RULE_alter_policy_statement = 172;
	public static readonly RULE_drop_policy_statement = 173;
	public static readonly RULE_create_subscription_statement = 174;
	public static readonly RULE_alter_subscription_statement = 175;
	public static readonly RULE_alter_subscription_action = 176;
	public static readonly RULE_create_cast_statement = 177;
	public static readonly RULE_drop_cast_statement = 178;
	public static readonly RULE_create_operator_family_statement = 179;
	public static readonly RULE_alter_operator_family_statement = 180;
	public static readonly RULE_operator_family_action = 181;
	public static readonly RULE_add_operator_to_family = 182;
	public static readonly RULE_drop_operator_from_family = 183;
	public static readonly RULE_drop_operator_family_statement = 184;
	public static readonly RULE_create_operator_class_statement = 185;
	public static readonly RULE_create_operator_class_option = 186;
	public static readonly RULE_alter_operator_class_statement = 187;
	public static readonly RULE_drop_operator_class_statement = 188;
	public static readonly RULE_create_conversion_statement = 189;
	public static readonly RULE_alter_conversion_statement = 190;
	public static readonly RULE_create_publication_statement = 191;
	public static readonly RULE_alter_publication_statement = 192;
	public static readonly RULE_alter_publication_action = 193;
	public static readonly RULE_only_table_multiply = 194;
	public static readonly RULE_alter_trigger_statement = 195;
	public static readonly RULE_alter_rule_statement = 196;
	public static readonly RULE_copy_statement = 197;
	public static readonly RULE_copy_from_statement = 198;
	public static readonly RULE_copy_to_statement = 199;
	public static readonly RULE_copy_option_list = 200;
	public static readonly RULE_copy_option = 201;
	public static readonly RULE_create_view_statement = 202;
	public static readonly RULE_if_exists = 203;
	public static readonly RULE_if_not_exists = 204;
	public static readonly RULE_view_columns = 205;
	public static readonly RULE_with_check_option = 206;
	public static readonly RULE_create_table_statement = 207;
	public static readonly RULE_create_table_as_statement = 208;
	public static readonly RULE_create_foreign_table_statement = 209;
	public static readonly RULE_define_table = 210;
	public static readonly RULE_define_partition = 211;
	public static readonly RULE_for_values_bound = 212;
	public static readonly RULE_partition_bound_spec = 213;
	public static readonly RULE_partition_bound_part = 214;
	public static readonly RULE_define_columns = 215;
	public static readonly RULE_define_type = 216;
	public static readonly RULE_partition_by = 217;
	public static readonly RULE_partition_method = 218;
	public static readonly RULE_partition_column = 219;
	public static readonly RULE_define_server = 220;
	public static readonly RULE_define_foreign_options = 221;
	public static readonly RULE_foreign_option = 222;
	public static readonly RULE_foreign_option_name = 223;
	public static readonly RULE_list_of_type_column_def = 224;
	public static readonly RULE_table_column_def = 225;
	public static readonly RULE_table_of_type_column_def = 226;
	public static readonly RULE_table_column_definition = 227;
	public static readonly RULE_like_option = 228;
	public static readonly RULE_constraint_common = 229;
	public static readonly RULE_constr_body = 230;
	public static readonly RULE_all_op = 231;
	public static readonly RULE_all_simple_op = 232;
	public static readonly RULE_op_chars = 233;
	public static readonly RULE_index_parameters = 234;
	public static readonly RULE_names_in_parens = 235;
	public static readonly RULE_names_references = 236;
	public static readonly RULE_storage_parameter = 237;
	public static readonly RULE_storage_parameter_option = 238;
	public static readonly RULE_storage_parameter_name = 239;
	public static readonly RULE_with_storage_parameter = 240;
	public static readonly RULE_storage_parameter_oid = 241;
	public static readonly RULE_on_commit = 242;
	public static readonly RULE_table_space = 243;
	public static readonly RULE_action = 244;
	public static readonly RULE_owner_to = 245;
	public static readonly RULE_rename_to = 246;
	public static readonly RULE_set_schema = 247;
	public static readonly RULE_table_column_privilege = 248;
	public static readonly RULE_usage_select_update = 249;
	public static readonly RULE_partition_by_columns = 250;
	public static readonly RULE_cascade_restrict = 251;
	public static readonly RULE_collate_identifier = 252;
	public static readonly RULE_indirection_var = 253;
	public static readonly RULE_dollar_number = 254;
	public static readonly RULE_indirection_list = 255;
	public static readonly RULE_indirection = 256;
	public static readonly RULE_drop_function_statement = 257;
	public static readonly RULE_drop_trigger_statement = 258;
	public static readonly RULE_drop_rule_statement = 259;
	public static readonly RULE_drop_statements = 260;
	public static readonly RULE_if_exist_names_restrict_cascade = 261;
	public static readonly RULE_id_token = 262;
	public static readonly RULE_identifier = 263;
	public static readonly RULE_identifier_nontype = 264;
	public static readonly RULE_col_label = 265;
	public static readonly RULE_tokens_nonreserved = 266;
	public static readonly RULE_tokens_nonreserved_except_function_type = 267;
	public static readonly RULE_tokens_reserved_except_function_type = 268;
	public static readonly RULE_tokens_reserved = 269;
	public static readonly RULE_tokens_nonkeyword = 270;
	public static readonly RULE_schema_qualified_name_nontype = 271;
	public static readonly RULE_type_list = 272;
	public static readonly RULE_data_type = 273;
	public static readonly RULE_array_type = 274;
	public static readonly RULE_predefined_type = 275;
	public static readonly RULE_interval_field = 276;
	public static readonly RULE_type_length = 277;
	public static readonly RULE_precision_param = 278;
	public static readonly RULE_vex = 279;
	public static readonly RULE_vex_b = 280;
	public static readonly RULE_op = 281;
	public static readonly RULE_all_op_ref = 282;
	public static readonly RULE_datetime_overlaps = 283;
	public static readonly RULE_value_expression_primary = 284;
	public static readonly RULE_unsigned_value_specification = 285;
	public static readonly RULE_unsigned_numeric_literal = 286;
	public static readonly RULE_truth_value = 287;
	public static readonly RULE_case_expression = 288;
	public static readonly RULE_cast_specification = 289;
	public static readonly RULE_function_call = 290;
	public static readonly RULE_vex_or_named_notation = 291;
	public static readonly RULE_pointer = 292;
	public static readonly RULE_function_construct = 293;
	public static readonly RULE_extract_function = 294;
	public static readonly RULE_system_function = 295;
	public static readonly RULE_date_time_function = 296;
	public static readonly RULE_string_value_function = 297;
	public static readonly RULE_xml_function = 298;
	public static readonly RULE_xml_table_column = 299;
	public static readonly RULE_comparison_mod = 300;
	public static readonly RULE_filter_clause = 301;
	public static readonly RULE_window_definition = 302;
	public static readonly RULE_frame_clause = 303;
	public static readonly RULE_frame_bound = 304;
	public static readonly RULE_array_expression = 305;
	public static readonly RULE_array_elements = 306;
	public static readonly RULE_type_coercion = 307;
	public static readonly RULE_schema_qualified_name = 308;
	public static readonly RULE_set_qualifier = 309;
	public static readonly RULE_table_subquery = 310;
	public static readonly RULE_select_stmt = 311;
	public static readonly RULE_after_ops = 312;
	public static readonly RULE_select_stmt_no_parens = 313;
	public static readonly RULE_with_clause = 314;
	public static readonly RULE_with_query = 315;
	public static readonly RULE_select_ops = 316;
	public static readonly RULE_select_ops_no_parens = 317;
	public static readonly RULE_select_primary = 318;
	public static readonly RULE_select_list = 319;
	public static readonly RULE_select_sublist = 320;
	public static readonly RULE_into_table = 321;
	public static readonly RULE_from_item = 322;
	public static readonly RULE_from_primary = 323;
	public static readonly RULE_alias_clause = 324;
	public static readonly RULE_from_function_column_def = 325;
	public static readonly RULE_groupby_clause = 326;
	public static readonly RULE_grouping_element_list = 327;
	public static readonly RULE_grouping_element = 328;
	public static readonly RULE_values_stmt = 329;
	public static readonly RULE_values_values = 330;
	public static readonly RULE_orderby_clause = 331;
	public static readonly RULE_sort_specifier_list = 332;
	public static readonly RULE_sort_specifier = 333;
	public static readonly RULE_order_specification = 334;
	public static readonly RULE_null_ordering = 335;
	public static readonly RULE_insert_stmt_for_psql = 336;
	public static readonly RULE_insert_columns = 337;
	public static readonly RULE_indirection_identifier = 338;
	public static readonly RULE_conflict_object = 339;
	public static readonly RULE_conflict_action = 340;
	public static readonly RULE_delete_stmt_for_psql = 341;
	public static readonly RULE_update_stmt_for_psql = 342;
	public static readonly RULE_update_set = 343;
	public static readonly RULE_notify_stmt = 344;
	public static readonly RULE_truncate_stmt = 345;
	public static readonly RULE_identifier_list = 346;
	public static readonly RULE_anonymous_block = 347;
	public static readonly RULE_comp_options = 348;
	public static readonly RULE_function_block = 349;
	public static readonly RULE_start_label = 350;
	public static readonly RULE_declarations = 351;
	public static readonly RULE_declaration = 352;
	public static readonly RULE_type_declaration = 353;
	public static readonly RULE_arguments_list = 354;
	public static readonly RULE_data_type_dec = 355;
	public static readonly RULE_exception_statement = 356;
	public static readonly RULE_function_statements = 357;
	public static readonly RULE_function_statement = 358;
	public static readonly RULE_base_statement = 359;
	public static readonly RULE_var = 360;
	public static readonly RULE_diagnostic_option = 361;
	public static readonly RULE_perform_stmt = 362;
	public static readonly RULE_assign_stmt = 363;
	public static readonly RULE_execute_stmt = 364;
	public static readonly RULE_control_statement = 365;
	public static readonly RULE_cursor_statement = 366;
	public static readonly RULE_option = 367;
	public static readonly RULE_transaction_statement = 368;
	public static readonly RULE_message_statement = 369;
	public static readonly RULE_log_level = 370;
	public static readonly RULE_raise_using = 371;
	public static readonly RULE_raise_param = 372;
	public static readonly RULE_return_stmt = 373;
	public static readonly RULE_loop_statement = 374;
	public static readonly RULE_loop_start = 375;
	public static readonly RULE_using_vex = 376;
	public static readonly RULE_if_statement = 377;
	public static readonly RULE_case_statement = 378;
	public static readonly RULE_plpgsql_query = 379;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"sql", "qname_parser", "function_args_parser", "vex_eof", "plpgsql_function", 
		"plpgsql_function_test_list", "statement", "data_statement", "script_statement", 
		"script_transaction", "transaction_mode", "lock_table", "lock_mode", "script_additional", 
		"additional_statement", "explain_statement", "explain_query", "execute_statement", 
		"declare_statement", "show_statement", "explain_option", "user_name", 
		"table_cols_list", "table_cols", "vacuum_mode", "vacuum_option", "analyze_mode", 
		"boolean_value", "fetch_move_direction", "schema_statement", "schema_create", 
		"schema_alter", "schema_drop", "schema_import", "alter_function_statement", 
		"alter_aggregate_statement", "alter_extension_statement", "alter_extension_action", 
		"extension_member_object", "alter_schema_statement", "alter_language_statement", 
		"alter_table_statement", "table_action", "column_action", "identity_body", 
		"alter_identity", "storage_option", "validate_constraint", "drop_constraint", 
		"table_deferrable", "table_initialy_immed", "function_actions_common", 
		"function_def", "alter_index_statement", "index_def_action", "alter_default_privileges", 
		"abbreviated_grant_or_revoke", "grant_option_for", "alter_sequence_statement", 
		"alter_view_statement", "alter_event_trigger", "alter_event_trigger_action", 
		"alter_type_statement", "alter_domain_statement", "alter_server_statement", 
		"alter_server_action", "alter_fts_statement", "alter_fts_configuration", 
		"type_action", "set_def_column", "drop_def", "create_index_statement", 
		"index_rest", "index_sort", "including_index", "index_where", "create_extension_statement", 
		"create_language_statement", "create_event_trigger", "create_type_statement", 
		"create_domain_statement", "create_server_statement", "create_fts_dictionary", 
		"option_with_value", "create_fts_configuration", "create_fts_template", 
		"create_fts_parser", "create_collation", "alter_collation", "collation_option", 
		"create_user_mapping", "alter_user_mapping", "alter_user_or_role", "alter_user_or_role_set_reset", 
		"user_or_role_set_reset", "alter_group", "alter_group_action", "alter_tablespace", 
		"alter_owner", "alter_tablespace_action", "alter_statistics", "alter_foreign_data_wrapper", 
		"alter_foreign_data_wrapper_action", "alter_operator_statement", "alter_operator_action", 
		"operator_set_restrict_join", "drop_user_mapping", "drop_owned", "drop_operator_statement", 
		"target_operator", "domain_constraint", "create_transform_statement", 
		"create_access_method", "create_user_or_role", "user_or_role_option", 
		"user_or_role_option_for_alter", "user_or_role_or_group_common_option", 
		"user_or_role_common_option", "user_or_role_or_group_option_for_create", 
		"create_group", "group_option", "create_tablespace", "create_statistics", 
		"create_foreign_data_wrapper", "option_without_equal", "create_operator_statement", 
		"operator_name", "operator_option", "create_aggregate_statement", "aggregate_param", 
		"set_statement", "set_action", "session_local_option", "set_statement_value", 
		"create_rewrite_statement", "rewrite_command", "create_trigger_statement", 
		"trigger_referencing", "when_trigger", "rule_common", "rule_member_object", 
		"columns_permissions", "table_column_privileges", "permissions", "permission", 
		"other_rules", "grant_to_rule", "revoke_from_cascade_restrict", "roles_names", 
		"role_name_with_group", "comment_on_statement", "security_label", "comment_member_object", 
		"label_member_object", "create_function_statement", "create_funct_params", 
		"transform_for_type", "function_ret_table", "function_column_name_type", 
		"function_parameters", "function_args", "agg_order", "character_string", 
		"function_arguments", "argmode", "create_sequence_statement", "sequence_body", 
		"signed_number_literal", "signed_numerical_literal", "sign", "create_schema_statement", 
		"create_policy_statement", "alter_policy_statement", "drop_policy_statement", 
		"create_subscription_statement", "alter_subscription_statement", "alter_subscription_action", 
		"create_cast_statement", "drop_cast_statement", "create_operator_family_statement", 
		"alter_operator_family_statement", "operator_family_action", "add_operator_to_family", 
		"drop_operator_from_family", "drop_operator_family_statement", "create_operator_class_statement", 
		"create_operator_class_option", "alter_operator_class_statement", "drop_operator_class_statement", 
		"create_conversion_statement", "alter_conversion_statement", "create_publication_statement", 
		"alter_publication_statement", "alter_publication_action", "only_table_multiply", 
		"alter_trigger_statement", "alter_rule_statement", "copy_statement", "copy_from_statement", 
		"copy_to_statement", "copy_option_list", "copy_option", "create_view_statement", 
		"if_exists", "if_not_exists", "view_columns", "with_check_option", "create_table_statement", 
		"create_table_as_statement", "create_foreign_table_statement", "define_table", 
		"define_partition", "for_values_bound", "partition_bound_spec", "partition_bound_part", 
		"define_columns", "define_type", "partition_by", "partition_method", "partition_column", 
		"define_server", "define_foreign_options", "foreign_option", "foreign_option_name", 
		"list_of_type_column_def", "table_column_def", "table_of_type_column_def", 
		"table_column_definition", "like_option", "constraint_common", "constr_body", 
		"all_op", "all_simple_op", "op_chars", "index_parameters", "names_in_parens", 
		"names_references", "storage_parameter", "storage_parameter_option", "storage_parameter_name", 
		"with_storage_parameter", "storage_parameter_oid", "on_commit", "table_space", 
		"action", "owner_to", "rename_to", "set_schema", "table_column_privilege", 
		"usage_select_update", "partition_by_columns", "cascade_restrict", "collate_identifier", 
		"indirection_var", "dollar_number", "indirection_list", "indirection", 
		"drop_function_statement", "drop_trigger_statement", "drop_rule_statement", 
		"drop_statements", "if_exist_names_restrict_cascade", "id_token", "identifier", 
		"identifier_nontype", "col_label", "tokens_nonreserved", "tokens_nonreserved_except_function_type", 
		"tokens_reserved_except_function_type", "tokens_reserved", "tokens_nonkeyword", 
		"schema_qualified_name_nontype", "type_list", "data_type", "array_type", 
		"predefined_type", "interval_field", "type_length", "precision_param", 
		"vex", "vex_b", "op", "all_op_ref", "datetime_overlaps", "value_expression_primary", 
		"unsigned_value_specification", "unsigned_numeric_literal", "truth_value", 
		"case_expression", "cast_specification", "function_call", "vex_or_named_notation", 
		"pointer", "function_construct", "extract_function", "system_function", 
		"date_time_function", "string_value_function", "xml_function", "xml_table_column", 
		"comparison_mod", "filter_clause", "window_definition", "frame_clause", 
		"frame_bound", "array_expression", "array_elements", "type_coercion", 
		"schema_qualified_name", "set_qualifier", "table_subquery", "select_stmt", 
		"after_ops", "select_stmt_no_parens", "with_clause", "with_query", "select_ops", 
		"select_ops_no_parens", "select_primary", "select_list", "select_sublist", 
		"into_table", "from_item", "from_primary", "alias_clause", "from_function_column_def", 
		"groupby_clause", "grouping_element_list", "grouping_element", "values_stmt", 
		"values_values", "orderby_clause", "sort_specifier_list", "sort_specifier", 
		"order_specification", "null_ordering", "insert_stmt_for_psql", "insert_columns", 
		"indirection_identifier", "conflict_object", "conflict_action", "delete_stmt_for_psql", 
		"update_stmt_for_psql", "update_set", "notify_stmt", "truncate_stmt", 
		"identifier_list", "anonymous_block", "comp_options", "function_block", 
		"start_label", "declarations", "declaration", "type_declaration", "arguments_list", 
		"data_type_dec", "exception_statement", "function_statements", "function_statement", 
		"base_statement", "var", "diagnostic_option", "perform_stmt", "assign_stmt", 
		"execute_stmt", "control_statement", "cursor_statement", "option", "transaction_statement", 
		"message_statement", "log_level", "raise_using", "raise_param", "return_stmt", 
		"loop_statement", "loop_start", "using_vex", "if_statement", "case_statement", 
		"plpgsql_query",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "'='", "':'", "';'", "','", undefined, "'<'", "'<='", 
		"'>'", "'>='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
		"'.'", "'''", "'\"'", "'$'", "'['", "']'", "'=>'", "':='", "'<<'", "'>>'", 
		"'..'", "'#'", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "' '", undefined, 
		undefined, "'\u0009'", "'\uFEFF'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ABORT", "ABSOLUTE", "ACCESS", "ACTION", "ADD", "ADMIN", "AFTER", 
		"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
		"ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN", "BY", "CACHE", "CALL", 
		"CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
		"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COLUMNS", "COMMENT", "COMMENTS", 
		"COMMIT", "COMMITTED", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINTS", 
		"CONTENT", "CONTINUE", "CONVERSION", "COPY", "COST", "CSV", "CUBE", "CURRENT", 
		"CURSOR", "CYCLE", "DATA", "DATABASE", "DAY", "DEALLOCATE", "DECLARE", 
		"DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DELIMITER", "DELIMITERS", 
		"DEPENDS", "DETACH", "DICTIONARY", "DISABLE", "DISCARD", "DOCUMENT", "DOMAIN", 
		"DOUBLE", "DROP", "EACH", "ENABLE", "ENCODING", "ENCRYPTED", "ENUM", "ESCAPE", 
		"EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXTENSION", 
		"EXTERNAL", "FAMILY", "FILTER", "FIRST", "FOLLOWING", "FORCE", "FORWARD", 
		"FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANTED", "GROUPS", "HANDLER", 
		"HEADER", "HOLD", "HOUR", "IDENTITY", "IF", "IMMEDIATE", "IMMUTABLE", 
		"IMPLICIT", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", 
		"INHERIT", "INHERITS", "INLINE", "INPUT", "INSENSITIVE", "INSERT", "INSTEAD", 
		"INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE", "LAST", "LEAKPROOF", 
		"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKED", "LOGGED", 
		"MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MINUTE", "MINVALUE", 
		"MODE", "MONTH", "MOVE", "NAME", "NAMES", "NEW", "NEXT", "NO", "NOTHING", 
		"NOTIFY", "NOWAIT", "NULLS", "OBJECT", "OF", "OFF", "OIDS", "OLD", "OPERATOR", 
		"OPTION", "OPTIONS", "ORDINALITY", "OTHERS", "OVER", "OVERRIDING", "OWNED", 
		"OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", 
		"PLANS", "POLICY", "PRECEDING", "PREPARE", "PREPARED", "PRESERVE", "PRIOR", 
		"PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROCEDURES", "PROGRAM", "PUBLICATION", 
		"QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCING", 
		"REFRESH", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", 
		"REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", "ROLE", 
		"ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES", "ROWS", "RULE", "SAVEPOINT", 
		"SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND", "SECURITY", "SEQUENCE", 
		"SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETS", "SHARE", 
		"SHOW", "SIMPLE", "SKIP_", "SNAPSHOT", "SQL", "STABLE", "STANDALONE", 
		"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", 
		"STRICT", "STRIP", "SUBSCRIPTION", "SUPPORT", "SYSID", "SYSTEM", "TABLES", 
		"TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT", "TIES", "TRANSACTION", 
		"TRANSFORM", "TRIGGER", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UNBOUNDED", 
		"UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
		"UPDATE", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VARYING", 
		"VERSION", "VIEW", "VIEWS", "VOLATILE", "WHITESPACE", "WITHIN", "WITHOUT", 
		"WORK", "WRAPPER", "WRITE", "XML", "YEAR", "YES", "ZONE", "BETWEEN", "BIGINT", 
		"BIT", "BOOLEAN", "CHAR", "CHARACTER", "COALESCE", "DEC", "DECIMAL", "EXISTS", 
		"EXTRACT", "FLOAT", "GREATEST", "GROUPING", "INOUT", "INT", "INTEGER", 
		"INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", "NULLIF", "NUMERIC", 
		"OUT", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", "SETOF", "SMALLINT", 
		"SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", "VALUES", "VARCHAR", 
		"XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
		"XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
		"AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", 
		"FREEZE", "FULL", "ILIKE", "INNER", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", 
		"NATURAL", "NOTNULL", "OUTER", "OVERLAPS", "RIGHT", "SIMILAR", "TABLESAMPLE", 
		"VERBOSE", "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "CONSTRAINT", 
		"CREATE", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", 
		"DISTINCT", "DO", "ELSE", "END", "EXCEPT", "FALSE", "FETCH", "FOR", "FOREIGN", 
		"FROM", "GRANT", "GROUP", "HAVING", "IN", "INITIALLY", "INTERSECT", "INTO", 
		"LATERAL", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL", 
		"OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", 
		"RETURNING", "SELECT", "SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", 
		"TO", "TRAILING", "TRUE", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", 
		"WHEN", "WHERE", "WINDOW", "WITH", "ALIGNMENT", "BASETYPE", "BUFFERS", 
		"BYPASSRLS", "CANONICAL", "CATEGORY", "COLLATABLE", "COMBINEFUNC", "COMMUTATOR", 
		"CONNECT", "COSTS", "CREATEDB", "CREATEROLE", "DESERIALFUNC", "DETERMINISTIC", 
		"DISABLE_PAGE_SKIPPING", "ELEMENT", "EXTENDED", "FINALFUNC", "FINALFUNC_EXTRA", 
		"FINALFUNC_MODIFY", "FORCE_NOT_NULL", "FORCE_NULL", "FORCE_QUOTE", "FORMAT", 
		"GETTOKEN", "HASH", "HASHES", "HEADLINE", "HYPOTHETICAL", "INDEX_CLEANUP", 
		"INIT", "INITCOND", "INTERNALLENGTH", "JSON", "LC_COLLATE", "LC_CTYPE", 
		"LEFTARG", "LEXIZE", "LEXTYPES", "LIST", "LOCALE", "LOGIN", "MAIN", "MERGES", 
		"MFINALFUNC", "MFINALFUNC_EXTRA", "MFINALFUNC_MODIFY", "MINITCOND", "MINVFUNC", 
		"MODULUS", "MSFUNC", "MSSPACE", "MSTYPE", "NEGATOR", "NOBYPASSRLS", "NOCREATEDB", 
		"NOCREATEROLE", "NOINHERIT", "NOLOGIN", "NOREPLICATION", "NOSUPERUSER", 
		"OUTPUT", "PASSEDBYVALUE", "PATH", "PERMISSIVE", "PLAIN", "PREFERRED", 
		"PROVIDER", "READ_ONLY", "READ_WRITE", "RECEIVE", "REMAINDER", "REPLICATION", 
		"RESTRICTED", "RESTRICTIVE", "RIGHTARG", "SAFE", "SEND", "SERIALFUNC", 
		"SETTINGS", "SFUNC", "SHAREABLE", "SKIP_LOCKED", "SORTOP", "SSPACE", "STYPE", 
		"SUBTYPE_DIFF", "SUBTYPE_OPCLASS", "SUBTYPE", "SUMMARY", "SUPERUSER", 
		"TIMING", "TYPMOD_IN", "TYPMOD_OUT", "UNSAFE", "USAGE", "VARIABLE", "YAML", 
		"ALIAS", "ASSERT", "CONSTANT", "DATATYPE", "DEBUG", "DETAIL", "DIAGNOSTICS", 
		"ELSEIF", "ELSIF", "ERRCODE", "EXIT", "EXCEPTION", "FOREACH", "GET", "HINT", 
		"INFO", "LOG", "LOOP", "MESSAGE", "NOTICE", "OPEN", "PERFORM", "QUERY", 
		"RAISE", "RECORD", "RETURN", "REVERSE", "ROWTYPE", "SLICE", "SQLSTATE", 
		"STACKED", "WARNING", "WHILE", "CAST_EXPRESSION", "EQUAL", "COLON", "SEMI_COLON", 
		"COMMA", "NOT_EQUAL", "LTH", "LEQ", "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", "EXP", "DOT", "QUOTE_CHAR", 
		"DOUBLE_QUOTE", "DOLLAR", "LEFT_BRACKET", "RIGHT_BRACKET", "EQUAL_GTH", 
		"COLON_EQUAL", "LESS_LESS", "GREATER_GREATER", "DOUBLE_DOT", "HASH_SIGN", 
		"BlockComment", "LineComment", "OP_CHARS", "NUMBER_LITERAL", "REAL_NUMBER", 
		"DOLLAR_NUMBER", "Identifier", "QuotedIdentifier", "Character_String_Literal", 
		"BeginDollarStringConstant", "Space", "White_Space", "New_Line", "Tab", 
		"BOM", "BAD", "Text_between_Dollar", "EndDollarStringConstant",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PLpgSQLParser._LITERAL_NAMES, PLpgSQLParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PLpgSQLParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "PLpgSQLParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return PLpgSQLParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return PLpgSQLParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(PLpgSQLParser._ATN, this);
	}
	// @RuleVersion(0)
	public sql(): SqlContext {
		let _localctx: SqlContext = new SqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, PLpgSQLParser.RULE_sql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.BOM) {
				{
				this.state = 760;
				this.match(PLpgSQLParser.BOM);
				}
			}

			this.state = 766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.SEMI_COLON) {
				{
				{
				this.state = 763;
				this.match(PLpgSQLParser.SEMI_COLON);
				}
				}
				this.state = 768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 780;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DELETE - 32)))) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (PLpgSQLParser.DISCARD - 67)) | (1 << (PLpgSQLParser.DROP - 67)) | (1 << (PLpgSQLParser.EXECUTE - 67)) | (1 << (PLpgSQLParser.EXPLAIN - 67)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PLpgSQLParser.IMPORT - 107)) | (1 << (PLpgSQLParser.INSERT - 107)) | (1 << (PLpgSQLParser.LISTEN - 107)) | (1 << (PLpgSQLParser.LOAD - 107)) | (1 << (PLpgSQLParser.LOCK - 107)))) !== 0) || _la === PLpgSQLParser.MOVE || _la === PLpgSQLParser.NOTIFY || ((((_la - 178)) & ~0x1F) === 0 && ((1 << (_la - 178)) & ((1 << (PLpgSQLParser.PREPARE - 178)) | (1 << (PLpgSQLParser.REASSIGN - 178)) | (1 << (PLpgSQLParser.REFRESH - 178)) | (1 << (PLpgSQLParser.REINDEX - 178)) | (1 << (PLpgSQLParser.RELEASE - 178)) | (1 << (PLpgSQLParser.RESET - 178)) | (1 << (PLpgSQLParser.REVOKE - 178)))) !== 0) || ((((_la - 210)) & ~0x1F) === 0 && ((1 << (_la - 210)) & ((1 << (PLpgSQLParser.ROLLBACK - 210)) | (1 << (PLpgSQLParser.SAVEPOINT - 210)) | (1 << (PLpgSQLParser.SECURITY - 210)) | (1 << (PLpgSQLParser.SET - 210)) | (1 << (PLpgSQLParser.SHOW - 210)) | (1 << (PLpgSQLParser.START - 210)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PLpgSQLParser.TRUNCATE - 261)) | (1 << (PLpgSQLParser.UNLISTEN - 261)) | (1 << (PLpgSQLParser.UPDATE - 261)) | (1 << (PLpgSQLParser.VACUUM - 261)))) !== 0) || _la === PLpgSQLParser.VALUES || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (PLpgSQLParser.ANALYZE - 368)) | (1 << (PLpgSQLParser.CREATE - 368)) | (1 << (PLpgSQLParser.DO - 368)) | (1 << (PLpgSQLParser.END - 368)) | (1 << (PLpgSQLParser.FETCH - 368)))) !== 0) || ((((_la - 402)) & ~0x1F) === 0 && ((1 << (_la - 402)) & ((1 << (PLpgSQLParser.GRANT - 402)) | (1 << (PLpgSQLParser.SELECT - 402)) | (1 << (PLpgSQLParser.TABLE - 402)))) !== 0) || _la === PLpgSQLParser.WITH || _la === PLpgSQLParser.LEFT_PAREN) {
				{
				{
				this.state = 769;
				this.statement();
				this.state = 776;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.SEMI_COLON:
					{
					this.state = 771;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 770;
						this.match(PLpgSQLParser.SEMI_COLON);
						}
						}
						this.state = 773;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === PLpgSQLParser.SEMI_COLON);
					}
					break;
				case PLpgSQLParser.EOF:
					{
					this.state = 775;
					this.match(PLpgSQLParser.EOF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				this.state = 782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 783;
			this.match(PLpgSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qname_parser(): Qname_parserContext {
		let _localctx: Qname_parserContext = new Qname_parserContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, PLpgSQLParser.RULE_qname_parser);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 785;
			this.schema_qualified_name();
			this.state = 786;
			this.match(PLpgSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_args_parser(): Function_args_parserContext {
		let _localctx: Function_args_parserContext = new Function_args_parserContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, PLpgSQLParser.RULE_function_args_parser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 789;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 788;
				this.schema_qualified_name();
				}
			}

			this.state = 791;
			this.function_args();
			this.state = 792;
			this.match(PLpgSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vex_eof(): Vex_eofContext {
		let _localctx: Vex_eofContext = new Vex_eofContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, PLpgSQLParser.RULE_vex_eof);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 794;
			this.vex(0);
			this.state = 799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 795;
				this.match(PLpgSQLParser.COMMA);
				this.state = 796;
				this.vex(0);
				}
				}
				this.state = 801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 802;
			this.match(PLpgSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plpgsql_function(): Plpgsql_functionContext {
		let _localctx: Plpgsql_functionContext = new Plpgsql_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, PLpgSQLParser.RULE_plpgsql_function);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.HASH_SIGN) {
				{
				this.state = 804;
				this.comp_options();
				}
			}

			this.state = 807;
			this.function_block();
			this.state = 809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.SEMI_COLON) {
				{
				this.state = 808;
				this.match(PLpgSQLParser.SEMI_COLON);
				}
			}

			this.state = 811;
			this.match(PLpgSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plpgsql_function_test_list(): Plpgsql_function_test_listContext {
		let _localctx: Plpgsql_function_test_listContext = new Plpgsql_function_test_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, PLpgSQLParser.RULE_plpgsql_function_test_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.BEGIN || _la === PLpgSQLParser.DECLARE || _la === PLpgSQLParser.LESS_LESS || _la === PLpgSQLParser.HASH_SIGN) {
				{
				{
				this.state = 814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.HASH_SIGN) {
					{
					this.state = 813;
					this.comp_options();
					}
				}

				this.state = 816;
				this.function_block();
				this.state = 817;
				this.match(PLpgSQLParser.SEMI_COLON);
				}
				}
				this.state = 823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 824;
			this.match(PLpgSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, PLpgSQLParser.RULE_statement);
		try {
			this.state = 829;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.TABLE:
			case PLpgSQLParser.WITH:
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 826;
				this.data_statement();
				}
				break;
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.CREATE:
			case PLpgSQLParser.GRANT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 827;
				this.schema_statement();
				}
				break;
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.START:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.ANALYZE:
			case PLpgSQLParser.DO:
			case PLpgSQLParser.END:
			case PLpgSQLParser.FETCH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 828;
				this.script_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_statement(): Data_statementContext {
		let _localctx: Data_statementContext = new Data_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, PLpgSQLParser.RULE_data_statement);
		try {
			this.state = 835;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 12, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 831;
				this.select_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 832;
				this.insert_stmt_for_psql();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 833;
				this.update_stmt_for_psql();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 834;
				this.delete_stmt_for_psql();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public script_statement(): Script_statementContext {
		let _localctx: Script_statementContext = new Script_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, PLpgSQLParser.RULE_script_statement);
		try {
			this.state = 839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 837;
				this.script_transaction();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 838;
				this.script_additional();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public script_transaction(): Script_transactionContext {
		let _localctx: Script_transactionContext = new Script_transactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, PLpgSQLParser.RULE_script_transaction);
		let _la: number;
		try {
			this.state = 898;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 26, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 847;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.START:
					{
					this.state = 841;
					this.match(PLpgSQLParser.START);
					this.state = 842;
					this.match(PLpgSQLParser.TRANSACTION);
					}
					break;
				case PLpgSQLParser.BEGIN:
					{
					this.state = 843;
					this.match(PLpgSQLParser.BEGIN);
					this.state = 845;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.TRANSACTION || _la === PLpgSQLParser.WORK) {
						{
						this.state = 844;
						_la = this._input.LA(1);
						if (!(_la === PLpgSQLParser.TRANSACTION || _la === PLpgSQLParser.WORK)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 857;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ISOLATION || _la === PLpgSQLParser.READ || _la === PLpgSQLParser.DEFERRABLE || _la === PLpgSQLParser.NOT) {
					{
					this.state = 849;
					this.transaction_mode();
					this.state = 854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 850;
						this.match(PLpgSQLParser.COMMA);
						this.state = 851;
						this.transaction_mode();
						}
						}
						this.state = 856;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 859;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ABORT || _la === PLpgSQLParser.COMMIT || _la === PLpgSQLParser.ROLLBACK || _la === PLpgSQLParser.END)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.TRANSACTION || _la === PLpgSQLParser.WORK) {
					{
					this.state = 860;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.TRANSACTION || _la === PLpgSQLParser.WORK)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AND) {
					{
					this.state = 863;
					this.match(PLpgSQLParser.AND);
					this.state = 865;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.NO) {
						{
						this.state = 864;
						this.match(PLpgSQLParser.NO);
						}
					}

					this.state = 867;
					this.match(PLpgSQLParser.CHAIN);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 874;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.COMMIT:
					{
					this.state = 870;
					this.match(PLpgSQLParser.COMMIT);
					this.state = 871;
					this.match(PLpgSQLParser.PREPARED);
					}
					break;
				case PLpgSQLParser.PREPARE:
					{
					this.state = 872;
					this.match(PLpgSQLParser.PREPARE);
					this.state = 873;
					this.match(PLpgSQLParser.TRANSACTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 876;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 882;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.SAVEPOINT:
					{
					this.state = 877;
					this.match(PLpgSQLParser.SAVEPOINT);
					}
					break;
				case PLpgSQLParser.RELEASE:
					{
					this.state = 878;
					this.match(PLpgSQLParser.RELEASE);
					this.state = 880;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 22, this._ctx) ) {
					case 1:
						{
						this.state = 879;
						this.match(PLpgSQLParser.SAVEPOINT);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 884;
				this.identifier();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 885;
				this.match(PLpgSQLParser.ROLLBACK);
				this.state = 886;
				this.match(PLpgSQLParser.PREPARED);
				this.state = 887;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 888;
				this.match(PLpgSQLParser.ROLLBACK);
				this.state = 890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.TRANSACTION || _la === PLpgSQLParser.WORK) {
					{
					this.state = 889;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.TRANSACTION || _la === PLpgSQLParser.WORK)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 892;
				this.match(PLpgSQLParser.TO);
				this.state = 894;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 25, this._ctx) ) {
				case 1:
					{
					this.state = 893;
					this.match(PLpgSQLParser.SAVEPOINT);
					}
					break;
				}
				this.state = 896;
				this.identifier();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 897;
				this.lock_table();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_mode(): Transaction_modeContext {
		let _localctx: Transaction_modeContext = new Transaction_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, PLpgSQLParser.RULE_transaction_mode);
		let _la: number;
		try {
			this.state = 919;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 29, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 900;
				this.match(PLpgSQLParser.ISOLATION);
				this.state = 901;
				this.match(PLpgSQLParser.LEVEL);
				this.state = 909;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 27, this._ctx) ) {
				case 1:
					{
					this.state = 902;
					this.match(PLpgSQLParser.SERIALIZABLE);
					}
					break;

				case 2:
					{
					this.state = 903;
					this.match(PLpgSQLParser.REPEATABLE);
					this.state = 904;
					this.match(PLpgSQLParser.READ);
					}
					break;

				case 3:
					{
					this.state = 905;
					this.match(PLpgSQLParser.READ);
					this.state = 906;
					this.match(PLpgSQLParser.COMMITTED);
					}
					break;

				case 4:
					{
					this.state = 907;
					this.match(PLpgSQLParser.READ);
					this.state = 908;
					this.match(PLpgSQLParser.UNCOMMITTED);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 911;
				this.match(PLpgSQLParser.READ);
				this.state = 912;
				this.match(PLpgSQLParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 913;
				this.match(PLpgSQLParser.READ);
				this.state = 914;
				this.match(PLpgSQLParser.ONLY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 915;
					this.match(PLpgSQLParser.NOT);
					}
				}

				this.state = 918;
				this.match(PLpgSQLParser.DEFERRABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_table(): Lock_tableContext {
		let _localctx: Lock_tableContext = new Lock_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, PLpgSQLParser.RULE_lock_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 921;
			this.match(PLpgSQLParser.LOCK);
			this.state = 923;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLE) {
				{
				this.state = 922;
				this.match(PLpgSQLParser.TABLE);
				}
			}

			this.state = 925;
			this.only_table_multiply();
			this.state = 930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 926;
				this.match(PLpgSQLParser.COMMA);
				this.state = 927;
				this.only_table_multiply();
				}
				}
				this.state = 932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.IN) {
				{
				this.state = 933;
				this.match(PLpgSQLParser.IN);
				this.state = 934;
				this.lock_mode();
				this.state = 935;
				this.match(PLpgSQLParser.MODE);
				}
			}

			this.state = 940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.NOWAIT) {
				{
				this.state = 939;
				this.match(PLpgSQLParser.NOWAIT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, PLpgSQLParser.RULE_lock_mode);
		let _la: number;
		try {
			this.state = 954;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 35, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 942;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ACCESS || _la === PLpgSQLParser.ROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 943;
				this.match(PLpgSQLParser.SHARE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 944;
				this.match(PLpgSQLParser.ROW);
				this.state = 945;
				this.match(PLpgSQLParser.EXCLUSIVE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 946;
				this.match(PLpgSQLParser.SHARE);
				this.state = 947;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.UPDATE || _la === PLpgSQLParser.ROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 948;
				this.match(PLpgSQLParser.EXCLUSIVE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 949;
				this.match(PLpgSQLParser.SHARE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ACCESS) {
					{
					this.state = 950;
					this.match(PLpgSQLParser.ACCESS);
					}
				}

				this.state = 953;
				this.match(PLpgSQLParser.EXCLUSIVE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public script_additional(): Script_additionalContext {
		let _localctx: Script_additionalContext = new Script_additionalContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, PLpgSQLParser.RULE_script_additional);
		let _la: number;
		try {
			this.state = 983;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.ANALYZE:
			case PLpgSQLParser.DO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 956;
				this.additional_statement();
				}
				break;
			case PLpgSQLParser.VACUUM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 957;
				this.match(PLpgSQLParser.VACUUM);
				this.state = 958;
				this.vacuum_mode();
				this.state = 960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
					{
					this.state = 959;
					this.table_cols_list();
					}
				}

				}
				break;
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.FETCH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 962;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.MOVE || _la === PLpgSQLParser.FETCH)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 964;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 37, this._ctx) ) {
				case 1:
					{
					this.state = 963;
					this.fetch_move_direction();
					}
					break;
				}
				this.state = 967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.IN) {
					{
					this.state = 966;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 969;
				this.identifier();
				}
				break;
			case PLpgSQLParser.CLOSE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 970;
				this.match(PLpgSQLParser.CLOSE);
				this.state = 973;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 971;
					this.identifier();
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 972;
					this.match(PLpgSQLParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.CALL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 975;
				this.match(PLpgSQLParser.CALL);
				this.state = 976;
				this.function_call();
				}
				break;
			case PLpgSQLParser.DISCARD:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 977;
				this.match(PLpgSQLParser.DISCARD);
				this.state = 978;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.PLANS || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || _la === PLpgSQLParser.ALL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.DECLARE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 979;
				this.declare_statement();
				}
				break;
			case PLpgSQLParser.EXECUTE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 980;
				this.execute_statement();
				}
				break;
			case PLpgSQLParser.EXPLAIN:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 981;
				this.explain_statement();
				}
				break;
			case PLpgSQLParser.SHOW:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 982;
				this.show_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public additional_statement(): Additional_statementContext {
		let _localctx: Additional_statementContext = new Additional_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, PLpgSQLParser.RULE_additional_statement);
		let _la: number;
		try {
			this.state = 1111;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.DO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 985;
				this.anonymous_block();
				}
				break;
			case PLpgSQLParser.LISTEN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 986;
				this.match(PLpgSQLParser.LISTEN);
				this.state = 987;
				this.identifier();
				}
				break;
			case PLpgSQLParser.UNLISTEN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 988;
				this.match(PLpgSQLParser.UNLISTEN);
				this.state = 991;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 989;
					this.identifier();
					}
					break;
				case PLpgSQLParser.MULTIPLY:
					{
					this.state = 990;
					this.match(PLpgSQLParser.MULTIPLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.ANALYZE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 993;
				this.match(PLpgSQLParser.ANALYZE);
				this.state = 1006;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.LEFT_PAREN:
					{
					this.state = 994;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 995;
					this.analyze_mode();
					this.state = 1000;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 996;
						this.match(PLpgSQLParser.COMMA);
						this.state = 997;
						this.analyze_mode();
						}
						}
						this.state = 1002;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1003;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				case PLpgSQLParser.VERBOSE:
					{
					this.state = 1005;
					this.match(PLpgSQLParser.VERBOSE);
					}
					break;
				case PLpgSQLParser.EOF:
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.SEMI_COLON:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					break;
				default:
					break;
				}
				this.state = 1009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
					{
					this.state = 1008;
					this.table_cols_list();
					}
				}

				}
				break;
			case PLpgSQLParser.CLUSTER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1011;
				this.match(PLpgSQLParser.CLUSTER);
				this.state = 1013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.VERBOSE) {
					{
					this.state = 1012;
					this.match(PLpgSQLParser.VERBOSE);
					}
				}

				this.state = 1024;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 47, this._ctx) ) {
				case 1:
					{
					this.state = 1015;
					this.identifier();
					this.state = 1016;
					this.match(PLpgSQLParser.ON);
					this.state = 1017;
					this.schema_qualified_name();
					}
					break;

				case 2:
					{
					this.state = 1019;
					this.schema_qualified_name();
					this.state = 1022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.USING) {
						{
						this.state = 1020;
						this.match(PLpgSQLParser.USING);
						this.state = 1021;
						this.identifier();
						}
					}

					}
					break;
				}
				}
				break;
			case PLpgSQLParser.CHECKPOINT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1026;
				this.match(PLpgSQLParser.CHECKPOINT);
				}
				break;
			case PLpgSQLParser.LOAD:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1027;
				this.match(PLpgSQLParser.LOAD);
				this.state = 1028;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;
			case PLpgSQLParser.DEALLOCATE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1029;
				this.match(PLpgSQLParser.DEALLOCATE);
				this.state = 1031;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 48, this._ctx) ) {
				case 1:
					{
					this.state = 1030;
					this.match(PLpgSQLParser.PREPARE);
					}
					break;
				}
				this.state = 1035;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 1033;
					this.identifier();
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 1034;
					this.match(PLpgSQLParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.REINDEX:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1037;
				this.match(PLpgSQLParser.REINDEX);
				this.state = 1041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 1038;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 1039;
					this.match(PLpgSQLParser.VERBOSE);
					this.state = 1040;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				this.state = 1043;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DATABASE || _la === PLpgSQLParser.INDEX || _la === PLpgSQLParser.SCHEMA || _la === PLpgSQLParser.SYSTEM || _la === PLpgSQLParser.TABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CONCURRENTLY) {
					{
					this.state = 1044;
					this.match(PLpgSQLParser.CONCURRENTLY);
					}
				}

				this.state = 1047;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.RESET:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1048;
				this.match(PLpgSQLParser.RESET);
				this.state = 1060;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
				case 1:
					{
					this.state = 1052;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
					case 1:
						{
						this.state = 1049;
						this.identifier();
						this.state = 1050;
						this.match(PLpgSQLParser.DOT);
						}
						break;
					}
					this.state = 1054;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 1055;
					this.match(PLpgSQLParser.TIME);
					this.state = 1056;
					this.match(PLpgSQLParser.ZONE);
					}
					break;

				case 3:
					{
					this.state = 1057;
					this.match(PLpgSQLParser.SESSION);
					this.state = 1058;
					this.match(PLpgSQLParser.AUTHORIZATION);
					}
					break;

				case 4:
					{
					this.state = 1059;
					this.match(PLpgSQLParser.ALL);
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.REFRESH:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1062;
				this.match(PLpgSQLParser.REFRESH);
				this.state = 1063;
				this.match(PLpgSQLParser.MATERIALIZED);
				this.state = 1064;
				this.match(PLpgSQLParser.VIEW);
				this.state = 1066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CONCURRENTLY) {
					{
					this.state = 1065;
					this.match(PLpgSQLParser.CONCURRENTLY);
					}
				}

				this.state = 1068;
				this.schema_qualified_name();
				this.state = 1074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 1069;
					this.match(PLpgSQLParser.WITH);
					this.state = 1071;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.NO) {
						{
						this.state = 1070;
						this.match(PLpgSQLParser.NO);
						}
					}

					this.state = 1073;
					this.match(PLpgSQLParser.DATA);
					}
				}

				}
				break;
			case PLpgSQLParser.PREPARE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1076;
				this.match(PLpgSQLParser.PREPARE);
				this.state = 1077;
				this.identifier();
				this.state = 1089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 1078;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 1079;
					this.data_type();
					this.state = 1084;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 1080;
						this.match(PLpgSQLParser.COMMA);
						this.state = 1081;
						this.data_type();
						}
						}
						this.state = 1086;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1087;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				this.state = 1091;
				this.match(PLpgSQLParser.AS);
				this.state = 1092;
				this.data_statement();
				}
				break;
			case PLpgSQLParser.REASSIGN:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1094;
				this.match(PLpgSQLParser.REASSIGN);
				this.state = 1095;
				this.match(PLpgSQLParser.OWNED);
				this.state = 1096;
				this.match(PLpgSQLParser.BY);
				this.state = 1097;
				this.user_name();
				this.state = 1102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1098;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1099;
					this.user_name();
					}
					}
					this.state = 1104;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1105;
				this.match(PLpgSQLParser.TO);
				this.state = 1106;
				this.user_name();
				}
				break;
			case PLpgSQLParser.COPY:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1108;
				this.copy_statement();
				}
				break;
			case PLpgSQLParser.TRUNCATE:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1109;
				this.truncate_stmt();
				}
				break;
			case PLpgSQLParser.NOTIFY:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1110;
				this.notify_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_statement(): Explain_statementContext {
		let _localctx: Explain_statementContext = new Explain_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, PLpgSQLParser.RULE_explain_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1113;
			this.match(PLpgSQLParser.EXPLAIN);
			this.state = 1131;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 64, this._ctx) ) {
			case 1:
				{
				this.state = 1115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ANALYZE) {
					{
					this.state = 1114;
					this.match(PLpgSQLParser.ANALYZE);
					}
				}

				this.state = 1118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.VERBOSE) {
					{
					this.state = 1117;
					this.match(PLpgSQLParser.VERBOSE);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 1120;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1121;
				this.explain_option();
				this.state = 1126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1122;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1123;
					this.explain_option();
					}
					}
					this.state = 1128;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1129;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			}
			this.state = 1133;
			this.explain_query();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_query(): Explain_queryContext {
		let _localctx: Explain_queryContext = new Explain_queryContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, PLpgSQLParser.RULE_explain_query);
		try {
			this.state = 1143;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.TABLE:
			case PLpgSQLParser.WITH:
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1135;
				this.data_statement();
				}
				break;
			case PLpgSQLParser.EXECUTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1136;
				this.execute_statement();
				}
				break;
			case PLpgSQLParser.DECLARE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1137;
				this.declare_statement();
				}
				break;
			case PLpgSQLParser.CREATE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1138;
				this.match(PLpgSQLParser.CREATE);
				this.state = 1141;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
				case 1:
					{
					this.state = 1139;
					this.create_table_as_statement();
					}
					break;

				case 2:
					{
					this.state = 1140;
					this.create_view_statement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_statement(): Execute_statementContext {
		let _localctx: Execute_statementContext = new Execute_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, PLpgSQLParser.RULE_execute_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1145;
			this.match(PLpgSQLParser.EXECUTE);
			this.state = 1146;
			this.identifier();
			this.state = 1158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 1147;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1148;
				this.vex(0);
				this.state = 1153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1149;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1150;
					this.vex(0);
					}
					}
					this.state = 1155;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1156;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_statement(): Declare_statementContext {
		let _localctx: Declare_statementContext = new Declare_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, PLpgSQLParser.RULE_declare_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1160;
			this.match(PLpgSQLParser.DECLARE);
			this.state = 1161;
			this.identifier();
			this.state = 1163;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.BINARY) {
				{
				this.state = 1162;
				this.match(PLpgSQLParser.BINARY);
				}
			}

			this.state = 1166;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INSENSITIVE) {
				{
				this.state = 1165;
				this.match(PLpgSQLParser.INSENSITIVE);
				}
			}

			this.state = 1172;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.NO || _la === PLpgSQLParser.SCROLL) {
				{
				this.state = 1169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO) {
					{
					this.state = 1168;
					this.match(PLpgSQLParser.NO);
					}
				}

				this.state = 1171;
				this.match(PLpgSQLParser.SCROLL);
				}
			}

			this.state = 1174;
			this.match(PLpgSQLParser.CURSOR);
			this.state = 1177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITHOUT || _la === PLpgSQLParser.WITH) {
				{
				this.state = 1175;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.WITHOUT || _la === PLpgSQLParser.WITH)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1176;
				this.match(PLpgSQLParser.HOLD);
				}
			}

			this.state = 1179;
			this.match(PLpgSQLParser.FOR);
			this.state = 1180;
			this.select_stmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public show_statement(): Show_statementContext {
		let _localctx: Show_statementContext = new Show_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, PLpgSQLParser.RULE_show_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1182;
			this.match(PLpgSQLParser.SHOW);
			this.state = 1197;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				{
				this.state = 1186;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
				case 1:
					{
					this.state = 1183;
					this.identifier();
					this.state = 1184;
					this.match(PLpgSQLParser.DOT);
					}
					break;
				}
				this.state = 1188;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 1189;
				this.match(PLpgSQLParser.ALL);
				}
				break;

			case 3:
				{
				this.state = 1190;
				this.match(PLpgSQLParser.TIME);
				this.state = 1191;
				this.match(PLpgSQLParser.ZONE);
				}
				break;

			case 4:
				{
				this.state = 1192;
				this.match(PLpgSQLParser.TRANSACTION);
				this.state = 1193;
				this.match(PLpgSQLParser.ISOLATION);
				this.state = 1194;
				this.match(PLpgSQLParser.LEVEL);
				}
				break;

			case 5:
				{
				this.state = 1195;
				this.match(PLpgSQLParser.SESSION);
				this.state = 1196;
				this.match(PLpgSQLParser.AUTHORIZATION);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_option(): Explain_optionContext {
		let _localctx: Explain_optionContext = new Explain_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, PLpgSQLParser.RULE_explain_option);
		let _la: number;
		try {
			this.state = 1205;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.VERBOSE:
			case PLpgSQLParser.ANALYZE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.TIMING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1199;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.VERBOSE || _la === PLpgSQLParser.ANALYZE || _la === PLpgSQLParser.BUFFERS || _la === PLpgSQLParser.COSTS || ((((_la - 523)) & ~0x1F) === 0 && ((1 << (_la - 523)) & ((1 << (PLpgSQLParser.SETTINGS - 523)) | (1 << (PLpgSQLParser.SUMMARY - 523)) | (1 << (PLpgSQLParser.TIMING - 523)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1201;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.OFF || _la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE || _la === PLpgSQLParser.NUMBER_LITERAL) {
					{
					this.state = 1200;
					this.boolean_value();
					}
				}

				}
				break;
			case PLpgSQLParser.FORMAT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1203;
				this.match(PLpgSQLParser.FORMAT);
				this.state = 1204;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TEXT || _la === PLpgSQLParser.XML || _la === PLpgSQLParser.JSON || _la === PLpgSQLParser.YAML)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_name(): User_nameContext {
		let _localctx: User_nameContext = new User_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, PLpgSQLParser.RULE_user_name);
		try {
			this.state = 1210;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1207;
				this.identifier();
				}
				break;
			case PLpgSQLParser.CURRENT_USER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1208;
				this.match(PLpgSQLParser.CURRENT_USER);
				}
				break;
			case PLpgSQLParser.SESSION_USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1209;
				this.match(PLpgSQLParser.SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_cols_list(): Table_cols_listContext {
		let _localctx: Table_cols_listContext = new Table_cols_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, PLpgSQLParser.RULE_table_cols_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1212;
			this.table_cols();
			this.state = 1217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 1213;
				this.match(PLpgSQLParser.COMMA);
				this.state = 1214;
				this.table_cols();
				}
				}
				this.state = 1219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_cols(): Table_colsContext {
		let _localctx: Table_colsContext = new Table_colsContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, PLpgSQLParser.RULE_table_cols);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1220;
			this.schema_qualified_name();
			this.state = 1232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 1221;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1222;
				this.identifier();
				this.state = 1227;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1223;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1224;
					this.identifier();
					}
					}
					this.state = 1229;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1230;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_mode(): Vacuum_modeContext {
		let _localctx: Vacuum_modeContext = new Vacuum_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, PLpgSQLParser.RULE_vacuum_mode);
		let _la: number;
		try {
			this.state = 1257;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1234;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1235;
				this.vacuum_option();
				this.state = 1240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1236;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1237;
					this.vacuum_option();
					}
					}
					this.state = 1242;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1243;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.EOF:
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.VERBOSE:
			case PLpgSQLParser.ANALYZE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.SEMI_COLON:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1246;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FULL) {
					{
					this.state = 1245;
					this.match(PLpgSQLParser.FULL);
					}
				}

				this.state = 1249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FREEZE) {
					{
					this.state = 1248;
					this.match(PLpgSQLParser.FREEZE);
					}
				}

				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.VERBOSE) {
					{
					this.state = 1251;
					this.match(PLpgSQLParser.VERBOSE);
					}
				}

				this.state = 1255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ANALYZE) {
					{
					this.state = 1254;
					this.match(PLpgSQLParser.ANALYZE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_option(): Vacuum_optionContext {
		let _localctx: Vacuum_optionContext = new Vacuum_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, PLpgSQLParser.RULE_vacuum_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1259;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.TRUNCATE || ((((_la - 349)) & ~0x1F) === 0 && ((1 << (_la - 349)) & ((1 << (PLpgSQLParser.FREEZE - 349)) | (1 << (PLpgSQLParser.FULL - 349)) | (1 << (PLpgSQLParser.VERBOSE - 349)) | (1 << (PLpgSQLParser.ANALYZE - 349)))) !== 0) || _la === PLpgSQLParser.DISABLE_PAGE_SKIPPING || _la === PLpgSQLParser.INDEX_CLEANUP || _la === PLpgSQLParser.SKIP_LOCKED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1261;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OFF || _la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE || _la === PLpgSQLParser.NUMBER_LITERAL) {
				{
				this.state = 1260;
				this.boolean_value();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyze_mode(): Analyze_modeContext {
		let _localctx: Analyze_modeContext = new Analyze_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, PLpgSQLParser.RULE_analyze_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1263;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.VERBOSE || _la === PLpgSQLParser.SKIP_LOCKED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OFF || _la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE || _la === PLpgSQLParser.NUMBER_LITERAL) {
				{
				this.state = 1264;
				this.boolean_value();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boolean_value(): Boolean_valueContext {
		let _localctx: Boolean_valueContext = new Boolean_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, PLpgSQLParser.RULE_boolean_value);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1267;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.OFF || _la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE || _la === PLpgSQLParser.NUMBER_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetch_move_direction(): Fetch_move_directionContext {
		let _localctx: Fetch_move_directionContext = new Fetch_move_directionContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, PLpgSQLParser.RULE_fetch_move_direction);
		let _la: number;
		try {
			this.state = 1286;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.NEXT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1269;
				this.match(PLpgSQLParser.NEXT);
				}
				break;
			case PLpgSQLParser.PRIOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1270;
				this.match(PLpgSQLParser.PRIOR);
				}
				break;
			case PLpgSQLParser.FIRST:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1271;
				this.match(PLpgSQLParser.FIRST);
				}
				break;
			case PLpgSQLParser.LAST:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1272;
				this.match(PLpgSQLParser.LAST);
				}
				break;
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.PLUS:
			case PLpgSQLParser.MINUS:
			case PLpgSQLParser.NUMBER_LITERAL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ABSOLUTE || _la === PLpgSQLParser.RELATIVE) {
					{
					this.state = 1273;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.ABSOLUTE || _la === PLpgSQLParser.RELATIVE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1276;
				this.signed_number_literal();
				}
				break;
			case PLpgSQLParser.ALL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1277;
				this.match(PLpgSQLParser.ALL);
				}
				break;
			case PLpgSQLParser.FORWARD:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1278;
				this.match(PLpgSQLParser.FORWARD);
				this.state = 1280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.NUMBER_LITERAL) {
					{
					this.state = 1279;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.NUMBER_LITERAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case PLpgSQLParser.BACKWARD:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1282;
				this.match(PLpgSQLParser.BACKWARD);
				this.state = 1284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.NUMBER_LITERAL) {
					{
					this.state = 1283;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.NUMBER_LITERAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_statement(): Schema_statementContext {
		let _localctx: Schema_statementContext = new Schema_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, PLpgSQLParser.RULE_schema_statement);
		try {
			this.state = 1291;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.CREATE:
			case PLpgSQLParser.GRANT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1288;
				this.schema_create();
				}
				break;
			case PLpgSQLParser.ALTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1289;
				this.schema_alter();
				}
				break;
			case PLpgSQLParser.DROP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1290;
				this.schema_drop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_create(): Schema_createContext {
		let _localctx: Schema_createContext = new Schema_createContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, PLpgSQLParser.RULE_schema_create);
		try {
			this.state = 1339;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CREATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1293;
				this.match(PLpgSQLParser.CREATE);
				this.state = 1332;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
				case 1:
					{
					this.state = 1294;
					this.create_table_statement();
					}
					break;

				case 2:
					{
					this.state = 1295;
					this.create_foreign_table_statement();
					}
					break;

				case 3:
					{
					this.state = 1296;
					this.create_index_statement();
					}
					break;

				case 4:
					{
					this.state = 1297;
					this.create_extension_statement();
					}
					break;

				case 5:
					{
					this.state = 1298;
					this.create_trigger_statement();
					}
					break;

				case 6:
					{
					this.state = 1299;
					this.create_rewrite_statement();
					}
					break;

				case 7:
					{
					this.state = 1300;
					this.create_function_statement();
					}
					break;

				case 8:
					{
					this.state = 1301;
					this.create_sequence_statement();
					}
					break;

				case 9:
					{
					this.state = 1302;
					this.create_schema_statement();
					}
					break;

				case 10:
					{
					this.state = 1303;
					this.create_view_statement();
					}
					break;

				case 11:
					{
					this.state = 1304;
					this.create_language_statement();
					}
					break;

				case 12:
					{
					this.state = 1305;
					this.create_event_trigger();
					}
					break;

				case 13:
					{
					this.state = 1306;
					this.create_type_statement();
					}
					break;

				case 14:
					{
					this.state = 1307;
					this.create_domain_statement();
					}
					break;

				case 15:
					{
					this.state = 1308;
					this.create_server_statement();
					}
					break;

				case 16:
					{
					this.state = 1309;
					this.create_fts_configuration();
					}
					break;

				case 17:
					{
					this.state = 1310;
					this.create_fts_template();
					}
					break;

				case 18:
					{
					this.state = 1311;
					this.create_fts_parser();
					}
					break;

				case 19:
					{
					this.state = 1312;
					this.create_fts_dictionary();
					}
					break;

				case 20:
					{
					this.state = 1313;
					this.create_collation();
					}
					break;

				case 21:
					{
					this.state = 1314;
					this.create_user_mapping();
					}
					break;

				case 22:
					{
					this.state = 1315;
					this.create_transform_statement();
					}
					break;

				case 23:
					{
					this.state = 1316;
					this.create_access_method();
					}
					break;

				case 24:
					{
					this.state = 1317;
					this.create_user_or_role();
					}
					break;

				case 25:
					{
					this.state = 1318;
					this.create_group();
					}
					break;

				case 26:
					{
					this.state = 1319;
					this.create_tablespace();
					}
					break;

				case 27:
					{
					this.state = 1320;
					this.create_statistics();
					}
					break;

				case 28:
					{
					this.state = 1321;
					this.create_foreign_data_wrapper();
					}
					break;

				case 29:
					{
					this.state = 1322;
					this.create_operator_statement();
					}
					break;

				case 30:
					{
					this.state = 1323;
					this.create_aggregate_statement();
					}
					break;

				case 31:
					{
					this.state = 1324;
					this.create_table_as_statement();
					}
					break;

				case 32:
					{
					this.state = 1325;
					this.create_policy_statement();
					}
					break;

				case 33:
					{
					this.state = 1326;
					this.create_subscription_statement();
					}
					break;

				case 34:
					{
					this.state = 1327;
					this.create_cast_statement();
					}
					break;

				case 35:
					{
					this.state = 1328;
					this.create_operator_family_statement();
					}
					break;

				case 36:
					{
					this.state = 1329;
					this.create_operator_class_statement();
					}
					break;

				case 37:
					{
					this.state = 1330;
					this.create_conversion_statement();
					}
					break;

				case 38:
					{
					this.state = 1331;
					this.create_publication_statement();
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.COMMENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1334;
				this.comment_on_statement();
				}
				break;
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.GRANT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1335;
				this.rule_common();
				}
				break;
			case PLpgSQLParser.SET:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1336;
				this.set_statement();
				}
				break;
			case PLpgSQLParser.IMPORT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1337;
				this.schema_import();
				}
				break;
			case PLpgSQLParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1338;
				this.security_label();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_alter(): Schema_alterContext {
		let _localctx: Schema_alterContext = new Schema_alterContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, PLpgSQLParser.RULE_schema_alter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1341;
			this.match(PLpgSQLParser.ALTER);
			this.state = 1374;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 97, this._ctx) ) {
			case 1:
				{
				this.state = 1342;
				this.alter_function_statement();
				}
				break;

			case 2:
				{
				this.state = 1343;
				this.alter_schema_statement();
				}
				break;

			case 3:
				{
				this.state = 1344;
				this.alter_language_statement();
				}
				break;

			case 4:
				{
				this.state = 1345;
				this.alter_table_statement();
				}
				break;

			case 5:
				{
				this.state = 1346;
				this.alter_index_statement();
				}
				break;

			case 6:
				{
				this.state = 1347;
				this.alter_default_privileges();
				}
				break;

			case 7:
				{
				this.state = 1348;
				this.alter_sequence_statement();
				}
				break;

			case 8:
				{
				this.state = 1349;
				this.alter_view_statement();
				}
				break;

			case 9:
				{
				this.state = 1350;
				this.alter_event_trigger();
				}
				break;

			case 10:
				{
				this.state = 1351;
				this.alter_type_statement();
				}
				break;

			case 11:
				{
				this.state = 1352;
				this.alter_domain_statement();
				}
				break;

			case 12:
				{
				this.state = 1353;
				this.alter_server_statement();
				}
				break;

			case 13:
				{
				this.state = 1354;
				this.alter_fts_statement();
				}
				break;

			case 14:
				{
				this.state = 1355;
				this.alter_collation();
				}
				break;

			case 15:
				{
				this.state = 1356;
				this.alter_user_mapping();
				}
				break;

			case 16:
				{
				this.state = 1357;
				this.alter_user_or_role();
				}
				break;

			case 17:
				{
				this.state = 1358;
				this.alter_group();
				}
				break;

			case 18:
				{
				this.state = 1359;
				this.alter_tablespace();
				}
				break;

			case 19:
				{
				this.state = 1360;
				this.alter_statistics();
				}
				break;

			case 20:
				{
				this.state = 1361;
				this.alter_foreign_data_wrapper();
				}
				break;

			case 21:
				{
				this.state = 1362;
				this.alter_operator_statement();
				}
				break;

			case 22:
				{
				this.state = 1363;
				this.alter_aggregate_statement();
				}
				break;

			case 23:
				{
				this.state = 1364;
				this.alter_extension_statement();
				}
				break;

			case 24:
				{
				this.state = 1365;
				this.alter_policy_statement();
				}
				break;

			case 25:
				{
				this.state = 1366;
				this.alter_subscription_statement();
				}
				break;

			case 26:
				{
				this.state = 1367;
				this.alter_trigger_statement();
				}
				break;

			case 27:
				{
				this.state = 1368;
				this.alter_rule_statement();
				}
				break;

			case 28:
				{
				this.state = 1369;
				this.alter_operator_family_statement();
				}
				break;

			case 29:
				{
				this.state = 1370;
				this.alter_operator_class_statement();
				}
				break;

			case 30:
				{
				this.state = 1371;
				this.alter_conversion_statement();
				}
				break;

			case 31:
				{
				this.state = 1372;
				this.alter_publication_statement();
				}
				break;

			case 32:
				{
				this.state = 1373;
				this.alter_owner();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_drop(): Schema_dropContext {
		let _localctx: Schema_dropContext = new Schema_dropContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, PLpgSQLParser.RULE_schema_drop);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1376;
			this.match(PLpgSQLParser.DROP);
			this.state = 1388;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 98, this._ctx) ) {
			case 1:
				{
				this.state = 1377;
				this.drop_function_statement();
				}
				break;

			case 2:
				{
				this.state = 1378;
				this.drop_trigger_statement();
				}
				break;

			case 3:
				{
				this.state = 1379;
				this.drop_rule_statement();
				}
				break;

			case 4:
				{
				this.state = 1380;
				this.drop_policy_statement();
				}
				break;

			case 5:
				{
				this.state = 1381;
				this.drop_cast_statement();
				}
				break;

			case 6:
				{
				this.state = 1382;
				this.drop_operator_family_statement();
				}
				break;

			case 7:
				{
				this.state = 1383;
				this.drop_operator_class_statement();
				}
				break;

			case 8:
				{
				this.state = 1384;
				this.drop_statements();
				}
				break;

			case 9:
				{
				this.state = 1385;
				this.drop_user_mapping();
				}
				break;

			case 10:
				{
				this.state = 1386;
				this.drop_owned();
				}
				break;

			case 11:
				{
				this.state = 1387;
				this.drop_operator_statement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_import(): Schema_importContext {
		let _localctx: Schema_importContext = new Schema_importContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, PLpgSQLParser.RULE_schema_import);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1390;
			this.match(PLpgSQLParser.IMPORT);
			this.state = 1391;
			this.match(PLpgSQLParser.FOREIGN);
			this.state = 1392;
			this.match(PLpgSQLParser.SCHEMA);
			this.state = 1393;
			_localctx._name = this.identifier();
			this.state = 1403;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.EXCEPT || _la === PLpgSQLParser.LIMIT) {
				{
				this.state = 1397;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.LIMIT:
					{
					this.state = 1394;
					this.match(PLpgSQLParser.LIMIT);
					this.state = 1395;
					this.match(PLpgSQLParser.TO);
					}
					break;
				case PLpgSQLParser.EXCEPT:
					{
					this.state = 1396;
					this.match(PLpgSQLParser.EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1399;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1400;
				this.identifier_list();
				this.state = 1401;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			this.state = 1405;
			this.match(PLpgSQLParser.FROM);
			this.state = 1406;
			this.match(PLpgSQLParser.SERVER);
			this.state = 1407;
			this.identifier();
			this.state = 1408;
			this.match(PLpgSQLParser.INTO);
			this.state = 1409;
			this.identifier();
			this.state = 1411;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 1410;
				this.define_foreign_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_function_statement(): Alter_function_statementContext {
		let _localctx: Alter_function_statementContext = new Alter_function_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, PLpgSQLParser.RULE_alter_function_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1413;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1415;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 102, this._ctx) ) {
			case 1:
				{
				this.state = 1414;
				this.function_parameters();
				}
				break;
			}
			this.state = 1441;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 108, this._ctx) ) {
			case 1:
				{
				this.state = 1428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 1428;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.CALLED:
					case PLpgSQLParser.COST:
					case PLpgSQLParser.EXTERNAL:
					case PLpgSQLParser.IMMUTABLE:
					case PLpgSQLParser.LANGUAGE:
					case PLpgSQLParser.LEAKPROOF:
					case PLpgSQLParser.PARALLEL:
					case PLpgSQLParser.RETURNS:
					case PLpgSQLParser.ROWS:
					case PLpgSQLParser.SECURITY:
					case PLpgSQLParser.SET:
					case PLpgSQLParser.STABLE:
					case PLpgSQLParser.STRICT:
					case PLpgSQLParser.SUPPORT:
					case PLpgSQLParser.TRANSFORM:
					case PLpgSQLParser.VOLATILE:
					case PLpgSQLParser.AS:
					case PLpgSQLParser.NOT:
					case PLpgSQLParser.WINDOW:
						{
						this.state = 1417;
						this.function_actions_common();
						}
						break;
					case PLpgSQLParser.RESET:
						{
						this.state = 1418;
						this.match(PLpgSQLParser.RESET);
						this.state = 1426;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.ABORT:
						case PLpgSQLParser.ABSOLUTE:
						case PLpgSQLParser.ACCESS:
						case PLpgSQLParser.ACTION:
						case PLpgSQLParser.ADD:
						case PLpgSQLParser.ADMIN:
						case PLpgSQLParser.AFTER:
						case PLpgSQLParser.AGGREGATE:
						case PLpgSQLParser.ALSO:
						case PLpgSQLParser.ALTER:
						case PLpgSQLParser.ALWAYS:
						case PLpgSQLParser.ASSERTION:
						case PLpgSQLParser.ASSIGNMENT:
						case PLpgSQLParser.AT:
						case PLpgSQLParser.ATTACH:
						case PLpgSQLParser.ATTRIBUTE:
						case PLpgSQLParser.BACKWARD:
						case PLpgSQLParser.BEFORE:
						case PLpgSQLParser.BEGIN:
						case PLpgSQLParser.BY:
						case PLpgSQLParser.CACHE:
						case PLpgSQLParser.CALL:
						case PLpgSQLParser.CALLED:
						case PLpgSQLParser.CASCADE:
						case PLpgSQLParser.CASCADED:
						case PLpgSQLParser.CATALOG:
						case PLpgSQLParser.CHAIN:
						case PLpgSQLParser.CHARACTERISTICS:
						case PLpgSQLParser.CHECKPOINT:
						case PLpgSQLParser.CLASS:
						case PLpgSQLParser.CLOSE:
						case PLpgSQLParser.CLUSTER:
						case PLpgSQLParser.COLUMNS:
						case PLpgSQLParser.COMMENT:
						case PLpgSQLParser.COMMENTS:
						case PLpgSQLParser.COMMIT:
						case PLpgSQLParser.COMMITTED:
						case PLpgSQLParser.CONFIGURATION:
						case PLpgSQLParser.CONFLICT:
						case PLpgSQLParser.CONNECTION:
						case PLpgSQLParser.CONSTRAINTS:
						case PLpgSQLParser.CONTENT:
						case PLpgSQLParser.CONTINUE:
						case PLpgSQLParser.CONVERSION:
						case PLpgSQLParser.COPY:
						case PLpgSQLParser.COST:
						case PLpgSQLParser.CSV:
						case PLpgSQLParser.CUBE:
						case PLpgSQLParser.CURRENT:
						case PLpgSQLParser.CURSOR:
						case PLpgSQLParser.CYCLE:
						case PLpgSQLParser.DATA:
						case PLpgSQLParser.DATABASE:
						case PLpgSQLParser.DAY:
						case PLpgSQLParser.DEALLOCATE:
						case PLpgSQLParser.DECLARE:
						case PLpgSQLParser.DEFAULTS:
						case PLpgSQLParser.DEFERRED:
						case PLpgSQLParser.DEFINER:
						case PLpgSQLParser.DELETE:
						case PLpgSQLParser.DELIMITER:
						case PLpgSQLParser.DELIMITERS:
						case PLpgSQLParser.DEPENDS:
						case PLpgSQLParser.DETACH:
						case PLpgSQLParser.DICTIONARY:
						case PLpgSQLParser.DISABLE:
						case PLpgSQLParser.DISCARD:
						case PLpgSQLParser.DOCUMENT:
						case PLpgSQLParser.DOMAIN:
						case PLpgSQLParser.DOUBLE:
						case PLpgSQLParser.DROP:
						case PLpgSQLParser.EACH:
						case PLpgSQLParser.ENABLE:
						case PLpgSQLParser.ENCODING:
						case PLpgSQLParser.ENCRYPTED:
						case PLpgSQLParser.ENUM:
						case PLpgSQLParser.ESCAPE:
						case PLpgSQLParser.EVENT:
						case PLpgSQLParser.EXCLUDE:
						case PLpgSQLParser.EXCLUDING:
						case PLpgSQLParser.EXCLUSIVE:
						case PLpgSQLParser.EXECUTE:
						case PLpgSQLParser.EXPLAIN:
						case PLpgSQLParser.EXTENSION:
						case PLpgSQLParser.EXTERNAL:
						case PLpgSQLParser.FAMILY:
						case PLpgSQLParser.FILTER:
						case PLpgSQLParser.FIRST:
						case PLpgSQLParser.FOLLOWING:
						case PLpgSQLParser.FORCE:
						case PLpgSQLParser.FORWARD:
						case PLpgSQLParser.FUNCTION:
						case PLpgSQLParser.FUNCTIONS:
						case PLpgSQLParser.GENERATED:
						case PLpgSQLParser.GLOBAL:
						case PLpgSQLParser.GRANTED:
						case PLpgSQLParser.GROUPS:
						case PLpgSQLParser.HANDLER:
						case PLpgSQLParser.HEADER:
						case PLpgSQLParser.HOLD:
						case PLpgSQLParser.HOUR:
						case PLpgSQLParser.IDENTITY:
						case PLpgSQLParser.IF:
						case PLpgSQLParser.IMMEDIATE:
						case PLpgSQLParser.IMMUTABLE:
						case PLpgSQLParser.IMPLICIT:
						case PLpgSQLParser.IMPORT:
						case PLpgSQLParser.INCLUDE:
						case PLpgSQLParser.INCLUDING:
						case PLpgSQLParser.INCREMENT:
						case PLpgSQLParser.INDEX:
						case PLpgSQLParser.INDEXES:
						case PLpgSQLParser.INHERIT:
						case PLpgSQLParser.INHERITS:
						case PLpgSQLParser.INLINE:
						case PLpgSQLParser.INPUT:
						case PLpgSQLParser.INSENSITIVE:
						case PLpgSQLParser.INSERT:
						case PLpgSQLParser.INSTEAD:
						case PLpgSQLParser.INVOKER:
						case PLpgSQLParser.ISOLATION:
						case PLpgSQLParser.KEY:
						case PLpgSQLParser.LABEL:
						case PLpgSQLParser.LANGUAGE:
						case PLpgSQLParser.LARGE:
						case PLpgSQLParser.LAST:
						case PLpgSQLParser.LEAKPROOF:
						case PLpgSQLParser.LEVEL:
						case PLpgSQLParser.LISTEN:
						case PLpgSQLParser.LOAD:
						case PLpgSQLParser.LOCAL:
						case PLpgSQLParser.LOCATION:
						case PLpgSQLParser.LOCK:
						case PLpgSQLParser.LOCKED:
						case PLpgSQLParser.LOGGED:
						case PLpgSQLParser.MAPPING:
						case PLpgSQLParser.MATCH:
						case PLpgSQLParser.MATERIALIZED:
						case PLpgSQLParser.MAXVALUE:
						case PLpgSQLParser.METHOD:
						case PLpgSQLParser.MINUTE:
						case PLpgSQLParser.MINVALUE:
						case PLpgSQLParser.MODE:
						case PLpgSQLParser.MONTH:
						case PLpgSQLParser.MOVE:
						case PLpgSQLParser.NAME:
						case PLpgSQLParser.NAMES:
						case PLpgSQLParser.NEW:
						case PLpgSQLParser.NEXT:
						case PLpgSQLParser.NO:
						case PLpgSQLParser.NOTHING:
						case PLpgSQLParser.NOTIFY:
						case PLpgSQLParser.NOWAIT:
						case PLpgSQLParser.NULLS:
						case PLpgSQLParser.OBJECT:
						case PLpgSQLParser.OF:
						case PLpgSQLParser.OFF:
						case PLpgSQLParser.OIDS:
						case PLpgSQLParser.OLD:
						case PLpgSQLParser.OPERATOR:
						case PLpgSQLParser.OPTION:
						case PLpgSQLParser.OPTIONS:
						case PLpgSQLParser.ORDINALITY:
						case PLpgSQLParser.OTHERS:
						case PLpgSQLParser.OVER:
						case PLpgSQLParser.OVERRIDING:
						case PLpgSQLParser.OWNED:
						case PLpgSQLParser.OWNER:
						case PLpgSQLParser.PARALLEL:
						case PLpgSQLParser.PARSER:
						case PLpgSQLParser.PARTIAL:
						case PLpgSQLParser.PARTITION:
						case PLpgSQLParser.PASSING:
						case PLpgSQLParser.PASSWORD:
						case PLpgSQLParser.PLANS:
						case PLpgSQLParser.POLICY:
						case PLpgSQLParser.PRECEDING:
						case PLpgSQLParser.PREPARE:
						case PLpgSQLParser.PREPARED:
						case PLpgSQLParser.PRESERVE:
						case PLpgSQLParser.PRIOR:
						case PLpgSQLParser.PRIVILEGES:
						case PLpgSQLParser.PROCEDURAL:
						case PLpgSQLParser.PROCEDURE:
						case PLpgSQLParser.PROCEDURES:
						case PLpgSQLParser.PROGRAM:
						case PLpgSQLParser.PUBLICATION:
						case PLpgSQLParser.QUOTE:
						case PLpgSQLParser.RANGE:
						case PLpgSQLParser.READ:
						case PLpgSQLParser.REASSIGN:
						case PLpgSQLParser.RECHECK:
						case PLpgSQLParser.RECURSIVE:
						case PLpgSQLParser.REF:
						case PLpgSQLParser.REFERENCING:
						case PLpgSQLParser.REFRESH:
						case PLpgSQLParser.REINDEX:
						case PLpgSQLParser.RELATIVE:
						case PLpgSQLParser.RELEASE:
						case PLpgSQLParser.RENAME:
						case PLpgSQLParser.REPEATABLE:
						case PLpgSQLParser.REPLACE:
						case PLpgSQLParser.REPLICA:
						case PLpgSQLParser.RESET:
						case PLpgSQLParser.RESTART:
						case PLpgSQLParser.RESTRICT:
						case PLpgSQLParser.RETURNS:
						case PLpgSQLParser.REVOKE:
						case PLpgSQLParser.ROLE:
						case PLpgSQLParser.ROLLBACK:
						case PLpgSQLParser.ROLLUP:
						case PLpgSQLParser.ROUTINE:
						case PLpgSQLParser.ROUTINES:
						case PLpgSQLParser.ROWS:
						case PLpgSQLParser.RULE:
						case PLpgSQLParser.SAVEPOINT:
						case PLpgSQLParser.SCHEMA:
						case PLpgSQLParser.SCHEMAS:
						case PLpgSQLParser.SCROLL:
						case PLpgSQLParser.SEARCH:
						case PLpgSQLParser.SECOND:
						case PLpgSQLParser.SECURITY:
						case PLpgSQLParser.SEQUENCE:
						case PLpgSQLParser.SEQUENCES:
						case PLpgSQLParser.SERIALIZABLE:
						case PLpgSQLParser.SERVER:
						case PLpgSQLParser.SESSION:
						case PLpgSQLParser.SET:
						case PLpgSQLParser.SETS:
						case PLpgSQLParser.SHARE:
						case PLpgSQLParser.SHOW:
						case PLpgSQLParser.SIMPLE:
						case PLpgSQLParser.SKIP_:
						case PLpgSQLParser.SNAPSHOT:
						case PLpgSQLParser.SQL:
						case PLpgSQLParser.STABLE:
						case PLpgSQLParser.STANDALONE:
						case PLpgSQLParser.START:
						case PLpgSQLParser.STATEMENT:
						case PLpgSQLParser.STATISTICS:
						case PLpgSQLParser.STDIN:
						case PLpgSQLParser.STDOUT:
						case PLpgSQLParser.STORAGE:
						case PLpgSQLParser.STORED:
						case PLpgSQLParser.STRICT:
						case PLpgSQLParser.STRIP:
						case PLpgSQLParser.SUBSCRIPTION:
						case PLpgSQLParser.SUPPORT:
						case PLpgSQLParser.SYSID:
						case PLpgSQLParser.SYSTEM:
						case PLpgSQLParser.TABLES:
						case PLpgSQLParser.TABLESPACE:
						case PLpgSQLParser.TEMP:
						case PLpgSQLParser.TEMPLATE:
						case PLpgSQLParser.TEMPORARY:
						case PLpgSQLParser.TEXT:
						case PLpgSQLParser.TIES:
						case PLpgSQLParser.TRANSACTION:
						case PLpgSQLParser.TRANSFORM:
						case PLpgSQLParser.TRIGGER:
						case PLpgSQLParser.TRUNCATE:
						case PLpgSQLParser.TRUSTED:
						case PLpgSQLParser.TYPE:
						case PLpgSQLParser.TYPES:
						case PLpgSQLParser.UNBOUNDED:
						case PLpgSQLParser.UNCOMMITTED:
						case PLpgSQLParser.UNENCRYPTED:
						case PLpgSQLParser.UNKNOWN:
						case PLpgSQLParser.UNLISTEN:
						case PLpgSQLParser.UNLOGGED:
						case PLpgSQLParser.UNTIL:
						case PLpgSQLParser.UPDATE:
						case PLpgSQLParser.VACUUM:
						case PLpgSQLParser.VALID:
						case PLpgSQLParser.VALIDATE:
						case PLpgSQLParser.VALIDATOR:
						case PLpgSQLParser.VALUE:
						case PLpgSQLParser.VARYING:
						case PLpgSQLParser.VERSION:
						case PLpgSQLParser.VIEW:
						case PLpgSQLParser.VIEWS:
						case PLpgSQLParser.VOLATILE:
						case PLpgSQLParser.WHITESPACE:
						case PLpgSQLParser.WITHIN:
						case PLpgSQLParser.WITHOUT:
						case PLpgSQLParser.WORK:
						case PLpgSQLParser.WRAPPER:
						case PLpgSQLParser.WRITE:
						case PLpgSQLParser.XML:
						case PLpgSQLParser.YEAR:
						case PLpgSQLParser.YES:
						case PLpgSQLParser.ZONE:
						case PLpgSQLParser.BETWEEN:
						case PLpgSQLParser.BIGINT:
						case PLpgSQLParser.BIT:
						case PLpgSQLParser.BOOLEAN:
						case PLpgSQLParser.CHAR:
						case PLpgSQLParser.CHARACTER:
						case PLpgSQLParser.COALESCE:
						case PLpgSQLParser.DEC:
						case PLpgSQLParser.DECIMAL:
						case PLpgSQLParser.EXISTS:
						case PLpgSQLParser.EXTRACT:
						case PLpgSQLParser.FLOAT:
						case PLpgSQLParser.GREATEST:
						case PLpgSQLParser.GROUPING:
						case PLpgSQLParser.INOUT:
						case PLpgSQLParser.INT:
						case PLpgSQLParser.INTEGER:
						case PLpgSQLParser.INTERVAL:
						case PLpgSQLParser.LEAST:
						case PLpgSQLParser.NATIONAL:
						case PLpgSQLParser.NCHAR:
						case PLpgSQLParser.NONE:
						case PLpgSQLParser.NULLIF:
						case PLpgSQLParser.NUMERIC:
						case PLpgSQLParser.OUT:
						case PLpgSQLParser.OVERLAY:
						case PLpgSQLParser.POSITION:
						case PLpgSQLParser.PRECISION:
						case PLpgSQLParser.REAL:
						case PLpgSQLParser.ROW:
						case PLpgSQLParser.SETOF:
						case PLpgSQLParser.SMALLINT:
						case PLpgSQLParser.SUBSTRING:
						case PLpgSQLParser.TIME:
						case PLpgSQLParser.TIMESTAMP:
						case PLpgSQLParser.TREAT:
						case PLpgSQLParser.TRIM:
						case PLpgSQLParser.VALUES:
						case PLpgSQLParser.VARCHAR:
						case PLpgSQLParser.XMLATTRIBUTES:
						case PLpgSQLParser.XMLCONCAT:
						case PLpgSQLParser.XMLELEMENT:
						case PLpgSQLParser.XMLEXISTS:
						case PLpgSQLParser.XMLFOREST:
						case PLpgSQLParser.XMLNAMESPACES:
						case PLpgSQLParser.XMLPARSE:
						case PLpgSQLParser.XMLPI:
						case PLpgSQLParser.XMLROOT:
						case PLpgSQLParser.XMLSERIALIZE:
						case PLpgSQLParser.XMLTABLE:
						case PLpgSQLParser.ALIGNMENT:
						case PLpgSQLParser.BASETYPE:
						case PLpgSQLParser.BUFFERS:
						case PLpgSQLParser.BYPASSRLS:
						case PLpgSQLParser.CANONICAL:
						case PLpgSQLParser.CATEGORY:
						case PLpgSQLParser.COLLATABLE:
						case PLpgSQLParser.COMBINEFUNC:
						case PLpgSQLParser.COMMUTATOR:
						case PLpgSQLParser.CONNECT:
						case PLpgSQLParser.COSTS:
						case PLpgSQLParser.CREATEDB:
						case PLpgSQLParser.CREATEROLE:
						case PLpgSQLParser.DESERIALFUNC:
						case PLpgSQLParser.DETERMINISTIC:
						case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
						case PLpgSQLParser.ELEMENT:
						case PLpgSQLParser.EXTENDED:
						case PLpgSQLParser.FINALFUNC:
						case PLpgSQLParser.FINALFUNC_EXTRA:
						case PLpgSQLParser.FINALFUNC_MODIFY:
						case PLpgSQLParser.FORCE_NOT_NULL:
						case PLpgSQLParser.FORCE_NULL:
						case PLpgSQLParser.FORCE_QUOTE:
						case PLpgSQLParser.FORMAT:
						case PLpgSQLParser.GETTOKEN:
						case PLpgSQLParser.HASH:
						case PLpgSQLParser.HASHES:
						case PLpgSQLParser.HEADLINE:
						case PLpgSQLParser.HYPOTHETICAL:
						case PLpgSQLParser.INDEX_CLEANUP:
						case PLpgSQLParser.INIT:
						case PLpgSQLParser.INITCOND:
						case PLpgSQLParser.INTERNALLENGTH:
						case PLpgSQLParser.JSON:
						case PLpgSQLParser.LC_COLLATE:
						case PLpgSQLParser.LC_CTYPE:
						case PLpgSQLParser.LEFTARG:
						case PLpgSQLParser.LEXIZE:
						case PLpgSQLParser.LEXTYPES:
						case PLpgSQLParser.LIST:
						case PLpgSQLParser.LOCALE:
						case PLpgSQLParser.LOGIN:
						case PLpgSQLParser.MAIN:
						case PLpgSQLParser.MERGES:
						case PLpgSQLParser.MFINALFUNC:
						case PLpgSQLParser.MFINALFUNC_EXTRA:
						case PLpgSQLParser.MFINALFUNC_MODIFY:
						case PLpgSQLParser.MINITCOND:
						case PLpgSQLParser.MINVFUNC:
						case PLpgSQLParser.MODULUS:
						case PLpgSQLParser.MSFUNC:
						case PLpgSQLParser.MSSPACE:
						case PLpgSQLParser.MSTYPE:
						case PLpgSQLParser.NEGATOR:
						case PLpgSQLParser.NOBYPASSRLS:
						case PLpgSQLParser.NOCREATEDB:
						case PLpgSQLParser.NOCREATEROLE:
						case PLpgSQLParser.NOINHERIT:
						case PLpgSQLParser.NOLOGIN:
						case PLpgSQLParser.NOREPLICATION:
						case PLpgSQLParser.NOSUPERUSER:
						case PLpgSQLParser.OUTPUT:
						case PLpgSQLParser.PASSEDBYVALUE:
						case PLpgSQLParser.PATH:
						case PLpgSQLParser.PERMISSIVE:
						case PLpgSQLParser.PLAIN:
						case PLpgSQLParser.PREFERRED:
						case PLpgSQLParser.PROVIDER:
						case PLpgSQLParser.READ_ONLY:
						case PLpgSQLParser.READ_WRITE:
						case PLpgSQLParser.RECEIVE:
						case PLpgSQLParser.REMAINDER:
						case PLpgSQLParser.REPLICATION:
						case PLpgSQLParser.RESTRICTED:
						case PLpgSQLParser.RESTRICTIVE:
						case PLpgSQLParser.RIGHTARG:
						case PLpgSQLParser.SAFE:
						case PLpgSQLParser.SEND:
						case PLpgSQLParser.SERIALFUNC:
						case PLpgSQLParser.SETTINGS:
						case PLpgSQLParser.SFUNC:
						case PLpgSQLParser.SHAREABLE:
						case PLpgSQLParser.SKIP_LOCKED:
						case PLpgSQLParser.SORTOP:
						case PLpgSQLParser.SSPACE:
						case PLpgSQLParser.STYPE:
						case PLpgSQLParser.SUBTYPE_DIFF:
						case PLpgSQLParser.SUBTYPE_OPCLASS:
						case PLpgSQLParser.SUBTYPE:
						case PLpgSQLParser.SUMMARY:
						case PLpgSQLParser.SUPERUSER:
						case PLpgSQLParser.TIMING:
						case PLpgSQLParser.TYPMOD_IN:
						case PLpgSQLParser.TYPMOD_OUT:
						case PLpgSQLParser.UNSAFE:
						case PLpgSQLParser.USAGE:
						case PLpgSQLParser.VARIABLE:
						case PLpgSQLParser.YAML:
						case PLpgSQLParser.ALIAS:
						case PLpgSQLParser.ASSERT:
						case PLpgSQLParser.CONSTANT:
						case PLpgSQLParser.DATATYPE:
						case PLpgSQLParser.DEBUG:
						case PLpgSQLParser.DETAIL:
						case PLpgSQLParser.DIAGNOSTICS:
						case PLpgSQLParser.ELSEIF:
						case PLpgSQLParser.ELSIF:
						case PLpgSQLParser.ERRCODE:
						case PLpgSQLParser.EXIT:
						case PLpgSQLParser.EXCEPTION:
						case PLpgSQLParser.FOREACH:
						case PLpgSQLParser.GET:
						case PLpgSQLParser.HINT:
						case PLpgSQLParser.INFO:
						case PLpgSQLParser.LOG:
						case PLpgSQLParser.LOOP:
						case PLpgSQLParser.MESSAGE:
						case PLpgSQLParser.NOTICE:
						case PLpgSQLParser.OPEN:
						case PLpgSQLParser.PERFORM:
						case PLpgSQLParser.QUERY:
						case PLpgSQLParser.RAISE:
						case PLpgSQLParser.RECORD:
						case PLpgSQLParser.RETURN:
						case PLpgSQLParser.REVERSE:
						case PLpgSQLParser.ROWTYPE:
						case PLpgSQLParser.SLICE:
						case PLpgSQLParser.SQLSTATE:
						case PLpgSQLParser.STACKED:
						case PLpgSQLParser.WARNING:
						case PLpgSQLParser.WHILE:
						case PLpgSQLParser.Identifier:
						case PLpgSQLParser.QuotedIdentifier:
							{
							this.state = 1422;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
							case 1:
								{
								this.state = 1419;
								this.identifier();
								this.state = 1420;
								this.match(PLpgSQLParser.DOT);
								}
								break;
							}
							this.state = 1424;
							this.identifier();
							}
							break;
						case PLpgSQLParser.ALL:
							{
							this.state = 1425;
							this.match(PLpgSQLParser.ALL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 1430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.CALLED || _la === PLpgSQLParser.COST || _la === PLpgSQLParser.EXTERNAL || _la === PLpgSQLParser.IMMUTABLE || _la === PLpgSQLParser.LANGUAGE || _la === PLpgSQLParser.LEAKPROOF || _la === PLpgSQLParser.PARALLEL || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & ((1 << (PLpgSQLParser.RESET - 204)) | (1 << (PLpgSQLParser.RETURNS - 204)) | (1 << (PLpgSQLParser.ROWS - 204)) | (1 << (PLpgSQLParser.SECURITY - 204)) | (1 << (PLpgSQLParser.SET - 204)))) !== 0) || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & ((1 << (PLpgSQLParser.STABLE - 236)) | (1 << (PLpgSQLParser.STRICT - 236)) | (1 << (PLpgSQLParser.SUPPORT - 236)) | (1 << (PLpgSQLParser.TRANSFORM - 236)))) !== 0) || _la === PLpgSQLParser.VOLATILE || _la === PLpgSQLParser.AS || _la === PLpgSQLParser.NOT || _la === PLpgSQLParser.WINDOW);
				this.state = 1433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 1432;
					this.match(PLpgSQLParser.RESTRICT);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 1435;
				this.rename_to();
				}
				break;

			case 3:
				{
				this.state = 1436;
				this.set_schema();
				}
				break;

			case 4:
				{
				this.state = 1437;
				this.match(PLpgSQLParser.DEPENDS);
				this.state = 1438;
				this.match(PLpgSQLParser.ON);
				this.state = 1439;
				this.match(PLpgSQLParser.EXTENSION);
				this.state = 1440;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_aggregate_statement(): Alter_aggregate_statementContext {
		let _localctx: Alter_aggregate_statementContext = new Alter_aggregate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, PLpgSQLParser.RULE_alter_aggregate_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1443;
			this.match(PLpgSQLParser.AGGREGATE);
			this.state = 1444;
			this.function_parameters();
			this.state = 1447;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				{
				this.state = 1445;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.SET:
				{
				this.state = 1446;
				this.set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_extension_statement(): Alter_extension_statementContext {
		let _localctx: Alter_extension_statementContext = new Alter_extension_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, PLpgSQLParser.RULE_alter_extension_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1449;
			this.match(PLpgSQLParser.EXTENSION);
			this.state = 1450;
			this.identifier();
			this.state = 1451;
			this.alter_extension_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_extension_action(): Alter_extension_actionContext {
		let _localctx: Alter_extension_actionContext = new Alter_extension_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, PLpgSQLParser.RULE_alter_extension_action);
		let _la: number;
		try {
			this.state = 1464;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1453;
				this.set_schema();
				}
				break;
			case PLpgSQLParser.UPDATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1454;
				this.match(PLpgSQLParser.UPDATE);
				this.state = 1460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.TO) {
					{
					this.state = 1455;
					this.match(PLpgSQLParser.TO);
					this.state = 1458;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.ABORT:
					case PLpgSQLParser.ABSOLUTE:
					case PLpgSQLParser.ACCESS:
					case PLpgSQLParser.ACTION:
					case PLpgSQLParser.ADD:
					case PLpgSQLParser.ADMIN:
					case PLpgSQLParser.AFTER:
					case PLpgSQLParser.AGGREGATE:
					case PLpgSQLParser.ALSO:
					case PLpgSQLParser.ALTER:
					case PLpgSQLParser.ALWAYS:
					case PLpgSQLParser.ASSERTION:
					case PLpgSQLParser.ASSIGNMENT:
					case PLpgSQLParser.AT:
					case PLpgSQLParser.ATTACH:
					case PLpgSQLParser.ATTRIBUTE:
					case PLpgSQLParser.BACKWARD:
					case PLpgSQLParser.BEFORE:
					case PLpgSQLParser.BEGIN:
					case PLpgSQLParser.BY:
					case PLpgSQLParser.CACHE:
					case PLpgSQLParser.CALL:
					case PLpgSQLParser.CALLED:
					case PLpgSQLParser.CASCADE:
					case PLpgSQLParser.CASCADED:
					case PLpgSQLParser.CATALOG:
					case PLpgSQLParser.CHAIN:
					case PLpgSQLParser.CHARACTERISTICS:
					case PLpgSQLParser.CHECKPOINT:
					case PLpgSQLParser.CLASS:
					case PLpgSQLParser.CLOSE:
					case PLpgSQLParser.CLUSTER:
					case PLpgSQLParser.COLUMNS:
					case PLpgSQLParser.COMMENT:
					case PLpgSQLParser.COMMENTS:
					case PLpgSQLParser.COMMIT:
					case PLpgSQLParser.COMMITTED:
					case PLpgSQLParser.CONFIGURATION:
					case PLpgSQLParser.CONFLICT:
					case PLpgSQLParser.CONNECTION:
					case PLpgSQLParser.CONSTRAINTS:
					case PLpgSQLParser.CONTENT:
					case PLpgSQLParser.CONTINUE:
					case PLpgSQLParser.CONVERSION:
					case PLpgSQLParser.COPY:
					case PLpgSQLParser.COST:
					case PLpgSQLParser.CSV:
					case PLpgSQLParser.CUBE:
					case PLpgSQLParser.CURRENT:
					case PLpgSQLParser.CURSOR:
					case PLpgSQLParser.CYCLE:
					case PLpgSQLParser.DATA:
					case PLpgSQLParser.DATABASE:
					case PLpgSQLParser.DAY:
					case PLpgSQLParser.DEALLOCATE:
					case PLpgSQLParser.DECLARE:
					case PLpgSQLParser.DEFAULTS:
					case PLpgSQLParser.DEFERRED:
					case PLpgSQLParser.DEFINER:
					case PLpgSQLParser.DELETE:
					case PLpgSQLParser.DELIMITER:
					case PLpgSQLParser.DELIMITERS:
					case PLpgSQLParser.DEPENDS:
					case PLpgSQLParser.DETACH:
					case PLpgSQLParser.DICTIONARY:
					case PLpgSQLParser.DISABLE:
					case PLpgSQLParser.DISCARD:
					case PLpgSQLParser.DOCUMENT:
					case PLpgSQLParser.DOMAIN:
					case PLpgSQLParser.DOUBLE:
					case PLpgSQLParser.DROP:
					case PLpgSQLParser.EACH:
					case PLpgSQLParser.ENABLE:
					case PLpgSQLParser.ENCODING:
					case PLpgSQLParser.ENCRYPTED:
					case PLpgSQLParser.ENUM:
					case PLpgSQLParser.ESCAPE:
					case PLpgSQLParser.EVENT:
					case PLpgSQLParser.EXCLUDE:
					case PLpgSQLParser.EXCLUDING:
					case PLpgSQLParser.EXCLUSIVE:
					case PLpgSQLParser.EXECUTE:
					case PLpgSQLParser.EXPLAIN:
					case PLpgSQLParser.EXTENSION:
					case PLpgSQLParser.EXTERNAL:
					case PLpgSQLParser.FAMILY:
					case PLpgSQLParser.FILTER:
					case PLpgSQLParser.FIRST:
					case PLpgSQLParser.FOLLOWING:
					case PLpgSQLParser.FORCE:
					case PLpgSQLParser.FORWARD:
					case PLpgSQLParser.FUNCTION:
					case PLpgSQLParser.FUNCTIONS:
					case PLpgSQLParser.GENERATED:
					case PLpgSQLParser.GLOBAL:
					case PLpgSQLParser.GRANTED:
					case PLpgSQLParser.GROUPS:
					case PLpgSQLParser.HANDLER:
					case PLpgSQLParser.HEADER:
					case PLpgSQLParser.HOLD:
					case PLpgSQLParser.HOUR:
					case PLpgSQLParser.IDENTITY:
					case PLpgSQLParser.IF:
					case PLpgSQLParser.IMMEDIATE:
					case PLpgSQLParser.IMMUTABLE:
					case PLpgSQLParser.IMPLICIT:
					case PLpgSQLParser.IMPORT:
					case PLpgSQLParser.INCLUDE:
					case PLpgSQLParser.INCLUDING:
					case PLpgSQLParser.INCREMENT:
					case PLpgSQLParser.INDEX:
					case PLpgSQLParser.INDEXES:
					case PLpgSQLParser.INHERIT:
					case PLpgSQLParser.INHERITS:
					case PLpgSQLParser.INLINE:
					case PLpgSQLParser.INPUT:
					case PLpgSQLParser.INSENSITIVE:
					case PLpgSQLParser.INSERT:
					case PLpgSQLParser.INSTEAD:
					case PLpgSQLParser.INVOKER:
					case PLpgSQLParser.ISOLATION:
					case PLpgSQLParser.KEY:
					case PLpgSQLParser.LABEL:
					case PLpgSQLParser.LANGUAGE:
					case PLpgSQLParser.LARGE:
					case PLpgSQLParser.LAST:
					case PLpgSQLParser.LEAKPROOF:
					case PLpgSQLParser.LEVEL:
					case PLpgSQLParser.LISTEN:
					case PLpgSQLParser.LOAD:
					case PLpgSQLParser.LOCAL:
					case PLpgSQLParser.LOCATION:
					case PLpgSQLParser.LOCK:
					case PLpgSQLParser.LOCKED:
					case PLpgSQLParser.LOGGED:
					case PLpgSQLParser.MAPPING:
					case PLpgSQLParser.MATCH:
					case PLpgSQLParser.MATERIALIZED:
					case PLpgSQLParser.MAXVALUE:
					case PLpgSQLParser.METHOD:
					case PLpgSQLParser.MINUTE:
					case PLpgSQLParser.MINVALUE:
					case PLpgSQLParser.MODE:
					case PLpgSQLParser.MONTH:
					case PLpgSQLParser.MOVE:
					case PLpgSQLParser.NAME:
					case PLpgSQLParser.NAMES:
					case PLpgSQLParser.NEW:
					case PLpgSQLParser.NEXT:
					case PLpgSQLParser.NO:
					case PLpgSQLParser.NOTHING:
					case PLpgSQLParser.NOTIFY:
					case PLpgSQLParser.NOWAIT:
					case PLpgSQLParser.NULLS:
					case PLpgSQLParser.OBJECT:
					case PLpgSQLParser.OF:
					case PLpgSQLParser.OFF:
					case PLpgSQLParser.OIDS:
					case PLpgSQLParser.OLD:
					case PLpgSQLParser.OPERATOR:
					case PLpgSQLParser.OPTION:
					case PLpgSQLParser.OPTIONS:
					case PLpgSQLParser.ORDINALITY:
					case PLpgSQLParser.OTHERS:
					case PLpgSQLParser.OVER:
					case PLpgSQLParser.OVERRIDING:
					case PLpgSQLParser.OWNED:
					case PLpgSQLParser.OWNER:
					case PLpgSQLParser.PARALLEL:
					case PLpgSQLParser.PARSER:
					case PLpgSQLParser.PARTIAL:
					case PLpgSQLParser.PARTITION:
					case PLpgSQLParser.PASSING:
					case PLpgSQLParser.PASSWORD:
					case PLpgSQLParser.PLANS:
					case PLpgSQLParser.POLICY:
					case PLpgSQLParser.PRECEDING:
					case PLpgSQLParser.PREPARE:
					case PLpgSQLParser.PREPARED:
					case PLpgSQLParser.PRESERVE:
					case PLpgSQLParser.PRIOR:
					case PLpgSQLParser.PRIVILEGES:
					case PLpgSQLParser.PROCEDURAL:
					case PLpgSQLParser.PROCEDURE:
					case PLpgSQLParser.PROCEDURES:
					case PLpgSQLParser.PROGRAM:
					case PLpgSQLParser.PUBLICATION:
					case PLpgSQLParser.QUOTE:
					case PLpgSQLParser.RANGE:
					case PLpgSQLParser.READ:
					case PLpgSQLParser.REASSIGN:
					case PLpgSQLParser.RECHECK:
					case PLpgSQLParser.RECURSIVE:
					case PLpgSQLParser.REF:
					case PLpgSQLParser.REFERENCING:
					case PLpgSQLParser.REFRESH:
					case PLpgSQLParser.REINDEX:
					case PLpgSQLParser.RELATIVE:
					case PLpgSQLParser.RELEASE:
					case PLpgSQLParser.RENAME:
					case PLpgSQLParser.REPEATABLE:
					case PLpgSQLParser.REPLACE:
					case PLpgSQLParser.REPLICA:
					case PLpgSQLParser.RESET:
					case PLpgSQLParser.RESTART:
					case PLpgSQLParser.RESTRICT:
					case PLpgSQLParser.RETURNS:
					case PLpgSQLParser.REVOKE:
					case PLpgSQLParser.ROLE:
					case PLpgSQLParser.ROLLBACK:
					case PLpgSQLParser.ROLLUP:
					case PLpgSQLParser.ROUTINE:
					case PLpgSQLParser.ROUTINES:
					case PLpgSQLParser.ROWS:
					case PLpgSQLParser.RULE:
					case PLpgSQLParser.SAVEPOINT:
					case PLpgSQLParser.SCHEMA:
					case PLpgSQLParser.SCHEMAS:
					case PLpgSQLParser.SCROLL:
					case PLpgSQLParser.SEARCH:
					case PLpgSQLParser.SECOND:
					case PLpgSQLParser.SECURITY:
					case PLpgSQLParser.SEQUENCE:
					case PLpgSQLParser.SEQUENCES:
					case PLpgSQLParser.SERIALIZABLE:
					case PLpgSQLParser.SERVER:
					case PLpgSQLParser.SESSION:
					case PLpgSQLParser.SET:
					case PLpgSQLParser.SETS:
					case PLpgSQLParser.SHARE:
					case PLpgSQLParser.SHOW:
					case PLpgSQLParser.SIMPLE:
					case PLpgSQLParser.SKIP_:
					case PLpgSQLParser.SNAPSHOT:
					case PLpgSQLParser.SQL:
					case PLpgSQLParser.STABLE:
					case PLpgSQLParser.STANDALONE:
					case PLpgSQLParser.START:
					case PLpgSQLParser.STATEMENT:
					case PLpgSQLParser.STATISTICS:
					case PLpgSQLParser.STDIN:
					case PLpgSQLParser.STDOUT:
					case PLpgSQLParser.STORAGE:
					case PLpgSQLParser.STORED:
					case PLpgSQLParser.STRICT:
					case PLpgSQLParser.STRIP:
					case PLpgSQLParser.SUBSCRIPTION:
					case PLpgSQLParser.SUPPORT:
					case PLpgSQLParser.SYSID:
					case PLpgSQLParser.SYSTEM:
					case PLpgSQLParser.TABLES:
					case PLpgSQLParser.TABLESPACE:
					case PLpgSQLParser.TEMP:
					case PLpgSQLParser.TEMPLATE:
					case PLpgSQLParser.TEMPORARY:
					case PLpgSQLParser.TEXT:
					case PLpgSQLParser.TIES:
					case PLpgSQLParser.TRANSACTION:
					case PLpgSQLParser.TRANSFORM:
					case PLpgSQLParser.TRIGGER:
					case PLpgSQLParser.TRUNCATE:
					case PLpgSQLParser.TRUSTED:
					case PLpgSQLParser.TYPE:
					case PLpgSQLParser.TYPES:
					case PLpgSQLParser.UNBOUNDED:
					case PLpgSQLParser.UNCOMMITTED:
					case PLpgSQLParser.UNENCRYPTED:
					case PLpgSQLParser.UNKNOWN:
					case PLpgSQLParser.UNLISTEN:
					case PLpgSQLParser.UNLOGGED:
					case PLpgSQLParser.UNTIL:
					case PLpgSQLParser.UPDATE:
					case PLpgSQLParser.VACUUM:
					case PLpgSQLParser.VALID:
					case PLpgSQLParser.VALIDATE:
					case PLpgSQLParser.VALIDATOR:
					case PLpgSQLParser.VALUE:
					case PLpgSQLParser.VARYING:
					case PLpgSQLParser.VERSION:
					case PLpgSQLParser.VIEW:
					case PLpgSQLParser.VIEWS:
					case PLpgSQLParser.VOLATILE:
					case PLpgSQLParser.WHITESPACE:
					case PLpgSQLParser.WITHIN:
					case PLpgSQLParser.WITHOUT:
					case PLpgSQLParser.WORK:
					case PLpgSQLParser.WRAPPER:
					case PLpgSQLParser.WRITE:
					case PLpgSQLParser.XML:
					case PLpgSQLParser.YEAR:
					case PLpgSQLParser.YES:
					case PLpgSQLParser.ZONE:
					case PLpgSQLParser.BETWEEN:
					case PLpgSQLParser.BIGINT:
					case PLpgSQLParser.BIT:
					case PLpgSQLParser.BOOLEAN:
					case PLpgSQLParser.CHAR:
					case PLpgSQLParser.CHARACTER:
					case PLpgSQLParser.COALESCE:
					case PLpgSQLParser.DEC:
					case PLpgSQLParser.DECIMAL:
					case PLpgSQLParser.EXISTS:
					case PLpgSQLParser.EXTRACT:
					case PLpgSQLParser.FLOAT:
					case PLpgSQLParser.GREATEST:
					case PLpgSQLParser.GROUPING:
					case PLpgSQLParser.INOUT:
					case PLpgSQLParser.INT:
					case PLpgSQLParser.INTEGER:
					case PLpgSQLParser.INTERVAL:
					case PLpgSQLParser.LEAST:
					case PLpgSQLParser.NATIONAL:
					case PLpgSQLParser.NCHAR:
					case PLpgSQLParser.NONE:
					case PLpgSQLParser.NULLIF:
					case PLpgSQLParser.NUMERIC:
					case PLpgSQLParser.OUT:
					case PLpgSQLParser.OVERLAY:
					case PLpgSQLParser.POSITION:
					case PLpgSQLParser.PRECISION:
					case PLpgSQLParser.REAL:
					case PLpgSQLParser.ROW:
					case PLpgSQLParser.SETOF:
					case PLpgSQLParser.SMALLINT:
					case PLpgSQLParser.SUBSTRING:
					case PLpgSQLParser.TIME:
					case PLpgSQLParser.TIMESTAMP:
					case PLpgSQLParser.TREAT:
					case PLpgSQLParser.TRIM:
					case PLpgSQLParser.VALUES:
					case PLpgSQLParser.VARCHAR:
					case PLpgSQLParser.XMLATTRIBUTES:
					case PLpgSQLParser.XMLCONCAT:
					case PLpgSQLParser.XMLELEMENT:
					case PLpgSQLParser.XMLEXISTS:
					case PLpgSQLParser.XMLFOREST:
					case PLpgSQLParser.XMLNAMESPACES:
					case PLpgSQLParser.XMLPARSE:
					case PLpgSQLParser.XMLPI:
					case PLpgSQLParser.XMLROOT:
					case PLpgSQLParser.XMLSERIALIZE:
					case PLpgSQLParser.XMLTABLE:
					case PLpgSQLParser.ALIGNMENT:
					case PLpgSQLParser.BASETYPE:
					case PLpgSQLParser.BUFFERS:
					case PLpgSQLParser.BYPASSRLS:
					case PLpgSQLParser.CANONICAL:
					case PLpgSQLParser.CATEGORY:
					case PLpgSQLParser.COLLATABLE:
					case PLpgSQLParser.COMBINEFUNC:
					case PLpgSQLParser.COMMUTATOR:
					case PLpgSQLParser.CONNECT:
					case PLpgSQLParser.COSTS:
					case PLpgSQLParser.CREATEDB:
					case PLpgSQLParser.CREATEROLE:
					case PLpgSQLParser.DESERIALFUNC:
					case PLpgSQLParser.DETERMINISTIC:
					case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
					case PLpgSQLParser.ELEMENT:
					case PLpgSQLParser.EXTENDED:
					case PLpgSQLParser.FINALFUNC:
					case PLpgSQLParser.FINALFUNC_EXTRA:
					case PLpgSQLParser.FINALFUNC_MODIFY:
					case PLpgSQLParser.FORCE_NOT_NULL:
					case PLpgSQLParser.FORCE_NULL:
					case PLpgSQLParser.FORCE_QUOTE:
					case PLpgSQLParser.FORMAT:
					case PLpgSQLParser.GETTOKEN:
					case PLpgSQLParser.HASH:
					case PLpgSQLParser.HASHES:
					case PLpgSQLParser.HEADLINE:
					case PLpgSQLParser.HYPOTHETICAL:
					case PLpgSQLParser.INDEX_CLEANUP:
					case PLpgSQLParser.INIT:
					case PLpgSQLParser.INITCOND:
					case PLpgSQLParser.INTERNALLENGTH:
					case PLpgSQLParser.JSON:
					case PLpgSQLParser.LC_COLLATE:
					case PLpgSQLParser.LC_CTYPE:
					case PLpgSQLParser.LEFTARG:
					case PLpgSQLParser.LEXIZE:
					case PLpgSQLParser.LEXTYPES:
					case PLpgSQLParser.LIST:
					case PLpgSQLParser.LOCALE:
					case PLpgSQLParser.LOGIN:
					case PLpgSQLParser.MAIN:
					case PLpgSQLParser.MERGES:
					case PLpgSQLParser.MFINALFUNC:
					case PLpgSQLParser.MFINALFUNC_EXTRA:
					case PLpgSQLParser.MFINALFUNC_MODIFY:
					case PLpgSQLParser.MINITCOND:
					case PLpgSQLParser.MINVFUNC:
					case PLpgSQLParser.MODULUS:
					case PLpgSQLParser.MSFUNC:
					case PLpgSQLParser.MSSPACE:
					case PLpgSQLParser.MSTYPE:
					case PLpgSQLParser.NEGATOR:
					case PLpgSQLParser.NOBYPASSRLS:
					case PLpgSQLParser.NOCREATEDB:
					case PLpgSQLParser.NOCREATEROLE:
					case PLpgSQLParser.NOINHERIT:
					case PLpgSQLParser.NOLOGIN:
					case PLpgSQLParser.NOREPLICATION:
					case PLpgSQLParser.NOSUPERUSER:
					case PLpgSQLParser.OUTPUT:
					case PLpgSQLParser.PASSEDBYVALUE:
					case PLpgSQLParser.PATH:
					case PLpgSQLParser.PERMISSIVE:
					case PLpgSQLParser.PLAIN:
					case PLpgSQLParser.PREFERRED:
					case PLpgSQLParser.PROVIDER:
					case PLpgSQLParser.READ_ONLY:
					case PLpgSQLParser.READ_WRITE:
					case PLpgSQLParser.RECEIVE:
					case PLpgSQLParser.REMAINDER:
					case PLpgSQLParser.REPLICATION:
					case PLpgSQLParser.RESTRICTED:
					case PLpgSQLParser.RESTRICTIVE:
					case PLpgSQLParser.RIGHTARG:
					case PLpgSQLParser.SAFE:
					case PLpgSQLParser.SEND:
					case PLpgSQLParser.SERIALFUNC:
					case PLpgSQLParser.SETTINGS:
					case PLpgSQLParser.SFUNC:
					case PLpgSQLParser.SHAREABLE:
					case PLpgSQLParser.SKIP_LOCKED:
					case PLpgSQLParser.SORTOP:
					case PLpgSQLParser.SSPACE:
					case PLpgSQLParser.STYPE:
					case PLpgSQLParser.SUBTYPE_DIFF:
					case PLpgSQLParser.SUBTYPE_OPCLASS:
					case PLpgSQLParser.SUBTYPE:
					case PLpgSQLParser.SUMMARY:
					case PLpgSQLParser.SUPERUSER:
					case PLpgSQLParser.TIMING:
					case PLpgSQLParser.TYPMOD_IN:
					case PLpgSQLParser.TYPMOD_OUT:
					case PLpgSQLParser.UNSAFE:
					case PLpgSQLParser.USAGE:
					case PLpgSQLParser.VARIABLE:
					case PLpgSQLParser.YAML:
					case PLpgSQLParser.ALIAS:
					case PLpgSQLParser.ASSERT:
					case PLpgSQLParser.CONSTANT:
					case PLpgSQLParser.DATATYPE:
					case PLpgSQLParser.DEBUG:
					case PLpgSQLParser.DETAIL:
					case PLpgSQLParser.DIAGNOSTICS:
					case PLpgSQLParser.ELSEIF:
					case PLpgSQLParser.ELSIF:
					case PLpgSQLParser.ERRCODE:
					case PLpgSQLParser.EXIT:
					case PLpgSQLParser.EXCEPTION:
					case PLpgSQLParser.FOREACH:
					case PLpgSQLParser.GET:
					case PLpgSQLParser.HINT:
					case PLpgSQLParser.INFO:
					case PLpgSQLParser.LOG:
					case PLpgSQLParser.LOOP:
					case PLpgSQLParser.MESSAGE:
					case PLpgSQLParser.NOTICE:
					case PLpgSQLParser.OPEN:
					case PLpgSQLParser.PERFORM:
					case PLpgSQLParser.QUERY:
					case PLpgSQLParser.RAISE:
					case PLpgSQLParser.RECORD:
					case PLpgSQLParser.RETURN:
					case PLpgSQLParser.REVERSE:
					case PLpgSQLParser.ROWTYPE:
					case PLpgSQLParser.SLICE:
					case PLpgSQLParser.SQLSTATE:
					case PLpgSQLParser.STACKED:
					case PLpgSQLParser.WARNING:
					case PLpgSQLParser.WHILE:
					case PLpgSQLParser.Identifier:
					case PLpgSQLParser.QuotedIdentifier:
						{
						this.state = 1456;
						this.identifier();
						}
						break;
					case PLpgSQLParser.Character_String_Literal:
					case PLpgSQLParser.BeginDollarStringConstant:
						{
						this.state = 1457;
						this.character_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.DROP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1462;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ADD || _la === PLpgSQLParser.DROP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1463;
				this.extension_member_object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extension_member_object(): Extension_member_objectContext {
		let _localctx: Extension_member_objectContext = new Extension_member_objectContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, PLpgSQLParser.RULE_extension_member_object);
		let _la: number;
		try {
			this.state = 1556;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1466;
				this.match(PLpgSQLParser.ACCESS);
				this.state = 1467;
				this.match(PLpgSQLParser.METHOD);
				this.state = 1468;
				this.schema_qualified_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1469;
				this.match(PLpgSQLParser.AGGREGATE);
				this.state = 1470;
				this.function_parameters();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1471;
				this.match(PLpgSQLParser.CAST);
				this.state = 1472;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1473;
				this.schema_qualified_name();
				this.state = 1474;
				this.match(PLpgSQLParser.AS);
				this.state = 1475;
				this.schema_qualified_name();
				this.state = 1476;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1478;
				this.match(PLpgSQLParser.COLLATION);
				this.state = 1479;
				this.identifier();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1480;
				this.match(PLpgSQLParser.CONVERSION);
				this.state = 1481;
				this.identifier();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1482;
				this.match(PLpgSQLParser.DOMAIN);
				this.state = 1483;
				this.schema_qualified_name();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1484;
				this.match(PLpgSQLParser.EVENT);
				this.state = 1485;
				this.match(PLpgSQLParser.TRIGGER);
				this.state = 1486;
				this.identifier();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1487;
				this.match(PLpgSQLParser.FOREIGN);
				this.state = 1488;
				this.match(PLpgSQLParser.DATA);
				this.state = 1489;
				this.match(PLpgSQLParser.WRAPPER);
				this.state = 1490;
				this.identifier();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1491;
				this.match(PLpgSQLParser.FOREIGN);
				this.state = 1492;
				this.match(PLpgSQLParser.TABLE);
				this.state = 1493;
				this.schema_qualified_name();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1494;
				this.match(PLpgSQLParser.FUNCTION);
				this.state = 1495;
				this.function_parameters();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.MATERIALIZED) {
					{
					this.state = 1496;
					this.match(PLpgSQLParser.MATERIALIZED);
					}
				}

				this.state = 1499;
				this.match(PLpgSQLParser.VIEW);
				this.state = 1500;
				this.schema_qualified_name();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1501;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 1502;
				this.operator_name();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1503;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 1504;
				this.match(PLpgSQLParser.CLASS);
				this.state = 1505;
				this.schema_qualified_name();
				this.state = 1506;
				this.match(PLpgSQLParser.USING);
				this.state = 1507;
				this.identifier();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1509;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 1510;
				this.match(PLpgSQLParser.FAMILY);
				this.state = 1511;
				this.schema_qualified_name();
				this.state = 1512;
				this.match(PLpgSQLParser.USING);
				this.state = 1513;
				this.identifier();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PROCEDURAL) {
					{
					this.state = 1515;
					this.match(PLpgSQLParser.PROCEDURAL);
					}
				}

				this.state = 1518;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 1519;
				this.identifier();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1520;
				this.match(PLpgSQLParser.PROCEDURE);
				this.state = 1521;
				this.function_parameters();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1522;
				this.match(PLpgSQLParser.ROUTINE);
				this.state = 1523;
				this.function_parameters();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1524;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 1525;
				this.identifier();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1526;
				this.match(PLpgSQLParser.SEQUENCE);
				this.state = 1527;
				this.schema_qualified_name();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1528;
				this.match(PLpgSQLParser.SERVER);
				this.state = 1529;
				this.identifier();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1530;
				this.match(PLpgSQLParser.TABLE);
				this.state = 1531;
				this.schema_qualified_name();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1532;
				this.match(PLpgSQLParser.TEXT);
				this.state = 1533;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 1534;
				this.match(PLpgSQLParser.CONFIGURATION);
				this.state = 1535;
				this.schema_qualified_name();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1536;
				this.match(PLpgSQLParser.TEXT);
				this.state = 1537;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 1538;
				this.match(PLpgSQLParser.DICTIONARY);
				this.state = 1539;
				this.schema_qualified_name();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1540;
				this.match(PLpgSQLParser.TEXT);
				this.state = 1541;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 1542;
				this.match(PLpgSQLParser.PARSER);
				this.state = 1543;
				this.schema_qualified_name();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1544;
				this.match(PLpgSQLParser.TEXT);
				this.state = 1545;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 1546;
				this.match(PLpgSQLParser.TEMPLATE);
				this.state = 1547;
				this.schema_qualified_name();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1548;
				this.match(PLpgSQLParser.TRANSFORM);
				this.state = 1549;
				this.match(PLpgSQLParser.FOR);
				this.state = 1550;
				this.identifier();
				this.state = 1551;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 1552;
				this.identifier();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1554;
				this.match(PLpgSQLParser.TYPE);
				this.state = 1555;
				this.schema_qualified_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_schema_statement(): Alter_schema_statementContext {
		let _localctx: Alter_schema_statementContext = new Alter_schema_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, PLpgSQLParser.RULE_alter_schema_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1558;
			this.match(PLpgSQLParser.SCHEMA);
			this.state = 1559;
			this.identifier();
			this.state = 1560;
			this.rename_to();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_language_statement(): Alter_language_statementContext {
		let _localctx: Alter_language_statementContext = new Alter_language_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, PLpgSQLParser.RULE_alter_language_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.PROCEDURAL) {
				{
				this.state = 1562;
				this.match(PLpgSQLParser.PROCEDURAL);
				}
			}

			this.state = 1565;
			this.match(PLpgSQLParser.LANGUAGE);
			this.state = 1566;
			_localctx._name = this.identifier();
			this.state = 1569;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				{
				this.state = 1567;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.OWNER:
				{
				this.state = 1568;
				this.owner_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_statement(): Alter_table_statementContext {
		let _localctx: Alter_table_statementContext = new Alter_table_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, PLpgSQLParser.RULE_alter_table_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1572;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FOREIGN) {
				{
				this.state = 1571;
				this.match(PLpgSQLParser.FOREIGN);
				}
			}

			this.state = 1574;
			this.match(PLpgSQLParser.TABLE);
			this.state = 1576;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				{
				this.state = 1575;
				this.if_exists();
				}
				break;
			}
			this.state = 1579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ONLY) {
				{
				this.state = 1578;
				this.match(PLpgSQLParser.ONLY);
				}
			}

			this.state = 1581;
			_localctx._name = this.schema_qualified_name();
			this.state = 1583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MULTIPLY) {
				{
				this.state = 1582;
				this.match(PLpgSQLParser.MULTIPLY);
				}
			}

			this.state = 1617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 124, this._ctx) ) {
			case 1:
				{
				this.state = 1585;
				this.table_action();
				this.state = 1590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1586;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1587;
					this.table_action();
					}
					}
					this.state = 1592;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				{
				this.state = 1593;
				this.match(PLpgSQLParser.RENAME);
				this.state = 1595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLUMN) {
					{
					this.state = 1594;
					this.match(PLpgSQLParser.COLUMN);
					}
				}

				this.state = 1597;
				this.identifier();
				this.state = 1598;
				this.match(PLpgSQLParser.TO);
				this.state = 1599;
				this.identifier();
				}
				break;

			case 3:
				{
				this.state = 1601;
				this.set_schema();
				}
				break;

			case 4:
				{
				this.state = 1602;
				this.rename_to();
				}
				break;

			case 5:
				{
				this.state = 1603;
				this.match(PLpgSQLParser.RENAME);
				this.state = 1604;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 1605;
				this.identifier();
				this.state = 1606;
				this.match(PLpgSQLParser.TO);
				this.state = 1607;
				this.identifier();
				}
				break;

			case 6:
				{
				this.state = 1609;
				this.match(PLpgSQLParser.ATTACH);
				this.state = 1610;
				this.match(PLpgSQLParser.PARTITION);
				this.state = 1611;
				_localctx._child = this.schema_qualified_name();
				this.state = 1612;
				this.for_values_bound();
				}
				break;

			case 7:
				{
				this.state = 1614;
				this.match(PLpgSQLParser.DETACH);
				this.state = 1615;
				this.match(PLpgSQLParser.PARTITION);
				this.state = 1616;
				_localctx._child = this.schema_qualified_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_action(): Table_actionContext {
		let _localctx: Table_actionContext = new Table_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, PLpgSQLParser.RULE_table_action);
		let _la: number;
		try {
			this.state = 1729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 137, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1619;
				this.match(PLpgSQLParser.ADD);
				this.state = 1621;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLUMN) {
					{
					this.state = 1620;
					this.match(PLpgSQLParser.COLUMN);
					}
				}

				this.state = 1624;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 126, this._ctx) ) {
				case 1:
					{
					this.state = 1623;
					this.if_not_exists();
					}
					break;
				}
				this.state = 1626;
				this.table_column_definition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1627;
				this.match(PLpgSQLParser.DROP);
				this.state = 1629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLUMN) {
					{
					this.state = 1628;
					this.match(PLpgSQLParser.COLUMN);
					}
				}

				this.state = 1632;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 128, this._ctx) ) {
				case 1:
					{
					this.state = 1631;
					this.if_exists();
					}
					break;
				}
				this.state = 1634;
				_localctx._column = this.identifier();
				this.state = 1636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 1635;
					this.cascade_restrict();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1638;
				this.match(PLpgSQLParser.ALTER);
				this.state = 1640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLUMN) {
					{
					this.state = 1639;
					this.match(PLpgSQLParser.COLUMN);
					}
				}

				this.state = 1642;
				_localctx._column = this.identifier();
				this.state = 1643;
				this.column_action();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1645;
				this.match(PLpgSQLParser.ADD);
				this.state = 1646;
				_localctx._tabl_constraint = this.constraint_common();
				this.state = 1649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 1647;
					this.match(PLpgSQLParser.NOT);
					this.state = 1648;
					_localctx._not_valid = this.match(PLpgSQLParser.VALID);
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1651;
				this.validate_constraint();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1652;
				this.drop_constraint();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1653;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DISABLE || _la === PLpgSQLParser.ENABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1654;
				this.match(PLpgSQLParser.TRIGGER);
				this.state = 1658;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 1655;
					_localctx._trigger_name = this.schema_qualified_name();
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 1656;
					this.match(PLpgSQLParser.ALL);
					}
					break;
				case PLpgSQLParser.USER:
					{
					this.state = 1657;
					this.match(PLpgSQLParser.USER);
					}
					break;
				case PLpgSQLParser.EOF:
				case PLpgSQLParser.SEMI_COLON:
				case PLpgSQLParser.COMMA:
					break;
				default:
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1660;
				this.match(PLpgSQLParser.ENABLE);
				this.state = 1661;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ALWAYS || _la === PLpgSQLParser.REPLICA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1662;
				this.match(PLpgSQLParser.TRIGGER);
				this.state = 1663;
				_localctx._trigger_name = this.schema_qualified_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1664;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DISABLE || _la === PLpgSQLParser.ENABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1665;
				this.match(PLpgSQLParser.RULE);
				this.state = 1666;
				_localctx._rewrite_rule_name = this.schema_qualified_name();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1667;
				this.match(PLpgSQLParser.ENABLE);
				this.state = 1668;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ALWAYS || _la === PLpgSQLParser.REPLICA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1669;
				this.match(PLpgSQLParser.RULE);
				this.state = 1670;
				_localctx._rewrite_rule_name = this.schema_qualified_name();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1671;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DISABLE || _la === PLpgSQLParser.ENABLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1672;
				this.match(PLpgSQLParser.ROW);
				this.state = 1673;
				this.match(PLpgSQLParser.LEVEL);
				this.state = 1674;
				this.match(PLpgSQLParser.SECURITY);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO) {
					{
					this.state = 1675;
					this.match(PLpgSQLParser.NO);
					}
				}

				this.state = 1678;
				this.match(PLpgSQLParser.FORCE);
				this.state = 1679;
				this.match(PLpgSQLParser.ROW);
				this.state = 1680;
				this.match(PLpgSQLParser.LEVEL);
				this.state = 1681;
				this.match(PLpgSQLParser.SECURITY);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1682;
				this.match(PLpgSQLParser.CLUSTER);
				this.state = 1683;
				this.match(PLpgSQLParser.ON);
				this.state = 1684;
				_localctx._index_name = this.schema_qualified_name();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1685;
				this.match(PLpgSQLParser.SET);
				this.state = 1686;
				this.match(PLpgSQLParser.WITHOUT);
				this.state = 1687;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CLUSTER || _la === PLpgSQLParser.OIDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1688;
				this.match(PLpgSQLParser.SET);
				this.state = 1689;
				this.match(PLpgSQLParser.WITH);
				this.state = 1690;
				this.match(PLpgSQLParser.OIDS);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1691;
				this.match(PLpgSQLParser.SET);
				this.state = 1692;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.LOGGED || _la === PLpgSQLParser.UNLOGGED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1693;
				this.match(PLpgSQLParser.SET);
				this.state = 1694;
				this.storage_parameter();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1695;
				this.match(PLpgSQLParser.RESET);
				this.state = 1696;
				this.names_in_parens();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1697;
				this.define_foreign_options();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1698;
				this.match(PLpgSQLParser.INHERIT);
				this.state = 1699;
				_localctx._parent_table = this.schema_qualified_name();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1700;
				this.match(PLpgSQLParser.NO);
				this.state = 1701;
				this.match(PLpgSQLParser.INHERIT);
				this.state = 1702;
				_localctx._parent_table = this.schema_qualified_name();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1703;
				this.match(PLpgSQLParser.OF);
				this.state = 1704;
				_localctx._type_name = this.schema_qualified_name();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1705;
				this.match(PLpgSQLParser.NOT);
				this.state = 1706;
				this.match(PLpgSQLParser.OF);
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1707;
				this.owner_to();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1708;
				this.match(PLpgSQLParser.SET);
				this.state = 1709;
				this.table_space();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1710;
				this.match(PLpgSQLParser.REPLICA);
				this.state = 1711;
				this.match(PLpgSQLParser.IDENTITY);
				this.state = 1718;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.DEFAULT:
					{
					this.state = 1712;
					this.match(PLpgSQLParser.DEFAULT);
					}
					break;
				case PLpgSQLParser.FULL:
					{
					this.state = 1713;
					this.match(PLpgSQLParser.FULL);
					}
					break;
				case PLpgSQLParser.NOTHING:
					{
					this.state = 1714;
					this.match(PLpgSQLParser.NOTHING);
					}
					break;
				case PLpgSQLParser.USING:
					{
					this.state = 1715;
					this.match(PLpgSQLParser.USING);
					this.state = 1716;
					this.match(PLpgSQLParser.INDEX);
					this.state = 1717;
					this.identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1720;
				this.match(PLpgSQLParser.ALTER);
				this.state = 1721;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 1722;
				this.identifier();
				this.state = 1724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.DEFERRABLE || _la === PLpgSQLParser.NOT) {
					{
					this.state = 1723;
					this.table_deferrable();
					}
				}

				this.state = 1727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.INITIALLY) {
					{
					this.state = 1726;
					this.table_initialy_immed();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_action(): Column_actionContext {
		let _localctx: Column_actionContext = new Column_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, PLpgSQLParser.RULE_column_action);
		let _la: number;
		try {
			this.state = 1775;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.SET) {
					{
					this.state = 1731;
					this.match(PLpgSQLParser.SET);
					this.state = 1732;
					this.match(PLpgSQLParser.DATA);
					}
				}

				this.state = 1735;
				this.match(PLpgSQLParser.TYPE);
				this.state = 1736;
				this.data_type();
				this.state = 1738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLLATE) {
					{
					this.state = 1737;
					this.collate_identifier();
					}
				}

				this.state = 1742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.USING) {
					{
					this.state = 1740;
					this.match(PLpgSQLParser.USING);
					this.state = 1741;
					this.vex(0);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1744;
				this.match(PLpgSQLParser.ADD);
				this.state = 1745;
				this.identity_body();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1746;
				this.set_def_column();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1747;
				this.drop_def();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1750;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.SET:
					{
					this.state = 1748;
					_localctx._set = this.match(PLpgSQLParser.SET);
					}
					break;
				case PLpgSQLParser.DROP:
					{
					this.state = 1749;
					this.match(PLpgSQLParser.DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1752;
				this.match(PLpgSQLParser.NOT);
				this.state = 1753;
				this.match(PLpgSQLParser.NULL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1754;
				this.match(PLpgSQLParser.DROP);
				this.state = 1755;
				this.match(PLpgSQLParser.IDENTITY);
				this.state = 1757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.IF) {
					{
					this.state = 1756;
					this.if_exists();
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1759;
				this.match(PLpgSQLParser.SET);
				this.state = 1760;
				this.storage_parameter();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1761;
				this.match(PLpgSQLParser.SET);
				this.state = 1762;
				this.match(PLpgSQLParser.STATISTICS);
				this.state = 1763;
				this.signed_number_literal();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1764;
				this.match(PLpgSQLParser.SET);
				this.state = 1765;
				this.match(PLpgSQLParser.STORAGE);
				this.state = 1766;
				this.storage_option();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1767;
				this.match(PLpgSQLParser.RESET);
				this.state = 1768;
				this.names_in_parens();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1769;
				this.define_foreign_options();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1770;
					this.alter_identity();
					}
					}
					this.state = 1773;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.RESTART || _la === PLpgSQLParser.SET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identity_body(): Identity_bodyContext {
		let _localctx: Identity_bodyContext = new Identity_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, PLpgSQLParser.RULE_identity_body);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1777;
			this.match(PLpgSQLParser.GENERATED);
			this.state = 1781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ALWAYS:
				{
				this.state = 1778;
				this.match(PLpgSQLParser.ALWAYS);
				}
				break;
			case PLpgSQLParser.BY:
				{
				this.state = 1779;
				this.match(PLpgSQLParser.BY);
				this.state = 1780;
				this.match(PLpgSQLParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1783;
			this.match(PLpgSQLParser.AS);
			this.state = 1784;
			this.match(PLpgSQLParser.IDENTITY);
			this.state = 1793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 1785;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1786;
					this.sequence_body();
					}
					}
					this.state = 1789;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.CACHE || _la === PLpgSQLParser.CYCLE || _la === PLpgSQLParser.INCREMENT || _la === PLpgSQLParser.MAXVALUE || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (PLpgSQLParser.MINVALUE - 142)) | (1 << (PLpgSQLParser.NO - 142)) | (1 << (PLpgSQLParser.OWNED - 142)))) !== 0) || _la === PLpgSQLParser.SEQUENCE || _la === PLpgSQLParser.START || _la === PLpgSQLParser.AS);
				this.state = 1791;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_identity(): Alter_identityContext {
		let _localctx: Alter_identityContext = new Alter_identityContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, PLpgSQLParser.RULE_alter_identity);
		let _la: number;
		try {
			this.state = 1811;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1795;
				this.match(PLpgSQLParser.SET);
				this.state = 1796;
				this.match(PLpgSQLParser.GENERATED);
				this.state = 1800;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ALWAYS:
					{
					this.state = 1797;
					this.match(PLpgSQLParser.ALWAYS);
					}
					break;
				case PLpgSQLParser.BY:
					{
					this.state = 1798;
					this.match(PLpgSQLParser.BY);
					this.state = 1799;
					this.match(PLpgSQLParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1802;
				this.match(PLpgSQLParser.SET);
				this.state = 1803;
				this.sequence_body();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1804;
				this.match(PLpgSQLParser.RESTART);
				this.state = 1809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH || _la === PLpgSQLParser.NUMBER_LITERAL) {
					{
					this.state = 1806;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.WITH) {
						{
						this.state = 1805;
						this.match(PLpgSQLParser.WITH);
						}
					}

					this.state = 1808;
					this.match(PLpgSQLParser.NUMBER_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storage_option(): Storage_optionContext {
		let _localctx: Storage_optionContext = new Storage_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, PLpgSQLParser.RULE_storage_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1813;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.EXTERNAL || _la === PLpgSQLParser.EXTENDED || _la === PLpgSQLParser.MAIN || _la === PLpgSQLParser.PLAIN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public validate_constraint(): Validate_constraintContext {
		let _localctx: Validate_constraintContext = new Validate_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, PLpgSQLParser.RULE_validate_constraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1815;
			this.match(PLpgSQLParser.VALIDATE);
			this.state = 1816;
			this.match(PLpgSQLParser.CONSTRAINT);
			this.state = 1817;
			_localctx._constraint_name = this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_constraint(): Drop_constraintContext {
		let _localctx: Drop_constraintContext = new Drop_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, PLpgSQLParser.RULE_drop_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1819;
			this.match(PLpgSQLParser.DROP);
			this.state = 1820;
			this.match(PLpgSQLParser.CONSTRAINT);
			this.state = 1822;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				{
				this.state = 1821;
				this.if_exists();
				}
				break;
			}
			this.state = 1824;
			_localctx._constraint_name = this.identifier();
			this.state = 1826;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 1825;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_deferrable(): Table_deferrableContext {
		let _localctx: Table_deferrableContext = new Table_deferrableContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, PLpgSQLParser.RULE_table_deferrable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1829;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.NOT) {
				{
				this.state = 1828;
				this.match(PLpgSQLParser.NOT);
				}
			}

			this.state = 1831;
			this.match(PLpgSQLParser.DEFERRABLE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_initialy_immed(): Table_initialy_immedContext {
		let _localctx: Table_initialy_immedContext = new Table_initialy_immedContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, PLpgSQLParser.RULE_table_initialy_immed);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1833;
			this.match(PLpgSQLParser.INITIALLY);
			this.state = 1834;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.DEFERRED || _la === PLpgSQLParser.IMMEDIATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_actions_common(): Function_actions_commonContext {
		let _localctx: Function_actions_commonContext = new Function_actions_commonContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, PLpgSQLParser.RULE_function_actions_common);
		let _la: number;
		try {
			this.state = 1892;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.RETURNS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1839;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.CALLED:
					{
					this.state = 1836;
					this.match(PLpgSQLParser.CALLED);
					}
					break;
				case PLpgSQLParser.RETURNS:
					{
					this.state = 1837;
					this.match(PLpgSQLParser.RETURNS);
					this.state = 1838;
					this.match(PLpgSQLParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1841;
				this.match(PLpgSQLParser.ON);
				this.state = 1842;
				this.match(PLpgSQLParser.NULL);
				this.state = 1843;
				this.match(PLpgSQLParser.INPUT);
				}
				break;
			case PLpgSQLParser.TRANSFORM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1844;
				this.match(PLpgSQLParser.TRANSFORM);
				this.state = 1845;
				this.transform_for_type();
				this.state = 1850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1846;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1847;
					this.transform_for_type();
					}
					}
					this.state = 1852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case PLpgSQLParser.STRICT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1853;
				this.match(PLpgSQLParser.STRICT);
				}
				break;
			case PLpgSQLParser.IMMUTABLE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1854;
				this.match(PLpgSQLParser.IMMUTABLE);
				}
				break;
			case PLpgSQLParser.VOLATILE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1855;
				this.match(PLpgSQLParser.VOLATILE);
				}
				break;
			case PLpgSQLParser.STABLE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1856;
				this.match(PLpgSQLParser.STABLE);
				}
				break;
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.NOT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 1857;
					this.match(PLpgSQLParser.NOT);
					}
				}

				this.state = 1860;
				this.match(PLpgSQLParser.LEAKPROOF);
				}
				break;
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.SECURITY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.EXTERNAL) {
					{
					this.state = 1861;
					this.match(PLpgSQLParser.EXTERNAL);
					}
				}

				this.state = 1864;
				this.match(PLpgSQLParser.SECURITY);
				this.state = 1865;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DEFINER || _la === PLpgSQLParser.INVOKER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.PARALLEL:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1866;
				this.match(PLpgSQLParser.PARALLEL);
				this.state = 1867;
				_la = this._input.LA(1);
				if (!(((((_la - 517)) & ~0x1F) === 0 && ((1 << (_la - 517)) & ((1 << (PLpgSQLParser.RESTRICTED - 517)) | (1 << (PLpgSQLParser.SAFE - 517)) | (1 << (PLpgSQLParser.UNSAFE - 517)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.COST:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1868;
				this.match(PLpgSQLParser.COST);
				this.state = 1869;
				_localctx._execution_cost = this.unsigned_numeric_literal();
				}
				break;
			case PLpgSQLParser.ROWS:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1870;
				this.match(PLpgSQLParser.ROWS);
				this.state = 1871;
				_localctx._result_rows = this.unsigned_numeric_literal();
				}
				break;
			case PLpgSQLParser.SUPPORT:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1872;
				this.match(PLpgSQLParser.SUPPORT);
				this.state = 1873;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.SET:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1874;
				this.match(PLpgSQLParser.SET);
				this.state = 1878;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
				case 1:
					{
					this.state = 1875;
					_localctx._config_scope = this.identifier();
					this.state = 1876;
					this.match(PLpgSQLParser.DOT);
					}
					break;
				}
				this.state = 1880;
				_localctx._config_param = this.identifier();
				this.state = 1885;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.TO:
				case PLpgSQLParser.EQUAL:
					{
					this.state = 1881;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.TO || _la === PLpgSQLParser.EQUAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1882;
					this.set_statement_value();
					}
					break;
				case PLpgSQLParser.FROM:
					{
					this.state = 1883;
					this.match(PLpgSQLParser.FROM);
					this.state = 1884;
					this.match(PLpgSQLParser.CURRENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.LANGUAGE:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1887;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 1888;
				_localctx._lang_name = this.identifier();
				}
				break;
			case PLpgSQLParser.WINDOW:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1889;
				this.match(PLpgSQLParser.WINDOW);
				}
				break;
			case PLpgSQLParser.AS:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1890;
				this.match(PLpgSQLParser.AS);
				this.state = 1891;
				this.function_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_def(): Function_defContext {
		let _localctx: Function_defContext = new Function_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, PLpgSQLParser.RULE_function_def);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1894;
			_localctx._definition = this.character_string();
			this.state = 1897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COMMA) {
				{
				this.state = 1895;
				this.match(PLpgSQLParser.COMMA);
				this.state = 1896;
				_localctx._symbol = this.character_string();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_index_statement(): Alter_index_statementContext {
		let _localctx: Alter_index_statementContext = new Alter_index_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, PLpgSQLParser.RULE_alter_index_statement);
		let _la: number;
		try {
			this.state = 1922;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 166, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1899;
				this.match(PLpgSQLParser.INDEX);
				this.state = 1901;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
				case 1:
					{
					this.state = 1900;
					this.if_exists();
					}
					break;
				}
				this.state = 1903;
				this.schema_qualified_name();
				this.state = 1904;
				this.index_def_action();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1906;
				this.match(PLpgSQLParser.INDEX);
				this.state = 1907;
				this.match(PLpgSQLParser.ALL);
				this.state = 1908;
				this.match(PLpgSQLParser.IN);
				this.state = 1909;
				this.match(PLpgSQLParser.TABLESPACE);
				this.state = 1910;
				this.identifier();
				this.state = 1914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.OWNED) {
					{
					this.state = 1911;
					this.match(PLpgSQLParser.OWNED);
					this.state = 1912;
					this.match(PLpgSQLParser.BY);
					this.state = 1913;
					this.identifier_list();
					}
				}

				this.state = 1916;
				this.match(PLpgSQLParser.SET);
				this.state = 1917;
				this.match(PLpgSQLParser.TABLESPACE);
				this.state = 1918;
				this.identifier();
				this.state = 1920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOWAIT) {
					{
					this.state = 1919;
					this.match(PLpgSQLParser.NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_def_action(): Index_def_actionContext {
		let _localctx: Index_def_actionContext = new Index_def_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, PLpgSQLParser.RULE_index_def_action);
		let _la: number;
		try {
			this.state = 1963;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1924;
				this.rename_to();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1925;
				this.match(PLpgSQLParser.ATTACH);
				this.state = 1926;
				this.match(PLpgSQLParser.PARTITION);
				this.state = 1927;
				_localctx._index = this.schema_qualified_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1928;
				this.match(PLpgSQLParser.DEPENDS);
				this.state = 1929;
				this.match(PLpgSQLParser.ON);
				this.state = 1930;
				this.match(PLpgSQLParser.EXTENSION);
				this.state = 1931;
				this.schema_qualified_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1932;
				this.match(PLpgSQLParser.ALTER);
				this.state = 1934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLUMN) {
					{
					this.state = 1933;
					this.match(PLpgSQLParser.COLUMN);
					}
				}

				this.state = 1937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS) {
					{
					this.state = 1936;
					this.sign();
					}
				}

				this.state = 1939;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				this.state = 1940;
				this.match(PLpgSQLParser.SET);
				this.state = 1941;
				this.match(PLpgSQLParser.STATISTICS);
				this.state = 1942;
				this.signed_number_literal();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1943;
				this.match(PLpgSQLParser.RESET);
				this.state = 1944;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1945;
				this.identifier_list();
				this.state = 1946;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1948;
				this.match(PLpgSQLParser.SET);
				this.state = 1949;
				this.match(PLpgSQLParser.TABLESPACE);
				this.state = 1950;
				this.identifier();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1951;
				this.match(PLpgSQLParser.SET);
				this.state = 1952;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 1953;
				this.option_with_value();
				this.state = 1958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1954;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1955;
					this.option_with_value();
					}
					}
					this.state = 1960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1961;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_default_privileges(): Alter_default_privilegesContext {
		let _localctx: Alter_default_privilegesContext = new Alter_default_privilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, PLpgSQLParser.RULE_alter_default_privileges);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1965;
			this.match(PLpgSQLParser.DEFAULT);
			this.state = 1966;
			this.match(PLpgSQLParser.PRIVILEGES);
			this.state = 1970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FOR) {
				{
				this.state = 1967;
				this.match(PLpgSQLParser.FOR);
				this.state = 1968;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.USER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1969;
				this.identifier_list();
				}
			}

			this.state = 1975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.IN) {
				{
				this.state = 1972;
				this.match(PLpgSQLParser.IN);
				this.state = 1973;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 1974;
				this.identifier_list();
				}
			}

			this.state = 1977;
			this.abbreviated_grant_or_revoke();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public abbreviated_grant_or_revoke(): Abbreviated_grant_or_revokeContext {
		let _localctx: Abbreviated_grant_or_revokeContext = new Abbreviated_grant_or_revokeContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, PLpgSQLParser.RULE_abbreviated_grant_or_revoke);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1984;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.GRANT:
				{
				this.state = 1979;
				this.match(PLpgSQLParser.GRANT);
				}
				break;
			case PLpgSQLParser.REVOKE:
				{
				this.state = 1980;
				this.match(PLpgSQLParser.REVOKE);
				this.state = 1982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.GRANT) {
					{
					this.state = 1981;
					this.grant_option_for();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2041;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 185, this._ctx) ) {
			case 1:
				{
				this.state = 1986;
				this.table_column_privilege();
				this.state = 1991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 1987;
					this.match(PLpgSQLParser.COMMA);
					this.state = 1988;
					this.table_column_privilege();
					}
					}
					this.state = 1993;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1994;
				this.match(PLpgSQLParser.ON);
				this.state = 1995;
				this.match(PLpgSQLParser.TABLES);
				}
				break;

			case 2:
				{
				this.state = 2009;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.SELECT:
				case PLpgSQLParser.USAGE:
					{
					this.state = 1997;
					this.usage_select_update();
					this.state = 2002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 1998;
						this.match(PLpgSQLParser.COMMA);
						this.state = 1999;
						this.usage_select_update();
						}
						}
						this.state = 2004;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 2005;
					this.match(PLpgSQLParser.ALL);
					this.state = 2007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.PRIVILEGES) {
						{
						this.state = 2006;
						this.match(PLpgSQLParser.PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2011;
				this.match(PLpgSQLParser.ON);
				this.state = 2012;
				this.match(PLpgSQLParser.SEQUENCES);
				}
				break;

			case 3:
				{
				this.state = 2018;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.EXECUTE:
					{
					this.state = 2013;
					this.match(PLpgSQLParser.EXECUTE);
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 2014;
					this.match(PLpgSQLParser.ALL);
					this.state = 2016;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.PRIVILEGES) {
						{
						this.state = 2015;
						this.match(PLpgSQLParser.PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2020;
				this.match(PLpgSQLParser.ON);
				this.state = 2021;
				this.match(PLpgSQLParser.FUNCTIONS);
				}
				break;

			case 4:
				{
				this.state = 2028;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.USAGE:
					{
					this.state = 2022;
					this.match(PLpgSQLParser.USAGE);
					}
					break;
				case PLpgSQLParser.CREATE:
					{
					this.state = 2023;
					this.match(PLpgSQLParser.CREATE);
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 2024;
					this.match(PLpgSQLParser.ALL);
					this.state = 2026;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.PRIVILEGES) {
						{
						this.state = 2025;
						this.match(PLpgSQLParser.PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2030;
				this.match(PLpgSQLParser.ON);
				this.state = 2031;
				this.match(PLpgSQLParser.SCHEMAS);
				}
				break;

			case 5:
				{
				this.state = 2037;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.USAGE:
					{
					this.state = 2032;
					this.match(PLpgSQLParser.USAGE);
					}
					break;
				case PLpgSQLParser.ALL:
					{
					this.state = 2033;
					this.match(PLpgSQLParser.ALL);
					this.state = 2035;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.PRIVILEGES) {
						{
						this.state = 2034;
						this.match(PLpgSQLParser.PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2039;
				this.match(PLpgSQLParser.ON);
				this.state = 2040;
				this.match(PLpgSQLParser.TYPES);
				}
				break;
			}
			this.state = 2045;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.TO:
				{
				this.state = 2043;
				this.grant_to_rule();
				}
				break;
			case PLpgSQLParser.FROM:
				{
				this.state = 2044;
				this.revoke_from_cascade_restrict();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant_option_for(): Grant_option_forContext {
		let _localctx: Grant_option_forContext = new Grant_option_forContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, PLpgSQLParser.RULE_grant_option_for);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2047;
			this.match(PLpgSQLParser.GRANT);
			this.state = 2048;
			this.match(PLpgSQLParser.OPTION);
			this.state = 2049;
			this.match(PLpgSQLParser.FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_sequence_statement(): Alter_sequence_statementContext {
		let _localctx: Alter_sequence_statementContext = new Alter_sequence_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, PLpgSQLParser.RULE_alter_sequence_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2051;
			this.match(PLpgSQLParser.SEQUENCE);
			this.state = 2053;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 2052;
				this.if_exists();
				}
				break;
			}
			this.state = 2055;
			_localctx._name = this.schema_qualified_name();
			this.state = 2071;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.EOF:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.AS:
			case PLpgSQLParser.SEMI_COLON:
				{
				this.state = 2066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.CACHE || _la === PLpgSQLParser.CYCLE || _la === PLpgSQLParser.INCREMENT || _la === PLpgSQLParser.MAXVALUE || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (PLpgSQLParser.MINVALUE - 142)) | (1 << (PLpgSQLParser.NO - 142)) | (1 << (PLpgSQLParser.OWNED - 142)))) !== 0) || _la === PLpgSQLParser.RESTART || _la === PLpgSQLParser.SEQUENCE || _la === PLpgSQLParser.START || _la === PLpgSQLParser.AS) {
					{
					this.state = 2064;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.CACHE:
					case PLpgSQLParser.CYCLE:
					case PLpgSQLParser.INCREMENT:
					case PLpgSQLParser.MAXVALUE:
					case PLpgSQLParser.MINVALUE:
					case PLpgSQLParser.NO:
					case PLpgSQLParser.OWNED:
					case PLpgSQLParser.SEQUENCE:
					case PLpgSQLParser.START:
					case PLpgSQLParser.AS:
						{
						this.state = 2056;
						this.sequence_body();
						}
						break;
					case PLpgSQLParser.RESTART:
						{
						this.state = 2057;
						this.match(PLpgSQLParser.RESTART);
						this.state = 2062;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.WITH || ((((_la - 587)) & ~0x1F) === 0 && ((1 << (_la - 587)) & ((1 << (PLpgSQLParser.PLUS - 587)) | (1 << (PLpgSQLParser.MINUS - 587)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 587)))) !== 0)) {
							{
							this.state = 2059;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === PLpgSQLParser.WITH) {
								{
								this.state = 2058;
								this.match(PLpgSQLParser.WITH);
								}
							}

							this.state = 2061;
							this.signed_number_literal();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 2068;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case PLpgSQLParser.SET:
				{
				this.state = 2069;
				this.set_schema();
				}
				break;
			case PLpgSQLParser.RENAME:
				{
				this.state = 2070;
				this.rename_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_view_statement(): Alter_view_statementContext {
		let _localctx: Alter_view_statementContext = new Alter_view_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, PLpgSQLParser.RULE_alter_view_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MATERIALIZED) {
				{
				this.state = 2073;
				this.match(PLpgSQLParser.MATERIALIZED);
				}
			}

			this.state = 2076;
			this.match(PLpgSQLParser.VIEW);
			this.state = 2078;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 194, this._ctx) ) {
			case 1:
				{
				this.state = 2077;
				this.if_exists();
				}
				break;
			}
			this.state = 2080;
			_localctx._name = this.schema_qualified_name();
			this.state = 2096;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				{
				this.state = 2081;
				this.match(PLpgSQLParser.ALTER);
				this.state = 2083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLUMN) {
					{
					this.state = 2082;
					this.match(PLpgSQLParser.COLUMN);
					}
				}

				this.state = 2085;
				_localctx._column_name = this.schema_qualified_name();
				this.state = 2088;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.SET:
					{
					this.state = 2086;
					this.set_def_column();
					}
					break;
				case PLpgSQLParser.DROP:
					{
					this.state = 2087;
					this.drop_def();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 2090;
				this.set_schema();
				}
				break;

			case 3:
				{
				this.state = 2091;
				this.rename_to();
				}
				break;

			case 4:
				{
				this.state = 2092;
				this.match(PLpgSQLParser.SET);
				this.state = 2093;
				this.storage_parameter();
				}
				break;

			case 5:
				{
				this.state = 2094;
				this.match(PLpgSQLParser.RESET);
				this.state = 2095;
				this.names_in_parens();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_event_trigger(): Alter_event_triggerContext {
		let _localctx: Alter_event_triggerContext = new Alter_event_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, PLpgSQLParser.RULE_alter_event_trigger);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2098;
			this.match(PLpgSQLParser.EVENT);
			this.state = 2099;
			this.match(PLpgSQLParser.TRIGGER);
			this.state = 2100;
			_localctx._name = this.identifier();
			this.state = 2101;
			this.alter_event_trigger_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_event_trigger_action(): Alter_event_trigger_actionContext {
		let _localctx: Alter_event_trigger_actionContext = new Alter_event_trigger_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, PLpgSQLParser.RULE_alter_event_trigger_action);
		let _la: number;
		try {
			this.state = 2110;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.DISABLE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2103;
				this.match(PLpgSQLParser.DISABLE);
				}
				break;
			case PLpgSQLParser.ENABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2104;
				this.match(PLpgSQLParser.ENABLE);
				this.state = 2106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ALWAYS || _la === PLpgSQLParser.REPLICA) {
					{
					this.state = 2105;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.ALWAYS || _la === PLpgSQLParser.REPLICA)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case PLpgSQLParser.OWNER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2108;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.RENAME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2109;
				this.rename_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_type_statement(): Alter_type_statementContext {
		let _localctx: Alter_type_statementContext = new Alter_type_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, PLpgSQLParser.RULE_alter_type_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2112;
			this.match(PLpgSQLParser.TYPE);
			this.state = 2113;
			_localctx._name = this.schema_qualified_name();
			this.state = 2148;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 204, this._ctx) ) {
			case 1:
				{
				this.state = 2114;
				this.set_schema();
				}
				break;

			case 2:
				{
				this.state = 2115;
				this.rename_to();
				}
				break;

			case 3:
				{
				this.state = 2116;
				this.match(PLpgSQLParser.ADD);
				this.state = 2117;
				this.match(PLpgSQLParser.VALUE);
				this.state = 2119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.IF) {
					{
					this.state = 2118;
					this.if_not_exists();
					}
				}

				this.state = 2121;
				_localctx._new_enum_value = this.character_string();
				this.state = 2124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AFTER || _la === PLpgSQLParser.BEFORE) {
					{
					this.state = 2122;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.AFTER || _la === PLpgSQLParser.BEFORE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2123;
					_localctx._existing_enum_value = this.character_string();
					}
				}

				}
				break;

			case 4:
				{
				this.state = 2126;
				this.match(PLpgSQLParser.RENAME);
				this.state = 2127;
				this.match(PLpgSQLParser.ATTRIBUTE);
				this.state = 2128;
				_localctx._attribute_name = this.identifier();
				this.state = 2129;
				this.match(PLpgSQLParser.TO);
				this.state = 2130;
				_localctx._new_attribute_name = this.identifier();
				this.state = 2132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 2131;
					this.cascade_restrict();
					}
				}

				}
				break;

			case 5:
				{
				this.state = 2134;
				this.match(PLpgSQLParser.RENAME);
				this.state = 2135;
				this.match(PLpgSQLParser.VALUE);
				this.state = 2136;
				_localctx._existing_enum_name = this.character_string();
				this.state = 2137;
				this.match(PLpgSQLParser.TO);
				this.state = 2138;
				_localctx._new_enum_name = this.character_string();
				}
				break;

			case 6:
				{
				this.state = 2140;
				this.type_action();
				this.state = 2145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 2141;
					this.match(PLpgSQLParser.COMMA);
					this.state = 2142;
					this.type_action();
					}
					}
					this.state = 2147;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_domain_statement(): Alter_domain_statementContext {
		let _localctx: Alter_domain_statementContext = new Alter_domain_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, PLpgSQLParser.RULE_alter_domain_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2150;
			this.match(PLpgSQLParser.DOMAIN);
			this.state = 2151;
			_localctx._name = this.schema_qualified_name();
			this.state = 2173;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				{
				this.state = 2152;
				this.set_def_column();
				}
				break;

			case 2:
				{
				this.state = 2153;
				this.drop_def();
				}
				break;

			case 3:
				{
				this.state = 2154;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DROP || _la === PLpgSQLParser.SET)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2155;
				this.match(PLpgSQLParser.NOT);
				this.state = 2156;
				this.match(PLpgSQLParser.NULL);
				}
				break;

			case 4:
				{
				this.state = 2157;
				this.match(PLpgSQLParser.ADD);
				this.state = 2158;
				_localctx._dom_constraint = this.domain_constraint();
				this.state = 2161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 2159;
					this.match(PLpgSQLParser.NOT);
					this.state = 2160;
					_localctx._not_valid = this.match(PLpgSQLParser.VALID);
					}
				}

				}
				break;

			case 5:
				{
				this.state = 2163;
				this.drop_constraint();
				}
				break;

			case 6:
				{
				this.state = 2164;
				this.match(PLpgSQLParser.RENAME);
				this.state = 2165;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 2166;
				this.schema_qualified_name();
				this.state = 2167;
				this.match(PLpgSQLParser.TO);
				this.state = 2168;
				this.schema_qualified_name();
				}
				break;

			case 7:
				{
				this.state = 2170;
				this.validate_constraint();
				}
				break;

			case 8:
				{
				this.state = 2171;
				this.rename_to();
				}
				break;

			case 9:
				{
				this.state = 2172;
				this.set_schema();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_statement(): Alter_server_statementContext {
		let _localctx: Alter_server_statementContext = new Alter_server_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, PLpgSQLParser.RULE_alter_server_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2175;
			this.match(PLpgSQLParser.SERVER);
			this.state = 2176;
			this.identifier();
			this.state = 2177;
			this.alter_server_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_action(): Alter_server_actionContext {
		let _localctx: Alter_server_actionContext = new Alter_server_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, PLpgSQLParser.RULE_alter_server_action);
		let _la: number;
		try {
			this.state = 2188;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.VERSION) {
					{
					this.state = 2179;
					this.match(PLpgSQLParser.VERSION);
					this.state = 2180;
					this.character_string();
					}
				}

				this.state = 2183;
				this.define_foreign_options();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2184;
				this.match(PLpgSQLParser.VERSION);
				this.state = 2185;
				this.character_string();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2186;
				this.owner_to();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2187;
				this.rename_to();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_fts_statement(): Alter_fts_statementContext {
		let _localctx: Alter_fts_statementContext = new Alter_fts_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, PLpgSQLParser.RULE_alter_fts_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2190;
			this.match(PLpgSQLParser.TEXT);
			this.state = 2191;
			this.match(PLpgSQLParser.SEARCH);
			this.state = 2206;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				{
				this.state = 2192;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONFIGURATION || _la === PLpgSQLParser.DICTIONARY || _la === PLpgSQLParser.PARSER || _la === PLpgSQLParser.TEMPLATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2193;
				_localctx._name = this.schema_qualified_name();
				this.state = 2196;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.RENAME:
					{
					this.state = 2194;
					this.rename_to();
					}
					break;
				case PLpgSQLParser.SET:
					{
					this.state = 2195;
					this.set_schema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 2198;
				this.match(PLpgSQLParser.DICTIONARY);
				this.state = 2199;
				_localctx._name = this.schema_qualified_name();
				this.state = 2200;
				this.storage_parameter();
				}
				break;

			case 3:
				{
				this.state = 2202;
				this.match(PLpgSQLParser.CONFIGURATION);
				this.state = 2203;
				_localctx._name = this.schema_qualified_name();
				this.state = 2204;
				this.alter_fts_configuration();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_fts_configuration(): Alter_fts_configurationContext {
		let _localctx: Alter_fts_configurationContext = new Alter_fts_configurationContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, PLpgSQLParser.RULE_alter_fts_configuration);
		let _la: number;
		try {
			this.state = 2240;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2208;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ADD || _la === PLpgSQLParser.ALTER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2209;
				this.match(PLpgSQLParser.MAPPING);
				this.state = 2210;
				this.match(PLpgSQLParser.FOR);
				this.state = 2211;
				this.identifier_list();
				this.state = 2212;
				this.match(PLpgSQLParser.WITH);
				this.state = 2213;
				this.schema_qualified_name();
				this.state = 2218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 2214;
					this.match(PLpgSQLParser.COMMA);
					this.state = 2215;
					this.schema_qualified_name();
					}
					}
					this.state = 2220;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2221;
				this.match(PLpgSQLParser.ALTER);
				this.state = 2222;
				this.match(PLpgSQLParser.MAPPING);
				this.state = 2225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOR) {
					{
					this.state = 2223;
					this.match(PLpgSQLParser.FOR);
					this.state = 2224;
					this.identifier_list();
					}
				}

				this.state = 2227;
				this.match(PLpgSQLParser.REPLACE);
				this.state = 2228;
				this.schema_qualified_name();
				this.state = 2229;
				this.match(PLpgSQLParser.WITH);
				this.state = 2230;
				this.schema_qualified_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2232;
				this.match(PLpgSQLParser.DROP);
				this.state = 2233;
				this.match(PLpgSQLParser.MAPPING);
				this.state = 2236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.IF) {
					{
					this.state = 2234;
					this.match(PLpgSQLParser.IF);
					this.state = 2235;
					this.match(PLpgSQLParser.EXISTS);
					}
				}

				this.state = 2238;
				this.match(PLpgSQLParser.FOR);
				this.state = 2239;
				this.identifier_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_action(): Type_actionContext {
		let _localctx: Type_actionContext = new Type_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, PLpgSQLParser.RULE_type_action);
		let _la: number;
		try {
			this.state = 2276;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ADD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2242;
				this.match(PLpgSQLParser.ADD);
				this.state = 2243;
				this.match(PLpgSQLParser.ATTRIBUTE);
				this.state = 2244;
				this.identifier();
				this.state = 2245;
				this.data_type();
				this.state = 2247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLLATE) {
					{
					this.state = 2246;
					this.collate_identifier();
					}
				}

				this.state = 2250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 2249;
					this.cascade_restrict();
					}
				}

				}
				break;
			case PLpgSQLParser.DROP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2252;
				this.match(PLpgSQLParser.DROP);
				this.state = 2253;
				this.match(PLpgSQLParser.ATTRIBUTE);
				this.state = 2255;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 217, this._ctx) ) {
				case 1:
					{
					this.state = 2254;
					this.if_exists();
					}
					break;
				}
				this.state = 2257;
				this.identifier();
				this.state = 2259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 2258;
					this.cascade_restrict();
					}
				}

				}
				break;
			case PLpgSQLParser.ALTER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2261;
				this.match(PLpgSQLParser.ALTER);
				this.state = 2262;
				this.match(PLpgSQLParser.ATTRIBUTE);
				this.state = 2263;
				this.identifier();
				this.state = 2266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.SET) {
					{
					this.state = 2264;
					this.match(PLpgSQLParser.SET);
					this.state = 2265;
					this.match(PLpgSQLParser.DATA);
					}
				}

				this.state = 2268;
				this.match(PLpgSQLParser.TYPE);
				this.state = 2269;
				this.data_type();
				this.state = 2271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLLATE) {
					{
					this.state = 2270;
					this.collate_identifier();
					}
				}

				this.state = 2274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 2273;
					this.cascade_restrict();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_def_column(): Set_def_columnContext {
		let _localctx: Set_def_columnContext = new Set_def_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, PLpgSQLParser.RULE_set_def_column);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2278;
			this.match(PLpgSQLParser.SET);
			this.state = 2279;
			this.match(PLpgSQLParser.DEFAULT);
			this.state = 2280;
			this.vex(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_def(): Drop_defContext {
		let _localctx: Drop_defContext = new Drop_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, PLpgSQLParser.RULE_drop_def);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2282;
			this.match(PLpgSQLParser.DROP);
			this.state = 2283;
			this.match(PLpgSQLParser.DEFAULT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_index_statement(): Create_index_statementContext {
		let _localctx: Create_index_statementContext = new Create_index_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, PLpgSQLParser.RULE_create_index_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2286;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.UNIQUE) {
				{
				this.state = 2285;
				this.match(PLpgSQLParser.UNIQUE);
				}
			}

			this.state = 2288;
			this.match(PLpgSQLParser.INDEX);
			this.state = 2290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CONCURRENTLY) {
				{
				this.state = 2289;
				this.match(PLpgSQLParser.CONCURRENTLY);
				}
			}

			this.state = 2293;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
			case 1:
				{
				this.state = 2292;
				this.if_not_exists();
				}
				break;
			}
			this.state = 2296;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 2295;
				_localctx._name = this.identifier();
				}
			}

			this.state = 2298;
			this.match(PLpgSQLParser.ON);
			this.state = 2300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ONLY) {
				{
				this.state = 2299;
				this.match(PLpgSQLParser.ONLY);
				}
			}

			this.state = 2302;
			_localctx._table_name = this.schema_qualified_name();
			this.state = 2303;
			this.index_rest();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_rest(): Index_restContext {
		let _localctx: Index_restContext = new Index_restContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, PLpgSQLParser.RULE_index_rest);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 2305;
				this.match(PLpgSQLParser.USING);
				this.state = 2306;
				_localctx._method = this.identifier();
				}
			}

			this.state = 2309;
			this.index_sort();
			this.state = 2311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INCLUDE) {
				{
				this.state = 2310;
				this.including_index();
				}
			}

			this.state = 2314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 2313;
				this.with_storage_parameter();
				}
			}

			this.state = 2317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLESPACE) {
				{
				this.state = 2316;
				this.table_space();
				}
			}

			this.state = 2320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHERE) {
				{
				this.state = 2319;
				this.index_where();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_sort(): Index_sortContext {
		let _localctx: Index_sortContext = new Index_sortContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, PLpgSQLParser.RULE_index_sort);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2322;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 2323;
			this.sort_specifier_list();
			this.state = 2324;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public including_index(): Including_indexContext {
		let _localctx: Including_indexContext = new Including_indexContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, PLpgSQLParser.RULE_including_index);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2326;
			this.match(PLpgSQLParser.INCLUDE);
			this.state = 2327;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 2328;
			this.identifier();
			this.state = 2333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 2329;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2330;
				this.identifier();
				}
				}
				this.state = 2335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2336;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_where(): Index_whereContext {
		let _localctx: Index_whereContext = new Index_whereContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, PLpgSQLParser.RULE_index_where);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2338;
			this.match(PLpgSQLParser.WHERE);
			this.state = 2339;
			this.vex(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_extension_statement(): Create_extension_statementContext {
		let _localctx: Create_extension_statementContext = new Create_extension_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, PLpgSQLParser.RULE_create_extension_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2341;
			this.match(PLpgSQLParser.EXTENSION);
			this.state = 2343;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 2342;
				this.if_not_exists();
				}
				break;
			}
			this.state = 2345;
			_localctx._name = this.identifier();
			this.state = 2347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 2346;
				this.match(PLpgSQLParser.WITH);
				}
			}

			this.state = 2351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.SCHEMA) {
				{
				this.state = 2349;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 2350;
				_localctx._schema = this.identifier();
				}
			}

			this.state = 2358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.VERSION) {
				{
				this.state = 2353;
				this.match(PLpgSQLParser.VERSION);
				this.state = 2356;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 2354;
					this.identifier();
					}
					break;
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 2355;
					this.character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 2365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FROM) {
				{
				this.state = 2360;
				this.match(PLpgSQLParser.FROM);
				this.state = 2363;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 2361;
					this.identifier();
					}
					break;
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 2362;
					this.character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 2368;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE) {
				{
				this.state = 2367;
				this.match(PLpgSQLParser.CASCADE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_language_statement(): Create_language_statementContext {
		let _localctx: Create_language_statementContext = new Create_language_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, PLpgSQLParser.RULE_create_language_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OR) {
				{
				this.state = 2370;
				this.match(PLpgSQLParser.OR);
				this.state = 2371;
				this.match(PLpgSQLParser.REPLACE);
				}
			}

			this.state = 2375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TRUSTED) {
				{
				this.state = 2374;
				this.match(PLpgSQLParser.TRUSTED);
				}
			}

			this.state = 2378;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.PROCEDURAL) {
				{
				this.state = 2377;
				this.match(PLpgSQLParser.PROCEDURAL);
				}
			}

			this.state = 2380;
			this.match(PLpgSQLParser.LANGUAGE);
			this.state = 2381;
			_localctx._name = this.identifier();
			this.state = 2392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.HANDLER) {
				{
				this.state = 2382;
				this.match(PLpgSQLParser.HANDLER);
				this.state = 2383;
				this.schema_qualified_name();
				this.state = 2386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.INLINE) {
					{
					this.state = 2384;
					this.match(PLpgSQLParser.INLINE);
					this.state = 2385;
					this.schema_qualified_name();
					}
				}

				this.state = 2390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.VALIDATOR) {
					{
					this.state = 2388;
					this.match(PLpgSQLParser.VALIDATOR);
					this.state = 2389;
					this.schema_qualified_name();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_event_trigger(): Create_event_triggerContext {
		let _localctx: Create_event_triggerContext = new Create_event_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, PLpgSQLParser.RULE_create_event_trigger);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2394;
			this.match(PLpgSQLParser.EVENT);
			this.state = 2395;
			this.match(PLpgSQLParser.TRIGGER);
			this.state = 2396;
			_localctx._name = this.identifier();
			this.state = 2397;
			this.match(PLpgSQLParser.ON);
			this.state = 2398;
			this.identifier();
			this.state = 2419;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHEN) {
				{
				this.state = 2399;
				this.match(PLpgSQLParser.WHEN);
				this.state = 2415;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2400;
						this.schema_qualified_name();
						this.state = 2401;
						this.match(PLpgSQLParser.IN);
						this.state = 2402;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 2403;
						this.character_string();
						this.state = 2408;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === PLpgSQLParser.COMMA) {
							{
							{
							this.state = 2404;
							this.match(PLpgSQLParser.COMMA);
							this.state = 2405;
							this.character_string();
							}
							}
							this.state = 2410;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 2411;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						this.state = 2413;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.AND) {
							{
							this.state = 2412;
							this.match(PLpgSQLParser.AND);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2417;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 2421;
			this.match(PLpgSQLParser.EXECUTE);
			this.state = 2422;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2423;
			this.vex(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_type_statement(): Create_type_statementContext {
		let _localctx: Create_type_statementContext = new Create_type_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, PLpgSQLParser.RULE_create_type_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2425;
			this.match(PLpgSQLParser.TYPE);
			this.state = 2426;
			_localctx._name = this.schema_qualified_name();
			this.state = 2574;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.AS:
				{
				this.state = 2427;
				this.match(PLpgSQLParser.AS);
				this.state = 2496;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.LEFT_PAREN:
					{
					this.state = 2428;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 2437;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
						{
						this.state = 2429;
						_localctx._table_column_definition = this.table_column_definition();
						_localctx._attrs.push(_localctx._table_column_definition);
						this.state = 2434;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === PLpgSQLParser.COMMA) {
							{
							{
							this.state = 2430;
							this.match(PLpgSQLParser.COMMA);
							this.state = 2431;
							_localctx._table_column_definition = this.table_column_definition();
							_localctx._attrs.push(_localctx._table_column_definition);
							}
							}
							this.state = 2436;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
					}

					this.state = 2439;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				case PLpgSQLParser.ENUM:
					{
					this.state = 2440;
					this.match(PLpgSQLParser.ENUM);
					this.state = 2441;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 2450;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.Character_String_Literal || _la === PLpgSQLParser.BeginDollarStringConstant) {
						{
						this.state = 2442;
						_localctx._character_string = this.character_string();
						_localctx._enums.push(_localctx._character_string);
						this.state = 2447;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === PLpgSQLParser.COMMA) {
							{
							{
							this.state = 2443;
							this.match(PLpgSQLParser.COMMA);
							this.state = 2444;
							_localctx._character_string = this.character_string();
							_localctx._enums.push(_localctx._character_string);
							}
							}
							this.state = 2449;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
					}

					this.state = 2452;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				case PLpgSQLParser.RANGE:
					{
					this.state = 2453;
					this.match(PLpgSQLParser.RANGE);
					this.state = 2454;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 2470;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.SUBTYPE:
						{
						this.state = 2455;
						this.match(PLpgSQLParser.SUBTYPE);
						this.state = 2456;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2457;
						_localctx._subtype_name = this.data_type();
						}
						break;
					case PLpgSQLParser.SUBTYPE_OPCLASS:
						{
						this.state = 2458;
						this.match(PLpgSQLParser.SUBTYPE_OPCLASS);
						this.state = 2459;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2460;
						_localctx._subtype_operator_class = this.identifier();
						}
						break;
					case PLpgSQLParser.COLLATION:
						{
						this.state = 2461;
						this.match(PLpgSQLParser.COLLATION);
						this.state = 2462;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2463;
						_localctx._collation = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.CANONICAL:
						{
						this.state = 2464;
						this.match(PLpgSQLParser.CANONICAL);
						this.state = 2465;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2466;
						_localctx._canonical_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.SUBTYPE_DIFF:
						{
						this.state = 2467;
						this.match(PLpgSQLParser.SUBTYPE_DIFF);
						this.state = 2468;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2469;
						_localctx._subtype_diff_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.COMMA:
					case PLpgSQLParser.RIGHT_PAREN:
						break;
					default:
						break;
					}
					this.state = 2492;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 2472;
						this.match(PLpgSQLParser.COMMA);
						this.state = 2488;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.SUBTYPE:
							{
							this.state = 2473;
							this.match(PLpgSQLParser.SUBTYPE);
							this.state = 2474;
							this.match(PLpgSQLParser.EQUAL);
							this.state = 2475;
							_localctx._subtype_name = this.data_type();
							}
							break;
						case PLpgSQLParser.SUBTYPE_OPCLASS:
							{
							this.state = 2476;
							this.match(PLpgSQLParser.SUBTYPE_OPCLASS);
							this.state = 2477;
							this.match(PLpgSQLParser.EQUAL);
							this.state = 2478;
							_localctx._subtype_operator_class = this.identifier();
							}
							break;
						case PLpgSQLParser.COLLATION:
							{
							this.state = 2479;
							this.match(PLpgSQLParser.COLLATION);
							this.state = 2480;
							this.match(PLpgSQLParser.EQUAL);
							this.state = 2481;
							_localctx._collation = this.schema_qualified_name();
							}
							break;
						case PLpgSQLParser.CANONICAL:
							{
							this.state = 2482;
							this.match(PLpgSQLParser.CANONICAL);
							this.state = 2483;
							this.match(PLpgSQLParser.EQUAL);
							this.state = 2484;
							_localctx._canonical_function = this.schema_qualified_name();
							}
							break;
						case PLpgSQLParser.SUBTYPE_DIFF:
							{
							this.state = 2485;
							this.match(PLpgSQLParser.SUBTYPE_DIFF);
							this.state = 2486;
							this.match(PLpgSQLParser.EQUAL);
							this.state = 2487;
							_localctx._subtype_diff_function = this.schema_qualified_name();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						this.state = 2494;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2495;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 2498;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 2506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.INTERNALLENGTH) {
					{
					this.state = 2499;
					this.match(PLpgSQLParser.INTERNALLENGTH);
					this.state = 2500;
					this.match(PLpgSQLParser.EQUAL);
					this.state = 2503;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.PLUS:
					case PLpgSQLParser.MINUS:
					case PLpgSQLParser.NUMBER_LITERAL:
					case PLpgSQLParser.REAL_NUMBER:
						{
						this.state = 2501;
						_localctx._internallength = this.signed_numerical_literal();
						}
						break;
					case PLpgSQLParser.VARIABLE:
						{
						this.state = 2502;
						this.match(PLpgSQLParser.VARIABLE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2505;
					this.match(PLpgSQLParser.COMMA);
					}
				}

				this.state = 2508;
				this.match(PLpgSQLParser.INPUT);
				this.state = 2509;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2510;
				_localctx._input_function = this.schema_qualified_name();
				this.state = 2511;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2512;
				this.match(PLpgSQLParser.OUTPUT);
				this.state = 2513;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2514;
				_localctx._output_function = this.schema_qualified_name();
				this.state = 2569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 2515;
					this.match(PLpgSQLParser.COMMA);
					this.state = 2565;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.RECEIVE:
						{
						this.state = 2516;
						this.match(PLpgSQLParser.RECEIVE);
						this.state = 2517;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2518;
						_localctx._receive_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.SEND:
						{
						this.state = 2519;
						this.match(PLpgSQLParser.SEND);
						this.state = 2520;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2521;
						_localctx._send_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.TYPMOD_IN:
						{
						this.state = 2522;
						this.match(PLpgSQLParser.TYPMOD_IN);
						this.state = 2523;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2524;
						_localctx._type_modifier_input_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.TYPMOD_OUT:
						{
						this.state = 2525;
						this.match(PLpgSQLParser.TYPMOD_OUT);
						this.state = 2526;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2527;
						_localctx._type_modifier_output_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.ANALYZE:
						{
						this.state = 2528;
						this.match(PLpgSQLParser.ANALYZE);
						this.state = 2529;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2530;
						_localctx._analyze_function = this.schema_qualified_name();
						}
						break;
					case PLpgSQLParser.INTERNALLENGTH:
						{
						this.state = 2531;
						this.match(PLpgSQLParser.INTERNALLENGTH);
						this.state = 2532;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2535;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.PLUS:
						case PLpgSQLParser.MINUS:
						case PLpgSQLParser.NUMBER_LITERAL:
						case PLpgSQLParser.REAL_NUMBER:
							{
							this.state = 2533;
							_localctx._internallength = this.signed_numerical_literal();
							}
							break;
						case PLpgSQLParser.VARIABLE:
							{
							this.state = 2534;
							this.match(PLpgSQLParser.VARIABLE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case PLpgSQLParser.PASSEDBYVALUE:
						{
						this.state = 2537;
						this.match(PLpgSQLParser.PASSEDBYVALUE);
						}
						break;
					case PLpgSQLParser.ALIGNMENT:
						{
						this.state = 2538;
						this.match(PLpgSQLParser.ALIGNMENT);
						this.state = 2539;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2540;
						_localctx._alignment = this.data_type();
						}
						break;
					case PLpgSQLParser.STORAGE:
						{
						this.state = 2541;
						this.match(PLpgSQLParser.STORAGE);
						this.state = 2542;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2543;
						_localctx._storage = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === PLpgSQLParser.EXTERNAL || _la === PLpgSQLParser.EXTENDED || _la === PLpgSQLParser.MAIN || _la === PLpgSQLParser.PLAIN)) {
							_localctx._storage = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case PLpgSQLParser.LIKE:
						{
						this.state = 2544;
						this.match(PLpgSQLParser.LIKE);
						this.state = 2545;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2546;
						_localctx._like_type = this.data_type();
						}
						break;
					case PLpgSQLParser.CATEGORY:
						{
						this.state = 2547;
						this.match(PLpgSQLParser.CATEGORY);
						this.state = 2548;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2549;
						_localctx._category = this.character_string();
						}
						break;
					case PLpgSQLParser.PREFERRED:
						{
						this.state = 2550;
						this.match(PLpgSQLParser.PREFERRED);
						this.state = 2551;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2552;
						_localctx._preferred = this.truth_value();
						}
						break;
					case PLpgSQLParser.DEFAULT:
						{
						this.state = 2553;
						this.match(PLpgSQLParser.DEFAULT);
						this.state = 2554;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2555;
						_localctx._default_value = this.vex(0);
						}
						break;
					case PLpgSQLParser.ELEMENT:
						{
						this.state = 2556;
						this.match(PLpgSQLParser.ELEMENT);
						this.state = 2557;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2558;
						_localctx._element = this.data_type();
						}
						break;
					case PLpgSQLParser.DELIMITER:
						{
						this.state = 2559;
						this.match(PLpgSQLParser.DELIMITER);
						this.state = 2560;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2561;
						_localctx._delimiter = this.character_string();
						}
						break;
					case PLpgSQLParser.COLLATABLE:
						{
						this.state = 2562;
						this.match(PLpgSQLParser.COLLATABLE);
						this.state = 2563;
						this.match(PLpgSQLParser.EQUAL);
						this.state = 2564;
						_localctx._collatable = this.truth_value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					this.state = 2571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2572;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.EOF:
			case PLpgSQLParser.SEMI_COLON:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_domain_statement(): Create_domain_statementContext {
		let _localctx: Create_domain_statementContext = new Create_domain_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, PLpgSQLParser.RULE_create_domain_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2576;
			this.match(PLpgSQLParser.DOMAIN);
			this.state = 2577;
			_localctx._name = this.schema_qualified_name();
			this.state = 2579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.AS) {
				{
				this.state = 2578;
				this.match(PLpgSQLParser.AS);
				}
			}

			this.state = 2581;
			_localctx._dat_type = this.data_type();
			this.state = 2588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & ((1 << (PLpgSQLParser.CHECK - 378)) | (1 << (PLpgSQLParser.COLLATE - 378)) | (1 << (PLpgSQLParser.CONSTRAINT - 378)) | (1 << (PLpgSQLParser.DEFAULT - 378)))) !== 0) || _la === PLpgSQLParser.NOT || _la === PLpgSQLParser.NULL) {
				{
				this.state = 2586;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.COLLATE:
					{
					this.state = 2582;
					this.collate_identifier();
					}
					break;
				case PLpgSQLParser.DEFAULT:
					{
					this.state = 2583;
					this.match(PLpgSQLParser.DEFAULT);
					this.state = 2584;
					_localctx._def_value = this.vex(0);
					}
					break;
				case PLpgSQLParser.CHECK:
				case PLpgSQLParser.CONSTRAINT:
				case PLpgSQLParser.NOT:
				case PLpgSQLParser.NULL:
					{
					this.state = 2585;
					_localctx._domain_constraint = this.domain_constraint();
					_localctx._dom_constraint.push(_localctx._domain_constraint);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_server_statement(): Create_server_statementContext {
		let _localctx: Create_server_statementContext = new Create_server_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, PLpgSQLParser.RULE_create_server_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2591;
			this.match(PLpgSQLParser.SERVER);
			this.state = 2593;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 269, this._ctx) ) {
			case 1:
				{
				this.state = 2592;
				this.if_not_exists();
				}
				break;
			}
			this.state = 2595;
			this.identifier();
			this.state = 2598;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TYPE) {
				{
				this.state = 2596;
				this.match(PLpgSQLParser.TYPE);
				this.state = 2597;
				this.character_string();
				}
			}

			this.state = 2602;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.VERSION) {
				{
				this.state = 2600;
				this.match(PLpgSQLParser.VERSION);
				this.state = 2601;
				this.character_string();
				}
			}

			this.state = 2604;
			this.match(PLpgSQLParser.FOREIGN);
			this.state = 2605;
			this.match(PLpgSQLParser.DATA);
			this.state = 2606;
			this.match(PLpgSQLParser.WRAPPER);
			this.state = 2607;
			this.identifier();
			this.state = 2609;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 2608;
				this.define_foreign_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_fts_dictionary(): Create_fts_dictionaryContext {
		let _localctx: Create_fts_dictionaryContext = new Create_fts_dictionaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, PLpgSQLParser.RULE_create_fts_dictionary);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2611;
			this.match(PLpgSQLParser.TEXT);
			this.state = 2612;
			this.match(PLpgSQLParser.SEARCH);
			this.state = 2613;
			this.match(PLpgSQLParser.DICTIONARY);
			this.state = 2614;
			_localctx._name = this.schema_qualified_name();
			this.state = 2615;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 2616;
			this.match(PLpgSQLParser.TEMPLATE);
			this.state = 2617;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2618;
			_localctx._template = this.schema_qualified_name();
			this.state = 2623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 2619;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2620;
				this.option_with_value();
				}
				}
				this.state = 2625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2626;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option_with_value(): Option_with_valueContext {
		let _localctx: Option_with_valueContext = new Option_with_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, PLpgSQLParser.RULE_option_with_value);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2628;
			this.identifier();
			this.state = 2629;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2630;
			this.vex(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_fts_configuration(): Create_fts_configurationContext {
		let _localctx: Create_fts_configurationContext = new Create_fts_configurationContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, PLpgSQLParser.RULE_create_fts_configuration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2632;
			this.match(PLpgSQLParser.TEXT);
			this.state = 2633;
			this.match(PLpgSQLParser.SEARCH);
			this.state = 2634;
			this.match(PLpgSQLParser.CONFIGURATION);
			this.state = 2635;
			_localctx._name = this.schema_qualified_name();
			this.state = 2636;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 2643;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.PARSER:
				{
				this.state = 2637;
				this.match(PLpgSQLParser.PARSER);
				this.state = 2638;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2639;
				_localctx._parser_name = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.COPY:
				{
				this.state = 2640;
				this.match(PLpgSQLParser.COPY);
				this.state = 2641;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2642;
				_localctx._config_name = this.schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2645;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_fts_template(): Create_fts_templateContext {
		let _localctx: Create_fts_templateContext = new Create_fts_templateContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, PLpgSQLParser.RULE_create_fts_template);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2647;
			this.match(PLpgSQLParser.TEXT);
			this.state = 2648;
			this.match(PLpgSQLParser.SEARCH);
			this.state = 2649;
			this.match(PLpgSQLParser.TEMPLATE);
			this.state = 2650;
			_localctx._name = this.schema_qualified_name();
			this.state = 2651;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 2657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INIT) {
				{
				this.state = 2652;
				this.match(PLpgSQLParser.INIT);
				this.state = 2653;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2654;
				_localctx._init_name = this.schema_qualified_name();
				this.state = 2655;
				this.match(PLpgSQLParser.COMMA);
				}
			}

			this.state = 2659;
			this.match(PLpgSQLParser.LEXIZE);
			this.state = 2660;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2661;
			_localctx._lexize_name = this.schema_qualified_name();
			this.state = 2666;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COMMA) {
				{
				this.state = 2662;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2663;
				this.match(PLpgSQLParser.INIT);
				this.state = 2664;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2665;
				_localctx._init_name = this.schema_qualified_name();
				}
			}

			this.state = 2668;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_fts_parser(): Create_fts_parserContext {
		let _localctx: Create_fts_parserContext = new Create_fts_parserContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, PLpgSQLParser.RULE_create_fts_parser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2670;
			this.match(PLpgSQLParser.TEXT);
			this.state = 2671;
			this.match(PLpgSQLParser.SEARCH);
			this.state = 2672;
			this.match(PLpgSQLParser.PARSER);
			this.state = 2673;
			_localctx._name = this.schema_qualified_name();
			this.state = 2674;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 2675;
			this.match(PLpgSQLParser.START);
			this.state = 2676;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2677;
			_localctx._start_func = this.schema_qualified_name();
			this.state = 2678;
			this.match(PLpgSQLParser.COMMA);
			this.state = 2679;
			this.match(PLpgSQLParser.GETTOKEN);
			this.state = 2680;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2681;
			_localctx._gettoken_func = this.schema_qualified_name();
			this.state = 2682;
			this.match(PLpgSQLParser.COMMA);
			this.state = 2683;
			this.match(PLpgSQLParser.END);
			this.state = 2684;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2685;
			_localctx._end_func = this.schema_qualified_name();
			this.state = 2686;
			this.match(PLpgSQLParser.COMMA);
			this.state = 2692;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.HEADLINE) {
				{
				this.state = 2687;
				this.match(PLpgSQLParser.HEADLINE);
				this.state = 2688;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2689;
				_localctx._headline_func = this.schema_qualified_name();
				this.state = 2690;
				this.match(PLpgSQLParser.COMMA);
				}
			}

			this.state = 2694;
			this.match(PLpgSQLParser.LEXTYPES);
			this.state = 2695;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2696;
			_localctx._lextypes_func = this.schema_qualified_name();
			this.state = 2701;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COMMA) {
				{
				this.state = 2697;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2698;
				this.match(PLpgSQLParser.HEADLINE);
				this.state = 2699;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2700;
				_localctx._headline_func = this.schema_qualified_name();
				}
			}

			this.state = 2703;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_collation(): Create_collationContext {
		let _localctx: Create_collationContext = new Create_collationContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, PLpgSQLParser.RULE_create_collation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2705;
			this.match(PLpgSQLParser.COLLATION);
			this.state = 2707;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 2706;
				this.if_not_exists();
				}
				break;
			}
			this.state = 2709;
			_localctx._name = this.schema_qualified_name();
			this.state = 2724;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.FROM:
				{
				this.state = 2710;
				this.match(PLpgSQLParser.FROM);
				this.state = 2711;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 2712;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 2721;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.VERSION || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & ((1 << (PLpgSQLParser.DETERMINISTIC - 457)) | (1 << (PLpgSQLParser.LC_COLLATE - 457)) | (1 << (PLpgSQLParser.LC_CTYPE - 457)) | (1 << (PLpgSQLParser.LOCALE - 457)))) !== 0) || _la === PLpgSQLParser.PROVIDER) {
					{
					this.state = 2713;
					this.collation_option();
					this.state = 2718;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 2714;
						this.match(PLpgSQLParser.COMMA);
						this.state = 2715;
						this.collation_option();
						}
						}
						this.state = 2720;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 2723;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_collation(): Alter_collationContext {
		let _localctx: Alter_collationContext = new Alter_collationContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, PLpgSQLParser.RULE_alter_collation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2726;
			this.match(PLpgSQLParser.COLLATION);
			this.state = 2727;
			_localctx._name = this.schema_qualified_name();
			this.state = 2733;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.REFRESH:
				{
				this.state = 2728;
				this.match(PLpgSQLParser.REFRESH);
				this.state = 2729;
				this.match(PLpgSQLParser.VERSION);
				}
				break;
			case PLpgSQLParser.RENAME:
				{
				this.state = 2730;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.OWNER:
				{
				this.state = 2731;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.SET:
				{
				this.state = 2732;
				this.set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collation_option(): Collation_optionContext {
		let _localctx: Collation_optionContext = new Collation_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, PLpgSQLParser.RULE_collation_option);
		let _la: number;
		try {
			this.state = 2744;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.PROVIDER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2735;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.VERSION || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (PLpgSQLParser.LC_COLLATE - 478)) | (1 << (PLpgSQLParser.LC_CTYPE - 478)) | (1 << (PLpgSQLParser.LOCALE - 478)))) !== 0) || _la === PLpgSQLParser.PROVIDER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2736;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2739;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 2737;
					this.character_string();
					}
					break;
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 2738;
					this.identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.DETERMINISTIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2741;
				this.match(PLpgSQLParser.DETERMINISTIC);
				this.state = 2742;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 2743;
				this.boolean_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_user_mapping(): Create_user_mappingContext {
		let _localctx: Create_user_mappingContext = new Create_user_mappingContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, PLpgSQLParser.RULE_create_user_mapping);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2746;
			this.match(PLpgSQLParser.USER);
			this.state = 2747;
			this.match(PLpgSQLParser.MAPPING);
			this.state = 2749;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.IF) {
				{
				this.state = 2748;
				this.if_not_exists();
				}
			}

			this.state = 2751;
			this.match(PLpgSQLParser.FOR);
			this.state = 2754;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 2752;
				this.user_name();
				}
				break;
			case PLpgSQLParser.USER:
				{
				this.state = 2753;
				this.match(PLpgSQLParser.USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2756;
			this.match(PLpgSQLParser.SERVER);
			this.state = 2757;
			this.identifier();
			this.state = 2759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 2758;
				this.define_foreign_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user_mapping(): Alter_user_mappingContext {
		let _localctx: Alter_user_mappingContext = new Alter_user_mappingContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, PLpgSQLParser.RULE_alter_user_mapping);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2761;
			this.match(PLpgSQLParser.USER);
			this.state = 2762;
			this.match(PLpgSQLParser.MAPPING);
			this.state = 2763;
			this.match(PLpgSQLParser.FOR);
			this.state = 2766;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 2764;
				this.user_name();
				}
				break;
			case PLpgSQLParser.USER:
				{
				this.state = 2765;
				this.match(PLpgSQLParser.USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2768;
			this.match(PLpgSQLParser.SERVER);
			this.state = 2769;
			this.identifier();
			this.state = 2771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 2770;
				this.define_foreign_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user_or_role(): Alter_user_or_roleContext {
		let _localctx: Alter_user_or_roleContext = new Alter_user_or_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, PLpgSQLParser.RULE_alter_user_or_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2773;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.USER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2787;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 293, this._ctx) ) {
			case 1:
				{
				this.state = 2774;
				this.alter_user_or_role_set_reset();
				}
				break;

			case 2:
				{
				this.state = 2775;
				this.identifier();
				this.state = 2776;
				this.rename_to();
				}
				break;

			case 3:
				{
				this.state = 2778;
				this.user_name();
				this.state = 2780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 2779;
					this.match(PLpgSQLParser.WITH);
					}
				}

				this.state = 2783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2782;
					this.user_or_role_option_for_alter();
					}
					}
					this.state = 2785;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.CONNECTION || _la === PLpgSQLParser.ENCRYPTED || _la === PLpgSQLParser.INHERIT || _la === PLpgSQLParser.PASSWORD || _la === PLpgSQLParser.VALID || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (PLpgSQLParser.BYPASSRLS - 446)) | (1 << (PLpgSQLParser.CREATEDB - 446)) | (1 << (PLpgSQLParser.CREATEROLE - 446)))) !== 0) || ((((_la - 485)) & ~0x1F) === 0 && ((1 << (_la - 485)) & ((1 << (PLpgSQLParser.LOGIN - 485)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 485)) | (1 << (PLpgSQLParser.NOCREATEDB - 485)) | (1 << (PLpgSQLParser.NOCREATEROLE - 485)) | (1 << (PLpgSQLParser.NOINHERIT - 485)) | (1 << (PLpgSQLParser.NOLOGIN - 485)) | (1 << (PLpgSQLParser.NOREPLICATION - 485)) | (1 << (PLpgSQLParser.NOSUPERUSER - 485)) | (1 << (PLpgSQLParser.REPLICATION - 485)))) !== 0) || _la === PLpgSQLParser.SUPERUSER);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user_or_role_set_reset(): Alter_user_or_role_set_resetContext {
		let _localctx: Alter_user_or_role_set_resetContext = new Alter_user_or_role_set_resetContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, PLpgSQLParser.RULE_alter_user_or_role_set_reset);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2791;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 2789;
				this.user_name();
				}
				break;
			case PLpgSQLParser.ALL:
				{
				this.state = 2790;
				this.match(PLpgSQLParser.ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2796;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.IN) {
				{
				this.state = 2793;
				this.match(PLpgSQLParser.IN);
				this.state = 2794;
				this.match(PLpgSQLParser.DATABASE);
				this.state = 2795;
				this.identifier();
				}
			}

			this.state = 2798;
			this.user_or_role_set_reset();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_or_role_set_reset(): User_or_role_set_resetContext {
		let _localctx: User_or_role_set_resetContext = new User_or_role_set_resetContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, PLpgSQLParser.RULE_user_or_role_set_reset);
		let _la: number;
		try {
			this.state = 2829;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2800;
				this.match(PLpgSQLParser.SET);
				this.state = 2804;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
				case 1:
					{
					this.state = 2801;
					this.identifier();
					this.state = 2802;
					this.match(PLpgSQLParser.DOT);
					}
					break;
				}
				this.state = 2806;
				this.identifier();
				this.state = 2807;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TO || _la === PLpgSQLParser.EQUAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2808;
				this.set_statement_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2810;
				this.match(PLpgSQLParser.SET);
				this.state = 2814;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 297, this._ctx) ) {
				case 1:
					{
					this.state = 2811;
					this.identifier();
					this.state = 2812;
					this.match(PLpgSQLParser.DOT);
					}
					break;
				}
				this.state = 2816;
				this.identifier();
				this.state = 2817;
				this.match(PLpgSQLParser.FROM);
				this.state = 2818;
				this.match(PLpgSQLParser.CURRENT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2820;
				this.match(PLpgSQLParser.RESET);
				this.state = 2824;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 298, this._ctx) ) {
				case 1:
					{
					this.state = 2821;
					this.identifier();
					this.state = 2822;
					this.match(PLpgSQLParser.DOT);
					}
					break;
				}
				this.state = 2826;
				this.identifier();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2827;
				this.match(PLpgSQLParser.RESET);
				this.state = 2828;
				this.match(PLpgSQLParser.ALL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_group(): Alter_groupContext {
		let _localctx: Alter_groupContext = new Alter_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, PLpgSQLParser.RULE_alter_group);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2831;
			this.match(PLpgSQLParser.GROUP);
			this.state = 2832;
			this.alter_group_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_group_action(): Alter_group_actionContext {
		let _localctx: Alter_group_actionContext = new Alter_group_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, PLpgSQLParser.RULE_alter_group_action);
		let _la: number;
		try {
			this.state = 2842;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 300, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2834;
				_localctx._name = this.identifier();
				this.state = 2835;
				this.rename_to();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2837;
				this.user_name();
				this.state = 2838;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ADD || _la === PLpgSQLParser.DROP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2839;
				this.match(PLpgSQLParser.USER);
				this.state = 2840;
				this.identifier_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_tablespace(): Alter_tablespaceContext {
		let _localctx: Alter_tablespaceContext = new Alter_tablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, PLpgSQLParser.RULE_alter_tablespace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2844;
			this.match(PLpgSQLParser.TABLESPACE);
			this.state = 2845;
			_localctx._name = this.identifier();
			this.state = 2846;
			this.alter_tablespace_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_owner(): Alter_ownerContext {
		let _localctx: Alter_ownerContext = new Alter_ownerContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, PLpgSQLParser.RULE_alter_owner);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2877;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.OPERATOR:
				{
				this.state = 2848;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 2849;
				this.target_operator();
				}
				break;
			case PLpgSQLParser.LARGE:
				{
				this.state = 2850;
				this.match(PLpgSQLParser.LARGE);
				this.state = 2851;
				this.match(PLpgSQLParser.OBJECT);
				this.state = 2852;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
				break;
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.PROCEDURE:
				{
				this.state = 2853;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.AGGREGATE || _la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2854;
				_localctx._name = this.schema_qualified_name();
				this.state = 2855;
				this.function_args();
				}
				break;
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.VIEW:
				{
				this.state = 2871;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 302, this._ctx) ) {
				case 1:
					{
					this.state = 2857;
					this.match(PLpgSQLParser.TEXT);
					this.state = 2858;
					this.match(PLpgSQLParser.SEARCH);
					this.state = 2859;
					this.match(PLpgSQLParser.DICTIONARY);
					}
					break;

				case 2:
					{
					this.state = 2860;
					this.match(PLpgSQLParser.TEXT);
					this.state = 2861;
					this.match(PLpgSQLParser.SEARCH);
					this.state = 2862;
					this.match(PLpgSQLParser.CONFIGURATION);
					}
					break;

				case 3:
					{
					this.state = 2863;
					this.match(PLpgSQLParser.DOMAIN);
					}
					break;

				case 4:
					{
					this.state = 2864;
					this.match(PLpgSQLParser.SCHEMA);
					}
					break;

				case 5:
					{
					this.state = 2865;
					this.match(PLpgSQLParser.SEQUENCE);
					}
					break;

				case 6:
					{
					this.state = 2866;
					this.match(PLpgSQLParser.TYPE);
					}
					break;

				case 7:
					{
					this.state = 2868;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.MATERIALIZED) {
						{
						this.state = 2867;
						this.match(PLpgSQLParser.MATERIALIZED);
						}
					}

					this.state = 2870;
					this.match(PLpgSQLParser.VIEW);
					}
					break;
				}
				this.state = 2874;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
				case 1:
					{
					this.state = 2873;
					this.if_exists();
					}
					break;
				}
				this.state = 2876;
				_localctx._name = this.schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2879;
			this.owner_to();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_tablespace_action(): Alter_tablespace_actionContext {
		let _localctx: Alter_tablespace_actionContext = new Alter_tablespace_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, PLpgSQLParser.RULE_alter_tablespace_action);
		let _la: number;
		try {
			this.state = 2900;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2881;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.OWNER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2882;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.SET:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2883;
				this.match(PLpgSQLParser.SET);
				this.state = 2884;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 2885;
				this.option_with_value();
				this.state = 2890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 2886;
					this.match(PLpgSQLParser.COMMA);
					this.state = 2887;
					this.option_with_value();
					}
					}
					this.state = 2892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2893;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.RESET:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2895;
				this.match(PLpgSQLParser.RESET);
				this.state = 2896;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 2897;
				this.identifier_list();
				this.state = 2898;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_statistics(): Alter_statisticsContext {
		let _localctx: Alter_statisticsContext = new Alter_statisticsContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, PLpgSQLParser.RULE_alter_statistics);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2902;
			this.match(PLpgSQLParser.STATISTICS);
			this.state = 2903;
			_localctx._name = this.schema_qualified_name();
			this.state = 2907;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				{
				this.state = 2904;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.SET:
				{
				this.state = 2905;
				this.set_schema();
				}
				break;
			case PLpgSQLParser.OWNER:
				{
				this.state = 2906;
				this.owner_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_foreign_data_wrapper(): Alter_foreign_data_wrapperContext {
		let _localctx: Alter_foreign_data_wrapperContext = new Alter_foreign_data_wrapperContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, PLpgSQLParser.RULE_alter_foreign_data_wrapper);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2909;
			this.match(PLpgSQLParser.FOREIGN);
			this.state = 2910;
			this.match(PLpgSQLParser.DATA);
			this.state = 2911;
			this.match(PLpgSQLParser.WRAPPER);
			this.state = 2912;
			_localctx._name = this.identifier();
			this.state = 2913;
			this.alter_foreign_data_wrapper_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_foreign_data_wrapper_action(): Alter_foreign_data_wrapper_actionContext {
		let _localctx: Alter_foreign_data_wrapper_actionContext = new Alter_foreign_data_wrapper_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, PLpgSQLParser.RULE_alter_foreign_data_wrapper_action);
		let _la: number;
		try {
			this.state = 2932;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.EOF:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.SEMI_COLON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2919;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 308, this._ctx) ) {
				case 1:
					{
					this.state = 2915;
					this.match(PLpgSQLParser.HANDLER);
					this.state = 2916;
					this.schema_qualified_name_nontype();
					}
					break;

				case 2:
					{
					this.state = 2917;
					this.match(PLpgSQLParser.NO);
					this.state = 2918;
					this.match(PLpgSQLParser.HANDLER);
					}
					break;
				}
				this.state = 2925;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.VALIDATOR:
					{
					this.state = 2921;
					this.match(PLpgSQLParser.VALIDATOR);
					this.state = 2922;
					this.schema_qualified_name_nontype();
					}
					break;
				case PLpgSQLParser.NO:
					{
					this.state = 2923;
					this.match(PLpgSQLParser.NO);
					this.state = 2924;
					this.match(PLpgSQLParser.VALIDATOR);
					}
					break;
				case PLpgSQLParser.EOF:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.SEMI_COLON:
					break;
				default:
					break;
				}
				this.state = 2928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.OPTIONS) {
					{
					this.state = 2927;
					this.define_foreign_options();
					}
				}

				}
				break;
			case PLpgSQLParser.OWNER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2930;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.RENAME:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2931;
				this.rename_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_statement(): Alter_operator_statementContext {
		let _localctx: Alter_operator_statementContext = new Alter_operator_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, PLpgSQLParser.RULE_alter_operator_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2934;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 2935;
			this.target_operator();
			this.state = 2936;
			this.alter_operator_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_action(): Alter_operator_actionContext {
		let _localctx: Alter_operator_actionContext = new Alter_operator_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, PLpgSQLParser.RULE_alter_operator_action);
		let _la: number;
		try {
			this.state = 2951;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2938;
				this.set_schema();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2939;
				this.match(PLpgSQLParser.SET);
				this.state = 2940;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 2941;
				this.operator_set_restrict_join();
				this.state = 2946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 2942;
					this.match(PLpgSQLParser.COMMA);
					this.state = 2943;
					this.operator_set_restrict_join();
					}
					}
					this.state = 2948;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2949;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_set_restrict_join(): Operator_set_restrict_joinContext {
		let _localctx: Operator_set_restrict_joinContext = new Operator_set_restrict_joinContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, PLpgSQLParser.RULE_operator_set_restrict_join);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2953;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.RESTRICT || _la === PLpgSQLParser.JOIN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2954;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 2955;
			this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_user_mapping(): Drop_user_mappingContext {
		let _localctx: Drop_user_mappingContext = new Drop_user_mappingContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, PLpgSQLParser.RULE_drop_user_mapping);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2957;
			this.match(PLpgSQLParser.USER);
			this.state = 2958;
			this.match(PLpgSQLParser.MAPPING);
			this.state = 2960;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.IF) {
				{
				this.state = 2959;
				this.if_exists();
				}
			}

			this.state = 2962;
			this.match(PLpgSQLParser.FOR);
			this.state = 2965;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 2963;
				this.user_name();
				}
				break;
			case PLpgSQLParser.USER:
				{
				this.state = 2964;
				this.match(PLpgSQLParser.USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2967;
			this.match(PLpgSQLParser.SERVER);
			this.state = 2968;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_owned(): Drop_ownedContext {
		let _localctx: Drop_ownedContext = new Drop_ownedContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, PLpgSQLParser.RULE_drop_owned);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2970;
			this.match(PLpgSQLParser.OWNED);
			this.state = 2971;
			this.match(PLpgSQLParser.BY);
			this.state = 2972;
			this.user_name();
			this.state = 2977;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 2973;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2974;
				this.user_name();
				}
				}
				this.state = 2979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 2980;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_statement(): Drop_operator_statementContext {
		let _localctx: Drop_operator_statementContext = new Drop_operator_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, PLpgSQLParser.RULE_drop_operator_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2983;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 2985;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 318, this._ctx) ) {
			case 1:
				{
				this.state = 2984;
				this.if_exists();
				}
				break;
			}
			this.state = 2987;
			this.target_operator();
			this.state = 2992;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 2988;
				this.match(PLpgSQLParser.COMMA);
				this.state = 2989;
				this.target_operator();
				}
				}
				this.state = 2994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 2995;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public target_operator(): Target_operatorContext {
		let _localctx: Target_operatorContext = new Target_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, PLpgSQLParser.RULE_target_operator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2998;
			_localctx._name = this.operator_name();
			this.state = 2999;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 321, this._ctx) ) {
			case 1:
				{
				this.state = 3000;
				_localctx._left_type = this.data_type();
				}
				break;

			case 2:
				{
				this.state = 3001;
				this.match(PLpgSQLParser.NONE);
				}
				break;
			}
			this.state = 3004;
			this.match(PLpgSQLParser.COMMA);
			this.state = 3007;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 322, this._ctx) ) {
			case 1:
				{
				this.state = 3005;
				_localctx._right_type = this.data_type();
				}
				break;

			case 2:
				{
				this.state = 3006;
				this.match(PLpgSQLParser.NONE);
				}
				break;
			}
			this.state = 3009;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public domain_constraint(): Domain_constraintContext {
		let _localctx: Domain_constraintContext = new Domain_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, PLpgSQLParser.RULE_domain_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3013;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CONSTRAINT) {
				{
				this.state = 3011;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 3012;
				_localctx._name = this.identifier();
				}
			}

			this.state = 3024;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CHECK:
				{
				this.state = 3015;
				this.match(PLpgSQLParser.CHECK);
				this.state = 3016;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 3017;
				this.vex(0);
				this.state = 3018;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.NOT:
			case PLpgSQLParser.NULL:
				{
				this.state = 3021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 3020;
					this.match(PLpgSQLParser.NOT);
					}
				}

				this.state = 3023;
				this.match(PLpgSQLParser.NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_transform_statement(): Create_transform_statementContext {
		let _localctx: Create_transform_statementContext = new Create_transform_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, PLpgSQLParser.RULE_create_transform_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OR) {
				{
				this.state = 3026;
				this.match(PLpgSQLParser.OR);
				this.state = 3027;
				this.match(PLpgSQLParser.REPLACE);
				}
			}

			this.state = 3030;
			this.match(PLpgSQLParser.TRANSFORM);
			this.state = 3031;
			this.match(PLpgSQLParser.FOR);
			this.state = 3032;
			this.data_type();
			this.state = 3033;
			this.match(PLpgSQLParser.LANGUAGE);
			this.state = 3034;
			this.identifier();
			this.state = 3035;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3036;
			this.match(PLpgSQLParser.FROM);
			this.state = 3037;
			this.match(PLpgSQLParser.SQL);
			this.state = 3038;
			this.match(PLpgSQLParser.WITH);
			this.state = 3039;
			this.match(PLpgSQLParser.FUNCTION);
			this.state = 3040;
			this.function_parameters();
			this.state = 3041;
			this.match(PLpgSQLParser.COMMA);
			this.state = 3042;
			this.match(PLpgSQLParser.TO);
			this.state = 3043;
			this.match(PLpgSQLParser.SQL);
			this.state = 3044;
			this.match(PLpgSQLParser.WITH);
			this.state = 3045;
			this.match(PLpgSQLParser.FUNCTION);
			this.state = 3046;
			this.function_parameters();
			this.state = 3047;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_access_method(): Create_access_methodContext {
		let _localctx: Create_access_methodContext = new Create_access_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, PLpgSQLParser.RULE_create_access_method);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3049;
			this.match(PLpgSQLParser.ACCESS);
			this.state = 3050;
			this.match(PLpgSQLParser.METHOD);
			this.state = 3051;
			this.identifier();
			this.state = 3052;
			this.match(PLpgSQLParser.TYPE);
			this.state = 3053;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.INDEX || _la === PLpgSQLParser.TABLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3054;
			this.match(PLpgSQLParser.HANDLER);
			this.state = 3055;
			this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_user_or_role(): Create_user_or_roleContext {
		let _localctx: Create_user_or_roleContext = new Create_user_or_roleContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, PLpgSQLParser.RULE_create_user_or_role);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3057;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.USER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3058;
			_localctx._name = this.identifier();
			this.state = 3069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ADMIN || _la === PLpgSQLParser.CONNECTION || _la === PLpgSQLParser.ENCRYPTED || _la === PLpgSQLParser.INHERIT || _la === PLpgSQLParser.PASSWORD || _la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.SYSID || _la === PLpgSQLParser.VALID || _la === PLpgSQLParser.IN || _la === PLpgSQLParser.USER || ((((_la - 442)) & ~0x1F) === 0 && ((1 << (_la - 442)) & ((1 << (PLpgSQLParser.WITH - 442)) | (1 << (PLpgSQLParser.BYPASSRLS - 442)) | (1 << (PLpgSQLParser.CREATEDB - 442)) | (1 << (PLpgSQLParser.CREATEROLE - 442)))) !== 0) || ((((_la - 485)) & ~0x1F) === 0 && ((1 << (_la - 485)) & ((1 << (PLpgSQLParser.LOGIN - 485)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 485)) | (1 << (PLpgSQLParser.NOCREATEDB - 485)) | (1 << (PLpgSQLParser.NOCREATEROLE - 485)) | (1 << (PLpgSQLParser.NOINHERIT - 485)) | (1 << (PLpgSQLParser.NOLOGIN - 485)) | (1 << (PLpgSQLParser.NOREPLICATION - 485)) | (1 << (PLpgSQLParser.NOSUPERUSER - 485)) | (1 << (PLpgSQLParser.REPLICATION - 485)))) !== 0) || _la === PLpgSQLParser.SUPERUSER) {
				{
				this.state = 3060;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 3059;
					this.match(PLpgSQLParser.WITH);
					}
				}

				this.state = 3062;
				this.user_or_role_option();
				this.state = 3066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.ADMIN || _la === PLpgSQLParser.CONNECTION || _la === PLpgSQLParser.ENCRYPTED || _la === PLpgSQLParser.INHERIT || _la === PLpgSQLParser.PASSWORD || _la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.SYSID || _la === PLpgSQLParser.VALID || _la === PLpgSQLParser.IN || _la === PLpgSQLParser.USER || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (PLpgSQLParser.BYPASSRLS - 446)) | (1 << (PLpgSQLParser.CREATEDB - 446)) | (1 << (PLpgSQLParser.CREATEROLE - 446)))) !== 0) || ((((_la - 485)) & ~0x1F) === 0 && ((1 << (_la - 485)) & ((1 << (PLpgSQLParser.LOGIN - 485)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 485)) | (1 << (PLpgSQLParser.NOCREATEDB - 485)) | (1 << (PLpgSQLParser.NOCREATEROLE - 485)) | (1 << (PLpgSQLParser.NOINHERIT - 485)) | (1 << (PLpgSQLParser.NOLOGIN - 485)) | (1 << (PLpgSQLParser.NOREPLICATION - 485)) | (1 << (PLpgSQLParser.NOSUPERUSER - 485)) | (1 << (PLpgSQLParser.REPLICATION - 485)))) !== 0) || _la === PLpgSQLParser.SUPERUSER) {
					{
					{
					this.state = 3063;
					this.user_or_role_option();
					}
					}
					this.state = 3068;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_or_role_option(): User_or_role_optionContext {
		let _localctx: User_or_role_optionContext = new User_or_role_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, PLpgSQLParser.RULE_user_or_role_option);
		try {
			this.state = 3074;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.SUPERUSER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3071;
				this.user_or_role_or_group_common_option();
				}
				break;
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.REPLICATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3072;
				this.user_or_role_common_option();
				}
				break;
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.IN:
			case PLpgSQLParser.USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3073;
				this.user_or_role_or_group_option_for_create();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_or_role_option_for_alter(): User_or_role_option_for_alterContext {
		let _localctx: User_or_role_option_for_alterContext = new User_or_role_option_for_alterContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, PLpgSQLParser.RULE_user_or_role_option_for_alter);
		try {
			this.state = 3078;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.SUPERUSER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3076;
				this.user_or_role_or_group_common_option();
				}
				break;
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.REPLICATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3077;
				this.user_or_role_common_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext {
		let _localctx: User_or_role_or_group_common_optionContext = new User_or_role_or_group_common_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, PLpgSQLParser.RULE_user_or_role_or_group_common_option);
		let _la: number;
		try {
			this.state = 3101;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.SUPERUSER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3080;
				this.match(PLpgSQLParser.SUPERUSER);
				}
				break;
			case PLpgSQLParser.NOSUPERUSER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3081;
				this.match(PLpgSQLParser.NOSUPERUSER);
				}
				break;
			case PLpgSQLParser.CREATEDB:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3082;
				this.match(PLpgSQLParser.CREATEDB);
				}
				break;
			case PLpgSQLParser.NOCREATEDB:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3083;
				this.match(PLpgSQLParser.NOCREATEDB);
				}
				break;
			case PLpgSQLParser.CREATEROLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3084;
				this.match(PLpgSQLParser.CREATEROLE);
				}
				break;
			case PLpgSQLParser.NOCREATEROLE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3085;
				this.match(PLpgSQLParser.NOCREATEROLE);
				}
				break;
			case PLpgSQLParser.INHERIT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3086;
				this.match(PLpgSQLParser.INHERIT);
				}
				break;
			case PLpgSQLParser.NOINHERIT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3087;
				this.match(PLpgSQLParser.NOINHERIT);
				}
				break;
			case PLpgSQLParser.LOGIN:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3088;
				this.match(PLpgSQLParser.LOGIN);
				}
				break;
			case PLpgSQLParser.NOLOGIN:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3089;
				this.match(PLpgSQLParser.NOLOGIN);
				}
				break;
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.PASSWORD:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ENCRYPTED) {
					{
					this.state = 3090;
					this.match(PLpgSQLParser.ENCRYPTED);
					}
				}

				this.state = 3093;
				this.match(PLpgSQLParser.PASSWORD);
				this.state = 3096;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.Character_String_Literal:
					{
					this.state = 3094;
					_localctx._password = this.match(PLpgSQLParser.Character_String_Literal);
					}
					break;
				case PLpgSQLParser.NULL:
					{
					this.state = 3095;
					this.match(PLpgSQLParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.VALID:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3098;
				this.match(PLpgSQLParser.VALID);
				this.state = 3099;
				this.match(PLpgSQLParser.UNTIL);
				this.state = 3100;
				_localctx._date_time = this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_or_role_common_option(): User_or_role_common_optionContext {
		let _localctx: User_or_role_common_optionContext = new User_or_role_common_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, PLpgSQLParser.RULE_user_or_role_common_option);
		try {
			this.state = 3110;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.REPLICATION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3103;
				this.match(PLpgSQLParser.REPLICATION);
				}
				break;
			case PLpgSQLParser.NOREPLICATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3104;
				this.match(PLpgSQLParser.NOREPLICATION);
				}
				break;
			case PLpgSQLParser.BYPASSRLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3105;
				this.match(PLpgSQLParser.BYPASSRLS);
				}
				break;
			case PLpgSQLParser.NOBYPASSRLS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3106;
				this.match(PLpgSQLParser.NOBYPASSRLS);
				}
				break;
			case PLpgSQLParser.CONNECTION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3107;
				this.match(PLpgSQLParser.CONNECTION);
				this.state = 3108;
				this.match(PLpgSQLParser.LIMIT);
				this.state = 3109;
				this.signed_number_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_or_role_or_group_option_for_create(): User_or_role_or_group_option_for_createContext {
		let _localctx: User_or_role_or_group_option_for_createContext = new User_or_role_or_group_option_for_createContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, PLpgSQLParser.RULE_user_or_role_or_group_option_for_create);
		try {
			this.state = 3124;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.SYSID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3112;
				this.match(PLpgSQLParser.SYSID);
				this.state = 3113;
				this.vex(0);
				}
				break;
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.IN:
			case PLpgSQLParser.USER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3121;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
				case 1:
					{
					this.state = 3114;
					this.match(PLpgSQLParser.IN);
					this.state = 3115;
					this.match(PLpgSQLParser.ROLE);
					}
					break;

				case 2:
					{
					this.state = 3116;
					this.match(PLpgSQLParser.IN);
					this.state = 3117;
					this.match(PLpgSQLParser.GROUP);
					}
					break;

				case 3:
					{
					this.state = 3118;
					this.match(PLpgSQLParser.ROLE);
					}
					break;

				case 4:
					{
					this.state = 3119;
					this.match(PLpgSQLParser.ADMIN);
					}
					break;

				case 5:
					{
					this.state = 3120;
					this.match(PLpgSQLParser.USER);
					}
					break;
				}
				this.state = 3123;
				this.identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_group(): Create_groupContext {
		let _localctx: Create_groupContext = new Create_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, PLpgSQLParser.RULE_create_group);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3126;
			this.match(PLpgSQLParser.GROUP);
			this.state = 3127;
			_localctx._name = this.identifier();
			this.state = 3136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ADMIN || _la === PLpgSQLParser.ENCRYPTED || _la === PLpgSQLParser.INHERIT || _la === PLpgSQLParser.PASSWORD || _la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.SYSID || _la === PLpgSQLParser.VALID || _la === PLpgSQLParser.IN || _la === PLpgSQLParser.USER || ((((_la - 442)) & ~0x1F) === 0 && ((1 << (_la - 442)) & ((1 << (PLpgSQLParser.WITH - 442)) | (1 << (PLpgSQLParser.CREATEDB - 442)) | (1 << (PLpgSQLParser.CREATEROLE - 442)))) !== 0) || ((((_la - 485)) & ~0x1F) === 0 && ((1 << (_la - 485)) & ((1 << (PLpgSQLParser.LOGIN - 485)) | (1 << (PLpgSQLParser.NOCREATEDB - 485)) | (1 << (PLpgSQLParser.NOCREATEROLE - 485)) | (1 << (PLpgSQLParser.NOINHERIT - 485)) | (1 << (PLpgSQLParser.NOLOGIN - 485)) | (1 << (PLpgSQLParser.NOSUPERUSER - 485)))) !== 0) || _la === PLpgSQLParser.SUPERUSER) {
				{
				this.state = 3129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 3128;
					this.match(PLpgSQLParser.WITH);
					}
				}

				this.state = 3132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3131;
					this.group_option();
					}
					}
					this.state = 3134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.ADMIN || _la === PLpgSQLParser.ENCRYPTED || _la === PLpgSQLParser.INHERIT || _la === PLpgSQLParser.PASSWORD || _la === PLpgSQLParser.ROLE || _la === PLpgSQLParser.SYSID || _la === PLpgSQLParser.VALID || _la === PLpgSQLParser.IN || _la === PLpgSQLParser.USER || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & ((1 << (PLpgSQLParser.CREATEDB - 454)) | (1 << (PLpgSQLParser.CREATEROLE - 454)) | (1 << (PLpgSQLParser.LOGIN - 454)))) !== 0) || ((((_la - 499)) & ~0x1F) === 0 && ((1 << (_la - 499)) & ((1 << (PLpgSQLParser.NOCREATEDB - 499)) | (1 << (PLpgSQLParser.NOCREATEROLE - 499)) | (1 << (PLpgSQLParser.NOINHERIT - 499)) | (1 << (PLpgSQLParser.NOLOGIN - 499)) | (1 << (PLpgSQLParser.NOSUPERUSER - 499)))) !== 0) || _la === PLpgSQLParser.SUPERUSER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_option(): Group_optionContext {
		let _localctx: Group_optionContext = new Group_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, PLpgSQLParser.RULE_group_option);
		try {
			this.state = 3140;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.SUPERUSER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3138;
				this.user_or_role_or_group_common_option();
				}
				break;
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.IN:
			case PLpgSQLParser.USER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3139;
				this.user_or_role_or_group_option_for_create();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_tablespace(): Create_tablespaceContext {
		let _localctx: Create_tablespaceContext = new Create_tablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, PLpgSQLParser.RULE_create_tablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3142;
			this.match(PLpgSQLParser.TABLESPACE);
			this.state = 3143;
			_localctx._name = this.identifier();
			this.state = 3146;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OWNER) {
				{
				this.state = 3144;
				this.match(PLpgSQLParser.OWNER);
				this.state = 3145;
				this.user_name();
				}
			}

			this.state = 3148;
			this.match(PLpgSQLParser.LOCATION);
			this.state = 3149;
			_localctx._directory = this.match(PLpgSQLParser.Character_String_Literal);
			this.state = 3162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 3150;
				this.match(PLpgSQLParser.WITH);
				this.state = 3151;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 3152;
				this.option_with_value();
				this.state = 3157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3153;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3154;
					this.option_with_value();
					}
					}
					this.state = 3159;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3160;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_statistics(): Create_statisticsContext {
		let _localctx: Create_statisticsContext = new Create_statisticsContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, PLpgSQLParser.RULE_create_statistics);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3164;
			this.match(PLpgSQLParser.STATISTICS);
			this.state = 3166;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 345, this._ctx) ) {
			case 1:
				{
				this.state = 3165;
				this.if_not_exists();
				}
				break;
			}
			this.state = 3168;
			_localctx._name = this.schema_qualified_name();
			this.state = 3173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 3169;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 3170;
				this.identifier_list();
				this.state = 3171;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			this.state = 3175;
			this.match(PLpgSQLParser.ON);
			this.state = 3176;
			this.identifier();
			this.state = 3177;
			this.match(PLpgSQLParser.COMMA);
			this.state = 3178;
			this.identifier_list();
			this.state = 3179;
			this.match(PLpgSQLParser.FROM);
			this.state = 3180;
			this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_foreign_data_wrapper(): Create_foreign_data_wrapperContext {
		let _localctx: Create_foreign_data_wrapperContext = new Create_foreign_data_wrapperContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, PLpgSQLParser.RULE_create_foreign_data_wrapper);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3182;
			this.match(PLpgSQLParser.FOREIGN);
			this.state = 3183;
			this.match(PLpgSQLParser.DATA);
			this.state = 3184;
			this.match(PLpgSQLParser.WRAPPER);
			this.state = 3185;
			_localctx._name = this.identifier();
			this.state = 3190;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 347, this._ctx) ) {
			case 1:
				{
				this.state = 3186;
				this.match(PLpgSQLParser.HANDLER);
				this.state = 3187;
				this.schema_qualified_name_nontype();
				}
				break;

			case 2:
				{
				this.state = 3188;
				this.match(PLpgSQLParser.NO);
				this.state = 3189;
				this.match(PLpgSQLParser.HANDLER);
				}
				break;
			}
			this.state = 3196;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.VALIDATOR:
				{
				this.state = 3192;
				this.match(PLpgSQLParser.VALIDATOR);
				this.state = 3193;
				this.schema_qualified_name_nontype();
				}
				break;
			case PLpgSQLParser.NO:
				{
				this.state = 3194;
				this.match(PLpgSQLParser.NO);
				this.state = 3195;
				this.match(PLpgSQLParser.VALIDATOR);
				}
				break;
			case PLpgSQLParser.EOF:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.SEMI_COLON:
				break;
			default:
				break;
			}
			this.state = 3210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 3198;
				this.match(PLpgSQLParser.OPTIONS);
				this.state = 3199;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 3200;
				this.option_without_equal();
				this.state = 3205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3201;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3202;
					this.option_without_equal();
					}
					}
					this.state = 3207;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3208;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option_without_equal(): Option_without_equalContext {
		let _localctx: Option_without_equalContext = new Option_without_equalContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, PLpgSQLParser.RULE_option_without_equal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3212;
			this.identifier();
			this.state = 3213;
			this.match(PLpgSQLParser.Character_String_Literal);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_statement(): Create_operator_statementContext {
		let _localctx: Create_operator_statementContext = new Create_operator_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, PLpgSQLParser.RULE_create_operator_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3215;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 3216;
			_localctx._name = this.operator_name();
			this.state = 3217;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3218;
			this.operator_option();
			this.state = 3223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3219;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3220;
				this.operator_option();
				}
				}
				this.state = 3225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3226;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_name(): Operator_nameContext {
		let _localctx: Operator_nameContext = new Operator_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, PLpgSQLParser.RULE_operator_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3231;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 3228;
				_localctx._schema_name = this.identifier();
				this.state = 3229;
				this.match(PLpgSQLParser.DOT);
				}
			}

			this.state = 3233;
			_localctx._operator = this.all_simple_op();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_option(): Operator_optionContext {
		let _localctx: Operator_optionContext = new Operator_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, PLpgSQLParser.RULE_operator_option);
		let _la: number;
		try {
			this.state = 3252;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.PROCEDURE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3235;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3236;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3237;
				_localctx._func_name = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.RESTRICT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3238;
				this.match(PLpgSQLParser.RESTRICT);
				this.state = 3239;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3240;
				_localctx._restr_name = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.JOIN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3241;
				this.match(PLpgSQLParser.JOIN);
				this.state = 3242;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3243;
				_localctx._join_name = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.RIGHTARG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3244;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.LEFTARG || _la === PLpgSQLParser.RIGHTARG)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3245;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3246;
				_localctx._type = this.data_type();
				}
				break;
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.NEGATOR:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3247;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.COMMUTATOR || _la === PLpgSQLParser.NEGATOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3248;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3249;
				_localctx._addition_oper_name = this.all_op_ref();
				}
				break;
			case PLpgSQLParser.HASHES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3250;
				this.match(PLpgSQLParser.HASHES);
				}
				break;
			case PLpgSQLParser.MERGES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3251;
				this.match(PLpgSQLParser.MERGES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_aggregate_statement(): Create_aggregate_statementContext {
		let _localctx: Create_aggregate_statementContext = new Create_aggregate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, PLpgSQLParser.RULE_create_aggregate_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OR) {
				{
				this.state = 3254;
				this.match(PLpgSQLParser.OR);
				this.state = 3255;
				this.match(PLpgSQLParser.REPLACE);
				}
			}

			this.state = 3258;
			this.match(PLpgSQLParser.AGGREGATE);
			this.state = 3259;
			_localctx._name = this.schema_qualified_name();
			this.state = 3261;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 355, this._ctx) ) {
			case 1:
				{
				this.state = 3260;
				this.function_args();
				}
				break;
			}
			this.state = 3263;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.BASETYPE) {
				{
				this.state = 3264;
				this.match(PLpgSQLParser.BASETYPE);
				this.state = 3265;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3266;
				_localctx._base_type = this.data_type();
				this.state = 3267;
				this.match(PLpgSQLParser.COMMA);
				}
			}

			this.state = 3271;
			this.match(PLpgSQLParser.SFUNC);
			this.state = 3272;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 3273;
			_localctx._sfunc_name = this.schema_qualified_name();
			this.state = 3274;
			this.match(PLpgSQLParser.COMMA);
			this.state = 3275;
			this.match(PLpgSQLParser.STYPE);
			this.state = 3276;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 3277;
			_localctx._type = this.data_type();
			this.state = 3282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3278;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3279;
				this.aggregate_param();
				}
				}
				this.state = 3284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3285;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregate_param(): Aggregate_paramContext {
		let _localctx: Aggregate_paramContext = new Aggregate_paramContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, PLpgSQLParser.RULE_aggregate_param);
		let _la: number;
		try {
			this.state = 3338;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.SSPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3287;
				this.match(PLpgSQLParser.SSPACE);
				this.state = 3288;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3289;
				_localctx._s_space = this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
				break;
			case PLpgSQLParser.FINALFUNC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3290;
				this.match(PLpgSQLParser.FINALFUNC);
				this.state = 3291;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3292;
				_localctx._final_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.FINALFUNC_EXTRA:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3293;
				this.match(PLpgSQLParser.FINALFUNC_EXTRA);
				}
				break;
			case PLpgSQLParser.FINALFUNC_MODIFY:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3294;
				this.match(PLpgSQLParser.FINALFUNC_MODIFY);
				this.state = 3295;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3296;
				_la = this._input.LA(1);
				if (!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PLpgSQLParser.READ_ONLY - 512)) | (1 << (PLpgSQLParser.READ_WRITE - 512)) | (1 << (PLpgSQLParser.SHAREABLE - 512)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.COMBINEFUNC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3297;
				this.match(PLpgSQLParser.COMBINEFUNC);
				this.state = 3298;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3299;
				_localctx._combine_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.SERIALFUNC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3300;
				this.match(PLpgSQLParser.SERIALFUNC);
				this.state = 3301;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3302;
				_localctx._serial_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.DESERIALFUNC:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3303;
				this.match(PLpgSQLParser.DESERIALFUNC);
				this.state = 3304;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3305;
				_localctx._deserial_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.INITCOND:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3306;
				this.match(PLpgSQLParser.INITCOND);
				this.state = 3307;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3308;
				_localctx._init_cond = this.vex(0);
				}
				break;
			case PLpgSQLParser.MSFUNC:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3309;
				this.match(PLpgSQLParser.MSFUNC);
				this.state = 3310;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3311;
				_localctx._ms_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.MINVFUNC:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3312;
				this.match(PLpgSQLParser.MINVFUNC);
				this.state = 3313;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3314;
				_localctx._minv_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.MSTYPE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3315;
				this.match(PLpgSQLParser.MSTYPE);
				this.state = 3316;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3317;
				_localctx._ms_type = this.data_type();
				}
				break;
			case PLpgSQLParser.MSSPACE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3318;
				this.match(PLpgSQLParser.MSSPACE);
				this.state = 3319;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3320;
				_localctx._ms_space = this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
				break;
			case PLpgSQLParser.MFINALFUNC:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3321;
				this.match(PLpgSQLParser.MFINALFUNC);
				this.state = 3322;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3323;
				_localctx._mfinal_func = this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.MFINALFUNC_EXTRA:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3324;
				this.match(PLpgSQLParser.MFINALFUNC_EXTRA);
				}
				break;
			case PLpgSQLParser.MFINALFUNC_MODIFY:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3325;
				this.match(PLpgSQLParser.MFINALFUNC_MODIFY);
				this.state = 3326;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3327;
				_la = this._input.LA(1);
				if (!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PLpgSQLParser.READ_ONLY - 512)) | (1 << (PLpgSQLParser.READ_WRITE - 512)) | (1 << (PLpgSQLParser.SHAREABLE - 512)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.MINITCOND:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3328;
				this.match(PLpgSQLParser.MINITCOND);
				this.state = 3329;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3330;
				_localctx._minit_cond = this.vex(0);
				}
				break;
			case PLpgSQLParser.SORTOP:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3331;
				this.match(PLpgSQLParser.SORTOP);
				this.state = 3332;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3333;
				this.all_op_ref();
				}
				break;
			case PLpgSQLParser.PARALLEL:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3334;
				this.match(PLpgSQLParser.PARALLEL);
				this.state = 3335;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 3336;
				_la = this._input.LA(1);
				if (!(((((_la - 517)) & ~0x1F) === 0 && ((1 << (_la - 517)) & ((1 << (PLpgSQLParser.RESTRICTED - 517)) | (1 << (PLpgSQLParser.SAFE - 517)) | (1 << (PLpgSQLParser.UNSAFE - 517)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.HYPOTHETICAL:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3337;
				this.match(PLpgSQLParser.HYPOTHETICAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_statement(): Set_statementContext {
		let _localctx: Set_statementContext = new Set_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, PLpgSQLParser.RULE_set_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3340;
			this.match(PLpgSQLParser.SET);
			this.state = 3341;
			this.set_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_action(): Set_actionContext {
		let _localctx: Set_actionContext = new Set_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, PLpgSQLParser.RULE_set_action);
		let _la: number;
		try {
			this.state = 3380;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 363, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3343;
				this.match(PLpgSQLParser.CONSTRAINTS);
				this.state = 3346;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ALL:
					{
					this.state = 3344;
					this.match(PLpgSQLParser.ALL);
					}
					break;
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 3345;
					this.names_references();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3348;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DEFERRED || _la === PLpgSQLParser.IMMEDIATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3349;
				this.match(PLpgSQLParser.TRANSACTION);
				this.state = 3350;
				this.transaction_mode();
				this.state = 3355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3351;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3352;
					this.transaction_mode();
					}
					}
					this.state = 3357;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3358;
				this.match(PLpgSQLParser.TRANSACTION);
				this.state = 3359;
				this.match(PLpgSQLParser.SNAPSHOT);
				this.state = 3360;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3361;
				this.match(PLpgSQLParser.SESSION);
				this.state = 3362;
				this.match(PLpgSQLParser.CHARACTERISTICS);
				this.state = 3363;
				this.match(PLpgSQLParser.AS);
				this.state = 3364;
				this.match(PLpgSQLParser.TRANSACTION);
				this.state = 3365;
				this.transaction_mode();
				this.state = 3370;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3366;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3367;
					this.transaction_mode();
					}
					}
					this.state = 3372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3374;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
				case 1:
					{
					this.state = 3373;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.LOCAL || _la === PLpgSQLParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3376;
				this.session_local_option();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3377;
				this.match(PLpgSQLParser.XML);
				this.state = 3378;
				this.match(PLpgSQLParser.OPTION);
				this.state = 3379;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONTENT || _la === PLpgSQLParser.DOCUMENT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public session_local_option(): Session_local_optionContext {
		let _localctx: Session_local_optionContext = new Session_local_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, PLpgSQLParser.RULE_session_local_option);
		let _la: number;
		try {
			this.state = 3411;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3382;
				this.match(PLpgSQLParser.SESSION);
				this.state = 3383;
				this.match(PLpgSQLParser.AUTHORIZATION);
				this.state = 3387;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.Character_String_Literal:
					{
					this.state = 3384;
					this.match(PLpgSQLParser.Character_String_Literal);
					}
					break;
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 3385;
					this.identifier();
					}
					break;
				case PLpgSQLParser.DEFAULT:
					{
					this.state = 3386;
					this.match(PLpgSQLParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3389;
				this.match(PLpgSQLParser.TIME);
				this.state = 3390;
				this.match(PLpgSQLParser.ZONE);
				this.state = 3395;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.Character_String_Literal:
					{
					this.state = 3391;
					this.match(PLpgSQLParser.Character_String_Literal);
					}
					break;
				case PLpgSQLParser.PLUS:
				case PLpgSQLParser.MINUS:
				case PLpgSQLParser.NUMBER_LITERAL:
				case PLpgSQLParser.REAL_NUMBER:
					{
					this.state = 3392;
					this.signed_numerical_literal();
					}
					break;
				case PLpgSQLParser.LOCAL:
					{
					this.state = 3393;
					this.match(PLpgSQLParser.LOCAL);
					}
					break;
				case PLpgSQLParser.DEFAULT:
					{
					this.state = 3394;
					this.match(PLpgSQLParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3400;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
				case 1:
					{
					this.state = 3397;
					this.identifier();
					this.state = 3398;
					this.match(PLpgSQLParser.DOT);
					}
					break;
				}
				this.state = 3402;
				_localctx._config_param = this.identifier();
				this.state = 3403;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TO || _la === PLpgSQLParser.EQUAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3404;
				this.set_statement_value();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3406;
				this.match(PLpgSQLParser.ROLE);
				this.state = 3409;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 367, this._ctx) ) {
				case 1:
					{
					this.state = 3407;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 3408;
					this.match(PLpgSQLParser.NONE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_statement_value(): Set_statement_valueContext {
		let _localctx: Set_statement_valueContext = new Set_statement_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, PLpgSQLParser.RULE_set_statement_value);
		let _la: number;
		try {
			this.state = 3422;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.AUTHORIZATION:
			case PLpgSQLParser.BINARY:
			case PLpgSQLParser.COLLATION:
			case PLpgSQLParser.CONCURRENTLY:
			case PLpgSQLParser.CROSS:
			case PLpgSQLParser.CURRENT_SCHEMA:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.ILIKE:
			case PLpgSQLParser.INNER:
			case PLpgSQLParser.IS:
			case PLpgSQLParser.ISNULL:
			case PLpgSQLParser.JOIN:
			case PLpgSQLParser.LEFT:
			case PLpgSQLParser.LIKE:
			case PLpgSQLParser.NATURAL:
			case PLpgSQLParser.NOTNULL:
			case PLpgSQLParser.OUTER:
			case PLpgSQLParser.OVERLAPS:
			case PLpgSQLParser.RIGHT:
			case PLpgSQLParser.SIMILAR:
			case PLpgSQLParser.TABLESAMPLE:
			case PLpgSQLParser.VERBOSE:
			case PLpgSQLParser.ALL:
			case PLpgSQLParser.ANY:
			case PLpgSQLParser.ARRAY:
			case PLpgSQLParser.CASE:
			case PLpgSQLParser.CAST:
			case PLpgSQLParser.CURRENT_CATALOG:
			case PLpgSQLParser.CURRENT_DATE:
			case PLpgSQLParser.CURRENT_TIME:
			case PLpgSQLParser.CURRENT_TIMESTAMP:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.FALSE:
			case PLpgSQLParser.LOCALTIME:
			case PLpgSQLParser.LOCALTIMESTAMP:
			case PLpgSQLParser.NOT:
			case PLpgSQLParser.NULL:
			case PLpgSQLParser.ON:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.SOME:
			case PLpgSQLParser.TRUE:
			case PLpgSQLParser.USER:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.LEFT_PAREN:
			case PLpgSQLParser.PLUS:
			case PLpgSQLParser.MINUS:
			case PLpgSQLParser.MULTIPLY:
			case PLpgSQLParser.LESS_LESS:
			case PLpgSQLParser.GREATER_GREATER:
			case PLpgSQLParser.HASH_SIGN:
			case PLpgSQLParser.OP_CHARS:
			case PLpgSQLParser.NUMBER_LITERAL:
			case PLpgSQLParser.REAL_NUMBER:
			case PLpgSQLParser.DOLLAR_NUMBER:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
			case PLpgSQLParser.Character_String_Literal:
			case PLpgSQLParser.BeginDollarStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3413;
				this.vex(0);
				this.state = 3418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3414;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3415;
					this.vex(0);
					}
					}
					this.state = 3420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case PLpgSQLParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3421;
				this.match(PLpgSQLParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_rewrite_statement(): Create_rewrite_statementContext {
		let _localctx: Create_rewrite_statementContext = new Create_rewrite_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, PLpgSQLParser.RULE_create_rewrite_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OR) {
				{
				this.state = 3424;
				this.match(PLpgSQLParser.OR);
				this.state = 3425;
				this.match(PLpgSQLParser.REPLACE);
				}
			}

			this.state = 3428;
			this.match(PLpgSQLParser.RULE);
			this.state = 3429;
			_localctx._name = this.identifier();
			this.state = 3430;
			this.match(PLpgSQLParser.AS);
			this.state = 3431;
			this.match(PLpgSQLParser.ON);
			this.state = 3432;
			_localctx._event = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.DELETE || _la === PLpgSQLParser.INSERT || _la === PLpgSQLParser.UPDATE || _la === PLpgSQLParser.SELECT)) {
				_localctx._event = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3433;
			this.match(PLpgSQLParser.TO);
			this.state = 3434;
			_localctx._table_name = this.schema_qualified_name();
			this.state = 3437;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHERE) {
				{
				this.state = 3435;
				this.match(PLpgSQLParser.WHERE);
				this.state = 3436;
				this.vex(0);
				}
			}

			this.state = 3439;
			this.match(PLpgSQLParser.DO);
			this.state = 3441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ALSO || _la === PLpgSQLParser.INSTEAD) {
				{
				this.state = 3440;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ALSO || _la === PLpgSQLParser.INSTEAD)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3460;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
			case 1:
				{
				this.state = 3443;
				this.match(PLpgSQLParser.NOTHING);
				}
				break;

			case 2:
				{
				this.state = 3444;
				this.rewrite_command();
				}
				break;

			case 3:
				{
				{
				this.state = 3445;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 3451;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3446;
						this.rewrite_command();
						this.state = 3447;
						this.match(PLpgSQLParser.SEMI_COLON);
						}
						}
					}
					this.state = 3453;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
				}
				this.state = 3454;
				this.rewrite_command();
				this.state = 3456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.SEMI_COLON) {
					{
					this.state = 3455;
					this.match(PLpgSQLParser.SEMI_COLON);
					}
				}

				this.state = 3458;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewrite_command(): Rewrite_commandContext {
		let _localctx: Rewrite_commandContext = new Rewrite_commandContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, PLpgSQLParser.RULE_rewrite_command);
		try {
			this.state = 3467;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3462;
				this.select_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3463;
				this.insert_stmt_for_psql();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3464;
				this.update_stmt_for_psql();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3465;
				this.delete_stmt_for_psql();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3466;
				this.notify_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_trigger_statement(): Create_trigger_statementContext {
		let _localctx: Create_trigger_statementContext = new Create_trigger_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, PLpgSQLParser.RULE_create_trigger_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CONSTRAINT) {
				{
				this.state = 3469;
				this.match(PLpgSQLParser.CONSTRAINT);
				}
			}

			this.state = 3472;
			this.match(PLpgSQLParser.TRIGGER);
			this.state = 3473;
			_localctx._name = this.identifier();
			this.state = 3478;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.BEFORE:
				{
				this.state = 3474;
				_localctx._before_true = this.match(PLpgSQLParser.BEFORE);
				}
				break;
			case PLpgSQLParser.INSTEAD:
				{
				{
				this.state = 3475;
				this.match(PLpgSQLParser.INSTEAD);
				this.state = 3476;
				this.match(PLpgSQLParser.OF);
				}
				}
				break;
			case PLpgSQLParser.AFTER:
				{
				this.state = 3477;
				this.match(PLpgSQLParser.AFTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3495;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3490;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.TRUNCATE:
					{
					this.state = 3483;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.INSERT:
						{
						this.state = 3480;
						_localctx._insert_true = this.match(PLpgSQLParser.INSERT);
						}
						break;
					case PLpgSQLParser.DELETE:
						{
						this.state = 3481;
						_localctx._delete_true = this.match(PLpgSQLParser.DELETE);
						}
						break;
					case PLpgSQLParser.TRUNCATE:
						{
						this.state = 3482;
						_localctx._truncate_true = this.match(PLpgSQLParser.TRUNCATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PLpgSQLParser.UPDATE:
					{
					this.state = 3485;
					_localctx._update_true = this.match(PLpgSQLParser.UPDATE);
					this.state = 3488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.OF) {
						{
						this.state = 3486;
						this.match(PLpgSQLParser.OF);
						this.state = 3487;
						this.identifier_list();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.OR) {
					{
					this.state = 3492;
					this.match(PLpgSQLParser.OR);
					}
				}

				}
				}
				this.state = 3497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PLpgSQLParser.DELETE || _la === PLpgSQLParser.INSERT || _la === PLpgSQLParser.TRUNCATE || _la === PLpgSQLParser.UPDATE);
			this.state = 3499;
			this.match(PLpgSQLParser.ON);
			this.state = 3500;
			_localctx._table_name = this.schema_qualified_name();
			this.state = 3503;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FROM) {
				{
				this.state = 3501;
				this.match(PLpgSQLParser.FROM);
				this.state = 3502;
				_localctx._referenced_table_name = this.schema_qualified_name();
				}
			}

			this.state = 3506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DEFERRABLE || _la === PLpgSQLParser.NOT) {
				{
				this.state = 3505;
				this.table_deferrable();
				}
			}

			this.state = 3509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INITIALLY) {
				{
				this.state = 3508;
				this.table_initialy_immed();
				}
			}

			this.state = 3516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.REFERENCING) {
				{
				this.state = 3511;
				this.match(PLpgSQLParser.REFERENCING);
				this.state = 3512;
				this.trigger_referencing();
				this.state = 3514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NEW || _la === PLpgSQLParser.OLD) {
					{
					this.state = 3513;
					this.trigger_referencing();
					}
				}

				}
			}

			this.state = 3523;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FOR) {
				{
				this.state = 3518;
				_localctx._for_each_true = this.match(PLpgSQLParser.FOR);
				this.state = 3520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.EACH) {
					{
					this.state = 3519;
					this.match(PLpgSQLParser.EACH);
					}
				}

				this.state = 3522;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.STATEMENT || _la === PLpgSQLParser.ROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3526;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHEN) {
				{
				this.state = 3525;
				this.when_trigger();
				}
			}

			this.state = 3528;
			this.match(PLpgSQLParser.EXECUTE);
			this.state = 3529;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3530;
			_localctx._func_name = this.function_call();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public trigger_referencing(): Trigger_referencingContext {
		let _localctx: Trigger_referencingContext = new Trigger_referencingContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, PLpgSQLParser.RULE_trigger_referencing);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3532;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.NEW || _la === PLpgSQLParser.OLD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3533;
			this.match(PLpgSQLParser.TABLE);
			this.state = 3535;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.AS) {
				{
				this.state = 3534;
				this.match(PLpgSQLParser.AS);
				}
			}

			this.state = 3537;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public when_trigger(): When_triggerContext {
		let _localctx: When_triggerContext = new When_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, PLpgSQLParser.RULE_when_trigger);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3539;
			this.match(PLpgSQLParser.WHEN);
			this.state = 3540;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3541;
			this.vex(0);
			this.state = 3542;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rule_common(): Rule_commonContext {
		let _localctx: Rule_commonContext = new Rule_commonContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, PLpgSQLParser.RULE_rule_common);
		let _la: number;
		try {
			this.state = 3566;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3549;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.GRANT:
					{
					this.state = 3544;
					this.match(PLpgSQLParser.GRANT);
					}
					break;
				case PLpgSQLParser.REVOKE:
					{
					this.state = 3545;
					this.match(PLpgSQLParser.REVOKE);
					this.state = 3547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.GRANT) {
						{
						this.state = 3546;
						this.grant_option_for();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3553;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
				case 1:
					{
					this.state = 3551;
					this.permissions();
					}
					break;

				case 2:
					{
					this.state = 3552;
					this.columns_permissions();
					}
					break;
				}
				this.state = 3555;
				this.match(PLpgSQLParser.ON);
				this.state = 3556;
				this.rule_member_object();
				this.state = 3557;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.TO)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3558;
				this.roles_names();
				this.state = 3563;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.WITH:
					{
					this.state = 3559;
					this.match(PLpgSQLParser.WITH);
					this.state = 3560;
					this.match(PLpgSQLParser.GRANT);
					this.state = 3561;
					this.match(PLpgSQLParser.OPTION);
					}
					break;
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.RESTRICT:
					{
					this.state = 3562;
					this.cascade_restrict();
					}
					break;
				case PLpgSQLParser.EOF:
				case PLpgSQLParser.SEMI_COLON:
					break;
				default:
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3565;
				this.other_rules();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rule_member_object(): Rule_member_objectContext {
		let _localctx: Rule_member_objectContext = new Rule_member_objectContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, PLpgSQLParser.RULE_rule_member_object);
		let _la: number;
		try {
			this.state = 3617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 402, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.TABLE) {
					{
					this.state = 3568;
					this.match(PLpgSQLParser.TABLE);
					}
				}

				this.state = 3571;
				_localctx._table_names = this.names_references();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3572;
				this.match(PLpgSQLParser.SEQUENCE);
				this.state = 3573;
				this.names_references();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3574;
				this.match(PLpgSQLParser.DATABASE);
				this.state = 3575;
				this.names_references();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3576;
				this.match(PLpgSQLParser.DOMAIN);
				this.state = 3577;
				this.names_references();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3578;
				this.match(PLpgSQLParser.FOREIGN);
				this.state = 3579;
				this.match(PLpgSQLParser.DATA);
				this.state = 3580;
				this.match(PLpgSQLParser.WRAPPER);
				this.state = 3581;
				this.names_references();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3582;
				this.match(PLpgSQLParser.FOREIGN);
				this.state = 3583;
				this.match(PLpgSQLParser.SERVER);
				this.state = 3584;
				this.names_references();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3585;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE || _la === PLpgSQLParser.ROUTINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3586;
				_localctx._function_parameters = this.function_parameters();
				_localctx._func_name.push(_localctx._function_parameters);
				this.state = 3591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3587;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3588;
					_localctx._function_parameters = this.function_parameters();
					_localctx._func_name.push(_localctx._function_parameters);
					}
					}
					this.state = 3593;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3594;
				this.match(PLpgSQLParser.LARGE);
				this.state = 3595;
				this.match(PLpgSQLParser.OBJECT);
				this.state = 3596;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				this.state = 3601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 3597;
					this.match(PLpgSQLParser.COMMA);
					this.state = 3598;
					this.match(PLpgSQLParser.NUMBER_LITERAL);
					}
					}
					this.state = 3603;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3604;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 3605;
				this.names_references();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3606;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 3607;
				_localctx._schema_names = this.names_references();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3608;
				this.match(PLpgSQLParser.TABLESPACE);
				this.state = 3609;
				this.names_references();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3610;
				this.match(PLpgSQLParser.TYPE);
				this.state = 3611;
				this.names_references();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3612;
				this.match(PLpgSQLParser.ALL);
				this.state = 3613;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.FUNCTIONS || _la === PLpgSQLParser.PROCEDURES || _la === PLpgSQLParser.ROUTINES || _la === PLpgSQLParser.SEQUENCES || _la === PLpgSQLParser.TABLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3614;
				this.match(PLpgSQLParser.IN);
				this.state = 3615;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 3616;
				this.names_references();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columns_permissions(): Columns_permissionsContext {
		let _localctx: Columns_permissionsContext = new Columns_permissionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, PLpgSQLParser.RULE_columns_permissions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3619;
			this.table_column_privileges();
			this.state = 3624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3620;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3621;
				this.table_column_privileges();
				}
				}
				this.state = 3626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_column_privileges(): Table_column_privilegesContext {
		let _localctx: Table_column_privilegesContext = new Table_column_privilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, PLpgSQLParser.RULE_table_column_privileges);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3627;
			this.table_column_privilege();
			this.state = 3628;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3629;
			this.identifier_list();
			this.state = 3630;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public permissions(): PermissionsContext {
		let _localctx: PermissionsContext = new PermissionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, PLpgSQLParser.RULE_permissions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3632;
			this.permission();
			this.state = 3637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3633;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3634;
				this.permission();
				}
				}
				this.state = 3639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public permission(): PermissionContext {
		let _localctx: PermissionContext = new PermissionContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, PLpgSQLParser.RULE_permission);
		let _la: number;
		try {
			this.state = 3656;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3640;
				this.match(PLpgSQLParser.ALL);
				this.state = 3642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PRIVILEGES) {
					{
					this.state = 3641;
					this.match(PLpgSQLParser.PRIVILEGES);
					}
				}

				}
				break;
			case PLpgSQLParser.CONNECT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3644;
				this.match(PLpgSQLParser.CONNECT);
				}
				break;
			case PLpgSQLParser.CREATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3645;
				this.match(PLpgSQLParser.CREATE);
				}
				break;
			case PLpgSQLParser.DELETE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3646;
				this.match(PLpgSQLParser.DELETE);
				}
				break;
			case PLpgSQLParser.EXECUTE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3647;
				this.match(PLpgSQLParser.EXECUTE);
				}
				break;
			case PLpgSQLParser.INSERT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3648;
				this.match(PLpgSQLParser.INSERT);
				}
				break;
			case PLpgSQLParser.UPDATE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3649;
				this.match(PLpgSQLParser.UPDATE);
				}
				break;
			case PLpgSQLParser.REFERENCES:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3650;
				this.match(PLpgSQLParser.REFERENCES);
				}
				break;
			case PLpgSQLParser.SELECT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3651;
				this.match(PLpgSQLParser.SELECT);
				}
				break;
			case PLpgSQLParser.TEMP:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3652;
				this.match(PLpgSQLParser.TEMP);
				}
				break;
			case PLpgSQLParser.TRIGGER:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3653;
				this.match(PLpgSQLParser.TRIGGER);
				}
				break;
			case PLpgSQLParser.TRUNCATE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3654;
				this.match(PLpgSQLParser.TRUNCATE);
				}
				break;
			case PLpgSQLParser.USAGE:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3655;
				this.match(PLpgSQLParser.USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_rules(): Other_rulesContext {
		let _localctx: Other_rulesContext = new Other_rulesContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, PLpgSQLParser.RULE_other_rules);
		let _la: number;
		try {
			this.state = 3679;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.GRANT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3658;
				this.match(PLpgSQLParser.GRANT);
				this.state = 3659;
				this.names_references();
				this.state = 3660;
				this.match(PLpgSQLParser.TO);
				this.state = 3661;
				this.names_references();
				this.state = 3665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 3662;
					this.match(PLpgSQLParser.WITH);
					this.state = 3663;
					this.match(PLpgSQLParser.ADMIN);
					this.state = 3664;
					this.match(PLpgSQLParser.OPTION);
					}
				}

				}
				break;
			case PLpgSQLParser.REVOKE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3667;
				this.match(PLpgSQLParser.REVOKE);
				this.state = 3671;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
				case 1:
					{
					this.state = 3668;
					this.match(PLpgSQLParser.ADMIN);
					this.state = 3669;
					this.match(PLpgSQLParser.OPTION);
					this.state = 3670;
					this.match(PLpgSQLParser.FOR);
					}
					break;
				}
				this.state = 3673;
				this.names_references();
				this.state = 3674;
				this.match(PLpgSQLParser.FROM);
				this.state = 3675;
				this.names_references();
				this.state = 3677;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
					{
					this.state = 3676;
					this.cascade_restrict();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant_to_rule(): Grant_to_ruleContext {
		let _localctx: Grant_to_ruleContext = new Grant_to_ruleContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, PLpgSQLParser.RULE_grant_to_rule);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3681;
			this.match(PLpgSQLParser.TO);
			this.state = 3682;
			this.roles_names();
			this.state = 3686;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 3683;
				this.match(PLpgSQLParser.WITH);
				this.state = 3684;
				this.match(PLpgSQLParser.GRANT);
				this.state = 3685;
				this.match(PLpgSQLParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revoke_from_cascade_restrict(): Revoke_from_cascade_restrictContext {
		let _localctx: Revoke_from_cascade_restrictContext = new Revoke_from_cascade_restrictContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, PLpgSQLParser.RULE_revoke_from_cascade_restrict);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3688;
			this.match(PLpgSQLParser.FROM);
			this.state = 3689;
			this.roles_names();
			this.state = 3691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 3690;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roles_names(): Roles_namesContext {
		let _localctx: Roles_namesContext = new Roles_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, PLpgSQLParser.RULE_roles_names);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3693;
			this.role_name_with_group();
			this.state = 3698;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3694;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3695;
				this.role_name_with_group();
				}
				}
				this.state = 3700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public role_name_with_group(): Role_name_with_groupContext {
		let _localctx: Role_name_with_groupContext = new Role_name_with_groupContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, PLpgSQLParser.RULE_role_name_with_group);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3702;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.GROUP) {
				{
				this.state = 3701;
				this.match(PLpgSQLParser.GROUP);
				}
			}

			this.state = 3704;
			this.user_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_on_statement(): Comment_on_statementContext {
		let _localctx: Comment_on_statementContext = new Comment_on_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, PLpgSQLParser.RULE_comment_on_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3706;
			this.match(PLpgSQLParser.COMMENT);
			this.state = 3707;
			this.match(PLpgSQLParser.ON);
			this.state = 3708;
			this.comment_member_object();
			this.state = 3709;
			this.match(PLpgSQLParser.IS);
			this.state = 3712;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.Character_String_Literal:
			case PLpgSQLParser.BeginDollarStringConstant:
				{
				this.state = 3710;
				this.character_string();
				}
				break;
			case PLpgSQLParser.NULL:
				{
				this.state = 3711;
				this.match(PLpgSQLParser.NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security_label(): Security_labelContext {
		let _localctx: Security_labelContext = new Security_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, PLpgSQLParser.RULE_security_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3714;
			this.match(PLpgSQLParser.SECURITY);
			this.state = 3715;
			this.match(PLpgSQLParser.LABEL);
			this.state = 3721;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FOR) {
				{
				this.state = 3716;
				this.match(PLpgSQLParser.FOR);
				this.state = 3719;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 3717;
					this.identifier();
					}
					break;
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 3718;
					this.character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 3723;
			this.match(PLpgSQLParser.ON);
			this.state = 3724;
			this.label_member_object();
			this.state = 3725;
			this.match(PLpgSQLParser.IS);
			this.state = 3728;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.Character_String_Literal:
			case PLpgSQLParser.BeginDollarStringConstant:
				{
				this.state = 3726;
				this.character_string();
				}
				break;
			case PLpgSQLParser.NULL:
				{
				this.state = 3727;
				this.match(PLpgSQLParser.NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_member_object(): Comment_member_objectContext {
		let _localctx: Comment_member_objectContext = new Comment_member_objectContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, PLpgSQLParser.RULE_comment_member_object);
		let _la: number;
		try {
			this.state = 3854;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3730;
				this.match(PLpgSQLParser.ACCESS);
				this.state = 3731;
				this.match(PLpgSQLParser.METHOD);
				this.state = 3732;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3733;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.AGGREGATE || _la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE || _la === PLpgSQLParser.ROUTINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3734;
				_localctx._name = this.schema_qualified_name();
				this.state = 3735;
				this.function_args();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3737;
				this.match(PLpgSQLParser.CAST);
				this.state = 3738;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 3739;
				_localctx._source = this.data_type();
				this.state = 3740;
				this.match(PLpgSQLParser.AS);
				this.state = 3741;
				_localctx._target = this.data_type();
				this.state = 3742;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3744;
				this.match(PLpgSQLParser.COLLATION);
				this.state = 3745;
				this.identifier();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3746;
				this.match(PLpgSQLParser.COLUMN);
				this.state = 3747;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3748;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 3749;
				this.identifier();
				this.state = 3750;
				this.match(PLpgSQLParser.ON);
				this.state = 3752;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
				case 1:
					{
					this.state = 3751;
					this.match(PLpgSQLParser.DOMAIN);
					}
					break;
				}
				this.state = 3754;
				_localctx._table_name = this.schema_qualified_name();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3756;
				this.match(PLpgSQLParser.CONVERSION);
				this.state = 3757;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3758;
				this.match(PLpgSQLParser.DATABASE);
				this.state = 3759;
				this.identifier();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3760;
				this.match(PLpgSQLParser.DOMAIN);
				this.state = 3761;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3762;
				this.match(PLpgSQLParser.EXTENSION);
				this.state = 3763;
				this.identifier();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3764;
				this.match(PLpgSQLParser.EVENT);
				this.state = 3765;
				this.match(PLpgSQLParser.TRIGGER);
				this.state = 3766;
				this.identifier();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3767;
				this.match(PLpgSQLParser.FOREIGN);
				this.state = 3768;
				this.match(PLpgSQLParser.DATA);
				this.state = 3769;
				this.match(PLpgSQLParser.WRAPPER);
				this.state = 3770;
				this.identifier();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOREIGN) {
					{
					this.state = 3771;
					this.match(PLpgSQLParser.FOREIGN);
					}
				}

				this.state = 3774;
				this.match(PLpgSQLParser.TABLE);
				this.state = 3775;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3776;
				this.match(PLpgSQLParser.INDEX);
				this.state = 3777;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3778;
				this.match(PLpgSQLParser.LARGE);
				this.state = 3779;
				this.match(PLpgSQLParser.OBJECT);
				this.state = 3780;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.MATERIALIZED) {
					{
					this.state = 3781;
					this.match(PLpgSQLParser.MATERIALIZED);
					}
				}

				this.state = 3784;
				this.match(PLpgSQLParser.VIEW);
				this.state = 3785;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3786;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 3787;
				this.target_operator();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3788;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 3789;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CLASS || _la === PLpgSQLParser.FAMILY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3790;
				_localctx._name = this.schema_qualified_name();
				this.state = 3791;
				this.match(PLpgSQLParser.USING);
				this.state = 3792;
				_localctx._index_method = this.identifier();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3794;
				this.match(PLpgSQLParser.POLICY);
				this.state = 3795;
				this.identifier();
				this.state = 3796;
				this.match(PLpgSQLParser.ON);
				this.state = 3797;
				_localctx._table_name = this.schema_qualified_name();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PROCEDURAL) {
					{
					this.state = 3799;
					this.match(PLpgSQLParser.PROCEDURAL);
					}
				}

				this.state = 3802;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 3803;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3804;
				this.match(PLpgSQLParser.PUBLICATION);
				this.state = 3805;
				this.identifier();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3806;
				this.match(PLpgSQLParser.ROLE);
				this.state = 3807;
				this.identifier();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 3808;
				this.match(PLpgSQLParser.RULE);
				this.state = 3809;
				this.identifier();
				this.state = 3810;
				this.match(PLpgSQLParser.ON);
				this.state = 3811;
				_localctx._table_name = this.schema_qualified_name();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 3813;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 3814;
				this.identifier();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 3815;
				this.match(PLpgSQLParser.SEQUENCE);
				this.state = 3816;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 3817;
				this.match(PLpgSQLParser.SERVER);
				this.state = 3818;
				this.identifier();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 3819;
				this.match(PLpgSQLParser.STATISTICS);
				this.state = 3820;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 3821;
				this.match(PLpgSQLParser.SUBSCRIPTION);
				this.state = 3822;
				this.identifier();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 3823;
				this.match(PLpgSQLParser.TABLESPACE);
				this.state = 3824;
				this.identifier();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 3825;
				this.match(PLpgSQLParser.TEXT);
				this.state = 3826;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 3827;
				this.match(PLpgSQLParser.CONFIGURATION);
				this.state = 3828;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 3829;
				this.match(PLpgSQLParser.TEXT);
				this.state = 3830;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 3831;
				this.match(PLpgSQLParser.DICTIONARY);
				this.state = 3832;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 3833;
				this.match(PLpgSQLParser.TEXT);
				this.state = 3834;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 3835;
				this.match(PLpgSQLParser.PARSER);
				this.state = 3836;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 3837;
				this.match(PLpgSQLParser.TEXT);
				this.state = 3838;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 3839;
				this.match(PLpgSQLParser.TEMPLATE);
				this.state = 3840;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 3841;
				this.match(PLpgSQLParser.TRANSFORM);
				this.state = 3842;
				this.match(PLpgSQLParser.FOR);
				this.state = 3843;
				_localctx._name = this.schema_qualified_name();
				this.state = 3844;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 3845;
				this.identifier();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 3847;
				this.match(PLpgSQLParser.TRIGGER);
				this.state = 3848;
				this.identifier();
				this.state = 3849;
				this.match(PLpgSQLParser.ON);
				this.state = 3850;
				_localctx._table_name = this.schema_qualified_name();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 3852;
				this.match(PLpgSQLParser.TYPE);
				this.state = 3853;
				_localctx._name = this.schema_qualified_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label_member_object(): Label_member_objectContext {
		let _localctx: Label_member_objectContext = new Label_member_objectContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, PLpgSQLParser.RULE_label_member_object);
		let _la: number;
		try {
			this.state = 3901;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.ROUTINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3856;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.AGGREGATE || _la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE || _la === PLpgSQLParser.ROUTINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3857;
				this.schema_qualified_name();
				this.state = 3858;
				this.function_args();
				}
				break;
			case PLpgSQLParser.COLUMN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3860;
				this.match(PLpgSQLParser.COLUMN);
				this.state = 3861;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.DATABASE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3862;
				this.match(PLpgSQLParser.DATABASE);
				this.state = 3863;
				this.identifier();
				}
				break;
			case PLpgSQLParser.DOMAIN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3864;
				this.match(PLpgSQLParser.DOMAIN);
				this.state = 3865;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.EVENT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3866;
				this.match(PLpgSQLParser.EVENT);
				this.state = 3867;
				this.match(PLpgSQLParser.TRIGGER);
				this.state = 3868;
				this.identifier();
				}
				break;
			case PLpgSQLParser.FOREIGN:
			case PLpgSQLParser.TABLE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOREIGN) {
					{
					this.state = 3869;
					this.match(PLpgSQLParser.FOREIGN);
					}
				}

				this.state = 3872;
				this.match(PLpgSQLParser.TABLE);
				this.state = 3873;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.LARGE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3874;
				this.match(PLpgSQLParser.LARGE);
				this.state = 3875;
				this.match(PLpgSQLParser.OBJECT);
				this.state = 3876;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
				break;
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.VIEW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.MATERIALIZED) {
					{
					this.state = 3877;
					this.match(PLpgSQLParser.MATERIALIZED);
					}
				}

				this.state = 3880;
				this.match(PLpgSQLParser.VIEW);
				this.state = 3881;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.PROCEDURAL:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3883;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PROCEDURAL) {
					{
					this.state = 3882;
					this.match(PLpgSQLParser.PROCEDURAL);
					}
				}

				this.state = 3885;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 3886;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.PUBLICATION:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3887;
				this.match(PLpgSQLParser.PUBLICATION);
				this.state = 3888;
				this.identifier();
				}
				break;
			case PLpgSQLParser.ROLE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3889;
				this.match(PLpgSQLParser.ROLE);
				this.state = 3890;
				this.identifier();
				}
				break;
			case PLpgSQLParser.SCHEMA:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3891;
				this.match(PLpgSQLParser.SCHEMA);
				this.state = 3892;
				this.identifier();
				}
				break;
			case PLpgSQLParser.SEQUENCE:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3893;
				this.match(PLpgSQLParser.SEQUENCE);
				this.state = 3894;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.SUBSCRIPTION:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3895;
				this.match(PLpgSQLParser.SUBSCRIPTION);
				this.state = 3896;
				this.identifier();
				}
				break;
			case PLpgSQLParser.TABLESPACE:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3897;
				this.match(PLpgSQLParser.TABLESPACE);
				this.state = 3898;
				this.identifier();
				}
				break;
			case PLpgSQLParser.TYPE:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3899;
				this.match(PLpgSQLParser.TYPE);
				this.state = 3900;
				this.schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_function_statement(): Create_function_statementContext {
		let _localctx: Create_function_statementContext = new Create_function_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, PLpgSQLParser.RULE_create_function_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OR) {
				{
				this.state = 3903;
				this.match(PLpgSQLParser.OR);
				this.state = 3904;
				this.match(PLpgSQLParser.REPLACE);
				}
			}

			this.state = 3907;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3908;
			this.function_parameters();
			this.state = 3914;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 430, this._ctx) ) {
			case 1:
				{
				this.state = 3909;
				this.match(PLpgSQLParser.RETURNS);
				this.state = 3912;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.AUTHORIZATION:
				case PLpgSQLParser.BINARY:
				case PLpgSQLParser.COLLATION:
				case PLpgSQLParser.CONCURRENTLY:
				case PLpgSQLParser.CROSS:
				case PLpgSQLParser.CURRENT_SCHEMA:
				case PLpgSQLParser.FREEZE:
				case PLpgSQLParser.FULL:
				case PLpgSQLParser.ILIKE:
				case PLpgSQLParser.INNER:
				case PLpgSQLParser.IS:
				case PLpgSQLParser.ISNULL:
				case PLpgSQLParser.JOIN:
				case PLpgSQLParser.LEFT:
				case PLpgSQLParser.LIKE:
				case PLpgSQLParser.NATURAL:
				case PLpgSQLParser.NOTNULL:
				case PLpgSQLParser.OUTER:
				case PLpgSQLParser.OVERLAPS:
				case PLpgSQLParser.RIGHT:
				case PLpgSQLParser.SIMILAR:
				case PLpgSQLParser.TABLESAMPLE:
				case PLpgSQLParser.VERBOSE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 3910;
					_localctx._rettype_data = this.data_type();
					}
					break;
				case PLpgSQLParser.TABLE:
					{
					this.state = 3911;
					_localctx._ret_table = this.function_ret_table();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 3916;
			this.create_funct_params();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_funct_params(): Create_funct_paramsContext {
		let _localctx: Create_funct_paramsContext = new Create_funct_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, PLpgSQLParser.RULE_create_funct_params);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3919;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3918;
				this.function_actions_common();
				}
				}
				this.state = 3921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PLpgSQLParser.CALLED || _la === PLpgSQLParser.COST || _la === PLpgSQLParser.EXTERNAL || _la === PLpgSQLParser.IMMUTABLE || _la === PLpgSQLParser.LANGUAGE || _la === PLpgSQLParser.LEAKPROOF || _la === PLpgSQLParser.PARALLEL || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (PLpgSQLParser.RETURNS - 207)) | (1 << (PLpgSQLParser.ROWS - 207)) | (1 << (PLpgSQLParser.SECURITY - 207)) | (1 << (PLpgSQLParser.SET - 207)) | (1 << (PLpgSQLParser.STABLE - 207)))) !== 0) || ((((_la - 245)) & ~0x1F) === 0 && ((1 << (_la - 245)) & ((1 << (PLpgSQLParser.STRICT - 245)) | (1 << (PLpgSQLParser.SUPPORT - 245)) | (1 << (PLpgSQLParser.TRANSFORM - 245)))) !== 0) || _la === PLpgSQLParser.VOLATILE || _la === PLpgSQLParser.AS || _la === PLpgSQLParser.NOT || _la === PLpgSQLParser.WINDOW);
			this.state = 3924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 3923;
				this.with_storage_parameter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transform_for_type(): Transform_for_typeContext {
		let _localctx: Transform_for_typeContext = new Transform_for_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, PLpgSQLParser.RULE_transform_for_type);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3926;
			this.match(PLpgSQLParser.FOR);
			this.state = 3927;
			this.match(PLpgSQLParser.TYPE);
			this.state = 3928;
			this.data_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_ret_table(): Function_ret_tableContext {
		let _localctx: Function_ret_tableContext = new Function_ret_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, PLpgSQLParser.RULE_function_ret_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3930;
			this.match(PLpgSQLParser.TABLE);
			this.state = 3931;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3932;
			this.function_column_name_type();
			this.state = 3937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3933;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3934;
				this.function_column_name_type();
				}
				}
				this.state = 3939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3940;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_column_name_type(): Function_column_name_typeContext {
		let _localctx: Function_column_name_typeContext = new Function_column_name_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, PLpgSQLParser.RULE_function_column_name_type);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3942;
			this.identifier();
			this.state = 3943;
			this.data_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_parameters(): Function_parametersContext {
		let _localctx: Function_parametersContext = new Function_parametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, PLpgSQLParser.RULE_function_parameters);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3945;
			this.schema_qualified_name();
			this.state = 3946;
			this.function_args();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_args(): Function_argsContext {
		let _localctx: Function_argsContext = new Function_argsContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, PLpgSQLParser.RULE_function_args);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3948;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 3963;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.AUTHORIZATION:
			case PLpgSQLParser.BINARY:
			case PLpgSQLParser.COLLATION:
			case PLpgSQLParser.CONCURRENTLY:
			case PLpgSQLParser.CROSS:
			case PLpgSQLParser.CURRENT_SCHEMA:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.ILIKE:
			case PLpgSQLParser.INNER:
			case PLpgSQLParser.IS:
			case PLpgSQLParser.ISNULL:
			case PLpgSQLParser.JOIN:
			case PLpgSQLParser.LEFT:
			case PLpgSQLParser.LIKE:
			case PLpgSQLParser.NATURAL:
			case PLpgSQLParser.NOTNULL:
			case PLpgSQLParser.OUTER:
			case PLpgSQLParser.OVERLAPS:
			case PLpgSQLParser.RIGHT:
			case PLpgSQLParser.SIMILAR:
			case PLpgSQLParser.TABLESAMPLE:
			case PLpgSQLParser.VERBOSE:
			case PLpgSQLParser.IN:
			case PLpgSQLParser.ORDER:
			case PLpgSQLParser.VARIADIC:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.RIGHT_PAREN:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 3957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)))) !== 0) || _la === PLpgSQLParser.IN || ((((_la - 438)) & ~0x1F) === 0 && ((1 << (_la - 438)) & ((1 << (PLpgSQLParser.VARIADIC - 438)) | (1 << (PLpgSQLParser.ALIGNMENT - 438)) | (1 << (PLpgSQLParser.BASETYPE - 438)) | (1 << (PLpgSQLParser.BUFFERS - 438)) | (1 << (PLpgSQLParser.BYPASSRLS - 438)) | (1 << (PLpgSQLParser.CANONICAL - 438)) | (1 << (PLpgSQLParser.CATEGORY - 438)) | (1 << (PLpgSQLParser.COLLATABLE - 438)) | (1 << (PLpgSQLParser.COMBINEFUNC - 438)) | (1 << (PLpgSQLParser.COMMUTATOR - 438)) | (1 << (PLpgSQLParser.CONNECT - 438)) | (1 << (PLpgSQLParser.COSTS - 438)) | (1 << (PLpgSQLParser.CREATEDB - 438)) | (1 << (PLpgSQLParser.CREATEROLE - 438)) | (1 << (PLpgSQLParser.DESERIALFUNC - 438)) | (1 << (PLpgSQLParser.DETERMINISTIC - 438)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 438)) | (1 << (PLpgSQLParser.ELEMENT - 438)) | (1 << (PLpgSQLParser.EXTENDED - 438)) | (1 << (PLpgSQLParser.FINALFUNC - 438)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 438)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 438)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 438)) | (1 << (PLpgSQLParser.FORCE_NULL - 438)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 438)) | (1 << (PLpgSQLParser.FORMAT - 438)) | (1 << (PLpgSQLParser.GETTOKEN - 438)) | (1 << (PLpgSQLParser.HASH - 438)))) !== 0) || ((((_la - 470)) & ~0x1F) === 0 && ((1 << (_la - 470)) & ((1 << (PLpgSQLParser.HASHES - 470)) | (1 << (PLpgSQLParser.HEADLINE - 470)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 470)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 470)) | (1 << (PLpgSQLParser.INIT - 470)) | (1 << (PLpgSQLParser.INITCOND - 470)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 470)) | (1 << (PLpgSQLParser.JSON - 470)) | (1 << (PLpgSQLParser.LC_COLLATE - 470)) | (1 << (PLpgSQLParser.LC_CTYPE - 470)) | (1 << (PLpgSQLParser.LEFTARG - 470)) | (1 << (PLpgSQLParser.LEXIZE - 470)) | (1 << (PLpgSQLParser.LEXTYPES - 470)) | (1 << (PLpgSQLParser.LIST - 470)) | (1 << (PLpgSQLParser.LOCALE - 470)) | (1 << (PLpgSQLParser.LOGIN - 470)) | (1 << (PLpgSQLParser.MAIN - 470)) | (1 << (PLpgSQLParser.MERGES - 470)) | (1 << (PLpgSQLParser.MFINALFUNC - 470)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 470)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 470)) | (1 << (PLpgSQLParser.MINITCOND - 470)) | (1 << (PLpgSQLParser.MINVFUNC - 470)) | (1 << (PLpgSQLParser.MODULUS - 470)) | (1 << (PLpgSQLParser.MSFUNC - 470)) | (1 << (PLpgSQLParser.MSSPACE - 470)) | (1 << (PLpgSQLParser.MSTYPE - 470)) | (1 << (PLpgSQLParser.NEGATOR - 470)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 470)) | (1 << (PLpgSQLParser.NOCREATEDB - 470)) | (1 << (PLpgSQLParser.NOCREATEROLE - 470)) | (1 << (PLpgSQLParser.NOINHERIT - 470)))) !== 0) || ((((_la - 502)) & ~0x1F) === 0 && ((1 << (_la - 502)) & ((1 << (PLpgSQLParser.NOLOGIN - 502)) | (1 << (PLpgSQLParser.NOREPLICATION - 502)) | (1 << (PLpgSQLParser.NOSUPERUSER - 502)) | (1 << (PLpgSQLParser.OUTPUT - 502)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 502)) | (1 << (PLpgSQLParser.PATH - 502)) | (1 << (PLpgSQLParser.PERMISSIVE - 502)) | (1 << (PLpgSQLParser.PLAIN - 502)) | (1 << (PLpgSQLParser.PREFERRED - 502)) | (1 << (PLpgSQLParser.PROVIDER - 502)) | (1 << (PLpgSQLParser.READ_ONLY - 502)) | (1 << (PLpgSQLParser.READ_WRITE - 502)) | (1 << (PLpgSQLParser.RECEIVE - 502)) | (1 << (PLpgSQLParser.REMAINDER - 502)) | (1 << (PLpgSQLParser.REPLICATION - 502)) | (1 << (PLpgSQLParser.RESTRICTED - 502)) | (1 << (PLpgSQLParser.RESTRICTIVE - 502)) | (1 << (PLpgSQLParser.RIGHTARG - 502)) | (1 << (PLpgSQLParser.SAFE - 502)) | (1 << (PLpgSQLParser.SEND - 502)) | (1 << (PLpgSQLParser.SERIALFUNC - 502)) | (1 << (PLpgSQLParser.SETTINGS - 502)) | (1 << (PLpgSQLParser.SFUNC - 502)) | (1 << (PLpgSQLParser.SHAREABLE - 502)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 502)) | (1 << (PLpgSQLParser.SORTOP - 502)) | (1 << (PLpgSQLParser.SSPACE - 502)) | (1 << (PLpgSQLParser.STYPE - 502)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 502)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 502)) | (1 << (PLpgSQLParser.SUBTYPE - 502)) | (1 << (PLpgSQLParser.SUMMARY - 502)))) !== 0) || ((((_la - 534)) & ~0x1F) === 0 && ((1 << (_la - 534)) & ((1 << (PLpgSQLParser.SUPERUSER - 534)) | (1 << (PLpgSQLParser.TIMING - 534)) | (1 << (PLpgSQLParser.TYPMOD_IN - 534)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 534)) | (1 << (PLpgSQLParser.UNSAFE - 534)) | (1 << (PLpgSQLParser.USAGE - 534)) | (1 << (PLpgSQLParser.VARIABLE - 534)) | (1 << (PLpgSQLParser.YAML - 534)) | (1 << (PLpgSQLParser.ALIAS - 534)) | (1 << (PLpgSQLParser.ASSERT - 534)) | (1 << (PLpgSQLParser.CONSTANT - 534)) | (1 << (PLpgSQLParser.DATATYPE - 534)) | (1 << (PLpgSQLParser.DEBUG - 534)) | (1 << (PLpgSQLParser.DETAIL - 534)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 534)) | (1 << (PLpgSQLParser.ELSEIF - 534)) | (1 << (PLpgSQLParser.ELSIF - 534)) | (1 << (PLpgSQLParser.ERRCODE - 534)) | (1 << (PLpgSQLParser.EXIT - 534)) | (1 << (PLpgSQLParser.EXCEPTION - 534)) | (1 << (PLpgSQLParser.FOREACH - 534)) | (1 << (PLpgSQLParser.GET - 534)) | (1 << (PLpgSQLParser.HINT - 534)) | (1 << (PLpgSQLParser.INFO - 534)) | (1 << (PLpgSQLParser.LOG - 534)) | (1 << (PLpgSQLParser.LOOP - 534)) | (1 << (PLpgSQLParser.MESSAGE - 534)) | (1 << (PLpgSQLParser.NOTICE - 534)) | (1 << (PLpgSQLParser.OPEN - 534)) | (1 << (PLpgSQLParser.PERFORM - 534)) | (1 << (PLpgSQLParser.QUERY - 534)) | (1 << (PLpgSQLParser.RAISE - 534)))) !== 0) || ((((_la - 566)) & ~0x1F) === 0 && ((1 << (_la - 566)) & ((1 << (PLpgSQLParser.RECORD - 566)) | (1 << (PLpgSQLParser.RETURN - 566)) | (1 << (PLpgSQLParser.REVERSE - 566)) | (1 << (PLpgSQLParser.ROWTYPE - 566)) | (1 << (PLpgSQLParser.SLICE - 566)) | (1 << (PLpgSQLParser.SQLSTATE - 566)) | (1 << (PLpgSQLParser.STACKED - 566)) | (1 << (PLpgSQLParser.WARNING - 566)) | (1 << (PLpgSQLParser.WHILE - 566)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
					{
					this.state = 3949;
					this.function_arguments();
					this.state = 3954;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 3950;
						this.match(PLpgSQLParser.COMMA);
						this.state = 3951;
						this.function_arguments();
						}
						}
						this.state = 3956;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ORDER) {
					{
					this.state = 3959;
					this.agg_order();
					}
				}

				}
				break;
			case PLpgSQLParser.MULTIPLY:
				{
				this.state = 3962;
				this.match(PLpgSQLParser.MULTIPLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3965;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public agg_order(): Agg_orderContext {
		let _localctx: Agg_orderContext = new Agg_orderContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, PLpgSQLParser.RULE_agg_order);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3967;
			this.match(PLpgSQLParser.ORDER);
			this.state = 3968;
			this.match(PLpgSQLParser.BY);
			this.state = 3969;
			this.function_arguments();
			this.state = 3974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 3970;
				this.match(PLpgSQLParser.COMMA);
				this.state = 3971;
				this.function_arguments();
				}
				}
				this.state = 3976;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, PLpgSQLParser.RULE_character_string);
		let _la: number;
		try {
			this.state = 3986;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.BeginDollarStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3977;
				this.match(PLpgSQLParser.BeginDollarStringConstant);
				this.state = 3981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.Text_between_Dollar) {
					{
					{
					this.state = 3978;
					this.match(PLpgSQLParser.Text_between_Dollar);
					}
					}
					this.state = 3983;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3984;
				this.match(PLpgSQLParser.EndDollarStringConstant);
				}
				break;
			case PLpgSQLParser.Character_String_Literal:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3985;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_arguments(): Function_argumentsContext {
		let _localctx: Function_argumentsContext = new Function_argumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, PLpgSQLParser.RULE_function_arguments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3989;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 441, this._ctx) ) {
			case 1:
				{
				this.state = 3988;
				this.argmode();
				}
				break;
			}
			this.state = 3992;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
			case 1:
				{
				this.state = 3991;
				this.identifier_nontype();
				}
				break;
			}
			this.state = 3994;
			this.data_type();
			this.state = 3997;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DEFAULT || _la === PLpgSQLParser.EQUAL) {
				{
				this.state = 3995;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DEFAULT || _la === PLpgSQLParser.EQUAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3996;
				this.vex(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public argmode(): ArgmodeContext {
		let _localctx: ArgmodeContext = new ArgmodeContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, PLpgSQLParser.RULE_argmode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3999;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.INOUT || _la === PLpgSQLParser.OUT || _la === PLpgSQLParser.IN || _la === PLpgSQLParser.VARIADIC)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_sequence_statement(): Create_sequence_statementContext {
		let _localctx: Create_sequence_statementContext = new Create_sequence_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, PLpgSQLParser.RULE_create_sequence_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TEMP || _la === PLpgSQLParser.TEMPORARY) {
				{
				this.state = 4001;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TEMP || _la === PLpgSQLParser.TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4004;
			this.match(PLpgSQLParser.SEQUENCE);
			this.state = 4006;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				{
				this.state = 4005;
				this.if_not_exists();
				}
				break;
			}
			this.state = 4008;
			_localctx._name = this.schema_qualified_name();
			this.state = 4012;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.CACHE || _la === PLpgSQLParser.CYCLE || _la === PLpgSQLParser.INCREMENT || _la === PLpgSQLParser.MAXVALUE || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (PLpgSQLParser.MINVALUE - 142)) | (1 << (PLpgSQLParser.NO - 142)) | (1 << (PLpgSQLParser.OWNED - 142)))) !== 0) || _la === PLpgSQLParser.SEQUENCE || _la === PLpgSQLParser.START || _la === PLpgSQLParser.AS) {
				{
				{
				this.state = 4009;
				this.sequence_body();
				}
				}
				this.state = 4014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sequence_body(): Sequence_bodyContext {
		let _localctx: Sequence_bodyContext = new Sequence_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, PLpgSQLParser.RULE_sequence_body);
		let _la: number;
		try {
			this.state = 4051;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 452, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4015;
				this.match(PLpgSQLParser.AS);
				this.state = 4016;
				_localctx._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (PLpgSQLParser.BIGINT - 294)) | (1 << (PLpgSQLParser.INTEGER - 294)) | (1 << (PLpgSQLParser.SMALLINT - 294)))) !== 0))) {
					_localctx._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4017;
				this.match(PLpgSQLParser.SEQUENCE);
				this.state = 4018;
				this.match(PLpgSQLParser.NAME);
				this.state = 4019;
				_localctx._name = this.schema_qualified_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4020;
				this.match(PLpgSQLParser.INCREMENT);
				this.state = 4022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.BY) {
					{
					this.state = 4021;
					this.match(PLpgSQLParser.BY);
					}
				}

				this.state = 4024;
				_localctx._incr = this.signed_numerical_literal();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4029;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.MINVALUE:
					{
					this.state = 4025;
					this.match(PLpgSQLParser.MINVALUE);
					this.state = 4026;
					_localctx._minval = this.signed_numerical_literal();
					}
					break;
				case PLpgSQLParser.NO:
					{
					this.state = 4027;
					this.match(PLpgSQLParser.NO);
					this.state = 4028;
					this.match(PLpgSQLParser.MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4035;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.MAXVALUE:
					{
					this.state = 4031;
					this.match(PLpgSQLParser.MAXVALUE);
					this.state = 4032;
					_localctx._maxval = this.signed_numerical_literal();
					}
					break;
				case PLpgSQLParser.NO:
					{
					this.state = 4033;
					this.match(PLpgSQLParser.NO);
					this.state = 4034;
					this.match(PLpgSQLParser.MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4037;
				this.match(PLpgSQLParser.START);
				this.state = 4039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4038;
					this.match(PLpgSQLParser.WITH);
					}
				}

				this.state = 4041;
				_localctx._start_val = this.signed_numerical_literal();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4042;
				this.match(PLpgSQLParser.CACHE);
				this.state = 4043;
				_localctx._cache_val = this.signed_numerical_literal();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO) {
					{
					this.state = 4044;
					_localctx._cycle_true = this.match(PLpgSQLParser.NO);
					}
				}

				this.state = 4047;
				_localctx._cycle_val = this.match(PLpgSQLParser.CYCLE);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4048;
				this.match(PLpgSQLParser.OWNED);
				this.state = 4049;
				this.match(PLpgSQLParser.BY);
				this.state = 4050;
				_localctx._col_name = this.schema_qualified_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signed_number_literal(): Signed_number_literalContext {
		let _localctx: Signed_number_literalContext = new Signed_number_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, PLpgSQLParser.RULE_signed_number_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4054;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS) {
				{
				this.state = 4053;
				this.sign();
				}
			}

			this.state = 4056;
			this.match(PLpgSQLParser.NUMBER_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signed_numerical_literal(): Signed_numerical_literalContext {
		let _localctx: Signed_numerical_literalContext = new Signed_numerical_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, PLpgSQLParser.RULE_signed_numerical_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS) {
				{
				this.state = 4058;
				this.sign();
				}
			}

			this.state = 4061;
			this.unsigned_numeric_literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign(): SignContext {
		let _localctx: SignContext = new SignContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, PLpgSQLParser.RULE_sign);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4063;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_schema_statement(): Create_schema_statementContext {
		let _localctx: Create_schema_statementContext = new Create_schema_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, PLpgSQLParser.RULE_create_schema_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4065;
			this.match(PLpgSQLParser.SCHEMA);
			this.state = 4067;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 455, this._ctx) ) {
			case 1:
				{
				this.state = 4066;
				this.if_not_exists();
				}
				break;
			}
			this.state = 4070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 4069;
				_localctx._name = this.identifier();
				}
			}

			this.state = 4074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.AUTHORIZATION) {
				{
				this.state = 4072;
				this.match(PLpgSQLParser.AUTHORIZATION);
				this.state = 4073;
				this.user_name();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_policy_statement(): Create_policy_statementContext {
		let _localctx: Create_policy_statementContext = new Create_policy_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, PLpgSQLParser.RULE_create_policy_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4076;
			this.match(PLpgSQLParser.POLICY);
			this.state = 4077;
			this.identifier();
			this.state = 4078;
			this.match(PLpgSQLParser.ON);
			this.state = 4079;
			this.schema_qualified_name();
			this.state = 4082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.AS) {
				{
				this.state = 4080;
				this.match(PLpgSQLParser.AS);
				this.state = 4081;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.PERMISSIVE || _la === PLpgSQLParser.RESTRICTIVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FOR) {
				{
				this.state = 4084;
				this.match(PLpgSQLParser.FOR);
				this.state = 4085;
				_localctx._event = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DELETE || _la === PLpgSQLParser.INSERT || _la === PLpgSQLParser.UPDATE || _la === PLpgSQLParser.ALL || _la === PLpgSQLParser.SELECT)) {
					_localctx._event = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TO) {
				{
				this.state = 4088;
				this.match(PLpgSQLParser.TO);
				this.state = 4089;
				this.user_name();
				this.state = 4094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4090;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4091;
					this.user_name();
					}
					}
					this.state = 4096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 4099;
				this.match(PLpgSQLParser.USING);
				this.state = 4100;
				_localctx._using = this.vex(0);
				}
			}

			this.state = 4106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 4103;
				this.match(PLpgSQLParser.WITH);
				this.state = 4104;
				this.match(PLpgSQLParser.CHECK);
				this.state = 4105;
				_localctx._check = this.vex(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_policy_statement(): Alter_policy_statementContext {
		let _localctx: Alter_policy_statementContext = new Alter_policy_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, PLpgSQLParser.RULE_alter_policy_statement);
		let _la: number;
		try {
			this.state = 4138;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4108;
				this.match(PLpgSQLParser.POLICY);
				this.state = 4109;
				this.identifier();
				this.state = 4110;
				this.match(PLpgSQLParser.ON);
				this.state = 4111;
				this.schema_qualified_name();
				this.state = 4112;
				this.rename_to();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4114;
				this.match(PLpgSQLParser.POLICY);
				this.state = 4115;
				this.identifier();
				this.state = 4116;
				this.match(PLpgSQLParser.ON);
				this.state = 4117;
				this.schema_qualified_name();
				this.state = 4127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.TO) {
					{
					this.state = 4118;
					this.match(PLpgSQLParser.TO);
					this.state = 4119;
					this.user_name();
					this.state = 4124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 4120;
						this.match(PLpgSQLParser.COMMA);
						this.state = 4121;
						this.user_name();
						}
						}
						this.state = 4126;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 4131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.USING) {
					{
					this.state = 4129;
					this.match(PLpgSQLParser.USING);
					this.state = 4130;
					this.vex(0);
					}
				}

				this.state = 4136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4133;
					this.match(PLpgSQLParser.WITH);
					this.state = 4134;
					this.match(PLpgSQLParser.CHECK);
					this.state = 4135;
					this.vex(0);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_policy_statement(): Drop_policy_statementContext {
		let _localctx: Drop_policy_statementContext = new Drop_policy_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, PLpgSQLParser.RULE_drop_policy_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4140;
			this.match(PLpgSQLParser.POLICY);
			this.state = 4142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 469, this._ctx) ) {
			case 1:
				{
				this.state = 4141;
				this.if_exists();
				}
				break;
			}
			this.state = 4144;
			this.identifier();
			this.state = 4145;
			this.match(PLpgSQLParser.ON);
			this.state = 4146;
			this.schema_qualified_name();
			this.state = 4148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 4147;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_subscription_statement(): Create_subscription_statementContext {
		let _localctx: Create_subscription_statementContext = new Create_subscription_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, PLpgSQLParser.RULE_create_subscription_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4150;
			this.match(PLpgSQLParser.SUBSCRIPTION);
			this.state = 4151;
			this.identifier();
			this.state = 4152;
			this.match(PLpgSQLParser.CONNECTION);
			this.state = 4153;
			this.match(PLpgSQLParser.Character_String_Literal);
			this.state = 4154;
			this.match(PLpgSQLParser.PUBLICATION);
			this.state = 4155;
			this.identifier_list();
			this.state = 4157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 4156;
				this.with_storage_parameter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_subscription_statement(): Alter_subscription_statementContext {
		let _localctx: Alter_subscription_statementContext = new Alter_subscription_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, PLpgSQLParser.RULE_alter_subscription_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4159;
			this.match(PLpgSQLParser.SUBSCRIPTION);
			this.state = 4160;
			this.identifier();
			this.state = 4161;
			this.alter_subscription_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_subscription_action(): Alter_subscription_actionContext {
		let _localctx: Alter_subscription_actionContext = new Alter_subscription_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, PLpgSQLParser.RULE_alter_subscription_action);
		let _la: number;
		try {
			this.state = 4182;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 474, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4163;
				this.match(PLpgSQLParser.CONNECTION);
				this.state = 4164;
				this.character_string();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4165;
				this.match(PLpgSQLParser.SET);
				this.state = 4166;
				this.match(PLpgSQLParser.PUBLICATION);
				this.state = 4167;
				this.identifier_list();
				this.state = 4169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4168;
					this.with_storage_parameter();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4171;
				this.match(PLpgSQLParser.REFRESH);
				this.state = 4172;
				this.match(PLpgSQLParser.PUBLICATION);
				this.state = 4174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4173;
					this.with_storage_parameter();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4176;
				this.match(PLpgSQLParser.ENABLE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4177;
				this.match(PLpgSQLParser.DISABLE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4178;
				this.match(PLpgSQLParser.SET);
				this.state = 4179;
				this.storage_parameter();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4180;
				this.owner_to();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4181;
				this.rename_to();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_cast_statement(): Create_cast_statementContext {
		let _localctx: Create_cast_statementContext = new Create_cast_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, PLpgSQLParser.RULE_create_cast_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4184;
			this.match(PLpgSQLParser.CAST);
			this.state = 4185;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4186;
			_localctx._source = this.data_type();
			this.state = 4187;
			this.match(PLpgSQLParser.AS);
			this.state = 4188;
			_localctx._target = this.data_type();
			this.state = 4189;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			this.state = 4199;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 475, this._ctx) ) {
			case 1:
				{
				this.state = 4190;
				this.match(PLpgSQLParser.WITH);
				this.state = 4191;
				this.match(PLpgSQLParser.FUNCTION);
				this.state = 4192;
				_localctx._func_name = this.schema_qualified_name();
				this.state = 4193;
				this.function_args();
				}
				break;

			case 2:
				{
				this.state = 4195;
				this.match(PLpgSQLParser.WITHOUT);
				this.state = 4196;
				this.match(PLpgSQLParser.FUNCTION);
				}
				break;

			case 3:
				{
				this.state = 4197;
				this.match(PLpgSQLParser.WITH);
				this.state = 4198;
				this.match(PLpgSQLParser.INOUT);
				}
				break;
			}
			this.state = 4205;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
			case 1:
				{
				this.state = 4201;
				this.match(PLpgSQLParser.AS);
				this.state = 4202;
				this.match(PLpgSQLParser.ASSIGNMENT);
				}
				break;

			case 2:
				{
				this.state = 4203;
				this.match(PLpgSQLParser.AS);
				this.state = 4204;
				this.match(PLpgSQLParser.IMPLICIT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_cast_statement(): Drop_cast_statementContext {
		let _localctx: Drop_cast_statementContext = new Drop_cast_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, PLpgSQLParser.RULE_drop_cast_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4207;
			this.match(PLpgSQLParser.CAST);
			this.state = 4209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.IF) {
				{
				this.state = 4208;
				this.if_exists();
				}
			}

			this.state = 4211;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4212;
			_localctx._source = this.data_type();
			this.state = 4213;
			this.match(PLpgSQLParser.AS);
			this.state = 4214;
			_localctx._target = this.data_type();
			this.state = 4215;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			this.state = 4217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 4216;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_family_statement(): Create_operator_family_statementContext {
		let _localctx: Create_operator_family_statementContext = new Create_operator_family_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, PLpgSQLParser.RULE_create_operator_family_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4219;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 4220;
			this.match(PLpgSQLParser.FAMILY);
			this.state = 4221;
			this.schema_qualified_name();
			this.state = 4222;
			this.match(PLpgSQLParser.USING);
			this.state = 4223;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_family_statement(): Alter_operator_family_statementContext {
		let _localctx: Alter_operator_family_statementContext = new Alter_operator_family_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, PLpgSQLParser.RULE_alter_operator_family_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4225;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 4226;
			this.match(PLpgSQLParser.FAMILY);
			this.state = 4227;
			this.schema_qualified_name();
			this.state = 4228;
			this.match(PLpgSQLParser.USING);
			this.state = 4229;
			this.identifier();
			this.state = 4230;
			this.operator_family_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_family_action(): Operator_family_actionContext {
		let _localctx: Operator_family_actionContext = new Operator_family_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, PLpgSQLParser.RULE_operator_family_action);
		let _la: number;
		try {
			this.state = 4253;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4232;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.OWNER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4233;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.SET:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4234;
				this.set_schema();
				}
				break;
			case PLpgSQLParser.ADD:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4235;
				this.match(PLpgSQLParser.ADD);
				this.state = 4236;
				this.add_operator_to_family();
				this.state = 4241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4237;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4238;
					this.add_operator_to_family();
					}
					}
					this.state = 4243;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case PLpgSQLParser.DROP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4244;
				this.match(PLpgSQLParser.DROP);
				this.state = 4245;
				this.drop_operator_from_family();
				this.state = 4250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4246;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4247;
					this.drop_operator_from_family();
					}
					}
					this.state = 4252;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_operator_to_family(): Add_operator_to_familyContext {
		let _localctx: Add_operator_to_familyContext = new Add_operator_to_familyContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, PLpgSQLParser.RULE_add_operator_to_family);
		let _la: number;
		try {
			this.state = 4285;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.OPERATOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4255;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 4256;
				this.unsigned_numeric_literal();
				this.state = 4257;
				this.target_operator();
				this.state = 4264;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 482, this._ctx) ) {
				case 1:
					{
					this.state = 4258;
					this.match(PLpgSQLParser.FOR);
					this.state = 4259;
					this.match(PLpgSQLParser.SEARCH);
					}
					break;

				case 2:
					{
					this.state = 4260;
					this.match(PLpgSQLParser.FOR);
					this.state = 4261;
					this.match(PLpgSQLParser.ORDER);
					this.state = 4262;
					this.match(PLpgSQLParser.BY);
					this.state = 4263;
					this.schema_qualified_name();
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4266;
				this.match(PLpgSQLParser.FUNCTION);
				this.state = 4267;
				this.unsigned_numeric_literal();
				this.state = 4281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 4268;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 4271;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
					case 1:
						{
						this.state = 4269;
						this.data_type();
						}
						break;

					case 2:
						{
						this.state = 4270;
						this.match(PLpgSQLParser.NONE);
						}
						break;
					}
					this.state = 4278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.COMMA) {
						{
						this.state = 4273;
						this.match(PLpgSQLParser.COMMA);
						this.state = 4276;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
						case 1:
							{
							this.state = 4274;
							this.data_type();
							}
							break;

						case 2:
							{
							this.state = 4275;
							this.match(PLpgSQLParser.NONE);
							}
							break;
						}
						}
					}

					this.state = 4280;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				this.state = 4283;
				this.function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_from_family(): Drop_operator_from_familyContext {
		let _localctx: Drop_operator_from_familyContext = new Drop_operator_from_familyContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, PLpgSQLParser.RULE_drop_operator_from_family);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4287;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.OPERATOR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4288;
			this.unsigned_numeric_literal();
			this.state = 4289;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 488, this._ctx) ) {
			case 1:
				{
				this.state = 4290;
				this.data_type();
				}
				break;

			case 2:
				{
				this.state = 4291;
				this.match(PLpgSQLParser.NONE);
				}
				break;
			}
			this.state = 4299;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COMMA) {
				{
				this.state = 4294;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4297;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 489, this._ctx) ) {
				case 1:
					{
					this.state = 4295;
					this.data_type();
					}
					break;

				case 2:
					{
					this.state = 4296;
					this.match(PLpgSQLParser.NONE);
					}
					break;
				}
				}
			}

			this.state = 4301;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_family_statement(): Drop_operator_family_statementContext {
		let _localctx: Drop_operator_family_statementContext = new Drop_operator_family_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, PLpgSQLParser.RULE_drop_operator_family_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4303;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 4304;
			this.match(PLpgSQLParser.FAMILY);
			this.state = 4306;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 491, this._ctx) ) {
			case 1:
				{
				this.state = 4305;
				this.if_exists();
				}
				break;
			}
			this.state = 4308;
			this.schema_qualified_name();
			this.state = 4309;
			this.match(PLpgSQLParser.USING);
			this.state = 4310;
			this.identifier();
			this.state = 4312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 4311;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_class_statement(): Create_operator_class_statementContext {
		let _localctx: Create_operator_class_statementContext = new Create_operator_class_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, PLpgSQLParser.RULE_create_operator_class_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4314;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 4315;
			this.match(PLpgSQLParser.CLASS);
			this.state = 4316;
			this.schema_qualified_name();
			this.state = 4318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DEFAULT) {
				{
				this.state = 4317;
				this.match(PLpgSQLParser.DEFAULT);
				}
			}

			this.state = 4320;
			this.match(PLpgSQLParser.FOR);
			this.state = 4321;
			this.match(PLpgSQLParser.TYPE);
			this.state = 4322;
			this.data_type();
			this.state = 4323;
			this.match(PLpgSQLParser.USING);
			this.state = 4324;
			this.identifier();
			this.state = 4327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FAMILY) {
				{
				this.state = 4325;
				this.match(PLpgSQLParser.FAMILY);
				this.state = 4326;
				this.schema_qualified_name();
				}
			}

			this.state = 4329;
			this.match(PLpgSQLParser.AS);
			this.state = 4330;
			this.create_operator_class_option();
			this.state = 4335;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4331;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4332;
				this.create_operator_class_option();
				}
				}
				this.state = 4337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_class_option(): Create_operator_class_optionContext {
		let _localctx: Create_operator_class_optionContext = new Create_operator_class_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, PLpgSQLParser.RULE_create_operator_class_option);
		let _la: number;
		try {
			this.state = 4383;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.OPERATOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4338;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 4339;
				this.unsigned_numeric_literal();
				this.state = 4340;
				_localctx._name = this.operator_name();
				this.state = 4352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 4341;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 4344;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
					case 1:
						{
						this.state = 4342;
						this.data_type();
						}
						break;

					case 2:
						{
						this.state = 4343;
						this.match(PLpgSQLParser.NONE);
						}
						break;
					}
					this.state = 4346;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4349;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 497, this._ctx) ) {
					case 1:
						{
						this.state = 4347;
						this.data_type();
						}
						break;

					case 2:
						{
						this.state = 4348;
						this.match(PLpgSQLParser.NONE);
						}
						break;
					}
					this.state = 4351;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				this.state = 4360;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
				case 1:
					{
					this.state = 4354;
					this.match(PLpgSQLParser.FOR);
					this.state = 4355;
					this.match(PLpgSQLParser.SEARCH);
					}
					break;

				case 2:
					{
					this.state = 4356;
					this.match(PLpgSQLParser.FOR);
					this.state = 4357;
					this.match(PLpgSQLParser.ORDER);
					this.state = 4358;
					this.match(PLpgSQLParser.BY);
					this.state = 4359;
					this.schema_qualified_name();
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4362;
				this.match(PLpgSQLParser.FUNCTION);
				this.state = 4363;
				this.unsigned_numeric_literal();
				this.state = 4377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 4364;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 4367;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 500, this._ctx) ) {
					case 1:
						{
						this.state = 4365;
						this.data_type();
						}
						break;

					case 2:
						{
						this.state = 4366;
						this.match(PLpgSQLParser.NONE);
						}
						break;
					}
					this.state = 4374;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.COMMA) {
						{
						this.state = 4369;
						this.match(PLpgSQLParser.COMMA);
						this.state = 4372;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 501, this._ctx) ) {
						case 1:
							{
							this.state = 4370;
							this.data_type();
							}
							break;

						case 2:
							{
							this.state = 4371;
							this.match(PLpgSQLParser.NONE);
							}
							break;
						}
						}
					}

					this.state = 4376;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				this.state = 4379;
				this.function_call();
				}
				break;
			case PLpgSQLParser.STORAGE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4381;
				this.match(PLpgSQLParser.STORAGE);
				this.state = 4382;
				this.data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_class_statement(): Alter_operator_class_statementContext {
		let _localctx: Alter_operator_class_statementContext = new Alter_operator_class_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, PLpgSQLParser.RULE_alter_operator_class_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4385;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 4386;
			this.match(PLpgSQLParser.CLASS);
			this.state = 4387;
			this.schema_qualified_name();
			this.state = 4388;
			this.match(PLpgSQLParser.USING);
			this.state = 4389;
			this.identifier();
			this.state = 4393;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				{
				this.state = 4390;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.OWNER:
				{
				this.state = 4391;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.SET:
				{
				this.state = 4392;
				this.set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_class_statement(): Drop_operator_class_statementContext {
		let _localctx: Drop_operator_class_statementContext = new Drop_operator_class_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, PLpgSQLParser.RULE_drop_operator_class_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4395;
			this.match(PLpgSQLParser.OPERATOR);
			this.state = 4396;
			this.match(PLpgSQLParser.CLASS);
			this.state = 4398;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 506, this._ctx) ) {
			case 1:
				{
				this.state = 4397;
				this.if_exists();
				}
				break;
			}
			this.state = 4400;
			this.schema_qualified_name();
			this.state = 4401;
			this.match(PLpgSQLParser.USING);
			this.state = 4402;
			this.identifier();
			this.state = 4404;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 4403;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_conversion_statement(): Create_conversion_statementContext {
		let _localctx: Create_conversion_statementContext = new Create_conversion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, PLpgSQLParser.RULE_create_conversion_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DEFAULT) {
				{
				this.state = 4406;
				this.match(PLpgSQLParser.DEFAULT);
				}
			}

			this.state = 4409;
			this.match(PLpgSQLParser.CONVERSION);
			this.state = 4410;
			this.schema_qualified_name();
			this.state = 4411;
			this.match(PLpgSQLParser.FOR);
			this.state = 4412;
			this.match(PLpgSQLParser.Character_String_Literal);
			this.state = 4413;
			this.match(PLpgSQLParser.TO);
			this.state = 4414;
			this.match(PLpgSQLParser.Character_String_Literal);
			this.state = 4415;
			this.match(PLpgSQLParser.FROM);
			this.state = 4416;
			this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_conversion_statement(): Alter_conversion_statementContext {
		let _localctx: Alter_conversion_statementContext = new Alter_conversion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, PLpgSQLParser.RULE_alter_conversion_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4418;
			this.match(PLpgSQLParser.CONVERSION);
			this.state = 4419;
			this.schema_qualified_name();
			this.state = 4423;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				{
				this.state = 4420;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.OWNER:
				{
				this.state = 4421;
				this.owner_to();
				}
				break;
			case PLpgSQLParser.SET:
				{
				this.state = 4422;
				this.set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_publication_statement(): Create_publication_statementContext {
		let _localctx: Create_publication_statementContext = new Create_publication_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, PLpgSQLParser.RULE_create_publication_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4425;
			this.match(PLpgSQLParser.PUBLICATION);
			this.state = 4426;
			this.identifier();
			this.state = 4440;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 511, this._ctx) ) {
			case 1:
				{
				this.state = 4427;
				this.match(PLpgSQLParser.FOR);
				this.state = 4428;
				this.match(PLpgSQLParser.TABLE);
				this.state = 4429;
				this.only_table_multiply();
				this.state = 4434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4430;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4431;
					this.only_table_multiply();
					}
					}
					this.state = 4436;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				{
				this.state = 4437;
				this.match(PLpgSQLParser.FOR);
				this.state = 4438;
				this.match(PLpgSQLParser.ALL);
				this.state = 4439;
				this.match(PLpgSQLParser.TABLES);
				}
				break;
			}
			this.state = 4443;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 4442;
				this.with_storage_parameter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_publication_statement(): Alter_publication_statementContext {
		let _localctx: Alter_publication_statementContext = new Alter_publication_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, PLpgSQLParser.RULE_alter_publication_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4445;
			this.match(PLpgSQLParser.PUBLICATION);
			this.state = 4446;
			this.identifier();
			this.state = 4447;
			this.alter_publication_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_publication_action(): Alter_publication_actionContext {
		let _localctx: Alter_publication_actionContext = new Alter_publication_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, PLpgSQLParser.RULE_alter_publication_action);
		let _la: number;
		try {
			this.state = 4463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4449;
				this.rename_to();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4450;
				this.owner_to();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4451;
				this.match(PLpgSQLParser.SET);
				this.state = 4452;
				this.storage_parameter();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4453;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ADD || _la === PLpgSQLParser.DROP || _la === PLpgSQLParser.SET)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4454;
				this.match(PLpgSQLParser.TABLE);
				this.state = 4455;
				this.only_table_multiply();
				this.state = 4460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4456;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4457;
					this.only_table_multiply();
					}
					}
					this.state = 4462;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public only_table_multiply(): Only_table_multiplyContext {
		let _localctx: Only_table_multiplyContext = new Only_table_multiplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, PLpgSQLParser.RULE_only_table_multiply);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4466;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ONLY) {
				{
				this.state = 4465;
				this.match(PLpgSQLParser.ONLY);
				}
			}

			this.state = 4468;
			this.schema_qualified_name();
			this.state = 4470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MULTIPLY) {
				{
				this.state = 4469;
				this.match(PLpgSQLParser.MULTIPLY);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_trigger_statement(): Alter_trigger_statementContext {
		let _localctx: Alter_trigger_statementContext = new Alter_trigger_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, PLpgSQLParser.RULE_alter_trigger_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4472;
			this.match(PLpgSQLParser.TRIGGER);
			this.state = 4473;
			this.identifier();
			this.state = 4474;
			this.match(PLpgSQLParser.ON);
			this.state = 4475;
			this.schema_qualified_name();
			this.state = 4481;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RENAME:
				{
				this.state = 4476;
				this.rename_to();
				}
				break;
			case PLpgSQLParser.DEPENDS:
				{
				this.state = 4477;
				this.match(PLpgSQLParser.DEPENDS);
				this.state = 4478;
				this.match(PLpgSQLParser.ON);
				this.state = 4479;
				this.match(PLpgSQLParser.EXTENSION);
				this.state = 4480;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_rule_statement(): Alter_rule_statementContext {
		let _localctx: Alter_rule_statementContext = new Alter_rule_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, PLpgSQLParser.RULE_alter_rule_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4483;
			this.match(PLpgSQLParser.RULE);
			this.state = 4484;
			this.identifier();
			this.state = 4485;
			this.match(PLpgSQLParser.ON);
			this.state = 4486;
			this.schema_qualified_name();
			this.state = 4487;
			this.rename_to();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_statement(): Copy_statementContext {
		let _localctx: Copy_statementContext = new Copy_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, PLpgSQLParser.RULE_copy_statement);
		try {
			this.state = 4491;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 518, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4489;
				this.copy_to_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4490;
				this.copy_from_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_from_statement(): Copy_from_statementContext {
		let _localctx: Copy_from_statementContext = new Copy_from_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, PLpgSQLParser.RULE_copy_from_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4493;
			this.match(PLpgSQLParser.COPY);
			this.state = 4494;
			this.table_cols();
			this.state = 4495;
			this.match(PLpgSQLParser.FROM);
			this.state = 4501;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.Character_String_Literal:
				{
				this.state = 4497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PROGRAM) {
					{
					this.state = 4496;
					this.match(PLpgSQLParser.PROGRAM);
					}
				}

				this.state = 4499;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;
			case PLpgSQLParser.STDIN:
				{
				this.state = 4500;
				this.match(PLpgSQLParser.STDIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4513;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & ((1 << (PLpgSQLParser.CSV - 47)) | (1 << (PLpgSQLParser.DELIMITER - 47)) | (1 << (PLpgSQLParser.ENCODING - 47)) | (1 << (PLpgSQLParser.ESCAPE - 47)))) !== 0) || _la === PLpgSQLParser.FORCE || _la === PLpgSQLParser.HEADER || _la === PLpgSQLParser.OIDS || _la === PLpgSQLParser.QUOTE || _la === PLpgSQLParser.TEXT || _la === PLpgSQLParser.BINARY || _la === PLpgSQLParser.FREEZE || _la === PLpgSQLParser.NULL || _la === PLpgSQLParser.WITH || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (PLpgSQLParser.FORCE_NOT_NULL - 464)) | (1 << (PLpgSQLParser.FORCE_NULL - 464)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 464)) | (1 << (PLpgSQLParser.FORMAT - 464)))) !== 0) || _la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 4504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4503;
					this.match(PLpgSQLParser.WITH);
					}
				}

				this.state = 4511;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.LEFT_PAREN:
					{
					this.state = 4506;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 4507;
					this.copy_option_list();
					this.state = 4508;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.BINARY:
				case PLpgSQLParser.FREEZE:
				case PLpgSQLParser.NULL:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
					{
					this.state = 4510;
					this.copy_option_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 4517;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHERE) {
				{
				this.state = 4515;
				this.match(PLpgSQLParser.WHERE);
				this.state = 4516;
				this.vex(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_to_statement(): Copy_to_statementContext {
		let _localctx: Copy_to_statementContext = new Copy_to_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, PLpgSQLParser.RULE_copy_to_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4519;
			this.match(PLpgSQLParser.COPY);
			this.state = 4525;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 4520;
				this.table_cols();
				}
				break;
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 4521;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 4522;
				this.data_statement();
				this.state = 4523;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4527;
			this.match(PLpgSQLParser.TO);
			this.state = 4533;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.Character_String_Literal:
				{
				this.state = 4529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PROGRAM) {
					{
					this.state = 4528;
					this.match(PLpgSQLParser.PROGRAM);
					}
				}

				this.state = 4531;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;
			case PLpgSQLParser.STDOUT:
				{
				this.state = 4532;
				this.match(PLpgSQLParser.STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & ((1 << (PLpgSQLParser.CSV - 47)) | (1 << (PLpgSQLParser.DELIMITER - 47)) | (1 << (PLpgSQLParser.ENCODING - 47)) | (1 << (PLpgSQLParser.ESCAPE - 47)))) !== 0) || _la === PLpgSQLParser.FORCE || _la === PLpgSQLParser.HEADER || _la === PLpgSQLParser.OIDS || _la === PLpgSQLParser.QUOTE || _la === PLpgSQLParser.TEXT || _la === PLpgSQLParser.BINARY || _la === PLpgSQLParser.FREEZE || _la === PLpgSQLParser.NULL || _la === PLpgSQLParser.WITH || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (PLpgSQLParser.FORCE_NOT_NULL - 464)) | (1 << (PLpgSQLParser.FORCE_NULL - 464)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 464)) | (1 << (PLpgSQLParser.FORMAT - 464)))) !== 0) || _la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 4536;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4535;
					this.match(PLpgSQLParser.WITH);
					}
				}

				this.state = 4543;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.LEFT_PAREN:
					{
					this.state = 4538;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 4539;
					this.copy_option_list();
					this.state = 4540;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.BINARY:
				case PLpgSQLParser.FREEZE:
				case PLpgSQLParser.NULL:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
					{
					this.state = 4542;
					this.copy_option_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_option_list(): Copy_option_listContext {
		let _localctx: Copy_option_listContext = new Copy_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, PLpgSQLParser.RULE_copy_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4547;
			this.copy_option();
			this.state = 4554;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & ((1 << (PLpgSQLParser.CSV - 47)) | (1 << (PLpgSQLParser.DELIMITER - 47)) | (1 << (PLpgSQLParser.ENCODING - 47)) | (1 << (PLpgSQLParser.ESCAPE - 47)))) !== 0) || _la === PLpgSQLParser.FORCE || _la === PLpgSQLParser.HEADER || _la === PLpgSQLParser.OIDS || _la === PLpgSQLParser.QUOTE || _la === PLpgSQLParser.TEXT || _la === PLpgSQLParser.BINARY || _la === PLpgSQLParser.FREEZE || _la === PLpgSQLParser.NULL || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (PLpgSQLParser.FORCE_NOT_NULL - 464)) | (1 << (PLpgSQLParser.FORCE_NULL - 464)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 464)) | (1 << (PLpgSQLParser.FORMAT - 464)))) !== 0) || _la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COMMA) {
					{
					this.state = 4548;
					this.match(PLpgSQLParser.COMMA);
					}
				}

				this.state = 4551;
				this.copy_option();
				}
				}
				this.state = 4556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_option(): Copy_optionContext {
		let _localctx: Copy_optionContext = new Copy_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, PLpgSQLParser.RULE_copy_option);
		let _la: number;
		try {
			this.state = 4617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 541, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FORMAT) {
					{
					this.state = 4557;
					this.match(PLpgSQLParser.FORMAT);
					}
				}

				this.state = 4560;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CSV || _la === PLpgSQLParser.TEXT || _la === PLpgSQLParser.BINARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4561;
				this.match(PLpgSQLParser.OIDS);
				this.state = 4563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE) {
					{
					this.state = 4562;
					this.truth_value();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4565;
				this.match(PLpgSQLParser.FREEZE);
				this.state = 4567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE) {
					{
					this.state = 4566;
					this.truth_value();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4569;
				this.match(PLpgSQLParser.DELIMITER);
				this.state = 4571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AS) {
					{
					this.state = 4570;
					this.match(PLpgSQLParser.AS);
					}
				}

				this.state = 4573;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4574;
				this.match(PLpgSQLParser.NULL);
				this.state = 4576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AS) {
					{
					this.state = 4575;
					this.match(PLpgSQLParser.AS);
					}
				}

				this.state = 4578;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4579;
				this.match(PLpgSQLParser.HEADER);
				this.state = 4581;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE) {
					{
					this.state = 4580;
					this.truth_value();
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4583;
				this.match(PLpgSQLParser.QUOTE);
				this.state = 4584;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4585;
				this.match(PLpgSQLParser.ESCAPE);
				this.state = 4586;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4587;
				this.match(PLpgSQLParser.FORCE);
				this.state = 4588;
				this.match(PLpgSQLParser.QUOTE);
				this.state = 4591;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.MULTIPLY:
					{
					this.state = 4589;
					this.match(PLpgSQLParser.MULTIPLY);
					}
					break;
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 4590;
					this.identifier_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4593;
				this.match(PLpgSQLParser.FORCE_QUOTE);
				this.state = 4599;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.MULTIPLY:
					{
					this.state = 4594;
					this.match(PLpgSQLParser.MULTIPLY);
					}
					break;
				case PLpgSQLParser.LEFT_PAREN:
					{
					this.state = 4595;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 4596;
					this.identifier_list();
					this.state = 4597;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4601;
				this.match(PLpgSQLParser.FORCE);
				this.state = 4602;
				this.match(PLpgSQLParser.NOT);
				this.state = 4603;
				this.match(PLpgSQLParser.NULL);
				this.state = 4604;
				this.identifier_list();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4605;
				this.match(PLpgSQLParser.FORCE_NOT_NULL);
				this.state = 4606;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 4607;
				this.identifier_list();
				this.state = 4608;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4610;
				this.match(PLpgSQLParser.FORCE_NULL);
				this.state = 4611;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 4612;
				this.identifier_list();
				this.state = 4613;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4615;
				this.match(PLpgSQLParser.ENCODING);
				this.state = 4616;
				this.match(PLpgSQLParser.Character_String_Literal);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_view_statement(): Create_view_statementContext {
		let _localctx: Create_view_statementContext = new Create_view_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, PLpgSQLParser.RULE_create_view_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OR) {
				{
				this.state = 4619;
				this.match(PLpgSQLParser.OR);
				this.state = 4620;
				this.match(PLpgSQLParser.REPLACE);
				}
			}

			this.state = 4624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TEMP || _la === PLpgSQLParser.TEMPORARY) {
				{
				this.state = 4623;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TEMP || _la === PLpgSQLParser.TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4627;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.RECURSIVE) {
				{
				this.state = 4626;
				this.match(PLpgSQLParser.RECURSIVE);
				}
			}

			this.state = 4630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MATERIALIZED) {
				{
				this.state = 4629;
				this.match(PLpgSQLParser.MATERIALIZED);
				}
			}

			this.state = 4632;
			this.match(PLpgSQLParser.VIEW);
			this.state = 4634;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
			case 1:
				{
				this.state = 4633;
				this.if_not_exists();
				}
				break;
			}
			this.state = 4636;
			_localctx._name = this.schema_qualified_name();
			this.state = 4638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 4637;
				_localctx._column_names = this.view_columns();
				}
			}

			this.state = 4642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 4640;
				this.match(PLpgSQLParser.USING);
				this.state = 4641;
				this.identifier();
				}
			}

			this.state = 4646;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 4644;
				this.match(PLpgSQLParser.WITH);
				this.state = 4645;
				this.storage_parameter();
				}
			}

			this.state = 4649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLESPACE) {
				{
				this.state = 4648;
				this.table_space();
				}
			}

			this.state = 4651;
			this.match(PLpgSQLParser.AS);
			this.state = 4652;
			_localctx._v_query = this.select_stmt();
			this.state = 4654;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 551, this._ctx) ) {
			case 1:
				{
				this.state = 4653;
				this.with_check_option();
				}
				break;
			}
			this.state = 4661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 4656;
				this.match(PLpgSQLParser.WITH);
				this.state = 4658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO) {
					{
					this.state = 4657;
					this.match(PLpgSQLParser.NO);
					}
				}

				this.state = 4660;
				this.match(PLpgSQLParser.DATA);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_exists(): If_existsContext {
		let _localctx: If_existsContext = new If_existsContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, PLpgSQLParser.RULE_if_exists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4663;
			this.match(PLpgSQLParser.IF);
			this.state = 4664;
			this.match(PLpgSQLParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_not_exists(): If_not_existsContext {
		let _localctx: If_not_existsContext = new If_not_existsContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, PLpgSQLParser.RULE_if_not_exists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4666;
			this.match(PLpgSQLParser.IF);
			this.state = 4667;
			this.match(PLpgSQLParser.NOT);
			this.state = 4668;
			this.match(PLpgSQLParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public view_columns(): View_columnsContext {
		let _localctx: View_columnsContext = new View_columnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, PLpgSQLParser.RULE_view_columns);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4670;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4671;
			this.identifier();
			this.state = 4676;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4672;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4673;
				this.identifier();
				}
				}
				this.state = 4678;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4679;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_check_option(): With_check_optionContext {
		let _localctx: With_check_optionContext = new With_check_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, PLpgSQLParser.RULE_with_check_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4681;
			this.match(PLpgSQLParser.WITH);
			this.state = 4683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADED || _la === PLpgSQLParser.LOCAL) {
				{
				this.state = 4682;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CASCADED || _la === PLpgSQLParser.LOCAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4685;
			this.match(PLpgSQLParser.CHECK);
			this.state = 4686;
			this.match(PLpgSQLParser.OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_statement(): Create_table_statementContext {
		let _localctx: Create_table_statementContext = new Create_table_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, PLpgSQLParser.RULE_create_table_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4693;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPORARY:
				{
				this.state = 4689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.GLOBAL || _la === PLpgSQLParser.LOCAL) {
					{
					this.state = 4688;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.GLOBAL || _la === PLpgSQLParser.LOCAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4691;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TEMP || _la === PLpgSQLParser.TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.UNLOGGED:
				{
				this.state = 4692;
				this.match(PLpgSQLParser.UNLOGGED);
				}
				break;
			case PLpgSQLParser.TABLE:
				break;
			default:
				break;
			}
			this.state = 4695;
			this.match(PLpgSQLParser.TABLE);
			this.state = 4697;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 558, this._ctx) ) {
			case 1:
				{
				this.state = 4696;
				this.if_not_exists();
				}
				break;
			}
			this.state = 4699;
			_localctx._name = this.schema_qualified_name();
			this.state = 4700;
			this.define_table();
			this.state = 4702;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.PARTITION) {
				{
				this.state = 4701;
				this.partition_by();
				}
			}

			this.state = 4706;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 4704;
				this.match(PLpgSQLParser.USING);
				this.state = 4705;
				this.identifier();
				}
			}

			this.state = 4709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITHOUT || _la === PLpgSQLParser.WITH) {
				{
				this.state = 4708;
				this.storage_parameter_oid();
				}
			}

			this.state = 4712;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ON) {
				{
				this.state = 4711;
				this.on_commit();
				}
			}

			this.state = 4715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLESPACE) {
				{
				this.state = 4714;
				this.table_space();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_as_statement(): Create_table_as_statementContext {
		let _localctx: Create_table_as_statementContext = new Create_table_as_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, PLpgSQLParser.RULE_create_table_as_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4722;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPORARY:
				{
				this.state = 4718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.GLOBAL || _la === PLpgSQLParser.LOCAL) {
					{
					this.state = 4717;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.GLOBAL || _la === PLpgSQLParser.LOCAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4720;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.TEMP || _la === PLpgSQLParser.TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.UNLOGGED:
				{
				this.state = 4721;
				this.match(PLpgSQLParser.UNLOGGED);
				}
				break;
			case PLpgSQLParser.TABLE:
				break;
			default:
				break;
			}
			this.state = 4724;
			this.match(PLpgSQLParser.TABLE);
			this.state = 4726;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 566, this._ctx) ) {
			case 1:
				{
				this.state = 4725;
				this.if_not_exists();
				}
				break;
			}
			this.state = 4728;
			_localctx._name = this.schema_qualified_name();
			this.state = 4730;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 4729;
				this.names_in_parens();
				}
			}

			this.state = 4734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 4732;
				this.match(PLpgSQLParser.USING);
				this.state = 4733;
				this.identifier();
				}
			}

			this.state = 4737;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITHOUT || _la === PLpgSQLParser.WITH) {
				{
				this.state = 4736;
				this.storage_parameter_oid();
				}
			}

			this.state = 4740;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ON) {
				{
				this.state = 4739;
				this.on_commit();
				}
			}

			this.state = 4743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLESPACE) {
				{
				this.state = 4742;
				this.table_space();
				}
			}

			this.state = 4745;
			this.match(PLpgSQLParser.AS);
			this.state = 4749;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.TABLE:
			case PLpgSQLParser.WITH:
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 4746;
				this.select_stmt();
				}
				break;
			case PLpgSQLParser.EXECUTE:
				{
				this.state = 4747;
				this.match(PLpgSQLParser.EXECUTE);
				this.state = 4748;
				this.function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4756;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 4751;
				this.match(PLpgSQLParser.WITH);
				this.state = 4753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO) {
					{
					this.state = 4752;
					this.match(PLpgSQLParser.NO);
					}
				}

				this.state = 4755;
				this.match(PLpgSQLParser.DATA);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_foreign_table_statement(): Create_foreign_table_statementContext {
		let _localctx: Create_foreign_table_statementContext = new Create_foreign_table_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, PLpgSQLParser.RULE_create_foreign_table_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4758;
			this.match(PLpgSQLParser.FOREIGN);
			this.state = 4759;
			this.match(PLpgSQLParser.TABLE);
			this.state = 4761;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 575, this._ctx) ) {
			case 1:
				{
				this.state = 4760;
				this.if_not_exists();
				}
				break;
			}
			this.state = 4763;
			_localctx._name = this.schema_qualified_name();
			this.state = 4766;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 4764;
				this.define_columns();
				}
				break;
			case PLpgSQLParser.PARTITION:
				{
				this.state = 4765;
				this.define_partition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4768;
			this.define_server();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public define_table(): Define_tableContext {
		let _localctx: Define_tableContext = new Define_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, PLpgSQLParser.RULE_define_table);
		try {
			this.state = 4773;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4770;
				this.define_columns();
				}
				break;
			case PLpgSQLParser.OF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4771;
				this.define_type();
				}
				break;
			case PLpgSQLParser.PARTITION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4772;
				this.define_partition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public define_partition(): Define_partitionContext {
		let _localctx: Define_partitionContext = new Define_partitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, PLpgSQLParser.RULE_define_partition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4775;
			this.match(PLpgSQLParser.PARTITION);
			this.state = 4776;
			this.match(PLpgSQLParser.OF);
			this.state = 4777;
			_localctx._parent_table = this.schema_qualified_name();
			this.state = 4779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 4778;
				this.list_of_type_column_def();
				}
			}

			this.state = 4781;
			this.for_values_bound();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_values_bound(): For_values_boundContext {
		let _localctx: For_values_boundContext = new For_values_boundContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, PLpgSQLParser.RULE_for_values_bound);
		try {
			this.state = 4787;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.FOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4783;
				this.match(PLpgSQLParser.FOR);
				this.state = 4784;
				this.match(PLpgSQLParser.VALUES);
				this.state = 4785;
				this.partition_bound_spec();
				}
				break;
			case PLpgSQLParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4786;
				this.match(PLpgSQLParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_bound_spec(): Partition_bound_specContext {
		let _localctx: Partition_bound_specContext = new Partition_bound_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, PLpgSQLParser.RULE_partition_bound_spec);
		let _la: number;
		try {
			this.state = 4814;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.IN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4789;
				this.match(PLpgSQLParser.IN);
				this.state = 4790;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 4791;
				this.vex(0);
				this.state = 4796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4792;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4793;
					this.vex(0);
					}
					}
					this.state = 4798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4799;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.FROM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4801;
				this.match(PLpgSQLParser.FROM);
				this.state = 4802;
				this.partition_bound_part();
				this.state = 4803;
				this.match(PLpgSQLParser.TO);
				this.state = 4804;
				this.partition_bound_part();
				}
				break;
			case PLpgSQLParser.WITH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4806;
				this.match(PLpgSQLParser.WITH);
				this.state = 4807;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 4808;
				this.match(PLpgSQLParser.MODULUS);
				this.state = 4809;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				this.state = 4810;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4811;
				this.match(PLpgSQLParser.REMAINDER);
				this.state = 4812;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				this.state = 4813;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_bound_part(): Partition_bound_partContext {
		let _localctx: Partition_bound_partContext = new Partition_bound_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, PLpgSQLParser.RULE_partition_bound_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4816;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4817;
			this.vex(0);
			this.state = 4822;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4818;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4819;
				this.vex(0);
				}
				}
				this.state = 4824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4825;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public define_columns(): Define_columnsContext {
		let _localctx: Define_columnsContext = new Define_columnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, PLpgSQLParser.RULE_define_columns);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4827;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & ((1 << (PLpgSQLParser.LIKE - 357)) | (1 << (PLpgSQLParser.CHECK - 357)) | (1 << (PLpgSQLParser.CONSTRAINT - 357)))) !== 0) || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (PLpgSQLParser.DEFAULT - 389)) | (1 << (PLpgSQLParser.FOREIGN - 389)) | (1 << (PLpgSQLParser.NOT - 389)) | (1 << (PLpgSQLParser.NULL - 389)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (PLpgSQLParser.PRIMARY - 422)) | (1 << (PLpgSQLParser.REFERENCES - 422)) | (1 << (PLpgSQLParser.UNIQUE - 422)) | (1 << (PLpgSQLParser.ALIGNMENT - 422)) | (1 << (PLpgSQLParser.BASETYPE - 422)) | (1 << (PLpgSQLParser.BUFFERS - 422)) | (1 << (PLpgSQLParser.BYPASSRLS - 422)) | (1 << (PLpgSQLParser.CANONICAL - 422)) | (1 << (PLpgSQLParser.CATEGORY - 422)) | (1 << (PLpgSQLParser.COLLATABLE - 422)) | (1 << (PLpgSQLParser.COMBINEFUNC - 422)) | (1 << (PLpgSQLParser.COMMUTATOR - 422)) | (1 << (PLpgSQLParser.CONNECT - 422)) | (1 << (PLpgSQLParser.COSTS - 422)))) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & ((1 << (PLpgSQLParser.CREATEDB - 454)) | (1 << (PLpgSQLParser.CREATEROLE - 454)) | (1 << (PLpgSQLParser.DESERIALFUNC - 454)) | (1 << (PLpgSQLParser.DETERMINISTIC - 454)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 454)) | (1 << (PLpgSQLParser.ELEMENT - 454)) | (1 << (PLpgSQLParser.EXTENDED - 454)) | (1 << (PLpgSQLParser.FINALFUNC - 454)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 454)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 454)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 454)) | (1 << (PLpgSQLParser.FORCE_NULL - 454)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 454)) | (1 << (PLpgSQLParser.FORMAT - 454)) | (1 << (PLpgSQLParser.GETTOKEN - 454)) | (1 << (PLpgSQLParser.HASH - 454)) | (1 << (PLpgSQLParser.HASHES - 454)) | (1 << (PLpgSQLParser.HEADLINE - 454)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 454)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 454)) | (1 << (PLpgSQLParser.INIT - 454)) | (1 << (PLpgSQLParser.INITCOND - 454)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 454)) | (1 << (PLpgSQLParser.JSON - 454)) | (1 << (PLpgSQLParser.LC_COLLATE - 454)) | (1 << (PLpgSQLParser.LC_CTYPE - 454)) | (1 << (PLpgSQLParser.LEFTARG - 454)) | (1 << (PLpgSQLParser.LEXIZE - 454)) | (1 << (PLpgSQLParser.LEXTYPES - 454)) | (1 << (PLpgSQLParser.LIST - 454)) | (1 << (PLpgSQLParser.LOCALE - 454)) | (1 << (PLpgSQLParser.LOGIN - 454)))) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & ((1 << (PLpgSQLParser.MAIN - 486)) | (1 << (PLpgSQLParser.MERGES - 486)) | (1 << (PLpgSQLParser.MFINALFUNC - 486)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 486)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 486)) | (1 << (PLpgSQLParser.MINITCOND - 486)) | (1 << (PLpgSQLParser.MINVFUNC - 486)) | (1 << (PLpgSQLParser.MODULUS - 486)) | (1 << (PLpgSQLParser.MSFUNC - 486)) | (1 << (PLpgSQLParser.MSSPACE - 486)) | (1 << (PLpgSQLParser.MSTYPE - 486)) | (1 << (PLpgSQLParser.NEGATOR - 486)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 486)) | (1 << (PLpgSQLParser.NOCREATEDB - 486)) | (1 << (PLpgSQLParser.NOCREATEROLE - 486)) | (1 << (PLpgSQLParser.NOINHERIT - 486)) | (1 << (PLpgSQLParser.NOLOGIN - 486)) | (1 << (PLpgSQLParser.NOREPLICATION - 486)) | (1 << (PLpgSQLParser.NOSUPERUSER - 486)) | (1 << (PLpgSQLParser.OUTPUT - 486)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 486)) | (1 << (PLpgSQLParser.PATH - 486)) | (1 << (PLpgSQLParser.PERMISSIVE - 486)) | (1 << (PLpgSQLParser.PLAIN - 486)) | (1 << (PLpgSQLParser.PREFERRED - 486)) | (1 << (PLpgSQLParser.PROVIDER - 486)) | (1 << (PLpgSQLParser.READ_ONLY - 486)) | (1 << (PLpgSQLParser.READ_WRITE - 486)) | (1 << (PLpgSQLParser.RECEIVE - 486)) | (1 << (PLpgSQLParser.REMAINDER - 486)) | (1 << (PLpgSQLParser.REPLICATION - 486)) | (1 << (PLpgSQLParser.RESTRICTED - 486)))) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & ((1 << (PLpgSQLParser.RESTRICTIVE - 518)) | (1 << (PLpgSQLParser.RIGHTARG - 518)) | (1 << (PLpgSQLParser.SAFE - 518)) | (1 << (PLpgSQLParser.SEND - 518)) | (1 << (PLpgSQLParser.SERIALFUNC - 518)) | (1 << (PLpgSQLParser.SETTINGS - 518)) | (1 << (PLpgSQLParser.SFUNC - 518)) | (1 << (PLpgSQLParser.SHAREABLE - 518)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 518)) | (1 << (PLpgSQLParser.SORTOP - 518)) | (1 << (PLpgSQLParser.SSPACE - 518)) | (1 << (PLpgSQLParser.STYPE - 518)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 518)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 518)) | (1 << (PLpgSQLParser.SUBTYPE - 518)) | (1 << (PLpgSQLParser.SUMMARY - 518)) | (1 << (PLpgSQLParser.SUPERUSER - 518)) | (1 << (PLpgSQLParser.TIMING - 518)) | (1 << (PLpgSQLParser.TYPMOD_IN - 518)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 518)) | (1 << (PLpgSQLParser.UNSAFE - 518)) | (1 << (PLpgSQLParser.USAGE - 518)) | (1 << (PLpgSQLParser.VARIABLE - 518)) | (1 << (PLpgSQLParser.YAML - 518)) | (1 << (PLpgSQLParser.ALIAS - 518)) | (1 << (PLpgSQLParser.ASSERT - 518)) | (1 << (PLpgSQLParser.CONSTANT - 518)) | (1 << (PLpgSQLParser.DATATYPE - 518)) | (1 << (PLpgSQLParser.DEBUG - 518)) | (1 << (PLpgSQLParser.DETAIL - 518)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 518)) | (1 << (PLpgSQLParser.ELSEIF - 518)))) !== 0) || ((((_la - 550)) & ~0x1F) === 0 && ((1 << (_la - 550)) & ((1 << (PLpgSQLParser.ELSIF - 550)) | (1 << (PLpgSQLParser.ERRCODE - 550)) | (1 << (PLpgSQLParser.EXIT - 550)) | (1 << (PLpgSQLParser.EXCEPTION - 550)) | (1 << (PLpgSQLParser.FOREACH - 550)) | (1 << (PLpgSQLParser.GET - 550)) | (1 << (PLpgSQLParser.HINT - 550)) | (1 << (PLpgSQLParser.INFO - 550)) | (1 << (PLpgSQLParser.LOG - 550)) | (1 << (PLpgSQLParser.LOOP - 550)) | (1 << (PLpgSQLParser.MESSAGE - 550)) | (1 << (PLpgSQLParser.NOTICE - 550)) | (1 << (PLpgSQLParser.OPEN - 550)) | (1 << (PLpgSQLParser.PERFORM - 550)) | (1 << (PLpgSQLParser.QUERY - 550)) | (1 << (PLpgSQLParser.RAISE - 550)) | (1 << (PLpgSQLParser.RECORD - 550)) | (1 << (PLpgSQLParser.RETURN - 550)) | (1 << (PLpgSQLParser.REVERSE - 550)) | (1 << (PLpgSQLParser.ROWTYPE - 550)) | (1 << (PLpgSQLParser.SLICE - 550)) | (1 << (PLpgSQLParser.SQLSTATE - 550)) | (1 << (PLpgSQLParser.STACKED - 550)) | (1 << (PLpgSQLParser.WARNING - 550)) | (1 << (PLpgSQLParser.WHILE - 550)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 4828;
				this.table_column_def();
				this.state = 4833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4829;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4830;
					this.table_column_def();
					}
					}
					this.state = 4835;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4838;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			this.state = 4841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INHERITS) {
				{
				this.state = 4839;
				this.match(PLpgSQLParser.INHERITS);
				this.state = 4840;
				this.names_in_parens();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public define_type(): Define_typeContext {
		let _localctx: Define_typeContext = new Define_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, PLpgSQLParser.RULE_define_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4843;
			this.match(PLpgSQLParser.OF);
			this.state = 4844;
			_localctx._type_name = this.data_type();
			this.state = 4846;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 4845;
				this.list_of_type_column_def();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_by(): Partition_byContext {
		let _localctx: Partition_byContext = new Partition_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, PLpgSQLParser.RULE_partition_by);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4848;
			this.match(PLpgSQLParser.PARTITION);
			this.state = 4849;
			this.match(PLpgSQLParser.BY);
			this.state = 4850;
			this.partition_method();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_method(): Partition_methodContext {
		let _localctx: Partition_methodContext = new Partition_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, PLpgSQLParser.RULE_partition_method);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4852;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.RANGE || _la === PLpgSQLParser.HASH || _la === PLpgSQLParser.LIST)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4853;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 4854;
			this.partition_column();
			this.state = 4859;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4855;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4856;
				this.partition_column();
				}
				}
				this.state = 4861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4862;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_column(): Partition_columnContext {
		let _localctx: Partition_columnContext = new Partition_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, PLpgSQLParser.RULE_partition_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4864;
			this.vex(0);
			this.state = 4866;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 4865;
				this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public define_server(): Define_serverContext {
		let _localctx: Define_serverContext = new Define_serverContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, PLpgSQLParser.RULE_define_server);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4868;
			this.match(PLpgSQLParser.SERVER);
			this.state = 4869;
			this.identifier();
			this.state = 4871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 4870;
				this.define_foreign_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public define_foreign_options(): Define_foreign_optionsContext {
		let _localctx: Define_foreign_optionsContext = new Define_foreign_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, PLpgSQLParser.RULE_define_foreign_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4873;
			this.match(PLpgSQLParser.OPTIONS);
			this.state = 4874;
			this.match(PLpgSQLParser.LEFT_PAREN);
			{
			this.state = 4875;
			this.foreign_option();
			this.state = 4880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4876;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4877;
				this.foreign_option();
				}
				}
				this.state = 4882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
			this.state = 4883;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreign_option(): Foreign_optionContext {
		let _localctx: Foreign_optionContext = new Foreign_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, PLpgSQLParser.RULE_foreign_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4886;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 591, this._ctx) ) {
			case 1:
				{
				this.state = 4885;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ADD || _la === PLpgSQLParser.DROP || _la === PLpgSQLParser.SET)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 4888;
			this.foreign_option_name();
			this.state = 4890;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.Character_String_Literal || _la === PLpgSQLParser.BeginDollarStringConstant) {
				{
				this.state = 4889;
				this.character_string();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreign_option_name(): Foreign_option_nameContext {
		let _localctx: Foreign_option_nameContext = new Foreign_option_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, PLpgSQLParser.RULE_foreign_option_name);
		try {
			this.state = 4894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4892;
				this.identifier();
				}
				break;
			case PLpgSQLParser.USER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4893;
				this.match(PLpgSQLParser.USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_type_column_def(): List_of_type_column_defContext {
		let _localctx: List_of_type_column_defContext = new List_of_type_column_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, PLpgSQLParser.RULE_list_of_type_column_def);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4896;
			this.match(PLpgSQLParser.LEFT_PAREN);
			{
			this.state = 4897;
			this.table_of_type_column_def();
			this.state = 4902;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 4898;
				this.match(PLpgSQLParser.COMMA);
				this.state = 4899;
				this.table_of_type_column_def();
				}
				}
				this.state = 4904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
			this.state = 4905;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_column_def(): Table_column_defContext {
		let _localctx: Table_column_defContext = new Table_column_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, PLpgSQLParser.RULE_table_column_def);
		let _la: number;
		try {
			this.state = 4917;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4907;
				this.table_column_definition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4908;
				_localctx._tabl_constraint = this.constraint_common();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4909;
				this.match(PLpgSQLParser.LIKE);
				this.state = 4910;
				this.schema_qualified_name();
				this.state = 4914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.EXCLUDING || _la === PLpgSQLParser.INCLUDING) {
					{
					{
					this.state = 4911;
					this.like_option();
					}
					}
					this.state = 4916;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_of_type_column_def(): Table_of_type_column_defContext {
		let _localctx: Table_of_type_column_defContext = new Table_of_type_column_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, PLpgSQLParser.RULE_table_of_type_column_def);
		let _la: number;
		try {
			this.state = 4931;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 599, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4919;
				this.identifier();
				this.state = 4922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WITH) {
					{
					this.state = 4920;
					this.match(PLpgSQLParser.WITH);
					this.state = 4921;
					this.match(PLpgSQLParser.OPTIONS);
					}
				}

				this.state = 4927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.EXCLUDE || _la === PLpgSQLParser.GENERATED || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & ((1 << (PLpgSQLParser.CHECK - 378)) | (1 << (PLpgSQLParser.CONSTRAINT - 378)) | (1 << (PLpgSQLParser.DEFAULT - 378)) | (1 << (PLpgSQLParser.FOREIGN - 378)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (PLpgSQLParser.NOT - 414)) | (1 << (PLpgSQLParser.NULL - 414)) | (1 << (PLpgSQLParser.PRIMARY - 414)) | (1 << (PLpgSQLParser.REFERENCES - 414)) | (1 << (PLpgSQLParser.UNIQUE - 414)))) !== 0)) {
					{
					{
					this.state = 4924;
					this.constraint_common();
					}
					}
					this.state = 4929;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4930;
				_localctx._tabl_constraint = this.constraint_common();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_column_definition(): Table_column_definitionContext {
		let _localctx: Table_column_definitionContext = new Table_column_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, PLpgSQLParser.RULE_table_column_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4933;
			this.identifier();
			this.state = 4934;
			this.data_type();
			this.state = 4936;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OPTIONS) {
				{
				this.state = 4935;
				this.define_foreign_options();
				}
			}

			this.state = 4939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COLLATE) {
				{
				this.state = 4938;
				this.collate_identifier();
				}
			}

			this.state = 4944;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.EXCLUDE || _la === PLpgSQLParser.GENERATED || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & ((1 << (PLpgSQLParser.CHECK - 378)) | (1 << (PLpgSQLParser.CONSTRAINT - 378)) | (1 << (PLpgSQLParser.DEFAULT - 378)) | (1 << (PLpgSQLParser.FOREIGN - 378)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (PLpgSQLParser.NOT - 414)) | (1 << (PLpgSQLParser.NULL - 414)) | (1 << (PLpgSQLParser.PRIMARY - 414)) | (1 << (PLpgSQLParser.REFERENCES - 414)) | (1 << (PLpgSQLParser.UNIQUE - 414)))) !== 0)) {
				{
				{
				this.state = 4941;
				this.constraint_common();
				}
				}
				this.state = 4946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public like_option(): Like_optionContext {
		let _localctx: Like_optionContext = new Like_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, PLpgSQLParser.RULE_like_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4947;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.EXCLUDING || _la === PLpgSQLParser.INCLUDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4948;
			_la = this._input.LA(1);
			if (!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (PLpgSQLParser.COMMENTS - 35)) | (1 << (PLpgSQLParser.CONSTRAINTS - 35)) | (1 << (PLpgSQLParser.DEFAULTS - 35)))) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & ((1 << (PLpgSQLParser.GENERATED - 94)) | (1 << (PLpgSQLParser.IDENTITY - 94)) | (1 << (PLpgSQLParser.INDEXES - 94)))) !== 0) || _la === PLpgSQLParser.STORAGE || _la === PLpgSQLParser.ALL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_common(): Constraint_commonContext {
		let _localctx: Constraint_commonContext = new Constraint_commonContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, PLpgSQLParser.RULE_constraint_common);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CONSTRAINT) {
				{
				this.state = 4950;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 4951;
				this.identifier();
				}
			}

			this.state = 4954;
			this.constr_body();
			this.state = 4956;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 604, this._ctx) ) {
			case 1:
				{
				this.state = 4955;
				this.table_deferrable();
				}
				break;
			}
			this.state = 4959;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INITIALLY) {
				{
				this.state = 4958;
				this.table_initialy_immed();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constr_body(): Constr_bodyContext {
		let _localctx: Constr_bodyContext = new Constr_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, PLpgSQLParser.RULE_constr_body);
		let _la: number;
		try {
			this.state = 5038;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 617, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4961;
				this.match(PLpgSQLParser.EXCLUDE);
				this.state = 4964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.USING) {
					{
					this.state = 4962;
					this.match(PLpgSQLParser.USING);
					this.state = 4963;
					_localctx._index_method = this.identifier();
					}
				}

				this.state = 4966;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 4967;
				this.sort_specifier();
				this.state = 4968;
				this.match(PLpgSQLParser.WITH);
				this.state = 4969;
				this.all_op();
				this.state = 4977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 4970;
					this.match(PLpgSQLParser.COMMA);
					this.state = 4971;
					this.sort_specifier();
					this.state = 4972;
					this.match(PLpgSQLParser.WITH);
					this.state = 4973;
					this.all_op();
					}
					}
					this.state = 4979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4980;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 4981;
				this.index_parameters();
				this.state = 4984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WHERE) {
					{
					this.state = 4982;
					_localctx._where = this.match(PLpgSQLParser.WHERE);
					this.state = 4983;
					_localctx._exp = this.vex(0);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOREIGN) {
					{
					this.state = 4986;
					this.match(PLpgSQLParser.FOREIGN);
					this.state = 4987;
					this.match(PLpgSQLParser.KEY);
					this.state = 4988;
					this.names_in_parens();
					}
				}

				this.state = 4991;
				this.match(PLpgSQLParser.REFERENCES);
				this.state = 4992;
				this.schema_qualified_name();
				this.state = 4994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 4993;
					_localctx._ref = this.names_in_parens();
					}
				}

				this.state = 5003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.MATCH || _la === PLpgSQLParser.ON) {
					{
					this.state = 5001;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.MATCH:
						{
						this.state = 4996;
						this.match(PLpgSQLParser.MATCH);
						this.state = 4997;
						_la = this._input.LA(1);
						if (!(_la === PLpgSQLParser.PARTIAL || _la === PLpgSQLParser.SIMPLE || _la === PLpgSQLParser.FULL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case PLpgSQLParser.ON:
						{
						this.state = 4998;
						this.match(PLpgSQLParser.ON);
						this.state = 4999;
						_la = this._input.LA(1);
						if (!(_la === PLpgSQLParser.DELETE || _la === PLpgSQLParser.UPDATE)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5000;
						this.action();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5005;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5006;
				this.match(PLpgSQLParser.CHECK);
				this.state = 5007;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5008;
				_localctx._expression = this.vex(0);
				this.state = 5009;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 5012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO) {
					{
					this.state = 5010;
					this.match(PLpgSQLParser.NO);
					this.state = 5011;
					this.match(PLpgSQLParser.INHERIT);
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 5014;
					this.match(PLpgSQLParser.NOT);
					}
				}

				this.state = 5017;
				this.match(PLpgSQLParser.NULL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5021;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.UNIQUE:
					{
					this.state = 5018;
					this.match(PLpgSQLParser.UNIQUE);
					}
					break;
				case PLpgSQLParser.PRIMARY:
					{
					this.state = 5019;
					this.match(PLpgSQLParser.PRIMARY);
					this.state = 5020;
					this.match(PLpgSQLParser.KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 5023;
					_localctx._col = this.names_in_parens();
					}
				}

				this.state = 5026;
				this.index_parameters();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5027;
				this.match(PLpgSQLParser.DEFAULT);
				this.state = 5028;
				_localctx._default_expr = this.vex(0);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5029;
				this.identity_body();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5030;
				this.match(PLpgSQLParser.GENERATED);
				this.state = 5031;
				this.match(PLpgSQLParser.ALWAYS);
				this.state = 5032;
				this.match(PLpgSQLParser.AS);
				this.state = 5033;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5034;
				this.vex(0);
				this.state = 5035;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 5036;
				this.match(PLpgSQLParser.STORED);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public all_op(): All_opContext {
		let _localctx: All_opContext = new All_opContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, PLpgSQLParser.RULE_all_op);
		try {
			this.state = 5053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.LESS_LESS:
			case PLpgSQLParser.GREATER_GREATER:
			case PLpgSQLParser.HASH_SIGN:
			case PLpgSQLParser.OP_CHARS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5040;
				this.op();
				}
				break;
			case PLpgSQLParser.EQUAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5041;
				this.match(PLpgSQLParser.EQUAL);
				}
				break;
			case PLpgSQLParser.NOT_EQUAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5042;
				this.match(PLpgSQLParser.NOT_EQUAL);
				}
				break;
			case PLpgSQLParser.LTH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5043;
				this.match(PLpgSQLParser.LTH);
				}
				break;
			case PLpgSQLParser.LEQ:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5044;
				this.match(PLpgSQLParser.LEQ);
				}
				break;
			case PLpgSQLParser.GTH:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5045;
				this.match(PLpgSQLParser.GTH);
				}
				break;
			case PLpgSQLParser.GEQ:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5046;
				this.match(PLpgSQLParser.GEQ);
				}
				break;
			case PLpgSQLParser.PLUS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5047;
				this.match(PLpgSQLParser.PLUS);
				}
				break;
			case PLpgSQLParser.MINUS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5048;
				this.match(PLpgSQLParser.MINUS);
				}
				break;
			case PLpgSQLParser.MULTIPLY:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5049;
				this.match(PLpgSQLParser.MULTIPLY);
				}
				break;
			case PLpgSQLParser.DIVIDE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5050;
				this.match(PLpgSQLParser.DIVIDE);
				}
				break;
			case PLpgSQLParser.MODULAR:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5051;
				this.match(PLpgSQLParser.MODULAR);
				}
				break;
			case PLpgSQLParser.EXP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5052;
				this.match(PLpgSQLParser.EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public all_simple_op(): All_simple_opContext {
		let _localctx: All_simple_opContext = new All_simple_opContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, PLpgSQLParser.RULE_all_simple_op);
		try {
			this.state = 5068;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LESS_LESS:
			case PLpgSQLParser.GREATER_GREATER:
			case PLpgSQLParser.HASH_SIGN:
			case PLpgSQLParser.OP_CHARS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5055;
				this.op_chars();
				}
				break;
			case PLpgSQLParser.EQUAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5056;
				this.match(PLpgSQLParser.EQUAL);
				}
				break;
			case PLpgSQLParser.NOT_EQUAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5057;
				this.match(PLpgSQLParser.NOT_EQUAL);
				}
				break;
			case PLpgSQLParser.LTH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5058;
				this.match(PLpgSQLParser.LTH);
				}
				break;
			case PLpgSQLParser.LEQ:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5059;
				this.match(PLpgSQLParser.LEQ);
				}
				break;
			case PLpgSQLParser.GTH:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5060;
				this.match(PLpgSQLParser.GTH);
				}
				break;
			case PLpgSQLParser.GEQ:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5061;
				this.match(PLpgSQLParser.GEQ);
				}
				break;
			case PLpgSQLParser.PLUS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5062;
				this.match(PLpgSQLParser.PLUS);
				}
				break;
			case PLpgSQLParser.MINUS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5063;
				this.match(PLpgSQLParser.MINUS);
				}
				break;
			case PLpgSQLParser.MULTIPLY:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5064;
				this.match(PLpgSQLParser.MULTIPLY);
				}
				break;
			case PLpgSQLParser.DIVIDE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5065;
				this.match(PLpgSQLParser.DIVIDE);
				}
				break;
			case PLpgSQLParser.MODULAR:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5066;
				this.match(PLpgSQLParser.MODULAR);
				}
				break;
			case PLpgSQLParser.EXP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5067;
				this.match(PLpgSQLParser.EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_chars(): Op_charsContext {
		let _localctx: Op_charsContext = new Op_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, PLpgSQLParser.RULE_op_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5070;
			_la = this._input.LA(1);
			if (!(((((_la - 601)) & ~0x1F) === 0 && ((1 << (_la - 601)) & ((1 << (PLpgSQLParser.LESS_LESS - 601)) | (1 << (PLpgSQLParser.GREATER_GREATER - 601)) | (1 << (PLpgSQLParser.HASH_SIGN - 601)) | (1 << (PLpgSQLParser.OP_CHARS - 601)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_parameters(): Index_parametersContext {
		let _localctx: Index_parametersContext = new Index_parametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, PLpgSQLParser.RULE_index_parameters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5073;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.INCLUDE) {
				{
				this.state = 5072;
				this.including_index();
				}
			}

			this.state = 5076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 5075;
				this.with_storage_parameter();
				}
			}

			this.state = 5084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 5078;
				this.match(PLpgSQLParser.USING);
				this.state = 5079;
				this.match(PLpgSQLParser.INDEX);
				this.state = 5082;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 622, this._ctx) ) {
				case 1:
					{
					this.state = 5080;
					this.table_space();
					}
					break;

				case 2:
					{
					this.state = 5081;
					this.schema_qualified_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public names_in_parens(): Names_in_parensContext {
		let _localctx: Names_in_parensContext = new Names_in_parensContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, PLpgSQLParser.RULE_names_in_parens);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5086;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5087;
			this.names_references();
			this.state = 5088;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public names_references(): Names_referencesContext {
		let _localctx: Names_referencesContext = new Names_referencesContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, PLpgSQLParser.RULE_names_references);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5090;
			this.schema_qualified_name();
			this.state = 5095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 5091;
				this.match(PLpgSQLParser.COMMA);
				this.state = 5092;
				this.schema_qualified_name();
				}
				}
				this.state = 5097;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storage_parameter(): Storage_parameterContext {
		let _localctx: Storage_parameterContext = new Storage_parameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, PLpgSQLParser.RULE_storage_parameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5098;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5099;
			this.storage_parameter_option();
			this.state = 5104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 5100;
				this.match(PLpgSQLParser.COMMA);
				this.state = 5101;
				this.storage_parameter_option();
				}
				}
				this.state = 5106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5107;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storage_parameter_option(): Storage_parameter_optionContext {
		let _localctx: Storage_parameter_optionContext = new Storage_parameter_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, PLpgSQLParser.RULE_storage_parameter_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5109;
			this.storage_parameter_name();
			this.state = 5112;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.EQUAL) {
				{
				this.state = 5110;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 5111;
				this.vex(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storage_parameter_name(): Storage_parameter_nameContext {
		let _localctx: Storage_parameter_nameContext = new Storage_parameter_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, PLpgSQLParser.RULE_storage_parameter_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5114;
			this.col_label();
			this.state = 5117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DOT) {
				{
				this.state = 5115;
				this.match(PLpgSQLParser.DOT);
				this.state = 5116;
				this.col_label();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_storage_parameter(): With_storage_parameterContext {
		let _localctx: With_storage_parameterContext = new With_storage_parameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, PLpgSQLParser.RULE_with_storage_parameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5119;
			this.match(PLpgSQLParser.WITH);
			this.state = 5120;
			this.storage_parameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storage_parameter_oid(): Storage_parameter_oidContext {
		let _localctx: Storage_parameter_oidContext = new Storage_parameter_oidContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, PLpgSQLParser.RULE_storage_parameter_oid);
		try {
			this.state = 5127;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 628, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5122;
				this.with_storage_parameter();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 5123;
				this.match(PLpgSQLParser.WITH);
				this.state = 5124;
				this.match(PLpgSQLParser.OIDS);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 5125;
				this.match(PLpgSQLParser.WITHOUT);
				this.state = 5126;
				this.match(PLpgSQLParser.OIDS);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_commit(): On_commitContext {
		let _localctx: On_commitContext = new On_commitContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, PLpgSQLParser.RULE_on_commit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5129;
			this.match(PLpgSQLParser.ON);
			this.state = 5130;
			this.match(PLpgSQLParser.COMMIT);
			this.state = 5136;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.PRESERVE:
				{
				this.state = 5131;
				this.match(PLpgSQLParser.PRESERVE);
				this.state = 5132;
				this.match(PLpgSQLParser.ROWS);
				}
				break;
			case PLpgSQLParser.DELETE:
				{
				this.state = 5133;
				this.match(PLpgSQLParser.DELETE);
				this.state = 5134;
				this.match(PLpgSQLParser.ROWS);
				}
				break;
			case PLpgSQLParser.DROP:
				{
				this.state = 5135;
				this.match(PLpgSQLParser.DROP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_space(): Table_spaceContext {
		let _localctx: Table_spaceContext = new Table_spaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, PLpgSQLParser.RULE_table_space);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5138;
			this.match(PLpgSQLParser.TABLESPACE);
			this.state = 5139;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public action(): ActionContext {
		let _localctx: ActionContext = new ActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, PLpgSQLParser.RULE_action);
		let _la: number;
		try {
			this.state = 5146;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.RESTRICT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5141;
				this.cascade_restrict();
				}
				break;
			case PLpgSQLParser.SET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5142;
				this.match(PLpgSQLParser.SET);
				this.state = 5143;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.DEFAULT || _la === PLpgSQLParser.NULL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PLpgSQLParser.NO:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5144;
				this.match(PLpgSQLParser.NO);
				this.state = 5145;
				this.match(PLpgSQLParser.ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public owner_to(): Owner_toContext {
		let _localctx: Owner_toContext = new Owner_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, PLpgSQLParser.RULE_owner_to);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5148;
			this.match(PLpgSQLParser.OWNER);
			this.state = 5149;
			this.match(PLpgSQLParser.TO);
			this.state = 5153;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 5150;
				_localctx._name = this.identifier();
				}
				break;
			case PLpgSQLParser.CURRENT_USER:
				{
				this.state = 5151;
				this.match(PLpgSQLParser.CURRENT_USER);
				}
				break;
			case PLpgSQLParser.SESSION_USER:
				{
				this.state = 5152;
				this.match(PLpgSQLParser.SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_to(): Rename_toContext {
		let _localctx: Rename_toContext = new Rename_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, PLpgSQLParser.RULE_rename_to);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5155;
			this.match(PLpgSQLParser.RENAME);
			this.state = 5156;
			this.match(PLpgSQLParser.TO);
			this.state = 5157;
			_localctx._name = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_schema(): Set_schemaContext {
		let _localctx: Set_schemaContext = new Set_schemaContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, PLpgSQLParser.RULE_set_schema);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5159;
			this.match(PLpgSQLParser.SET);
			this.state = 5160;
			this.match(PLpgSQLParser.SCHEMA);
			this.state = 5161;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_column_privilege(): Table_column_privilegeContext {
		let _localctx: Table_column_privilegeContext = new Table_column_privilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, PLpgSQLParser.RULE_table_column_privilege);
		let _la: number;
		try {
			this.state = 5174;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.SELECT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5163;
				this.match(PLpgSQLParser.SELECT);
				}
				break;
			case PLpgSQLParser.INSERT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5164;
				this.match(PLpgSQLParser.INSERT);
				}
				break;
			case PLpgSQLParser.UPDATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5165;
				this.match(PLpgSQLParser.UPDATE);
				}
				break;
			case PLpgSQLParser.DELETE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5166;
				this.match(PLpgSQLParser.DELETE);
				}
				break;
			case PLpgSQLParser.TRUNCATE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5167;
				this.match(PLpgSQLParser.TRUNCATE);
				}
				break;
			case PLpgSQLParser.REFERENCES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5168;
				this.match(PLpgSQLParser.REFERENCES);
				}
				break;
			case PLpgSQLParser.TRIGGER:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5169;
				this.match(PLpgSQLParser.TRIGGER);
				}
				break;
			case PLpgSQLParser.ALL:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5170;
				this.match(PLpgSQLParser.ALL);
				this.state = 5172;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PRIVILEGES) {
					{
					this.state = 5171;
					this.match(PLpgSQLParser.PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_select_update(): Usage_select_updateContext {
		let _localctx: Usage_select_updateContext = new Usage_select_updateContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, PLpgSQLParser.RULE_usage_select_update);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5176;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.UPDATE || _la === PLpgSQLParser.SELECT || _la === PLpgSQLParser.USAGE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_by_columns(): Partition_by_columnsContext {
		let _localctx: Partition_by_columnsContext = new Partition_by_columnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, PLpgSQLParser.RULE_partition_by_columns);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5178;
			this.match(PLpgSQLParser.PARTITION);
			this.state = 5179;
			this.match(PLpgSQLParser.BY);
			this.state = 5180;
			this.vex(0);
			this.state = 5185;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 5181;
				this.match(PLpgSQLParser.COMMA);
				this.state = 5182;
				this.vex(0);
				}
				}
				this.state = 5187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cascade_restrict(): Cascade_restrictContext {
		let _localctx: Cascade_restrictContext = new Cascade_restrictContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, PLpgSQLParser.RULE_cascade_restrict);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5188;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collate_identifier(): Collate_identifierContext {
		let _localctx: Collate_identifierContext = new Collate_identifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, PLpgSQLParser.RULE_collate_identifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5190;
			this.match(PLpgSQLParser.COLLATE);
			this.state = 5191;
			_localctx._collation = this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indirection_var(): Indirection_varContext {
		let _localctx: Indirection_varContext = new Indirection_varContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, PLpgSQLParser.RULE_indirection_var);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5195;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 5193;
				this.identifier();
				}
				break;
			case PLpgSQLParser.DOLLAR_NUMBER:
				{
				this.state = 5194;
				this.dollar_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5198;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 636, this._ctx) ) {
			case 1:
				{
				this.state = 5197;
				this.indirection_list();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dollar_number(): Dollar_numberContext {
		let _localctx: Dollar_numberContext = new Dollar_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, PLpgSQLParser.RULE_dollar_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5200;
			this.match(PLpgSQLParser.DOLLAR_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indirection_list(): Indirection_listContext {
		let _localctx: Indirection_listContext = new Indirection_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, PLpgSQLParser.RULE_indirection_list);
		try {
			let _alt: number;
			this.state = 5215;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 639, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5203;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5202;
						this.indirection();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5205;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5210;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 638, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5207;
						this.indirection();
						}
						}
					}
					this.state = 5212;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 638, this._ctx);
				}
				this.state = 5213;
				this.match(PLpgSQLParser.DOT);
				this.state = 5214;
				this.match(PLpgSQLParser.MULTIPLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indirection(): IndirectionContext {
		let _localctx: IndirectionContext = new IndirectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, PLpgSQLParser.RULE_indirection);
		let _la: number;
		try {
			this.state = 5232;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 642, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5217;
				this.match(PLpgSQLParser.DOT);
				this.state = 5218;
				this.col_label();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5219;
				this.match(PLpgSQLParser.LEFT_BRACKET);
				this.state = 5220;
				this.vex(0);
				this.state = 5221;
				this.match(PLpgSQLParser.RIGHT_BRACKET);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5223;
				this.match(PLpgSQLParser.LEFT_BRACKET);
				this.state = 5225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
					{
					this.state = 5224;
					this.vex(0);
					}
				}

				this.state = 5227;
				this.match(PLpgSQLParser.COLON);
				this.state = 5229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
					{
					this.state = 5228;
					this.vex(0);
					}
				}

				this.state = 5231;
				this.match(PLpgSQLParser.RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_function_statement(): Drop_function_statementContext {
		let _localctx: Drop_function_statementContext = new Drop_function_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, PLpgSQLParser.RULE_drop_function_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5234;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.AGGREGATE || _la === PLpgSQLParser.FUNCTION || _la === PLpgSQLParser.PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5236;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 643, this._ctx) ) {
			case 1:
				{
				this.state = 5235;
				this.if_exists();
				}
				break;
			}
			this.state = 5238;
			_localctx._name = this.schema_qualified_name();
			this.state = 5240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 5239;
				this.function_args();
				}
			}

			this.state = 5243;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 5242;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_trigger_statement(): Drop_trigger_statementContext {
		let _localctx: Drop_trigger_statementContext = new Drop_trigger_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, PLpgSQLParser.RULE_drop_trigger_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5245;
			this.match(PLpgSQLParser.TRIGGER);
			this.state = 5247;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 646, this._ctx) ) {
			case 1:
				{
				this.state = 5246;
				this.if_exists();
				}
				break;
			}
			this.state = 5249;
			_localctx._name = this.identifier();
			this.state = 5250;
			this.match(PLpgSQLParser.ON);
			this.state = 5251;
			_localctx._table_name = this.schema_qualified_name();
			this.state = 5253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 5252;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_rule_statement(): Drop_rule_statementContext {
		let _localctx: Drop_rule_statementContext = new Drop_rule_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, PLpgSQLParser.RULE_drop_rule_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5255;
			this.match(PLpgSQLParser.RULE);
			this.state = 5257;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 648, this._ctx) ) {
			case 1:
				{
				this.state = 5256;
				this.if_exists();
				}
				break;
			}
			this.state = 5259;
			_localctx._name = this.identifier();
			this.state = 5260;
			this.match(PLpgSQLParser.ON);
			this.state = 5261;
			this.schema_qualified_name();
			this.state = 5263;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 5262;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_statements(): Drop_statementsContext {
		let _localctx: Drop_statementsContext = new Drop_statementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, PLpgSQLParser.RULE_drop_statements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5307;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 654, this._ctx) ) {
			case 1:
				{
				this.state = 5265;
				this.match(PLpgSQLParser.ACCESS);
				this.state = 5266;
				this.match(PLpgSQLParser.METHOD);
				}
				break;

			case 2:
				{
				this.state = 5267;
				this.match(PLpgSQLParser.COLLATION);
				}
				break;

			case 3:
				{
				this.state = 5268;
				this.match(PLpgSQLParser.CONVERSION);
				}
				break;

			case 4:
				{
				this.state = 5269;
				this.match(PLpgSQLParser.DATABASE);
				}
				break;

			case 5:
				{
				this.state = 5270;
				this.match(PLpgSQLParser.DOMAIN);
				}
				break;

			case 6:
				{
				this.state = 5271;
				this.match(PLpgSQLParser.EVENT);
				this.state = 5272;
				this.match(PLpgSQLParser.TRIGGER);
				}
				break;

			case 7:
				{
				this.state = 5273;
				this.match(PLpgSQLParser.EXTENSION);
				}
				break;

			case 8:
				{
				this.state = 5274;
				this.match(PLpgSQLParser.GROUP);
				}
				break;

			case 9:
				{
				this.state = 5276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOREIGN) {
					{
					this.state = 5275;
					this.match(PLpgSQLParser.FOREIGN);
					}
				}

				this.state = 5278;
				this.match(PLpgSQLParser.TABLE);
				}
				break;

			case 10:
				{
				this.state = 5279;
				this.match(PLpgSQLParser.FOREIGN);
				this.state = 5280;
				this.match(PLpgSQLParser.DATA);
				this.state = 5281;
				this.match(PLpgSQLParser.WRAPPER);
				}
				break;

			case 11:
				{
				this.state = 5282;
				this.match(PLpgSQLParser.INDEX);
				this.state = 5284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CONCURRENTLY) {
					{
					this.state = 5283;
					this.match(PLpgSQLParser.CONCURRENTLY);
					}
				}

				}
				break;

			case 12:
				{
				this.state = 5287;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.MATERIALIZED) {
					{
					this.state = 5286;
					this.match(PLpgSQLParser.MATERIALIZED);
					}
				}

				this.state = 5289;
				this.match(PLpgSQLParser.VIEW);
				}
				break;

			case 13:
				{
				this.state = 5291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PROCEDURAL) {
					{
					this.state = 5290;
					this.match(PLpgSQLParser.PROCEDURAL);
					}
				}

				this.state = 5293;
				this.match(PLpgSQLParser.LANGUAGE);
				}
				break;

			case 14:
				{
				this.state = 5294;
				this.match(PLpgSQLParser.PUBLICATION);
				}
				break;

			case 15:
				{
				this.state = 5295;
				this.match(PLpgSQLParser.ROLE);
				}
				break;

			case 16:
				{
				this.state = 5296;
				this.match(PLpgSQLParser.SCHEMA);
				}
				break;

			case 17:
				{
				this.state = 5297;
				this.match(PLpgSQLParser.SEQUENCE);
				}
				break;

			case 18:
				{
				this.state = 5298;
				this.match(PLpgSQLParser.SERVER);
				}
				break;

			case 19:
				{
				this.state = 5299;
				this.match(PLpgSQLParser.STATISTICS);
				}
				break;

			case 20:
				{
				this.state = 5300;
				this.match(PLpgSQLParser.SUBSCRIPTION);
				}
				break;

			case 21:
				{
				this.state = 5301;
				this.match(PLpgSQLParser.TABLESPACE);
				}
				break;

			case 22:
				{
				this.state = 5302;
				this.match(PLpgSQLParser.TYPE);
				}
				break;

			case 23:
				{
				this.state = 5303;
				this.match(PLpgSQLParser.TEXT);
				this.state = 5304;
				this.match(PLpgSQLParser.SEARCH);
				this.state = 5305;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONFIGURATION || _la === PLpgSQLParser.DICTIONARY || _la === PLpgSQLParser.PARSER || _la === PLpgSQLParser.TEMPLATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 24:
				{
				this.state = 5306;
				this.match(PLpgSQLParser.USER);
				}
				break;
			}
			this.state = 5309;
			this.if_exist_names_restrict_cascade();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_exist_names_restrict_cascade(): If_exist_names_restrict_cascadeContext {
		let _localctx: If_exist_names_restrict_cascadeContext = new If_exist_names_restrict_cascadeContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, PLpgSQLParser.RULE_if_exist_names_restrict_cascade);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5312;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 655, this._ctx) ) {
			case 1:
				{
				this.state = 5311;
				this.if_exists();
				}
				break;
			}
			this.state = 5314;
			this.names_references();
			this.state = 5316;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 5315;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public id_token(): Id_tokenContext {
		let _localctx: Id_tokenContext = new Id_tokenContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, PLpgSQLParser.RULE_id_token);
		try {
			this.state = 5321;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5318;
				this.match(PLpgSQLParser.Identifier);
				}
				break;
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5319;
				this.match(PLpgSQLParser.QuotedIdentifier);
				}
				break;
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5320;
				this.tokens_nonkeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, PLpgSQLParser.RULE_identifier);
		try {
			this.state = 5326;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5323;
				this.id_token();
				}
				break;
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5324;
				this.tokens_nonreserved();
				}
				break;
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5325;
				this.tokens_nonreserved_except_function_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_nontype(): Identifier_nontypeContext {
		let _localctx: Identifier_nontypeContext = new Identifier_nontypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, PLpgSQLParser.RULE_identifier_nontype);
		try {
			this.state = 5331;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5328;
				this.id_token();
				}
				break;
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5329;
				this.tokens_nonreserved();
				}
				break;
			case PLpgSQLParser.AUTHORIZATION:
			case PLpgSQLParser.BINARY:
			case PLpgSQLParser.COLLATION:
			case PLpgSQLParser.CONCURRENTLY:
			case PLpgSQLParser.CROSS:
			case PLpgSQLParser.CURRENT_SCHEMA:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.ILIKE:
			case PLpgSQLParser.INNER:
			case PLpgSQLParser.IS:
			case PLpgSQLParser.ISNULL:
			case PLpgSQLParser.JOIN:
			case PLpgSQLParser.LEFT:
			case PLpgSQLParser.LIKE:
			case PLpgSQLParser.NATURAL:
			case PLpgSQLParser.NOTNULL:
			case PLpgSQLParser.OUTER:
			case PLpgSQLParser.OVERLAPS:
			case PLpgSQLParser.RIGHT:
			case PLpgSQLParser.SIMILAR:
			case PLpgSQLParser.TABLESAMPLE:
			case PLpgSQLParser.VERBOSE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5330;
				this.tokens_reserved_except_function_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public col_label(): Col_labelContext {
		let _localctx: Col_labelContext = new Col_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, PLpgSQLParser.RULE_col_label);
		try {
			this.state = 5338;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5333;
				this.id_token();
				}
				break;
			case PLpgSQLParser.ALL:
			case PLpgSQLParser.ANALYSE:
			case PLpgSQLParser.ANALYZE:
			case PLpgSQLParser.AND:
			case PLpgSQLParser.ANY:
			case PLpgSQLParser.ARRAY:
			case PLpgSQLParser.AS:
			case PLpgSQLParser.ASC:
			case PLpgSQLParser.ASYMMETRIC:
			case PLpgSQLParser.BOTH:
			case PLpgSQLParser.CASE:
			case PLpgSQLParser.CAST:
			case PLpgSQLParser.CHECK:
			case PLpgSQLParser.COLLATE:
			case PLpgSQLParser.COLUMN:
			case PLpgSQLParser.CONSTRAINT:
			case PLpgSQLParser.CREATE:
			case PLpgSQLParser.CURRENT_CATALOG:
			case PLpgSQLParser.CURRENT_DATE:
			case PLpgSQLParser.CURRENT_ROLE:
			case PLpgSQLParser.CURRENT_TIME:
			case PLpgSQLParser.CURRENT_TIMESTAMP:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.DEFAULT:
			case PLpgSQLParser.DEFERRABLE:
			case PLpgSQLParser.DESC:
			case PLpgSQLParser.DISTINCT:
			case PLpgSQLParser.DO:
			case PLpgSQLParser.ELSE:
			case PLpgSQLParser.END:
			case PLpgSQLParser.EXCEPT:
			case PLpgSQLParser.FALSE:
			case PLpgSQLParser.FETCH:
			case PLpgSQLParser.FOR:
			case PLpgSQLParser.FOREIGN:
			case PLpgSQLParser.FROM:
			case PLpgSQLParser.GRANT:
			case PLpgSQLParser.GROUP:
			case PLpgSQLParser.HAVING:
			case PLpgSQLParser.IN:
			case PLpgSQLParser.INITIALLY:
			case PLpgSQLParser.INTERSECT:
			case PLpgSQLParser.INTO:
			case PLpgSQLParser.LATERAL:
			case PLpgSQLParser.LEADING:
			case PLpgSQLParser.LIMIT:
			case PLpgSQLParser.LOCALTIME:
			case PLpgSQLParser.LOCALTIMESTAMP:
			case PLpgSQLParser.NOT:
			case PLpgSQLParser.NULL:
			case PLpgSQLParser.OFFSET:
			case PLpgSQLParser.ON:
			case PLpgSQLParser.ONLY:
			case PLpgSQLParser.OR:
			case PLpgSQLParser.ORDER:
			case PLpgSQLParser.PLACING:
			case PLpgSQLParser.PRIMARY:
			case PLpgSQLParser.REFERENCES:
			case PLpgSQLParser.RETURNING:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.SOME:
			case PLpgSQLParser.SYMMETRIC:
			case PLpgSQLParser.TABLE:
			case PLpgSQLParser.THEN:
			case PLpgSQLParser.TO:
			case PLpgSQLParser.TRAILING:
			case PLpgSQLParser.TRUE:
			case PLpgSQLParser.UNION:
			case PLpgSQLParser.UNIQUE:
			case PLpgSQLParser.USER:
			case PLpgSQLParser.USING:
			case PLpgSQLParser.VARIADIC:
			case PLpgSQLParser.WHEN:
			case PLpgSQLParser.WHERE:
			case PLpgSQLParser.WINDOW:
			case PLpgSQLParser.WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5334;
				this.tokens_reserved();
				}
				break;
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5335;
				this.tokens_nonreserved();
				}
				break;
			case PLpgSQLParser.AUTHORIZATION:
			case PLpgSQLParser.BINARY:
			case PLpgSQLParser.COLLATION:
			case PLpgSQLParser.CONCURRENTLY:
			case PLpgSQLParser.CROSS:
			case PLpgSQLParser.CURRENT_SCHEMA:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.ILIKE:
			case PLpgSQLParser.INNER:
			case PLpgSQLParser.IS:
			case PLpgSQLParser.ISNULL:
			case PLpgSQLParser.JOIN:
			case PLpgSQLParser.LEFT:
			case PLpgSQLParser.LIKE:
			case PLpgSQLParser.NATURAL:
			case PLpgSQLParser.NOTNULL:
			case PLpgSQLParser.OUTER:
			case PLpgSQLParser.OVERLAPS:
			case PLpgSQLParser.RIGHT:
			case PLpgSQLParser.SIMILAR:
			case PLpgSQLParser.TABLESAMPLE:
			case PLpgSQLParser.VERBOSE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5336;
				this.tokens_reserved_except_function_type();
				}
				break;
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5337;
				this.tokens_nonreserved_except_function_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tokens_nonreserved(): Tokens_nonreservedContext {
		let _localctx: Tokens_nonreservedContext = new Tokens_nonreservedContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, PLpgSQLParser.RULE_tokens_nonreserved);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5340;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tokens_nonreserved_except_function_type(): Tokens_nonreserved_except_function_typeContext {
		let _localctx: Tokens_nonreserved_except_function_typeContext = new Tokens_nonreserved_except_function_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, PLpgSQLParser.RULE_tokens_nonreserved_except_function_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5342;
			_la = this._input.LA(1);
			if (!(((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PLpgSQLParser.BETWEEN - 293)) | (1 << (PLpgSQLParser.BIGINT - 293)) | (1 << (PLpgSQLParser.BIT - 293)) | (1 << (PLpgSQLParser.BOOLEAN - 293)) | (1 << (PLpgSQLParser.CHAR - 293)) | (1 << (PLpgSQLParser.CHARACTER - 293)) | (1 << (PLpgSQLParser.COALESCE - 293)) | (1 << (PLpgSQLParser.DEC - 293)) | (1 << (PLpgSQLParser.DECIMAL - 293)) | (1 << (PLpgSQLParser.EXISTS - 293)) | (1 << (PLpgSQLParser.EXTRACT - 293)) | (1 << (PLpgSQLParser.FLOAT - 293)) | (1 << (PLpgSQLParser.GREATEST - 293)) | (1 << (PLpgSQLParser.GROUPING - 293)) | (1 << (PLpgSQLParser.INOUT - 293)) | (1 << (PLpgSQLParser.INT - 293)) | (1 << (PLpgSQLParser.INTEGER - 293)) | (1 << (PLpgSQLParser.INTERVAL - 293)) | (1 << (PLpgSQLParser.LEAST - 293)) | (1 << (PLpgSQLParser.NATIONAL - 293)) | (1 << (PLpgSQLParser.NCHAR - 293)) | (1 << (PLpgSQLParser.NONE - 293)) | (1 << (PLpgSQLParser.NULLIF - 293)) | (1 << (PLpgSQLParser.NUMERIC - 293)) | (1 << (PLpgSQLParser.OUT - 293)) | (1 << (PLpgSQLParser.OVERLAY - 293)) | (1 << (PLpgSQLParser.POSITION - 293)) | (1 << (PLpgSQLParser.PRECISION - 293)) | (1 << (PLpgSQLParser.REAL - 293)) | (1 << (PLpgSQLParser.ROW - 293)) | (1 << (PLpgSQLParser.SETOF - 293)) | (1 << (PLpgSQLParser.SMALLINT - 293)))) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & ((1 << (PLpgSQLParser.SUBSTRING - 325)) | (1 << (PLpgSQLParser.TIME - 325)) | (1 << (PLpgSQLParser.TIMESTAMP - 325)) | (1 << (PLpgSQLParser.TREAT - 325)) | (1 << (PLpgSQLParser.TRIM - 325)) | (1 << (PLpgSQLParser.VALUES - 325)) | (1 << (PLpgSQLParser.VARCHAR - 325)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 325)) | (1 << (PLpgSQLParser.XMLCONCAT - 325)) | (1 << (PLpgSQLParser.XMLELEMENT - 325)) | (1 << (PLpgSQLParser.XMLEXISTS - 325)) | (1 << (PLpgSQLParser.XMLFOREST - 325)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 325)) | (1 << (PLpgSQLParser.XMLPARSE - 325)) | (1 << (PLpgSQLParser.XMLPI - 325)) | (1 << (PLpgSQLParser.XMLROOT - 325)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 325)) | (1 << (PLpgSQLParser.XMLTABLE - 325)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tokens_reserved_except_function_type(): Tokens_reserved_except_function_typeContext {
		let _localctx: Tokens_reserved_except_function_typeContext = new Tokens_reserved_except_function_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, PLpgSQLParser.RULE_tokens_reserved_except_function_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5344;
			_la = this._input.LA(1);
			if (!(((((_la - 343)) & ~0x1F) === 0 && ((1 << (_la - 343)) & ((1 << (PLpgSQLParser.AUTHORIZATION - 343)) | (1 << (PLpgSQLParser.BINARY - 343)) | (1 << (PLpgSQLParser.COLLATION - 343)) | (1 << (PLpgSQLParser.CONCURRENTLY - 343)) | (1 << (PLpgSQLParser.CROSS - 343)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 343)) | (1 << (PLpgSQLParser.FREEZE - 343)) | (1 << (PLpgSQLParser.FULL - 343)) | (1 << (PLpgSQLParser.ILIKE - 343)) | (1 << (PLpgSQLParser.INNER - 343)) | (1 << (PLpgSQLParser.IS - 343)) | (1 << (PLpgSQLParser.ISNULL - 343)) | (1 << (PLpgSQLParser.JOIN - 343)) | (1 << (PLpgSQLParser.LEFT - 343)) | (1 << (PLpgSQLParser.LIKE - 343)) | (1 << (PLpgSQLParser.NATURAL - 343)) | (1 << (PLpgSQLParser.NOTNULL - 343)) | (1 << (PLpgSQLParser.OUTER - 343)) | (1 << (PLpgSQLParser.OVERLAPS - 343)) | (1 << (PLpgSQLParser.RIGHT - 343)) | (1 << (PLpgSQLParser.SIMILAR - 343)) | (1 << (PLpgSQLParser.TABLESAMPLE - 343)) | (1 << (PLpgSQLParser.VERBOSE - 343)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tokens_reserved(): Tokens_reservedContext {
		let _localctx: Tokens_reservedContext = new Tokens_reservedContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, PLpgSQLParser.RULE_tokens_reserved);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5346;
			_la = this._input.LA(1);
			if (!(((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PLpgSQLParser.ALL - 366)) | (1 << (PLpgSQLParser.ANALYSE - 366)) | (1 << (PLpgSQLParser.ANALYZE - 366)) | (1 << (PLpgSQLParser.AND - 366)) | (1 << (PLpgSQLParser.ANY - 366)) | (1 << (PLpgSQLParser.ARRAY - 366)) | (1 << (PLpgSQLParser.AS - 366)) | (1 << (PLpgSQLParser.ASC - 366)) | (1 << (PLpgSQLParser.ASYMMETRIC - 366)) | (1 << (PLpgSQLParser.BOTH - 366)) | (1 << (PLpgSQLParser.CASE - 366)) | (1 << (PLpgSQLParser.CAST - 366)) | (1 << (PLpgSQLParser.CHECK - 366)) | (1 << (PLpgSQLParser.COLLATE - 366)) | (1 << (PLpgSQLParser.COLUMN - 366)) | (1 << (PLpgSQLParser.CONSTRAINT - 366)) | (1 << (PLpgSQLParser.CREATE - 366)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 366)) | (1 << (PLpgSQLParser.CURRENT_DATE - 366)) | (1 << (PLpgSQLParser.CURRENT_ROLE - 366)) | (1 << (PLpgSQLParser.CURRENT_TIME - 366)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 366)) | (1 << (PLpgSQLParser.CURRENT_USER - 366)) | (1 << (PLpgSQLParser.DEFAULT - 366)) | (1 << (PLpgSQLParser.DEFERRABLE - 366)) | (1 << (PLpgSQLParser.DESC - 366)) | (1 << (PLpgSQLParser.DISTINCT - 366)) | (1 << (PLpgSQLParser.DO - 366)) | (1 << (PLpgSQLParser.ELSE - 366)) | (1 << (PLpgSQLParser.END - 366)) | (1 << (PLpgSQLParser.EXCEPT - 366)) | (1 << (PLpgSQLParser.FALSE - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PLpgSQLParser.FETCH - 398)) | (1 << (PLpgSQLParser.FOR - 398)) | (1 << (PLpgSQLParser.FOREIGN - 398)) | (1 << (PLpgSQLParser.FROM - 398)) | (1 << (PLpgSQLParser.GRANT - 398)) | (1 << (PLpgSQLParser.GROUP - 398)) | (1 << (PLpgSQLParser.HAVING - 398)) | (1 << (PLpgSQLParser.IN - 398)) | (1 << (PLpgSQLParser.INITIALLY - 398)) | (1 << (PLpgSQLParser.INTERSECT - 398)) | (1 << (PLpgSQLParser.INTO - 398)) | (1 << (PLpgSQLParser.LATERAL - 398)) | (1 << (PLpgSQLParser.LEADING - 398)) | (1 << (PLpgSQLParser.LIMIT - 398)) | (1 << (PLpgSQLParser.LOCALTIME - 398)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 398)) | (1 << (PLpgSQLParser.NOT - 398)) | (1 << (PLpgSQLParser.NULL - 398)) | (1 << (PLpgSQLParser.OFFSET - 398)) | (1 << (PLpgSQLParser.ON - 398)) | (1 << (PLpgSQLParser.ONLY - 398)) | (1 << (PLpgSQLParser.OR - 398)) | (1 << (PLpgSQLParser.ORDER - 398)) | (1 << (PLpgSQLParser.PLACING - 398)) | (1 << (PLpgSQLParser.PRIMARY - 398)) | (1 << (PLpgSQLParser.REFERENCES - 398)) | (1 << (PLpgSQLParser.RETURNING - 398)) | (1 << (PLpgSQLParser.SELECT - 398)) | (1 << (PLpgSQLParser.SESSION_USER - 398)) | (1 << (PLpgSQLParser.SOME - 398)) | (1 << (PLpgSQLParser.SYMMETRIC - 398)) | (1 << (PLpgSQLParser.TABLE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PLpgSQLParser.THEN - 430)) | (1 << (PLpgSQLParser.TO - 430)) | (1 << (PLpgSQLParser.TRAILING - 430)) | (1 << (PLpgSQLParser.TRUE - 430)) | (1 << (PLpgSQLParser.UNION - 430)) | (1 << (PLpgSQLParser.UNIQUE - 430)) | (1 << (PLpgSQLParser.USER - 430)) | (1 << (PLpgSQLParser.USING - 430)) | (1 << (PLpgSQLParser.VARIADIC - 430)) | (1 << (PLpgSQLParser.WHEN - 430)) | (1 << (PLpgSQLParser.WHERE - 430)) | (1 << (PLpgSQLParser.WINDOW - 430)) | (1 << (PLpgSQLParser.WITH - 430)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tokens_nonkeyword(): Tokens_nonkeywordContext {
		let _localctx: Tokens_nonkeywordContext = new Tokens_nonkeywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, PLpgSQLParser.RULE_tokens_nonkeyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5348;
			_la = this._input.LA(1);
			if (!(((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext {
		let _localctx: Schema_qualified_name_nontypeContext = new Schema_qualified_name_nontypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, PLpgSQLParser.RULE_schema_qualified_name_nontype);
		try {
			this.state = 5355;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5350;
				this.identifier_nontype();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5351;
				_localctx._schema = this.identifier();
				this.state = 5352;
				this.match(PLpgSQLParser.DOT);
				this.state = 5353;
				this.identifier_nontype();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_list(): Type_listContext {
		let _localctx: Type_listContext = new Type_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, PLpgSQLParser.RULE_type_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5357;
			this.data_type();
			this.state = 5362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 5358;
				this.match(PLpgSQLParser.COMMA);
				this.state = 5359;
				this.data_type();
				}
				}
				this.state = 5364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type(): Data_typeContext {
		let _localctx: Data_typeContext = new Data_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, PLpgSQLParser.RULE_data_type);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5366;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
			case 1:
				{
				this.state = 5365;
				this.match(PLpgSQLParser.SETOF);
				}
				break;
			}
			this.state = 5368;
			this.predefined_type();
			this.state = 5378;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				{
				this.state = 5369;
				this.match(PLpgSQLParser.ARRAY);
				this.state = 5371;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 664, this._ctx) ) {
				case 1:
					{
					this.state = 5370;
					this.array_type();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 5374;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5373;
						this.array_type();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5376;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_type(): Array_typeContext {
		let _localctx: Array_typeContext = new Array_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, PLpgSQLParser.RULE_array_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5380;
			this.match(PLpgSQLParser.LEFT_BRACKET);
			this.state = 5382;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.NUMBER_LITERAL) {
				{
				this.state = 5381;
				this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
			}

			this.state = 5384;
			this.match(PLpgSQLParser.RIGHT_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_type(): Predefined_typeContext {
		let _localctx: Predefined_typeContext = new Predefined_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, PLpgSQLParser.RULE_predefined_type);
		let _la: number;
		try {
			this.state = 5477;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 688, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5386;
				this.match(PLpgSQLParser.BIGINT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5387;
				this.match(PLpgSQLParser.BIT);
				this.state = 5389;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 668, this._ctx) ) {
				case 1:
					{
					this.state = 5388;
					this.match(PLpgSQLParser.VARYING);
					}
					break;
				}
				this.state = 5392;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 669, this._ctx) ) {
				case 1:
					{
					this.state = 5391;
					this.type_length();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5394;
				this.match(PLpgSQLParser.BOOLEAN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5395;
				this.match(PLpgSQLParser.DEC);
				this.state = 5397;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 670, this._ctx) ) {
				case 1:
					{
					this.state = 5396;
					this.precision_param();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5399;
				this.match(PLpgSQLParser.DECIMAL);
				this.state = 5401;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 671, this._ctx) ) {
				case 1:
					{
					this.state = 5400;
					this.precision_param();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5403;
				this.match(PLpgSQLParser.DOUBLE);
				this.state = 5404;
				this.match(PLpgSQLParser.PRECISION);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5405;
				this.match(PLpgSQLParser.FLOAT);
				this.state = 5407;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 672, this._ctx) ) {
				case 1:
					{
					this.state = 5406;
					this.precision_param();
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5409;
				this.match(PLpgSQLParser.INT);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5410;
				this.match(PLpgSQLParser.INTEGER);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5411;
				this.match(PLpgSQLParser.INTERVAL);
				this.state = 5413;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 673, this._ctx) ) {
				case 1:
					{
					this.state = 5412;
					this.interval_field();
					}
					break;
				}
				this.state = 5416;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 674, this._ctx) ) {
				case 1:
					{
					this.state = 5415;
					this.type_length();
					}
					break;
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NATIONAL) {
					{
					this.state = 5418;
					this.match(PLpgSQLParser.NATIONAL);
					}
				}

				this.state = 5421;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CHAR || _la === PLpgSQLParser.CHARACTER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5423;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 676, this._ctx) ) {
				case 1:
					{
					this.state = 5422;
					this.match(PLpgSQLParser.VARYING);
					}
					break;
				}
				this.state = 5426;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 677, this._ctx) ) {
				case 1:
					{
					this.state = 5425;
					this.type_length();
					}
					break;
				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5428;
				this.match(PLpgSQLParser.NCHAR);
				this.state = 5430;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 678, this._ctx) ) {
				case 1:
					{
					this.state = 5429;
					this.match(PLpgSQLParser.VARYING);
					}
					break;
				}
				this.state = 5433;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 679, this._ctx) ) {
				case 1:
					{
					this.state = 5432;
					this.type_length();
					}
					break;
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5435;
				this.match(PLpgSQLParser.NUMERIC);
				this.state = 5437;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 680, this._ctx) ) {
				case 1:
					{
					this.state = 5436;
					this.precision_param();
					}
					break;
				}
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5439;
				this.match(PLpgSQLParser.REAL);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5440;
				this.match(PLpgSQLParser.SMALLINT);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5441;
				this.match(PLpgSQLParser.TIME);
				this.state = 5443;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 681, this._ctx) ) {
				case 1:
					{
					this.state = 5442;
					this.type_length();
					}
					break;
				}
				this.state = 5448;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 682, this._ctx) ) {
				case 1:
					{
					this.state = 5445;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.WITHOUT || _la === PLpgSQLParser.WITH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5446;
					this.match(PLpgSQLParser.TIME);
					this.state = 5447;
					this.match(PLpgSQLParser.ZONE);
					}
					break;
				}
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5450;
				this.match(PLpgSQLParser.TIMESTAMP);
				this.state = 5452;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 683, this._ctx) ) {
				case 1:
					{
					this.state = 5451;
					this.type_length();
					}
					break;
				}
				this.state = 5457;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 684, this._ctx) ) {
				case 1:
					{
					this.state = 5454;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.WITHOUT || _la === PLpgSQLParser.WITH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5455;
					this.match(PLpgSQLParser.TIME);
					this.state = 5456;
					this.match(PLpgSQLParser.ZONE);
					}
					break;
				}
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5459;
				this.match(PLpgSQLParser.VARCHAR);
				this.state = 5461;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 685, this._ctx) ) {
				case 1:
					{
					this.state = 5460;
					this.type_length();
					}
					break;
				}
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5463;
				this.schema_qualified_name_nontype();
				this.state = 5475;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 687, this._ctx) ) {
				case 1:
					{
					this.state = 5464;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 5465;
					this.vex(0);
					this.state = 5470;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 5466;
						this.match(PLpgSQLParser.COMMA);
						this.state = 5467;
						this.vex(0);
						}
						}
						this.state = 5472;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5473;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interval_field(): Interval_fieldContext {
		let _localctx: Interval_fieldContext = new Interval_fieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, PLpgSQLParser.RULE_interval_field);
		try {
			this.state = 5506;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 689, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5479;
				this.match(PLpgSQLParser.YEAR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5480;
				this.match(PLpgSQLParser.MONTH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5481;
				this.match(PLpgSQLParser.DAY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5482;
				this.match(PLpgSQLParser.HOUR);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5483;
				this.match(PLpgSQLParser.MINUTE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5484;
				this.match(PLpgSQLParser.SECOND);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5485;
				this.match(PLpgSQLParser.YEAR);
				this.state = 5486;
				this.match(PLpgSQLParser.TO);
				this.state = 5487;
				this.match(PLpgSQLParser.MONTH);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5488;
				this.match(PLpgSQLParser.DAY);
				this.state = 5489;
				this.match(PLpgSQLParser.TO);
				this.state = 5490;
				this.match(PLpgSQLParser.HOUR);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5491;
				this.match(PLpgSQLParser.DAY);
				this.state = 5492;
				this.match(PLpgSQLParser.TO);
				this.state = 5493;
				this.match(PLpgSQLParser.MINUTE);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5494;
				this.match(PLpgSQLParser.DAY);
				this.state = 5495;
				this.match(PLpgSQLParser.TO);
				this.state = 5496;
				this.match(PLpgSQLParser.SECOND);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5497;
				this.match(PLpgSQLParser.HOUR);
				this.state = 5498;
				this.match(PLpgSQLParser.TO);
				this.state = 5499;
				this.match(PLpgSQLParser.MINUTE);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5500;
				this.match(PLpgSQLParser.HOUR);
				this.state = 5501;
				this.match(PLpgSQLParser.TO);
				this.state = 5502;
				this.match(PLpgSQLParser.SECOND);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5503;
				this.match(PLpgSQLParser.MINUTE);
				this.state = 5504;
				this.match(PLpgSQLParser.TO);
				this.state = 5505;
				this.match(PLpgSQLParser.SECOND);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_length(): Type_lengthContext {
		let _localctx: Type_lengthContext = new Type_lengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, PLpgSQLParser.RULE_type_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5508;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5509;
			this.match(PLpgSQLParser.NUMBER_LITERAL);
			this.state = 5510;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precision_param(): Precision_paramContext {
		let _localctx: Precision_paramContext = new Precision_paramContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, PLpgSQLParser.RULE_precision_param);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5512;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5513;
			_localctx._precision = this.match(PLpgSQLParser.NUMBER_LITERAL);
			this.state = 5516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COMMA) {
				{
				this.state = 5514;
				this.match(PLpgSQLParser.COMMA);
				this.state = 5515;
				_localctx._scale = this.match(PLpgSQLParser.NUMBER_LITERAL);
				}
			}

			this.state = 5518;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public vex(): VexContext;
	public vex(_p: number): VexContext;
	// @RuleVersion(0)
	public vex(_p?: number): VexContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: VexContext = new VexContext(this._ctx, _parentState);
		let _prevctx: VexContext = _localctx;
		let _startState: number = 558;
		this.enterRecursionRule(_localctx, 558, PLpgSQLParser.RULE_vex, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5545;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 693, this._ctx) ) {
			case 1:
				{
				this.state = 5521;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5522;
				this.vex(0);
				this.state = 5523;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 5525;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 691, this._ctx) ) {
				case 1:
					{
					this.state = 5524;
					this.indirection_list();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 5527;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5528;
				this.vex(0);
				this.state = 5531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5529;
					this.match(PLpgSQLParser.COMMA);
					this.state = 5530;
					this.vex(0);
					}
					}
					this.state = 5533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.COMMA);
				this.state = 5535;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 3:
				{
				this.state = 5537;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5538;
				this.vex(24);
				}
				break;

			case 4:
				{
				this.state = 5539;
				this.op();
				this.state = 5540;
				this.vex(18);
				}
				break;

			case 5:
				{
				this.state = 5542;
				this.match(PLpgSQLParser.NOT);
				this.state = 5543;
				this.vex(4);
				}
				break;

			case 6:
				{
				this.state = 5544;
				this.value_expression_primary();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5682;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5680;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 709, this._ctx) ) {
					case 1:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5547;
						if (!(this.precpred(this._ctx, 23))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 23)");
						}
						this.state = 5548;
						this.match(PLpgSQLParser.AT);
						this.state = 5549;
						this.match(PLpgSQLParser.TIME);
						this.state = 5550;
						this.match(PLpgSQLParser.ZONE);
						this.state = 5551;
						this.vex(24);
						}
						break;

					case 2:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5552;
						if (!(this.precpred(this._ctx, 22))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 22)");
						}
						this.state = 5553;
						this.match(PLpgSQLParser.EXP);
						this.state = 5554;
						this.vex(23);
						}
						break;

					case 3:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5555;
						if (!(this.precpred(this._ctx, 21))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 21)");
						}
						this.state = 5556;
						_la = this._input.LA(1);
						if (!(((((_la - 589)) & ~0x1F) === 0 && ((1 << (_la - 589)) & ((1 << (PLpgSQLParser.MULTIPLY - 589)) | (1 << (PLpgSQLParser.DIVIDE - 589)) | (1 << (PLpgSQLParser.MODULAR - 589)))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5557;
						this.vex(22);
						}
						break;

					case 4:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5558;
						if (!(this.precpred(this._ctx, 20))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 20)");
						}
						this.state = 5559;
						_la = this._input.LA(1);
						if (!(_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5560;
						this.vex(21);
						}
						break;

					case 5:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5561;
						if (!(this.precpred(this._ctx, 19))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 19)");
						}
						this.state = 5562;
						this.op();
						this.state = 5563;
						this.vex(20);
						}
						break;

					case 6:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5565;
						if (!(this.precpred(this._ctx, 15))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 15)");
						}
						this.state = 5567;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5566;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5569;
						this.match(PLpgSQLParser.BETWEEN);
						this.state = 5571;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.ASYMMETRIC || _la === PLpgSQLParser.SYMMETRIC) {
							{
							this.state = 5570;
							_la = this._input.LA(1);
							if (!(_la === PLpgSQLParser.ASYMMETRIC || _la === PLpgSQLParser.SYMMETRIC)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
						}

						this.state = 5573;
						this.vex_b(0);
						this.state = 5574;
						this.match(PLpgSQLParser.AND);
						this.state = 5575;
						this.vex(16);
						}
						break;

					case 7:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5577;
						if (!(this.precpred(this._ctx, 14))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 14)");
						}
						this.state = 5579;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5578;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5585;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.LIKE:
							{
							this.state = 5581;
							this.match(PLpgSQLParser.LIKE);
							}
							break;
						case PLpgSQLParser.ILIKE:
							{
							this.state = 5582;
							this.match(PLpgSQLParser.ILIKE);
							}
							break;
						case PLpgSQLParser.SIMILAR:
							{
							this.state = 5583;
							this.match(PLpgSQLParser.SIMILAR);
							this.state = 5584;
							this.match(PLpgSQLParser.TO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 5587;
						this.vex(15);
						}
						break;

					case 8:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5588;
						if (!(this.precpred(this._ctx, 13))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 13)");
						}
						this.state = 5590;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5589;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5596;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.LIKE:
							{
							this.state = 5592;
							this.match(PLpgSQLParser.LIKE);
							}
							break;
						case PLpgSQLParser.ILIKE:
							{
							this.state = 5593;
							this.match(PLpgSQLParser.ILIKE);
							}
							break;
						case PLpgSQLParser.SIMILAR:
							{
							this.state = 5594;
							this.match(PLpgSQLParser.SIMILAR);
							this.state = 5595;
							this.match(PLpgSQLParser.TO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 5598;
						this.vex(0);
						this.state = 5599;
						this.match(PLpgSQLParser.ESCAPE);
						this.state = 5600;
						this.vex(14);
						}
						break;

					case 9:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5602;
						if (!(this.precpred(this._ctx, 12))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 12)");
						}
						this.state = 5603;
						_la = this._input.LA(1);
						if (!(((((_la - 576)) & ~0x1F) === 0 && ((1 << (_la - 576)) & ((1 << (PLpgSQLParser.EQUAL - 576)) | (1 << (PLpgSQLParser.NOT_EQUAL - 576)) | (1 << (PLpgSQLParser.LTH - 576)) | (1 << (PLpgSQLParser.LEQ - 576)) | (1 << (PLpgSQLParser.GTH - 576)) | (1 << (PLpgSQLParser.GEQ - 576)))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5604;
						this.vex(13);
						}
						break;

					case 10:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5605;
						if (!(this.precpred(this._ctx, 10))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 10)");
						}
						this.state = 5606;
						this.match(PLpgSQLParser.IS);
						this.state = 5608;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5607;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5610;
						this.match(PLpgSQLParser.DISTINCT);
						this.state = 5611;
						this.match(PLpgSQLParser.FROM);
						this.state = 5612;
						this.vex(11);
						}
						break;

					case 11:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5613;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 5614;
						this.match(PLpgSQLParser.AND);
						this.state = 5615;
						this.vex(4);
						}
						break;

					case 12:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5616;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5617;
						this.match(PLpgSQLParser.OR);
						this.state = 5618;
						this.vex(3);
						}
						break;

					case 13:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5619;
						if (!(this.precpred(this._ctx, 28))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 28)");
						}
						this.state = 5620;
						this.match(PLpgSQLParser.CAST_EXPRESSION);
						this.state = 5621;
						this.data_type();
						}
						break;

					case 14:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5622;
						if (!(this.precpred(this._ctx, 25))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 25)");
						}
						this.state = 5623;
						this.collate_identifier();
						}
						break;

					case 15:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5624;
						if (!(this.precpred(this._ctx, 17))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 17)");
						}
						this.state = 5625;
						this.op();
						}
						break;

					case 16:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5626;
						if (!(this.precpred(this._ctx, 16))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 16)");
						}
						this.state = 5628;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5627;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5630;
						this.match(PLpgSQLParser.IN);
						this.state = 5631;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 5641;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 703, this._ctx) ) {
						case 1:
							{
							this.state = 5632;
							this.select_stmt_no_parens();
							}
							break;

						case 2:
							{
							this.state = 5633;
							this.vex(0);
							this.state = 5638;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === PLpgSQLParser.COMMA) {
								{
								{
								this.state = 5634;
								this.match(PLpgSQLParser.COMMA);
								this.state = 5635;
								this.vex(0);
								}
								}
								this.state = 5640;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							}
							break;
						}
						this.state = 5643;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						}
						break;

					case 17:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5645;
						if (!(this.precpred(this._ctx, 11))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 11)");
						}
						this.state = 5646;
						this.match(PLpgSQLParser.IS);
						this.state = 5648;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5647;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5652;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.FALSE:
						case PLpgSQLParser.ON:
						case PLpgSQLParser.TRUE:
							{
							this.state = 5650;
							this.truth_value();
							}
							break;
						case PLpgSQLParser.NULL:
							{
							this.state = 5651;
							this.match(PLpgSQLParser.NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 18:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5654;
						if (!(this.precpred(this._ctx, 9))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 9)");
						}
						this.state = 5655;
						this.match(PLpgSQLParser.IS);
						this.state = 5657;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5656;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5659;
						this.match(PLpgSQLParser.DOCUMENT);
						}
						break;

					case 19:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5660;
						if (!(this.precpred(this._ctx, 8))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 8)");
						}
						this.state = 5661;
						this.match(PLpgSQLParser.IS);
						this.state = 5663;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5662;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5665;
						this.match(PLpgSQLParser.UNKNOWN);
						}
						break;

					case 20:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5666;
						if (!(this.precpred(this._ctx, 7))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
						}
						this.state = 5667;
						this.match(PLpgSQLParser.IS);
						this.state = 5669;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5668;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5671;
						this.match(PLpgSQLParser.OF);
						this.state = 5672;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 5673;
						this.type_list();
						this.state = 5674;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						}
						break;

					case 21:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5676;
						if (!(this.precpred(this._ctx, 6))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
						}
						this.state = 5677;
						this.match(PLpgSQLParser.ISNULL);
						}
						break;

					case 22:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex);
						this.state = 5678;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 5679;
						this.match(PLpgSQLParser.NOTNULL);
						}
						break;
					}
					}
				}
				this.state = 5684;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public vex_b(): Vex_bContext;
	public vex_b(_p: number): Vex_bContext;
	// @RuleVersion(0)
	public vex_b(_p?: number): Vex_bContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Vex_bContext = new Vex_bContext(this._ctx, _parentState);
		let _prevctx: Vex_bContext = _localctx;
		let _startState: number = 560;
		this.enterRecursionRule(_localctx, 560, PLpgSQLParser.RULE_vex_b, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5708;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 713, this._ctx) ) {
			case 1:
				{
				this.state = 5686;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5687;
				this.vex(0);
				this.state = 5688;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 5690;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 711, this._ctx) ) {
				case 1:
					{
					this.state = 5689;
					this.indirection_list();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 5692;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5693;
				this.vex(0);
				this.state = 5696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5694;
					this.match(PLpgSQLParser.COMMA);
					this.state = 5695;
					this.vex(0);
					}
					}
					this.state = 5698;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PLpgSQLParser.COMMA);
				this.state = 5700;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 3:
				{
				this.state = 5702;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5703;
				this.vex_b(13);
				}
				break;

			case 4:
				{
				this.state = 5704;
				this.op();
				this.state = 5705;
				this.vex_b(8);
				}
				break;

			case 5:
				{
				this.state = 5707;
				this.value_expression_primary();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5763;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5761;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
					case 1:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5710;
						if (!(this.precpred(this._ctx, 12))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 12)");
						}
						this.state = 5711;
						this.match(PLpgSQLParser.EXP);
						this.state = 5712;
						this.vex_b(13);
						}
						break;

					case 2:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5713;
						if (!(this.precpred(this._ctx, 11))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 11)");
						}
						this.state = 5714;
						_la = this._input.LA(1);
						if (!(((((_la - 589)) & ~0x1F) === 0 && ((1 << (_la - 589)) & ((1 << (PLpgSQLParser.MULTIPLY - 589)) | (1 << (PLpgSQLParser.DIVIDE - 589)) | (1 << (PLpgSQLParser.MODULAR - 589)))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5715;
						this.vex_b(12);
						}
						break;

					case 3:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5716;
						if (!(this.precpred(this._ctx, 10))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 10)");
						}
						this.state = 5717;
						_la = this._input.LA(1);
						if (!(_la === PLpgSQLParser.PLUS || _la === PLpgSQLParser.MINUS)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5718;
						this.vex_b(11);
						}
						break;

					case 4:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5719;
						if (!(this.precpred(this._ctx, 9))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 9)");
						}
						this.state = 5720;
						this.op();
						this.state = 5721;
						this.vex_b(10);
						}
						break;

					case 5:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5723;
						if (!(this.precpred(this._ctx, 6))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
						}
						this.state = 5724;
						_la = this._input.LA(1);
						if (!(((((_la - 576)) & ~0x1F) === 0 && ((1 << (_la - 576)) & ((1 << (PLpgSQLParser.EQUAL - 576)) | (1 << (PLpgSQLParser.NOT_EQUAL - 576)) | (1 << (PLpgSQLParser.LTH - 576)) | (1 << (PLpgSQLParser.LEQ - 576)) | (1 << (PLpgSQLParser.GTH - 576)) | (1 << (PLpgSQLParser.GEQ - 576)))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5725;
						this.vex_b(7);
						}
						break;

					case 6:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5726;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 5727;
						this.match(PLpgSQLParser.IS);
						this.state = 5729;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5728;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5731;
						this.match(PLpgSQLParser.DISTINCT);
						this.state = 5732;
						this.match(PLpgSQLParser.FROM);
						this.state = 5733;
						this.vex_b(6);
						}
						break;

					case 7:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5734;
						if (!(this.precpred(this._ctx, 16))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 16)");
						}
						this.state = 5735;
						this.match(PLpgSQLParser.CAST_EXPRESSION);
						this.state = 5736;
						this.data_type();
						}
						break;

					case 8:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5737;
						if (!(this.precpred(this._ctx, 7))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
						}
						this.state = 5738;
						this.op();
						}
						break;

					case 9:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5739;
						if (!(this.precpred(this._ctx, 4))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						}
						this.state = 5740;
						this.match(PLpgSQLParser.IS);
						this.state = 5742;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5741;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5744;
						this.match(PLpgSQLParser.DOCUMENT);
						}
						break;

					case 10:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5745;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 5746;
						this.match(PLpgSQLParser.IS);
						this.state = 5748;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5747;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5750;
						this.match(PLpgSQLParser.UNKNOWN);
						}
						break;

					case 11:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_vex_b);
						this.state = 5751;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5752;
						this.match(PLpgSQLParser.IS);
						this.state = 5754;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.NOT) {
							{
							this.state = 5753;
							this.match(PLpgSQLParser.NOT);
							}
						}

						this.state = 5756;
						this.match(PLpgSQLParser.OF);
						this.state = 5757;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 5758;
						this.type_list();
						this.state = 5759;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						}
						break;
					}
					}
				}
				this.state = 5765;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op(): OpContext {
		let _localctx: OpContext = new OpContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, PLpgSQLParser.RULE_op);
		try {
			this.state = 5774;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LESS_LESS:
			case PLpgSQLParser.GREATER_GREATER:
			case PLpgSQLParser.HASH_SIGN:
			case PLpgSQLParser.OP_CHARS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5766;
				this.op_chars();
				}
				break;
			case PLpgSQLParser.OPERATOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5767;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 5768;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5769;
				this.identifier();
				this.state = 5770;
				this.match(PLpgSQLParser.DOT);
				this.state = 5771;
				this.all_simple_op();
				this.state = 5772;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public all_op_ref(): All_op_refContext {
		let _localctx: All_op_refContext = new All_op_refContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, PLpgSQLParser.RULE_all_op_ref);
		try {
			this.state = 5784;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.EQUAL:
			case PLpgSQLParser.NOT_EQUAL:
			case PLpgSQLParser.LTH:
			case PLpgSQLParser.LEQ:
			case PLpgSQLParser.GTH:
			case PLpgSQLParser.GEQ:
			case PLpgSQLParser.PLUS:
			case PLpgSQLParser.MINUS:
			case PLpgSQLParser.MULTIPLY:
			case PLpgSQLParser.DIVIDE:
			case PLpgSQLParser.MODULAR:
			case PLpgSQLParser.EXP:
			case PLpgSQLParser.LESS_LESS:
			case PLpgSQLParser.GREATER_GREATER:
			case PLpgSQLParser.HASH_SIGN:
			case PLpgSQLParser.OP_CHARS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5776;
				this.all_simple_op();
				}
				break;
			case PLpgSQLParser.OPERATOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5777;
				this.match(PLpgSQLParser.OPERATOR);
				this.state = 5778;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5779;
				this.identifier();
				this.state = 5780;
				this.match(PLpgSQLParser.DOT);
				this.state = 5781;
				this.all_simple_op();
				this.state = 5782;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public datetime_overlaps(): Datetime_overlapsContext {
		let _localctx: Datetime_overlapsContext = new Datetime_overlapsContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, PLpgSQLParser.RULE_datetime_overlaps);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5786;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5787;
			this.vex(0);
			this.state = 5788;
			this.match(PLpgSQLParser.COMMA);
			this.state = 5789;
			this.vex(0);
			this.state = 5790;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			this.state = 5791;
			this.match(PLpgSQLParser.OVERLAPS);
			this.state = 5792;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5793;
			this.vex(0);
			this.state = 5794;
			this.match(PLpgSQLParser.COMMA);
			this.state = 5795;
			this.vex(0);
			this.state = 5796;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_expression_primary(): Value_expression_primaryContext {
		let _localctx: Value_expression_primaryContext = new Value_expression_primaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, PLpgSQLParser.RULE_value_expression_primary);
		try {
			this.state = 5816;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 723, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5798;
				this.unsigned_value_specification();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5799;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5800;
				this.select_stmt_no_parens();
				this.state = 5801;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 5803;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 722, this._ctx) ) {
				case 1:
					{
					this.state = 5802;
					this.indirection_list();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5805;
				this.case_expression();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5806;
				this.match(PLpgSQLParser.NULL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5807;
				this.match(PLpgSQLParser.MULTIPLY);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5808;
				this.comparison_mod();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5809;
				this.match(PLpgSQLParser.EXISTS);
				this.state = 5810;
				this.table_subquery();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5811;
				this.function_call();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5812;
				this.indirection_var();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5813;
				this.array_expression();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5814;
				this.type_coercion();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5815;
				this.datetime_overlaps();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unsigned_value_specification(): Unsigned_value_specificationContext {
		let _localctx: Unsigned_value_specificationContext = new Unsigned_value_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, PLpgSQLParser.RULE_unsigned_value_specification);
		try {
			this.state = 5821;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.NUMBER_LITERAL:
			case PLpgSQLParser.REAL_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5818;
				this.unsigned_numeric_literal();
				}
				break;
			case PLpgSQLParser.Character_String_Literal:
			case PLpgSQLParser.BeginDollarStringConstant:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5819;
				this.character_string();
				}
				break;
			case PLpgSQLParser.FALSE:
			case PLpgSQLParser.ON:
			case PLpgSQLParser.TRUE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5820;
				this.truth_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext {
		let _localctx: Unsigned_numeric_literalContext = new Unsigned_numeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, PLpgSQLParser.RULE_unsigned_numeric_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5823;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.NUMBER_LITERAL || _la === PLpgSQLParser.REAL_NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truth_value(): Truth_valueContext {
		let _localctx: Truth_valueContext = new Truth_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, PLpgSQLParser.RULE_truth_value);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5825;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FALSE || _la === PLpgSQLParser.ON || _la === PLpgSQLParser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_expression(): Case_expressionContext {
		let _localctx: Case_expressionContext = new Case_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, PLpgSQLParser.RULE_case_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5827;
			this.match(PLpgSQLParser.CASE);
			this.state = 5829;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
				{
				this.state = 5828;
				this.vex(0);
				}
			}

			this.state = 5836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5831;
				this.match(PLpgSQLParser.WHEN);
				this.state = 5832;
				this.vex(0);
				this.state = 5833;
				this.match(PLpgSQLParser.THEN);
				this.state = 5834;
				_localctx._vex = this.vex(0);
				_localctx._r.push(_localctx._vex);
				}
				}
				this.state = 5838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PLpgSQLParser.WHEN);
			this.state = 5842;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ELSE) {
				{
				this.state = 5840;
				this.match(PLpgSQLParser.ELSE);
				this.state = 5841;
				_localctx._vex = this.vex(0);
				_localctx._r.push(_localctx._vex);
				}
			}

			this.state = 5844;
			this.match(PLpgSQLParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cast_specification(): Cast_specificationContext {
		let _localctx: Cast_specificationContext = new Cast_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, PLpgSQLParser.RULE_cast_specification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5846;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.TREAT || _la === PLpgSQLParser.CAST)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5847;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5848;
			this.vex(0);
			this.state = 5849;
			this.match(PLpgSQLParser.AS);
			this.state = 5850;
			this.data_type();
			this.state = 5851;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_call(): Function_callContext {
		let _localctx: Function_callContext = new Function_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, PLpgSQLParser.RULE_function_call);
		let _la: number;
		try {
			this.state = 5896;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5853;
				this.schema_qualified_name_nontype();
				this.state = 5854;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.DISTINCT - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.VARIADIC - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
					{
					this.state = 5856;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 728, this._ctx) ) {
					case 1:
						{
						this.state = 5855;
						this.set_qualifier();
						}
						break;
					}
					this.state = 5858;
					this.vex_or_named_notation();
					this.state = 5863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 5859;
						this.match(PLpgSQLParser.COMMA);
						this.state = 5860;
						this.vex_or_named_notation();
						}
						}
						this.state = 5865;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5867;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.ORDER) {
						{
						this.state = 5866;
						this.orderby_clause();
						}
					}

					}
				}

				this.state = 5871;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 5878;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 732, this._ctx) ) {
				case 1:
					{
					this.state = 5872;
					this.match(PLpgSQLParser.WITHIN);
					this.state = 5873;
					this.match(PLpgSQLParser.GROUP);
					this.state = 5874;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 5875;
					this.orderby_clause();
					this.state = 5876;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 5881;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 733, this._ctx) ) {
				case 1:
					{
					this.state = 5880;
					this.filter_clause();
					}
					break;
				}
				this.state = 5888;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 735, this._ctx) ) {
				case 1:
					{
					this.state = 5883;
					this.match(PLpgSQLParser.OVER);
					this.state = 5886;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.ABORT:
					case PLpgSQLParser.ABSOLUTE:
					case PLpgSQLParser.ACCESS:
					case PLpgSQLParser.ACTION:
					case PLpgSQLParser.ADD:
					case PLpgSQLParser.ADMIN:
					case PLpgSQLParser.AFTER:
					case PLpgSQLParser.AGGREGATE:
					case PLpgSQLParser.ALSO:
					case PLpgSQLParser.ALTER:
					case PLpgSQLParser.ALWAYS:
					case PLpgSQLParser.ASSERTION:
					case PLpgSQLParser.ASSIGNMENT:
					case PLpgSQLParser.AT:
					case PLpgSQLParser.ATTACH:
					case PLpgSQLParser.ATTRIBUTE:
					case PLpgSQLParser.BACKWARD:
					case PLpgSQLParser.BEFORE:
					case PLpgSQLParser.BEGIN:
					case PLpgSQLParser.BY:
					case PLpgSQLParser.CACHE:
					case PLpgSQLParser.CALL:
					case PLpgSQLParser.CALLED:
					case PLpgSQLParser.CASCADE:
					case PLpgSQLParser.CASCADED:
					case PLpgSQLParser.CATALOG:
					case PLpgSQLParser.CHAIN:
					case PLpgSQLParser.CHARACTERISTICS:
					case PLpgSQLParser.CHECKPOINT:
					case PLpgSQLParser.CLASS:
					case PLpgSQLParser.CLOSE:
					case PLpgSQLParser.CLUSTER:
					case PLpgSQLParser.COLUMNS:
					case PLpgSQLParser.COMMENT:
					case PLpgSQLParser.COMMENTS:
					case PLpgSQLParser.COMMIT:
					case PLpgSQLParser.COMMITTED:
					case PLpgSQLParser.CONFIGURATION:
					case PLpgSQLParser.CONFLICT:
					case PLpgSQLParser.CONNECTION:
					case PLpgSQLParser.CONSTRAINTS:
					case PLpgSQLParser.CONTENT:
					case PLpgSQLParser.CONTINUE:
					case PLpgSQLParser.CONVERSION:
					case PLpgSQLParser.COPY:
					case PLpgSQLParser.COST:
					case PLpgSQLParser.CSV:
					case PLpgSQLParser.CUBE:
					case PLpgSQLParser.CURRENT:
					case PLpgSQLParser.CURSOR:
					case PLpgSQLParser.CYCLE:
					case PLpgSQLParser.DATA:
					case PLpgSQLParser.DATABASE:
					case PLpgSQLParser.DAY:
					case PLpgSQLParser.DEALLOCATE:
					case PLpgSQLParser.DECLARE:
					case PLpgSQLParser.DEFAULTS:
					case PLpgSQLParser.DEFERRED:
					case PLpgSQLParser.DEFINER:
					case PLpgSQLParser.DELETE:
					case PLpgSQLParser.DELIMITER:
					case PLpgSQLParser.DELIMITERS:
					case PLpgSQLParser.DEPENDS:
					case PLpgSQLParser.DETACH:
					case PLpgSQLParser.DICTIONARY:
					case PLpgSQLParser.DISABLE:
					case PLpgSQLParser.DISCARD:
					case PLpgSQLParser.DOCUMENT:
					case PLpgSQLParser.DOMAIN:
					case PLpgSQLParser.DOUBLE:
					case PLpgSQLParser.DROP:
					case PLpgSQLParser.EACH:
					case PLpgSQLParser.ENABLE:
					case PLpgSQLParser.ENCODING:
					case PLpgSQLParser.ENCRYPTED:
					case PLpgSQLParser.ENUM:
					case PLpgSQLParser.ESCAPE:
					case PLpgSQLParser.EVENT:
					case PLpgSQLParser.EXCLUDE:
					case PLpgSQLParser.EXCLUDING:
					case PLpgSQLParser.EXCLUSIVE:
					case PLpgSQLParser.EXECUTE:
					case PLpgSQLParser.EXPLAIN:
					case PLpgSQLParser.EXTENSION:
					case PLpgSQLParser.EXTERNAL:
					case PLpgSQLParser.FAMILY:
					case PLpgSQLParser.FILTER:
					case PLpgSQLParser.FIRST:
					case PLpgSQLParser.FOLLOWING:
					case PLpgSQLParser.FORCE:
					case PLpgSQLParser.FORWARD:
					case PLpgSQLParser.FUNCTION:
					case PLpgSQLParser.FUNCTIONS:
					case PLpgSQLParser.GENERATED:
					case PLpgSQLParser.GLOBAL:
					case PLpgSQLParser.GRANTED:
					case PLpgSQLParser.GROUPS:
					case PLpgSQLParser.HANDLER:
					case PLpgSQLParser.HEADER:
					case PLpgSQLParser.HOLD:
					case PLpgSQLParser.HOUR:
					case PLpgSQLParser.IDENTITY:
					case PLpgSQLParser.IF:
					case PLpgSQLParser.IMMEDIATE:
					case PLpgSQLParser.IMMUTABLE:
					case PLpgSQLParser.IMPLICIT:
					case PLpgSQLParser.IMPORT:
					case PLpgSQLParser.INCLUDE:
					case PLpgSQLParser.INCLUDING:
					case PLpgSQLParser.INCREMENT:
					case PLpgSQLParser.INDEX:
					case PLpgSQLParser.INDEXES:
					case PLpgSQLParser.INHERIT:
					case PLpgSQLParser.INHERITS:
					case PLpgSQLParser.INLINE:
					case PLpgSQLParser.INPUT:
					case PLpgSQLParser.INSENSITIVE:
					case PLpgSQLParser.INSERT:
					case PLpgSQLParser.INSTEAD:
					case PLpgSQLParser.INVOKER:
					case PLpgSQLParser.ISOLATION:
					case PLpgSQLParser.KEY:
					case PLpgSQLParser.LABEL:
					case PLpgSQLParser.LANGUAGE:
					case PLpgSQLParser.LARGE:
					case PLpgSQLParser.LAST:
					case PLpgSQLParser.LEAKPROOF:
					case PLpgSQLParser.LEVEL:
					case PLpgSQLParser.LISTEN:
					case PLpgSQLParser.LOAD:
					case PLpgSQLParser.LOCAL:
					case PLpgSQLParser.LOCATION:
					case PLpgSQLParser.LOCK:
					case PLpgSQLParser.LOCKED:
					case PLpgSQLParser.LOGGED:
					case PLpgSQLParser.MAPPING:
					case PLpgSQLParser.MATCH:
					case PLpgSQLParser.MATERIALIZED:
					case PLpgSQLParser.MAXVALUE:
					case PLpgSQLParser.METHOD:
					case PLpgSQLParser.MINUTE:
					case PLpgSQLParser.MINVALUE:
					case PLpgSQLParser.MODE:
					case PLpgSQLParser.MONTH:
					case PLpgSQLParser.MOVE:
					case PLpgSQLParser.NAME:
					case PLpgSQLParser.NAMES:
					case PLpgSQLParser.NEW:
					case PLpgSQLParser.NEXT:
					case PLpgSQLParser.NO:
					case PLpgSQLParser.NOTHING:
					case PLpgSQLParser.NOTIFY:
					case PLpgSQLParser.NOWAIT:
					case PLpgSQLParser.NULLS:
					case PLpgSQLParser.OBJECT:
					case PLpgSQLParser.OF:
					case PLpgSQLParser.OFF:
					case PLpgSQLParser.OIDS:
					case PLpgSQLParser.OLD:
					case PLpgSQLParser.OPERATOR:
					case PLpgSQLParser.OPTION:
					case PLpgSQLParser.OPTIONS:
					case PLpgSQLParser.ORDINALITY:
					case PLpgSQLParser.OTHERS:
					case PLpgSQLParser.OVER:
					case PLpgSQLParser.OVERRIDING:
					case PLpgSQLParser.OWNED:
					case PLpgSQLParser.OWNER:
					case PLpgSQLParser.PARALLEL:
					case PLpgSQLParser.PARSER:
					case PLpgSQLParser.PARTIAL:
					case PLpgSQLParser.PARTITION:
					case PLpgSQLParser.PASSING:
					case PLpgSQLParser.PASSWORD:
					case PLpgSQLParser.PLANS:
					case PLpgSQLParser.POLICY:
					case PLpgSQLParser.PRECEDING:
					case PLpgSQLParser.PREPARE:
					case PLpgSQLParser.PREPARED:
					case PLpgSQLParser.PRESERVE:
					case PLpgSQLParser.PRIOR:
					case PLpgSQLParser.PRIVILEGES:
					case PLpgSQLParser.PROCEDURAL:
					case PLpgSQLParser.PROCEDURE:
					case PLpgSQLParser.PROCEDURES:
					case PLpgSQLParser.PROGRAM:
					case PLpgSQLParser.PUBLICATION:
					case PLpgSQLParser.QUOTE:
					case PLpgSQLParser.RANGE:
					case PLpgSQLParser.READ:
					case PLpgSQLParser.REASSIGN:
					case PLpgSQLParser.RECHECK:
					case PLpgSQLParser.RECURSIVE:
					case PLpgSQLParser.REF:
					case PLpgSQLParser.REFERENCING:
					case PLpgSQLParser.REFRESH:
					case PLpgSQLParser.REINDEX:
					case PLpgSQLParser.RELATIVE:
					case PLpgSQLParser.RELEASE:
					case PLpgSQLParser.RENAME:
					case PLpgSQLParser.REPEATABLE:
					case PLpgSQLParser.REPLACE:
					case PLpgSQLParser.REPLICA:
					case PLpgSQLParser.RESET:
					case PLpgSQLParser.RESTART:
					case PLpgSQLParser.RESTRICT:
					case PLpgSQLParser.RETURNS:
					case PLpgSQLParser.REVOKE:
					case PLpgSQLParser.ROLE:
					case PLpgSQLParser.ROLLBACK:
					case PLpgSQLParser.ROLLUP:
					case PLpgSQLParser.ROUTINE:
					case PLpgSQLParser.ROUTINES:
					case PLpgSQLParser.ROWS:
					case PLpgSQLParser.RULE:
					case PLpgSQLParser.SAVEPOINT:
					case PLpgSQLParser.SCHEMA:
					case PLpgSQLParser.SCHEMAS:
					case PLpgSQLParser.SCROLL:
					case PLpgSQLParser.SEARCH:
					case PLpgSQLParser.SECOND:
					case PLpgSQLParser.SECURITY:
					case PLpgSQLParser.SEQUENCE:
					case PLpgSQLParser.SEQUENCES:
					case PLpgSQLParser.SERIALIZABLE:
					case PLpgSQLParser.SERVER:
					case PLpgSQLParser.SESSION:
					case PLpgSQLParser.SET:
					case PLpgSQLParser.SETS:
					case PLpgSQLParser.SHARE:
					case PLpgSQLParser.SHOW:
					case PLpgSQLParser.SIMPLE:
					case PLpgSQLParser.SKIP_:
					case PLpgSQLParser.SNAPSHOT:
					case PLpgSQLParser.SQL:
					case PLpgSQLParser.STABLE:
					case PLpgSQLParser.STANDALONE:
					case PLpgSQLParser.START:
					case PLpgSQLParser.STATEMENT:
					case PLpgSQLParser.STATISTICS:
					case PLpgSQLParser.STDIN:
					case PLpgSQLParser.STDOUT:
					case PLpgSQLParser.STORAGE:
					case PLpgSQLParser.STORED:
					case PLpgSQLParser.STRICT:
					case PLpgSQLParser.STRIP:
					case PLpgSQLParser.SUBSCRIPTION:
					case PLpgSQLParser.SUPPORT:
					case PLpgSQLParser.SYSID:
					case PLpgSQLParser.SYSTEM:
					case PLpgSQLParser.TABLES:
					case PLpgSQLParser.TABLESPACE:
					case PLpgSQLParser.TEMP:
					case PLpgSQLParser.TEMPLATE:
					case PLpgSQLParser.TEMPORARY:
					case PLpgSQLParser.TEXT:
					case PLpgSQLParser.TIES:
					case PLpgSQLParser.TRANSACTION:
					case PLpgSQLParser.TRANSFORM:
					case PLpgSQLParser.TRIGGER:
					case PLpgSQLParser.TRUNCATE:
					case PLpgSQLParser.TRUSTED:
					case PLpgSQLParser.TYPE:
					case PLpgSQLParser.TYPES:
					case PLpgSQLParser.UNBOUNDED:
					case PLpgSQLParser.UNCOMMITTED:
					case PLpgSQLParser.UNENCRYPTED:
					case PLpgSQLParser.UNKNOWN:
					case PLpgSQLParser.UNLISTEN:
					case PLpgSQLParser.UNLOGGED:
					case PLpgSQLParser.UNTIL:
					case PLpgSQLParser.UPDATE:
					case PLpgSQLParser.VACUUM:
					case PLpgSQLParser.VALID:
					case PLpgSQLParser.VALIDATE:
					case PLpgSQLParser.VALIDATOR:
					case PLpgSQLParser.VALUE:
					case PLpgSQLParser.VARYING:
					case PLpgSQLParser.VERSION:
					case PLpgSQLParser.VIEW:
					case PLpgSQLParser.VIEWS:
					case PLpgSQLParser.VOLATILE:
					case PLpgSQLParser.WHITESPACE:
					case PLpgSQLParser.WITHIN:
					case PLpgSQLParser.WITHOUT:
					case PLpgSQLParser.WORK:
					case PLpgSQLParser.WRAPPER:
					case PLpgSQLParser.WRITE:
					case PLpgSQLParser.XML:
					case PLpgSQLParser.YEAR:
					case PLpgSQLParser.YES:
					case PLpgSQLParser.ZONE:
					case PLpgSQLParser.BETWEEN:
					case PLpgSQLParser.BIGINT:
					case PLpgSQLParser.BIT:
					case PLpgSQLParser.BOOLEAN:
					case PLpgSQLParser.CHAR:
					case PLpgSQLParser.CHARACTER:
					case PLpgSQLParser.COALESCE:
					case PLpgSQLParser.DEC:
					case PLpgSQLParser.DECIMAL:
					case PLpgSQLParser.EXISTS:
					case PLpgSQLParser.EXTRACT:
					case PLpgSQLParser.FLOAT:
					case PLpgSQLParser.GREATEST:
					case PLpgSQLParser.GROUPING:
					case PLpgSQLParser.INOUT:
					case PLpgSQLParser.INT:
					case PLpgSQLParser.INTEGER:
					case PLpgSQLParser.INTERVAL:
					case PLpgSQLParser.LEAST:
					case PLpgSQLParser.NATIONAL:
					case PLpgSQLParser.NCHAR:
					case PLpgSQLParser.NONE:
					case PLpgSQLParser.NULLIF:
					case PLpgSQLParser.NUMERIC:
					case PLpgSQLParser.OUT:
					case PLpgSQLParser.OVERLAY:
					case PLpgSQLParser.POSITION:
					case PLpgSQLParser.PRECISION:
					case PLpgSQLParser.REAL:
					case PLpgSQLParser.ROW:
					case PLpgSQLParser.SETOF:
					case PLpgSQLParser.SMALLINT:
					case PLpgSQLParser.SUBSTRING:
					case PLpgSQLParser.TIME:
					case PLpgSQLParser.TIMESTAMP:
					case PLpgSQLParser.TREAT:
					case PLpgSQLParser.TRIM:
					case PLpgSQLParser.VALUES:
					case PLpgSQLParser.VARCHAR:
					case PLpgSQLParser.XMLATTRIBUTES:
					case PLpgSQLParser.XMLCONCAT:
					case PLpgSQLParser.XMLELEMENT:
					case PLpgSQLParser.XMLEXISTS:
					case PLpgSQLParser.XMLFOREST:
					case PLpgSQLParser.XMLNAMESPACES:
					case PLpgSQLParser.XMLPARSE:
					case PLpgSQLParser.XMLPI:
					case PLpgSQLParser.XMLROOT:
					case PLpgSQLParser.XMLSERIALIZE:
					case PLpgSQLParser.XMLTABLE:
					case PLpgSQLParser.ALIGNMENT:
					case PLpgSQLParser.BASETYPE:
					case PLpgSQLParser.BUFFERS:
					case PLpgSQLParser.BYPASSRLS:
					case PLpgSQLParser.CANONICAL:
					case PLpgSQLParser.CATEGORY:
					case PLpgSQLParser.COLLATABLE:
					case PLpgSQLParser.COMBINEFUNC:
					case PLpgSQLParser.COMMUTATOR:
					case PLpgSQLParser.CONNECT:
					case PLpgSQLParser.COSTS:
					case PLpgSQLParser.CREATEDB:
					case PLpgSQLParser.CREATEROLE:
					case PLpgSQLParser.DESERIALFUNC:
					case PLpgSQLParser.DETERMINISTIC:
					case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
					case PLpgSQLParser.ELEMENT:
					case PLpgSQLParser.EXTENDED:
					case PLpgSQLParser.FINALFUNC:
					case PLpgSQLParser.FINALFUNC_EXTRA:
					case PLpgSQLParser.FINALFUNC_MODIFY:
					case PLpgSQLParser.FORCE_NOT_NULL:
					case PLpgSQLParser.FORCE_NULL:
					case PLpgSQLParser.FORCE_QUOTE:
					case PLpgSQLParser.FORMAT:
					case PLpgSQLParser.GETTOKEN:
					case PLpgSQLParser.HASH:
					case PLpgSQLParser.HASHES:
					case PLpgSQLParser.HEADLINE:
					case PLpgSQLParser.HYPOTHETICAL:
					case PLpgSQLParser.INDEX_CLEANUP:
					case PLpgSQLParser.INIT:
					case PLpgSQLParser.INITCOND:
					case PLpgSQLParser.INTERNALLENGTH:
					case PLpgSQLParser.JSON:
					case PLpgSQLParser.LC_COLLATE:
					case PLpgSQLParser.LC_CTYPE:
					case PLpgSQLParser.LEFTARG:
					case PLpgSQLParser.LEXIZE:
					case PLpgSQLParser.LEXTYPES:
					case PLpgSQLParser.LIST:
					case PLpgSQLParser.LOCALE:
					case PLpgSQLParser.LOGIN:
					case PLpgSQLParser.MAIN:
					case PLpgSQLParser.MERGES:
					case PLpgSQLParser.MFINALFUNC:
					case PLpgSQLParser.MFINALFUNC_EXTRA:
					case PLpgSQLParser.MFINALFUNC_MODIFY:
					case PLpgSQLParser.MINITCOND:
					case PLpgSQLParser.MINVFUNC:
					case PLpgSQLParser.MODULUS:
					case PLpgSQLParser.MSFUNC:
					case PLpgSQLParser.MSSPACE:
					case PLpgSQLParser.MSTYPE:
					case PLpgSQLParser.NEGATOR:
					case PLpgSQLParser.NOBYPASSRLS:
					case PLpgSQLParser.NOCREATEDB:
					case PLpgSQLParser.NOCREATEROLE:
					case PLpgSQLParser.NOINHERIT:
					case PLpgSQLParser.NOLOGIN:
					case PLpgSQLParser.NOREPLICATION:
					case PLpgSQLParser.NOSUPERUSER:
					case PLpgSQLParser.OUTPUT:
					case PLpgSQLParser.PASSEDBYVALUE:
					case PLpgSQLParser.PATH:
					case PLpgSQLParser.PERMISSIVE:
					case PLpgSQLParser.PLAIN:
					case PLpgSQLParser.PREFERRED:
					case PLpgSQLParser.PROVIDER:
					case PLpgSQLParser.READ_ONLY:
					case PLpgSQLParser.READ_WRITE:
					case PLpgSQLParser.RECEIVE:
					case PLpgSQLParser.REMAINDER:
					case PLpgSQLParser.REPLICATION:
					case PLpgSQLParser.RESTRICTED:
					case PLpgSQLParser.RESTRICTIVE:
					case PLpgSQLParser.RIGHTARG:
					case PLpgSQLParser.SAFE:
					case PLpgSQLParser.SEND:
					case PLpgSQLParser.SERIALFUNC:
					case PLpgSQLParser.SETTINGS:
					case PLpgSQLParser.SFUNC:
					case PLpgSQLParser.SHAREABLE:
					case PLpgSQLParser.SKIP_LOCKED:
					case PLpgSQLParser.SORTOP:
					case PLpgSQLParser.SSPACE:
					case PLpgSQLParser.STYPE:
					case PLpgSQLParser.SUBTYPE_DIFF:
					case PLpgSQLParser.SUBTYPE_OPCLASS:
					case PLpgSQLParser.SUBTYPE:
					case PLpgSQLParser.SUMMARY:
					case PLpgSQLParser.SUPERUSER:
					case PLpgSQLParser.TIMING:
					case PLpgSQLParser.TYPMOD_IN:
					case PLpgSQLParser.TYPMOD_OUT:
					case PLpgSQLParser.UNSAFE:
					case PLpgSQLParser.USAGE:
					case PLpgSQLParser.VARIABLE:
					case PLpgSQLParser.YAML:
					case PLpgSQLParser.ALIAS:
					case PLpgSQLParser.ASSERT:
					case PLpgSQLParser.CONSTANT:
					case PLpgSQLParser.DATATYPE:
					case PLpgSQLParser.DEBUG:
					case PLpgSQLParser.DETAIL:
					case PLpgSQLParser.DIAGNOSTICS:
					case PLpgSQLParser.ELSEIF:
					case PLpgSQLParser.ELSIF:
					case PLpgSQLParser.ERRCODE:
					case PLpgSQLParser.EXIT:
					case PLpgSQLParser.EXCEPTION:
					case PLpgSQLParser.FOREACH:
					case PLpgSQLParser.GET:
					case PLpgSQLParser.HINT:
					case PLpgSQLParser.INFO:
					case PLpgSQLParser.LOG:
					case PLpgSQLParser.LOOP:
					case PLpgSQLParser.MESSAGE:
					case PLpgSQLParser.NOTICE:
					case PLpgSQLParser.OPEN:
					case PLpgSQLParser.PERFORM:
					case PLpgSQLParser.QUERY:
					case PLpgSQLParser.RAISE:
					case PLpgSQLParser.RECORD:
					case PLpgSQLParser.RETURN:
					case PLpgSQLParser.REVERSE:
					case PLpgSQLParser.ROWTYPE:
					case PLpgSQLParser.SLICE:
					case PLpgSQLParser.SQLSTATE:
					case PLpgSQLParser.STACKED:
					case PLpgSQLParser.WARNING:
					case PLpgSQLParser.WHILE:
					case PLpgSQLParser.Identifier:
					case PLpgSQLParser.QuotedIdentifier:
						{
						this.state = 5884;
						this.identifier();
						}
						break;
					case PLpgSQLParser.LEFT_PAREN:
						{
						this.state = 5885;
						this.window_definition();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5890;
				this.function_construct();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5891;
				this.extract_function();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5892;
				this.system_function();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5893;
				this.date_time_function();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5894;
				this.string_value_function();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5895;
				this.xml_function();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vex_or_named_notation(): Vex_or_named_notationContext {
		let _localctx: Vex_or_named_notationContext = new Vex_or_named_notationContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, PLpgSQLParser.RULE_vex_or_named_notation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5899;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.VARIADIC) {
				{
				this.state = 5898;
				this.match(PLpgSQLParser.VARIADIC);
				}
			}

			this.state = 5904;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 738, this._ctx) ) {
			case 1:
				{
				this.state = 5901;
				_localctx._argname = this.identifier();
				this.state = 5902;
				this.pointer();
				}
				break;
			}
			this.state = 5906;
			this.vex(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pointer(): PointerContext {
		let _localctx: PointerContext = new PointerContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, PLpgSQLParser.RULE_pointer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5908;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.EQUAL_GTH || _la === PLpgSQLParser.COLON_EQUAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_construct(): Function_constructContext {
		let _localctx: Function_constructContext = new Function_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, PLpgSQLParser.RULE_function_construct);
		let _la: number;
		try {
			this.state = 5935;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.XMLCONCAT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5910;
				_la = this._input.LA(1);
				if (!(((((_la - 299)) & ~0x1F) === 0 && ((1 << (_la - 299)) & ((1 << (PLpgSQLParser.COALESCE - 299)) | (1 << (PLpgSQLParser.GREATEST - 299)) | (1 << (PLpgSQLParser.GROUPING - 299)) | (1 << (PLpgSQLParser.LEAST - 299)) | (1 << (PLpgSQLParser.NULLIF - 299)))) !== 0) || _la === PLpgSQLParser.XMLCONCAT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5911;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5912;
				this.vex(0);
				this.state = 5917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 5913;
					this.match(PLpgSQLParser.COMMA);
					this.state = 5914;
					this.vex(0);
					}
					}
					this.state = 5919;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5920;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.ROW:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5922;
				this.match(PLpgSQLParser.ROW);
				this.state = 5923;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
					{
					this.state = 5924;
					this.vex(0);
					this.state = 5929;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 5925;
						this.match(PLpgSQLParser.COMMA);
						this.state = 5926;
						this.vex(0);
						}
						}
						this.state = 5931;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5934;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extract_function(): Extract_functionContext {
		let _localctx: Extract_functionContext = new Extract_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, PLpgSQLParser.RULE_extract_function);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5937;
			this.match(PLpgSQLParser.EXTRACT);
			this.state = 5938;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 5941;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 5939;
				this.identifier();
				}
				break;
			case PLpgSQLParser.Character_String_Literal:
			case PLpgSQLParser.BeginDollarStringConstant:
				{
				this.state = 5940;
				this.character_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5943;
			this.match(PLpgSQLParser.FROM);
			this.state = 5944;
			this.vex(0);
			this.state = 5945;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public system_function(): System_functionContext {
		let _localctx: System_functionContext = new System_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, PLpgSQLParser.RULE_system_function);
		try {
			this.state = 5953;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CURRENT_CATALOG:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5947;
				this.match(PLpgSQLParser.CURRENT_CATALOG);
				}
				break;
			case PLpgSQLParser.CURRENT_SCHEMA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5948;
				this.match(PLpgSQLParser.CURRENT_SCHEMA);
				}
				break;
			case PLpgSQLParser.CURRENT_USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5949;
				this.match(PLpgSQLParser.CURRENT_USER);
				}
				break;
			case PLpgSQLParser.SESSION_USER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5950;
				this.match(PLpgSQLParser.SESSION_USER);
				}
				break;
			case PLpgSQLParser.USER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5951;
				this.match(PLpgSQLParser.USER);
				}
				break;
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.CAST:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5952;
				this.cast_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_time_function(): Date_time_functionContext {
		let _localctx: Date_time_functionContext = new Date_time_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, PLpgSQLParser.RULE_date_time_function);
		try {
			this.state = 5972;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.CURRENT_DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5955;
				this.match(PLpgSQLParser.CURRENT_DATE);
				}
				break;
			case PLpgSQLParser.CURRENT_TIME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5956;
				this.match(PLpgSQLParser.CURRENT_TIME);
				this.state = 5958;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 745, this._ctx) ) {
				case 1:
					{
					this.state = 5957;
					this.type_length();
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5960;
				this.match(PLpgSQLParser.CURRENT_TIMESTAMP);
				this.state = 5962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 746, this._ctx) ) {
				case 1:
					{
					this.state = 5961;
					this.type_length();
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.LOCALTIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5964;
				this.match(PLpgSQLParser.LOCALTIME);
				this.state = 5966;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 747, this._ctx) ) {
				case 1:
					{
					this.state = 5965;
					this.type_length();
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.LOCALTIMESTAMP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5968;
				this.match(PLpgSQLParser.LOCALTIMESTAMP);
				this.state = 5970;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 748, this._ctx) ) {
				case 1:
					{
					this.state = 5969;
					this.type_length();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public string_value_function(): String_value_functionContext {
		let _localctx: String_value_functionContext = new String_value_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, PLpgSQLParser.RULE_string_value_function);
		let _la: number;
		try {
			this.state = 6041;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.TRIM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5974;
				this.match(PLpgSQLParser.TRIM);
				this.state = 5975;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.BOTH || _la === PLpgSQLParser.LEADING || _la === PLpgSQLParser.TRAILING) {
					{
					this.state = 5976;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.BOTH || _la === PLpgSQLParser.LEADING || _la === PLpgSQLParser.TRAILING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5991;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 753, this._ctx) ) {
				case 1:
					{
					this.state = 5979;
					_localctx._chars = this.vex(0);
					this.state = 5980;
					this.match(PLpgSQLParser.FROM);
					this.state = 5981;
					_localctx._str = this.vex(0);
					}
					break;

				case 2:
					{
					this.state = 5984;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.FROM) {
						{
						this.state = 5983;
						this.match(PLpgSQLParser.FROM);
						}
					}

					this.state = 5986;
					_localctx._str = this.vex(0);
					this.state = 5989;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.COMMA) {
						{
						this.state = 5987;
						this.match(PLpgSQLParser.COMMA);
						this.state = 5988;
						_localctx._chars = this.vex(0);
						}
					}

					}
					break;
				}
				this.state = 5993;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.SUBSTRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5995;
				this.match(PLpgSQLParser.SUBSTRING);
				this.state = 5996;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 5997;
				this.vex(0);
				this.state = 6002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 5998;
					this.match(PLpgSQLParser.COMMA);
					this.state = 5999;
					this.vex(0);
					}
					}
					this.state = 6004;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FROM) {
					{
					this.state = 6005;
					this.match(PLpgSQLParser.FROM);
					this.state = 6006;
					this.vex(0);
					}
				}

				this.state = 6011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOR) {
					{
					this.state = 6009;
					this.match(PLpgSQLParser.FOR);
					this.state = 6010;
					this.vex(0);
					}
				}

				this.state = 6013;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.POSITION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6015;
				this.match(PLpgSQLParser.POSITION);
				this.state = 6016;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6017;
				this.vex_b(0);
				this.state = 6018;
				this.match(PLpgSQLParser.IN);
				this.state = 6019;
				this.vex(0);
				this.state = 6020;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.OVERLAY:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6022;
				this.match(PLpgSQLParser.OVERLAY);
				this.state = 6023;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6024;
				this.vex(0);
				this.state = 6025;
				this.match(PLpgSQLParser.PLACING);
				this.state = 6026;
				this.vex(0);
				this.state = 6027;
				this.match(PLpgSQLParser.FROM);
				this.state = 6028;
				this.vex(0);
				this.state = 6031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOR) {
					{
					this.state = 6029;
					this.match(PLpgSQLParser.FOR);
					this.state = 6030;
					this.vex(0);
					}
				}

				this.state = 6033;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.COLLATION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6035;
				this.match(PLpgSQLParser.COLLATION);
				this.state = 6036;
				this.match(PLpgSQLParser.FOR);
				this.state = 6037;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6038;
				this.vex(0);
				this.state = 6039;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_function(): Xml_functionContext {
		let _localctx: Xml_functionContext = new Xml_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, PLpgSQLParser.RULE_xml_function);
		let _la: number;
		try {
			this.state = 6204;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.XMLELEMENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6043;
				this.match(PLpgSQLParser.XMLELEMENT);
				this.state = 6044;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6045;
				this.match(PLpgSQLParser.NAME);
				this.state = 6046;
				_localctx._name = this.identifier();
				this.state = 6068;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 762, this._ctx) ) {
				case 1:
					{
					this.state = 6047;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6048;
					this.match(PLpgSQLParser.XMLATTRIBUTES);
					this.state = 6049;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 6050;
					this.vex(0);
					this.state = 6053;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.AS) {
						{
						this.state = 6051;
						this.match(PLpgSQLParser.AS);
						this.state = 6052;
						_localctx._attname = this.identifier();
						}
					}

					this.state = 6063;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 6055;
						this.match(PLpgSQLParser.COMMA);
						this.state = 6056;
						this.vex(0);
						this.state = 6059;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PLpgSQLParser.AS) {
							{
							this.state = 6057;
							this.match(PLpgSQLParser.AS);
							this.state = 6058;
							_localctx._attname = this.identifier();
							}
						}

						}
						}
						this.state = 6065;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6066;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 6074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6070;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6071;
					this.vex(0);
					}
					}
					this.state = 6076;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6077;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLFOREST:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6079;
				this.match(PLpgSQLParser.XMLFOREST);
				this.state = 6080;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6081;
				this.vex(0);
				this.state = 6084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AS) {
					{
					this.state = 6082;
					this.match(PLpgSQLParser.AS);
					this.state = 6083;
					_localctx._name = this.identifier();
					}
				}

				this.state = 6094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6086;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6087;
					this.vex(0);
					this.state = 6090;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.AS) {
						{
						this.state = 6088;
						this.match(PLpgSQLParser.AS);
						this.state = 6089;
						_localctx._name = this.identifier();
						}
					}

					}
					}
					this.state = 6096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6097;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLPI:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6099;
				this.match(PLpgSQLParser.XMLPI);
				this.state = 6100;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6101;
				this.match(PLpgSQLParser.NAME);
				this.state = 6102;
				_localctx._name = this.identifier();
				this.state = 6105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COMMA) {
					{
					this.state = 6103;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6104;
					this.vex(0);
					}
				}

				this.state = 6107;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLROOT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6109;
				this.match(PLpgSQLParser.XMLROOT);
				this.state = 6110;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6111;
				this.vex(0);
				this.state = 6112;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6113;
				this.match(PLpgSQLParser.VERSION);
				this.state = 6117;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 768, this._ctx) ) {
				case 1:
					{
					this.state = 6114;
					this.vex(0);
					}
					break;

				case 2:
					{
					this.state = 6115;
					this.match(PLpgSQLParser.NO);
					this.state = 6116;
					this.match(PLpgSQLParser.VALUE);
					}
					break;
				}
				this.state = 6127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COMMA) {
					{
					this.state = 6119;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6120;
					this.match(PLpgSQLParser.STANDALONE);
					this.state = 6125;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 769, this._ctx) ) {
					case 1:
						{
						this.state = 6121;
						this.match(PLpgSQLParser.YES);
						}
						break;

					case 2:
						{
						this.state = 6122;
						this.match(PLpgSQLParser.NO);
						}
						break;

					case 3:
						{
						this.state = 6123;
						this.match(PLpgSQLParser.NO);
						this.state = 6124;
						this.match(PLpgSQLParser.VALUE);
						}
						break;
					}
					}
				}

				this.state = 6129;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLEXISTS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6131;
				this.match(PLpgSQLParser.XMLEXISTS);
				this.state = 6132;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6133;
				this.vex(0);
				this.state = 6134;
				this.match(PLpgSQLParser.PASSING);
				this.state = 6137;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 771, this._ctx) ) {
				case 1:
					{
					this.state = 6135;
					this.match(PLpgSQLParser.BY);
					this.state = 6136;
					this.match(PLpgSQLParser.REF);
					}
					break;
				}
				this.state = 6139;
				this.vex(0);
				this.state = 6142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.BY) {
					{
					this.state = 6140;
					this.match(PLpgSQLParser.BY);
					this.state = 6141;
					this.match(PLpgSQLParser.REF);
					}
				}

				this.state = 6144;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLPARSE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6146;
				this.match(PLpgSQLParser.XMLPARSE);
				this.state = 6147;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6148;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONTENT || _la === PLpgSQLParser.DOCUMENT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6149;
				this.vex(0);
				this.state = 6150;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLSERIALIZE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6152;
				this.match(PLpgSQLParser.XMLSERIALIZE);
				this.state = 6153;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6154;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONTENT || _la === PLpgSQLParser.DOCUMENT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6155;
				this.vex(0);
				this.state = 6156;
				this.match(PLpgSQLParser.AS);
				this.state = 6157;
				this.data_type();
				this.state = 6158;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.XMLTABLE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6160;
				this.match(PLpgSQLParser.XMLTABLE);
				this.state = 6161;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6180;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 774, this._ctx) ) {
				case 1:
					{
					this.state = 6162;
					this.match(PLpgSQLParser.XMLNAMESPACES);
					this.state = 6163;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 6164;
					this.vex(0);
					this.state = 6165;
					this.match(PLpgSQLParser.AS);
					this.state = 6166;
					_localctx._name = this.identifier();
					this.state = 6174;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 6167;
						this.match(PLpgSQLParser.COMMA);
						this.state = 6168;
						this.vex(0);
						this.state = 6169;
						this.match(PLpgSQLParser.AS);
						this.state = 6170;
						_localctx._name = this.identifier();
						}
						}
						this.state = 6176;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6177;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					this.state = 6178;
					this.match(PLpgSQLParser.COMMA);
					}
					break;
				}
				this.state = 6182;
				this.vex(0);
				this.state = 6183;
				this.match(PLpgSQLParser.PASSING);
				this.state = 6186;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 775, this._ctx) ) {
				case 1:
					{
					this.state = 6184;
					this.match(PLpgSQLParser.BY);
					this.state = 6185;
					this.match(PLpgSQLParser.REF);
					}
					break;
				}
				this.state = 6188;
				this.vex(0);
				this.state = 6191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.BY) {
					{
					this.state = 6189;
					this.match(PLpgSQLParser.BY);
					this.state = 6190;
					this.match(PLpgSQLParser.REF);
					}
				}

				this.state = 6193;
				this.match(PLpgSQLParser.COLUMNS);
				this.state = 6194;
				this.xml_table_column();
				this.state = 6199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6195;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6196;
					this.xml_table_column();
					}
					}
					this.state = 6201;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6202;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_table_column(): Xml_table_columnContext {
		let _localctx: Xml_table_columnContext = new Xml_table_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, PLpgSQLParser.RULE_xml_table_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6206;
			_localctx._name = this.identifier();
			this.state = 6224;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.AUTHORIZATION:
			case PLpgSQLParser.BINARY:
			case PLpgSQLParser.COLLATION:
			case PLpgSQLParser.CONCURRENTLY:
			case PLpgSQLParser.CROSS:
			case PLpgSQLParser.CURRENT_SCHEMA:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.ILIKE:
			case PLpgSQLParser.INNER:
			case PLpgSQLParser.IS:
			case PLpgSQLParser.ISNULL:
			case PLpgSQLParser.JOIN:
			case PLpgSQLParser.LEFT:
			case PLpgSQLParser.LIKE:
			case PLpgSQLParser.NATURAL:
			case PLpgSQLParser.NOTNULL:
			case PLpgSQLParser.OUTER:
			case PLpgSQLParser.OVERLAPS:
			case PLpgSQLParser.RIGHT:
			case PLpgSQLParser.SIMILAR:
			case PLpgSQLParser.TABLESAMPLE:
			case PLpgSQLParser.VERBOSE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 6207;
				this.data_type();
				this.state = 6210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.PATH) {
					{
					this.state = 6208;
					this.match(PLpgSQLParser.PATH);
					this.state = 6209;
					this.vex(0);
					}
				}

				this.state = 6214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.DEFAULT) {
					{
					this.state = 6212;
					this.match(PLpgSQLParser.DEFAULT);
					this.state = 6213;
					this.vex(0);
					}
				}

				this.state = 6220;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT || _la === PLpgSQLParser.NULL) {
					{
					this.state = 6217;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.NOT) {
						{
						this.state = 6216;
						this.match(PLpgSQLParser.NOT);
						}
					}

					this.state = 6219;
					this.match(PLpgSQLParser.NULL);
					}
				}

				}
				break;
			case PLpgSQLParser.FOR:
				{
				this.state = 6222;
				this.match(PLpgSQLParser.FOR);
				this.state = 6223;
				this.match(PLpgSQLParser.ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparison_mod(): Comparison_modContext {
		let _localctx: Comparison_modContext = new Comparison_modContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, PLpgSQLParser.RULE_comparison_mod);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6226;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.ANY || _la === PLpgSQLParser.SOME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6227;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6230;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 784, this._ctx) ) {
			case 1:
				{
				this.state = 6228;
				this.vex(0);
				}
				break;

			case 2:
				{
				this.state = 6229;
				this.select_stmt_no_parens();
				}
				break;
			}
			this.state = 6232;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filter_clause(): Filter_clauseContext {
		let _localctx: Filter_clauseContext = new Filter_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, PLpgSQLParser.RULE_filter_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6234;
			this.match(PLpgSQLParser.FILTER);
			this.state = 6235;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6236;
			this.match(PLpgSQLParser.WHERE);
			this.state = 6237;
			this.vex(0);
			this.state = 6238;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_definition(): Window_definitionContext {
		let _localctx: Window_definitionContext = new Window_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, PLpgSQLParser.RULE_window_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6240;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6242;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 785, this._ctx) ) {
			case 1:
				{
				this.state = 6241;
				this.identifier();
				}
				break;
			}
			this.state = 6245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.PARTITION) {
				{
				this.state = 6244;
				this.partition_by_columns();
				}
			}

			this.state = 6248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ORDER) {
				{
				this.state = 6247;
				this.orderby_clause();
				}
			}

			this.state = 6251;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.GROUPS || _la === PLpgSQLParser.RANGE || _la === PLpgSQLParser.ROWS) {
				{
				this.state = 6250;
				this.frame_clause();
				}
			}

			this.state = 6253;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_clause(): Frame_clauseContext {
		let _localctx: Frame_clauseContext = new Frame_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, PLpgSQLParser.RULE_frame_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6255;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.GROUPS || _la === PLpgSQLParser.RANGE || _la === PLpgSQLParser.ROWS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 789, this._ctx) ) {
			case 1:
				{
				this.state = 6256;
				this.frame_bound();
				}
				break;

			case 2:
				{
				this.state = 6257;
				this.match(PLpgSQLParser.BETWEEN);
				this.state = 6258;
				this.frame_bound();
				this.state = 6259;
				this.match(PLpgSQLParser.AND);
				this.state = 6260;
				this.frame_bound();
				}
				break;
			}
			this.state = 6273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.EXCLUDE) {
				{
				this.state = 6264;
				this.match(PLpgSQLParser.EXCLUDE);
				this.state = 6271;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.CURRENT:
					{
					this.state = 6265;
					this.match(PLpgSQLParser.CURRENT);
					this.state = 6266;
					this.match(PLpgSQLParser.ROW);
					}
					break;
				case PLpgSQLParser.GROUP:
					{
					this.state = 6267;
					this.match(PLpgSQLParser.GROUP);
					}
					break;
				case PLpgSQLParser.TIES:
					{
					this.state = 6268;
					this.match(PLpgSQLParser.TIES);
					}
					break;
				case PLpgSQLParser.NO:
					{
					this.state = 6269;
					this.match(PLpgSQLParser.NO);
					this.state = 6270;
					this.match(PLpgSQLParser.OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_bound(): Frame_boundContext {
		let _localctx: Frame_boundContext = new Frame_boundContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, PLpgSQLParser.RULE_frame_bound);
		let _la: number;
		try {
			this.state = 6280;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 792, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6275;
				this.vex(0);
				this.state = 6276;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.FOLLOWING || _la === PLpgSQLParser.PRECEDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6278;
				this.match(PLpgSQLParser.CURRENT);
				this.state = 6279;
				this.match(PLpgSQLParser.ROW);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_expression(): Array_expressionContext {
		let _localctx: Array_expressionContext = new Array_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, PLpgSQLParser.RULE_array_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6282;
			this.match(PLpgSQLParser.ARRAY);
			this.state = 6285;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LEFT_BRACKET:
				{
				this.state = 6283;
				this.array_elements();
				}
				break;
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 6284;
				this.table_subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_elements(): Array_elementsContext {
		let _localctx: Array_elementsContext = new Array_elementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, PLpgSQLParser.RULE_array_elements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6287;
			this.match(PLpgSQLParser.LEFT_BRACKET);
			this.state = 6302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LEFT_BRACKET - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
				{
				this.state = 6290;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.AUTHORIZATION:
				case PLpgSQLParser.BINARY:
				case PLpgSQLParser.COLLATION:
				case PLpgSQLParser.CONCURRENTLY:
				case PLpgSQLParser.CROSS:
				case PLpgSQLParser.CURRENT_SCHEMA:
				case PLpgSQLParser.FREEZE:
				case PLpgSQLParser.FULL:
				case PLpgSQLParser.ILIKE:
				case PLpgSQLParser.INNER:
				case PLpgSQLParser.IS:
				case PLpgSQLParser.ISNULL:
				case PLpgSQLParser.JOIN:
				case PLpgSQLParser.LEFT:
				case PLpgSQLParser.LIKE:
				case PLpgSQLParser.NATURAL:
				case PLpgSQLParser.NOTNULL:
				case PLpgSQLParser.OUTER:
				case PLpgSQLParser.OVERLAPS:
				case PLpgSQLParser.RIGHT:
				case PLpgSQLParser.SIMILAR:
				case PLpgSQLParser.TABLESAMPLE:
				case PLpgSQLParser.VERBOSE:
				case PLpgSQLParser.ALL:
				case PLpgSQLParser.ANY:
				case PLpgSQLParser.ARRAY:
				case PLpgSQLParser.CASE:
				case PLpgSQLParser.CAST:
				case PLpgSQLParser.CURRENT_CATALOG:
				case PLpgSQLParser.CURRENT_DATE:
				case PLpgSQLParser.CURRENT_TIME:
				case PLpgSQLParser.CURRENT_TIMESTAMP:
				case PLpgSQLParser.CURRENT_USER:
				case PLpgSQLParser.FALSE:
				case PLpgSQLParser.LOCALTIME:
				case PLpgSQLParser.LOCALTIMESTAMP:
				case PLpgSQLParser.NOT:
				case PLpgSQLParser.NULL:
				case PLpgSQLParser.ON:
				case PLpgSQLParser.SESSION_USER:
				case PLpgSQLParser.SOME:
				case PLpgSQLParser.TRUE:
				case PLpgSQLParser.USER:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.LEFT_PAREN:
				case PLpgSQLParser.PLUS:
				case PLpgSQLParser.MINUS:
				case PLpgSQLParser.MULTIPLY:
				case PLpgSQLParser.LESS_LESS:
				case PLpgSQLParser.GREATER_GREATER:
				case PLpgSQLParser.HASH_SIGN:
				case PLpgSQLParser.OP_CHARS:
				case PLpgSQLParser.NUMBER_LITERAL:
				case PLpgSQLParser.REAL_NUMBER:
				case PLpgSQLParser.DOLLAR_NUMBER:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 6288;
					this.vex(0);
					}
					break;
				case PLpgSQLParser.LEFT_BRACKET:
					{
					this.state = 6289;
					this.array_elements();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6292;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6295;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.ABORT:
					case PLpgSQLParser.ABSOLUTE:
					case PLpgSQLParser.ACCESS:
					case PLpgSQLParser.ACTION:
					case PLpgSQLParser.ADD:
					case PLpgSQLParser.ADMIN:
					case PLpgSQLParser.AFTER:
					case PLpgSQLParser.AGGREGATE:
					case PLpgSQLParser.ALSO:
					case PLpgSQLParser.ALTER:
					case PLpgSQLParser.ALWAYS:
					case PLpgSQLParser.ASSERTION:
					case PLpgSQLParser.ASSIGNMENT:
					case PLpgSQLParser.AT:
					case PLpgSQLParser.ATTACH:
					case PLpgSQLParser.ATTRIBUTE:
					case PLpgSQLParser.BACKWARD:
					case PLpgSQLParser.BEFORE:
					case PLpgSQLParser.BEGIN:
					case PLpgSQLParser.BY:
					case PLpgSQLParser.CACHE:
					case PLpgSQLParser.CALL:
					case PLpgSQLParser.CALLED:
					case PLpgSQLParser.CASCADE:
					case PLpgSQLParser.CASCADED:
					case PLpgSQLParser.CATALOG:
					case PLpgSQLParser.CHAIN:
					case PLpgSQLParser.CHARACTERISTICS:
					case PLpgSQLParser.CHECKPOINT:
					case PLpgSQLParser.CLASS:
					case PLpgSQLParser.CLOSE:
					case PLpgSQLParser.CLUSTER:
					case PLpgSQLParser.COLUMNS:
					case PLpgSQLParser.COMMENT:
					case PLpgSQLParser.COMMENTS:
					case PLpgSQLParser.COMMIT:
					case PLpgSQLParser.COMMITTED:
					case PLpgSQLParser.CONFIGURATION:
					case PLpgSQLParser.CONFLICT:
					case PLpgSQLParser.CONNECTION:
					case PLpgSQLParser.CONSTRAINTS:
					case PLpgSQLParser.CONTENT:
					case PLpgSQLParser.CONTINUE:
					case PLpgSQLParser.CONVERSION:
					case PLpgSQLParser.COPY:
					case PLpgSQLParser.COST:
					case PLpgSQLParser.CSV:
					case PLpgSQLParser.CUBE:
					case PLpgSQLParser.CURRENT:
					case PLpgSQLParser.CURSOR:
					case PLpgSQLParser.CYCLE:
					case PLpgSQLParser.DATA:
					case PLpgSQLParser.DATABASE:
					case PLpgSQLParser.DAY:
					case PLpgSQLParser.DEALLOCATE:
					case PLpgSQLParser.DECLARE:
					case PLpgSQLParser.DEFAULTS:
					case PLpgSQLParser.DEFERRED:
					case PLpgSQLParser.DEFINER:
					case PLpgSQLParser.DELETE:
					case PLpgSQLParser.DELIMITER:
					case PLpgSQLParser.DELIMITERS:
					case PLpgSQLParser.DEPENDS:
					case PLpgSQLParser.DETACH:
					case PLpgSQLParser.DICTIONARY:
					case PLpgSQLParser.DISABLE:
					case PLpgSQLParser.DISCARD:
					case PLpgSQLParser.DOCUMENT:
					case PLpgSQLParser.DOMAIN:
					case PLpgSQLParser.DOUBLE:
					case PLpgSQLParser.DROP:
					case PLpgSQLParser.EACH:
					case PLpgSQLParser.ENABLE:
					case PLpgSQLParser.ENCODING:
					case PLpgSQLParser.ENCRYPTED:
					case PLpgSQLParser.ENUM:
					case PLpgSQLParser.ESCAPE:
					case PLpgSQLParser.EVENT:
					case PLpgSQLParser.EXCLUDE:
					case PLpgSQLParser.EXCLUDING:
					case PLpgSQLParser.EXCLUSIVE:
					case PLpgSQLParser.EXECUTE:
					case PLpgSQLParser.EXPLAIN:
					case PLpgSQLParser.EXTENSION:
					case PLpgSQLParser.EXTERNAL:
					case PLpgSQLParser.FAMILY:
					case PLpgSQLParser.FILTER:
					case PLpgSQLParser.FIRST:
					case PLpgSQLParser.FOLLOWING:
					case PLpgSQLParser.FORCE:
					case PLpgSQLParser.FORWARD:
					case PLpgSQLParser.FUNCTION:
					case PLpgSQLParser.FUNCTIONS:
					case PLpgSQLParser.GENERATED:
					case PLpgSQLParser.GLOBAL:
					case PLpgSQLParser.GRANTED:
					case PLpgSQLParser.GROUPS:
					case PLpgSQLParser.HANDLER:
					case PLpgSQLParser.HEADER:
					case PLpgSQLParser.HOLD:
					case PLpgSQLParser.HOUR:
					case PLpgSQLParser.IDENTITY:
					case PLpgSQLParser.IF:
					case PLpgSQLParser.IMMEDIATE:
					case PLpgSQLParser.IMMUTABLE:
					case PLpgSQLParser.IMPLICIT:
					case PLpgSQLParser.IMPORT:
					case PLpgSQLParser.INCLUDE:
					case PLpgSQLParser.INCLUDING:
					case PLpgSQLParser.INCREMENT:
					case PLpgSQLParser.INDEX:
					case PLpgSQLParser.INDEXES:
					case PLpgSQLParser.INHERIT:
					case PLpgSQLParser.INHERITS:
					case PLpgSQLParser.INLINE:
					case PLpgSQLParser.INPUT:
					case PLpgSQLParser.INSENSITIVE:
					case PLpgSQLParser.INSERT:
					case PLpgSQLParser.INSTEAD:
					case PLpgSQLParser.INVOKER:
					case PLpgSQLParser.ISOLATION:
					case PLpgSQLParser.KEY:
					case PLpgSQLParser.LABEL:
					case PLpgSQLParser.LANGUAGE:
					case PLpgSQLParser.LARGE:
					case PLpgSQLParser.LAST:
					case PLpgSQLParser.LEAKPROOF:
					case PLpgSQLParser.LEVEL:
					case PLpgSQLParser.LISTEN:
					case PLpgSQLParser.LOAD:
					case PLpgSQLParser.LOCAL:
					case PLpgSQLParser.LOCATION:
					case PLpgSQLParser.LOCK:
					case PLpgSQLParser.LOCKED:
					case PLpgSQLParser.LOGGED:
					case PLpgSQLParser.MAPPING:
					case PLpgSQLParser.MATCH:
					case PLpgSQLParser.MATERIALIZED:
					case PLpgSQLParser.MAXVALUE:
					case PLpgSQLParser.METHOD:
					case PLpgSQLParser.MINUTE:
					case PLpgSQLParser.MINVALUE:
					case PLpgSQLParser.MODE:
					case PLpgSQLParser.MONTH:
					case PLpgSQLParser.MOVE:
					case PLpgSQLParser.NAME:
					case PLpgSQLParser.NAMES:
					case PLpgSQLParser.NEW:
					case PLpgSQLParser.NEXT:
					case PLpgSQLParser.NO:
					case PLpgSQLParser.NOTHING:
					case PLpgSQLParser.NOTIFY:
					case PLpgSQLParser.NOWAIT:
					case PLpgSQLParser.NULLS:
					case PLpgSQLParser.OBJECT:
					case PLpgSQLParser.OF:
					case PLpgSQLParser.OFF:
					case PLpgSQLParser.OIDS:
					case PLpgSQLParser.OLD:
					case PLpgSQLParser.OPERATOR:
					case PLpgSQLParser.OPTION:
					case PLpgSQLParser.OPTIONS:
					case PLpgSQLParser.ORDINALITY:
					case PLpgSQLParser.OTHERS:
					case PLpgSQLParser.OVER:
					case PLpgSQLParser.OVERRIDING:
					case PLpgSQLParser.OWNED:
					case PLpgSQLParser.OWNER:
					case PLpgSQLParser.PARALLEL:
					case PLpgSQLParser.PARSER:
					case PLpgSQLParser.PARTIAL:
					case PLpgSQLParser.PARTITION:
					case PLpgSQLParser.PASSING:
					case PLpgSQLParser.PASSWORD:
					case PLpgSQLParser.PLANS:
					case PLpgSQLParser.POLICY:
					case PLpgSQLParser.PRECEDING:
					case PLpgSQLParser.PREPARE:
					case PLpgSQLParser.PREPARED:
					case PLpgSQLParser.PRESERVE:
					case PLpgSQLParser.PRIOR:
					case PLpgSQLParser.PRIVILEGES:
					case PLpgSQLParser.PROCEDURAL:
					case PLpgSQLParser.PROCEDURE:
					case PLpgSQLParser.PROCEDURES:
					case PLpgSQLParser.PROGRAM:
					case PLpgSQLParser.PUBLICATION:
					case PLpgSQLParser.QUOTE:
					case PLpgSQLParser.RANGE:
					case PLpgSQLParser.READ:
					case PLpgSQLParser.REASSIGN:
					case PLpgSQLParser.RECHECK:
					case PLpgSQLParser.RECURSIVE:
					case PLpgSQLParser.REF:
					case PLpgSQLParser.REFERENCING:
					case PLpgSQLParser.REFRESH:
					case PLpgSQLParser.REINDEX:
					case PLpgSQLParser.RELATIVE:
					case PLpgSQLParser.RELEASE:
					case PLpgSQLParser.RENAME:
					case PLpgSQLParser.REPEATABLE:
					case PLpgSQLParser.REPLACE:
					case PLpgSQLParser.REPLICA:
					case PLpgSQLParser.RESET:
					case PLpgSQLParser.RESTART:
					case PLpgSQLParser.RESTRICT:
					case PLpgSQLParser.RETURNS:
					case PLpgSQLParser.REVOKE:
					case PLpgSQLParser.ROLE:
					case PLpgSQLParser.ROLLBACK:
					case PLpgSQLParser.ROLLUP:
					case PLpgSQLParser.ROUTINE:
					case PLpgSQLParser.ROUTINES:
					case PLpgSQLParser.ROWS:
					case PLpgSQLParser.RULE:
					case PLpgSQLParser.SAVEPOINT:
					case PLpgSQLParser.SCHEMA:
					case PLpgSQLParser.SCHEMAS:
					case PLpgSQLParser.SCROLL:
					case PLpgSQLParser.SEARCH:
					case PLpgSQLParser.SECOND:
					case PLpgSQLParser.SECURITY:
					case PLpgSQLParser.SEQUENCE:
					case PLpgSQLParser.SEQUENCES:
					case PLpgSQLParser.SERIALIZABLE:
					case PLpgSQLParser.SERVER:
					case PLpgSQLParser.SESSION:
					case PLpgSQLParser.SET:
					case PLpgSQLParser.SETS:
					case PLpgSQLParser.SHARE:
					case PLpgSQLParser.SHOW:
					case PLpgSQLParser.SIMPLE:
					case PLpgSQLParser.SKIP_:
					case PLpgSQLParser.SNAPSHOT:
					case PLpgSQLParser.SQL:
					case PLpgSQLParser.STABLE:
					case PLpgSQLParser.STANDALONE:
					case PLpgSQLParser.START:
					case PLpgSQLParser.STATEMENT:
					case PLpgSQLParser.STATISTICS:
					case PLpgSQLParser.STDIN:
					case PLpgSQLParser.STDOUT:
					case PLpgSQLParser.STORAGE:
					case PLpgSQLParser.STORED:
					case PLpgSQLParser.STRICT:
					case PLpgSQLParser.STRIP:
					case PLpgSQLParser.SUBSCRIPTION:
					case PLpgSQLParser.SUPPORT:
					case PLpgSQLParser.SYSID:
					case PLpgSQLParser.SYSTEM:
					case PLpgSQLParser.TABLES:
					case PLpgSQLParser.TABLESPACE:
					case PLpgSQLParser.TEMP:
					case PLpgSQLParser.TEMPLATE:
					case PLpgSQLParser.TEMPORARY:
					case PLpgSQLParser.TEXT:
					case PLpgSQLParser.TIES:
					case PLpgSQLParser.TRANSACTION:
					case PLpgSQLParser.TRANSFORM:
					case PLpgSQLParser.TRIGGER:
					case PLpgSQLParser.TRUNCATE:
					case PLpgSQLParser.TRUSTED:
					case PLpgSQLParser.TYPE:
					case PLpgSQLParser.TYPES:
					case PLpgSQLParser.UNBOUNDED:
					case PLpgSQLParser.UNCOMMITTED:
					case PLpgSQLParser.UNENCRYPTED:
					case PLpgSQLParser.UNKNOWN:
					case PLpgSQLParser.UNLISTEN:
					case PLpgSQLParser.UNLOGGED:
					case PLpgSQLParser.UNTIL:
					case PLpgSQLParser.UPDATE:
					case PLpgSQLParser.VACUUM:
					case PLpgSQLParser.VALID:
					case PLpgSQLParser.VALIDATE:
					case PLpgSQLParser.VALIDATOR:
					case PLpgSQLParser.VALUE:
					case PLpgSQLParser.VARYING:
					case PLpgSQLParser.VERSION:
					case PLpgSQLParser.VIEW:
					case PLpgSQLParser.VIEWS:
					case PLpgSQLParser.VOLATILE:
					case PLpgSQLParser.WHITESPACE:
					case PLpgSQLParser.WITHIN:
					case PLpgSQLParser.WITHOUT:
					case PLpgSQLParser.WORK:
					case PLpgSQLParser.WRAPPER:
					case PLpgSQLParser.WRITE:
					case PLpgSQLParser.XML:
					case PLpgSQLParser.YEAR:
					case PLpgSQLParser.YES:
					case PLpgSQLParser.ZONE:
					case PLpgSQLParser.BETWEEN:
					case PLpgSQLParser.BIGINT:
					case PLpgSQLParser.BIT:
					case PLpgSQLParser.BOOLEAN:
					case PLpgSQLParser.CHAR:
					case PLpgSQLParser.CHARACTER:
					case PLpgSQLParser.COALESCE:
					case PLpgSQLParser.DEC:
					case PLpgSQLParser.DECIMAL:
					case PLpgSQLParser.EXISTS:
					case PLpgSQLParser.EXTRACT:
					case PLpgSQLParser.FLOAT:
					case PLpgSQLParser.GREATEST:
					case PLpgSQLParser.GROUPING:
					case PLpgSQLParser.INOUT:
					case PLpgSQLParser.INT:
					case PLpgSQLParser.INTEGER:
					case PLpgSQLParser.INTERVAL:
					case PLpgSQLParser.LEAST:
					case PLpgSQLParser.NATIONAL:
					case PLpgSQLParser.NCHAR:
					case PLpgSQLParser.NONE:
					case PLpgSQLParser.NULLIF:
					case PLpgSQLParser.NUMERIC:
					case PLpgSQLParser.OUT:
					case PLpgSQLParser.OVERLAY:
					case PLpgSQLParser.POSITION:
					case PLpgSQLParser.PRECISION:
					case PLpgSQLParser.REAL:
					case PLpgSQLParser.ROW:
					case PLpgSQLParser.SETOF:
					case PLpgSQLParser.SMALLINT:
					case PLpgSQLParser.SUBSTRING:
					case PLpgSQLParser.TIME:
					case PLpgSQLParser.TIMESTAMP:
					case PLpgSQLParser.TREAT:
					case PLpgSQLParser.TRIM:
					case PLpgSQLParser.VALUES:
					case PLpgSQLParser.VARCHAR:
					case PLpgSQLParser.XMLATTRIBUTES:
					case PLpgSQLParser.XMLCONCAT:
					case PLpgSQLParser.XMLELEMENT:
					case PLpgSQLParser.XMLEXISTS:
					case PLpgSQLParser.XMLFOREST:
					case PLpgSQLParser.XMLNAMESPACES:
					case PLpgSQLParser.XMLPARSE:
					case PLpgSQLParser.XMLPI:
					case PLpgSQLParser.XMLROOT:
					case PLpgSQLParser.XMLSERIALIZE:
					case PLpgSQLParser.XMLTABLE:
					case PLpgSQLParser.AUTHORIZATION:
					case PLpgSQLParser.BINARY:
					case PLpgSQLParser.COLLATION:
					case PLpgSQLParser.CONCURRENTLY:
					case PLpgSQLParser.CROSS:
					case PLpgSQLParser.CURRENT_SCHEMA:
					case PLpgSQLParser.FREEZE:
					case PLpgSQLParser.FULL:
					case PLpgSQLParser.ILIKE:
					case PLpgSQLParser.INNER:
					case PLpgSQLParser.IS:
					case PLpgSQLParser.ISNULL:
					case PLpgSQLParser.JOIN:
					case PLpgSQLParser.LEFT:
					case PLpgSQLParser.LIKE:
					case PLpgSQLParser.NATURAL:
					case PLpgSQLParser.NOTNULL:
					case PLpgSQLParser.OUTER:
					case PLpgSQLParser.OVERLAPS:
					case PLpgSQLParser.RIGHT:
					case PLpgSQLParser.SIMILAR:
					case PLpgSQLParser.TABLESAMPLE:
					case PLpgSQLParser.VERBOSE:
					case PLpgSQLParser.ALL:
					case PLpgSQLParser.ANY:
					case PLpgSQLParser.ARRAY:
					case PLpgSQLParser.CASE:
					case PLpgSQLParser.CAST:
					case PLpgSQLParser.CURRENT_CATALOG:
					case PLpgSQLParser.CURRENT_DATE:
					case PLpgSQLParser.CURRENT_TIME:
					case PLpgSQLParser.CURRENT_TIMESTAMP:
					case PLpgSQLParser.CURRENT_USER:
					case PLpgSQLParser.FALSE:
					case PLpgSQLParser.LOCALTIME:
					case PLpgSQLParser.LOCALTIMESTAMP:
					case PLpgSQLParser.NOT:
					case PLpgSQLParser.NULL:
					case PLpgSQLParser.ON:
					case PLpgSQLParser.SESSION_USER:
					case PLpgSQLParser.SOME:
					case PLpgSQLParser.TRUE:
					case PLpgSQLParser.USER:
					case PLpgSQLParser.ALIGNMENT:
					case PLpgSQLParser.BASETYPE:
					case PLpgSQLParser.BUFFERS:
					case PLpgSQLParser.BYPASSRLS:
					case PLpgSQLParser.CANONICAL:
					case PLpgSQLParser.CATEGORY:
					case PLpgSQLParser.COLLATABLE:
					case PLpgSQLParser.COMBINEFUNC:
					case PLpgSQLParser.COMMUTATOR:
					case PLpgSQLParser.CONNECT:
					case PLpgSQLParser.COSTS:
					case PLpgSQLParser.CREATEDB:
					case PLpgSQLParser.CREATEROLE:
					case PLpgSQLParser.DESERIALFUNC:
					case PLpgSQLParser.DETERMINISTIC:
					case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
					case PLpgSQLParser.ELEMENT:
					case PLpgSQLParser.EXTENDED:
					case PLpgSQLParser.FINALFUNC:
					case PLpgSQLParser.FINALFUNC_EXTRA:
					case PLpgSQLParser.FINALFUNC_MODIFY:
					case PLpgSQLParser.FORCE_NOT_NULL:
					case PLpgSQLParser.FORCE_NULL:
					case PLpgSQLParser.FORCE_QUOTE:
					case PLpgSQLParser.FORMAT:
					case PLpgSQLParser.GETTOKEN:
					case PLpgSQLParser.HASH:
					case PLpgSQLParser.HASHES:
					case PLpgSQLParser.HEADLINE:
					case PLpgSQLParser.HYPOTHETICAL:
					case PLpgSQLParser.INDEX_CLEANUP:
					case PLpgSQLParser.INIT:
					case PLpgSQLParser.INITCOND:
					case PLpgSQLParser.INTERNALLENGTH:
					case PLpgSQLParser.JSON:
					case PLpgSQLParser.LC_COLLATE:
					case PLpgSQLParser.LC_CTYPE:
					case PLpgSQLParser.LEFTARG:
					case PLpgSQLParser.LEXIZE:
					case PLpgSQLParser.LEXTYPES:
					case PLpgSQLParser.LIST:
					case PLpgSQLParser.LOCALE:
					case PLpgSQLParser.LOGIN:
					case PLpgSQLParser.MAIN:
					case PLpgSQLParser.MERGES:
					case PLpgSQLParser.MFINALFUNC:
					case PLpgSQLParser.MFINALFUNC_EXTRA:
					case PLpgSQLParser.MFINALFUNC_MODIFY:
					case PLpgSQLParser.MINITCOND:
					case PLpgSQLParser.MINVFUNC:
					case PLpgSQLParser.MODULUS:
					case PLpgSQLParser.MSFUNC:
					case PLpgSQLParser.MSSPACE:
					case PLpgSQLParser.MSTYPE:
					case PLpgSQLParser.NEGATOR:
					case PLpgSQLParser.NOBYPASSRLS:
					case PLpgSQLParser.NOCREATEDB:
					case PLpgSQLParser.NOCREATEROLE:
					case PLpgSQLParser.NOINHERIT:
					case PLpgSQLParser.NOLOGIN:
					case PLpgSQLParser.NOREPLICATION:
					case PLpgSQLParser.NOSUPERUSER:
					case PLpgSQLParser.OUTPUT:
					case PLpgSQLParser.PASSEDBYVALUE:
					case PLpgSQLParser.PATH:
					case PLpgSQLParser.PERMISSIVE:
					case PLpgSQLParser.PLAIN:
					case PLpgSQLParser.PREFERRED:
					case PLpgSQLParser.PROVIDER:
					case PLpgSQLParser.READ_ONLY:
					case PLpgSQLParser.READ_WRITE:
					case PLpgSQLParser.RECEIVE:
					case PLpgSQLParser.REMAINDER:
					case PLpgSQLParser.REPLICATION:
					case PLpgSQLParser.RESTRICTED:
					case PLpgSQLParser.RESTRICTIVE:
					case PLpgSQLParser.RIGHTARG:
					case PLpgSQLParser.SAFE:
					case PLpgSQLParser.SEND:
					case PLpgSQLParser.SERIALFUNC:
					case PLpgSQLParser.SETTINGS:
					case PLpgSQLParser.SFUNC:
					case PLpgSQLParser.SHAREABLE:
					case PLpgSQLParser.SKIP_LOCKED:
					case PLpgSQLParser.SORTOP:
					case PLpgSQLParser.SSPACE:
					case PLpgSQLParser.STYPE:
					case PLpgSQLParser.SUBTYPE_DIFF:
					case PLpgSQLParser.SUBTYPE_OPCLASS:
					case PLpgSQLParser.SUBTYPE:
					case PLpgSQLParser.SUMMARY:
					case PLpgSQLParser.SUPERUSER:
					case PLpgSQLParser.TIMING:
					case PLpgSQLParser.TYPMOD_IN:
					case PLpgSQLParser.TYPMOD_OUT:
					case PLpgSQLParser.UNSAFE:
					case PLpgSQLParser.USAGE:
					case PLpgSQLParser.VARIABLE:
					case PLpgSQLParser.YAML:
					case PLpgSQLParser.ALIAS:
					case PLpgSQLParser.ASSERT:
					case PLpgSQLParser.CONSTANT:
					case PLpgSQLParser.DATATYPE:
					case PLpgSQLParser.DEBUG:
					case PLpgSQLParser.DETAIL:
					case PLpgSQLParser.DIAGNOSTICS:
					case PLpgSQLParser.ELSEIF:
					case PLpgSQLParser.ELSIF:
					case PLpgSQLParser.ERRCODE:
					case PLpgSQLParser.EXIT:
					case PLpgSQLParser.EXCEPTION:
					case PLpgSQLParser.FOREACH:
					case PLpgSQLParser.GET:
					case PLpgSQLParser.HINT:
					case PLpgSQLParser.INFO:
					case PLpgSQLParser.LOG:
					case PLpgSQLParser.LOOP:
					case PLpgSQLParser.MESSAGE:
					case PLpgSQLParser.NOTICE:
					case PLpgSQLParser.OPEN:
					case PLpgSQLParser.PERFORM:
					case PLpgSQLParser.QUERY:
					case PLpgSQLParser.RAISE:
					case PLpgSQLParser.RECORD:
					case PLpgSQLParser.RETURN:
					case PLpgSQLParser.REVERSE:
					case PLpgSQLParser.ROWTYPE:
					case PLpgSQLParser.SLICE:
					case PLpgSQLParser.SQLSTATE:
					case PLpgSQLParser.STACKED:
					case PLpgSQLParser.WARNING:
					case PLpgSQLParser.WHILE:
					case PLpgSQLParser.LEFT_PAREN:
					case PLpgSQLParser.PLUS:
					case PLpgSQLParser.MINUS:
					case PLpgSQLParser.MULTIPLY:
					case PLpgSQLParser.LESS_LESS:
					case PLpgSQLParser.GREATER_GREATER:
					case PLpgSQLParser.HASH_SIGN:
					case PLpgSQLParser.OP_CHARS:
					case PLpgSQLParser.NUMBER_LITERAL:
					case PLpgSQLParser.REAL_NUMBER:
					case PLpgSQLParser.DOLLAR_NUMBER:
					case PLpgSQLParser.Identifier:
					case PLpgSQLParser.QuotedIdentifier:
					case PLpgSQLParser.Character_String_Literal:
					case PLpgSQLParser.BeginDollarStringConstant:
						{
						this.state = 6293;
						this.vex(0);
						}
						break;
					case PLpgSQLParser.LEFT_BRACKET:
						{
						this.state = 6294;
						this.array_elements();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					this.state = 6301;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6304;
			this.match(PLpgSQLParser.RIGHT_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_coercion(): Type_coercionContext {
		let _localctx: Type_coercionContext = new Type_coercionContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, PLpgSQLParser.RULE_type_coercion);
		try {
			this.state = 6315;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 799, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6306;
				this.data_type();
				this.state = 6307;
				this.character_string();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6309;
				this.match(PLpgSQLParser.INTERVAL);
				this.state = 6310;
				this.character_string();
				this.state = 6311;
				this.interval_field();
				this.state = 6313;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 798, this._ctx) ) {
				case 1:
					{
					this.state = 6312;
					this.type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_qualified_name(): Schema_qualified_nameContext {
		let _localctx: Schema_qualified_nameContext = new Schema_qualified_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, PLpgSQLParser.RULE_schema_qualified_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6317;
			this.identifier();
			this.state = 6324;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 801, this._ctx) ) {
			case 1:
				{
				this.state = 6318;
				this.match(PLpgSQLParser.DOT);
				this.state = 6319;
				this.identifier();
				this.state = 6322;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 800, this._ctx) ) {
				case 1:
					{
					this.state = 6320;
					this.match(PLpgSQLParser.DOT);
					this.state = 6321;
					this.identifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_qualifier(): Set_qualifierContext {
		let _localctx: Set_qualifierContext = new Set_qualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, PLpgSQLParser.RULE_set_qualifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6326;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.DISTINCT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_subquery(): Table_subqueryContext {
		let _localctx: Table_subqueryContext = new Table_subqueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, PLpgSQLParser.RULE_table_subquery);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6328;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6329;
			this.select_stmt();
			this.state = 6330;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_stmt(): Select_stmtContext {
		let _localctx: Select_stmtContext = new Select_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, PLpgSQLParser.RULE_select_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 6332;
				this.with_clause();
				}
			}

			this.state = 6335;
			this.select_ops(0);
			this.state = 6339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PLpgSQLParser.FETCH - 398)) | (1 << (PLpgSQLParser.FOR - 398)) | (1 << (PLpgSQLParser.LIMIT - 398)) | (1 << (PLpgSQLParser.OFFSET - 398)) | (1 << (PLpgSQLParser.ORDER - 398)))) !== 0)) {
				{
				{
				this.state = 6336;
				this.after_ops();
				}
				}
				this.state = 6341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public after_ops(): After_opsContext {
		let _localctx: After_opsContext = new After_opsContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, PLpgSQLParser.RULE_after_ops);
		let _la: number;
		try {
			this.state = 6388;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ORDER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6342;
				this.orderby_clause();
				}
				break;
			case PLpgSQLParser.LIMIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6343;
				this.match(PLpgSQLParser.LIMIT);
				this.state = 6346;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 804, this._ctx) ) {
				case 1:
					{
					this.state = 6344;
					this.vex(0);
					}
					break;

				case 2:
					{
					this.state = 6345;
					this.match(PLpgSQLParser.ALL);
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.OFFSET:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6348;
				this.match(PLpgSQLParser.OFFSET);
				this.state = 6349;
				this.vex(0);
				this.state = 6351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ROWS || _la === PLpgSQLParser.ROW) {
					{
					this.state = 6350;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.ROWS || _la === PLpgSQLParser.ROW)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case PLpgSQLParser.FETCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6353;
				this.match(PLpgSQLParser.FETCH);
				this.state = 6354;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.FIRST || _la === PLpgSQLParser.NEXT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6356;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 806, this._ctx) ) {
				case 1:
					{
					this.state = 6355;
					this.vex(0);
					}
					break;
				}
				this.state = 6358;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ROWS || _la === PLpgSQLParser.ROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ONLY) {
					{
					this.state = 6359;
					this.match(PLpgSQLParser.ONLY);
					}
				}

				}
				break;
			case PLpgSQLParser.FOR:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6362;
				this.match(PLpgSQLParser.FOR);
				this.state = 6370;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.UPDATE:
					{
					this.state = 6363;
					this.match(PLpgSQLParser.UPDATE);
					}
					break;
				case PLpgSQLParser.NO:
					{
					this.state = 6364;
					this.match(PLpgSQLParser.NO);
					this.state = 6365;
					this.match(PLpgSQLParser.KEY);
					this.state = 6366;
					this.match(PLpgSQLParser.UPDATE);
					}
					break;
				case PLpgSQLParser.SHARE:
					{
					this.state = 6367;
					this.match(PLpgSQLParser.SHARE);
					}
					break;
				case PLpgSQLParser.KEY:
					{
					this.state = 6368;
					this.match(PLpgSQLParser.KEY);
					this.state = 6369;
					this.match(PLpgSQLParser.SHARE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.OF) {
					{
					this.state = 6372;
					this.match(PLpgSQLParser.OF);
					this.state = 6373;
					this.schema_qualified_name();
					this.state = 6378;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 6374;
						this.match(PLpgSQLParser.COMMA);
						this.state = 6375;
						this.schema_qualified_name();
						}
						}
						this.state = 6380;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6386;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.NOWAIT:
					{
					this.state = 6383;
					this.match(PLpgSQLParser.NOWAIT);
					}
					break;
				case PLpgSQLParser.SKIP_:
					{
					this.state = 6384;
					this.match(PLpgSQLParser.SKIP_);
					this.state = 6385;
					this.match(PLpgSQLParser.LOCKED);
					}
					break;
				case PLpgSQLParser.EOF:
				case PLpgSQLParser.FETCH:
				case PLpgSQLParser.FOR:
				case PLpgSQLParser.LIMIT:
				case PLpgSQLParser.OFFSET:
				case PLpgSQLParser.ON:
				case PLpgSQLParser.ORDER:
				case PLpgSQLParser.RETURNING:
				case PLpgSQLParser.WITH:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.SEMI_COLON:
				case PLpgSQLParser.RIGHT_PAREN:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_stmt_no_parens(): Select_stmt_no_parensContext {
		let _localctx: Select_stmt_no_parensContext = new Select_stmt_no_parensContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, PLpgSQLParser.RULE_select_stmt_no_parens);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6391;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 6390;
				this.with_clause();
				}
			}

			this.state = 6393;
			this.select_ops_no_parens();
			this.state = 6397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PLpgSQLParser.FETCH - 398)) | (1 << (PLpgSQLParser.FOR - 398)) | (1 << (PLpgSQLParser.LIMIT - 398)) | (1 << (PLpgSQLParser.OFFSET - 398)) | (1 << (PLpgSQLParser.ORDER - 398)))) !== 0)) {
				{
				{
				this.state = 6394;
				this.after_ops();
				}
				}
				this.state = 6399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_clause(): With_clauseContext {
		let _localctx: With_clauseContext = new With_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, PLpgSQLParser.RULE_with_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6400;
			this.match(PLpgSQLParser.WITH);
			this.state = 6402;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 815, this._ctx) ) {
			case 1:
				{
				this.state = 6401;
				this.match(PLpgSQLParser.RECURSIVE);
				}
				break;
			}
			this.state = 6404;
			this.with_query();
			this.state = 6409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 6405;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6406;
				this.with_query();
				}
				}
				this.state = 6411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_query(): With_queryContext {
		let _localctx: With_queryContext = new With_queryContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, PLpgSQLParser.RULE_with_query);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6412;
			_localctx._query_name = this.identifier();
			this.state = 6424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LEFT_PAREN) {
				{
				this.state = 6413;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6414;
				_localctx._identifier = this.identifier();
				_localctx._column_name.push(_localctx._identifier);
				this.state = 6419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6415;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6416;
					_localctx._identifier = this.identifier();
					_localctx._column_name.push(_localctx._identifier);
					}
					}
					this.state = 6421;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6422;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
			}

			this.state = 6426;
			this.match(PLpgSQLParser.AS);
			this.state = 6431;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MATERIALIZED || _la === PLpgSQLParser.NOT) {
				{
				this.state = 6428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 6427;
					this.match(PLpgSQLParser.NOT);
					}
				}

				this.state = 6430;
				this.match(PLpgSQLParser.MATERIALIZED);
				}
			}

			this.state = 6433;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6434;
			this.data_statement();
			this.state = 6435;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public select_ops(): Select_opsContext;
	public select_ops(_p: number): Select_opsContext;
	// @RuleVersion(0)
	public select_ops(_p?: number): Select_opsContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Select_opsContext = new Select_opsContext(this._ctx, _parentState);
		let _prevctx: Select_opsContext = _localctx;
		let _startState: number = 632;
		this.enterRecursionRule(_localctx, 632, PLpgSQLParser.RULE_select_ops, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6443;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 6438;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6439;
				this.select_stmt();
				this.state = 6440;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.TABLE:
				{
				this.state = 6442;
				this.select_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6453;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 823, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Select_opsContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_select_ops);
					this.state = 6445;
					if (!(this.precpred(this._ctx, 2))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
					}
					this.state = 6446;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.EXCEPT || _la === PLpgSQLParser.INTERSECT || _la === PLpgSQLParser.UNION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6448;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.DISTINCT) {
						{
						this.state = 6447;
						this.set_qualifier();
						}
					}

					this.state = 6450;
					this.select_ops(3);
					}
					}
				}
				this.state = 6455;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 823, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_ops_no_parens(): Select_ops_no_parensContext {
		let _localctx: Select_ops_no_parensContext = new Select_ops_no_parensContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, PLpgSQLParser.RULE_select_ops_no_parens);
		let _la: number;
		try {
			this.state = 6469;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 826, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6456;
				this.select_ops(0);
				this.state = 6457;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.EXCEPT || _la === PLpgSQLParser.INTERSECT || _la === PLpgSQLParser.UNION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.DISTINCT) {
					{
					this.state = 6458;
					this.set_qualifier();
					}
				}

				this.state = 6466;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.SELECT:
				case PLpgSQLParser.TABLE:
					{
					this.state = 6461;
					this.select_primary();
					}
					break;
				case PLpgSQLParser.LEFT_PAREN:
					{
					this.state = 6462;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 6463;
					this.select_stmt();
					this.state = 6464;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6468;
				this.select_primary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_primary(): Select_primaryContext {
		let _localctx: Select_primaryContext = new Select_primaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, PLpgSQLParser.RULE_select_primary);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6542;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.SELECT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6471;
				this.match(PLpgSQLParser.SELECT);
				this.state = 6487;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 829, this._ctx) ) {
				case 1:
					{
					this.state = 6472;
					this.set_qualifier();
					this.state = 6485;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 828, this._ctx) ) {
					case 1:
						{
						this.state = 6473;
						this.match(PLpgSQLParser.ON);
						this.state = 6474;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 6475;
						this.vex(0);
						this.state = 6480;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === PLpgSQLParser.COMMA) {
							{
							{
							this.state = 6476;
							this.match(PLpgSQLParser.COMMA);
							this.state = 6477;
							this.vex(0);
							}
							}
							this.state = 6482;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 6483;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				this.state = 6490;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 830, this._ctx) ) {
				case 1:
					{
					this.state = 6489;
					this.select_list();
					}
					break;
				}
				this.state = 6493;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 831, this._ctx) ) {
				case 1:
					{
					this.state = 6492;
					this.into_table();
					}
					break;
				}
				this.state = 6504;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 833, this._ctx) ) {
				case 1:
					{
					this.state = 6495;
					this.match(PLpgSQLParser.FROM);
					this.state = 6496;
					this.from_item(0);
					this.state = 6501;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 832, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6497;
							this.match(PLpgSQLParser.COMMA);
							this.state = 6498;
							this.from_item(0);
							}
							}
						}
						this.state = 6503;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 832, this._ctx);
					}
					}
					break;
				}
				this.state = 6508;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 834, this._ctx) ) {
				case 1:
					{
					this.state = 6506;
					this.match(PLpgSQLParser.WHERE);
					this.state = 6507;
					this.vex(0);
					}
					break;
				}
				this.state = 6511;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 835, this._ctx) ) {
				case 1:
					{
					this.state = 6510;
					this.groupby_clause();
					}
					break;
				}
				this.state = 6515;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 836, this._ctx) ) {
				case 1:
					{
					this.state = 6513;
					this.match(PLpgSQLParser.HAVING);
					this.state = 6514;
					this.vex(0);
					}
					break;
				}
				this.state = 6531;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 838, this._ctx) ) {
				case 1:
					{
					this.state = 6517;
					this.match(PLpgSQLParser.WINDOW);
					this.state = 6518;
					this.identifier();
					this.state = 6519;
					this.match(PLpgSQLParser.AS);
					this.state = 6520;
					this.window_definition();
					this.state = 6528;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 837, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6521;
							this.match(PLpgSQLParser.COMMA);
							this.state = 6522;
							this.identifier();
							this.state = 6523;
							this.match(PLpgSQLParser.AS);
							this.state = 6524;
							this.window_definition();
							}
							}
						}
						this.state = 6530;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 837, this._ctx);
					}
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.TABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6533;
				this.match(PLpgSQLParser.TABLE);
				this.state = 6535;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ONLY) {
					{
					this.state = 6534;
					this.match(PLpgSQLParser.ONLY);
					}
				}

				this.state = 6537;
				this.schema_qualified_name();
				this.state = 6539;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 840, this._ctx) ) {
				case 1:
					{
					this.state = 6538;
					this.match(PLpgSQLParser.MULTIPLY);
					}
					break;
				}
				}
				break;
			case PLpgSQLParser.VALUES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6541;
				this.values_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list(): Select_listContext {
		let _localctx: Select_listContext = new Select_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, PLpgSQLParser.RULE_select_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6544;
			this.select_sublist();
			this.state = 6549;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 842, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6545;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6546;
					this.select_sublist();
					}
					}
				}
				this.state = 6551;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 842, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_sublist(): Select_sublistContext {
		let _localctx: Select_sublistContext = new Select_sublistContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, PLpgSQLParser.RULE_select_sublist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6552;
			this.vex(0);
			this.state = 6556;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 843, this._ctx) ) {
			case 1:
				{
				this.state = 6553;
				this.match(PLpgSQLParser.AS);
				this.state = 6554;
				this.col_label();
				}
				break;

			case 2:
				{
				this.state = 6555;
				this.id_token();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public into_table(): Into_tableContext {
		let _localctx: Into_tableContext = new Into_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, PLpgSQLParser.RULE_into_table);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6558;
			this.match(PLpgSQLParser.INTO);
			this.state = 6560;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 844, this._ctx) ) {
			case 1:
				{
				this.state = 6559;
				_la = this._input.LA(1);
				if (!(((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (PLpgSQLParser.TEMP - 253)) | (1 << (PLpgSQLParser.TEMPORARY - 253)) | (1 << (PLpgSQLParser.UNLOGGED - 253)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 6563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLE) {
				{
				this.state = 6562;
				this.match(PLpgSQLParser.TABLE);
				}
			}

			this.state = 6565;
			this.schema_qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public from_item(): From_itemContext;
	public from_item(_p: number): From_itemContext;
	// @RuleVersion(0)
	public from_item(_p?: number): From_itemContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: From_itemContext = new From_itemContext(this._ctx, _parentState);
		let _prevctx: From_itemContext = _localctx;
		let _startState: number = 644;
		this.enterRecursionRule(_localctx, 644, PLpgSQLParser.RULE_from_item, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 847, this._ctx) ) {
			case 1:
				{
				this.state = 6568;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6569;
				this.from_item(0);
				this.state = 6570;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 6572;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 846, this._ctx) ) {
				case 1:
					{
					this.state = 6571;
					this.alias_clause();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 6574;
				this.from_primary();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6620;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 855, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 6618;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 854, this._ctx) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_from_item);
						this.state = 6577;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 6578;
						this.match(PLpgSQLParser.CROSS);
						this.state = 6579;
						this.match(PLpgSQLParser.JOIN);
						this.state = 6580;
						this.from_item(6);
						}
						break;

					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_from_item);
						this.state = 6581;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 6582;
						this.match(PLpgSQLParser.NATURAL);
						this.state = 6588;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.INNER:
							{
							this.state = 6583;
							this.match(PLpgSQLParser.INNER);
							}
							break;
						case PLpgSQLParser.FULL:
						case PLpgSQLParser.LEFT:
						case PLpgSQLParser.RIGHT:
							{
							this.state = 6584;
							_la = this._input.LA(1);
							if (!(((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (PLpgSQLParser.FULL - 350)) | (1 << (PLpgSQLParser.LEFT - 350)) | (1 << (PLpgSQLParser.RIGHT - 350)))) !== 0))) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 6586;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === PLpgSQLParser.OUTER) {
								{
								this.state = 6585;
								this.match(PLpgSQLParser.OUTER);
								}
							}

							}
							break;
						case PLpgSQLParser.JOIN:
							break;
						default:
							break;
						}
						this.state = 6590;
						this.match(PLpgSQLParser.JOIN);
						this.state = 6591;
						this.from_item(3);
						}
						break;

					case 3:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_from_item);
						this.state = 6592;
						if (!(this.precpred(this._ctx, 4))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						}
						this.state = 6598;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.INNER:
							{
							this.state = 6593;
							this.match(PLpgSQLParser.INNER);
							}
							break;
						case PLpgSQLParser.FULL:
						case PLpgSQLParser.LEFT:
						case PLpgSQLParser.RIGHT:
							{
							this.state = 6594;
							_la = this._input.LA(1);
							if (!(((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (PLpgSQLParser.FULL - 350)) | (1 << (PLpgSQLParser.LEFT - 350)) | (1 << (PLpgSQLParser.RIGHT - 350)))) !== 0))) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 6596;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === PLpgSQLParser.OUTER) {
								{
								this.state = 6595;
								this.match(PLpgSQLParser.OUTER);
								}
							}

							}
							break;
						case PLpgSQLParser.JOIN:
							break;
						default:
							break;
						}
						this.state = 6600;
						this.match(PLpgSQLParser.JOIN);
						this.state = 6601;
						this.from_item(0);
						this.state = 6602;
						this.match(PLpgSQLParser.ON);
						this.state = 6603;
						this.vex(0);
						}
						break;

					case 4:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PLpgSQLParser.RULE_from_item);
						this.state = 6605;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 6611;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.INNER:
							{
							this.state = 6606;
							this.match(PLpgSQLParser.INNER);
							}
							break;
						case PLpgSQLParser.FULL:
						case PLpgSQLParser.LEFT:
						case PLpgSQLParser.RIGHT:
							{
							this.state = 6607;
							_la = this._input.LA(1);
							if (!(((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (PLpgSQLParser.FULL - 350)) | (1 << (PLpgSQLParser.LEFT - 350)) | (1 << (PLpgSQLParser.RIGHT - 350)))) !== 0))) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 6609;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === PLpgSQLParser.OUTER) {
								{
								this.state = 6608;
								this.match(PLpgSQLParser.OUTER);
								}
							}

							}
							break;
						case PLpgSQLParser.JOIN:
							break;
						default:
							break;
						}
						this.state = 6613;
						this.match(PLpgSQLParser.JOIN);
						this.state = 6614;
						this.from_item(0);
						this.state = 6615;
						this.match(PLpgSQLParser.USING);
						this.state = 6616;
						this.names_in_parens();
						}
						break;
					}
					}
				}
				this.state = 6622;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 855, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_primary(): From_primaryContext {
		let _localctx: From_primaryContext = new From_primaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, PLpgSQLParser.RULE_from_primary);
		let _la: number;
		try {
			this.state = 6733;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 878, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ONLY) {
					{
					this.state = 6623;
					this.match(PLpgSQLParser.ONLY);
					}
				}

				this.state = 6626;
				this.schema_qualified_name();
				this.state = 6628;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 857, this._ctx) ) {
				case 1:
					{
					this.state = 6627;
					this.match(PLpgSQLParser.MULTIPLY);
					}
					break;
				}
				this.state = 6631;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 858, this._ctx) ) {
				case 1:
					{
					this.state = 6630;
					this.alias_clause();
					}
					break;
				}
				this.state = 6649;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
				case 1:
					{
					this.state = 6633;
					this.match(PLpgSQLParser.TABLESAMPLE);
					this.state = 6634;
					_localctx._method = this.identifier();
					this.state = 6635;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 6636;
					this.vex(0);
					this.state = 6641;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 6637;
						this.match(PLpgSQLParser.COMMA);
						this.state = 6638;
						this.vex(0);
						}
						}
						this.state = 6643;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6644;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					this.state = 6647;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 860, this._ctx) ) {
					case 1:
						{
						this.state = 6645;
						this.match(PLpgSQLParser.REPEATABLE);
						this.state = 6646;
						this.vex(0);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6652;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LATERAL) {
					{
					this.state = 6651;
					this.match(PLpgSQLParser.LATERAL);
					}
				}

				this.state = 6654;
				this.table_subquery();
				this.state = 6655;
				this.alias_clause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LATERAL) {
					{
					this.state = 6657;
					this.match(PLpgSQLParser.LATERAL);
					}
				}

				this.state = 6660;
				this.function_call();
				this.state = 6663;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 864, this._ctx) ) {
				case 1:
					{
					this.state = 6661;
					this.match(PLpgSQLParser.WITH);
					this.state = 6662;
					this.match(PLpgSQLParser.ORDINALITY);
					}
					break;
				}
				this.state = 6685;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 868, this._ctx) ) {
				case 1:
					{
					this.state = 6665;
					this.match(PLpgSQLParser.AS);
					this.state = 6666;
					this.from_function_column_def();
					}
					break;

				case 2:
					{
					this.state = 6668;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.AS) {
						{
						this.state = 6667;
						this.match(PLpgSQLParser.AS);
						}
					}

					this.state = 6670;
					_localctx._alias = this.identifier();
					this.state = 6683;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 867, this._ctx) ) {
					case 1:
						{
						this.state = 6671;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 6672;
						_localctx._identifier = this.identifier();
						_localctx._column_alias.push(_localctx._identifier);
						this.state = 6677;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === PLpgSQLParser.COMMA) {
							{
							{
							this.state = 6673;
							this.match(PLpgSQLParser.COMMA);
							this.state = 6674;
							_localctx._identifier = this.identifier();
							_localctx._column_alias.push(_localctx._identifier);
							}
							}
							this.state = 6679;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 6680;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						}
						break;

					case 2:
						{
						this.state = 6682;
						this.from_function_column_def();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LATERAL) {
					{
					this.state = 6687;
					this.match(PLpgSQLParser.LATERAL);
					}
				}

				this.state = 6690;
				this.match(PLpgSQLParser.ROWS);
				this.state = 6691;
				this.match(PLpgSQLParser.FROM);
				this.state = 6692;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6693;
				this.function_call();
				this.state = 6696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AS) {
					{
					this.state = 6694;
					this.match(PLpgSQLParser.AS);
					this.state = 6695;
					this.from_function_column_def();
					}
				}

				this.state = 6706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6698;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6699;
					this.function_call();
					this.state = 6702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.AS) {
						{
						this.state = 6700;
						this.match(PLpgSQLParser.AS);
						this.state = 6701;
						this.from_function_column_def();
						}
					}

					}
					}
					this.state = 6708;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6709;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 6712;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 873, this._ctx) ) {
				case 1:
					{
					this.state = 6710;
					this.match(PLpgSQLParser.WITH);
					this.state = 6711;
					this.match(PLpgSQLParser.ORDINALITY);
					}
					break;
				}
				this.state = 6731;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 877, this._ctx) ) {
				case 1:
					{
					this.state = 6715;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.AS) {
						{
						this.state = 6714;
						this.match(PLpgSQLParser.AS);
						}
					}

					this.state = 6717;
					_localctx._alias = this.identifier();
					this.state = 6729;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 876, this._ctx) ) {
					case 1:
						{
						this.state = 6718;
						this.match(PLpgSQLParser.LEFT_PAREN);
						this.state = 6719;
						_localctx._identifier = this.identifier();
						_localctx._column_alias.push(_localctx._identifier);
						this.state = 6724;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === PLpgSQLParser.COMMA) {
							{
							{
							this.state = 6720;
							this.match(PLpgSQLParser.COMMA);
							this.state = 6721;
							_localctx._identifier = this.identifier();
							_localctx._column_alias.push(_localctx._identifier);
							}
							}
							this.state = 6726;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 6727;
						this.match(PLpgSQLParser.RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alias_clause(): Alias_clauseContext {
		let _localctx: Alias_clauseContext = new Alias_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, PLpgSQLParser.RULE_alias_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.AS) {
				{
				this.state = 6735;
				this.match(PLpgSQLParser.AS);
				}
			}

			this.state = 6738;
			_localctx._alias = this.identifier();
			this.state = 6750;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 881, this._ctx) ) {
			case 1:
				{
				this.state = 6739;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6740;
				_localctx._identifier = this.identifier();
				_localctx._column_alias.push(_localctx._identifier);
				this.state = 6745;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6741;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6742;
					_localctx._identifier = this.identifier();
					_localctx._column_alias.push(_localctx._identifier);
					}
					}
					this.state = 6747;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6748;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_function_column_def(): From_function_column_defContext {
		let _localctx: From_function_column_defContext = new From_function_column_defContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, PLpgSQLParser.RULE_from_function_column_def);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6752;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6753;
			_localctx._identifier = this.identifier();
			_localctx._column_alias.push(_localctx._identifier);
			this.state = 6754;
			this.data_type();
			this.state = 6761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 6755;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6756;
				_localctx._identifier = this.identifier();
				_localctx._column_alias.push(_localctx._identifier);
				this.state = 6757;
				this.data_type();
				}
				}
				this.state = 6763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6764;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupby_clause(): Groupby_clauseContext {
		let _localctx: Groupby_clauseContext = new Groupby_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, PLpgSQLParser.RULE_groupby_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6766;
			this.match(PLpgSQLParser.GROUP);
			this.state = 6767;
			this.match(PLpgSQLParser.BY);
			this.state = 6768;
			this.grouping_element_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grouping_element_list(): Grouping_element_listContext {
		let _localctx: Grouping_element_listContext = new Grouping_element_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, PLpgSQLParser.RULE_grouping_element_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6770;
			this.grouping_element();
			this.state = 6775;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6771;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6772;
					this.grouping_element();
					}
					}
				}
				this.state = 6777;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grouping_element(): Grouping_elementContext {
		let _localctx: Grouping_elementContext = new Grouping_elementContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, PLpgSQLParser.RULE_grouping_element);
		try {
			this.state = 6791;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 885, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6778;
				this.vex(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6779;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6780;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6785;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ROLLUP:
					{
					this.state = 6781;
					this.match(PLpgSQLParser.ROLLUP);
					}
					break;
				case PLpgSQLParser.CUBE:
					{
					this.state = 6782;
					this.match(PLpgSQLParser.CUBE);
					}
					break;
				case PLpgSQLParser.GROUPING:
					{
					this.state = 6783;
					this.match(PLpgSQLParser.GROUPING);
					this.state = 6784;
					this.match(PLpgSQLParser.SETS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6787;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 6788;
				this.grouping_element_list();
				this.state = 6789;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public values_stmt(): Values_stmtContext {
		let _localctx: Values_stmtContext = new Values_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, PLpgSQLParser.RULE_values_stmt);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6793;
			this.match(PLpgSQLParser.VALUES);
			this.state = 6794;
			this.values_values();
			this.state = 6799;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 886, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6795;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6796;
					this.values_values();
					}
					}
				}
				this.state = 6801;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 886, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public values_values(): Values_valuesContext {
		let _localctx: Values_valuesContext = new Values_valuesContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, PLpgSQLParser.RULE_values_values);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6802;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6805;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.AUTHORIZATION:
			case PLpgSQLParser.BINARY:
			case PLpgSQLParser.COLLATION:
			case PLpgSQLParser.CONCURRENTLY:
			case PLpgSQLParser.CROSS:
			case PLpgSQLParser.CURRENT_SCHEMA:
			case PLpgSQLParser.FREEZE:
			case PLpgSQLParser.FULL:
			case PLpgSQLParser.ILIKE:
			case PLpgSQLParser.INNER:
			case PLpgSQLParser.IS:
			case PLpgSQLParser.ISNULL:
			case PLpgSQLParser.JOIN:
			case PLpgSQLParser.LEFT:
			case PLpgSQLParser.LIKE:
			case PLpgSQLParser.NATURAL:
			case PLpgSQLParser.NOTNULL:
			case PLpgSQLParser.OUTER:
			case PLpgSQLParser.OVERLAPS:
			case PLpgSQLParser.RIGHT:
			case PLpgSQLParser.SIMILAR:
			case PLpgSQLParser.TABLESAMPLE:
			case PLpgSQLParser.VERBOSE:
			case PLpgSQLParser.ALL:
			case PLpgSQLParser.ANY:
			case PLpgSQLParser.ARRAY:
			case PLpgSQLParser.CASE:
			case PLpgSQLParser.CAST:
			case PLpgSQLParser.CURRENT_CATALOG:
			case PLpgSQLParser.CURRENT_DATE:
			case PLpgSQLParser.CURRENT_TIME:
			case PLpgSQLParser.CURRENT_TIMESTAMP:
			case PLpgSQLParser.CURRENT_USER:
			case PLpgSQLParser.FALSE:
			case PLpgSQLParser.LOCALTIME:
			case PLpgSQLParser.LOCALTIMESTAMP:
			case PLpgSQLParser.NOT:
			case PLpgSQLParser.NULL:
			case PLpgSQLParser.ON:
			case PLpgSQLParser.SESSION_USER:
			case PLpgSQLParser.SOME:
			case PLpgSQLParser.TRUE:
			case PLpgSQLParser.USER:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.LEFT_PAREN:
			case PLpgSQLParser.PLUS:
			case PLpgSQLParser.MINUS:
			case PLpgSQLParser.MULTIPLY:
			case PLpgSQLParser.LESS_LESS:
			case PLpgSQLParser.GREATER_GREATER:
			case PLpgSQLParser.HASH_SIGN:
			case PLpgSQLParser.OP_CHARS:
			case PLpgSQLParser.NUMBER_LITERAL:
			case PLpgSQLParser.REAL_NUMBER:
			case PLpgSQLParser.DOLLAR_NUMBER:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
			case PLpgSQLParser.Character_String_Literal:
			case PLpgSQLParser.BeginDollarStringConstant:
				{
				this.state = 6803;
				this.vex(0);
				}
				break;
			case PLpgSQLParser.DEFAULT:
				{
				this.state = 6804;
				this.match(PLpgSQLParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 6807;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6810;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.AUTHORIZATION:
				case PLpgSQLParser.BINARY:
				case PLpgSQLParser.COLLATION:
				case PLpgSQLParser.CONCURRENTLY:
				case PLpgSQLParser.CROSS:
				case PLpgSQLParser.CURRENT_SCHEMA:
				case PLpgSQLParser.FREEZE:
				case PLpgSQLParser.FULL:
				case PLpgSQLParser.ILIKE:
				case PLpgSQLParser.INNER:
				case PLpgSQLParser.IS:
				case PLpgSQLParser.ISNULL:
				case PLpgSQLParser.JOIN:
				case PLpgSQLParser.LEFT:
				case PLpgSQLParser.LIKE:
				case PLpgSQLParser.NATURAL:
				case PLpgSQLParser.NOTNULL:
				case PLpgSQLParser.OUTER:
				case PLpgSQLParser.OVERLAPS:
				case PLpgSQLParser.RIGHT:
				case PLpgSQLParser.SIMILAR:
				case PLpgSQLParser.TABLESAMPLE:
				case PLpgSQLParser.VERBOSE:
				case PLpgSQLParser.ALL:
				case PLpgSQLParser.ANY:
				case PLpgSQLParser.ARRAY:
				case PLpgSQLParser.CASE:
				case PLpgSQLParser.CAST:
				case PLpgSQLParser.CURRENT_CATALOG:
				case PLpgSQLParser.CURRENT_DATE:
				case PLpgSQLParser.CURRENT_TIME:
				case PLpgSQLParser.CURRENT_TIMESTAMP:
				case PLpgSQLParser.CURRENT_USER:
				case PLpgSQLParser.FALSE:
				case PLpgSQLParser.LOCALTIME:
				case PLpgSQLParser.LOCALTIMESTAMP:
				case PLpgSQLParser.NOT:
				case PLpgSQLParser.NULL:
				case PLpgSQLParser.ON:
				case PLpgSQLParser.SESSION_USER:
				case PLpgSQLParser.SOME:
				case PLpgSQLParser.TRUE:
				case PLpgSQLParser.USER:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.LEFT_PAREN:
				case PLpgSQLParser.PLUS:
				case PLpgSQLParser.MINUS:
				case PLpgSQLParser.MULTIPLY:
				case PLpgSQLParser.LESS_LESS:
				case PLpgSQLParser.GREATER_GREATER:
				case PLpgSQLParser.HASH_SIGN:
				case PLpgSQLParser.OP_CHARS:
				case PLpgSQLParser.NUMBER_LITERAL:
				case PLpgSQLParser.REAL_NUMBER:
				case PLpgSQLParser.DOLLAR_NUMBER:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 6808;
					this.vex(0);
					}
					break;
				case PLpgSQLParser.DEFAULT:
					{
					this.state = 6809;
					this.match(PLpgSQLParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				this.state = 6816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6817;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderby_clause(): Orderby_clauseContext {
		let _localctx: Orderby_clauseContext = new Orderby_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, PLpgSQLParser.RULE_orderby_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6819;
			this.match(PLpgSQLParser.ORDER);
			this.state = 6820;
			this.match(PLpgSQLParser.BY);
			this.state = 6821;
			this.sort_specifier_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_specifier_list(): Sort_specifier_listContext {
		let _localctx: Sort_specifier_listContext = new Sort_specifier_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, PLpgSQLParser.RULE_sort_specifier_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6823;
			this.sort_specifier();
			this.state = 6828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 6824;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6825;
				this.sort_specifier();
				}
				}
				this.state = 6830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_specifier(): Sort_specifierContext {
		let _localctx: Sort_specifierContext = new Sort_specifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, PLpgSQLParser.RULE_sort_specifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6831;
			_localctx._key = this.vex(0);
			this.state = 6833;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 891, this._ctx) ) {
			case 1:
				{
				this.state = 6832;
				_localctx._opclass = this.schema_qualified_name();
				}
				break;
			}
			this.state = 6836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ASC || _la === PLpgSQLParser.DESC || _la === PLpgSQLParser.USING) {
				{
				this.state = 6835;
				_localctx._order = this.order_specification();
				}
			}

			this.state = 6839;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.NULLS) {
				{
				this.state = 6838;
				_localctx._null_order = this.null_ordering();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public order_specification(): Order_specificationContext {
		let _localctx: Order_specificationContext = new Order_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, PLpgSQLParser.RULE_order_specification);
		try {
			this.state = 6845;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ASC:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6841;
				this.match(PLpgSQLParser.ASC);
				}
				break;
			case PLpgSQLParser.DESC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6842;
				this.match(PLpgSQLParser.DESC);
				}
				break;
			case PLpgSQLParser.USING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6843;
				this.match(PLpgSQLParser.USING);
				this.state = 6844;
				this.all_op_ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public null_ordering(): Null_orderingContext {
		let _localctx: Null_orderingContext = new Null_orderingContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, PLpgSQLParser.RULE_null_ordering);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6847;
			this.match(PLpgSQLParser.NULLS);
			this.state = 6848;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.FIRST || _la === PLpgSQLParser.LAST)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_stmt_for_psql(): Insert_stmt_for_psqlContext {
		let _localctx: Insert_stmt_for_psqlContext = new Insert_stmt_for_psqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, PLpgSQLParser.RULE_insert_stmt_for_psql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 6850;
				this.with_clause();
				}
			}

			this.state = 6853;
			this.match(PLpgSQLParser.INSERT);
			this.state = 6854;
			this.match(PLpgSQLParser.INTO);
			this.state = 6855;
			_localctx._insert_table_name = this.schema_qualified_name();
			this.state = 6858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.AS) {
				{
				this.state = 6856;
				this.match(PLpgSQLParser.AS);
				this.state = 6857;
				_localctx._alias = this.identifier();
				}
			}

			this.state = 6863;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.OVERRIDING) {
				{
				this.state = 6860;
				this.match(PLpgSQLParser.OVERRIDING);
				this.state = 6861;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.SYSTEM || _la === PLpgSQLParser.USER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6862;
				this.match(PLpgSQLParser.VALUE);
				}
			}

			this.state = 6866;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 898, this._ctx) ) {
			case 1:
				{
				this.state = 6865;
				this.insert_columns();
				}
				break;
			}
			this.state = 6871;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.TABLE:
			case PLpgSQLParser.WITH:
			case PLpgSQLParser.LEFT_PAREN:
				{
				this.state = 6868;
				this.select_stmt();
				}
				break;
			case PLpgSQLParser.DEFAULT:
				{
				this.state = 6869;
				this.match(PLpgSQLParser.DEFAULT);
				this.state = 6870;
				this.match(PLpgSQLParser.VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6879;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ON) {
				{
				this.state = 6873;
				this.match(PLpgSQLParser.ON);
				this.state = 6874;
				this.match(PLpgSQLParser.CONFLICT);
				this.state = 6876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ON || _la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 6875;
					this.conflict_object();
					}
				}

				this.state = 6878;
				this.conflict_action();
				}
			}

			this.state = 6883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.RETURNING) {
				{
				this.state = 6881;
				this.match(PLpgSQLParser.RETURNING);
				this.state = 6882;
				this.select_list();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_columns(): Insert_columnsContext {
		let _localctx: Insert_columnsContext = new Insert_columnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, PLpgSQLParser.RULE_insert_columns);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6885;
			this.match(PLpgSQLParser.LEFT_PAREN);
			this.state = 6886;
			this.indirection_identifier();
			this.state = 6891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 6887;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6888;
				this.indirection_identifier();
				}
				}
				this.state = 6893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6894;
			this.match(PLpgSQLParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indirection_identifier(): Indirection_identifierContext {
		let _localctx: Indirection_identifierContext = new Indirection_identifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, PLpgSQLParser.RULE_indirection_identifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6896;
			this.identifier();
			this.state = 6898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DOT || _la === PLpgSQLParser.LEFT_BRACKET) {
				{
				this.state = 6897;
				this.indirection_list();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conflict_object(): Conflict_objectContext {
		let _localctx: Conflict_objectContext = new Conflict_objectContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, PLpgSQLParser.RULE_conflict_object);
		let _la: number;
		try {
			this.state = 6907;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6900;
				this.index_sort();
				this.state = 6902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WHERE) {
					{
					this.state = 6901;
					this.index_where();
					}
				}

				}
				break;
			case PLpgSQLParser.ON:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6904;
				this.match(PLpgSQLParser.ON);
				this.state = 6905;
				this.match(PLpgSQLParser.CONSTRAINT);
				this.state = 6906;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conflict_action(): Conflict_actionContext {
		let _localctx: Conflict_actionContext = new Conflict_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, PLpgSQLParser.RULE_conflict_action);
		let _la: number;
		try {
			this.state = 6926;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 909, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6909;
				this.match(PLpgSQLParser.DO);
				this.state = 6910;
				this.match(PLpgSQLParser.NOTHING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6911;
				this.match(PLpgSQLParser.DO);
				this.state = 6912;
				this.match(PLpgSQLParser.UPDATE);
				this.state = 6913;
				this.match(PLpgSQLParser.SET);
				this.state = 6914;
				this.update_set();
				this.state = 6919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6915;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6916;
					this.update_set();
					}
					}
					this.state = 6921;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6924;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WHERE) {
					{
					this.state = 6922;
					this.match(PLpgSQLParser.WHERE);
					this.state = 6923;
					this.vex(0);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_stmt_for_psql(): Delete_stmt_for_psqlContext {
		let _localctx: Delete_stmt_for_psqlContext = new Delete_stmt_for_psqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, PLpgSQLParser.RULE_delete_stmt_for_psql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6929;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 6928;
				this.with_clause();
				}
			}

			this.state = 6931;
			this.match(PLpgSQLParser.DELETE);
			this.state = 6932;
			this.match(PLpgSQLParser.FROM);
			this.state = 6934;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ONLY) {
				{
				this.state = 6933;
				this.match(PLpgSQLParser.ONLY);
				}
			}

			this.state = 6936;
			_localctx._delete_table_name = this.schema_qualified_name();
			this.state = 6938;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MULTIPLY) {
				{
				this.state = 6937;
				this.match(PLpgSQLParser.MULTIPLY);
				}
			}

			this.state = 6944;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 914, this._ctx) ) {
			case 1:
				{
				this.state = 6941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AS) {
					{
					this.state = 6940;
					this.match(PLpgSQLParser.AS);
					}
				}

				this.state = 6943;
				_localctx._alias = this.identifier();
				}
				break;
			}
			this.state = 6955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 6946;
				this.match(PLpgSQLParser.USING);
				this.state = 6947;
				this.from_item(0);
				this.state = 6952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6948;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6949;
					this.from_item(0);
					}
					}
					this.state = 6954;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6964;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHERE) {
				{
				this.state = 6957;
				this.match(PLpgSQLParser.WHERE);
				this.state = 6962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 917, this._ctx) ) {
				case 1:
					{
					this.state = 6958;
					this.vex(0);
					}
					break;

				case 2:
					{
					this.state = 6959;
					this.match(PLpgSQLParser.CURRENT);
					this.state = 6960;
					this.match(PLpgSQLParser.OF);
					this.state = 6961;
					_localctx._cursor = this.identifier();
					}
					break;
				}
				}
			}

			this.state = 6968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.RETURNING) {
				{
				this.state = 6966;
				this.match(PLpgSQLParser.RETURNING);
				this.state = 6967;
				this.select_list();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_stmt_for_psql(): Update_stmt_for_psqlContext {
		let _localctx: Update_stmt_for_psqlContext = new Update_stmt_for_psqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, PLpgSQLParser.RULE_update_stmt_for_psql);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6971;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WITH) {
				{
				this.state = 6970;
				this.with_clause();
				}
			}

			this.state = 6973;
			this.match(PLpgSQLParser.UPDATE);
			this.state = 6975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ONLY) {
				{
				this.state = 6974;
				this.match(PLpgSQLParser.ONLY);
				}
			}

			this.state = 6977;
			_localctx._update_table_name = this.schema_qualified_name();
			this.state = 6979;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.MULTIPLY) {
				{
				this.state = 6978;
				this.match(PLpgSQLParser.MULTIPLY);
				}
			}

			this.state = 6985;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 924, this._ctx) ) {
			case 1:
				{
				this.state = 6982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AS) {
					{
					this.state = 6981;
					this.match(PLpgSQLParser.AS);
					}
				}

				this.state = 6984;
				_localctx._alias = this.identifier();
				}
				break;
			}
			this.state = 6987;
			this.match(PLpgSQLParser.SET);
			this.state = 6988;
			this.update_set();
			this.state = 6993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 6989;
				this.match(PLpgSQLParser.COMMA);
				this.state = 6990;
				this.update_set();
				}
				}
				this.state = 6995;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FROM) {
				{
				this.state = 6996;
				this.match(PLpgSQLParser.FROM);
				this.state = 6997;
				this.from_item(0);
				this.state = 7002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 6998;
					this.match(PLpgSQLParser.COMMA);
					this.state = 6999;
					this.from_item(0);
					}
					}
					this.state = 7004;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 7014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHERE) {
				{
				this.state = 7007;
				this.match(PLpgSQLParser.WHERE);
				this.state = 7012;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 928, this._ctx) ) {
				case 1:
					{
					this.state = 7008;
					this.vex(0);
					}
					break;

				case 2:
					{
					this.state = 7009;
					this.match(PLpgSQLParser.CURRENT);
					this.state = 7010;
					this.match(PLpgSQLParser.OF);
					this.state = 7011;
					_localctx._cursor = this.identifier();
					}
					break;
				}
				}
			}

			this.state = 7018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.RETURNING) {
				{
				this.state = 7016;
				this.match(PLpgSQLParser.RETURNING);
				this.state = 7017;
				this.select_list();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_set(): Update_setContext {
		let _localctx: Update_setContext = new Update_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, PLpgSQLParser.RULE_update_set);
		let _la: number;
		try {
			this.state = 7059;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7020;
				_localctx._indirection_identifier = this.indirection_identifier();
				_localctx._column.push(_localctx._indirection_identifier);
				this.state = 7021;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 7024;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.AUTHORIZATION:
				case PLpgSQLParser.BINARY:
				case PLpgSQLParser.COLLATION:
				case PLpgSQLParser.CONCURRENTLY:
				case PLpgSQLParser.CROSS:
				case PLpgSQLParser.CURRENT_SCHEMA:
				case PLpgSQLParser.FREEZE:
				case PLpgSQLParser.FULL:
				case PLpgSQLParser.ILIKE:
				case PLpgSQLParser.INNER:
				case PLpgSQLParser.IS:
				case PLpgSQLParser.ISNULL:
				case PLpgSQLParser.JOIN:
				case PLpgSQLParser.LEFT:
				case PLpgSQLParser.LIKE:
				case PLpgSQLParser.NATURAL:
				case PLpgSQLParser.NOTNULL:
				case PLpgSQLParser.OUTER:
				case PLpgSQLParser.OVERLAPS:
				case PLpgSQLParser.RIGHT:
				case PLpgSQLParser.SIMILAR:
				case PLpgSQLParser.TABLESAMPLE:
				case PLpgSQLParser.VERBOSE:
				case PLpgSQLParser.ALL:
				case PLpgSQLParser.ANY:
				case PLpgSQLParser.ARRAY:
				case PLpgSQLParser.CASE:
				case PLpgSQLParser.CAST:
				case PLpgSQLParser.CURRENT_CATALOG:
				case PLpgSQLParser.CURRENT_DATE:
				case PLpgSQLParser.CURRENT_TIME:
				case PLpgSQLParser.CURRENT_TIMESTAMP:
				case PLpgSQLParser.CURRENT_USER:
				case PLpgSQLParser.FALSE:
				case PLpgSQLParser.LOCALTIME:
				case PLpgSQLParser.LOCALTIMESTAMP:
				case PLpgSQLParser.NOT:
				case PLpgSQLParser.NULL:
				case PLpgSQLParser.ON:
				case PLpgSQLParser.SESSION_USER:
				case PLpgSQLParser.SOME:
				case PLpgSQLParser.TRUE:
				case PLpgSQLParser.USER:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.LEFT_PAREN:
				case PLpgSQLParser.PLUS:
				case PLpgSQLParser.MINUS:
				case PLpgSQLParser.MULTIPLY:
				case PLpgSQLParser.LESS_LESS:
				case PLpgSQLParser.GREATER_GREATER:
				case PLpgSQLParser.HASH_SIGN:
				case PLpgSQLParser.OP_CHARS:
				case PLpgSQLParser.NUMBER_LITERAL:
				case PLpgSQLParser.REAL_NUMBER:
				case PLpgSQLParser.DOLLAR_NUMBER:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 7022;
					_localctx._vex = this.vex(0);
					_localctx._value.push(_localctx._vex);
					}
					break;
				case PLpgSQLParser.DEFAULT:
					{
					this.state = 7023;
					this.match(PLpgSQLParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7026;
				this.match(PLpgSQLParser.LEFT_PAREN);
				this.state = 7027;
				_localctx._indirection_identifier = this.indirection_identifier();
				_localctx._column.push(_localctx._indirection_identifier);
				this.state = 7032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 7028;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7029;
					_localctx._indirection_identifier = this.indirection_identifier();
					_localctx._column.push(_localctx._indirection_identifier);
					}
					}
					this.state = 7034;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7035;
				this.match(PLpgSQLParser.RIGHT_PAREN);
				this.state = 7036;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 7038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ROW) {
					{
					this.state = 7037;
					this.match(PLpgSQLParser.ROW);
					}
				}

				this.state = 7057;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 937, this._ctx) ) {
				case 1:
					{
					this.state = 7040;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 7043;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.ABORT:
					case PLpgSQLParser.ABSOLUTE:
					case PLpgSQLParser.ACCESS:
					case PLpgSQLParser.ACTION:
					case PLpgSQLParser.ADD:
					case PLpgSQLParser.ADMIN:
					case PLpgSQLParser.AFTER:
					case PLpgSQLParser.AGGREGATE:
					case PLpgSQLParser.ALSO:
					case PLpgSQLParser.ALTER:
					case PLpgSQLParser.ALWAYS:
					case PLpgSQLParser.ASSERTION:
					case PLpgSQLParser.ASSIGNMENT:
					case PLpgSQLParser.AT:
					case PLpgSQLParser.ATTACH:
					case PLpgSQLParser.ATTRIBUTE:
					case PLpgSQLParser.BACKWARD:
					case PLpgSQLParser.BEFORE:
					case PLpgSQLParser.BEGIN:
					case PLpgSQLParser.BY:
					case PLpgSQLParser.CACHE:
					case PLpgSQLParser.CALL:
					case PLpgSQLParser.CALLED:
					case PLpgSQLParser.CASCADE:
					case PLpgSQLParser.CASCADED:
					case PLpgSQLParser.CATALOG:
					case PLpgSQLParser.CHAIN:
					case PLpgSQLParser.CHARACTERISTICS:
					case PLpgSQLParser.CHECKPOINT:
					case PLpgSQLParser.CLASS:
					case PLpgSQLParser.CLOSE:
					case PLpgSQLParser.CLUSTER:
					case PLpgSQLParser.COLUMNS:
					case PLpgSQLParser.COMMENT:
					case PLpgSQLParser.COMMENTS:
					case PLpgSQLParser.COMMIT:
					case PLpgSQLParser.COMMITTED:
					case PLpgSQLParser.CONFIGURATION:
					case PLpgSQLParser.CONFLICT:
					case PLpgSQLParser.CONNECTION:
					case PLpgSQLParser.CONSTRAINTS:
					case PLpgSQLParser.CONTENT:
					case PLpgSQLParser.CONTINUE:
					case PLpgSQLParser.CONVERSION:
					case PLpgSQLParser.COPY:
					case PLpgSQLParser.COST:
					case PLpgSQLParser.CSV:
					case PLpgSQLParser.CUBE:
					case PLpgSQLParser.CURRENT:
					case PLpgSQLParser.CURSOR:
					case PLpgSQLParser.CYCLE:
					case PLpgSQLParser.DATA:
					case PLpgSQLParser.DATABASE:
					case PLpgSQLParser.DAY:
					case PLpgSQLParser.DEALLOCATE:
					case PLpgSQLParser.DECLARE:
					case PLpgSQLParser.DEFAULTS:
					case PLpgSQLParser.DEFERRED:
					case PLpgSQLParser.DEFINER:
					case PLpgSQLParser.DELETE:
					case PLpgSQLParser.DELIMITER:
					case PLpgSQLParser.DELIMITERS:
					case PLpgSQLParser.DEPENDS:
					case PLpgSQLParser.DETACH:
					case PLpgSQLParser.DICTIONARY:
					case PLpgSQLParser.DISABLE:
					case PLpgSQLParser.DISCARD:
					case PLpgSQLParser.DOCUMENT:
					case PLpgSQLParser.DOMAIN:
					case PLpgSQLParser.DOUBLE:
					case PLpgSQLParser.DROP:
					case PLpgSQLParser.EACH:
					case PLpgSQLParser.ENABLE:
					case PLpgSQLParser.ENCODING:
					case PLpgSQLParser.ENCRYPTED:
					case PLpgSQLParser.ENUM:
					case PLpgSQLParser.ESCAPE:
					case PLpgSQLParser.EVENT:
					case PLpgSQLParser.EXCLUDE:
					case PLpgSQLParser.EXCLUDING:
					case PLpgSQLParser.EXCLUSIVE:
					case PLpgSQLParser.EXECUTE:
					case PLpgSQLParser.EXPLAIN:
					case PLpgSQLParser.EXTENSION:
					case PLpgSQLParser.EXTERNAL:
					case PLpgSQLParser.FAMILY:
					case PLpgSQLParser.FILTER:
					case PLpgSQLParser.FIRST:
					case PLpgSQLParser.FOLLOWING:
					case PLpgSQLParser.FORCE:
					case PLpgSQLParser.FORWARD:
					case PLpgSQLParser.FUNCTION:
					case PLpgSQLParser.FUNCTIONS:
					case PLpgSQLParser.GENERATED:
					case PLpgSQLParser.GLOBAL:
					case PLpgSQLParser.GRANTED:
					case PLpgSQLParser.GROUPS:
					case PLpgSQLParser.HANDLER:
					case PLpgSQLParser.HEADER:
					case PLpgSQLParser.HOLD:
					case PLpgSQLParser.HOUR:
					case PLpgSQLParser.IDENTITY:
					case PLpgSQLParser.IF:
					case PLpgSQLParser.IMMEDIATE:
					case PLpgSQLParser.IMMUTABLE:
					case PLpgSQLParser.IMPLICIT:
					case PLpgSQLParser.IMPORT:
					case PLpgSQLParser.INCLUDE:
					case PLpgSQLParser.INCLUDING:
					case PLpgSQLParser.INCREMENT:
					case PLpgSQLParser.INDEX:
					case PLpgSQLParser.INDEXES:
					case PLpgSQLParser.INHERIT:
					case PLpgSQLParser.INHERITS:
					case PLpgSQLParser.INLINE:
					case PLpgSQLParser.INPUT:
					case PLpgSQLParser.INSENSITIVE:
					case PLpgSQLParser.INSERT:
					case PLpgSQLParser.INSTEAD:
					case PLpgSQLParser.INVOKER:
					case PLpgSQLParser.ISOLATION:
					case PLpgSQLParser.KEY:
					case PLpgSQLParser.LABEL:
					case PLpgSQLParser.LANGUAGE:
					case PLpgSQLParser.LARGE:
					case PLpgSQLParser.LAST:
					case PLpgSQLParser.LEAKPROOF:
					case PLpgSQLParser.LEVEL:
					case PLpgSQLParser.LISTEN:
					case PLpgSQLParser.LOAD:
					case PLpgSQLParser.LOCAL:
					case PLpgSQLParser.LOCATION:
					case PLpgSQLParser.LOCK:
					case PLpgSQLParser.LOCKED:
					case PLpgSQLParser.LOGGED:
					case PLpgSQLParser.MAPPING:
					case PLpgSQLParser.MATCH:
					case PLpgSQLParser.MATERIALIZED:
					case PLpgSQLParser.MAXVALUE:
					case PLpgSQLParser.METHOD:
					case PLpgSQLParser.MINUTE:
					case PLpgSQLParser.MINVALUE:
					case PLpgSQLParser.MODE:
					case PLpgSQLParser.MONTH:
					case PLpgSQLParser.MOVE:
					case PLpgSQLParser.NAME:
					case PLpgSQLParser.NAMES:
					case PLpgSQLParser.NEW:
					case PLpgSQLParser.NEXT:
					case PLpgSQLParser.NO:
					case PLpgSQLParser.NOTHING:
					case PLpgSQLParser.NOTIFY:
					case PLpgSQLParser.NOWAIT:
					case PLpgSQLParser.NULLS:
					case PLpgSQLParser.OBJECT:
					case PLpgSQLParser.OF:
					case PLpgSQLParser.OFF:
					case PLpgSQLParser.OIDS:
					case PLpgSQLParser.OLD:
					case PLpgSQLParser.OPERATOR:
					case PLpgSQLParser.OPTION:
					case PLpgSQLParser.OPTIONS:
					case PLpgSQLParser.ORDINALITY:
					case PLpgSQLParser.OTHERS:
					case PLpgSQLParser.OVER:
					case PLpgSQLParser.OVERRIDING:
					case PLpgSQLParser.OWNED:
					case PLpgSQLParser.OWNER:
					case PLpgSQLParser.PARALLEL:
					case PLpgSQLParser.PARSER:
					case PLpgSQLParser.PARTIAL:
					case PLpgSQLParser.PARTITION:
					case PLpgSQLParser.PASSING:
					case PLpgSQLParser.PASSWORD:
					case PLpgSQLParser.PLANS:
					case PLpgSQLParser.POLICY:
					case PLpgSQLParser.PRECEDING:
					case PLpgSQLParser.PREPARE:
					case PLpgSQLParser.PREPARED:
					case PLpgSQLParser.PRESERVE:
					case PLpgSQLParser.PRIOR:
					case PLpgSQLParser.PRIVILEGES:
					case PLpgSQLParser.PROCEDURAL:
					case PLpgSQLParser.PROCEDURE:
					case PLpgSQLParser.PROCEDURES:
					case PLpgSQLParser.PROGRAM:
					case PLpgSQLParser.PUBLICATION:
					case PLpgSQLParser.QUOTE:
					case PLpgSQLParser.RANGE:
					case PLpgSQLParser.READ:
					case PLpgSQLParser.REASSIGN:
					case PLpgSQLParser.RECHECK:
					case PLpgSQLParser.RECURSIVE:
					case PLpgSQLParser.REF:
					case PLpgSQLParser.REFERENCING:
					case PLpgSQLParser.REFRESH:
					case PLpgSQLParser.REINDEX:
					case PLpgSQLParser.RELATIVE:
					case PLpgSQLParser.RELEASE:
					case PLpgSQLParser.RENAME:
					case PLpgSQLParser.REPEATABLE:
					case PLpgSQLParser.REPLACE:
					case PLpgSQLParser.REPLICA:
					case PLpgSQLParser.RESET:
					case PLpgSQLParser.RESTART:
					case PLpgSQLParser.RESTRICT:
					case PLpgSQLParser.RETURNS:
					case PLpgSQLParser.REVOKE:
					case PLpgSQLParser.ROLE:
					case PLpgSQLParser.ROLLBACK:
					case PLpgSQLParser.ROLLUP:
					case PLpgSQLParser.ROUTINE:
					case PLpgSQLParser.ROUTINES:
					case PLpgSQLParser.ROWS:
					case PLpgSQLParser.RULE:
					case PLpgSQLParser.SAVEPOINT:
					case PLpgSQLParser.SCHEMA:
					case PLpgSQLParser.SCHEMAS:
					case PLpgSQLParser.SCROLL:
					case PLpgSQLParser.SEARCH:
					case PLpgSQLParser.SECOND:
					case PLpgSQLParser.SECURITY:
					case PLpgSQLParser.SEQUENCE:
					case PLpgSQLParser.SEQUENCES:
					case PLpgSQLParser.SERIALIZABLE:
					case PLpgSQLParser.SERVER:
					case PLpgSQLParser.SESSION:
					case PLpgSQLParser.SET:
					case PLpgSQLParser.SETS:
					case PLpgSQLParser.SHARE:
					case PLpgSQLParser.SHOW:
					case PLpgSQLParser.SIMPLE:
					case PLpgSQLParser.SKIP_:
					case PLpgSQLParser.SNAPSHOT:
					case PLpgSQLParser.SQL:
					case PLpgSQLParser.STABLE:
					case PLpgSQLParser.STANDALONE:
					case PLpgSQLParser.START:
					case PLpgSQLParser.STATEMENT:
					case PLpgSQLParser.STATISTICS:
					case PLpgSQLParser.STDIN:
					case PLpgSQLParser.STDOUT:
					case PLpgSQLParser.STORAGE:
					case PLpgSQLParser.STORED:
					case PLpgSQLParser.STRICT:
					case PLpgSQLParser.STRIP:
					case PLpgSQLParser.SUBSCRIPTION:
					case PLpgSQLParser.SUPPORT:
					case PLpgSQLParser.SYSID:
					case PLpgSQLParser.SYSTEM:
					case PLpgSQLParser.TABLES:
					case PLpgSQLParser.TABLESPACE:
					case PLpgSQLParser.TEMP:
					case PLpgSQLParser.TEMPLATE:
					case PLpgSQLParser.TEMPORARY:
					case PLpgSQLParser.TEXT:
					case PLpgSQLParser.TIES:
					case PLpgSQLParser.TRANSACTION:
					case PLpgSQLParser.TRANSFORM:
					case PLpgSQLParser.TRIGGER:
					case PLpgSQLParser.TRUNCATE:
					case PLpgSQLParser.TRUSTED:
					case PLpgSQLParser.TYPE:
					case PLpgSQLParser.TYPES:
					case PLpgSQLParser.UNBOUNDED:
					case PLpgSQLParser.UNCOMMITTED:
					case PLpgSQLParser.UNENCRYPTED:
					case PLpgSQLParser.UNKNOWN:
					case PLpgSQLParser.UNLISTEN:
					case PLpgSQLParser.UNLOGGED:
					case PLpgSQLParser.UNTIL:
					case PLpgSQLParser.UPDATE:
					case PLpgSQLParser.VACUUM:
					case PLpgSQLParser.VALID:
					case PLpgSQLParser.VALIDATE:
					case PLpgSQLParser.VALIDATOR:
					case PLpgSQLParser.VALUE:
					case PLpgSQLParser.VARYING:
					case PLpgSQLParser.VERSION:
					case PLpgSQLParser.VIEW:
					case PLpgSQLParser.VIEWS:
					case PLpgSQLParser.VOLATILE:
					case PLpgSQLParser.WHITESPACE:
					case PLpgSQLParser.WITHIN:
					case PLpgSQLParser.WITHOUT:
					case PLpgSQLParser.WORK:
					case PLpgSQLParser.WRAPPER:
					case PLpgSQLParser.WRITE:
					case PLpgSQLParser.XML:
					case PLpgSQLParser.YEAR:
					case PLpgSQLParser.YES:
					case PLpgSQLParser.ZONE:
					case PLpgSQLParser.BETWEEN:
					case PLpgSQLParser.BIGINT:
					case PLpgSQLParser.BIT:
					case PLpgSQLParser.BOOLEAN:
					case PLpgSQLParser.CHAR:
					case PLpgSQLParser.CHARACTER:
					case PLpgSQLParser.COALESCE:
					case PLpgSQLParser.DEC:
					case PLpgSQLParser.DECIMAL:
					case PLpgSQLParser.EXISTS:
					case PLpgSQLParser.EXTRACT:
					case PLpgSQLParser.FLOAT:
					case PLpgSQLParser.GREATEST:
					case PLpgSQLParser.GROUPING:
					case PLpgSQLParser.INOUT:
					case PLpgSQLParser.INT:
					case PLpgSQLParser.INTEGER:
					case PLpgSQLParser.INTERVAL:
					case PLpgSQLParser.LEAST:
					case PLpgSQLParser.NATIONAL:
					case PLpgSQLParser.NCHAR:
					case PLpgSQLParser.NONE:
					case PLpgSQLParser.NULLIF:
					case PLpgSQLParser.NUMERIC:
					case PLpgSQLParser.OUT:
					case PLpgSQLParser.OVERLAY:
					case PLpgSQLParser.POSITION:
					case PLpgSQLParser.PRECISION:
					case PLpgSQLParser.REAL:
					case PLpgSQLParser.ROW:
					case PLpgSQLParser.SETOF:
					case PLpgSQLParser.SMALLINT:
					case PLpgSQLParser.SUBSTRING:
					case PLpgSQLParser.TIME:
					case PLpgSQLParser.TIMESTAMP:
					case PLpgSQLParser.TREAT:
					case PLpgSQLParser.TRIM:
					case PLpgSQLParser.VALUES:
					case PLpgSQLParser.VARCHAR:
					case PLpgSQLParser.XMLATTRIBUTES:
					case PLpgSQLParser.XMLCONCAT:
					case PLpgSQLParser.XMLELEMENT:
					case PLpgSQLParser.XMLEXISTS:
					case PLpgSQLParser.XMLFOREST:
					case PLpgSQLParser.XMLNAMESPACES:
					case PLpgSQLParser.XMLPARSE:
					case PLpgSQLParser.XMLPI:
					case PLpgSQLParser.XMLROOT:
					case PLpgSQLParser.XMLSERIALIZE:
					case PLpgSQLParser.XMLTABLE:
					case PLpgSQLParser.AUTHORIZATION:
					case PLpgSQLParser.BINARY:
					case PLpgSQLParser.COLLATION:
					case PLpgSQLParser.CONCURRENTLY:
					case PLpgSQLParser.CROSS:
					case PLpgSQLParser.CURRENT_SCHEMA:
					case PLpgSQLParser.FREEZE:
					case PLpgSQLParser.FULL:
					case PLpgSQLParser.ILIKE:
					case PLpgSQLParser.INNER:
					case PLpgSQLParser.IS:
					case PLpgSQLParser.ISNULL:
					case PLpgSQLParser.JOIN:
					case PLpgSQLParser.LEFT:
					case PLpgSQLParser.LIKE:
					case PLpgSQLParser.NATURAL:
					case PLpgSQLParser.NOTNULL:
					case PLpgSQLParser.OUTER:
					case PLpgSQLParser.OVERLAPS:
					case PLpgSQLParser.RIGHT:
					case PLpgSQLParser.SIMILAR:
					case PLpgSQLParser.TABLESAMPLE:
					case PLpgSQLParser.VERBOSE:
					case PLpgSQLParser.ALL:
					case PLpgSQLParser.ANY:
					case PLpgSQLParser.ARRAY:
					case PLpgSQLParser.CASE:
					case PLpgSQLParser.CAST:
					case PLpgSQLParser.CURRENT_CATALOG:
					case PLpgSQLParser.CURRENT_DATE:
					case PLpgSQLParser.CURRENT_TIME:
					case PLpgSQLParser.CURRENT_TIMESTAMP:
					case PLpgSQLParser.CURRENT_USER:
					case PLpgSQLParser.FALSE:
					case PLpgSQLParser.LOCALTIME:
					case PLpgSQLParser.LOCALTIMESTAMP:
					case PLpgSQLParser.NOT:
					case PLpgSQLParser.NULL:
					case PLpgSQLParser.ON:
					case PLpgSQLParser.SESSION_USER:
					case PLpgSQLParser.SOME:
					case PLpgSQLParser.TRUE:
					case PLpgSQLParser.USER:
					case PLpgSQLParser.ALIGNMENT:
					case PLpgSQLParser.BASETYPE:
					case PLpgSQLParser.BUFFERS:
					case PLpgSQLParser.BYPASSRLS:
					case PLpgSQLParser.CANONICAL:
					case PLpgSQLParser.CATEGORY:
					case PLpgSQLParser.COLLATABLE:
					case PLpgSQLParser.COMBINEFUNC:
					case PLpgSQLParser.COMMUTATOR:
					case PLpgSQLParser.CONNECT:
					case PLpgSQLParser.COSTS:
					case PLpgSQLParser.CREATEDB:
					case PLpgSQLParser.CREATEROLE:
					case PLpgSQLParser.DESERIALFUNC:
					case PLpgSQLParser.DETERMINISTIC:
					case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
					case PLpgSQLParser.ELEMENT:
					case PLpgSQLParser.EXTENDED:
					case PLpgSQLParser.FINALFUNC:
					case PLpgSQLParser.FINALFUNC_EXTRA:
					case PLpgSQLParser.FINALFUNC_MODIFY:
					case PLpgSQLParser.FORCE_NOT_NULL:
					case PLpgSQLParser.FORCE_NULL:
					case PLpgSQLParser.FORCE_QUOTE:
					case PLpgSQLParser.FORMAT:
					case PLpgSQLParser.GETTOKEN:
					case PLpgSQLParser.HASH:
					case PLpgSQLParser.HASHES:
					case PLpgSQLParser.HEADLINE:
					case PLpgSQLParser.HYPOTHETICAL:
					case PLpgSQLParser.INDEX_CLEANUP:
					case PLpgSQLParser.INIT:
					case PLpgSQLParser.INITCOND:
					case PLpgSQLParser.INTERNALLENGTH:
					case PLpgSQLParser.JSON:
					case PLpgSQLParser.LC_COLLATE:
					case PLpgSQLParser.LC_CTYPE:
					case PLpgSQLParser.LEFTARG:
					case PLpgSQLParser.LEXIZE:
					case PLpgSQLParser.LEXTYPES:
					case PLpgSQLParser.LIST:
					case PLpgSQLParser.LOCALE:
					case PLpgSQLParser.LOGIN:
					case PLpgSQLParser.MAIN:
					case PLpgSQLParser.MERGES:
					case PLpgSQLParser.MFINALFUNC:
					case PLpgSQLParser.MFINALFUNC_EXTRA:
					case PLpgSQLParser.MFINALFUNC_MODIFY:
					case PLpgSQLParser.MINITCOND:
					case PLpgSQLParser.MINVFUNC:
					case PLpgSQLParser.MODULUS:
					case PLpgSQLParser.MSFUNC:
					case PLpgSQLParser.MSSPACE:
					case PLpgSQLParser.MSTYPE:
					case PLpgSQLParser.NEGATOR:
					case PLpgSQLParser.NOBYPASSRLS:
					case PLpgSQLParser.NOCREATEDB:
					case PLpgSQLParser.NOCREATEROLE:
					case PLpgSQLParser.NOINHERIT:
					case PLpgSQLParser.NOLOGIN:
					case PLpgSQLParser.NOREPLICATION:
					case PLpgSQLParser.NOSUPERUSER:
					case PLpgSQLParser.OUTPUT:
					case PLpgSQLParser.PASSEDBYVALUE:
					case PLpgSQLParser.PATH:
					case PLpgSQLParser.PERMISSIVE:
					case PLpgSQLParser.PLAIN:
					case PLpgSQLParser.PREFERRED:
					case PLpgSQLParser.PROVIDER:
					case PLpgSQLParser.READ_ONLY:
					case PLpgSQLParser.READ_WRITE:
					case PLpgSQLParser.RECEIVE:
					case PLpgSQLParser.REMAINDER:
					case PLpgSQLParser.REPLICATION:
					case PLpgSQLParser.RESTRICTED:
					case PLpgSQLParser.RESTRICTIVE:
					case PLpgSQLParser.RIGHTARG:
					case PLpgSQLParser.SAFE:
					case PLpgSQLParser.SEND:
					case PLpgSQLParser.SERIALFUNC:
					case PLpgSQLParser.SETTINGS:
					case PLpgSQLParser.SFUNC:
					case PLpgSQLParser.SHAREABLE:
					case PLpgSQLParser.SKIP_LOCKED:
					case PLpgSQLParser.SORTOP:
					case PLpgSQLParser.SSPACE:
					case PLpgSQLParser.STYPE:
					case PLpgSQLParser.SUBTYPE_DIFF:
					case PLpgSQLParser.SUBTYPE_OPCLASS:
					case PLpgSQLParser.SUBTYPE:
					case PLpgSQLParser.SUMMARY:
					case PLpgSQLParser.SUPERUSER:
					case PLpgSQLParser.TIMING:
					case PLpgSQLParser.TYPMOD_IN:
					case PLpgSQLParser.TYPMOD_OUT:
					case PLpgSQLParser.UNSAFE:
					case PLpgSQLParser.USAGE:
					case PLpgSQLParser.VARIABLE:
					case PLpgSQLParser.YAML:
					case PLpgSQLParser.ALIAS:
					case PLpgSQLParser.ASSERT:
					case PLpgSQLParser.CONSTANT:
					case PLpgSQLParser.DATATYPE:
					case PLpgSQLParser.DEBUG:
					case PLpgSQLParser.DETAIL:
					case PLpgSQLParser.DIAGNOSTICS:
					case PLpgSQLParser.ELSEIF:
					case PLpgSQLParser.ELSIF:
					case PLpgSQLParser.ERRCODE:
					case PLpgSQLParser.EXIT:
					case PLpgSQLParser.EXCEPTION:
					case PLpgSQLParser.FOREACH:
					case PLpgSQLParser.GET:
					case PLpgSQLParser.HINT:
					case PLpgSQLParser.INFO:
					case PLpgSQLParser.LOG:
					case PLpgSQLParser.LOOP:
					case PLpgSQLParser.MESSAGE:
					case PLpgSQLParser.NOTICE:
					case PLpgSQLParser.OPEN:
					case PLpgSQLParser.PERFORM:
					case PLpgSQLParser.QUERY:
					case PLpgSQLParser.RAISE:
					case PLpgSQLParser.RECORD:
					case PLpgSQLParser.RETURN:
					case PLpgSQLParser.REVERSE:
					case PLpgSQLParser.ROWTYPE:
					case PLpgSQLParser.SLICE:
					case PLpgSQLParser.SQLSTATE:
					case PLpgSQLParser.STACKED:
					case PLpgSQLParser.WARNING:
					case PLpgSQLParser.WHILE:
					case PLpgSQLParser.LEFT_PAREN:
					case PLpgSQLParser.PLUS:
					case PLpgSQLParser.MINUS:
					case PLpgSQLParser.MULTIPLY:
					case PLpgSQLParser.LESS_LESS:
					case PLpgSQLParser.GREATER_GREATER:
					case PLpgSQLParser.HASH_SIGN:
					case PLpgSQLParser.OP_CHARS:
					case PLpgSQLParser.NUMBER_LITERAL:
					case PLpgSQLParser.REAL_NUMBER:
					case PLpgSQLParser.DOLLAR_NUMBER:
					case PLpgSQLParser.Identifier:
					case PLpgSQLParser.QuotedIdentifier:
					case PLpgSQLParser.Character_String_Literal:
					case PLpgSQLParser.BeginDollarStringConstant:
						{
						this.state = 7041;
						_localctx._vex = this.vex(0);
						_localctx._value.push(_localctx._vex);
						}
						break;
					case PLpgSQLParser.DEFAULT:
						{
						this.state = 7042;
						this.match(PLpgSQLParser.DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 7052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 7045;
						this.match(PLpgSQLParser.COMMA);
						this.state = 7048;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PLpgSQLParser.ABORT:
						case PLpgSQLParser.ABSOLUTE:
						case PLpgSQLParser.ACCESS:
						case PLpgSQLParser.ACTION:
						case PLpgSQLParser.ADD:
						case PLpgSQLParser.ADMIN:
						case PLpgSQLParser.AFTER:
						case PLpgSQLParser.AGGREGATE:
						case PLpgSQLParser.ALSO:
						case PLpgSQLParser.ALTER:
						case PLpgSQLParser.ALWAYS:
						case PLpgSQLParser.ASSERTION:
						case PLpgSQLParser.ASSIGNMENT:
						case PLpgSQLParser.AT:
						case PLpgSQLParser.ATTACH:
						case PLpgSQLParser.ATTRIBUTE:
						case PLpgSQLParser.BACKWARD:
						case PLpgSQLParser.BEFORE:
						case PLpgSQLParser.BEGIN:
						case PLpgSQLParser.BY:
						case PLpgSQLParser.CACHE:
						case PLpgSQLParser.CALL:
						case PLpgSQLParser.CALLED:
						case PLpgSQLParser.CASCADE:
						case PLpgSQLParser.CASCADED:
						case PLpgSQLParser.CATALOG:
						case PLpgSQLParser.CHAIN:
						case PLpgSQLParser.CHARACTERISTICS:
						case PLpgSQLParser.CHECKPOINT:
						case PLpgSQLParser.CLASS:
						case PLpgSQLParser.CLOSE:
						case PLpgSQLParser.CLUSTER:
						case PLpgSQLParser.COLUMNS:
						case PLpgSQLParser.COMMENT:
						case PLpgSQLParser.COMMENTS:
						case PLpgSQLParser.COMMIT:
						case PLpgSQLParser.COMMITTED:
						case PLpgSQLParser.CONFIGURATION:
						case PLpgSQLParser.CONFLICT:
						case PLpgSQLParser.CONNECTION:
						case PLpgSQLParser.CONSTRAINTS:
						case PLpgSQLParser.CONTENT:
						case PLpgSQLParser.CONTINUE:
						case PLpgSQLParser.CONVERSION:
						case PLpgSQLParser.COPY:
						case PLpgSQLParser.COST:
						case PLpgSQLParser.CSV:
						case PLpgSQLParser.CUBE:
						case PLpgSQLParser.CURRENT:
						case PLpgSQLParser.CURSOR:
						case PLpgSQLParser.CYCLE:
						case PLpgSQLParser.DATA:
						case PLpgSQLParser.DATABASE:
						case PLpgSQLParser.DAY:
						case PLpgSQLParser.DEALLOCATE:
						case PLpgSQLParser.DECLARE:
						case PLpgSQLParser.DEFAULTS:
						case PLpgSQLParser.DEFERRED:
						case PLpgSQLParser.DEFINER:
						case PLpgSQLParser.DELETE:
						case PLpgSQLParser.DELIMITER:
						case PLpgSQLParser.DELIMITERS:
						case PLpgSQLParser.DEPENDS:
						case PLpgSQLParser.DETACH:
						case PLpgSQLParser.DICTIONARY:
						case PLpgSQLParser.DISABLE:
						case PLpgSQLParser.DISCARD:
						case PLpgSQLParser.DOCUMENT:
						case PLpgSQLParser.DOMAIN:
						case PLpgSQLParser.DOUBLE:
						case PLpgSQLParser.DROP:
						case PLpgSQLParser.EACH:
						case PLpgSQLParser.ENABLE:
						case PLpgSQLParser.ENCODING:
						case PLpgSQLParser.ENCRYPTED:
						case PLpgSQLParser.ENUM:
						case PLpgSQLParser.ESCAPE:
						case PLpgSQLParser.EVENT:
						case PLpgSQLParser.EXCLUDE:
						case PLpgSQLParser.EXCLUDING:
						case PLpgSQLParser.EXCLUSIVE:
						case PLpgSQLParser.EXECUTE:
						case PLpgSQLParser.EXPLAIN:
						case PLpgSQLParser.EXTENSION:
						case PLpgSQLParser.EXTERNAL:
						case PLpgSQLParser.FAMILY:
						case PLpgSQLParser.FILTER:
						case PLpgSQLParser.FIRST:
						case PLpgSQLParser.FOLLOWING:
						case PLpgSQLParser.FORCE:
						case PLpgSQLParser.FORWARD:
						case PLpgSQLParser.FUNCTION:
						case PLpgSQLParser.FUNCTIONS:
						case PLpgSQLParser.GENERATED:
						case PLpgSQLParser.GLOBAL:
						case PLpgSQLParser.GRANTED:
						case PLpgSQLParser.GROUPS:
						case PLpgSQLParser.HANDLER:
						case PLpgSQLParser.HEADER:
						case PLpgSQLParser.HOLD:
						case PLpgSQLParser.HOUR:
						case PLpgSQLParser.IDENTITY:
						case PLpgSQLParser.IF:
						case PLpgSQLParser.IMMEDIATE:
						case PLpgSQLParser.IMMUTABLE:
						case PLpgSQLParser.IMPLICIT:
						case PLpgSQLParser.IMPORT:
						case PLpgSQLParser.INCLUDE:
						case PLpgSQLParser.INCLUDING:
						case PLpgSQLParser.INCREMENT:
						case PLpgSQLParser.INDEX:
						case PLpgSQLParser.INDEXES:
						case PLpgSQLParser.INHERIT:
						case PLpgSQLParser.INHERITS:
						case PLpgSQLParser.INLINE:
						case PLpgSQLParser.INPUT:
						case PLpgSQLParser.INSENSITIVE:
						case PLpgSQLParser.INSERT:
						case PLpgSQLParser.INSTEAD:
						case PLpgSQLParser.INVOKER:
						case PLpgSQLParser.ISOLATION:
						case PLpgSQLParser.KEY:
						case PLpgSQLParser.LABEL:
						case PLpgSQLParser.LANGUAGE:
						case PLpgSQLParser.LARGE:
						case PLpgSQLParser.LAST:
						case PLpgSQLParser.LEAKPROOF:
						case PLpgSQLParser.LEVEL:
						case PLpgSQLParser.LISTEN:
						case PLpgSQLParser.LOAD:
						case PLpgSQLParser.LOCAL:
						case PLpgSQLParser.LOCATION:
						case PLpgSQLParser.LOCK:
						case PLpgSQLParser.LOCKED:
						case PLpgSQLParser.LOGGED:
						case PLpgSQLParser.MAPPING:
						case PLpgSQLParser.MATCH:
						case PLpgSQLParser.MATERIALIZED:
						case PLpgSQLParser.MAXVALUE:
						case PLpgSQLParser.METHOD:
						case PLpgSQLParser.MINUTE:
						case PLpgSQLParser.MINVALUE:
						case PLpgSQLParser.MODE:
						case PLpgSQLParser.MONTH:
						case PLpgSQLParser.MOVE:
						case PLpgSQLParser.NAME:
						case PLpgSQLParser.NAMES:
						case PLpgSQLParser.NEW:
						case PLpgSQLParser.NEXT:
						case PLpgSQLParser.NO:
						case PLpgSQLParser.NOTHING:
						case PLpgSQLParser.NOTIFY:
						case PLpgSQLParser.NOWAIT:
						case PLpgSQLParser.NULLS:
						case PLpgSQLParser.OBJECT:
						case PLpgSQLParser.OF:
						case PLpgSQLParser.OFF:
						case PLpgSQLParser.OIDS:
						case PLpgSQLParser.OLD:
						case PLpgSQLParser.OPERATOR:
						case PLpgSQLParser.OPTION:
						case PLpgSQLParser.OPTIONS:
						case PLpgSQLParser.ORDINALITY:
						case PLpgSQLParser.OTHERS:
						case PLpgSQLParser.OVER:
						case PLpgSQLParser.OVERRIDING:
						case PLpgSQLParser.OWNED:
						case PLpgSQLParser.OWNER:
						case PLpgSQLParser.PARALLEL:
						case PLpgSQLParser.PARSER:
						case PLpgSQLParser.PARTIAL:
						case PLpgSQLParser.PARTITION:
						case PLpgSQLParser.PASSING:
						case PLpgSQLParser.PASSWORD:
						case PLpgSQLParser.PLANS:
						case PLpgSQLParser.POLICY:
						case PLpgSQLParser.PRECEDING:
						case PLpgSQLParser.PREPARE:
						case PLpgSQLParser.PREPARED:
						case PLpgSQLParser.PRESERVE:
						case PLpgSQLParser.PRIOR:
						case PLpgSQLParser.PRIVILEGES:
						case PLpgSQLParser.PROCEDURAL:
						case PLpgSQLParser.PROCEDURE:
						case PLpgSQLParser.PROCEDURES:
						case PLpgSQLParser.PROGRAM:
						case PLpgSQLParser.PUBLICATION:
						case PLpgSQLParser.QUOTE:
						case PLpgSQLParser.RANGE:
						case PLpgSQLParser.READ:
						case PLpgSQLParser.REASSIGN:
						case PLpgSQLParser.RECHECK:
						case PLpgSQLParser.RECURSIVE:
						case PLpgSQLParser.REF:
						case PLpgSQLParser.REFERENCING:
						case PLpgSQLParser.REFRESH:
						case PLpgSQLParser.REINDEX:
						case PLpgSQLParser.RELATIVE:
						case PLpgSQLParser.RELEASE:
						case PLpgSQLParser.RENAME:
						case PLpgSQLParser.REPEATABLE:
						case PLpgSQLParser.REPLACE:
						case PLpgSQLParser.REPLICA:
						case PLpgSQLParser.RESET:
						case PLpgSQLParser.RESTART:
						case PLpgSQLParser.RESTRICT:
						case PLpgSQLParser.RETURNS:
						case PLpgSQLParser.REVOKE:
						case PLpgSQLParser.ROLE:
						case PLpgSQLParser.ROLLBACK:
						case PLpgSQLParser.ROLLUP:
						case PLpgSQLParser.ROUTINE:
						case PLpgSQLParser.ROUTINES:
						case PLpgSQLParser.ROWS:
						case PLpgSQLParser.RULE:
						case PLpgSQLParser.SAVEPOINT:
						case PLpgSQLParser.SCHEMA:
						case PLpgSQLParser.SCHEMAS:
						case PLpgSQLParser.SCROLL:
						case PLpgSQLParser.SEARCH:
						case PLpgSQLParser.SECOND:
						case PLpgSQLParser.SECURITY:
						case PLpgSQLParser.SEQUENCE:
						case PLpgSQLParser.SEQUENCES:
						case PLpgSQLParser.SERIALIZABLE:
						case PLpgSQLParser.SERVER:
						case PLpgSQLParser.SESSION:
						case PLpgSQLParser.SET:
						case PLpgSQLParser.SETS:
						case PLpgSQLParser.SHARE:
						case PLpgSQLParser.SHOW:
						case PLpgSQLParser.SIMPLE:
						case PLpgSQLParser.SKIP_:
						case PLpgSQLParser.SNAPSHOT:
						case PLpgSQLParser.SQL:
						case PLpgSQLParser.STABLE:
						case PLpgSQLParser.STANDALONE:
						case PLpgSQLParser.START:
						case PLpgSQLParser.STATEMENT:
						case PLpgSQLParser.STATISTICS:
						case PLpgSQLParser.STDIN:
						case PLpgSQLParser.STDOUT:
						case PLpgSQLParser.STORAGE:
						case PLpgSQLParser.STORED:
						case PLpgSQLParser.STRICT:
						case PLpgSQLParser.STRIP:
						case PLpgSQLParser.SUBSCRIPTION:
						case PLpgSQLParser.SUPPORT:
						case PLpgSQLParser.SYSID:
						case PLpgSQLParser.SYSTEM:
						case PLpgSQLParser.TABLES:
						case PLpgSQLParser.TABLESPACE:
						case PLpgSQLParser.TEMP:
						case PLpgSQLParser.TEMPLATE:
						case PLpgSQLParser.TEMPORARY:
						case PLpgSQLParser.TEXT:
						case PLpgSQLParser.TIES:
						case PLpgSQLParser.TRANSACTION:
						case PLpgSQLParser.TRANSFORM:
						case PLpgSQLParser.TRIGGER:
						case PLpgSQLParser.TRUNCATE:
						case PLpgSQLParser.TRUSTED:
						case PLpgSQLParser.TYPE:
						case PLpgSQLParser.TYPES:
						case PLpgSQLParser.UNBOUNDED:
						case PLpgSQLParser.UNCOMMITTED:
						case PLpgSQLParser.UNENCRYPTED:
						case PLpgSQLParser.UNKNOWN:
						case PLpgSQLParser.UNLISTEN:
						case PLpgSQLParser.UNLOGGED:
						case PLpgSQLParser.UNTIL:
						case PLpgSQLParser.UPDATE:
						case PLpgSQLParser.VACUUM:
						case PLpgSQLParser.VALID:
						case PLpgSQLParser.VALIDATE:
						case PLpgSQLParser.VALIDATOR:
						case PLpgSQLParser.VALUE:
						case PLpgSQLParser.VARYING:
						case PLpgSQLParser.VERSION:
						case PLpgSQLParser.VIEW:
						case PLpgSQLParser.VIEWS:
						case PLpgSQLParser.VOLATILE:
						case PLpgSQLParser.WHITESPACE:
						case PLpgSQLParser.WITHIN:
						case PLpgSQLParser.WITHOUT:
						case PLpgSQLParser.WORK:
						case PLpgSQLParser.WRAPPER:
						case PLpgSQLParser.WRITE:
						case PLpgSQLParser.XML:
						case PLpgSQLParser.YEAR:
						case PLpgSQLParser.YES:
						case PLpgSQLParser.ZONE:
						case PLpgSQLParser.BETWEEN:
						case PLpgSQLParser.BIGINT:
						case PLpgSQLParser.BIT:
						case PLpgSQLParser.BOOLEAN:
						case PLpgSQLParser.CHAR:
						case PLpgSQLParser.CHARACTER:
						case PLpgSQLParser.COALESCE:
						case PLpgSQLParser.DEC:
						case PLpgSQLParser.DECIMAL:
						case PLpgSQLParser.EXISTS:
						case PLpgSQLParser.EXTRACT:
						case PLpgSQLParser.FLOAT:
						case PLpgSQLParser.GREATEST:
						case PLpgSQLParser.GROUPING:
						case PLpgSQLParser.INOUT:
						case PLpgSQLParser.INT:
						case PLpgSQLParser.INTEGER:
						case PLpgSQLParser.INTERVAL:
						case PLpgSQLParser.LEAST:
						case PLpgSQLParser.NATIONAL:
						case PLpgSQLParser.NCHAR:
						case PLpgSQLParser.NONE:
						case PLpgSQLParser.NULLIF:
						case PLpgSQLParser.NUMERIC:
						case PLpgSQLParser.OUT:
						case PLpgSQLParser.OVERLAY:
						case PLpgSQLParser.POSITION:
						case PLpgSQLParser.PRECISION:
						case PLpgSQLParser.REAL:
						case PLpgSQLParser.ROW:
						case PLpgSQLParser.SETOF:
						case PLpgSQLParser.SMALLINT:
						case PLpgSQLParser.SUBSTRING:
						case PLpgSQLParser.TIME:
						case PLpgSQLParser.TIMESTAMP:
						case PLpgSQLParser.TREAT:
						case PLpgSQLParser.TRIM:
						case PLpgSQLParser.VALUES:
						case PLpgSQLParser.VARCHAR:
						case PLpgSQLParser.XMLATTRIBUTES:
						case PLpgSQLParser.XMLCONCAT:
						case PLpgSQLParser.XMLELEMENT:
						case PLpgSQLParser.XMLEXISTS:
						case PLpgSQLParser.XMLFOREST:
						case PLpgSQLParser.XMLNAMESPACES:
						case PLpgSQLParser.XMLPARSE:
						case PLpgSQLParser.XMLPI:
						case PLpgSQLParser.XMLROOT:
						case PLpgSQLParser.XMLSERIALIZE:
						case PLpgSQLParser.XMLTABLE:
						case PLpgSQLParser.AUTHORIZATION:
						case PLpgSQLParser.BINARY:
						case PLpgSQLParser.COLLATION:
						case PLpgSQLParser.CONCURRENTLY:
						case PLpgSQLParser.CROSS:
						case PLpgSQLParser.CURRENT_SCHEMA:
						case PLpgSQLParser.FREEZE:
						case PLpgSQLParser.FULL:
						case PLpgSQLParser.ILIKE:
						case PLpgSQLParser.INNER:
						case PLpgSQLParser.IS:
						case PLpgSQLParser.ISNULL:
						case PLpgSQLParser.JOIN:
						case PLpgSQLParser.LEFT:
						case PLpgSQLParser.LIKE:
						case PLpgSQLParser.NATURAL:
						case PLpgSQLParser.NOTNULL:
						case PLpgSQLParser.OUTER:
						case PLpgSQLParser.OVERLAPS:
						case PLpgSQLParser.RIGHT:
						case PLpgSQLParser.SIMILAR:
						case PLpgSQLParser.TABLESAMPLE:
						case PLpgSQLParser.VERBOSE:
						case PLpgSQLParser.ALL:
						case PLpgSQLParser.ANY:
						case PLpgSQLParser.ARRAY:
						case PLpgSQLParser.CASE:
						case PLpgSQLParser.CAST:
						case PLpgSQLParser.CURRENT_CATALOG:
						case PLpgSQLParser.CURRENT_DATE:
						case PLpgSQLParser.CURRENT_TIME:
						case PLpgSQLParser.CURRENT_TIMESTAMP:
						case PLpgSQLParser.CURRENT_USER:
						case PLpgSQLParser.FALSE:
						case PLpgSQLParser.LOCALTIME:
						case PLpgSQLParser.LOCALTIMESTAMP:
						case PLpgSQLParser.NOT:
						case PLpgSQLParser.NULL:
						case PLpgSQLParser.ON:
						case PLpgSQLParser.SESSION_USER:
						case PLpgSQLParser.SOME:
						case PLpgSQLParser.TRUE:
						case PLpgSQLParser.USER:
						case PLpgSQLParser.ALIGNMENT:
						case PLpgSQLParser.BASETYPE:
						case PLpgSQLParser.BUFFERS:
						case PLpgSQLParser.BYPASSRLS:
						case PLpgSQLParser.CANONICAL:
						case PLpgSQLParser.CATEGORY:
						case PLpgSQLParser.COLLATABLE:
						case PLpgSQLParser.COMBINEFUNC:
						case PLpgSQLParser.COMMUTATOR:
						case PLpgSQLParser.CONNECT:
						case PLpgSQLParser.COSTS:
						case PLpgSQLParser.CREATEDB:
						case PLpgSQLParser.CREATEROLE:
						case PLpgSQLParser.DESERIALFUNC:
						case PLpgSQLParser.DETERMINISTIC:
						case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
						case PLpgSQLParser.ELEMENT:
						case PLpgSQLParser.EXTENDED:
						case PLpgSQLParser.FINALFUNC:
						case PLpgSQLParser.FINALFUNC_EXTRA:
						case PLpgSQLParser.FINALFUNC_MODIFY:
						case PLpgSQLParser.FORCE_NOT_NULL:
						case PLpgSQLParser.FORCE_NULL:
						case PLpgSQLParser.FORCE_QUOTE:
						case PLpgSQLParser.FORMAT:
						case PLpgSQLParser.GETTOKEN:
						case PLpgSQLParser.HASH:
						case PLpgSQLParser.HASHES:
						case PLpgSQLParser.HEADLINE:
						case PLpgSQLParser.HYPOTHETICAL:
						case PLpgSQLParser.INDEX_CLEANUP:
						case PLpgSQLParser.INIT:
						case PLpgSQLParser.INITCOND:
						case PLpgSQLParser.INTERNALLENGTH:
						case PLpgSQLParser.JSON:
						case PLpgSQLParser.LC_COLLATE:
						case PLpgSQLParser.LC_CTYPE:
						case PLpgSQLParser.LEFTARG:
						case PLpgSQLParser.LEXIZE:
						case PLpgSQLParser.LEXTYPES:
						case PLpgSQLParser.LIST:
						case PLpgSQLParser.LOCALE:
						case PLpgSQLParser.LOGIN:
						case PLpgSQLParser.MAIN:
						case PLpgSQLParser.MERGES:
						case PLpgSQLParser.MFINALFUNC:
						case PLpgSQLParser.MFINALFUNC_EXTRA:
						case PLpgSQLParser.MFINALFUNC_MODIFY:
						case PLpgSQLParser.MINITCOND:
						case PLpgSQLParser.MINVFUNC:
						case PLpgSQLParser.MODULUS:
						case PLpgSQLParser.MSFUNC:
						case PLpgSQLParser.MSSPACE:
						case PLpgSQLParser.MSTYPE:
						case PLpgSQLParser.NEGATOR:
						case PLpgSQLParser.NOBYPASSRLS:
						case PLpgSQLParser.NOCREATEDB:
						case PLpgSQLParser.NOCREATEROLE:
						case PLpgSQLParser.NOINHERIT:
						case PLpgSQLParser.NOLOGIN:
						case PLpgSQLParser.NOREPLICATION:
						case PLpgSQLParser.NOSUPERUSER:
						case PLpgSQLParser.OUTPUT:
						case PLpgSQLParser.PASSEDBYVALUE:
						case PLpgSQLParser.PATH:
						case PLpgSQLParser.PERMISSIVE:
						case PLpgSQLParser.PLAIN:
						case PLpgSQLParser.PREFERRED:
						case PLpgSQLParser.PROVIDER:
						case PLpgSQLParser.READ_ONLY:
						case PLpgSQLParser.READ_WRITE:
						case PLpgSQLParser.RECEIVE:
						case PLpgSQLParser.REMAINDER:
						case PLpgSQLParser.REPLICATION:
						case PLpgSQLParser.RESTRICTED:
						case PLpgSQLParser.RESTRICTIVE:
						case PLpgSQLParser.RIGHTARG:
						case PLpgSQLParser.SAFE:
						case PLpgSQLParser.SEND:
						case PLpgSQLParser.SERIALFUNC:
						case PLpgSQLParser.SETTINGS:
						case PLpgSQLParser.SFUNC:
						case PLpgSQLParser.SHAREABLE:
						case PLpgSQLParser.SKIP_LOCKED:
						case PLpgSQLParser.SORTOP:
						case PLpgSQLParser.SSPACE:
						case PLpgSQLParser.STYPE:
						case PLpgSQLParser.SUBTYPE_DIFF:
						case PLpgSQLParser.SUBTYPE_OPCLASS:
						case PLpgSQLParser.SUBTYPE:
						case PLpgSQLParser.SUMMARY:
						case PLpgSQLParser.SUPERUSER:
						case PLpgSQLParser.TIMING:
						case PLpgSQLParser.TYPMOD_IN:
						case PLpgSQLParser.TYPMOD_OUT:
						case PLpgSQLParser.UNSAFE:
						case PLpgSQLParser.USAGE:
						case PLpgSQLParser.VARIABLE:
						case PLpgSQLParser.YAML:
						case PLpgSQLParser.ALIAS:
						case PLpgSQLParser.ASSERT:
						case PLpgSQLParser.CONSTANT:
						case PLpgSQLParser.DATATYPE:
						case PLpgSQLParser.DEBUG:
						case PLpgSQLParser.DETAIL:
						case PLpgSQLParser.DIAGNOSTICS:
						case PLpgSQLParser.ELSEIF:
						case PLpgSQLParser.ELSIF:
						case PLpgSQLParser.ERRCODE:
						case PLpgSQLParser.EXIT:
						case PLpgSQLParser.EXCEPTION:
						case PLpgSQLParser.FOREACH:
						case PLpgSQLParser.GET:
						case PLpgSQLParser.HINT:
						case PLpgSQLParser.INFO:
						case PLpgSQLParser.LOG:
						case PLpgSQLParser.LOOP:
						case PLpgSQLParser.MESSAGE:
						case PLpgSQLParser.NOTICE:
						case PLpgSQLParser.OPEN:
						case PLpgSQLParser.PERFORM:
						case PLpgSQLParser.QUERY:
						case PLpgSQLParser.RAISE:
						case PLpgSQLParser.RECORD:
						case PLpgSQLParser.RETURN:
						case PLpgSQLParser.REVERSE:
						case PLpgSQLParser.ROWTYPE:
						case PLpgSQLParser.SLICE:
						case PLpgSQLParser.SQLSTATE:
						case PLpgSQLParser.STACKED:
						case PLpgSQLParser.WARNING:
						case PLpgSQLParser.WHILE:
						case PLpgSQLParser.LEFT_PAREN:
						case PLpgSQLParser.PLUS:
						case PLpgSQLParser.MINUS:
						case PLpgSQLParser.MULTIPLY:
						case PLpgSQLParser.LESS_LESS:
						case PLpgSQLParser.GREATER_GREATER:
						case PLpgSQLParser.HASH_SIGN:
						case PLpgSQLParser.OP_CHARS:
						case PLpgSQLParser.NUMBER_LITERAL:
						case PLpgSQLParser.REAL_NUMBER:
						case PLpgSQLParser.DOLLAR_NUMBER:
						case PLpgSQLParser.Identifier:
						case PLpgSQLParser.QuotedIdentifier:
						case PLpgSQLParser.Character_String_Literal:
						case PLpgSQLParser.BeginDollarStringConstant:
							{
							this.state = 7046;
							_localctx._vex = this.vex(0);
							_localctx._value.push(_localctx._vex);
							}
							break;
						case PLpgSQLParser.DEFAULT:
							{
							this.state = 7047;
							this.match(PLpgSQLParser.DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						this.state = 7054;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7055;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;

				case 2:
					{
					this.state = 7056;
					this.table_subquery();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notify_stmt(): Notify_stmtContext {
		let _localctx: Notify_stmtContext = new Notify_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, PLpgSQLParser.RULE_notify_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7061;
			this.match(PLpgSQLParser.NOTIFY);
			this.state = 7062;
			_localctx._channel = this.identifier();
			this.state = 7065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.COMMA) {
				{
				this.state = 7063;
				this.match(PLpgSQLParser.COMMA);
				this.state = 7064;
				_localctx._payload = this.character_string();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncate_stmt(): Truncate_stmtContext {
		let _localctx: Truncate_stmtContext = new Truncate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, PLpgSQLParser.RULE_truncate_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7067;
			this.match(PLpgSQLParser.TRUNCATE);
			this.state = 7069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.TABLE) {
				{
				this.state = 7068;
				this.match(PLpgSQLParser.TABLE);
				}
			}

			this.state = 7071;
			this.only_table_multiply();
			this.state = 7076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 7072;
				this.match(PLpgSQLParser.COMMA);
				this.state = 7073;
				this.only_table_multiply();
				}
				}
				this.state = 7078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CONTINUE || _la === PLpgSQLParser.RESTART) {
				{
				this.state = 7079;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONTINUE || _la === PLpgSQLParser.RESTART)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7080;
				this.match(PLpgSQLParser.IDENTITY);
				}
			}

			this.state = 7084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.CASCADE || _la === PLpgSQLParser.RESTRICT) {
				{
				this.state = 7083;
				this.cascade_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_list(): Identifier_listContext {
		let _localctx: Identifier_listContext = new Identifier_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, PLpgSQLParser.RULE_identifier_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7086;
			this.identifier();
			this.state = 7091;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 944, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7087;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7088;
					this.identifier();
					}
					}
				}
				this.state = 7093;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 944, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anonymous_block(): Anonymous_blockContext {
		let _localctx: Anonymous_blockContext = new Anonymous_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, PLpgSQLParser.RULE_anonymous_block);
		let _la: number;
		try {
			this.state = 7110;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 948, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7094;
				this.match(PLpgSQLParser.DO);
				this.state = 7100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LANGUAGE) {
					{
					this.state = 7095;
					this.match(PLpgSQLParser.LANGUAGE);
					this.state = 7098;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PLpgSQLParser.ABORT:
					case PLpgSQLParser.ABSOLUTE:
					case PLpgSQLParser.ACCESS:
					case PLpgSQLParser.ACTION:
					case PLpgSQLParser.ADD:
					case PLpgSQLParser.ADMIN:
					case PLpgSQLParser.AFTER:
					case PLpgSQLParser.AGGREGATE:
					case PLpgSQLParser.ALSO:
					case PLpgSQLParser.ALTER:
					case PLpgSQLParser.ALWAYS:
					case PLpgSQLParser.ASSERTION:
					case PLpgSQLParser.ASSIGNMENT:
					case PLpgSQLParser.AT:
					case PLpgSQLParser.ATTACH:
					case PLpgSQLParser.ATTRIBUTE:
					case PLpgSQLParser.BACKWARD:
					case PLpgSQLParser.BEFORE:
					case PLpgSQLParser.BEGIN:
					case PLpgSQLParser.BY:
					case PLpgSQLParser.CACHE:
					case PLpgSQLParser.CALL:
					case PLpgSQLParser.CALLED:
					case PLpgSQLParser.CASCADE:
					case PLpgSQLParser.CASCADED:
					case PLpgSQLParser.CATALOG:
					case PLpgSQLParser.CHAIN:
					case PLpgSQLParser.CHARACTERISTICS:
					case PLpgSQLParser.CHECKPOINT:
					case PLpgSQLParser.CLASS:
					case PLpgSQLParser.CLOSE:
					case PLpgSQLParser.CLUSTER:
					case PLpgSQLParser.COLUMNS:
					case PLpgSQLParser.COMMENT:
					case PLpgSQLParser.COMMENTS:
					case PLpgSQLParser.COMMIT:
					case PLpgSQLParser.COMMITTED:
					case PLpgSQLParser.CONFIGURATION:
					case PLpgSQLParser.CONFLICT:
					case PLpgSQLParser.CONNECTION:
					case PLpgSQLParser.CONSTRAINTS:
					case PLpgSQLParser.CONTENT:
					case PLpgSQLParser.CONTINUE:
					case PLpgSQLParser.CONVERSION:
					case PLpgSQLParser.COPY:
					case PLpgSQLParser.COST:
					case PLpgSQLParser.CSV:
					case PLpgSQLParser.CUBE:
					case PLpgSQLParser.CURRENT:
					case PLpgSQLParser.CURSOR:
					case PLpgSQLParser.CYCLE:
					case PLpgSQLParser.DATA:
					case PLpgSQLParser.DATABASE:
					case PLpgSQLParser.DAY:
					case PLpgSQLParser.DEALLOCATE:
					case PLpgSQLParser.DECLARE:
					case PLpgSQLParser.DEFAULTS:
					case PLpgSQLParser.DEFERRED:
					case PLpgSQLParser.DEFINER:
					case PLpgSQLParser.DELETE:
					case PLpgSQLParser.DELIMITER:
					case PLpgSQLParser.DELIMITERS:
					case PLpgSQLParser.DEPENDS:
					case PLpgSQLParser.DETACH:
					case PLpgSQLParser.DICTIONARY:
					case PLpgSQLParser.DISABLE:
					case PLpgSQLParser.DISCARD:
					case PLpgSQLParser.DOCUMENT:
					case PLpgSQLParser.DOMAIN:
					case PLpgSQLParser.DOUBLE:
					case PLpgSQLParser.DROP:
					case PLpgSQLParser.EACH:
					case PLpgSQLParser.ENABLE:
					case PLpgSQLParser.ENCODING:
					case PLpgSQLParser.ENCRYPTED:
					case PLpgSQLParser.ENUM:
					case PLpgSQLParser.ESCAPE:
					case PLpgSQLParser.EVENT:
					case PLpgSQLParser.EXCLUDE:
					case PLpgSQLParser.EXCLUDING:
					case PLpgSQLParser.EXCLUSIVE:
					case PLpgSQLParser.EXECUTE:
					case PLpgSQLParser.EXPLAIN:
					case PLpgSQLParser.EXTENSION:
					case PLpgSQLParser.EXTERNAL:
					case PLpgSQLParser.FAMILY:
					case PLpgSQLParser.FILTER:
					case PLpgSQLParser.FIRST:
					case PLpgSQLParser.FOLLOWING:
					case PLpgSQLParser.FORCE:
					case PLpgSQLParser.FORWARD:
					case PLpgSQLParser.FUNCTION:
					case PLpgSQLParser.FUNCTIONS:
					case PLpgSQLParser.GENERATED:
					case PLpgSQLParser.GLOBAL:
					case PLpgSQLParser.GRANTED:
					case PLpgSQLParser.GROUPS:
					case PLpgSQLParser.HANDLER:
					case PLpgSQLParser.HEADER:
					case PLpgSQLParser.HOLD:
					case PLpgSQLParser.HOUR:
					case PLpgSQLParser.IDENTITY:
					case PLpgSQLParser.IF:
					case PLpgSQLParser.IMMEDIATE:
					case PLpgSQLParser.IMMUTABLE:
					case PLpgSQLParser.IMPLICIT:
					case PLpgSQLParser.IMPORT:
					case PLpgSQLParser.INCLUDE:
					case PLpgSQLParser.INCLUDING:
					case PLpgSQLParser.INCREMENT:
					case PLpgSQLParser.INDEX:
					case PLpgSQLParser.INDEXES:
					case PLpgSQLParser.INHERIT:
					case PLpgSQLParser.INHERITS:
					case PLpgSQLParser.INLINE:
					case PLpgSQLParser.INPUT:
					case PLpgSQLParser.INSENSITIVE:
					case PLpgSQLParser.INSERT:
					case PLpgSQLParser.INSTEAD:
					case PLpgSQLParser.INVOKER:
					case PLpgSQLParser.ISOLATION:
					case PLpgSQLParser.KEY:
					case PLpgSQLParser.LABEL:
					case PLpgSQLParser.LANGUAGE:
					case PLpgSQLParser.LARGE:
					case PLpgSQLParser.LAST:
					case PLpgSQLParser.LEAKPROOF:
					case PLpgSQLParser.LEVEL:
					case PLpgSQLParser.LISTEN:
					case PLpgSQLParser.LOAD:
					case PLpgSQLParser.LOCAL:
					case PLpgSQLParser.LOCATION:
					case PLpgSQLParser.LOCK:
					case PLpgSQLParser.LOCKED:
					case PLpgSQLParser.LOGGED:
					case PLpgSQLParser.MAPPING:
					case PLpgSQLParser.MATCH:
					case PLpgSQLParser.MATERIALIZED:
					case PLpgSQLParser.MAXVALUE:
					case PLpgSQLParser.METHOD:
					case PLpgSQLParser.MINUTE:
					case PLpgSQLParser.MINVALUE:
					case PLpgSQLParser.MODE:
					case PLpgSQLParser.MONTH:
					case PLpgSQLParser.MOVE:
					case PLpgSQLParser.NAME:
					case PLpgSQLParser.NAMES:
					case PLpgSQLParser.NEW:
					case PLpgSQLParser.NEXT:
					case PLpgSQLParser.NO:
					case PLpgSQLParser.NOTHING:
					case PLpgSQLParser.NOTIFY:
					case PLpgSQLParser.NOWAIT:
					case PLpgSQLParser.NULLS:
					case PLpgSQLParser.OBJECT:
					case PLpgSQLParser.OF:
					case PLpgSQLParser.OFF:
					case PLpgSQLParser.OIDS:
					case PLpgSQLParser.OLD:
					case PLpgSQLParser.OPERATOR:
					case PLpgSQLParser.OPTION:
					case PLpgSQLParser.OPTIONS:
					case PLpgSQLParser.ORDINALITY:
					case PLpgSQLParser.OTHERS:
					case PLpgSQLParser.OVER:
					case PLpgSQLParser.OVERRIDING:
					case PLpgSQLParser.OWNED:
					case PLpgSQLParser.OWNER:
					case PLpgSQLParser.PARALLEL:
					case PLpgSQLParser.PARSER:
					case PLpgSQLParser.PARTIAL:
					case PLpgSQLParser.PARTITION:
					case PLpgSQLParser.PASSING:
					case PLpgSQLParser.PASSWORD:
					case PLpgSQLParser.PLANS:
					case PLpgSQLParser.POLICY:
					case PLpgSQLParser.PRECEDING:
					case PLpgSQLParser.PREPARE:
					case PLpgSQLParser.PREPARED:
					case PLpgSQLParser.PRESERVE:
					case PLpgSQLParser.PRIOR:
					case PLpgSQLParser.PRIVILEGES:
					case PLpgSQLParser.PROCEDURAL:
					case PLpgSQLParser.PROCEDURE:
					case PLpgSQLParser.PROCEDURES:
					case PLpgSQLParser.PROGRAM:
					case PLpgSQLParser.PUBLICATION:
					case PLpgSQLParser.QUOTE:
					case PLpgSQLParser.RANGE:
					case PLpgSQLParser.READ:
					case PLpgSQLParser.REASSIGN:
					case PLpgSQLParser.RECHECK:
					case PLpgSQLParser.RECURSIVE:
					case PLpgSQLParser.REF:
					case PLpgSQLParser.REFERENCING:
					case PLpgSQLParser.REFRESH:
					case PLpgSQLParser.REINDEX:
					case PLpgSQLParser.RELATIVE:
					case PLpgSQLParser.RELEASE:
					case PLpgSQLParser.RENAME:
					case PLpgSQLParser.REPEATABLE:
					case PLpgSQLParser.REPLACE:
					case PLpgSQLParser.REPLICA:
					case PLpgSQLParser.RESET:
					case PLpgSQLParser.RESTART:
					case PLpgSQLParser.RESTRICT:
					case PLpgSQLParser.RETURNS:
					case PLpgSQLParser.REVOKE:
					case PLpgSQLParser.ROLE:
					case PLpgSQLParser.ROLLBACK:
					case PLpgSQLParser.ROLLUP:
					case PLpgSQLParser.ROUTINE:
					case PLpgSQLParser.ROUTINES:
					case PLpgSQLParser.ROWS:
					case PLpgSQLParser.RULE:
					case PLpgSQLParser.SAVEPOINT:
					case PLpgSQLParser.SCHEMA:
					case PLpgSQLParser.SCHEMAS:
					case PLpgSQLParser.SCROLL:
					case PLpgSQLParser.SEARCH:
					case PLpgSQLParser.SECOND:
					case PLpgSQLParser.SECURITY:
					case PLpgSQLParser.SEQUENCE:
					case PLpgSQLParser.SEQUENCES:
					case PLpgSQLParser.SERIALIZABLE:
					case PLpgSQLParser.SERVER:
					case PLpgSQLParser.SESSION:
					case PLpgSQLParser.SET:
					case PLpgSQLParser.SETS:
					case PLpgSQLParser.SHARE:
					case PLpgSQLParser.SHOW:
					case PLpgSQLParser.SIMPLE:
					case PLpgSQLParser.SKIP_:
					case PLpgSQLParser.SNAPSHOT:
					case PLpgSQLParser.SQL:
					case PLpgSQLParser.STABLE:
					case PLpgSQLParser.STANDALONE:
					case PLpgSQLParser.START:
					case PLpgSQLParser.STATEMENT:
					case PLpgSQLParser.STATISTICS:
					case PLpgSQLParser.STDIN:
					case PLpgSQLParser.STDOUT:
					case PLpgSQLParser.STORAGE:
					case PLpgSQLParser.STORED:
					case PLpgSQLParser.STRICT:
					case PLpgSQLParser.STRIP:
					case PLpgSQLParser.SUBSCRIPTION:
					case PLpgSQLParser.SUPPORT:
					case PLpgSQLParser.SYSID:
					case PLpgSQLParser.SYSTEM:
					case PLpgSQLParser.TABLES:
					case PLpgSQLParser.TABLESPACE:
					case PLpgSQLParser.TEMP:
					case PLpgSQLParser.TEMPLATE:
					case PLpgSQLParser.TEMPORARY:
					case PLpgSQLParser.TEXT:
					case PLpgSQLParser.TIES:
					case PLpgSQLParser.TRANSACTION:
					case PLpgSQLParser.TRANSFORM:
					case PLpgSQLParser.TRIGGER:
					case PLpgSQLParser.TRUNCATE:
					case PLpgSQLParser.TRUSTED:
					case PLpgSQLParser.TYPE:
					case PLpgSQLParser.TYPES:
					case PLpgSQLParser.UNBOUNDED:
					case PLpgSQLParser.UNCOMMITTED:
					case PLpgSQLParser.UNENCRYPTED:
					case PLpgSQLParser.UNKNOWN:
					case PLpgSQLParser.UNLISTEN:
					case PLpgSQLParser.UNLOGGED:
					case PLpgSQLParser.UNTIL:
					case PLpgSQLParser.UPDATE:
					case PLpgSQLParser.VACUUM:
					case PLpgSQLParser.VALID:
					case PLpgSQLParser.VALIDATE:
					case PLpgSQLParser.VALIDATOR:
					case PLpgSQLParser.VALUE:
					case PLpgSQLParser.VARYING:
					case PLpgSQLParser.VERSION:
					case PLpgSQLParser.VIEW:
					case PLpgSQLParser.VIEWS:
					case PLpgSQLParser.VOLATILE:
					case PLpgSQLParser.WHITESPACE:
					case PLpgSQLParser.WITHIN:
					case PLpgSQLParser.WITHOUT:
					case PLpgSQLParser.WORK:
					case PLpgSQLParser.WRAPPER:
					case PLpgSQLParser.WRITE:
					case PLpgSQLParser.XML:
					case PLpgSQLParser.YEAR:
					case PLpgSQLParser.YES:
					case PLpgSQLParser.ZONE:
					case PLpgSQLParser.BETWEEN:
					case PLpgSQLParser.BIGINT:
					case PLpgSQLParser.BIT:
					case PLpgSQLParser.BOOLEAN:
					case PLpgSQLParser.CHAR:
					case PLpgSQLParser.CHARACTER:
					case PLpgSQLParser.COALESCE:
					case PLpgSQLParser.DEC:
					case PLpgSQLParser.DECIMAL:
					case PLpgSQLParser.EXISTS:
					case PLpgSQLParser.EXTRACT:
					case PLpgSQLParser.FLOAT:
					case PLpgSQLParser.GREATEST:
					case PLpgSQLParser.GROUPING:
					case PLpgSQLParser.INOUT:
					case PLpgSQLParser.INT:
					case PLpgSQLParser.INTEGER:
					case PLpgSQLParser.INTERVAL:
					case PLpgSQLParser.LEAST:
					case PLpgSQLParser.NATIONAL:
					case PLpgSQLParser.NCHAR:
					case PLpgSQLParser.NONE:
					case PLpgSQLParser.NULLIF:
					case PLpgSQLParser.NUMERIC:
					case PLpgSQLParser.OUT:
					case PLpgSQLParser.OVERLAY:
					case PLpgSQLParser.POSITION:
					case PLpgSQLParser.PRECISION:
					case PLpgSQLParser.REAL:
					case PLpgSQLParser.ROW:
					case PLpgSQLParser.SETOF:
					case PLpgSQLParser.SMALLINT:
					case PLpgSQLParser.SUBSTRING:
					case PLpgSQLParser.TIME:
					case PLpgSQLParser.TIMESTAMP:
					case PLpgSQLParser.TREAT:
					case PLpgSQLParser.TRIM:
					case PLpgSQLParser.VALUES:
					case PLpgSQLParser.VARCHAR:
					case PLpgSQLParser.XMLATTRIBUTES:
					case PLpgSQLParser.XMLCONCAT:
					case PLpgSQLParser.XMLELEMENT:
					case PLpgSQLParser.XMLEXISTS:
					case PLpgSQLParser.XMLFOREST:
					case PLpgSQLParser.XMLNAMESPACES:
					case PLpgSQLParser.XMLPARSE:
					case PLpgSQLParser.XMLPI:
					case PLpgSQLParser.XMLROOT:
					case PLpgSQLParser.XMLSERIALIZE:
					case PLpgSQLParser.XMLTABLE:
					case PLpgSQLParser.ALIGNMENT:
					case PLpgSQLParser.BASETYPE:
					case PLpgSQLParser.BUFFERS:
					case PLpgSQLParser.BYPASSRLS:
					case PLpgSQLParser.CANONICAL:
					case PLpgSQLParser.CATEGORY:
					case PLpgSQLParser.COLLATABLE:
					case PLpgSQLParser.COMBINEFUNC:
					case PLpgSQLParser.COMMUTATOR:
					case PLpgSQLParser.CONNECT:
					case PLpgSQLParser.COSTS:
					case PLpgSQLParser.CREATEDB:
					case PLpgSQLParser.CREATEROLE:
					case PLpgSQLParser.DESERIALFUNC:
					case PLpgSQLParser.DETERMINISTIC:
					case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
					case PLpgSQLParser.ELEMENT:
					case PLpgSQLParser.EXTENDED:
					case PLpgSQLParser.FINALFUNC:
					case PLpgSQLParser.FINALFUNC_EXTRA:
					case PLpgSQLParser.FINALFUNC_MODIFY:
					case PLpgSQLParser.FORCE_NOT_NULL:
					case PLpgSQLParser.FORCE_NULL:
					case PLpgSQLParser.FORCE_QUOTE:
					case PLpgSQLParser.FORMAT:
					case PLpgSQLParser.GETTOKEN:
					case PLpgSQLParser.HASH:
					case PLpgSQLParser.HASHES:
					case PLpgSQLParser.HEADLINE:
					case PLpgSQLParser.HYPOTHETICAL:
					case PLpgSQLParser.INDEX_CLEANUP:
					case PLpgSQLParser.INIT:
					case PLpgSQLParser.INITCOND:
					case PLpgSQLParser.INTERNALLENGTH:
					case PLpgSQLParser.JSON:
					case PLpgSQLParser.LC_COLLATE:
					case PLpgSQLParser.LC_CTYPE:
					case PLpgSQLParser.LEFTARG:
					case PLpgSQLParser.LEXIZE:
					case PLpgSQLParser.LEXTYPES:
					case PLpgSQLParser.LIST:
					case PLpgSQLParser.LOCALE:
					case PLpgSQLParser.LOGIN:
					case PLpgSQLParser.MAIN:
					case PLpgSQLParser.MERGES:
					case PLpgSQLParser.MFINALFUNC:
					case PLpgSQLParser.MFINALFUNC_EXTRA:
					case PLpgSQLParser.MFINALFUNC_MODIFY:
					case PLpgSQLParser.MINITCOND:
					case PLpgSQLParser.MINVFUNC:
					case PLpgSQLParser.MODULUS:
					case PLpgSQLParser.MSFUNC:
					case PLpgSQLParser.MSSPACE:
					case PLpgSQLParser.MSTYPE:
					case PLpgSQLParser.NEGATOR:
					case PLpgSQLParser.NOBYPASSRLS:
					case PLpgSQLParser.NOCREATEDB:
					case PLpgSQLParser.NOCREATEROLE:
					case PLpgSQLParser.NOINHERIT:
					case PLpgSQLParser.NOLOGIN:
					case PLpgSQLParser.NOREPLICATION:
					case PLpgSQLParser.NOSUPERUSER:
					case PLpgSQLParser.OUTPUT:
					case PLpgSQLParser.PASSEDBYVALUE:
					case PLpgSQLParser.PATH:
					case PLpgSQLParser.PERMISSIVE:
					case PLpgSQLParser.PLAIN:
					case PLpgSQLParser.PREFERRED:
					case PLpgSQLParser.PROVIDER:
					case PLpgSQLParser.READ_ONLY:
					case PLpgSQLParser.READ_WRITE:
					case PLpgSQLParser.RECEIVE:
					case PLpgSQLParser.REMAINDER:
					case PLpgSQLParser.REPLICATION:
					case PLpgSQLParser.RESTRICTED:
					case PLpgSQLParser.RESTRICTIVE:
					case PLpgSQLParser.RIGHTARG:
					case PLpgSQLParser.SAFE:
					case PLpgSQLParser.SEND:
					case PLpgSQLParser.SERIALFUNC:
					case PLpgSQLParser.SETTINGS:
					case PLpgSQLParser.SFUNC:
					case PLpgSQLParser.SHAREABLE:
					case PLpgSQLParser.SKIP_LOCKED:
					case PLpgSQLParser.SORTOP:
					case PLpgSQLParser.SSPACE:
					case PLpgSQLParser.STYPE:
					case PLpgSQLParser.SUBTYPE_DIFF:
					case PLpgSQLParser.SUBTYPE_OPCLASS:
					case PLpgSQLParser.SUBTYPE:
					case PLpgSQLParser.SUMMARY:
					case PLpgSQLParser.SUPERUSER:
					case PLpgSQLParser.TIMING:
					case PLpgSQLParser.TYPMOD_IN:
					case PLpgSQLParser.TYPMOD_OUT:
					case PLpgSQLParser.UNSAFE:
					case PLpgSQLParser.USAGE:
					case PLpgSQLParser.VARIABLE:
					case PLpgSQLParser.YAML:
					case PLpgSQLParser.ALIAS:
					case PLpgSQLParser.ASSERT:
					case PLpgSQLParser.CONSTANT:
					case PLpgSQLParser.DATATYPE:
					case PLpgSQLParser.DEBUG:
					case PLpgSQLParser.DETAIL:
					case PLpgSQLParser.DIAGNOSTICS:
					case PLpgSQLParser.ELSEIF:
					case PLpgSQLParser.ELSIF:
					case PLpgSQLParser.ERRCODE:
					case PLpgSQLParser.EXIT:
					case PLpgSQLParser.EXCEPTION:
					case PLpgSQLParser.FOREACH:
					case PLpgSQLParser.GET:
					case PLpgSQLParser.HINT:
					case PLpgSQLParser.INFO:
					case PLpgSQLParser.LOG:
					case PLpgSQLParser.LOOP:
					case PLpgSQLParser.MESSAGE:
					case PLpgSQLParser.NOTICE:
					case PLpgSQLParser.OPEN:
					case PLpgSQLParser.PERFORM:
					case PLpgSQLParser.QUERY:
					case PLpgSQLParser.RAISE:
					case PLpgSQLParser.RECORD:
					case PLpgSQLParser.RETURN:
					case PLpgSQLParser.REVERSE:
					case PLpgSQLParser.ROWTYPE:
					case PLpgSQLParser.SLICE:
					case PLpgSQLParser.SQLSTATE:
					case PLpgSQLParser.STACKED:
					case PLpgSQLParser.WARNING:
					case PLpgSQLParser.WHILE:
					case PLpgSQLParser.Identifier:
					case PLpgSQLParser.QuotedIdentifier:
						{
						this.state = 7096;
						this.identifier();
						}
						break;
					case PLpgSQLParser.Character_String_Literal:
					case PLpgSQLParser.BeginDollarStringConstant:
						{
						this.state = 7097;
						this.character_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 7102;
				this.character_string();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7103;
				this.match(PLpgSQLParser.DO);
				this.state = 7104;
				this.character_string();
				this.state = 7105;
				this.match(PLpgSQLParser.LANGUAGE);
				this.state = 7108;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 7106;
					this.identifier();
					}
					break;
				case PLpgSQLParser.Character_String_Literal:
				case PLpgSQLParser.BeginDollarStringConstant:
					{
					this.state = 7107;
					this.character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comp_options(): Comp_optionsContext {
		let _localctx: Comp_optionsContext = new Comp_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, PLpgSQLParser.RULE_comp_options);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7112;
			this.match(PLpgSQLParser.HASH_SIGN);
			this.state = 7113;
			this.identifier();
			this.state = 7116;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 7114;
				this.identifier();
				}
				break;
			case PLpgSQLParser.FALSE:
			case PLpgSQLParser.ON:
			case PLpgSQLParser.TRUE:
				{
				this.state = 7115;
				this.truth_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_block(): Function_blockContext {
		let _localctx: Function_blockContext = new Function_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, PLpgSQLParser.RULE_function_block);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7119;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.LESS_LESS) {
				{
				this.state = 7118;
				this.start_label();
				}
			}

			this.state = 7122;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.DECLARE) {
				{
				this.state = 7121;
				this.declarations();
				}
			}

			this.state = 7124;
			this.match(PLpgSQLParser.BEGIN);
			this.state = 7125;
			this.function_statements();
			this.state = 7127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.EXCEPTION) {
				{
				this.state = 7126;
				this.exception_statement();
				}
			}

			this.state = 7129;
			this.match(PLpgSQLParser.END);
			this.state = 7131;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
				{
				this.state = 7130;
				_localctx._end_label = this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public start_label(): Start_labelContext {
		let _localctx: Start_labelContext = new Start_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, PLpgSQLParser.RULE_start_label);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7133;
			this.match(PLpgSQLParser.LESS_LESS);
			this.state = 7134;
			this.identifier();
			this.state = 7135;
			this.match(PLpgSQLParser.GREATER_GREATER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declarations(): DeclarationsContext {
		let _localctx: DeclarationsContext = new DeclarationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, PLpgSQLParser.RULE_declarations);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7137;
			this.match(PLpgSQLParser.DECLARE);
			this.state = 7141;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 954, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7138;
					this.declaration();
					}
					}
				}
				this.state = 7143;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 954, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaration(): DeclarationContext {
		let _localctx: DeclarationContext = new DeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, PLpgSQLParser.RULE_declaration);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7147;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 955, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7144;
					this.match(PLpgSQLParser.DECLARE);
					}
					}
				}
				this.state = 7149;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 955, this._ctx);
			}
			this.state = 7150;
			this.identifier();
			this.state = 7151;
			this.type_declaration();
			this.state = 7152;
			this.match(PLpgSQLParser.SEMI_COLON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_declaration(): Type_declarationContext {
		let _localctx: Type_declarationContext = new Type_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, PLpgSQLParser.RULE_type_declaration);
		let _la: number;
		try {
			this.state = 7190;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 964, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7155;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
				case 1:
					{
					this.state = 7154;
					this.match(PLpgSQLParser.CONSTANT);
					}
					break;
				}
				this.state = 7157;
				this.data_type_dec();
				this.state = 7159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COLLATE) {
					{
					this.state = 7158;
					this.collate_identifier();
					}
				}

				this.state = 7163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NOT) {
					{
					this.state = 7161;
					this.match(PLpgSQLParser.NOT);
					this.state = 7162;
					this.match(PLpgSQLParser.NULL);
					}
				}

				this.state = 7167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.DEFAULT || _la === PLpgSQLParser.EQUAL || _la === PLpgSQLParser.COLON_EQUAL) {
					{
					this.state = 7165;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.DEFAULT || _la === PLpgSQLParser.EQUAL || _la === PLpgSQLParser.COLON_EQUAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7166;
					this.vex(0);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7169;
				this.match(PLpgSQLParser.ALIAS);
				this.state = 7170;
				this.match(PLpgSQLParser.FOR);
				this.state = 7173;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PLpgSQLParser.ABORT:
				case PLpgSQLParser.ABSOLUTE:
				case PLpgSQLParser.ACCESS:
				case PLpgSQLParser.ACTION:
				case PLpgSQLParser.ADD:
				case PLpgSQLParser.ADMIN:
				case PLpgSQLParser.AFTER:
				case PLpgSQLParser.AGGREGATE:
				case PLpgSQLParser.ALSO:
				case PLpgSQLParser.ALTER:
				case PLpgSQLParser.ALWAYS:
				case PLpgSQLParser.ASSERTION:
				case PLpgSQLParser.ASSIGNMENT:
				case PLpgSQLParser.AT:
				case PLpgSQLParser.ATTACH:
				case PLpgSQLParser.ATTRIBUTE:
				case PLpgSQLParser.BACKWARD:
				case PLpgSQLParser.BEFORE:
				case PLpgSQLParser.BEGIN:
				case PLpgSQLParser.BY:
				case PLpgSQLParser.CACHE:
				case PLpgSQLParser.CALL:
				case PLpgSQLParser.CALLED:
				case PLpgSQLParser.CASCADE:
				case PLpgSQLParser.CASCADED:
				case PLpgSQLParser.CATALOG:
				case PLpgSQLParser.CHAIN:
				case PLpgSQLParser.CHARACTERISTICS:
				case PLpgSQLParser.CHECKPOINT:
				case PLpgSQLParser.CLASS:
				case PLpgSQLParser.CLOSE:
				case PLpgSQLParser.CLUSTER:
				case PLpgSQLParser.COLUMNS:
				case PLpgSQLParser.COMMENT:
				case PLpgSQLParser.COMMENTS:
				case PLpgSQLParser.COMMIT:
				case PLpgSQLParser.COMMITTED:
				case PLpgSQLParser.CONFIGURATION:
				case PLpgSQLParser.CONFLICT:
				case PLpgSQLParser.CONNECTION:
				case PLpgSQLParser.CONSTRAINTS:
				case PLpgSQLParser.CONTENT:
				case PLpgSQLParser.CONTINUE:
				case PLpgSQLParser.CONVERSION:
				case PLpgSQLParser.COPY:
				case PLpgSQLParser.COST:
				case PLpgSQLParser.CSV:
				case PLpgSQLParser.CUBE:
				case PLpgSQLParser.CURRENT:
				case PLpgSQLParser.CURSOR:
				case PLpgSQLParser.CYCLE:
				case PLpgSQLParser.DATA:
				case PLpgSQLParser.DATABASE:
				case PLpgSQLParser.DAY:
				case PLpgSQLParser.DEALLOCATE:
				case PLpgSQLParser.DECLARE:
				case PLpgSQLParser.DEFAULTS:
				case PLpgSQLParser.DEFERRED:
				case PLpgSQLParser.DEFINER:
				case PLpgSQLParser.DELETE:
				case PLpgSQLParser.DELIMITER:
				case PLpgSQLParser.DELIMITERS:
				case PLpgSQLParser.DEPENDS:
				case PLpgSQLParser.DETACH:
				case PLpgSQLParser.DICTIONARY:
				case PLpgSQLParser.DISABLE:
				case PLpgSQLParser.DISCARD:
				case PLpgSQLParser.DOCUMENT:
				case PLpgSQLParser.DOMAIN:
				case PLpgSQLParser.DOUBLE:
				case PLpgSQLParser.DROP:
				case PLpgSQLParser.EACH:
				case PLpgSQLParser.ENABLE:
				case PLpgSQLParser.ENCODING:
				case PLpgSQLParser.ENCRYPTED:
				case PLpgSQLParser.ENUM:
				case PLpgSQLParser.ESCAPE:
				case PLpgSQLParser.EVENT:
				case PLpgSQLParser.EXCLUDE:
				case PLpgSQLParser.EXCLUDING:
				case PLpgSQLParser.EXCLUSIVE:
				case PLpgSQLParser.EXECUTE:
				case PLpgSQLParser.EXPLAIN:
				case PLpgSQLParser.EXTENSION:
				case PLpgSQLParser.EXTERNAL:
				case PLpgSQLParser.FAMILY:
				case PLpgSQLParser.FILTER:
				case PLpgSQLParser.FIRST:
				case PLpgSQLParser.FOLLOWING:
				case PLpgSQLParser.FORCE:
				case PLpgSQLParser.FORWARD:
				case PLpgSQLParser.FUNCTION:
				case PLpgSQLParser.FUNCTIONS:
				case PLpgSQLParser.GENERATED:
				case PLpgSQLParser.GLOBAL:
				case PLpgSQLParser.GRANTED:
				case PLpgSQLParser.GROUPS:
				case PLpgSQLParser.HANDLER:
				case PLpgSQLParser.HEADER:
				case PLpgSQLParser.HOLD:
				case PLpgSQLParser.HOUR:
				case PLpgSQLParser.IDENTITY:
				case PLpgSQLParser.IF:
				case PLpgSQLParser.IMMEDIATE:
				case PLpgSQLParser.IMMUTABLE:
				case PLpgSQLParser.IMPLICIT:
				case PLpgSQLParser.IMPORT:
				case PLpgSQLParser.INCLUDE:
				case PLpgSQLParser.INCLUDING:
				case PLpgSQLParser.INCREMENT:
				case PLpgSQLParser.INDEX:
				case PLpgSQLParser.INDEXES:
				case PLpgSQLParser.INHERIT:
				case PLpgSQLParser.INHERITS:
				case PLpgSQLParser.INLINE:
				case PLpgSQLParser.INPUT:
				case PLpgSQLParser.INSENSITIVE:
				case PLpgSQLParser.INSERT:
				case PLpgSQLParser.INSTEAD:
				case PLpgSQLParser.INVOKER:
				case PLpgSQLParser.ISOLATION:
				case PLpgSQLParser.KEY:
				case PLpgSQLParser.LABEL:
				case PLpgSQLParser.LANGUAGE:
				case PLpgSQLParser.LARGE:
				case PLpgSQLParser.LAST:
				case PLpgSQLParser.LEAKPROOF:
				case PLpgSQLParser.LEVEL:
				case PLpgSQLParser.LISTEN:
				case PLpgSQLParser.LOAD:
				case PLpgSQLParser.LOCAL:
				case PLpgSQLParser.LOCATION:
				case PLpgSQLParser.LOCK:
				case PLpgSQLParser.LOCKED:
				case PLpgSQLParser.LOGGED:
				case PLpgSQLParser.MAPPING:
				case PLpgSQLParser.MATCH:
				case PLpgSQLParser.MATERIALIZED:
				case PLpgSQLParser.MAXVALUE:
				case PLpgSQLParser.METHOD:
				case PLpgSQLParser.MINUTE:
				case PLpgSQLParser.MINVALUE:
				case PLpgSQLParser.MODE:
				case PLpgSQLParser.MONTH:
				case PLpgSQLParser.MOVE:
				case PLpgSQLParser.NAME:
				case PLpgSQLParser.NAMES:
				case PLpgSQLParser.NEW:
				case PLpgSQLParser.NEXT:
				case PLpgSQLParser.NO:
				case PLpgSQLParser.NOTHING:
				case PLpgSQLParser.NOTIFY:
				case PLpgSQLParser.NOWAIT:
				case PLpgSQLParser.NULLS:
				case PLpgSQLParser.OBJECT:
				case PLpgSQLParser.OF:
				case PLpgSQLParser.OFF:
				case PLpgSQLParser.OIDS:
				case PLpgSQLParser.OLD:
				case PLpgSQLParser.OPERATOR:
				case PLpgSQLParser.OPTION:
				case PLpgSQLParser.OPTIONS:
				case PLpgSQLParser.ORDINALITY:
				case PLpgSQLParser.OTHERS:
				case PLpgSQLParser.OVER:
				case PLpgSQLParser.OVERRIDING:
				case PLpgSQLParser.OWNED:
				case PLpgSQLParser.OWNER:
				case PLpgSQLParser.PARALLEL:
				case PLpgSQLParser.PARSER:
				case PLpgSQLParser.PARTIAL:
				case PLpgSQLParser.PARTITION:
				case PLpgSQLParser.PASSING:
				case PLpgSQLParser.PASSWORD:
				case PLpgSQLParser.PLANS:
				case PLpgSQLParser.POLICY:
				case PLpgSQLParser.PRECEDING:
				case PLpgSQLParser.PREPARE:
				case PLpgSQLParser.PREPARED:
				case PLpgSQLParser.PRESERVE:
				case PLpgSQLParser.PRIOR:
				case PLpgSQLParser.PRIVILEGES:
				case PLpgSQLParser.PROCEDURAL:
				case PLpgSQLParser.PROCEDURE:
				case PLpgSQLParser.PROCEDURES:
				case PLpgSQLParser.PROGRAM:
				case PLpgSQLParser.PUBLICATION:
				case PLpgSQLParser.QUOTE:
				case PLpgSQLParser.RANGE:
				case PLpgSQLParser.READ:
				case PLpgSQLParser.REASSIGN:
				case PLpgSQLParser.RECHECK:
				case PLpgSQLParser.RECURSIVE:
				case PLpgSQLParser.REF:
				case PLpgSQLParser.REFERENCING:
				case PLpgSQLParser.REFRESH:
				case PLpgSQLParser.REINDEX:
				case PLpgSQLParser.RELATIVE:
				case PLpgSQLParser.RELEASE:
				case PLpgSQLParser.RENAME:
				case PLpgSQLParser.REPEATABLE:
				case PLpgSQLParser.REPLACE:
				case PLpgSQLParser.REPLICA:
				case PLpgSQLParser.RESET:
				case PLpgSQLParser.RESTART:
				case PLpgSQLParser.RESTRICT:
				case PLpgSQLParser.RETURNS:
				case PLpgSQLParser.REVOKE:
				case PLpgSQLParser.ROLE:
				case PLpgSQLParser.ROLLBACK:
				case PLpgSQLParser.ROLLUP:
				case PLpgSQLParser.ROUTINE:
				case PLpgSQLParser.ROUTINES:
				case PLpgSQLParser.ROWS:
				case PLpgSQLParser.RULE:
				case PLpgSQLParser.SAVEPOINT:
				case PLpgSQLParser.SCHEMA:
				case PLpgSQLParser.SCHEMAS:
				case PLpgSQLParser.SCROLL:
				case PLpgSQLParser.SEARCH:
				case PLpgSQLParser.SECOND:
				case PLpgSQLParser.SECURITY:
				case PLpgSQLParser.SEQUENCE:
				case PLpgSQLParser.SEQUENCES:
				case PLpgSQLParser.SERIALIZABLE:
				case PLpgSQLParser.SERVER:
				case PLpgSQLParser.SESSION:
				case PLpgSQLParser.SET:
				case PLpgSQLParser.SETS:
				case PLpgSQLParser.SHARE:
				case PLpgSQLParser.SHOW:
				case PLpgSQLParser.SIMPLE:
				case PLpgSQLParser.SKIP_:
				case PLpgSQLParser.SNAPSHOT:
				case PLpgSQLParser.SQL:
				case PLpgSQLParser.STABLE:
				case PLpgSQLParser.STANDALONE:
				case PLpgSQLParser.START:
				case PLpgSQLParser.STATEMENT:
				case PLpgSQLParser.STATISTICS:
				case PLpgSQLParser.STDIN:
				case PLpgSQLParser.STDOUT:
				case PLpgSQLParser.STORAGE:
				case PLpgSQLParser.STORED:
				case PLpgSQLParser.STRICT:
				case PLpgSQLParser.STRIP:
				case PLpgSQLParser.SUBSCRIPTION:
				case PLpgSQLParser.SUPPORT:
				case PLpgSQLParser.SYSID:
				case PLpgSQLParser.SYSTEM:
				case PLpgSQLParser.TABLES:
				case PLpgSQLParser.TABLESPACE:
				case PLpgSQLParser.TEMP:
				case PLpgSQLParser.TEMPLATE:
				case PLpgSQLParser.TEMPORARY:
				case PLpgSQLParser.TEXT:
				case PLpgSQLParser.TIES:
				case PLpgSQLParser.TRANSACTION:
				case PLpgSQLParser.TRANSFORM:
				case PLpgSQLParser.TRIGGER:
				case PLpgSQLParser.TRUNCATE:
				case PLpgSQLParser.TRUSTED:
				case PLpgSQLParser.TYPE:
				case PLpgSQLParser.TYPES:
				case PLpgSQLParser.UNBOUNDED:
				case PLpgSQLParser.UNCOMMITTED:
				case PLpgSQLParser.UNENCRYPTED:
				case PLpgSQLParser.UNKNOWN:
				case PLpgSQLParser.UNLISTEN:
				case PLpgSQLParser.UNLOGGED:
				case PLpgSQLParser.UNTIL:
				case PLpgSQLParser.UPDATE:
				case PLpgSQLParser.VACUUM:
				case PLpgSQLParser.VALID:
				case PLpgSQLParser.VALIDATE:
				case PLpgSQLParser.VALIDATOR:
				case PLpgSQLParser.VALUE:
				case PLpgSQLParser.VARYING:
				case PLpgSQLParser.VERSION:
				case PLpgSQLParser.VIEW:
				case PLpgSQLParser.VIEWS:
				case PLpgSQLParser.VOLATILE:
				case PLpgSQLParser.WHITESPACE:
				case PLpgSQLParser.WITHIN:
				case PLpgSQLParser.WITHOUT:
				case PLpgSQLParser.WORK:
				case PLpgSQLParser.WRAPPER:
				case PLpgSQLParser.WRITE:
				case PLpgSQLParser.XML:
				case PLpgSQLParser.YEAR:
				case PLpgSQLParser.YES:
				case PLpgSQLParser.ZONE:
				case PLpgSQLParser.BETWEEN:
				case PLpgSQLParser.BIGINT:
				case PLpgSQLParser.BIT:
				case PLpgSQLParser.BOOLEAN:
				case PLpgSQLParser.CHAR:
				case PLpgSQLParser.CHARACTER:
				case PLpgSQLParser.COALESCE:
				case PLpgSQLParser.DEC:
				case PLpgSQLParser.DECIMAL:
				case PLpgSQLParser.EXISTS:
				case PLpgSQLParser.EXTRACT:
				case PLpgSQLParser.FLOAT:
				case PLpgSQLParser.GREATEST:
				case PLpgSQLParser.GROUPING:
				case PLpgSQLParser.INOUT:
				case PLpgSQLParser.INT:
				case PLpgSQLParser.INTEGER:
				case PLpgSQLParser.INTERVAL:
				case PLpgSQLParser.LEAST:
				case PLpgSQLParser.NATIONAL:
				case PLpgSQLParser.NCHAR:
				case PLpgSQLParser.NONE:
				case PLpgSQLParser.NULLIF:
				case PLpgSQLParser.NUMERIC:
				case PLpgSQLParser.OUT:
				case PLpgSQLParser.OVERLAY:
				case PLpgSQLParser.POSITION:
				case PLpgSQLParser.PRECISION:
				case PLpgSQLParser.REAL:
				case PLpgSQLParser.ROW:
				case PLpgSQLParser.SETOF:
				case PLpgSQLParser.SMALLINT:
				case PLpgSQLParser.SUBSTRING:
				case PLpgSQLParser.TIME:
				case PLpgSQLParser.TIMESTAMP:
				case PLpgSQLParser.TREAT:
				case PLpgSQLParser.TRIM:
				case PLpgSQLParser.VALUES:
				case PLpgSQLParser.VARCHAR:
				case PLpgSQLParser.XMLATTRIBUTES:
				case PLpgSQLParser.XMLCONCAT:
				case PLpgSQLParser.XMLELEMENT:
				case PLpgSQLParser.XMLEXISTS:
				case PLpgSQLParser.XMLFOREST:
				case PLpgSQLParser.XMLNAMESPACES:
				case PLpgSQLParser.XMLPARSE:
				case PLpgSQLParser.XMLPI:
				case PLpgSQLParser.XMLROOT:
				case PLpgSQLParser.XMLSERIALIZE:
				case PLpgSQLParser.XMLTABLE:
				case PLpgSQLParser.ALIGNMENT:
				case PLpgSQLParser.BASETYPE:
				case PLpgSQLParser.BUFFERS:
				case PLpgSQLParser.BYPASSRLS:
				case PLpgSQLParser.CANONICAL:
				case PLpgSQLParser.CATEGORY:
				case PLpgSQLParser.COLLATABLE:
				case PLpgSQLParser.COMBINEFUNC:
				case PLpgSQLParser.COMMUTATOR:
				case PLpgSQLParser.CONNECT:
				case PLpgSQLParser.COSTS:
				case PLpgSQLParser.CREATEDB:
				case PLpgSQLParser.CREATEROLE:
				case PLpgSQLParser.DESERIALFUNC:
				case PLpgSQLParser.DETERMINISTIC:
				case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
				case PLpgSQLParser.ELEMENT:
				case PLpgSQLParser.EXTENDED:
				case PLpgSQLParser.FINALFUNC:
				case PLpgSQLParser.FINALFUNC_EXTRA:
				case PLpgSQLParser.FINALFUNC_MODIFY:
				case PLpgSQLParser.FORCE_NOT_NULL:
				case PLpgSQLParser.FORCE_NULL:
				case PLpgSQLParser.FORCE_QUOTE:
				case PLpgSQLParser.FORMAT:
				case PLpgSQLParser.GETTOKEN:
				case PLpgSQLParser.HASH:
				case PLpgSQLParser.HASHES:
				case PLpgSQLParser.HEADLINE:
				case PLpgSQLParser.HYPOTHETICAL:
				case PLpgSQLParser.INDEX_CLEANUP:
				case PLpgSQLParser.INIT:
				case PLpgSQLParser.INITCOND:
				case PLpgSQLParser.INTERNALLENGTH:
				case PLpgSQLParser.JSON:
				case PLpgSQLParser.LC_COLLATE:
				case PLpgSQLParser.LC_CTYPE:
				case PLpgSQLParser.LEFTARG:
				case PLpgSQLParser.LEXIZE:
				case PLpgSQLParser.LEXTYPES:
				case PLpgSQLParser.LIST:
				case PLpgSQLParser.LOCALE:
				case PLpgSQLParser.LOGIN:
				case PLpgSQLParser.MAIN:
				case PLpgSQLParser.MERGES:
				case PLpgSQLParser.MFINALFUNC:
				case PLpgSQLParser.MFINALFUNC_EXTRA:
				case PLpgSQLParser.MFINALFUNC_MODIFY:
				case PLpgSQLParser.MINITCOND:
				case PLpgSQLParser.MINVFUNC:
				case PLpgSQLParser.MODULUS:
				case PLpgSQLParser.MSFUNC:
				case PLpgSQLParser.MSSPACE:
				case PLpgSQLParser.MSTYPE:
				case PLpgSQLParser.NEGATOR:
				case PLpgSQLParser.NOBYPASSRLS:
				case PLpgSQLParser.NOCREATEDB:
				case PLpgSQLParser.NOCREATEROLE:
				case PLpgSQLParser.NOINHERIT:
				case PLpgSQLParser.NOLOGIN:
				case PLpgSQLParser.NOREPLICATION:
				case PLpgSQLParser.NOSUPERUSER:
				case PLpgSQLParser.OUTPUT:
				case PLpgSQLParser.PASSEDBYVALUE:
				case PLpgSQLParser.PATH:
				case PLpgSQLParser.PERMISSIVE:
				case PLpgSQLParser.PLAIN:
				case PLpgSQLParser.PREFERRED:
				case PLpgSQLParser.PROVIDER:
				case PLpgSQLParser.READ_ONLY:
				case PLpgSQLParser.READ_WRITE:
				case PLpgSQLParser.RECEIVE:
				case PLpgSQLParser.REMAINDER:
				case PLpgSQLParser.REPLICATION:
				case PLpgSQLParser.RESTRICTED:
				case PLpgSQLParser.RESTRICTIVE:
				case PLpgSQLParser.RIGHTARG:
				case PLpgSQLParser.SAFE:
				case PLpgSQLParser.SEND:
				case PLpgSQLParser.SERIALFUNC:
				case PLpgSQLParser.SETTINGS:
				case PLpgSQLParser.SFUNC:
				case PLpgSQLParser.SHAREABLE:
				case PLpgSQLParser.SKIP_LOCKED:
				case PLpgSQLParser.SORTOP:
				case PLpgSQLParser.SSPACE:
				case PLpgSQLParser.STYPE:
				case PLpgSQLParser.SUBTYPE_DIFF:
				case PLpgSQLParser.SUBTYPE_OPCLASS:
				case PLpgSQLParser.SUBTYPE:
				case PLpgSQLParser.SUMMARY:
				case PLpgSQLParser.SUPERUSER:
				case PLpgSQLParser.TIMING:
				case PLpgSQLParser.TYPMOD_IN:
				case PLpgSQLParser.TYPMOD_OUT:
				case PLpgSQLParser.UNSAFE:
				case PLpgSQLParser.USAGE:
				case PLpgSQLParser.VARIABLE:
				case PLpgSQLParser.YAML:
				case PLpgSQLParser.ALIAS:
				case PLpgSQLParser.ASSERT:
				case PLpgSQLParser.CONSTANT:
				case PLpgSQLParser.DATATYPE:
				case PLpgSQLParser.DEBUG:
				case PLpgSQLParser.DETAIL:
				case PLpgSQLParser.DIAGNOSTICS:
				case PLpgSQLParser.ELSEIF:
				case PLpgSQLParser.ELSIF:
				case PLpgSQLParser.ERRCODE:
				case PLpgSQLParser.EXIT:
				case PLpgSQLParser.EXCEPTION:
				case PLpgSQLParser.FOREACH:
				case PLpgSQLParser.GET:
				case PLpgSQLParser.HINT:
				case PLpgSQLParser.INFO:
				case PLpgSQLParser.LOG:
				case PLpgSQLParser.LOOP:
				case PLpgSQLParser.MESSAGE:
				case PLpgSQLParser.NOTICE:
				case PLpgSQLParser.OPEN:
				case PLpgSQLParser.PERFORM:
				case PLpgSQLParser.QUERY:
				case PLpgSQLParser.RAISE:
				case PLpgSQLParser.RECORD:
				case PLpgSQLParser.RETURN:
				case PLpgSQLParser.REVERSE:
				case PLpgSQLParser.ROWTYPE:
				case PLpgSQLParser.SLICE:
				case PLpgSQLParser.SQLSTATE:
				case PLpgSQLParser.STACKED:
				case PLpgSQLParser.WARNING:
				case PLpgSQLParser.WHILE:
				case PLpgSQLParser.Identifier:
				case PLpgSQLParser.QuotedIdentifier:
					{
					this.state = 7171;
					this.identifier();
					}
					break;
				case PLpgSQLParser.DOLLAR_NUMBER:
					{
					this.state = 7172;
					this.match(PLpgSQLParser.DOLLAR_NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO || _la === PLpgSQLParser.SCROLL) {
					{
					this.state = 7176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.NO) {
						{
						this.state = 7175;
						this.match(PLpgSQLParser.NO);
						}
					}

					this.state = 7178;
					this.match(PLpgSQLParser.SCROLL);
					}
				}

				this.state = 7181;
				this.match(PLpgSQLParser.CURSOR);
				this.state = 7186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 7182;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 7183;
					this.arguments_list();
					this.state = 7184;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				this.state = 7188;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.IS || _la === PLpgSQLParser.FOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7189;
				this.select_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arguments_list(): Arguments_listContext {
		let _localctx: Arguments_listContext = new Arguments_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, PLpgSQLParser.RULE_arguments_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7192;
			this.identifier();
			this.state = 7193;
			this.data_type();
			this.state = 7200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 7194;
				this.match(PLpgSQLParser.COMMA);
				this.state = 7195;
				this.identifier();
				this.state = 7196;
				this.data_type();
				}
				}
				this.state = 7202;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type_dec(): Data_type_decContext {
		let _localctx: Data_type_decContext = new Data_type_decContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, PLpgSQLParser.RULE_data_type_dec);
		try {
			this.state = 7212;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 966, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7203;
				this.data_type();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7204;
				this.schema_qualified_name();
				this.state = 7205;
				this.match(PLpgSQLParser.MODULAR);
				this.state = 7206;
				this.match(PLpgSQLParser.TYPE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7208;
				this.schema_qualified_name_nontype();
				this.state = 7209;
				this.match(PLpgSQLParser.MODULAR);
				this.state = 7210;
				this.match(PLpgSQLParser.ROWTYPE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exception_statement(): Exception_statementContext {
		let _localctx: Exception_statementContext = new Exception_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, PLpgSQLParser.RULE_exception_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7214;
			this.match(PLpgSQLParser.EXCEPTION);
			this.state = 7220;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7215;
				this.match(PLpgSQLParser.WHEN);
				this.state = 7216;
				this.vex(0);
				this.state = 7217;
				this.match(PLpgSQLParser.THEN);
				this.state = 7218;
				this.function_statements();
				}
				}
				this.state = 7222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PLpgSQLParser.WHEN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_statements(): Function_statementsContext {
		let _localctx: Function_statementsContext = new Function_statementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, PLpgSQLParser.RULE_function_statements);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7229;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 968, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7224;
					this.function_statement();
					this.state = 7225;
					this.match(PLpgSQLParser.SEMI_COLON);
					}
					}
				}
				this.state = 7231;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 968, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_statement(): Function_statementContext {
		let _localctx: Function_statementContext = new Function_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, PLpgSQLParser.RULE_function_statement);
		try {
			this.state = 7241;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 969, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7232;
				this.function_block();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7233;
				this.base_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7234;
				this.control_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7235;
				this.transaction_statement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7236;
				this.cursor_statement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7237;
				this.message_statement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7238;
				this.schema_statement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7239;
				this.plpgsql_query();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7240;
				this.additional_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public base_statement(): Base_statementContext {
		let _localctx: Base_statementContext = new Base_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, PLpgSQLParser.RULE_base_statement);
		let _la: number;
		try {
			this.state = 7260;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 972, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7243;
				this.assign_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7244;
				this.match(PLpgSQLParser.PERFORM);
				this.state = 7245;
				this.perform_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7246;
				this.match(PLpgSQLParser.GET);
				this.state = 7248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.CURRENT || _la === PLpgSQLParser.STACKED) {
					{
					this.state = 7247;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.CURRENT || _la === PLpgSQLParser.STACKED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 7250;
				this.match(PLpgSQLParser.DIAGNOSTICS);
				this.state = 7251;
				this.diagnostic_option();
				this.state = 7256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 7252;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7253;
					this.diagnostic_option();
					}
					}
					this.state = 7258;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7259;
				this.match(PLpgSQLParser.NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public var(): VarContext {
		let _localctx: VarContext = new VarContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, PLpgSQLParser.RULE_var);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7264;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.ABORT:
			case PLpgSQLParser.ABSOLUTE:
			case PLpgSQLParser.ACCESS:
			case PLpgSQLParser.ACTION:
			case PLpgSQLParser.ADD:
			case PLpgSQLParser.ADMIN:
			case PLpgSQLParser.AFTER:
			case PLpgSQLParser.AGGREGATE:
			case PLpgSQLParser.ALSO:
			case PLpgSQLParser.ALTER:
			case PLpgSQLParser.ALWAYS:
			case PLpgSQLParser.ASSERTION:
			case PLpgSQLParser.ASSIGNMENT:
			case PLpgSQLParser.AT:
			case PLpgSQLParser.ATTACH:
			case PLpgSQLParser.ATTRIBUTE:
			case PLpgSQLParser.BACKWARD:
			case PLpgSQLParser.BEFORE:
			case PLpgSQLParser.BEGIN:
			case PLpgSQLParser.BY:
			case PLpgSQLParser.CACHE:
			case PLpgSQLParser.CALL:
			case PLpgSQLParser.CALLED:
			case PLpgSQLParser.CASCADE:
			case PLpgSQLParser.CASCADED:
			case PLpgSQLParser.CATALOG:
			case PLpgSQLParser.CHAIN:
			case PLpgSQLParser.CHARACTERISTICS:
			case PLpgSQLParser.CHECKPOINT:
			case PLpgSQLParser.CLASS:
			case PLpgSQLParser.CLOSE:
			case PLpgSQLParser.CLUSTER:
			case PLpgSQLParser.COLUMNS:
			case PLpgSQLParser.COMMENT:
			case PLpgSQLParser.COMMENTS:
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.COMMITTED:
			case PLpgSQLParser.CONFIGURATION:
			case PLpgSQLParser.CONFLICT:
			case PLpgSQLParser.CONNECTION:
			case PLpgSQLParser.CONSTRAINTS:
			case PLpgSQLParser.CONTENT:
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.CONVERSION:
			case PLpgSQLParser.COPY:
			case PLpgSQLParser.COST:
			case PLpgSQLParser.CSV:
			case PLpgSQLParser.CUBE:
			case PLpgSQLParser.CURRENT:
			case PLpgSQLParser.CURSOR:
			case PLpgSQLParser.CYCLE:
			case PLpgSQLParser.DATA:
			case PLpgSQLParser.DATABASE:
			case PLpgSQLParser.DAY:
			case PLpgSQLParser.DEALLOCATE:
			case PLpgSQLParser.DECLARE:
			case PLpgSQLParser.DEFAULTS:
			case PLpgSQLParser.DEFERRED:
			case PLpgSQLParser.DEFINER:
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.DELIMITER:
			case PLpgSQLParser.DELIMITERS:
			case PLpgSQLParser.DEPENDS:
			case PLpgSQLParser.DETACH:
			case PLpgSQLParser.DICTIONARY:
			case PLpgSQLParser.DISABLE:
			case PLpgSQLParser.DISCARD:
			case PLpgSQLParser.DOCUMENT:
			case PLpgSQLParser.DOMAIN:
			case PLpgSQLParser.DOUBLE:
			case PLpgSQLParser.DROP:
			case PLpgSQLParser.EACH:
			case PLpgSQLParser.ENABLE:
			case PLpgSQLParser.ENCODING:
			case PLpgSQLParser.ENCRYPTED:
			case PLpgSQLParser.ENUM:
			case PLpgSQLParser.ESCAPE:
			case PLpgSQLParser.EVENT:
			case PLpgSQLParser.EXCLUDE:
			case PLpgSQLParser.EXCLUDING:
			case PLpgSQLParser.EXCLUSIVE:
			case PLpgSQLParser.EXECUTE:
			case PLpgSQLParser.EXPLAIN:
			case PLpgSQLParser.EXTENSION:
			case PLpgSQLParser.EXTERNAL:
			case PLpgSQLParser.FAMILY:
			case PLpgSQLParser.FILTER:
			case PLpgSQLParser.FIRST:
			case PLpgSQLParser.FOLLOWING:
			case PLpgSQLParser.FORCE:
			case PLpgSQLParser.FORWARD:
			case PLpgSQLParser.FUNCTION:
			case PLpgSQLParser.FUNCTIONS:
			case PLpgSQLParser.GENERATED:
			case PLpgSQLParser.GLOBAL:
			case PLpgSQLParser.GRANTED:
			case PLpgSQLParser.GROUPS:
			case PLpgSQLParser.HANDLER:
			case PLpgSQLParser.HEADER:
			case PLpgSQLParser.HOLD:
			case PLpgSQLParser.HOUR:
			case PLpgSQLParser.IDENTITY:
			case PLpgSQLParser.IF:
			case PLpgSQLParser.IMMEDIATE:
			case PLpgSQLParser.IMMUTABLE:
			case PLpgSQLParser.IMPLICIT:
			case PLpgSQLParser.IMPORT:
			case PLpgSQLParser.INCLUDE:
			case PLpgSQLParser.INCLUDING:
			case PLpgSQLParser.INCREMENT:
			case PLpgSQLParser.INDEX:
			case PLpgSQLParser.INDEXES:
			case PLpgSQLParser.INHERIT:
			case PLpgSQLParser.INHERITS:
			case PLpgSQLParser.INLINE:
			case PLpgSQLParser.INPUT:
			case PLpgSQLParser.INSENSITIVE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.INSTEAD:
			case PLpgSQLParser.INVOKER:
			case PLpgSQLParser.ISOLATION:
			case PLpgSQLParser.KEY:
			case PLpgSQLParser.LABEL:
			case PLpgSQLParser.LANGUAGE:
			case PLpgSQLParser.LARGE:
			case PLpgSQLParser.LAST:
			case PLpgSQLParser.LEAKPROOF:
			case PLpgSQLParser.LEVEL:
			case PLpgSQLParser.LISTEN:
			case PLpgSQLParser.LOAD:
			case PLpgSQLParser.LOCAL:
			case PLpgSQLParser.LOCATION:
			case PLpgSQLParser.LOCK:
			case PLpgSQLParser.LOCKED:
			case PLpgSQLParser.LOGGED:
			case PLpgSQLParser.MAPPING:
			case PLpgSQLParser.MATCH:
			case PLpgSQLParser.MATERIALIZED:
			case PLpgSQLParser.MAXVALUE:
			case PLpgSQLParser.METHOD:
			case PLpgSQLParser.MINUTE:
			case PLpgSQLParser.MINVALUE:
			case PLpgSQLParser.MODE:
			case PLpgSQLParser.MONTH:
			case PLpgSQLParser.MOVE:
			case PLpgSQLParser.NAME:
			case PLpgSQLParser.NAMES:
			case PLpgSQLParser.NEW:
			case PLpgSQLParser.NEXT:
			case PLpgSQLParser.NO:
			case PLpgSQLParser.NOTHING:
			case PLpgSQLParser.NOTIFY:
			case PLpgSQLParser.NOWAIT:
			case PLpgSQLParser.NULLS:
			case PLpgSQLParser.OBJECT:
			case PLpgSQLParser.OF:
			case PLpgSQLParser.OFF:
			case PLpgSQLParser.OIDS:
			case PLpgSQLParser.OLD:
			case PLpgSQLParser.OPERATOR:
			case PLpgSQLParser.OPTION:
			case PLpgSQLParser.OPTIONS:
			case PLpgSQLParser.ORDINALITY:
			case PLpgSQLParser.OTHERS:
			case PLpgSQLParser.OVER:
			case PLpgSQLParser.OVERRIDING:
			case PLpgSQLParser.OWNED:
			case PLpgSQLParser.OWNER:
			case PLpgSQLParser.PARALLEL:
			case PLpgSQLParser.PARSER:
			case PLpgSQLParser.PARTIAL:
			case PLpgSQLParser.PARTITION:
			case PLpgSQLParser.PASSING:
			case PLpgSQLParser.PASSWORD:
			case PLpgSQLParser.PLANS:
			case PLpgSQLParser.POLICY:
			case PLpgSQLParser.PRECEDING:
			case PLpgSQLParser.PREPARE:
			case PLpgSQLParser.PREPARED:
			case PLpgSQLParser.PRESERVE:
			case PLpgSQLParser.PRIOR:
			case PLpgSQLParser.PRIVILEGES:
			case PLpgSQLParser.PROCEDURAL:
			case PLpgSQLParser.PROCEDURE:
			case PLpgSQLParser.PROCEDURES:
			case PLpgSQLParser.PROGRAM:
			case PLpgSQLParser.PUBLICATION:
			case PLpgSQLParser.QUOTE:
			case PLpgSQLParser.RANGE:
			case PLpgSQLParser.READ:
			case PLpgSQLParser.REASSIGN:
			case PLpgSQLParser.RECHECK:
			case PLpgSQLParser.RECURSIVE:
			case PLpgSQLParser.REF:
			case PLpgSQLParser.REFERENCING:
			case PLpgSQLParser.REFRESH:
			case PLpgSQLParser.REINDEX:
			case PLpgSQLParser.RELATIVE:
			case PLpgSQLParser.RELEASE:
			case PLpgSQLParser.RENAME:
			case PLpgSQLParser.REPEATABLE:
			case PLpgSQLParser.REPLACE:
			case PLpgSQLParser.REPLICA:
			case PLpgSQLParser.RESET:
			case PLpgSQLParser.RESTART:
			case PLpgSQLParser.RESTRICT:
			case PLpgSQLParser.RETURNS:
			case PLpgSQLParser.REVOKE:
			case PLpgSQLParser.ROLE:
			case PLpgSQLParser.ROLLBACK:
			case PLpgSQLParser.ROLLUP:
			case PLpgSQLParser.ROUTINE:
			case PLpgSQLParser.ROUTINES:
			case PLpgSQLParser.ROWS:
			case PLpgSQLParser.RULE:
			case PLpgSQLParser.SAVEPOINT:
			case PLpgSQLParser.SCHEMA:
			case PLpgSQLParser.SCHEMAS:
			case PLpgSQLParser.SCROLL:
			case PLpgSQLParser.SEARCH:
			case PLpgSQLParser.SECOND:
			case PLpgSQLParser.SECURITY:
			case PLpgSQLParser.SEQUENCE:
			case PLpgSQLParser.SEQUENCES:
			case PLpgSQLParser.SERIALIZABLE:
			case PLpgSQLParser.SERVER:
			case PLpgSQLParser.SESSION:
			case PLpgSQLParser.SET:
			case PLpgSQLParser.SETS:
			case PLpgSQLParser.SHARE:
			case PLpgSQLParser.SHOW:
			case PLpgSQLParser.SIMPLE:
			case PLpgSQLParser.SKIP_:
			case PLpgSQLParser.SNAPSHOT:
			case PLpgSQLParser.SQL:
			case PLpgSQLParser.STABLE:
			case PLpgSQLParser.STANDALONE:
			case PLpgSQLParser.START:
			case PLpgSQLParser.STATEMENT:
			case PLpgSQLParser.STATISTICS:
			case PLpgSQLParser.STDIN:
			case PLpgSQLParser.STDOUT:
			case PLpgSQLParser.STORAGE:
			case PLpgSQLParser.STORED:
			case PLpgSQLParser.STRICT:
			case PLpgSQLParser.STRIP:
			case PLpgSQLParser.SUBSCRIPTION:
			case PLpgSQLParser.SUPPORT:
			case PLpgSQLParser.SYSID:
			case PLpgSQLParser.SYSTEM:
			case PLpgSQLParser.TABLES:
			case PLpgSQLParser.TABLESPACE:
			case PLpgSQLParser.TEMP:
			case PLpgSQLParser.TEMPLATE:
			case PLpgSQLParser.TEMPORARY:
			case PLpgSQLParser.TEXT:
			case PLpgSQLParser.TIES:
			case PLpgSQLParser.TRANSACTION:
			case PLpgSQLParser.TRANSFORM:
			case PLpgSQLParser.TRIGGER:
			case PLpgSQLParser.TRUNCATE:
			case PLpgSQLParser.TRUSTED:
			case PLpgSQLParser.TYPE:
			case PLpgSQLParser.TYPES:
			case PLpgSQLParser.UNBOUNDED:
			case PLpgSQLParser.UNCOMMITTED:
			case PLpgSQLParser.UNENCRYPTED:
			case PLpgSQLParser.UNKNOWN:
			case PLpgSQLParser.UNLISTEN:
			case PLpgSQLParser.UNLOGGED:
			case PLpgSQLParser.UNTIL:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VACUUM:
			case PLpgSQLParser.VALID:
			case PLpgSQLParser.VALIDATE:
			case PLpgSQLParser.VALIDATOR:
			case PLpgSQLParser.VALUE:
			case PLpgSQLParser.VARYING:
			case PLpgSQLParser.VERSION:
			case PLpgSQLParser.VIEW:
			case PLpgSQLParser.VIEWS:
			case PLpgSQLParser.VOLATILE:
			case PLpgSQLParser.WHITESPACE:
			case PLpgSQLParser.WITHIN:
			case PLpgSQLParser.WITHOUT:
			case PLpgSQLParser.WORK:
			case PLpgSQLParser.WRAPPER:
			case PLpgSQLParser.WRITE:
			case PLpgSQLParser.XML:
			case PLpgSQLParser.YEAR:
			case PLpgSQLParser.YES:
			case PLpgSQLParser.ZONE:
			case PLpgSQLParser.BETWEEN:
			case PLpgSQLParser.BIGINT:
			case PLpgSQLParser.BIT:
			case PLpgSQLParser.BOOLEAN:
			case PLpgSQLParser.CHAR:
			case PLpgSQLParser.CHARACTER:
			case PLpgSQLParser.COALESCE:
			case PLpgSQLParser.DEC:
			case PLpgSQLParser.DECIMAL:
			case PLpgSQLParser.EXISTS:
			case PLpgSQLParser.EXTRACT:
			case PLpgSQLParser.FLOAT:
			case PLpgSQLParser.GREATEST:
			case PLpgSQLParser.GROUPING:
			case PLpgSQLParser.INOUT:
			case PLpgSQLParser.INT:
			case PLpgSQLParser.INTEGER:
			case PLpgSQLParser.INTERVAL:
			case PLpgSQLParser.LEAST:
			case PLpgSQLParser.NATIONAL:
			case PLpgSQLParser.NCHAR:
			case PLpgSQLParser.NONE:
			case PLpgSQLParser.NULLIF:
			case PLpgSQLParser.NUMERIC:
			case PLpgSQLParser.OUT:
			case PLpgSQLParser.OVERLAY:
			case PLpgSQLParser.POSITION:
			case PLpgSQLParser.PRECISION:
			case PLpgSQLParser.REAL:
			case PLpgSQLParser.ROW:
			case PLpgSQLParser.SETOF:
			case PLpgSQLParser.SMALLINT:
			case PLpgSQLParser.SUBSTRING:
			case PLpgSQLParser.TIME:
			case PLpgSQLParser.TIMESTAMP:
			case PLpgSQLParser.TREAT:
			case PLpgSQLParser.TRIM:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.VARCHAR:
			case PLpgSQLParser.XMLATTRIBUTES:
			case PLpgSQLParser.XMLCONCAT:
			case PLpgSQLParser.XMLELEMENT:
			case PLpgSQLParser.XMLEXISTS:
			case PLpgSQLParser.XMLFOREST:
			case PLpgSQLParser.XMLNAMESPACES:
			case PLpgSQLParser.XMLPARSE:
			case PLpgSQLParser.XMLPI:
			case PLpgSQLParser.XMLROOT:
			case PLpgSQLParser.XMLSERIALIZE:
			case PLpgSQLParser.XMLTABLE:
			case PLpgSQLParser.ALIGNMENT:
			case PLpgSQLParser.BASETYPE:
			case PLpgSQLParser.BUFFERS:
			case PLpgSQLParser.BYPASSRLS:
			case PLpgSQLParser.CANONICAL:
			case PLpgSQLParser.CATEGORY:
			case PLpgSQLParser.COLLATABLE:
			case PLpgSQLParser.COMBINEFUNC:
			case PLpgSQLParser.COMMUTATOR:
			case PLpgSQLParser.CONNECT:
			case PLpgSQLParser.COSTS:
			case PLpgSQLParser.CREATEDB:
			case PLpgSQLParser.CREATEROLE:
			case PLpgSQLParser.DESERIALFUNC:
			case PLpgSQLParser.DETERMINISTIC:
			case PLpgSQLParser.DISABLE_PAGE_SKIPPING:
			case PLpgSQLParser.ELEMENT:
			case PLpgSQLParser.EXTENDED:
			case PLpgSQLParser.FINALFUNC:
			case PLpgSQLParser.FINALFUNC_EXTRA:
			case PLpgSQLParser.FINALFUNC_MODIFY:
			case PLpgSQLParser.FORCE_NOT_NULL:
			case PLpgSQLParser.FORCE_NULL:
			case PLpgSQLParser.FORCE_QUOTE:
			case PLpgSQLParser.FORMAT:
			case PLpgSQLParser.GETTOKEN:
			case PLpgSQLParser.HASH:
			case PLpgSQLParser.HASHES:
			case PLpgSQLParser.HEADLINE:
			case PLpgSQLParser.HYPOTHETICAL:
			case PLpgSQLParser.INDEX_CLEANUP:
			case PLpgSQLParser.INIT:
			case PLpgSQLParser.INITCOND:
			case PLpgSQLParser.INTERNALLENGTH:
			case PLpgSQLParser.JSON:
			case PLpgSQLParser.LC_COLLATE:
			case PLpgSQLParser.LC_CTYPE:
			case PLpgSQLParser.LEFTARG:
			case PLpgSQLParser.LEXIZE:
			case PLpgSQLParser.LEXTYPES:
			case PLpgSQLParser.LIST:
			case PLpgSQLParser.LOCALE:
			case PLpgSQLParser.LOGIN:
			case PLpgSQLParser.MAIN:
			case PLpgSQLParser.MERGES:
			case PLpgSQLParser.MFINALFUNC:
			case PLpgSQLParser.MFINALFUNC_EXTRA:
			case PLpgSQLParser.MFINALFUNC_MODIFY:
			case PLpgSQLParser.MINITCOND:
			case PLpgSQLParser.MINVFUNC:
			case PLpgSQLParser.MODULUS:
			case PLpgSQLParser.MSFUNC:
			case PLpgSQLParser.MSSPACE:
			case PLpgSQLParser.MSTYPE:
			case PLpgSQLParser.NEGATOR:
			case PLpgSQLParser.NOBYPASSRLS:
			case PLpgSQLParser.NOCREATEDB:
			case PLpgSQLParser.NOCREATEROLE:
			case PLpgSQLParser.NOINHERIT:
			case PLpgSQLParser.NOLOGIN:
			case PLpgSQLParser.NOREPLICATION:
			case PLpgSQLParser.NOSUPERUSER:
			case PLpgSQLParser.OUTPUT:
			case PLpgSQLParser.PASSEDBYVALUE:
			case PLpgSQLParser.PATH:
			case PLpgSQLParser.PERMISSIVE:
			case PLpgSQLParser.PLAIN:
			case PLpgSQLParser.PREFERRED:
			case PLpgSQLParser.PROVIDER:
			case PLpgSQLParser.READ_ONLY:
			case PLpgSQLParser.READ_WRITE:
			case PLpgSQLParser.RECEIVE:
			case PLpgSQLParser.REMAINDER:
			case PLpgSQLParser.REPLICATION:
			case PLpgSQLParser.RESTRICTED:
			case PLpgSQLParser.RESTRICTIVE:
			case PLpgSQLParser.RIGHTARG:
			case PLpgSQLParser.SAFE:
			case PLpgSQLParser.SEND:
			case PLpgSQLParser.SERIALFUNC:
			case PLpgSQLParser.SETTINGS:
			case PLpgSQLParser.SFUNC:
			case PLpgSQLParser.SHAREABLE:
			case PLpgSQLParser.SKIP_LOCKED:
			case PLpgSQLParser.SORTOP:
			case PLpgSQLParser.SSPACE:
			case PLpgSQLParser.STYPE:
			case PLpgSQLParser.SUBTYPE_DIFF:
			case PLpgSQLParser.SUBTYPE_OPCLASS:
			case PLpgSQLParser.SUBTYPE:
			case PLpgSQLParser.SUMMARY:
			case PLpgSQLParser.SUPERUSER:
			case PLpgSQLParser.TIMING:
			case PLpgSQLParser.TYPMOD_IN:
			case PLpgSQLParser.TYPMOD_OUT:
			case PLpgSQLParser.UNSAFE:
			case PLpgSQLParser.USAGE:
			case PLpgSQLParser.VARIABLE:
			case PLpgSQLParser.YAML:
			case PLpgSQLParser.ALIAS:
			case PLpgSQLParser.ASSERT:
			case PLpgSQLParser.CONSTANT:
			case PLpgSQLParser.DATATYPE:
			case PLpgSQLParser.DEBUG:
			case PLpgSQLParser.DETAIL:
			case PLpgSQLParser.DIAGNOSTICS:
			case PLpgSQLParser.ELSEIF:
			case PLpgSQLParser.ELSIF:
			case PLpgSQLParser.ERRCODE:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.EXCEPTION:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.GET:
			case PLpgSQLParser.HINT:
			case PLpgSQLParser.INFO:
			case PLpgSQLParser.LOG:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.MESSAGE:
			case PLpgSQLParser.NOTICE:
			case PLpgSQLParser.OPEN:
			case PLpgSQLParser.PERFORM:
			case PLpgSQLParser.QUERY:
			case PLpgSQLParser.RAISE:
			case PLpgSQLParser.RECORD:
			case PLpgSQLParser.RETURN:
			case PLpgSQLParser.REVERSE:
			case PLpgSQLParser.ROWTYPE:
			case PLpgSQLParser.SLICE:
			case PLpgSQLParser.SQLSTATE:
			case PLpgSQLParser.STACKED:
			case PLpgSQLParser.WARNING:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.Identifier:
			case PLpgSQLParser.QuotedIdentifier:
				{
				this.state = 7262;
				this.schema_qualified_name();
				}
				break;
			case PLpgSQLParser.DOLLAR_NUMBER:
				{
				this.state = 7263;
				this.match(PLpgSQLParser.DOLLAR_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 7272;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.LEFT_BRACKET) {
				{
				{
				this.state = 7266;
				this.match(PLpgSQLParser.LEFT_BRACKET);
				this.state = 7267;
				this.vex(0);
				this.state = 7268;
				this.match(PLpgSQLParser.RIGHT_BRACKET);
				}
				}
				this.state = 7274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public diagnostic_option(): Diagnostic_optionContext {
		let _localctx: Diagnostic_optionContext = new Diagnostic_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, PLpgSQLParser.RULE_diagnostic_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7275;
			this.var();
			this.state = 7276;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.EQUAL || _la === PLpgSQLParser.COLON_EQUAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7277;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public perform_stmt(): Perform_stmtContext {
		let _localctx: Perform_stmtContext = new Perform_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, PLpgSQLParser.RULE_perform_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7294;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 977, this._ctx) ) {
			case 1:
				{
				this.state = 7279;
				this.set_qualifier();
				this.state = 7292;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 976, this._ctx) ) {
				case 1:
					{
					this.state = 7280;
					this.match(PLpgSQLParser.ON);
					this.state = 7281;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 7282;
					this.vex(0);
					this.state = 7287;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 7283;
						this.match(PLpgSQLParser.COMMA);
						this.state = 7284;
						this.vex(0);
						}
						}
						this.state = 7289;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7290;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			this.state = 7296;
			this.select_list();
			this.state = 7306;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.FROM) {
				{
				this.state = 7297;
				this.match(PLpgSQLParser.FROM);
				this.state = 7298;
				this.from_item(0);
				this.state = 7303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 7299;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7300;
					this.from_item(0);
					}
					}
					this.state = 7305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 7310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WHERE) {
				{
				this.state = 7308;
				this.match(PLpgSQLParser.WHERE);
				this.state = 7309;
				this.vex(0);
				}
			}

			this.state = 7313;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.GROUP) {
				{
				this.state = 7312;
				this.groupby_clause();
				}
			}

			this.state = 7317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.HAVING) {
				{
				this.state = 7315;
				this.match(PLpgSQLParser.HAVING);
				this.state = 7316;
				this.vex(0);
				}
			}

			this.state = 7333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.WINDOW) {
				{
				this.state = 7319;
				this.match(PLpgSQLParser.WINDOW);
				this.state = 7320;
				this.identifier();
				this.state = 7321;
				this.match(PLpgSQLParser.AS);
				this.state = 7322;
				this.window_definition();
				this.state = 7330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 7323;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7324;
					this.identifier();
					this.state = 7325;
					this.match(PLpgSQLParser.AS);
					this.state = 7326;
					this.window_definition();
					}
					}
					this.state = 7332;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 7340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.EXCEPT || _la === PLpgSQLParser.INTERSECT || _la === PLpgSQLParser.UNION) {
				{
				this.state = 7335;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.EXCEPT || _la === PLpgSQLParser.INTERSECT || _la === PLpgSQLParser.UNION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.ALL || _la === PLpgSQLParser.DISTINCT) {
					{
					this.state = 7336;
					this.set_qualifier();
					}
				}

				this.state = 7339;
				this.select_ops(0);
				}
			}

			this.state = 7345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PLpgSQLParser.FETCH - 398)) | (1 << (PLpgSQLParser.FOR - 398)) | (1 << (PLpgSQLParser.LIMIT - 398)) | (1 << (PLpgSQLParser.OFFSET - 398)) | (1 << (PLpgSQLParser.ORDER - 398)))) !== 0)) {
				{
				{
				this.state = 7342;
				this.after_ops();
				}
				}
				this.state = 7347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_stmt(): Assign_stmtContext {
		let _localctx: Assign_stmtContext = new Assign_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, PLpgSQLParser.RULE_assign_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7348;
			this.var();
			this.state = 7349;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.EQUAL || _la === PLpgSQLParser.COLON_EQUAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 988, this._ctx) ) {
			case 1:
				{
				this.state = 7350;
				this.select_stmt_no_parens();
				}
				break;

			case 2:
				{
				this.state = 7351;
				this.perform_stmt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_stmt(): Execute_stmtContext {
		let _localctx: Execute_stmtContext = new Execute_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, PLpgSQLParser.RULE_execute_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7354;
			this.match(PLpgSQLParser.EXECUTE);
			this.state = 7355;
			this.vex(0);
			this.state = 7357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.USING) {
				{
				this.state = 7356;
				this.using_vex();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_statement(): Control_statementContext {
		let _localctx: Control_statementContext = new Control_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, PLpgSQLParser.RULE_control_statement);
		try {
			this.state = 7365;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.RETURN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7359;
				this.return_stmt();
				}
				break;
			case PLpgSQLParser.CALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7360;
				this.match(PLpgSQLParser.CALL);
				this.state = 7361;
				this.function_call();
				}
				break;
			case PLpgSQLParser.IF:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7362;
				this.if_statement();
				}
				break;
			case PLpgSQLParser.CASE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7363;
				this.case_statement();
				}
				break;
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.FOR:
			case PLpgSQLParser.EXIT:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.LESS_LESS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7364;
				this.loop_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_statement(): Cursor_statementContext {
		let _localctx: Cursor_statementContext = new Cursor_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, PLpgSQLParser.RULE_cursor_statement);
		let _la: number;
		try {
			this.state = 7411;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 999, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7367;
				this.match(PLpgSQLParser.OPEN);
				this.state = 7368;
				this.var();
				this.state = 7373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.NO || _la === PLpgSQLParser.SCROLL) {
					{
					this.state = 7370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.NO) {
						{
						this.state = 7369;
						this.match(PLpgSQLParser.NO);
						}
					}

					this.state = 7372;
					this.match(PLpgSQLParser.SCROLL);
					}
				}

				this.state = 7375;
				this.match(PLpgSQLParser.FOR);
				this.state = 7376;
				this.plpgsql_query();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7378;
				this.match(PLpgSQLParser.OPEN);
				this.state = 7379;
				this.var();
				this.state = 7391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 7380;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 7381;
					this.option();
					this.state = 7386;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 7382;
						this.match(PLpgSQLParser.COMMA);
						this.state = 7383;
						this.option();
						}
						}
						this.state = 7388;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7389;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7393;
				this.match(PLpgSQLParser.FETCH);
				this.state = 7395;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 995, this._ctx) ) {
				case 1:
					{
					this.state = 7394;
					this.fetch_move_direction();
					}
					break;
				}
				this.state = 7398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.IN) {
					{
					this.state = 7397;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 7400;
				this.var();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7401;
				this.match(PLpgSQLParser.MOVE);
				this.state = 7403;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 997, this._ctx) ) {
				case 1:
					{
					this.state = 7402;
					this.fetch_move_direction();
					}
					break;
				}
				this.state = 7406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.IN) {
					{
					this.state = 7405;
					_la = this._input.LA(1);
					if (!(_la === PLpgSQLParser.FROM || _la === PLpgSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 7408;
				this.var();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7409;
				this.match(PLpgSQLParser.CLOSE);
				this.state = 7410;
				this.var();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option(): OptionContext {
		let _localctx: OptionContext = new OptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, PLpgSQLParser.RULE_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7416;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1000, this._ctx) ) {
			case 1:
				{
				this.state = 7413;
				this.identifier();
				this.state = 7414;
				this.match(PLpgSQLParser.COLON_EQUAL);
				}
				break;
			}
			this.state = 7418;
			this.vex(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_statement(): Transaction_statementContext {
		let _localctx: Transaction_statementContext = new Transaction_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, PLpgSQLParser.RULE_transaction_statement);
		let _la: number;
		try {
			this.state = 7429;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.COMMIT:
			case PLpgSQLParser.ROLLBACK:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7420;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.COMMIT || _la === PLpgSQLParser.ROLLBACK)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.AND) {
					{
					this.state = 7421;
					this.match(PLpgSQLParser.AND);
					this.state = 7423;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PLpgSQLParser.NO) {
						{
						this.state = 7422;
						this.match(PLpgSQLParser.NO);
						}
					}

					this.state = 7425;
					this.match(PLpgSQLParser.CHAIN);
					}
				}

				}
				break;
			case PLpgSQLParser.LOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7428;
				this.lock_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public message_statement(): Message_statementContext {
		let _localctx: Message_statementContext = new Message_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, PLpgSQLParser.RULE_message_statement);
		let _la: number;
		try {
			this.state = 7471;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1013, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7431;
				this.match(PLpgSQLParser.RAISE);
				this.state = 7433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 546)) & ~0x1F) === 0 && ((1 << (_la - 546)) & ((1 << (PLpgSQLParser.DEBUG - 546)) | (1 << (PLpgSQLParser.EXCEPTION - 546)) | (1 << (PLpgSQLParser.INFO - 546)) | (1 << (PLpgSQLParser.LOG - 546)) | (1 << (PLpgSQLParser.NOTICE - 546)) | (1 << (PLpgSQLParser.WARNING - 546)))) !== 0)) {
					{
					this.state = 7432;
					this.log_level();
					}
				}

				this.state = 7443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.Character_String_Literal || _la === PLpgSQLParser.BeginDollarStringConstant) {
					{
					this.state = 7435;
					this.character_string();
					this.state = 7440;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 7436;
						this.match(PLpgSQLParser.COMMA);
						this.state = 7437;
						this.vex(0);
						}
						}
						this.state = 7442;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 7446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.USING) {
					{
					this.state = 7445;
					this.raise_using();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7448;
				this.match(PLpgSQLParser.RAISE);
				this.state = 7450;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1008, this._ctx) ) {
				case 1:
					{
					this.state = 7449;
					this.log_level();
					}
					break;
				}
				this.state = 7452;
				this.identifier();
				this.state = 7454;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.USING) {
					{
					this.state = 7453;
					this.raise_using();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7456;
				this.match(PLpgSQLParser.RAISE);
				this.state = 7458;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 546)) & ~0x1F) === 0 && ((1 << (_la - 546)) & ((1 << (PLpgSQLParser.DEBUG - 546)) | (1 << (PLpgSQLParser.EXCEPTION - 546)) | (1 << (PLpgSQLParser.INFO - 546)) | (1 << (PLpgSQLParser.LOG - 546)) | (1 << (PLpgSQLParser.NOTICE - 546)) | (1 << (PLpgSQLParser.WARNING - 546)))) !== 0)) {
					{
					this.state = 7457;
					this.log_level();
					}
				}

				this.state = 7460;
				this.match(PLpgSQLParser.SQLSTATE);
				this.state = 7461;
				this.character_string();
				this.state = 7463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.USING) {
					{
					this.state = 7462;
					this.raise_using();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7465;
				this.match(PLpgSQLParser.ASSERT);
				this.state = 7466;
				this.vex(0);
				this.state = 7469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.COMMA) {
					{
					this.state = 7467;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7468;
					this.vex(0);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public log_level(): Log_levelContext {
		let _localctx: Log_levelContext = new Log_levelContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, PLpgSQLParser.RULE_log_level);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7473;
			_la = this._input.LA(1);
			if (!(((((_la - 546)) & ~0x1F) === 0 && ((1 << (_la - 546)) & ((1 << (PLpgSQLParser.DEBUG - 546)) | (1 << (PLpgSQLParser.EXCEPTION - 546)) | (1 << (PLpgSQLParser.INFO - 546)) | (1 << (PLpgSQLParser.LOG - 546)) | (1 << (PLpgSQLParser.NOTICE - 546)) | (1 << (PLpgSQLParser.WARNING - 546)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public raise_using(): Raise_usingContext {
		let _localctx: Raise_usingContext = new Raise_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, PLpgSQLParser.RULE_raise_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7475;
			this.match(PLpgSQLParser.USING);
			this.state = 7476;
			this.raise_param();
			this.state = 7477;
			this.match(PLpgSQLParser.EQUAL);
			this.state = 7478;
			this.vex(0);
			this.state = 7486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 7479;
				this.match(PLpgSQLParser.COMMA);
				this.state = 7480;
				this.raise_param();
				this.state = 7481;
				this.match(PLpgSQLParser.EQUAL);
				this.state = 7482;
				this.vex(0);
				}
				}
				this.state = 7488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public raise_param(): Raise_paramContext {
		let _localctx: Raise_paramContext = new Raise_paramContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, PLpgSQLParser.RULE_raise_param);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7489;
			_la = this._input.LA(1);
			if (!(_la === PLpgSQLParser.SCHEMA || _la === PLpgSQLParser.COLUMN || _la === PLpgSQLParser.CONSTRAINT || _la === PLpgSQLParser.TABLE || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public return_stmt(): Return_stmtContext {
		let _localctx: Return_stmtContext = new Return_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, PLpgSQLParser.RULE_return_stmt);
		let _la: number;
		try {
			this.state = 7501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1016, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7491;
				this.match(PLpgSQLParser.RETURN);
				this.state = 7493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.DISTINCT - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
					{
					this.state = 7492;
					this.perform_stmt();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7495;
				this.match(PLpgSQLParser.RETURN);
				this.state = 7496;
				this.match(PLpgSQLParser.NEXT);
				this.state = 7497;
				this.vex(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7498;
				this.match(PLpgSQLParser.RETURN);
				this.state = 7499;
				this.match(PLpgSQLParser.QUERY);
				this.state = 7500;
				this.plpgsql_query();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loop_statement(): Loop_statementContext {
		let _localctx: Loop_statementContext = new Loop_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, PLpgSQLParser.RULE_loop_statement);
		let _la: number;
		try {
			this.state = 7524;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.FOR:
			case PLpgSQLParser.FOREACH:
			case PLpgSQLParser.LOOP:
			case PLpgSQLParser.WHILE:
			case PLpgSQLParser.LESS_LESS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LESS_LESS) {
					{
					this.state = 7503;
					this.start_label();
					}
				}

				this.state = 7507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.FOR || _la === PLpgSQLParser.FOREACH || _la === PLpgSQLParser.WHILE) {
					{
					this.state = 7506;
					this.loop_start();
					}
				}

				this.state = 7509;
				this.match(PLpgSQLParser.LOOP);
				this.state = 7510;
				this.function_statements();
				this.state = 7511;
				this.match(PLpgSQLParser.END);
				this.state = 7512;
				this.match(PLpgSQLParser.LOOP);
				this.state = 7514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
					{
					this.state = 7513;
					this.identifier();
					}
				}

				}
				break;
			case PLpgSQLParser.CONTINUE:
			case PLpgSQLParser.EXIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7516;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.CONTINUE || _la === PLpgSQLParser.EXIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7518;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (PLpgSQLParser.ALIGNMENT - 443)) | (1 << (PLpgSQLParser.BASETYPE - 443)) | (1 << (PLpgSQLParser.BUFFERS - 443)) | (1 << (PLpgSQLParser.BYPASSRLS - 443)) | (1 << (PLpgSQLParser.CANONICAL - 443)) | (1 << (PLpgSQLParser.CATEGORY - 443)) | (1 << (PLpgSQLParser.COLLATABLE - 443)) | (1 << (PLpgSQLParser.COMBINEFUNC - 443)) | (1 << (PLpgSQLParser.COMMUTATOR - 443)) | (1 << (PLpgSQLParser.CONNECT - 443)) | (1 << (PLpgSQLParser.COSTS - 443)) | (1 << (PLpgSQLParser.CREATEDB - 443)) | (1 << (PLpgSQLParser.CREATEROLE - 443)) | (1 << (PLpgSQLParser.DESERIALFUNC - 443)) | (1 << (PLpgSQLParser.DETERMINISTIC - 443)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 443)) | (1 << (PLpgSQLParser.ELEMENT - 443)) | (1 << (PLpgSQLParser.EXTENDED - 443)) | (1 << (PLpgSQLParser.FINALFUNC - 443)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 443)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 443)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_NULL - 443)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 443)) | (1 << (PLpgSQLParser.FORMAT - 443)) | (1 << (PLpgSQLParser.GETTOKEN - 443)) | (1 << (PLpgSQLParser.HASH - 443)) | (1 << (PLpgSQLParser.HASHES - 443)) | (1 << (PLpgSQLParser.HEADLINE - 443)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 443)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 443)) | (1 << (PLpgSQLParser.INIT - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (PLpgSQLParser.INITCOND - 475)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 475)) | (1 << (PLpgSQLParser.JSON - 475)) | (1 << (PLpgSQLParser.LC_COLLATE - 475)) | (1 << (PLpgSQLParser.LC_CTYPE - 475)) | (1 << (PLpgSQLParser.LEFTARG - 475)) | (1 << (PLpgSQLParser.LEXIZE - 475)) | (1 << (PLpgSQLParser.LEXTYPES - 475)) | (1 << (PLpgSQLParser.LIST - 475)) | (1 << (PLpgSQLParser.LOCALE - 475)) | (1 << (PLpgSQLParser.LOGIN - 475)) | (1 << (PLpgSQLParser.MAIN - 475)) | (1 << (PLpgSQLParser.MERGES - 475)) | (1 << (PLpgSQLParser.MFINALFUNC - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 475)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 475)) | (1 << (PLpgSQLParser.MINITCOND - 475)) | (1 << (PLpgSQLParser.MINVFUNC - 475)) | (1 << (PLpgSQLParser.MODULUS - 475)) | (1 << (PLpgSQLParser.MSFUNC - 475)) | (1 << (PLpgSQLParser.MSSPACE - 475)) | (1 << (PLpgSQLParser.MSTYPE - 475)) | (1 << (PLpgSQLParser.NEGATOR - 475)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 475)) | (1 << (PLpgSQLParser.NOCREATEDB - 475)) | (1 << (PLpgSQLParser.NOCREATEROLE - 475)) | (1 << (PLpgSQLParser.NOINHERIT - 475)) | (1 << (PLpgSQLParser.NOLOGIN - 475)) | (1 << (PLpgSQLParser.NOREPLICATION - 475)) | (1 << (PLpgSQLParser.NOSUPERUSER - 475)) | (1 << (PLpgSQLParser.OUTPUT - 475)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (PLpgSQLParser.PATH - 507)) | (1 << (PLpgSQLParser.PERMISSIVE - 507)) | (1 << (PLpgSQLParser.PLAIN - 507)) | (1 << (PLpgSQLParser.PREFERRED - 507)) | (1 << (PLpgSQLParser.PROVIDER - 507)) | (1 << (PLpgSQLParser.READ_ONLY - 507)) | (1 << (PLpgSQLParser.READ_WRITE - 507)) | (1 << (PLpgSQLParser.RECEIVE - 507)) | (1 << (PLpgSQLParser.REMAINDER - 507)) | (1 << (PLpgSQLParser.REPLICATION - 507)) | (1 << (PLpgSQLParser.RESTRICTED - 507)) | (1 << (PLpgSQLParser.RESTRICTIVE - 507)) | (1 << (PLpgSQLParser.RIGHTARG - 507)) | (1 << (PLpgSQLParser.SAFE - 507)) | (1 << (PLpgSQLParser.SEND - 507)) | (1 << (PLpgSQLParser.SERIALFUNC - 507)) | (1 << (PLpgSQLParser.SETTINGS - 507)) | (1 << (PLpgSQLParser.SFUNC - 507)) | (1 << (PLpgSQLParser.SHAREABLE - 507)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 507)) | (1 << (PLpgSQLParser.SORTOP - 507)) | (1 << (PLpgSQLParser.SSPACE - 507)) | (1 << (PLpgSQLParser.STYPE - 507)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 507)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 507)) | (1 << (PLpgSQLParser.SUBTYPE - 507)) | (1 << (PLpgSQLParser.SUMMARY - 507)) | (1 << (PLpgSQLParser.SUPERUSER - 507)) | (1 << (PLpgSQLParser.TIMING - 507)) | (1 << (PLpgSQLParser.TYPMOD_IN - 507)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 507)) | (1 << (PLpgSQLParser.UNSAFE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (PLpgSQLParser.USAGE - 539)) | (1 << (PLpgSQLParser.VARIABLE - 539)) | (1 << (PLpgSQLParser.YAML - 539)) | (1 << (PLpgSQLParser.ALIAS - 539)) | (1 << (PLpgSQLParser.ASSERT - 539)) | (1 << (PLpgSQLParser.CONSTANT - 539)) | (1 << (PLpgSQLParser.DATATYPE - 539)) | (1 << (PLpgSQLParser.DEBUG - 539)) | (1 << (PLpgSQLParser.DETAIL - 539)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 539)) | (1 << (PLpgSQLParser.ELSEIF - 539)) | (1 << (PLpgSQLParser.ELSIF - 539)) | (1 << (PLpgSQLParser.ERRCODE - 539)) | (1 << (PLpgSQLParser.EXIT - 539)) | (1 << (PLpgSQLParser.EXCEPTION - 539)) | (1 << (PLpgSQLParser.FOREACH - 539)) | (1 << (PLpgSQLParser.GET - 539)) | (1 << (PLpgSQLParser.HINT - 539)) | (1 << (PLpgSQLParser.INFO - 539)) | (1 << (PLpgSQLParser.LOG - 539)) | (1 << (PLpgSQLParser.LOOP - 539)) | (1 << (PLpgSQLParser.MESSAGE - 539)) | (1 << (PLpgSQLParser.NOTICE - 539)) | (1 << (PLpgSQLParser.OPEN - 539)) | (1 << (PLpgSQLParser.PERFORM - 539)) | (1 << (PLpgSQLParser.QUERY - 539)) | (1 << (PLpgSQLParser.RAISE - 539)) | (1 << (PLpgSQLParser.RECORD - 539)) | (1 << (PLpgSQLParser.RETURN - 539)) | (1 << (PLpgSQLParser.REVERSE - 539)) | (1 << (PLpgSQLParser.ROWTYPE - 539)) | (1 << (PLpgSQLParser.SLICE - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (PLpgSQLParser.SQLSTATE - 571)) | (1 << (PLpgSQLParser.STACKED - 571)) | (1 << (PLpgSQLParser.WARNING - 571)) | (1 << (PLpgSQLParser.WHILE - 571)))) !== 0) || _la === PLpgSQLParser.Identifier || _la === PLpgSQLParser.QuotedIdentifier) {
					{
					this.state = 7517;
					this.identifier();
					}
				}

				this.state = 7522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.WHEN) {
					{
					this.state = 7520;
					this.match(PLpgSQLParser.WHEN);
					this.state = 7521;
					this.vex(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loop_start(): Loop_startContext {
		let _localctx: Loop_startContext = new Loop_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, PLpgSQLParser.RULE_loop_start);
		let _la: number;
		try {
			this.state = 7573;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1028, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7526;
				this.match(PLpgSQLParser.WHILE);
				this.state = 7527;
				this.vex(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7528;
				this.match(PLpgSQLParser.FOR);
				this.state = 7529;
				_localctx._alias = this.identifier();
				this.state = 7530;
				this.match(PLpgSQLParser.IN);
				this.state = 7532;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1023, this._ctx) ) {
				case 1:
					{
					this.state = 7531;
					this.match(PLpgSQLParser.REVERSE);
					}
					break;
				}
				this.state = 7534;
				this.vex(0);
				this.state = 7535;
				this.match(PLpgSQLParser.DOUBLE_DOT);
				this.state = 7536;
				this.vex(0);
				this.state = 7539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.BY) {
					{
					this.state = 7537;
					this.match(PLpgSQLParser.BY);
					this.state = 7538;
					this.vex(0);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7541;
				this.match(PLpgSQLParser.FOR);
				this.state = 7542;
				this.identifier_list();
				this.state = 7543;
				this.match(PLpgSQLParser.IN);
				this.state = 7544;
				this.plpgsql_query();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7546;
				this.match(PLpgSQLParser.FOR);
				this.state = 7547;
				_localctx._cursor = this.identifier();
				this.state = 7548;
				this.match(PLpgSQLParser.IN);
				this.state = 7549;
				this.identifier();
				this.state = 7561;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.LEFT_PAREN) {
					{
					this.state = 7550;
					this.match(PLpgSQLParser.LEFT_PAREN);
					this.state = 7551;
					this.option();
					this.state = 7556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PLpgSQLParser.COMMA) {
						{
						{
						this.state = 7552;
						this.match(PLpgSQLParser.COMMA);
						this.state = 7553;
						this.option();
						}
						}
						this.state = 7558;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7559;
					this.match(PLpgSQLParser.RIGHT_PAREN);
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7563;
				this.match(PLpgSQLParser.FOREACH);
				this.state = 7564;
				this.identifier_list();
				this.state = 7567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PLpgSQLParser.SLICE) {
					{
					this.state = 7565;
					this.match(PLpgSQLParser.SLICE);
					this.state = 7566;
					this.match(PLpgSQLParser.NUMBER_LITERAL);
					}
				}

				this.state = 7569;
				this.match(PLpgSQLParser.IN);
				this.state = 7570;
				this.match(PLpgSQLParser.ARRAY);
				this.state = 7571;
				this.vex(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_vex(): Using_vexContext {
		let _localctx: Using_vexContext = new Using_vexContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, PLpgSQLParser.RULE_using_vex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7575;
			this.match(PLpgSQLParser.USING);
			this.state = 7576;
			this.vex(0);
			this.state = 7581;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.COMMA) {
				{
				{
				this.state = 7577;
				this.match(PLpgSQLParser.COMMA);
				this.state = 7578;
				this.vex(0);
				}
				}
				this.state = 7583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_statement(): If_statementContext {
		let _localctx: If_statementContext = new If_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, PLpgSQLParser.RULE_if_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7584;
			this.match(PLpgSQLParser.IF);
			this.state = 7585;
			this.vex(0);
			this.state = 7586;
			this.match(PLpgSQLParser.THEN);
			this.state = 7587;
			this.function_statements();
			this.state = 7595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PLpgSQLParser.ELSEIF || _la === PLpgSQLParser.ELSIF) {
				{
				{
				this.state = 7588;
				_la = this._input.LA(1);
				if (!(_la === PLpgSQLParser.ELSEIF || _la === PLpgSQLParser.ELSIF)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7589;
				this.vex(0);
				this.state = 7590;
				this.match(PLpgSQLParser.THEN);
				this.state = 7591;
				this.function_statements();
				}
				}
				this.state = 7597;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7600;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ELSE) {
				{
				this.state = 7598;
				this.match(PLpgSQLParser.ELSE);
				this.state = 7599;
				this.function_statements();
				}
			}

			this.state = 7602;
			this.match(PLpgSQLParser.END);
			this.state = 7603;
			this.match(PLpgSQLParser.IF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_statement(): Case_statementContext {
		let _localctx: Case_statementContext = new Case_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, PLpgSQLParser.RULE_case_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7605;
			this.match(PLpgSQLParser.CASE);
			this.state = 7607;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PLpgSQLParser.ABORT) | (1 << PLpgSQLParser.ABSOLUTE) | (1 << PLpgSQLParser.ACCESS) | (1 << PLpgSQLParser.ACTION) | (1 << PLpgSQLParser.ADD) | (1 << PLpgSQLParser.ADMIN) | (1 << PLpgSQLParser.AFTER) | (1 << PLpgSQLParser.AGGREGATE) | (1 << PLpgSQLParser.ALSO) | (1 << PLpgSQLParser.ALTER) | (1 << PLpgSQLParser.ALWAYS) | (1 << PLpgSQLParser.ASSERTION) | (1 << PLpgSQLParser.ASSIGNMENT) | (1 << PLpgSQLParser.AT) | (1 << PLpgSQLParser.ATTACH) | (1 << PLpgSQLParser.ATTRIBUTE) | (1 << PLpgSQLParser.BACKWARD) | (1 << PLpgSQLParser.BEFORE) | (1 << PLpgSQLParser.BEGIN) | (1 << PLpgSQLParser.BY) | (1 << PLpgSQLParser.CACHE) | (1 << PLpgSQLParser.CALL) | (1 << PLpgSQLParser.CALLED) | (1 << PLpgSQLParser.CASCADE) | (1 << PLpgSQLParser.CASCADED) | (1 << PLpgSQLParser.CATALOG) | (1 << PLpgSQLParser.CHAIN) | (1 << PLpgSQLParser.CHARACTERISTICS) | (1 << PLpgSQLParser.CHECKPOINT) | (1 << PLpgSQLParser.CLASS) | (1 << PLpgSQLParser.CLOSE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PLpgSQLParser.CLUSTER - 32)) | (1 << (PLpgSQLParser.COLUMNS - 32)) | (1 << (PLpgSQLParser.COMMENT - 32)) | (1 << (PLpgSQLParser.COMMENTS - 32)) | (1 << (PLpgSQLParser.COMMIT - 32)) | (1 << (PLpgSQLParser.COMMITTED - 32)) | (1 << (PLpgSQLParser.CONFIGURATION - 32)) | (1 << (PLpgSQLParser.CONFLICT - 32)) | (1 << (PLpgSQLParser.CONNECTION - 32)) | (1 << (PLpgSQLParser.CONSTRAINTS - 32)) | (1 << (PLpgSQLParser.CONTENT - 32)) | (1 << (PLpgSQLParser.CONTINUE - 32)) | (1 << (PLpgSQLParser.CONVERSION - 32)) | (1 << (PLpgSQLParser.COPY - 32)) | (1 << (PLpgSQLParser.COST - 32)) | (1 << (PLpgSQLParser.CSV - 32)) | (1 << (PLpgSQLParser.CUBE - 32)) | (1 << (PLpgSQLParser.CURRENT - 32)) | (1 << (PLpgSQLParser.CURSOR - 32)) | (1 << (PLpgSQLParser.CYCLE - 32)) | (1 << (PLpgSQLParser.DATA - 32)) | (1 << (PLpgSQLParser.DATABASE - 32)) | (1 << (PLpgSQLParser.DAY - 32)) | (1 << (PLpgSQLParser.DEALLOCATE - 32)) | (1 << (PLpgSQLParser.DECLARE - 32)) | (1 << (PLpgSQLParser.DEFAULTS - 32)) | (1 << (PLpgSQLParser.DEFERRED - 32)) | (1 << (PLpgSQLParser.DEFINER - 32)) | (1 << (PLpgSQLParser.DELETE - 32)) | (1 << (PLpgSQLParser.DELIMITER - 32)) | (1 << (PLpgSQLParser.DELIMITERS - 32)) | (1 << (PLpgSQLParser.DEPENDS - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PLpgSQLParser.DETACH - 64)) | (1 << (PLpgSQLParser.DICTIONARY - 64)) | (1 << (PLpgSQLParser.DISABLE - 64)) | (1 << (PLpgSQLParser.DISCARD - 64)) | (1 << (PLpgSQLParser.DOCUMENT - 64)) | (1 << (PLpgSQLParser.DOMAIN - 64)) | (1 << (PLpgSQLParser.DOUBLE - 64)) | (1 << (PLpgSQLParser.DROP - 64)) | (1 << (PLpgSQLParser.EACH - 64)) | (1 << (PLpgSQLParser.ENABLE - 64)) | (1 << (PLpgSQLParser.ENCODING - 64)) | (1 << (PLpgSQLParser.ENCRYPTED - 64)) | (1 << (PLpgSQLParser.ENUM - 64)) | (1 << (PLpgSQLParser.ESCAPE - 64)) | (1 << (PLpgSQLParser.EVENT - 64)) | (1 << (PLpgSQLParser.EXCLUDE - 64)) | (1 << (PLpgSQLParser.EXCLUDING - 64)) | (1 << (PLpgSQLParser.EXCLUSIVE - 64)) | (1 << (PLpgSQLParser.EXECUTE - 64)) | (1 << (PLpgSQLParser.EXPLAIN - 64)) | (1 << (PLpgSQLParser.EXTENSION - 64)) | (1 << (PLpgSQLParser.EXTERNAL - 64)) | (1 << (PLpgSQLParser.FAMILY - 64)) | (1 << (PLpgSQLParser.FILTER - 64)) | (1 << (PLpgSQLParser.FIRST - 64)) | (1 << (PLpgSQLParser.FOLLOWING - 64)) | (1 << (PLpgSQLParser.FORCE - 64)) | (1 << (PLpgSQLParser.FORWARD - 64)) | (1 << (PLpgSQLParser.FUNCTION - 64)) | (1 << (PLpgSQLParser.FUNCTIONS - 64)) | (1 << (PLpgSQLParser.GENERATED - 64)) | (1 << (PLpgSQLParser.GLOBAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PLpgSQLParser.GRANTED - 96)) | (1 << (PLpgSQLParser.GROUPS - 96)) | (1 << (PLpgSQLParser.HANDLER - 96)) | (1 << (PLpgSQLParser.HEADER - 96)) | (1 << (PLpgSQLParser.HOLD - 96)) | (1 << (PLpgSQLParser.HOUR - 96)) | (1 << (PLpgSQLParser.IDENTITY - 96)) | (1 << (PLpgSQLParser.IF - 96)) | (1 << (PLpgSQLParser.IMMEDIATE - 96)) | (1 << (PLpgSQLParser.IMMUTABLE - 96)) | (1 << (PLpgSQLParser.IMPLICIT - 96)) | (1 << (PLpgSQLParser.IMPORT - 96)) | (1 << (PLpgSQLParser.INCLUDE - 96)) | (1 << (PLpgSQLParser.INCLUDING - 96)) | (1 << (PLpgSQLParser.INCREMENT - 96)) | (1 << (PLpgSQLParser.INDEX - 96)) | (1 << (PLpgSQLParser.INDEXES - 96)) | (1 << (PLpgSQLParser.INHERIT - 96)) | (1 << (PLpgSQLParser.INHERITS - 96)) | (1 << (PLpgSQLParser.INLINE - 96)) | (1 << (PLpgSQLParser.INPUT - 96)) | (1 << (PLpgSQLParser.INSENSITIVE - 96)) | (1 << (PLpgSQLParser.INSERT - 96)) | (1 << (PLpgSQLParser.INSTEAD - 96)) | (1 << (PLpgSQLParser.INVOKER - 96)) | (1 << (PLpgSQLParser.ISOLATION - 96)) | (1 << (PLpgSQLParser.KEY - 96)) | (1 << (PLpgSQLParser.LABEL - 96)) | (1 << (PLpgSQLParser.LANGUAGE - 96)) | (1 << (PLpgSQLParser.LARGE - 96)) | (1 << (PLpgSQLParser.LAST - 96)) | (1 << (PLpgSQLParser.LEAKPROOF - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PLpgSQLParser.LEVEL - 128)) | (1 << (PLpgSQLParser.LISTEN - 128)) | (1 << (PLpgSQLParser.LOAD - 128)) | (1 << (PLpgSQLParser.LOCAL - 128)) | (1 << (PLpgSQLParser.LOCATION - 128)) | (1 << (PLpgSQLParser.LOCK - 128)) | (1 << (PLpgSQLParser.LOCKED - 128)) | (1 << (PLpgSQLParser.LOGGED - 128)) | (1 << (PLpgSQLParser.MAPPING - 128)) | (1 << (PLpgSQLParser.MATCH - 128)) | (1 << (PLpgSQLParser.MATERIALIZED - 128)) | (1 << (PLpgSQLParser.MAXVALUE - 128)) | (1 << (PLpgSQLParser.METHOD - 128)) | (1 << (PLpgSQLParser.MINUTE - 128)) | (1 << (PLpgSQLParser.MINVALUE - 128)) | (1 << (PLpgSQLParser.MODE - 128)) | (1 << (PLpgSQLParser.MONTH - 128)) | (1 << (PLpgSQLParser.MOVE - 128)) | (1 << (PLpgSQLParser.NAME - 128)) | (1 << (PLpgSQLParser.NAMES - 128)) | (1 << (PLpgSQLParser.NEW - 128)) | (1 << (PLpgSQLParser.NEXT - 128)) | (1 << (PLpgSQLParser.NO - 128)) | (1 << (PLpgSQLParser.NOTHING - 128)) | (1 << (PLpgSQLParser.NOTIFY - 128)) | (1 << (PLpgSQLParser.NOWAIT - 128)) | (1 << (PLpgSQLParser.NULLS - 128)) | (1 << (PLpgSQLParser.OBJECT - 128)) | (1 << (PLpgSQLParser.OF - 128)) | (1 << (PLpgSQLParser.OFF - 128)) | (1 << (PLpgSQLParser.OIDS - 128)) | (1 << (PLpgSQLParser.OLD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PLpgSQLParser.OPERATOR - 160)) | (1 << (PLpgSQLParser.OPTION - 160)) | (1 << (PLpgSQLParser.OPTIONS - 160)) | (1 << (PLpgSQLParser.ORDINALITY - 160)) | (1 << (PLpgSQLParser.OTHERS - 160)) | (1 << (PLpgSQLParser.OVER - 160)) | (1 << (PLpgSQLParser.OVERRIDING - 160)) | (1 << (PLpgSQLParser.OWNED - 160)) | (1 << (PLpgSQLParser.OWNER - 160)) | (1 << (PLpgSQLParser.PARALLEL - 160)) | (1 << (PLpgSQLParser.PARSER - 160)) | (1 << (PLpgSQLParser.PARTIAL - 160)) | (1 << (PLpgSQLParser.PARTITION - 160)) | (1 << (PLpgSQLParser.PASSING - 160)) | (1 << (PLpgSQLParser.PASSWORD - 160)) | (1 << (PLpgSQLParser.PLANS - 160)) | (1 << (PLpgSQLParser.POLICY - 160)) | (1 << (PLpgSQLParser.PRECEDING - 160)) | (1 << (PLpgSQLParser.PREPARE - 160)) | (1 << (PLpgSQLParser.PREPARED - 160)) | (1 << (PLpgSQLParser.PRESERVE - 160)) | (1 << (PLpgSQLParser.PRIOR - 160)) | (1 << (PLpgSQLParser.PRIVILEGES - 160)) | (1 << (PLpgSQLParser.PROCEDURAL - 160)) | (1 << (PLpgSQLParser.PROCEDURE - 160)) | (1 << (PLpgSQLParser.PROCEDURES - 160)) | (1 << (PLpgSQLParser.PROGRAM - 160)) | (1 << (PLpgSQLParser.PUBLICATION - 160)) | (1 << (PLpgSQLParser.QUOTE - 160)) | (1 << (PLpgSQLParser.RANGE - 160)) | (1 << (PLpgSQLParser.READ - 160)) | (1 << (PLpgSQLParser.REASSIGN - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PLpgSQLParser.RECHECK - 192)) | (1 << (PLpgSQLParser.RECURSIVE - 192)) | (1 << (PLpgSQLParser.REF - 192)) | (1 << (PLpgSQLParser.REFERENCING - 192)) | (1 << (PLpgSQLParser.REFRESH - 192)) | (1 << (PLpgSQLParser.REINDEX - 192)) | (1 << (PLpgSQLParser.RELATIVE - 192)) | (1 << (PLpgSQLParser.RELEASE - 192)) | (1 << (PLpgSQLParser.RENAME - 192)) | (1 << (PLpgSQLParser.REPEATABLE - 192)) | (1 << (PLpgSQLParser.REPLACE - 192)) | (1 << (PLpgSQLParser.REPLICA - 192)) | (1 << (PLpgSQLParser.RESET - 192)) | (1 << (PLpgSQLParser.RESTART - 192)) | (1 << (PLpgSQLParser.RESTRICT - 192)) | (1 << (PLpgSQLParser.RETURNS - 192)) | (1 << (PLpgSQLParser.REVOKE - 192)) | (1 << (PLpgSQLParser.ROLE - 192)) | (1 << (PLpgSQLParser.ROLLBACK - 192)) | (1 << (PLpgSQLParser.ROLLUP - 192)) | (1 << (PLpgSQLParser.ROUTINE - 192)) | (1 << (PLpgSQLParser.ROUTINES - 192)) | (1 << (PLpgSQLParser.ROWS - 192)) | (1 << (PLpgSQLParser.RULE - 192)) | (1 << (PLpgSQLParser.SAVEPOINT - 192)) | (1 << (PLpgSQLParser.SCHEMA - 192)) | (1 << (PLpgSQLParser.SCHEMAS - 192)) | (1 << (PLpgSQLParser.SCROLL - 192)) | (1 << (PLpgSQLParser.SEARCH - 192)) | (1 << (PLpgSQLParser.SECOND - 192)) | (1 << (PLpgSQLParser.SECURITY - 192)) | (1 << (PLpgSQLParser.SEQUENCE - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PLpgSQLParser.SEQUENCES - 224)) | (1 << (PLpgSQLParser.SERIALIZABLE - 224)) | (1 << (PLpgSQLParser.SERVER - 224)) | (1 << (PLpgSQLParser.SESSION - 224)) | (1 << (PLpgSQLParser.SET - 224)) | (1 << (PLpgSQLParser.SETS - 224)) | (1 << (PLpgSQLParser.SHARE - 224)) | (1 << (PLpgSQLParser.SHOW - 224)) | (1 << (PLpgSQLParser.SIMPLE - 224)) | (1 << (PLpgSQLParser.SKIP_ - 224)) | (1 << (PLpgSQLParser.SNAPSHOT - 224)) | (1 << (PLpgSQLParser.SQL - 224)) | (1 << (PLpgSQLParser.STABLE - 224)) | (1 << (PLpgSQLParser.STANDALONE - 224)) | (1 << (PLpgSQLParser.START - 224)) | (1 << (PLpgSQLParser.STATEMENT - 224)) | (1 << (PLpgSQLParser.STATISTICS - 224)) | (1 << (PLpgSQLParser.STDIN - 224)) | (1 << (PLpgSQLParser.STDOUT - 224)) | (1 << (PLpgSQLParser.STORAGE - 224)) | (1 << (PLpgSQLParser.STORED - 224)) | (1 << (PLpgSQLParser.STRICT - 224)) | (1 << (PLpgSQLParser.STRIP - 224)) | (1 << (PLpgSQLParser.SUBSCRIPTION - 224)) | (1 << (PLpgSQLParser.SUPPORT - 224)) | (1 << (PLpgSQLParser.SYSID - 224)) | (1 << (PLpgSQLParser.SYSTEM - 224)) | (1 << (PLpgSQLParser.TABLES - 224)) | (1 << (PLpgSQLParser.TABLESPACE - 224)) | (1 << (PLpgSQLParser.TEMP - 224)) | (1 << (PLpgSQLParser.TEMPLATE - 224)) | (1 << (PLpgSQLParser.TEMPORARY - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PLpgSQLParser.TEXT - 256)) | (1 << (PLpgSQLParser.TIES - 256)) | (1 << (PLpgSQLParser.TRANSACTION - 256)) | (1 << (PLpgSQLParser.TRANSFORM - 256)) | (1 << (PLpgSQLParser.TRIGGER - 256)) | (1 << (PLpgSQLParser.TRUNCATE - 256)) | (1 << (PLpgSQLParser.TRUSTED - 256)) | (1 << (PLpgSQLParser.TYPE - 256)) | (1 << (PLpgSQLParser.TYPES - 256)) | (1 << (PLpgSQLParser.UNBOUNDED - 256)) | (1 << (PLpgSQLParser.UNCOMMITTED - 256)) | (1 << (PLpgSQLParser.UNENCRYPTED - 256)) | (1 << (PLpgSQLParser.UNKNOWN - 256)) | (1 << (PLpgSQLParser.UNLISTEN - 256)) | (1 << (PLpgSQLParser.UNLOGGED - 256)) | (1 << (PLpgSQLParser.UNTIL - 256)) | (1 << (PLpgSQLParser.UPDATE - 256)) | (1 << (PLpgSQLParser.VACUUM - 256)) | (1 << (PLpgSQLParser.VALID - 256)) | (1 << (PLpgSQLParser.VALIDATE - 256)) | (1 << (PLpgSQLParser.VALIDATOR - 256)) | (1 << (PLpgSQLParser.VALUE - 256)) | (1 << (PLpgSQLParser.VARYING - 256)) | (1 << (PLpgSQLParser.VERSION - 256)) | (1 << (PLpgSQLParser.VIEW - 256)) | (1 << (PLpgSQLParser.VIEWS - 256)) | (1 << (PLpgSQLParser.VOLATILE - 256)) | (1 << (PLpgSQLParser.WHITESPACE - 256)) | (1 << (PLpgSQLParser.WITHIN - 256)) | (1 << (PLpgSQLParser.WITHOUT - 256)) | (1 << (PLpgSQLParser.WORK - 256)) | (1 << (PLpgSQLParser.WRAPPER - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PLpgSQLParser.WRITE - 288)) | (1 << (PLpgSQLParser.XML - 288)) | (1 << (PLpgSQLParser.YEAR - 288)) | (1 << (PLpgSQLParser.YES - 288)) | (1 << (PLpgSQLParser.ZONE - 288)) | (1 << (PLpgSQLParser.BETWEEN - 288)) | (1 << (PLpgSQLParser.BIGINT - 288)) | (1 << (PLpgSQLParser.BIT - 288)) | (1 << (PLpgSQLParser.BOOLEAN - 288)) | (1 << (PLpgSQLParser.CHAR - 288)) | (1 << (PLpgSQLParser.CHARACTER - 288)) | (1 << (PLpgSQLParser.COALESCE - 288)) | (1 << (PLpgSQLParser.DEC - 288)) | (1 << (PLpgSQLParser.DECIMAL - 288)) | (1 << (PLpgSQLParser.EXISTS - 288)) | (1 << (PLpgSQLParser.EXTRACT - 288)) | (1 << (PLpgSQLParser.FLOAT - 288)) | (1 << (PLpgSQLParser.GREATEST - 288)) | (1 << (PLpgSQLParser.GROUPING - 288)) | (1 << (PLpgSQLParser.INOUT - 288)) | (1 << (PLpgSQLParser.INT - 288)) | (1 << (PLpgSQLParser.INTEGER - 288)) | (1 << (PLpgSQLParser.INTERVAL - 288)) | (1 << (PLpgSQLParser.LEAST - 288)) | (1 << (PLpgSQLParser.NATIONAL - 288)) | (1 << (PLpgSQLParser.NCHAR - 288)) | (1 << (PLpgSQLParser.NONE - 288)) | (1 << (PLpgSQLParser.NULLIF - 288)) | (1 << (PLpgSQLParser.NUMERIC - 288)) | (1 << (PLpgSQLParser.OUT - 288)) | (1 << (PLpgSQLParser.OVERLAY - 288)) | (1 << (PLpgSQLParser.POSITION - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PLpgSQLParser.PRECISION - 320)) | (1 << (PLpgSQLParser.REAL - 320)) | (1 << (PLpgSQLParser.ROW - 320)) | (1 << (PLpgSQLParser.SETOF - 320)) | (1 << (PLpgSQLParser.SMALLINT - 320)) | (1 << (PLpgSQLParser.SUBSTRING - 320)) | (1 << (PLpgSQLParser.TIME - 320)) | (1 << (PLpgSQLParser.TIMESTAMP - 320)) | (1 << (PLpgSQLParser.TREAT - 320)) | (1 << (PLpgSQLParser.TRIM - 320)) | (1 << (PLpgSQLParser.VALUES - 320)) | (1 << (PLpgSQLParser.VARCHAR - 320)) | (1 << (PLpgSQLParser.XMLATTRIBUTES - 320)) | (1 << (PLpgSQLParser.XMLCONCAT - 320)) | (1 << (PLpgSQLParser.XMLELEMENT - 320)) | (1 << (PLpgSQLParser.XMLEXISTS - 320)) | (1 << (PLpgSQLParser.XMLFOREST - 320)) | (1 << (PLpgSQLParser.XMLNAMESPACES - 320)) | (1 << (PLpgSQLParser.XMLPARSE - 320)) | (1 << (PLpgSQLParser.XMLPI - 320)) | (1 << (PLpgSQLParser.XMLROOT - 320)) | (1 << (PLpgSQLParser.XMLSERIALIZE - 320)) | (1 << (PLpgSQLParser.XMLTABLE - 320)) | (1 << (PLpgSQLParser.AUTHORIZATION - 320)) | (1 << (PLpgSQLParser.BINARY - 320)) | (1 << (PLpgSQLParser.COLLATION - 320)) | (1 << (PLpgSQLParser.CONCURRENTLY - 320)) | (1 << (PLpgSQLParser.CROSS - 320)) | (1 << (PLpgSQLParser.CURRENT_SCHEMA - 320)) | (1 << (PLpgSQLParser.FREEZE - 320)) | (1 << (PLpgSQLParser.FULL - 320)) | (1 << (PLpgSQLParser.ILIKE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PLpgSQLParser.INNER - 352)) | (1 << (PLpgSQLParser.IS - 352)) | (1 << (PLpgSQLParser.ISNULL - 352)) | (1 << (PLpgSQLParser.JOIN - 352)) | (1 << (PLpgSQLParser.LEFT - 352)) | (1 << (PLpgSQLParser.LIKE - 352)) | (1 << (PLpgSQLParser.NATURAL - 352)) | (1 << (PLpgSQLParser.NOTNULL - 352)) | (1 << (PLpgSQLParser.OUTER - 352)) | (1 << (PLpgSQLParser.OVERLAPS - 352)) | (1 << (PLpgSQLParser.RIGHT - 352)) | (1 << (PLpgSQLParser.SIMILAR - 352)) | (1 << (PLpgSQLParser.TABLESAMPLE - 352)) | (1 << (PLpgSQLParser.VERBOSE - 352)) | (1 << (PLpgSQLParser.ALL - 352)) | (1 << (PLpgSQLParser.ANY - 352)) | (1 << (PLpgSQLParser.ARRAY - 352)) | (1 << (PLpgSQLParser.CASE - 352)) | (1 << (PLpgSQLParser.CAST - 352)) | (1 << (PLpgSQLParser.CURRENT_CATALOG - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PLpgSQLParser.CURRENT_DATE - 384)) | (1 << (PLpgSQLParser.CURRENT_TIME - 384)) | (1 << (PLpgSQLParser.CURRENT_TIMESTAMP - 384)) | (1 << (PLpgSQLParser.CURRENT_USER - 384)) | (1 << (PLpgSQLParser.FALSE - 384)) | (1 << (PLpgSQLParser.LOCALTIME - 384)) | (1 << (PLpgSQLParser.LOCALTIMESTAMP - 384)) | (1 << (PLpgSQLParser.NOT - 384)) | (1 << (PLpgSQLParser.NULL - 384)))) !== 0) || ((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (PLpgSQLParser.ON - 417)) | (1 << (PLpgSQLParser.SESSION_USER - 417)) | (1 << (PLpgSQLParser.SOME - 417)) | (1 << (PLpgSQLParser.TRUE - 417)) | (1 << (PLpgSQLParser.USER - 417)) | (1 << (PLpgSQLParser.ALIGNMENT - 417)) | (1 << (PLpgSQLParser.BASETYPE - 417)) | (1 << (PLpgSQLParser.BUFFERS - 417)) | (1 << (PLpgSQLParser.BYPASSRLS - 417)) | (1 << (PLpgSQLParser.CANONICAL - 417)) | (1 << (PLpgSQLParser.CATEGORY - 417)))) !== 0) || ((((_la - 449)) & ~0x1F) === 0 && ((1 << (_la - 449)) & ((1 << (PLpgSQLParser.COLLATABLE - 449)) | (1 << (PLpgSQLParser.COMBINEFUNC - 449)) | (1 << (PLpgSQLParser.COMMUTATOR - 449)) | (1 << (PLpgSQLParser.CONNECT - 449)) | (1 << (PLpgSQLParser.COSTS - 449)) | (1 << (PLpgSQLParser.CREATEDB - 449)) | (1 << (PLpgSQLParser.CREATEROLE - 449)) | (1 << (PLpgSQLParser.DESERIALFUNC - 449)) | (1 << (PLpgSQLParser.DETERMINISTIC - 449)) | (1 << (PLpgSQLParser.DISABLE_PAGE_SKIPPING - 449)) | (1 << (PLpgSQLParser.ELEMENT - 449)) | (1 << (PLpgSQLParser.EXTENDED - 449)) | (1 << (PLpgSQLParser.FINALFUNC - 449)) | (1 << (PLpgSQLParser.FINALFUNC_EXTRA - 449)) | (1 << (PLpgSQLParser.FINALFUNC_MODIFY - 449)) | (1 << (PLpgSQLParser.FORCE_NOT_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_NULL - 449)) | (1 << (PLpgSQLParser.FORCE_QUOTE - 449)) | (1 << (PLpgSQLParser.FORMAT - 449)) | (1 << (PLpgSQLParser.GETTOKEN - 449)) | (1 << (PLpgSQLParser.HASH - 449)) | (1 << (PLpgSQLParser.HASHES - 449)) | (1 << (PLpgSQLParser.HEADLINE - 449)) | (1 << (PLpgSQLParser.HYPOTHETICAL - 449)) | (1 << (PLpgSQLParser.INDEX_CLEANUP - 449)) | (1 << (PLpgSQLParser.INIT - 449)) | (1 << (PLpgSQLParser.INITCOND - 449)) | (1 << (PLpgSQLParser.INTERNALLENGTH - 449)) | (1 << (PLpgSQLParser.JSON - 449)) | (1 << (PLpgSQLParser.LC_COLLATE - 449)) | (1 << (PLpgSQLParser.LC_CTYPE - 449)) | (1 << (PLpgSQLParser.LEFTARG - 449)))) !== 0) || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (PLpgSQLParser.LEXIZE - 481)) | (1 << (PLpgSQLParser.LEXTYPES - 481)) | (1 << (PLpgSQLParser.LIST - 481)) | (1 << (PLpgSQLParser.LOCALE - 481)) | (1 << (PLpgSQLParser.LOGIN - 481)) | (1 << (PLpgSQLParser.MAIN - 481)) | (1 << (PLpgSQLParser.MERGES - 481)) | (1 << (PLpgSQLParser.MFINALFUNC - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_EXTRA - 481)) | (1 << (PLpgSQLParser.MFINALFUNC_MODIFY - 481)) | (1 << (PLpgSQLParser.MINITCOND - 481)) | (1 << (PLpgSQLParser.MINVFUNC - 481)) | (1 << (PLpgSQLParser.MODULUS - 481)) | (1 << (PLpgSQLParser.MSFUNC - 481)) | (1 << (PLpgSQLParser.MSSPACE - 481)) | (1 << (PLpgSQLParser.MSTYPE - 481)) | (1 << (PLpgSQLParser.NEGATOR - 481)) | (1 << (PLpgSQLParser.NOBYPASSRLS - 481)) | (1 << (PLpgSQLParser.NOCREATEDB - 481)) | (1 << (PLpgSQLParser.NOCREATEROLE - 481)) | (1 << (PLpgSQLParser.NOINHERIT - 481)) | (1 << (PLpgSQLParser.NOLOGIN - 481)) | (1 << (PLpgSQLParser.NOREPLICATION - 481)) | (1 << (PLpgSQLParser.NOSUPERUSER - 481)) | (1 << (PLpgSQLParser.OUTPUT - 481)) | (1 << (PLpgSQLParser.PASSEDBYVALUE - 481)) | (1 << (PLpgSQLParser.PATH - 481)) | (1 << (PLpgSQLParser.PERMISSIVE - 481)) | (1 << (PLpgSQLParser.PLAIN - 481)) | (1 << (PLpgSQLParser.PREFERRED - 481)) | (1 << (PLpgSQLParser.PROVIDER - 481)) | (1 << (PLpgSQLParser.READ_ONLY - 481)))) !== 0) || ((((_la - 513)) & ~0x1F) === 0 && ((1 << (_la - 513)) & ((1 << (PLpgSQLParser.READ_WRITE - 513)) | (1 << (PLpgSQLParser.RECEIVE - 513)) | (1 << (PLpgSQLParser.REMAINDER - 513)) | (1 << (PLpgSQLParser.REPLICATION - 513)) | (1 << (PLpgSQLParser.RESTRICTED - 513)) | (1 << (PLpgSQLParser.RESTRICTIVE - 513)) | (1 << (PLpgSQLParser.RIGHTARG - 513)) | (1 << (PLpgSQLParser.SAFE - 513)) | (1 << (PLpgSQLParser.SEND - 513)) | (1 << (PLpgSQLParser.SERIALFUNC - 513)) | (1 << (PLpgSQLParser.SETTINGS - 513)) | (1 << (PLpgSQLParser.SFUNC - 513)) | (1 << (PLpgSQLParser.SHAREABLE - 513)) | (1 << (PLpgSQLParser.SKIP_LOCKED - 513)) | (1 << (PLpgSQLParser.SORTOP - 513)) | (1 << (PLpgSQLParser.SSPACE - 513)) | (1 << (PLpgSQLParser.STYPE - 513)) | (1 << (PLpgSQLParser.SUBTYPE_DIFF - 513)) | (1 << (PLpgSQLParser.SUBTYPE_OPCLASS - 513)) | (1 << (PLpgSQLParser.SUBTYPE - 513)) | (1 << (PLpgSQLParser.SUMMARY - 513)) | (1 << (PLpgSQLParser.SUPERUSER - 513)) | (1 << (PLpgSQLParser.TIMING - 513)) | (1 << (PLpgSQLParser.TYPMOD_IN - 513)) | (1 << (PLpgSQLParser.TYPMOD_OUT - 513)) | (1 << (PLpgSQLParser.UNSAFE - 513)) | (1 << (PLpgSQLParser.USAGE - 513)) | (1 << (PLpgSQLParser.VARIABLE - 513)) | (1 << (PLpgSQLParser.YAML - 513)) | (1 << (PLpgSQLParser.ALIAS - 513)) | (1 << (PLpgSQLParser.ASSERT - 513)) | (1 << (PLpgSQLParser.CONSTANT - 513)))) !== 0) || ((((_la - 545)) & ~0x1F) === 0 && ((1 << (_la - 545)) & ((1 << (PLpgSQLParser.DATATYPE - 545)) | (1 << (PLpgSQLParser.DEBUG - 545)) | (1 << (PLpgSQLParser.DETAIL - 545)) | (1 << (PLpgSQLParser.DIAGNOSTICS - 545)) | (1 << (PLpgSQLParser.ELSEIF - 545)) | (1 << (PLpgSQLParser.ELSIF - 545)) | (1 << (PLpgSQLParser.ERRCODE - 545)) | (1 << (PLpgSQLParser.EXIT - 545)) | (1 << (PLpgSQLParser.EXCEPTION - 545)) | (1 << (PLpgSQLParser.FOREACH - 545)) | (1 << (PLpgSQLParser.GET - 545)) | (1 << (PLpgSQLParser.HINT - 545)) | (1 << (PLpgSQLParser.INFO - 545)) | (1 << (PLpgSQLParser.LOG - 545)) | (1 << (PLpgSQLParser.LOOP - 545)) | (1 << (PLpgSQLParser.MESSAGE - 545)) | (1 << (PLpgSQLParser.NOTICE - 545)) | (1 << (PLpgSQLParser.OPEN - 545)) | (1 << (PLpgSQLParser.PERFORM - 545)) | (1 << (PLpgSQLParser.QUERY - 545)) | (1 << (PLpgSQLParser.RAISE - 545)) | (1 << (PLpgSQLParser.RECORD - 545)) | (1 << (PLpgSQLParser.RETURN - 545)) | (1 << (PLpgSQLParser.REVERSE - 545)) | (1 << (PLpgSQLParser.ROWTYPE - 545)) | (1 << (PLpgSQLParser.SLICE - 545)) | (1 << (PLpgSQLParser.SQLSTATE - 545)) | (1 << (PLpgSQLParser.STACKED - 545)) | (1 << (PLpgSQLParser.WARNING - 545)) | (1 << (PLpgSQLParser.WHILE - 545)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PLpgSQLParser.LEFT_PAREN - 585)) | (1 << (PLpgSQLParser.PLUS - 585)) | (1 << (PLpgSQLParser.MINUS - 585)) | (1 << (PLpgSQLParser.MULTIPLY - 585)) | (1 << (PLpgSQLParser.LESS_LESS - 585)) | (1 << (PLpgSQLParser.GREATER_GREATER - 585)) | (1 << (PLpgSQLParser.HASH_SIGN - 585)) | (1 << (PLpgSQLParser.OP_CHARS - 585)) | (1 << (PLpgSQLParser.NUMBER_LITERAL - 585)) | (1 << (PLpgSQLParser.REAL_NUMBER - 585)) | (1 << (PLpgSQLParser.DOLLAR_NUMBER - 585)) | (1 << (PLpgSQLParser.Identifier - 585)) | (1 << (PLpgSQLParser.QuotedIdentifier - 585)) | (1 << (PLpgSQLParser.Character_String_Literal - 585)) | (1 << (PLpgSQLParser.BeginDollarStringConstant - 585)))) !== 0)) {
				{
				this.state = 7606;
				this.vex(0);
				}
			}

			this.state = 7621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7609;
				this.match(PLpgSQLParser.WHEN);
				this.state = 7610;
				this.vex(0);
				this.state = 7615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PLpgSQLParser.COMMA) {
					{
					{
					this.state = 7611;
					this.match(PLpgSQLParser.COMMA);
					this.state = 7612;
					this.vex(0);
					}
					}
					this.state = 7617;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7618;
				this.match(PLpgSQLParser.THEN);
				this.state = 7619;
				this.function_statements();
				}
				}
				this.state = 7623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PLpgSQLParser.WHEN);
			this.state = 7627;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PLpgSQLParser.ELSE) {
				{
				this.state = 7625;
				this.match(PLpgSQLParser.ELSE);
				this.state = 7626;
				this.function_statements();
				}
			}

			this.state = 7629;
			this.match(PLpgSQLParser.END);
			this.state = 7630;
			this.match(PLpgSQLParser.CASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plpgsql_query(): Plpgsql_queryContext {
		let _localctx: Plpgsql_queryContext = new Plpgsql_queryContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, PLpgSQLParser.RULE_plpgsql_query);
		try {
			this.state = 7636;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PLpgSQLParser.DELETE:
			case PLpgSQLParser.INSERT:
			case PLpgSQLParser.UPDATE:
			case PLpgSQLParser.VALUES:
			case PLpgSQLParser.SELECT:
			case PLpgSQLParser.TABLE:
			case PLpgSQLParser.WITH:
			case PLpgSQLParser.LEFT_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7632;
				this.data_statement();
				}
				break;
			case PLpgSQLParser.EXECUTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7633;
				this.execute_stmt();
				}
				break;
			case PLpgSQLParser.SHOW:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7634;
				this.show_statement();
				}
				break;
			case PLpgSQLParser.EXPLAIN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7635;
				this.explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 279:
			return this.vex_sempred(_localctx as VexContext, predIndex);

		case 280:
			return this.vex_b_sempred(_localctx as Vex_bContext, predIndex);

		case 316:
			return this.select_ops_sempred(_localctx as Select_opsContext, predIndex);

		case 322:
			return this.from_item_sempred(_localctx as From_itemContext, predIndex);
		}
		return true;
	}
	private vex_sempred(_localctx: VexContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 23);

		case 1:
			return this.precpred(this._ctx, 22);

		case 2:
			return this.precpred(this._ctx, 21);

		case 3:
			return this.precpred(this._ctx, 20);

		case 4:
			return this.precpred(this._ctx, 19);

		case 5:
			return this.precpred(this._ctx, 15);

		case 6:
			return this.precpred(this._ctx, 14);

		case 7:
			return this.precpred(this._ctx, 13);

		case 8:
			return this.precpred(this._ctx, 12);

		case 9:
			return this.precpred(this._ctx, 10);

		case 10:
			return this.precpred(this._ctx, 3);

		case 11:
			return this.precpred(this._ctx, 2);

		case 12:
			return this.precpred(this._ctx, 28);

		case 13:
			return this.precpred(this._ctx, 25);

		case 14:
			return this.precpred(this._ctx, 17);

		case 15:
			return this.precpred(this._ctx, 16);

		case 16:
			return this.precpred(this._ctx, 11);

		case 17:
			return this.precpred(this._ctx, 9);

		case 18:
			return this.precpred(this._ctx, 8);

		case 19:
			return this.precpred(this._ctx, 7);

		case 20:
			return this.precpred(this._ctx, 6);

		case 21:
			return this.precpred(this._ctx, 5);
		}
		return true;
	}
	private vex_b_sempred(_localctx: Vex_bContext, predIndex: number): boolean {
		switch (predIndex) {
		case 22:
			return this.precpred(this._ctx, 12);

		case 23:
			return this.precpred(this._ctx, 11);

		case 24:
			return this.precpred(this._ctx, 10);

		case 25:
			return this.precpred(this._ctx, 9);

		case 26:
			return this.precpred(this._ctx, 6);

		case 27:
			return this.precpred(this._ctx, 5);

		case 28:
			return this.precpred(this._ctx, 16);

		case 29:
			return this.precpred(this._ctx, 7);

		case 30:
			return this.precpred(this._ctx, 4);

		case 31:
			return this.precpred(this._ctx, 3);

		case 32:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private select_ops_sempred(_localctx: Select_opsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 33:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private from_item_sempred(_localctx: From_itemContext, predIndex: number): boolean {
		switch (predIndex) {
		case 34:
			return this.precpred(this._ctx, 5);

		case 35:
			return this.precpred(this._ctx, 2);

		case 36:
			return this.precpred(this._ctx, 4);

		case 37:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 15;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0270\u1DD9\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x03\x02\x05\x02\u02FC" +
		"\n\x02\x03\x02\x07\x02\u02FF\n\x02\f\x02\x0E\x02\u0302\v\x02\x03\x02\x03" +
		"\x02\x06\x02\u0306\n\x02\r\x02\x0E\x02\u0307\x03\x02\x05\x02\u030B\n\x02" +
		"\x07\x02\u030D\n\x02\f\x02\x0E\x02\u0310\v\x02\x03\x02\x03\x02\x03\x03" +
		"\x03\x03\x03\x03\x03\x04\x05\x04\u0318\n\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x05\x07\x05\u0320\n\x05\f\x05\x0E\x05\u0323\v\x05\x03" +
		"\x05\x03\x05\x03\x06\x05\x06\u0328\n\x06\x03\x06\x03\x06\x05\x06\u032C" +
		"\n\x06\x03\x06\x03\x06\x03\x07\x05\x07\u0331\n\x07\x03\x07\x03\x07\x03" +
		"\x07\x07\x07\u0336\n\x07\f\x07\x0E\x07\u0339\v\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x05\b\u0340\n\b\x03\t\x03\t\x03\t\x03\t\x05\t\u0346\n\t" +
		"\x03\n\x03\n\x05\n\u034A\n\n\x03\v\x03\v\x03\v\x03\v\x05\v\u0350\n\v\x05" +
		"\v\u0352\n\v\x03\v\x03\v\x03\v\x07\v\u0357\n\v\f\v\x0E\v\u035A\v\v\x05" +
		"\v\u035C\n\v\x03\v\x03\v\x05\v\u0360\n\v\x03\v\x03\v\x05\v\u0364\n\v\x03" +
		"\v\x05\v\u0367\n\v\x03\v\x03\v\x03\v\x03\v\x05\v\u036D\n\v\x03\v\x03\v" +
		"\x03\v\x03\v\x05\v\u0373\n\v\x05\v\u0375\n\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x05\v\u037D\n\v\x03\v\x03\v\x05\v\u0381\n\v\x03\v\x03\v\x05\v" +
		"\u0385\n\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f" +
		"\u0390\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u0397\n\f\x03\f\x05\f\u039A" +
		"\n\f\x03\r\x03\r\x05\r\u039E\n\r\x03\r\x03\r\x03\r\x07\r\u03A3\n\r\f\r" +
		"\x0E\r\u03A6\v\r\x03\r\x03\r\x03\r\x03\r\x05\r\u03AC\n\r\x03\r\x05\r\u03AF" +
		"\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x05\x0E\u03BA\n\x0E\x03\x0E\x05\x0E\u03BD\n\x0E\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x05\x0F\u03C3\n\x0F\x03\x0F\x03\x0F\x05\x0F\u03C7\n\x0F\x03" +
		"\x0F\x05\x0F\u03CA\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u03D0" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x05\x0F\u03DA\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05" +
		"\x10\u03E2\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\u03E9" +
		"\n\x10\f\x10\x0E\x10\u03EC\v\x10\x03\x10\x03\x10\x03\x10\x05\x10\u03F1" +
		"\n\x10\x03\x10\x05\x10\u03F4\n\x10\x03\x10\x03\x10\x05\x10\u03F8\n\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0401" +
		"\n\x10\x05\x10\u0403\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05" +
		"\x10\u040A\n\x10\x03\x10\x03\x10\x05\x10\u040E\n\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x05\x10\u0414\n\x10\x03\x10\x03\x10\x05\x10\u0418\n\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u041F\n\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0427\n\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x05\x10\u042D\n\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0432" +
		"\n\x10\x03\x10\x05\x10\u0435\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x07\x10\u043D\n\x10\f\x10\x0E\x10\u0440\v\x10\x03\x10\x03" +
		"\x10\x05\x10\u0444\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x07\x10\u044F\n\x10\f\x10\x0E\x10\u0452\v\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u045A\n\x10\x03" +
		"\x11\x03\x11\x05\x11\u045E\n\x11\x03\x11\x05\x11\u0461\n\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x07\x11\u0467\n\x11\f\x11\x0E\x11\u046A\v\x11\x03" +
		"\x11\x03\x11\x05\x11\u046E\n\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x05\x12\u0478\n\x12\x05\x12\u047A\n\x12\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\u0482\n\x13\f\x13\x0E" +
		"\x13\u0485\v\x13\x03\x13\x03\x13\x05\x13\u0489\n\x13\x03\x14\x03\x14\x03" +
		"\x14\x05\x14\u048E\n\x14\x03\x14\x05\x14\u0491\n\x14\x03\x14\x05\x14\u0494" +
		"\n\x14\x03\x14\x05\x14\u0497\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u049C" +
		"\n\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15" +
		"\u04A5\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x05\x15\u04B0\n\x15\x03\x16\x03\x16\x05\x16\u04B4\n\x16\x03" +
		"\x16\x03\x16\x05\x16\u04B8\n\x16\x03\x17\x03\x17\x03\x17\x05\x17\u04BD" +
		"\n\x17\x03\x18\x03\x18\x03\x18\x07\x18\u04C2\n\x18\f\x18\x0E\x18\u04C5" +
		"\v\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u04CC\n\x19\f\x19" +
		"\x0E\x19\u04CF\v\x19\x03\x19\x03\x19\x05\x19\u04D3\n\x19\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x07\x1A\u04D9\n\x1A\f\x1A\x0E\x1A\u04DC\v\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x05\x1A\u04E1\n\x1A\x03\x1A\x05\x1A\u04E4\n\x1A\x03\x1A" +
		"\x05\x1A\u04E7\n\x1A\x03\x1A\x05\x1A\u04EA\n\x1A\x05\x1A\u04EC\n\x1A\x03" +
		"\x1B\x03\x1B\x05\x1B\u04F0\n\x1B\x03\x1C\x03\x1C\x05\x1C\u04F4\n\x1C\x03" +
		"\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u04FD\n\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u0503\n\x1E\x03\x1E\x03\x1E\x05" +
		"\x1E\u0507\n\x1E\x05\x1E\u0509\n\x1E\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u050E" +
		"\n\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03" +
		" \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03" +
		" \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05 \u0537" +
		"\n \x03 \x03 \x03 \x03 \x03 \x05 \u053E\n \x03!\x03!\x03!\x03!\x03!\x03" +
		"!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03" +
		"!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x05" +
		"!\u0561\n!\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"" +
		"\x03\"\x03\"\x05\"\u056F\n\"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x05#\u0578" +
		"\n#\x03#\x03#\x03#\x03#\x05#\u057E\n#\x03#\x03#\x03#\x03#\x03#\x03#\x05" +
		"#\u0586\n#\x03$\x03$\x05$\u058A\n$\x03$\x03$\x03$\x03$\x03$\x05$\u0591" +
		"\n$\x03$\x03$\x05$\u0595\n$\x06$\u0597\n$\r$\x0E$\u0598\x03$\x05$\u059C" +
		"\n$\x03$\x03$\x03$\x03$\x03$\x03$\x05$\u05A4\n$\x03%\x03%\x03%\x03%\x05" +
		"%\u05AA\n%\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x05\'\u05B5" +
		"\n\'\x05\'\u05B7\n\'\x03\'\x03\'\x05\'\u05BB\n\'\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u05DC" +
		"\n(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x05(\u05EF\n(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x05(\u0617\n(\x03)\x03)\x03)\x03)\x03*\x05*\u061E\n*\x03*" +
		"\x03*\x03*\x03*\x05*\u0624\n*\x03+\x05+\u0627\n+\x03+\x03+\x05+\u062B" +
		"\n+\x03+\x05+\u062E\n+\x03+\x03+\x05+\u0632\n+\x03+\x03+\x03+\x07+\u0637" +
		"\n+\f+\x0E+\u063A\v+\x03+\x03+\x05+\u063E\n+\x03+\x03+\x03+\x03+\x03+" +
		"\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
		"+\x03+\x05+\u0654\n+\x03,\x03,\x05,\u0658\n,\x03,\x05,\u065B\n,\x03,\x03" +
		",\x03,\x05,\u0660\n,\x03,\x05,\u0663\n,\x03,\x03,\x05,\u0667\n,\x03,\x03" +
		",\x05,\u066B\n,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u0674\n,\x03," +
		"\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u067D\n,\x03,\x03,\x03,\x03,\x03," +
		"\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u068F\n," +
		"\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03" +
		",\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03" +
		",\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u06B9" +
		"\n,\x03,\x03,\x03,\x03,\x05,\u06BF\n,\x03,\x05,\u06C2\n,\x05,\u06C4\n" +
		",\x03-\x03-\x05-\u06C8\n-\x03-\x03-\x03-\x05-\u06CD\n-\x03-\x03-\x05-" +
		"\u06D1\n-\x03-\x03-\x03-\x03-\x03-\x03-\x05-\u06D9\n-\x03-\x03-\x03-\x03" +
		"-\x03-\x05-\u06E0\n-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03" +
		"-\x03-\x03-\x06-\u06EE\n-\r-\x0E-\u06EF\x05-\u06F2\n-\x03.\x03.\x03.\x03" +
		".\x05.\u06F8\n.\x03.\x03.\x03.\x03.\x06.\u06FE\n.\r.\x0E.\u06FF\x03.\x03" +
		".\x05.\u0704\n.\x03/\x03/\x03/\x03/\x03/\x05/\u070B\n/\x03/\x03/\x03/" +
		"\x03/\x05/\u0711\n/\x03/\x05/\u0714\n/\x05/\u0716\n/\x030\x030\x031\x03" +
		"1\x031\x031\x032\x032\x032\x052\u0721\n2\x032\x032\x052\u0725\n2\x033" +
		"\x053\u0728\n3\x033\x033\x034\x034\x034\x035\x035\x035\x055\u0732\n5\x03" +
		"5\x035\x035\x035\x035\x035\x035\x075\u073B\n5\f5\x0E5\u073E\v5\x035\x03" +
		"5\x035\x035\x035\x055\u0745\n5\x035\x035\x055\u0749\n5\x035\x035\x035" +
		"\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x055\u0759\n5" +
		"\x035\x035\x035\x035\x035\x055\u0760\n5\x035\x035\x035\x035\x035\x055" +
		"\u0767\n5\x036\x036\x036\x056\u076C\n6\x037\x037\x057\u0770\n7\x037\x03" +
		"7\x037\x037\x037\x037\x037\x037\x037\x037\x037\x057\u077D\n7\x037\x03" +
		"7\x037\x037\x057\u0783\n7\x057\u0785\n7\x038\x038\x038\x038\x038\x038" +
		"\x038\x038\x038\x038\x058\u0791\n8\x038\x058\u0794\n8\x038\x038\x038\x03" +
		"8\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x07" +
		"8\u07A7\n8\f8\x0E8\u07AA\v8\x038\x038\x058\u07AE\n8\x039\x039\x039\x03" +
		"9\x039\x059\u07B5\n9\x039\x039\x039\x059\u07BA\n9\x039\x039\x03:\x03:" +
		"\x03:\x05:\u07C1\n:\x05:\u07C3\n:\x03:\x03:\x03:\x07:\u07C8\n:\f:\x0E" +
		":\u07CB\v:\x03:\x03:\x03:\x03:\x03:\x03:\x07:\u07D3\n:\f:\x0E:\u07D6\v" +
		":\x03:\x03:\x05:\u07DA\n:\x05:\u07DC\n:\x03:\x03:\x03:\x03:\x03:\x05:" +
		"\u07E3\n:\x05:\u07E5\n:\x03:\x03:\x03:\x03:\x03:\x03:\x05:\u07ED\n:\x05" +
		":\u07EF\n:\x03:\x03:\x03:\x03:\x03:\x05:\u07F6\n:\x05:\u07F8\n:\x03:\x03" +
		":\x05:\u07FC\n:\x03:\x03:\x05:\u0800\n:\x03;\x03;\x03;\x03;\x03<\x03<" +
		"\x05<\u0808\n<\x03<\x03<\x03<\x03<\x05<\u080E\n<\x03<\x05<\u0811\n<\x07" +
		"<\u0813\n<\f<\x0E<\u0816\v<\x03<\x03<\x05<\u081A\n<\x03=\x05=\u081D\n" +
		"=\x03=\x03=\x05=\u0821\n=\x03=\x03=\x03=\x05=\u0826\n=\x03=\x03=\x03=" +
		"\x05=\u082B\n=\x03=\x03=\x03=\x03=\x03=\x03=\x05=\u0833\n=\x03>\x03>\x03" +
		">\x03>\x03>\x03?\x03?\x03?\x05?\u083D\n?\x03?\x03?\x05?\u0841\n?\x03@" +
		"\x03@\x03@\x03@\x03@\x03@\x03@\x05@\u084A\n@\x03@\x03@\x03@\x05@\u084F" +
		"\n@\x03@\x03@\x03@\x03@\x03@\x03@\x05@\u0857\n@\x03@\x03@\x03@\x03@\x03" +
		"@\x03@\x03@\x03@\x03@\x07@\u0862\n@\f@\x0E@\u0865\v@\x05@\u0867\n@\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u0874\nA\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u0880\nA\x03B\x03" +
		"B\x03B\x03B\x03C\x03C\x05C\u0888\nC\x03C\x03C\x03C\x03C\x03C\x05C\u088F" +
		"\nC\x03D\x03D\x03D\x03D\x03D\x03D\x05D\u0897\nD\x03D\x03D\x03D\x03D\x03" +
		"D\x03D\x03D\x03D\x05D\u08A1\nD\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x07E\u08AB\nE\fE\x0EE\u08AE\vE\x03E\x03E\x03E\x03E\x05E\u08B4\nE\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u08BF\nE\x03E\x03E\x05" +
		"E\u08C3\nE\x03F\x03F\x03F\x03F\x03F\x05F\u08CA\nF\x03F\x05F\u08CD\nF\x03" +
		"F\x03F\x03F\x05F\u08D2\nF\x03F\x03F\x05F\u08D6\nF\x03F\x03F\x03F\x03F" +
		"\x03F\x05F\u08DD\nF\x03F\x03F\x03F\x05F\u08E2\nF\x03F\x05F\u08E5\nF\x05" +
		"F\u08E7\nF\x03G\x03G\x03G\x03G\x03H\x03H\x03H\x03I\x05I\u08F1\nI\x03I" +
		"\x03I\x05I\u08F5\nI\x03I\x05I\u08F8\nI\x03I\x05I\u08FB\nI\x03I\x03I\x05" +
		"I\u08FF\nI\x03I\x03I\x03I\x03J\x03J\x05J\u0906\nJ\x03J\x03J\x05J\u090A" +
		"\nJ\x03J\x05J\u090D\nJ\x03J\x05J\u0910\nJ\x03J\x05J\u0913\nJ\x03K\x03" +
		"K\x03K\x03K\x03L\x03L\x03L\x03L\x03L\x07L\u091E\nL\fL\x0EL\u0921\vL\x03" +
		"L\x03L\x03M\x03M\x03M\x03N\x03N\x05N\u092A\nN\x03N\x03N\x05N\u092E\nN" +
		"\x03N\x03N\x05N\u0932\nN\x03N\x03N\x03N\x05N\u0937\nN\x05N\u0939\nN\x03" +
		"N\x03N";
	private static readonly _serializedATNSegment1: string =
		"\x03N\x05N\u093E\nN\x05N\u0940\nN\x03N\x05N\u0943\nN\x03O\x03O\x05O\u0947" +
		"\nO\x03O\x05O\u094A\nO\x03O\x05O\u094D\nO\x03O\x03O\x03O\x03O\x03O\x03" +
		"O\x05O\u0955\nO\x03O\x03O\x05O\u0959\nO\x05O\u095B\nO\x03P\x03P\x03P\x03" +
		"P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x07P\u0969\nP\fP\x0EP\u096C" +
		"\vP\x03P\x03P\x05P\u0970\nP\x06P\u0972\nP\rP\x0EP\u0973\x05P\u0976\nP" +
		"\x03P\x03P\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x07Q\u0983\nQ" +
		"\fQ\x0EQ\u0986\vQ\x05Q\u0988\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x07Q\u0990" +
		"\nQ\fQ\x0EQ\u0993\vQ\x05Q\u0995\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q" +
		"\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x05Q\u09A9\nQ" +
		"\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x03Q\x03Q\x05Q\u09BB\nQ\x07Q\u09BD\nQ\fQ\x0EQ\u09C0\vQ\x03Q\x05Q\u09C3" +
		"\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x05Q\u09CA\nQ\x03Q\x05Q\u09CD\nQ\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x05Q\u09EA\n" +
		"Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x05Q\u0A08\nQ\x07Q\u0A0A\nQ\fQ\x0EQ\u0A0D\vQ\x03Q\x03Q\x05Q\u0A11\n" +
		"Q\x03R\x03R\x03R\x05R\u0A16\nR\x03R\x03R\x03R\x03R\x03R\x07R\u0A1D\nR" +
		"\fR\x0ER\u0A20\vR\x03S\x03S\x05S\u0A24\nS\x03S\x03S\x03S\x05S\u0A29\n" +
		"S\x03S\x03S\x05S\u0A2D\nS\x03S\x03S\x03S\x03S\x03S\x05S\u0A34\nS\x03T" +
		"\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x07T\u0A40\nT\fT\x0ET\u0A43" +
		"\vT\x03T\x03T\x03U\x03U\x03U\x03U\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03" +
		"V\x03V\x03V\x03V\x05V\u0A56\nV\x03V\x03V\x03W\x03W\x03W\x03W\x03W\x03" +
		"W\x03W\x03W\x03W\x03W\x05W\u0A64\nW\x03W\x03W\x03W\x03W\x03W\x03W\x03" +
		"W\x05W\u0A6D\nW\x03W\x03W\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03" +
		"X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x05" +
		"X\u0A87\nX\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x05X\u0A90\nX\x03X\x03X" +
		"\x03Y\x03Y\x05Y\u0A96\nY\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x07Y\u0A9F" +
		"\nY\fY\x0EY\u0AA2\vY\x05Y\u0AA4\nY\x03Y\x05Y\u0AA7\nY\x03Z\x03Z\x03Z\x03" +
		"Z\x03Z\x03Z\x03Z\x05Z\u0AB0\nZ\x03[\x03[\x03[\x03[\x05[\u0AB6\n[\x03[" +
		"\x03[\x03[\x05[\u0ABB\n[\x03\\\x03\\\x03\\\x05\\\u0AC0\n\\\x03\\\x03\\" +
		"\x03\\\x05\\\u0AC5\n\\\x03\\\x03\\\x03\\\x05\\\u0ACA\n\\\x03]\x03]\x03" +
		"]\x03]\x03]\x05]\u0AD1\n]\x03]\x03]\x03]\x05]\u0AD6\n]\x03^\x03^\x03^" +
		"\x03^\x03^\x03^\x03^\x05^\u0ADF\n^\x03^\x06^\u0AE2\n^\r^\x0E^\u0AE3\x05" +
		"^\u0AE6\n^\x03_\x03_\x05_\u0AEA\n_\x03_\x03_\x03_\x05_\u0AEF\n_\x03_\x03" +
		"_\x03`\x03`\x03`\x03`\x05`\u0AF7\n`\x03`\x03`\x03`\x03`\x03`\x03`\x03" +
		"`\x03`\x05`\u0B01\n`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x05`\u0B0B" +
		"\n`\x03`\x03`\x03`\x05`\u0B10\n`\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03" +
		"b\x03b\x03b\x03b\x05b\u0B1D\nb\x03c\x03c\x03c\x03c\x03d\x03d\x03d\x03" +
		"d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03" +
		"d\x03d\x03d\x05d\u0B37\nd\x03d\x05d\u0B3A\nd\x03d\x05d\u0B3D\nd\x03d\x05" +
		"d\u0B40\nd\x03d\x03d\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x07e\u0B4B\ne" +
		"\fe\x0Ee\u0B4E\ve\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x05e\u0B57\ne\x03" +
		"f\x03f\x03f\x03f\x03f\x05f\u0B5E\nf\x03g\x03g\x03g\x03g\x03g\x03g\x03" +
		"h\x03h\x03h\x03h\x05h\u0B6A\nh\x03h\x03h\x03h\x03h\x05h\u0B70\nh\x03h" +
		"\x05h\u0B73\nh\x03h\x03h\x05h\u0B77\nh\x03i\x03i\x03i\x03i\x03j\x03j\x03" +
		"j\x03j\x03j\x03j\x07j\u0B83\nj\fj\x0Ej\u0B86\vj\x03j\x03j\x05j\u0B8A\n" +
		"j\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x05l\u0B93\nl\x03l\x03l\x03l\x05" +
		"l\u0B98\nl\x03l\x03l\x03l\x03m\x03m\x03m\x03m\x03m\x07m\u0BA2\nm\fm\x0E" +
		"m\u0BA5\vm\x03m\x05m\u0BA8\nm\x03n\x03n\x05n\u0BAC\nn\x03n\x03n\x03n\x07" +
		"n\u0BB1\nn\fn\x0En\u0BB4\vn\x03n\x05n\u0BB7\nn\x03o\x03o\x03o\x03o\x05" +
		"o\u0BBD\no\x03o\x03o\x03o\x05o\u0BC2\no\x03o\x03o\x03p\x03p\x05p\u0BC8" +
		"\np\x03p\x03p\x03p\x03p\x03p\x03p\x05p\u0BD0\np\x03p\x05p\u0BD3\np\x03" +
		"q\x03q\x05q\u0BD7\nq\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03" +
		"q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03r\x03r\x03r\x03r\x03" +
		"r\x03r\x03r\x03r\x03s\x03s\x03s\x05s\u0BF7\ns\x03s\x03s\x07s\u0BFB\ns" +
		"\fs\x0Es\u0BFE\vs\x05s\u0C00\ns\x03t\x03t\x03t\x05t\u0C05\nt\x03u\x03" +
		"u\x05u\u0C09\nu\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03" +
		"v\x05v\u0C16\nv\x03v\x03v\x03v\x05v\u0C1B\nv\x03v\x03v\x03v\x05v\u0C20" +
		"\nv\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x05w\u0C29\nw\x03x\x03x\x03x\x03" +
		"x\x03x\x03x\x03x\x03x\x03x\x05x\u0C34\nx\x03x\x05x\u0C37\nx\x03y\x03y" +
		"\x03y\x05y\u0C3C\ny\x03y\x06y\u0C3F\ny\ry\x0Ey\u0C40\x05y\u0C43\ny\x03" +
		"z\x03z\x05z\u0C47\nz\x03{\x03{\x03{\x03{\x05{\u0C4D\n{\x03{\x03{\x03{" +
		"\x03{\x03{\x03{\x03{\x07{\u0C56\n{\f{\x0E{\u0C59\v{\x03{\x03{\x05{\u0C5D" +
		"\n{\x03|\x03|\x05|\u0C61\n|\x03|\x03|\x03|\x03|\x03|\x05|\u0C68\n|\x03" +
		"|\x03|\x03|\x03|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x03" +
		"}\x05}\u0C79\n}\x03}\x03}\x03}\x03}\x05}\u0C7F\n}\x03}\x03}\x03}\x03}" +
		"\x03}\x07}\u0C86\n}\f}\x0E}\u0C89\v}\x03}\x03}\x05}\u0C8D\n}\x03~\x03" +
		"~\x03~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u0C98\n" +
		"\x7F\f\x7F\x0E\x7F\u0C9B\v\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03\x80" +
		"\x05\x80\u0CA2\n\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
		"\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
		"\x81\x03\x81\x03\x81\x03\x81\x05\x81\u0CB7\n\x81\x03\x82\x03\x82\x05\x82" +
		"\u0CBB\n\x82\x03\x82\x03\x82\x03\x82\x05\x82\u0CC0\n\x82\x03\x82\x03\x82" +
		"\x03\x82\x03\x82\x03\x82\x03\x82\x05\x82\u0CC8\n\x82\x03\x82\x03\x82\x03" +
		"\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x07\x82\u0CD3\n\x82" +
		"\f\x82\x0E\x82\u0CD6\v\x82\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x05\x83\u0D0D\n\x83\x03\x84\x03\x84\x03\x84\x03\x85" +
		"\x03\x85\x03\x85\x05\x85\u0D15\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
		"\x85\x07\x85\u0D1C\n\x85\f\x85\x0E\x85\u0D1F\v\x85\x03\x85\x03\x85\x03" +
		"\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x07\x85\u0D2B" +
		"\n\x85\f\x85\x0E\x85\u0D2E\v\x85\x03\x85\x05\x85\u0D31\n\x85\x03\x85\x03" +
		"\x85\x03\x85\x03\x85\x05\x85\u0D37\n\x85\x03\x86\x03\x86\x03\x86\x03\x86" +
		"\x03\x86\x05\x86\u0D3E\n\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03" +
		"\x86\x05\x86\u0D46\n\x86\x03\x86\x03\x86\x03\x86\x05\x86\u0D4B\n\x86\x03" +
		"\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x05\x86\u0D54\n\x86" +
		"\x05\x86\u0D56\n\x86\x03\x87\x03\x87\x03\x87\x07\x87\u0D5B\n\x87\f\x87" +
		"\x0E\x87\u0D5E\v\x87\x03\x87\x05\x87\u0D61\n\x87\x03\x88\x03\x88\x05\x88" +
		"\u0D65\n\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03" +
		"\x88\x03\x88\x05\x88\u0D70\n\x88\x03\x88\x03\x88\x05\x88\u0D74\n\x88\x03" +
		"\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x07\x88\u0D7C\n\x88\f\x88" +
		"\x0E\x88\u0D7F\v\x88\x03\x88\x03\x88\x05\x88\u0D83\n\x88\x03\x88\x03\x88" +
		"\x05\x88\u0D87\n\x88\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x05\x89\u0D8E" +
		"\n\x89\x03\x8A\x05\x8A\u0D91\n\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03" +
		"\x8A\x03\x8A\x05\x8A\u0D99\n\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0D9E" +
		"\n\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0DA3\n\x8A\x05\x8A\u0DA5\n\x8A" +
		"\x03\x8A\x05\x8A\u0DA8\n\x8A\x06\x8A\u0DAA\n\x8A\r\x8A\x0E\x8A\u0DAB\x03" +
		"\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0DB2\n\x8A\x03\x8A\x05\x8A\u0DB5" +
		"\n\x8A\x03\x8A\x05\x8A\u0DB8\n\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0DBD" +
		"\n\x8A\x05\x8A\u0DBF\n\x8A\x03\x8A\x03\x8A\x05\x8A\u0DC3\n\x8A\x03\x8A" +
		"\x05\x8A\u0DC6\n\x8A\x03\x8A\x05\x8A\u0DC9\n\x8A\x03\x8A\x03\x8A\x03\x8A" +
		"\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0DD2\n\x8B\x03\x8B\x03\x8B\x03" +
		"\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u0DDE" +
		"\n\x8D\x05\x8D\u0DE0\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0DE4\n\x8D\x03\x8D" +
		"\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u0DEE" +
		"\n\x8D\x03\x8D\x05\x8D\u0DF1\n\x8D\x03\x8E\x05\x8E\u0DF4\n\x8E\x03\x8E" +
		"\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E" +
		"\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07\x8E" +
		"\u0E08\n\x8E\f\x8E\x0E\x8E\u0E0B\v\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E" +
		"\x03\x8E\x07\x8E\u0E12\n\x8E\f\x8E\x0E\x8E\u0E15\v\x8E\x03\x8E\x03\x8E" +
		"\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E" +
		"\x03\x8E\x03\x8E\x05\x8E\u0E24\n\x8E\x03\x8F\x03\x8F\x03\x8F\x07\x8F\u0E29" +
		"\n\x8F\f\x8F\x0E\x8F\u0E2C\v\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90" +
		"\x03\x91\x03\x91\x03\x91\x07\x91\u0E36\n\x91\f\x91\x0E\x91\u0E39\v\x91" +
		"\x03\x92\x03\x92\x05\x92\u0E3D\n\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03" +
		"\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x05\x92\u0E4B" +
		"\n\x92\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x05\x93" +
		"\u0E54\n\x93\x03\x93\x03\x93\x03\x93\x03\x93\x05\x93\u0E5A\n\x93\x03\x93" +
		"\x03\x93\x03\x93\x03\x93\x05\x93\u0E60\n\x93\x05\x93\u0E62\n\x93\x03\x94" +
		"\x03\x94\x03\x94\x03\x94\x03\x94\x05\x94\u0E69\n\x94\x03\x95\x03\x95\x03" +
		"\x95\x05\x95\u0E6E\n\x95\x03\x96\x03\x96\x03\x96\x07\x96\u0E73\n\x96\f" +
		"\x96\x0E\x96\u0E76\v\x96\x03\x97\x05\x97\u0E79\n\x97\x03\x97\x03\x97\x03" +
		"\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0E83\n\x98\x03\x99" +
		"\x03\x99\x03\x99\x03\x99\x03\x99\x05\x99\u0E8A\n\x99\x05\x99\u0E8C\n\x99" +
		"\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x05\x99\u0E93\n\x99\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x05\x9A\u0EAB\n\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0EBF\n\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0EC9\n\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0EDB" +
		"\n\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x05\x9A" +
		"\u0F11\n\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0F21\n\x9B" +
		"\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0F29\n\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x05\x9B\u0F2E\n\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B" +
		"\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B" +
		"\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0F40\n\x9B\x03\x9C\x03\x9C\x05\x9C\u0F44" +
		"\n\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u0F4B\n\x9C\x05" +
		"\x9C\u0F4D\n\x9C\x03\x9C\x03\x9C\x03\x9D\x06\x9D\u0F52\n\x9D\r\x9D\x0E" +
		"\x9D\u0F53\x03\x9D\x05\x9D\u0F57\n\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E" +
		"\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u0F62\n\x9F\f\x9F\x0E" +
		"\x9F\u0F65\v\x9F\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA1\x03\xA1" +
		"\x03\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0F73\n\xA2\f\xA2\x0E" +
		"\xA2\u0F76\v\xA2\x05\xA2\u0F78\n\xA2\x03\xA2\x05\xA2\u0F7B\n\xA2\x03\xA2" +
		"\x05\xA2\u0F7E\n\xA2\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03" +
		"\xA3\x07\xA3\u0F87\n\xA3\f\xA3\x0E\xA3\u0F8A\v\xA3\x03\xA4\x03\xA4\x07" +
		"\xA4\u0F8E\n\xA4\f\xA4\x0E\xA4\u0F91\v\xA4\x03\xA4\x03\xA4\x05\xA4\u0F95" +
		"\n\xA4\x03\xA5\x05\xA5\u0F98\n\xA5\x03\xA5\x05\xA5\u0F9B\n\xA5\x03\xA5" +
		"\x03\xA5\x03\xA5\x05\xA5\u0FA0\n\xA5\x03\xA6\x03\xA6\x03\xA7\x05\xA7\u0FA5" +
		"\n\xA7\x03\xA7\x03\xA7\x05\xA7\u0FA9\n\xA7\x03\xA7\x03\xA7\x07\xA7\u0FAD" +
		"\n\xA7\f\xA7\x0E\xA7\u0FB0\v\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8" +
		"\x03\xA8\x03\xA8\x05\xA8\u0FB9\n\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x05\xA8\u0FC0\n\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0FC6" +
		"\n\xA8\x03\xA8\x03\xA8\x05\xA8\u0FCA\n\xA8\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x05\xA8\u0FD0\n\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0FD6" +
		"\n\xA8\x03\xA9\x05\xA9\u0FD9\n\xA9\x03\xA9\x03\xA9\x03\xAA\x05\xAA\u0FDE" +
		"\n\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x05\xAC\u0FE6\n" +
		"\xAC\x03\xAC\x05\xAC\u0FE9\n\xAC\x03\xAC\x03\xAC\x05\xAC\u0FED\n\xAC\x03" +
		"\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0FF5\n\xAD\x03\xAD" +
		"\x03\xAD\x05\xAD\u0FF9\n\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x07\xAD\u0FFF" +
		"\n\xAD\f\xAD\x0E\xAD\u1002\v\xAD\x05\xAD\u1004\n\xAD\x03\xAD\x03\xAD\x05" +
		"\xAD\u1008\n\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u100D\n\xAD\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x07\xAE\u101D\n\xAE\f\xAE\x0E\xAE\u1020\v" +
		"\xAE\x05\xAE\u1022\n\xAE\x03\xAE\x03\xAE\x05\xAE\u1026\n\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x05\xAE\u102B\n\xAE\x05\xAE\u102D\n\xAE\x03\xAF\x03\xAF\x05" +
		"\xAF\u1031\n\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u1037\n\xAF\x03" +
		"\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x05\xB0\u1040\n\xB0" +
		"\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
		"\x03\xB2\x05\xB2\u104C\n\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u1051\n\xB2" +
		"\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u1059\n\xB2\x03" +
		"\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03" +
		"\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u106A\n\xB3\x03\xB3" +
		"\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u1070\n\xB3\x03\xB4\x03\xB4\x05\xB4\u1074" +
		"\n\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u107C\n" +
		"\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03" +
		"\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03" +
		"\xB7\x03\xB7\x03\xB7\x07\xB7\u1092\n\xB7\f\xB7\x0E\xB7\u1095\v\xB7\x03" +
		"\xB7\x03\xB7\x03\xB7\x03\xB7\x07\xB7\u109B\n\xB7\f\xB7\x0E\xB7\u109E\v" +
		"\xB7\x05\xB7\u10A0\n\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8" +
		"\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u10AB\n\xB8\x03\xB8\x03\xB8\x03\xB8\x03" +
		"\xB8\x03\xB8\x05\xB8\u10B2\n\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u10B7" +
		"\n\xB8\x05\xB8\u10B9\n\xB8\x03\xB8\x05\xB8\u10BC\n\xB8\x03\xB8\x03\xB8" +
		"\x05\xB8\u10C0\n\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u10C7" +
		"\n\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u10CC\n\xB9\x05\xB9\u10CE\n\xB9" +
		"\x03\xB9\x03\xB9\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u10D5\n\xBA\x03\xBA\x03" +
		"\xBA\x03\xBA\x03\xBA\x05\xBA\u10DB\n\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB" +
		"\x05\xBB\u10E1\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03" +
		"\xBB\x05\xBB\u10EA\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u10F0" +
		"\n\xBB\f\xBB\x0E\xBB\u10F3\v\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x05\xBC\u10FB\n\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u1100\n\xBC" +
		"\x03\xBC\x05\xBC\u1103\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03" +
		"\xBC\x05\xBC\u110B\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC" +
		"\u1112\n\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u1117\n\xBC\x05\xBC\u1119" +
		"\n\xBC\x03\xBC\x05\xBC\u111C\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u1122\n\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD" +
		"\x03\xBD\x05\xBD\u112C\n\xBD\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u1131\n\xBE" +
		"\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u1137\n\xBE\x03\xBF\x05\xBF\u113A" +
		"\n\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
		"\x03\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u114A\n\xC0\x03" +
		"\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x07\xC1\u1153\n\xC1" +
		"\f\xC1\x0E\xC1\u1156\v\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u115B\n\xC1" +
		"\x03\xC1\x05\xC1\u115E\n\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC3\x03" +
		"\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x07\xC3\u116D" +
		"\n\xC3\f\xC3\x0E\xC3\u1170\v\xC3\x05\xC3\u1172\n\xC3\x03\xC4\x05\xC4\u1175" +
		"\n\xC4\x03\xC4\x03\xC4\x05\xC4\u1179\n\xC4\x03\xC5\x03\xC5\x03\xC5\x03" +
		"\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u1184\n\xC5\x03\xC6" +
		"\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x05\xC7\u118E" +
		"\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u1194\n\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u1198\n\xC8\x03\xC8\x05\xC8\u119B\n\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x03\xC8\x03\xC8\x05\xC8\u11A2\n\xC8\x05\xC8\u11A4\n\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u11A8\n\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x05\xC9\u11B0\n\xC9\x03\xC9\x03\xC9\x05\xC9\u11B4\n\xC9\x03\xC9\x03\xC9" +
		"\x05\xC9\u11B8\n\xC9\x03\xC9\x05\xC9\u11BB\n\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x03\xC9\x03\xC9\x05\xC9\u11C2\n\xC9\x05\xC9\u11C4\n\xC9\x03\xCA\x03\xCA" +
		"\x05\xCA\u11C8\n\xCA\x03\xCA\x07\xCA\u11CB\n\xCA\f\xCA\x0E\xCA\u11CE\v" +
		"\xCA\x03\xCB\x05\xCB\u11D1\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u11D6" +
		"\n\xCB\x03\xCB\x03\xCB\x05\xCB\u11DA\n\xCB\x03\xCB\x03\xCB\x05\xCB\u11DE" +
		"\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u11E3\n\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x05\xCB\u11E8\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x05\xCB\u11F2\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x03\xCB\x05\xCB\u11FA\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x05\xCB\u120C\n\xCB\x03\xCC\x03\xCC\x05\xCC\u1210\n\xCC" +
		"\x03\xCC\x05\xCC\u1213\n\xCC\x03\xCC\x05\xCC\u1216\n\xCC\x03\xCC\x05\xCC" +
		"\u1219\n\xCC\x03\xCC\x03\xCC\x05\xCC\u121D\n\xCC\x03\xCC\x03\xCC\x05\xCC" +
		"\u1221\n\xCC\x03\xCC\x03\xCC\x05\xCC\u1225\n\xCC\x03\xCC\x03\xCC\x05\xCC" +
		"\u1229\n\xCC\x03\xCC\x05\xCC\u122C\n\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC" +
		"\u1231\n\xCC\x03\xCC\x03\xCC\x05\xCC\u1235\n\xCC\x03\xCC\x05\xCC\u1238" +
		"\n\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u1245\n\xCF\f\xCF\x0E\xCF\u1248\v\xCF" +
		"\x03\xCF\x03\xCF\x03\xD0";
	private static readonly _serializedATNSegment2: string =
		"\x03\xD0\x05\xD0\u124E\n\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD1\x05\xD1\u1254" +
		"\n\xD1\x03\xD1\x03\xD1\x05\xD1\u1258\n\xD1\x03\xD1\x03\xD1\x05\xD1\u125C" +
		"\n\xD1\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u1261\n\xD1\x03\xD1\x03\xD1\x05" +
		"\xD1\u1265\n\xD1\x03\xD1\x05\xD1\u1268\n\xD1\x03\xD1\x05\xD1\u126B\n\xD1" +
		"\x03\xD1\x05\xD1\u126E\n\xD1\x03\xD2\x05\xD2\u1271\n\xD2\x03\xD2\x03\xD2" +
		"\x05\xD2\u1275\n\xD2\x03\xD2\x03\xD2\x05\xD2\u1279\n\xD2\x03\xD2\x03\xD2" +
		"\x05\xD2\u127D\n\xD2\x03\xD2\x03\xD2\x05\xD2\u1281\n\xD2\x03\xD2\x05\xD2" +
		"\u1284\n\xD2\x03\xD2\x05\xD2\u1287\n\xD2\x03\xD2\x05\xD2\u128A\n\xD2\x03" +
		"\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u1290\n\xD2\x03\xD2\x03\xD2\x05\xD2" +
		"\u1294\n\xD2\x03\xD2\x05\xD2\u1297\n\xD2\x03\xD3\x03\xD3\x03\xD3\x05\xD3" +
		"\u129C\n\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u12A1\n\xD3\x03\xD3\x03\xD3" +
		"\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u12A8\n\xD4\x03\xD5\x03\xD5\x03\xD5\x03" +
		"\xD5\x05\xD5\u12AE\n\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD6\x03\xD6" +
		"\x05\xD6\u12B6\n\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x07\xD7\u12BD" +
		"\n\xD7\f\xD7\x0E\xD7\u12C0\v\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x05\xD7\u12D1\n\xD7\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x07\xD8\u12D7" +
		"\n\xD8\f\xD8\x0E\xD8\u12DA\v\xD8\x03\xD8\x03\xD8\x03\xD9\x03\xD9\x03\xD9" +
		"\x03\xD9\x07\xD9\u12E2\n\xD9\f\xD9\x0E\xD9\u12E5\v\xD9\x05\xD9\u12E7\n" +
		"\xD9\x03\xD9\x03\xD9\x03\xD9\x05\xD9\u12EC\n\xD9\x03\xDA\x03\xDA\x03\xDA" +
		"\x05\xDA\u12F1\n\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x03" +
		"\xDC\x03\xDC\x03\xDC\x07\xDC\u12FC\n\xDC\f\xDC\x0E\xDC\u12FF\v\xDC\x03" +
		"\xDC\x03\xDC\x03\xDD\x03\xDD\x05\xDD\u1305\n\xDD\x03\xDE\x03\xDE\x03\xDE" +
		"\x05\xDE\u130A\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x07\xDF\u1311" +
		"\n\xDF\f\xDF\x0E\xDF\u1314\v\xDF\x03\xDF\x03\xDF\x03\xE0\x05\xE0\u1319" +
		"\n\xE0\x03\xE0\x03\xE0\x05\xE0\u131D\n\xE0\x03\xE1\x03\xE1\x05\xE1\u1321" +
		"\n\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x07\xE2\u1327\n\xE2\f\xE2\x0E\xE2" +
		"\u132A\v\xE2\x03\xE2\x03\xE2\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x07" +
		"\xE3\u1333\n\xE3\f\xE3\x0E\xE3\u1336\v\xE3\x05\xE3\u1338\n\xE3\x03\xE4" +
		"\x03\xE4\x03\xE4\x05\xE4\u133D\n\xE4\x03\xE4\x07\xE4\u1340\n\xE4\f\xE4" +
		"\x0E\xE4\u1343\v\xE4\x03\xE4\x05\xE4\u1346\n\xE4\x03\xE5\x03\xE5\x03\xE5" +
		"\x05\xE5\u134B\n\xE5\x03\xE5\x05\xE5\u134E\n\xE5\x03\xE5\x07\xE5\u1351" +
		"\n\xE5\f\xE5\x0E\xE5\u1354\v\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE7\x03\xE7" +
		"\x05\xE7\u135B\n\xE7\x03\xE7\x03\xE7\x05\xE7\u135F\n\xE7\x03\xE7\x05\xE7" +
		"\u1362\n\xE7\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u1367\n\xE8\x03\xE8\x03\xE8" +
		"\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u1372" +
		"\n\xE8\f\xE8\x0E\xE8\u1375\v\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8" +
		"\u137B\n\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u1380\n\xE8\x03\xE8\x03\xE8" +
		"\x03\xE8\x05\xE8\u1385\n\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x07" +
		"\xE8\u138C\n\xE8\f\xE8\x0E\xE8\u138F\v\xE8\x03\xE8\x03\xE8\x03\xE8\x03" +
		"\xE8\x03\xE8\x03\xE8\x05\xE8\u1397\n\xE8\x03\xE8\x05\xE8\u139A\n\xE8\x03" +
		"\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u13A0\n\xE8\x03\xE8\x05\xE8\u13A3" +
		"\n\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8" +
		"\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u13B1\n\xE8\x03\xE9\x03\xE9\x03" +
		"\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03" +
		"\xE9\x03\xE9\x05\xE9\u13C0\n\xE9\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA" +
		"\u13CF\n\xEA\x03\xEB\x03\xEB\x03\xEC\x05\xEC\u13D4\n\xEC\x03\xEC\x05\xEC" +
		"\u13D7\n\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x05\xEC\u13DD\n\xEC\x05\xEC" +
		"\u13DF\n\xEC\x03\xED\x03\xED\x03\xED\x03\xED\x03\xEE\x03\xEE\x03\xEE\x07" +
		"\xEE\u13E8\n\xEE\f\xEE\x0E\xEE\u13EB\v\xEE\x03\xEF\x03\xEF\x03\xEF\x03" +
		"\xEF\x07\xEF\u13F1\n\xEF\f\xEF\x0E\xEF\u13F4\v\xEF\x03\xEF\x03\xEF\x03" +
		"\xF0\x03\xF0\x03\xF0\x05\xF0\u13FB\n\xF0\x03\xF1\x03\xF1\x03\xF1\x05\xF1" +
		"\u1400\n\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03" +
		"\xF3\x05\xF3\u140A\n\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
		"\x03\xF4\x05\xF4\u1413\n\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03" +
		"\xF6\x03\xF6\x03\xF6\x05\xF6\u141D\n\xF6\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
		"\x03\xF7\x05\xF7\u1424\n\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF9\x03" +
		"\xF9\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x05\xFA\u1437\n\xFA\x05\xFA\u1439\n\xFA\x03\xFB\x03" +
		"\xFB\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x07\xFC\u1442\n\xFC\f\xFC" +
		"\x0E\xFC\u1445\v\xFC\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFF\x03" +
		"\xFF\x05\xFF\u144E\n\xFF\x03\xFF\x05\xFF\u1451\n\xFF\x03\u0100\x03\u0100" +
		"\x03\u0101\x06\u0101\u1456\n\u0101\r\u0101\x0E\u0101\u1457\x03\u0101\x07" +
		"\u0101\u145B\n\u0101\f\u0101\x0E\u0101\u145E\v\u0101\x03\u0101\x03\u0101" +
		"\x05\u0101\u1462\n\u0101\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u146C\n\u0102\x03\u0102\x03\u0102" +
		"\x05\u0102\u1470\n\u0102\x03\u0102\x05\u0102\u1473\n\u0102\x03\u0103\x03" +
		"\u0103\x05\u0103\u1477\n\u0103\x03\u0103\x03\u0103\x05\u0103\u147B\n\u0103" +
		"\x03\u0103\x05\u0103\u147E\n\u0103\x03\u0104\x03\u0104\x05\u0104\u1482" +
		"\n\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1488\n\u0104" +
		"\x03\u0105\x03\u0105\x05\u0105\u148C\n\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u1492\n\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x05\u0106\u149F\n\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x03\u0106\x05\u0106\u14A7\n\u0106\x03\u0106\x05\u0106\u14AA\n\u0106\x03" +
		"\u0106\x03\u0106\x05\u0106\u14AE\n\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x05\u0106\u14BE\n\u0106\x03\u0106" +
		"\x03\u0106\x03\u0107\x05\u0107\u14C3\n\u0107\x03\u0107\x03\u0107\x05\u0107" +
		"\u14C7\n\u0107\x03\u0108\x03\u0108\x03\u0108\x05\u0108\u14CC\n\u0108\x03" +
		"\u0109\x03\u0109\x03\u0109\x05\u0109\u14D1\n\u0109\x03\u010A\x03\u010A" +
		"\x03\u010A\x05\u010A\u14D6\n\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
		"\x03\u010B\x05\u010B\u14DD\n\u010B\x03\u010C\x03\u010C\x03\u010D\x03\u010D" +
		"\x03\u010E\x03\u010E\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x03\u0111" +
		"\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x05\u0111\u14EE\n\u0111\x03\u0112" +
		"\x03\u0112\x03\u0112\x07\u0112\u14F3\n\u0112\f\u0112\x0E\u0112\u14F6\v" +
		"\u0112\x03\u0113\x05\u0113\u14F9\n\u0113\x03\u0113\x03\u0113\x03\u0113" +
		"\x05\u0113\u14FE\n\u0113\x03\u0113\x06\u0113\u1501\n\u0113\r\u0113\x0E" +
		"\u0113\u1502\x05\u0113\u1505\n\u0113\x03\u0114\x03\u0114\x05\u0114\u1509" +
		"\n\u0114\x03\u0114\x03\u0114\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u1510" +
		"\n\u0115\x03\u0115\x05\u0115\u1513\n\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x05\u0115\u1518\n\u0115\x03\u0115\x03\u0115\x05\u0115\u151C\n\u0115\x03" +
		"\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u1522\n\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u1528\n\u0115\x03\u0115\x05\u0115" +
		"\u152B\n\u0115\x03\u0115\x05\u0115\u152E\n\u0115\x03\u0115\x03\u0115\x05" +
		"\u0115\u1532\n\u0115\x03\u0115\x05\u0115\u1535\n\u0115\x03\u0115\x03\u0115" +
		"\x05\u0115\u1539\n\u0115\x03\u0115\x05\u0115\u153C\n\u0115\x03\u0115\x03" +
		"\u0115\x05\u0115\u1540\n\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x05\u0115\u1546\n\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u154B" +
		"\n\u0115\x03\u0115\x03\u0115\x05\u0115\u154F\n\u0115\x03\u0115\x03\u0115" +
		"\x03\u0115\x05\u0115\u1554\n\u0115\x03\u0115\x03\u0115\x05\u0115\u1558" +
		"\n\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x07\u0115\u155F" +
		"\n\u0115\f\u0115\x0E\u0115\u1562\v\u0115\x03\u0115\x03\u0115\x05\u0115" +
		"\u1566\n\u0115\x05\u0115\u1568\n\u0115\x03\u0116\x03\u0116\x03\u0116\x03" +
		"\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03" +
		"\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03" +
		"\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03" +
		"\u0116\x03\u0116\x03\u0116\x05\u0116\u1585\n\u0116\x03\u0117\x03\u0117" +
		"\x03\u0117\x03\u0117\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118" +
		"\u158F\n\u0118\x03\u0118\x03\u0118\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x05\u0119\u1598\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x06\u0119\u159E\n\u0119\r\u0119\x0E\u0119\u159F\x03\u0119\x03\u0119\x03" +
		"\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03" +
		"\u0119\x05\u0119\u15AC\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x05\u0119\u15C2\n\u0119\x03\u0119\x03\u0119\x05\u0119" +
		"\u15C6\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x05\u0119\u15CE\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119" +
		"\u15D4\n\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u15D9\n\u0119\x03" +
		"\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u15DF\n\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x05\u0119\u15EB\n\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x05\u0119\u15FF\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x07\u0119\u1607\n\u0119\f\u0119\x0E\u0119\u160A\v" +
		"\u0119\x05\u0119\u160C\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x05\u0119\u1613\n\u0119\x03\u0119\x03\u0119\x05\u0119\u1617" +
		"\n\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u161C\n\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u1622\n\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x05\u0119\u1628\n\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x07\u0119" +
		"\u1633\n\u0119\f\u0119\x0E\u0119\u1636\v\u0119\x03\u011A\x03\u011A\x03" +
		"\u011A\x03\u011A\x03\u011A\x05\u011A\u163D\n\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x06\u011A\u1643\n\u011A\r\u011A\x0E\u011A\u1644\x03" +
		"\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03" +
		"\u011A\x05\u011A\u164F\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x05\u011A\u1664\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x05\u011A\u1671\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x05\u011A" +
		"\u1677\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x05\u011A\u167D" +
		"\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x07\u011A\u1684" +
		"\n\u011A\f\u011A\x0E\u011A\u1687\v\u011A\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u1691\n\u011B" +
		"\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011C\x05\u011C\u169B\n\u011C\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
		"\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
		"\x03\u011D\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E" +
		"\u16AE\n\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E" +
		"\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u16BB\n\u011E" +
		"\x03\u011F\x03\u011F\x03\u011F\x05\u011F\u16C0\n\u011F\x03\u0120\x03\u0120" +
		"\x03\u0121\x03\u0121\x03\u0122\x03\u0122\x05\u0122\u16C8\n\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x06\u0122\u16CF\n\u0122\r\u0122" +
		"\x0E\u0122\u16D0\x03\u0122\x03\u0122\x05\u0122\u16D5\n\u0122\x03\u0122" +
		"\x03\u0122\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123" +
		"\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u16E3\n\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x07\u0124\u16E8\n\u0124\f\u0124\x0E\u0124\u16EB\v" +
		"\u0124\x03\u0124\x05\u0124\u16EE\n\u0124\x05\u0124\u16F0\n\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124" +
		"\u16F9\n\u0124\x03\u0124\x05\u0124\u16FC\n\u0124\x03\u0124\x03\u0124\x03" +
		"\u0124\x05\u0124\u1701\n\u0124\x05\u0124\u1703\n\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u170B\n\u0124\x03\u0125" +
		"\x05\u0125\u170E\n\u0125\x03\u0125\x03\u0125\x03\u0125\x05\u0125\u1713" +
		"\n\u0125\x03\u0125\x03\u0125\x03\u0126\x03\u0126\x03\u0127\x03\u0127\x03" +
		"\u0127\x03\u0127\x03\u0127\x07\u0127\u171E\n\u0127\f\u0127\x0E\u0127\u1721" +
		"\v\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03" +
		"\u0127\x07\u0127\u172A\n\u0127\f\u0127\x0E\u0127\u172D\v\u0127\x05\u0127" +
		"\u172F\n\u0127\x03\u0127\x05\u0127\u1732\n\u0127\x03\u0128\x03\u0128\x03" +
		"\u0128\x03\u0128\x05\u0128\u1738\n\u0128\x03\u0128\x03\u0128\x03\u0128" +
		"\x03\u0128\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x05\u0129\u1744\n\u0129\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u1749" +
		"\n\u012A\x03\u012A\x03\u012A\x05\u012A\u174D\n\u012A\x03\u012A\x03\u012A" +
		"\x05\u012A\u1751\n\u012A\x03\u012A\x03\u012A\x05\u012A\u1755\n\u012A\x05" +
		"\u012A\u1757\n\u012A\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u175C\n\u012B" +
		"\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u1763\n\u012B" +
		"\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u1768\n\u012B\x05\u012B\u176A" +
		"\n\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03" +
		"\u012B\x07\u012B\u1773\n\u012B\f\u012B\x0E\u012B\u1776\v\u012B\x03\u012B" +
		"\x03\u012B\x05\u012B\u177A\n\u012B\x03\u012B\x03\u012B\x05\u012B\u177E" +
		"\n\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03" +
		"\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03" +
		"\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u1792\n\u012B" +
		"\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B" +
		"\x03\u012B\x05\u012B\u179C\n\u012B\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C" +
		"\u17A8\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17AE" +
		"\n\u012C\x07\u012C\u17B0\n\u012C\f\u012C\x0E\u012C\u17B3\v\u012C\x03\u012C" +
		"\x03\u012C\x05\u012C\u17B7\n\u012C\x03\u012C\x03\u012C\x07\u012C\u17BB" +
		"\n\u012C\f\u012C\x0E\u012C\u17BE\v\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17C7\n\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17CD\n\u012C\x07\u012C\u17CF" +
		"\n\u012C\f\u012C\x0E\u012C\u17D2\v\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17DC\n\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17E8\n\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17F0\n\u012C\x05\u012C" +
		"\u17F2\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x05\u012C\u17FC\n\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x05\u012C\u1801\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x07\u012C\u181F\n\u012C\f\u012C\x0E\u012C\u1822\v" +
		"\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u1827\n\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u182D\n\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x05\u012C\u1832\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x07\u012C\u1838\n\u012C\f\u012C\x0E\u012C\u183B\v\u012C\x03\u012C\x03" +
		"\u012C\x05\u012C\u183F\n\u012C\x03\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x05\u012D\u1845\n\u012D\x03\u012D\x03\u012D\x05\u012D\u1849\n\u012D\x03" +
		"\u012D\x05\u012D\u184C\n\u012D\x03\u012D\x05\u012D\u184F\n\u012D\x03\u012D" +
		"\x03\u012D\x05\u012D\u1853\n\u012D\x03\u012E\x03\u012E\x03\u012E\x03\u012E" +
		"\x05\u012E\u1859\n\u012E\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x03\u012F" +
		"\x03\u012F\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x05\u0130\u1865\n\u0130" +
		"\x03\u0130\x05\u0130\u1868\n\u0130\x03\u0130\x05\u0130\u186B\n\u0130\x03" +
		"\u0130\x05\u0130\u186E\n\u0130\x03\u0130\x03\u0130\x03\u0131\x03\u0131" +
		"\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x05\u0131\u1879\n\u0131" +
		"\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131" +
		"\x05\u0131\u1882\n\u0131\x05\u0131\u1884\n\u0131\x03\u0132\x03\u0132\x03" +
		"\u0132\x03\u0132\x03\u0132\x05\u0132\u188B\n\u0132\x03\u0133\x03\u0133" +
		"\x03\u0133\x05\u0133\u1890\n\u0133\x03\u0134\x03\u0134\x03\u0134\x05\u0134" +
		"\u1895\n\u0134\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u189A\n\u0134\x07" +
		"\u0134\u189C\n\u0134\f\u0134\x0E\u0134\u189F\v\u0134\x05\u0134\u18A1\n" +
		"\u0134\x03\u0134\x03\u0134\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03" +
		"\u0135\x03\u0135\x03\u0135\x05\u0135\u18AC\n\u0135\x05\u0135\u18AE\n\u0135" +
		"\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136\u18B5\n\u0136" +
		"\x05\u0136\u18B7\n\u0136\x03\u0137\x03\u0137\x03\u0138\x03\u0138\x03\u0138" +
		"\x03\u0138\x03\u0139\x05\u0139\u18C0\n\u0139\x03\u0139\x03\u0139\x07\u0139" +
		"\u18C4\n\u0139\f\u0139\x0E\u0139\u18C7\v\u0139\x03\u013A\x03\u013A\x03" +
		"\u013A\x03\u013A\x05\u013A\u18CD\n\u013A\x03\u013A\x03\u013A\x03\u013A" +
		"\x05\u013A\u18D2\n\u013A\x03\u013A\x03\u013A\x03\u013A\x05\u013A\u18D7" +
		"\n\u013A\x03\u013A\x03\u013A\x05\u013A\u18DB\n\u013A\x03\u013A\x03\u013A" +
		"\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x05\u013A" +
		"\u18E5\n\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A\u18EB" +
		"\n\u013A\f\u013A\x0E\u013A\u18EE\v\u013A\x05\u013A\u18F0\n\u013A\x03\u013A" +
		"\x03\u013A\x03\u013A\x05\u013A\u18F5\n\u013A\x05\u013A\u18F7\n\u013A\x03" +
		"\u013B\x05\u013B\u18FA\n\u013B\x03\u013B\x03\u013B\x07\u013B\u18FE\n\u013B" +
		"\f\u013B\x0E\u013B\u1901\v\u013B\x03\u013C\x03\u013C\x05\u013C\u1905\n" +
		"\u013C\x03\u013C\x03\u013C\x03\u013C\x07\u013C\u190A\n\u013C\f\u013C\x0E" +
		"\u013C\u190D\v\u013C\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D" +
		"\x07\u013D\u1914\n\u013D\f\u013D\x0E\u013D\u1917\v\u013D\x03\u013D\x03" +
		"\u013D\x05\u013D\u191B\n\u013D\x03\u013D\x03\u013D\x05\u013D\u191F\n\u013D" +
		"\x03\u013D\x05\u013D\u1922\n\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D" +
		"\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x05\u013E" +
		"\u192E\n\u013E\x03\u013E\x03\u013E\x03\u013E\x05\u013E\u1933\n\u013E\x03" +
		"\u013E\x07\u013E\u1936\n\u013E\f\u013E\x0E\u013E\u1939\v\u013E\x03\u013F" +
		"\x03\u013F\x03\u013F\x05\u013F\u193E\n\u013F\x03\u013F\x03\u013F\x03\u013F" +
		"\x03\u013F\x03\u013F\x05\u013F\u1945\n\u013F\x03\u013F\x05\u013F\u1948" +
		"\n\u013F\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03" +
		"\u0140\x07\u0140\u1951\n\u0140\f\u0140\x0E\u0140\u1954\v\u0140\x03\u0140" +
		"\x03\u0140\x05\u0140\u1958\n\u0140\x05\u0140\u195A\n\u0140\x03\u0140\x05" +
		"\u0140\u195D\n\u0140\x03\u0140\x05\u0140\u1960\n\u0140\x03\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x07\u0140\u1966\n\u0140\f\u0140\x0E\u0140\u1969\v" +
		"\u0140\x05\u0140\u196B\n\u0140\x03\u0140\x03\u0140\x05\u0140\u196F\n\u0140" +
		"\x03\u0140\x05\u0140\u1972\n\u0140\x03\u0140\x03\u0140\x05\u0140\u1976" +
		"\n\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03" +
		"\u0140\x03\u0140\x03\u0140\x07\u0140\u1981\n\u0140\f\u0140\x0E\u0140\u1984" +
		"\v\u0140\x05\u0140\u1986\n\u0140\x03\u0140\x03\u0140\x05\u0140\u198A\n" +
		"\u0140\x03\u0140\x03\u0140\x05\u0140\u198E\n\u0140\x03\u0140\x05\u0140" +
		"\u1991\n\u0140\x03\u0141\x03\u0141\x03\u0141\x07\u0141\u1996\n\u0141\f" +
		"\u0141\x0E\u0141\u1999\v\u0141\x03\u0142\x03\u0142\x03\u0142\x03\u0142" +
		"\x05\u0142\u199F\n\u0142\x03\u0143\x03\u0143\x05\u0143\u19A3\n\u0143\x03" +
		"\u0143\x05\u0143\u19A6\n\u0143\x03\u0143\x03\u0143\x03\u0144\x03\u0144" +
		"\x03\u0144\x03\u0144\x03\u0144\x05\u0144\u19AF\n\u0144\x03\u0144\x05\u0144" +
		"\u19B2\n\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144" +
		"\x03\u0144\x03\u0144\x03\u0144\x05\u0144\u19BD\n\u0144\x05\u0144\u19BF" +
		"\n\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x05" +
		"\u0144\u19C7\n\u0144\x05\u0144\u19C9\n\u0144\x03\u0144\x03\u0144\x03\u0144" +
		"\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x05\u0144" +
		"\u19D4\n\u0144\x05\u0144\u19D6\n\u0144\x03\u0144\x03\u0144\x03\u0144\x03" +
		"\u0144\x03\u0144\x07\u0144\u19DD\n\u0144\f\u0144\x0E\u0144\u19E0\v\u0144" +
		"\x03\u0145\x05\u0145\u19E3\n\u0145\x03\u0145\x03\u0145\x05\u0145\u19E7" +
		"\n\u0145\x03\u0145\x05\u0145\u19EA\n\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x03\u0145\x03\u0145\x03\u0145\x07\u0145\u19F2\n\u0145\f\u0145\x0E\u0145" +
		"\u19F5\v\u0145\x03\u0145\x03\u0145\x03\u0145\x05\u0145\u19FA\n\u0145\x05" +
		"\u0145\u19FC\n\u0145\x03\u0145\x05\u0145\u19FF\n\u0145\x03\u0145\x03\u0145" +
		"\x03\u0145\x03\u0145\x05\u0145\u1A05\n\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x05\u0145\u1A0A\n\u0145\x03\u0145\x03\u0145\x03\u0145\x05\u0145\u1A0F" +
		"\n\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x07\u0145\u1A16" +
		"\n\u0145\f\u0145\x0E\u0145\u1A19\v\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x05\u0145\u1A1E\n\u0145\x05\u0145\u1A20\n\u0145\x03\u0145\x05\u0145\u1A23" +
		"\n\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x05" +
		"\u0145\u1A2B\n\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x05\u0145" +
		"\u1A31\n\u0145\x07\u0145\u1A33\n\u0145\f\u0145\x0E\u0145\u1A36\v\u0145" +
		"\x03\u0145\x03\u0145\x03\u0145\x05\u0145\u1A3B\n\u0145\x03\u0145\x05\u0145" +
		"\u1A3E\n\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x07\u0145" +
		"\u1A45\n\u0145\f\u0145\x0E\u0145\u1A48\v\u0145\x03\u0145\x03\u0145\x05" +
		"\u0145\u1A4C\n\u0145\x05\u0145\u1A4E\n\u0145\x05\u0145\u1A50\n\u0145\x03" +
		"\u0146\x05\u0146\u1A53\n\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146" +
		"\x03\u0146\x07\u0146\u1A5A\n\u0146\f\u0146\x0E\u0146\u1A5D\v\u0146\x03" +
		"\u0146\x03\u0146\x05\u0146\u1A61\n\u0146\x03\u0147\x03\u0147\x03\u0147" +
		"\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x07\u0147\u1A6A\n\u0147\f\u0147" +
		"\x0E\u0147\u1A6D\v\u0147\x03\u0147\x03\u0147\x03\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x03\u0149\x03\u0149\x03\u0149\x07\u0149\u1A78\n\u0149\f\u0149" +
		"\x0E\u0149\u1A7B\v\u0149\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014A\x05\u014A\u1A84\n\u014A\x03\u014A\x03\u014A\x03\u014A" +
		"\x03\u014A\x05\u014A\u1A8A\n\u014A\x03\u014B\x03\u014B\x03\u014B\x03\u014B" +
		"\x07\u014B\u1A90\n\u014B\f\u014B\x0E\u014B\u1A93\v\u014B\x03\u014C\x03" +
		"\u014C\x03\u014C\x05\u014C\u1A98\n\u014C\x03\u014C\x03\u014C\x03\u014C" +
		"\x05\u014C\u1A9D\n\u014C\x07\u014C\u1A9F\n\u014C\f\u014C\x0E\u014C\u1AA2" +
		"\v\u014C\x03\u014C\x03\u014C\x03\u014D\x03\u014D\x03\u014D\x03\u014D\x03" +
		"\u014E\x03\u014E\x03\u014E\x07\u014E\u1AAD\n\u014E\f\u014E\x0E\u014E\u1AB0" +
		"\v\u014E\x03\u014F\x03\u014F\x05\u014F\u1AB4\n\u014F\x03\u014F\x05\u014F" +
		"\u1AB7\n\u014F\x03\u014F\x05\u014F\u1ABA\n\u014F\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x05\u0150\u1AC0\n\u0150\x03\u0151\x03\u0151\x03\u0151" +
		"\x03\u0152\x05\u0152\u1AC6\n\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152" +
		"\x03\u0152\x05\u0152\u1ACD\n\u0152\x03\u0152\x03\u0152\x03\u0152\x05\u0152" +
		"\u1AD2\n\u0152\x03\u0152\x05\u0152\u1AD5\n\u0152\x03\u0152\x03\u0152\x03" +
		"\u0152\x05\u0152\u1ADA\n\u0152\x03\u0152\x03\u0152\x03\u0152\x05\u0152" +
		"\u1ADF\n\u0152\x03\u0152\x05\u0152\u1AE2\n\u0152\x03\u0152\x03\u0152\x05" +
		"\u0152\u1AE6\n\u0152\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x07\u0153" +
		"\u1AEC\n\u0153\f\u0153\x0E\u0153\u1AEF\v\u0153\x03\u0153\x03\u0153\x03" +
		"\u0154\x03\u0154\x05\u0154\u1AF5\n\u0154\x03\u0155\x03\u0155\x05\u0155" +
		"\u1AF9\n\u0155\x03\u0155\x03\u0155\x03\u0155\x05\u0155\u1AFE\n\u0155\x03" +
		"\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03" +
		"\u0156\x07\u0156\u1B08\n\u0156\f\u0156\x0E\u0156\u1B0B\v\u0156\x03\u0156" +
		"\x03\u0156\x05\u0156\u1B0F\n\u0156\x05\u0156\u1B11\n\u0156\x03\u0157\x05" +
		"\u0157\u1B14\n\u0157\x03\u0157\x03\u0157\x03\u0157\x05\u0157\u1B19\n\u0157" +
		"\x03\u0157\x03\u0157\x05\u0157\u1B1D\n\u0157\x03\u0157\x05\u0157\u1B20" +
		"\n\u0157\x03\u0157\x05\u0157\u1B23\n\u0157\x03\u0157\x03\u0157\x03\u0157" +
		"\x03\u0157\x07\u0157\u1B29\n\u0157\f\u0157\x0E\u0157\u1B2C\v\u0157\x05" +
		"\u0157\u1B2E\n\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157" +
		"\x05\u0157\u1B35\n\u0157\x05\u0157\u1B37\n\u0157\x03\u0157\x03\u0157\x05" +
		"\u0157\u1B3B\n\u0157\x03\u0158\x05\u0158";
	private static readonly _serializedATNSegment3: string =
		"\u1B3E\n\u0158\x03\u0158\x03\u0158\x05\u0158\u1B42\n\u0158\x03\u0158\x03" +
		"\u0158\x05\u0158\u1B46\n\u0158\x03\u0158\x05\u0158\u1B49\n\u0158\x03\u0158" +
		"\x05\u0158\u1B4C\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x07\u0158" +
		"\u1B52\n\u0158\f\u0158\x0E\u0158\u1B55\v\u0158\x03\u0158\x03\u0158\x03" +
		"\u0158\x03\u0158\x07\u0158\u1B5B\n\u0158\f\u0158\x0E\u0158\u1B5E\v\u0158" +
		"\x05\u0158\u1B60\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
		"\x05\u0158\u1B67\n\u0158\x05\u0158\u1B69\n\u0158\x03\u0158\x03\u0158\x05" +
		"\u0158\u1B6D\n\u0158\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159" +
		"\u1B73\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x07\u0159\u1B79" +
		"\n\u0159\f\u0159\x0E\u0159\u1B7C\v\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x05\u0159\u1B81\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1B86" +
		"\n\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1B8B\n\u0159\x07\u0159" +
		"\u1B8D\n\u0159\f\u0159\x0E\u0159\u1B90\v\u0159\x03\u0159\x03\u0159\x05" +
		"\u0159\u1B94\n\u0159\x05\u0159\u1B96\n\u0159\x03\u015A\x03\u015A\x03\u015A" +
		"\x03\u015A\x05\u015A\u1B9C\n\u015A\x03\u015B\x03\u015B\x05\u015B\u1BA0" +
		"\n\u015B\x03\u015B\x03\u015B\x03\u015B\x07\u015B\u1BA5\n\u015B\f\u015B" +
		"\x0E\u015B\u1BA8\v\u015B\x03\u015B\x03\u015B\x05\u015B\u1BAC\n\u015B\x03" +
		"\u015B\x05\u015B\u1BAF\n\u015B\x03\u015C\x03\u015C\x03\u015C\x07\u015C" +
		"\u1BB4\n\u015C\f\u015C\x0E\u015C\u1BB7\v\u015C\x03\u015D\x03\u015D\x03" +
		"\u015D\x03\u015D\x05\u015D\u1BBD\n\u015D\x05\u015D\u1BBF\n\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u1BC7\n\u015D" +
		"\x05\u015D\u1BC9\n\u015D\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x05\u015E" +
		"\u1BCF\n\u015E\x03\u015F\x05\u015F\u1BD2\n\u015F\x03\u015F\x05\u015F\u1BD5" +
		"\n\u015F\x03\u015F\x03\u015F\x03\u015F\x05\u015F\u1BDA\n\u015F\x03\u015F" +
		"\x03\u015F\x05\u015F\u1BDE\n\u015F\x03\u0160\x03\u0160\x03\u0160\x03\u0160" +
		"\x03\u0161\x03\u0161\x07\u0161\u1BE6\n\u0161\f\u0161\x0E\u0161\u1BE9\v" +
		"\u0161\x03\u0162\x07\u0162\u1BEC\n\u0162\f\u0162\x0E\u0162\u1BEF\v\u0162" +
		"\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0163\x05\u0163\u1BF6\n\u0163" +
		"\x03\u0163\x03\u0163\x05\u0163\u1BFA\n\u0163\x03\u0163\x03\u0163\x05\u0163" +
		"\u1BFE\n\u0163\x03\u0163\x03\u0163\x05\u0163\u1C02\n\u0163\x03\u0163\x03" +
		"\u0163\x03\u0163\x03\u0163\x05\u0163\u1C08\n\u0163\x03\u0163\x05\u0163" +
		"\u1C0B\n\u0163\x03\u0163\x05\u0163\u1C0E\n\u0163\x03\u0163\x03\u0163\x03" +
		"\u0163\x03\u0163\x03\u0163\x05\u0163\u1C15\n\u0163\x03\u0163\x03\u0163" +
		"\x05\u0163\u1C19\n\u0163\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x07\u0164\u1C21\n\u0164\f\u0164\x0E\u0164\u1C24\v\u0164\x03" +
		"\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03" +
		"\u0165\x03\u0165\x05\u0165\u1C2F\n\u0165\x03\u0166\x03\u0166\x03\u0166" +
		"\x03\u0166\x03\u0166\x03\u0166\x06\u0166\u1C37\n\u0166\r\u0166\x0E\u0166" +
		"\u1C38\x03\u0167\x03\u0167\x03\u0167\x07\u0167\u1C3E\n\u0167\f\u0167\x0E" +
		"\u0167\u1C41\v\u0167\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168" +
		"\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x05\u0168\u1C4C\n\u0168\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x05\u0169\u1C53\n\u0169\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x07\u0169\u1C59\n\u0169\f\u0169\x0E\u0169" +
		"\u1C5C\v\u0169\x03\u0169\x05\u0169\u1C5F\n\u0169\x03\u016A\x03\u016A\x05" +
		"\u016A\u1C63\n\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x07\u016A" +
		"\u1C69\n\u016A\f\u016A\x0E\u016A\u1C6C\v\u016A\x03\u016B\x03\u016B\x03" +
		"\u016B\x03\u016B\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x03" +
		"\u016C\x07\u016C\u1C78\n\u016C\f\u016C\x0E\u016C\u1C7B\v\u016C\x03\u016C" +
		"\x03\u016C\x05\u016C\u1C7F\n\u016C\x05\u016C\u1C81\n\u016C\x03\u016C\x03" +
		"\u016C\x03\u016C\x03\u016C\x03\u016C\x07\u016C\u1C88\n\u016C\f\u016C\x0E" +
		"\u016C\u1C8B\v\u016C\x05\u016C\u1C8D\n\u016C\x03\u016C\x03\u016C\x05\u016C" +
		"\u1C91\n\u016C\x03\u016C\x05\u016C\u1C94\n\u016C\x03\u016C\x03\u016C\x05" +
		"\u016C\u1C98\n\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x03\u016C" +
		"\x03\u016C\x03\u016C\x03\u016C\x03\u016C\x07\u016C\u1CA3\n\u016C\f\u016C" +
		"\x0E\u016C\u1CA6\v\u016C\x05\u016C\u1CA8\n\u016C\x03\u016C\x03\u016C\x05" +
		"\u016C\u1CAC\n\u016C\x03\u016C\x05\u016C\u1CAF\n\u016C\x03\u016C\x07\u016C" +
		"\u1CB2\n\u016C\f\u016C\x0E\u016C\u1CB5\v\u016C\x03\u016D\x03\u016D\x03" +
		"\u016D\x03\u016D\x05\u016D\u1CBB\n\u016D\x03\u016E\x03\u016E\x03\u016E" +
		"\x05\u016E\u1CC0\n\u016E\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x03\u016F" +
		"\x03\u016F\x05\u016F\u1CC8\n\u016F\x03\u0170\x03\u0170\x03\u0170\x05\u0170" +
		"\u1CCD\n\u0170\x03\u0170\x05\u0170\u1CD0\n\u0170\x03\u0170\x03\u0170\x03" +
		"\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x07" +
		"\u0170\u1CDB\n\u0170\f\u0170\x0E\u0170\u1CDE\v\u0170\x03\u0170\x03\u0170" +
		"\x05\u0170\u1CE2\n\u0170\x03\u0170\x03\u0170\x05\u0170\u1CE6\n\u0170\x03" +
		"\u0170\x05\u0170\u1CE9\n\u0170\x03\u0170\x03\u0170\x03\u0170\x05\u0170" +
		"\u1CEE\n\u0170\x03\u0170\x05\u0170\u1CF1\n\u0170\x03\u0170\x03\u0170\x03" +
		"\u0170\x05\u0170\u1CF6\n\u0170\x03\u0171\x03\u0171\x03\u0171\x05\u0171" +
		"\u1CFB\n\u0171\x03\u0171\x03\u0171\x03\u0172\x03\u0172\x03\u0172\x05\u0172" +
		"\u1D02\n\u0172\x03\u0172\x05\u0172\u1D05\n\u0172\x03\u0172\x05\u0172\u1D08" +
		"\n\u0172\x03\u0173\x03\u0173\x05\u0173\u1D0C\n\u0173\x03\u0173\x03\u0173" +
		"\x03\u0173\x07\u0173\u1D11\n\u0173\f\u0173\x0E\u0173\u1D14\v\u0173\x05" +
		"\u0173\u1D16\n\u0173\x03\u0173\x05\u0173\u1D19\n\u0173\x03\u0173\x03\u0173" +
		"\x05\u0173\u1D1D\n\u0173\x03\u0173\x03\u0173\x05\u0173\u1D21\n\u0173\x03" +
		"\u0173\x03\u0173\x05\u0173\u1D25\n\u0173\x03\u0173\x03\u0173\x03\u0173" +
		"\x05\u0173\u1D2A\n\u0173\x03\u0173\x03\u0173\x03\u0173\x03\u0173\x05\u0173" +
		"\u1D30\n\u0173\x05\u0173\u1D32\n\u0173\x03\u0174\x03\u0174\x03\u0175\x03" +
		"\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03" +
		"\u0175\x07\u0175\u1D3F\n\u0175\f\u0175\x0E\u0175\u1D42\v\u0175\x03\u0176" +
		"\x03\u0176\x03\u0177\x03\u0177\x05\u0177\u1D48\n\u0177\x03\u0177\x03\u0177" +
		"\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x05\u0177\u1D50\n\u0177\x03\u0178" +
		"\x05\u0178\u1D53\n\u0178\x03\u0178\x05\u0178\u1D56\n\u0178\x03\u0178\x03" +
		"\u0178\x03\u0178\x03\u0178\x03\u0178\x05\u0178\u1D5D\n\u0178\x03\u0178" +
		"\x03\u0178\x05\u0178\u1D61\n\u0178\x03\u0178\x03\u0178\x05\u0178\u1D65" +
		"\n\u0178\x05\u0178\u1D67\n\u0178\x03\u0179\x03\u0179\x03\u0179\x03\u0179" +
		"\x03\u0179\x03\u0179\x05\u0179\u1D6F\n\u0179\x03\u0179\x03\u0179\x03\u0179" +
		"\x03\u0179\x03\u0179\x05\u0179\u1D76\n\u0179\x03\u0179\x03\u0179\x03\u0179" +
		"\x03\u0179\x03\u0179\x03\u0179\x03\u0179\x03\u0179\x03\u0179\x03\u0179" +
		"\x03\u0179\x03\u0179\x03\u0179\x07\u0179\u1D85\n\u0179\f\u0179\x0E\u0179" +
		"\u1D88\v\u0179\x03\u0179\x03\u0179\x05\u0179\u1D8C\n\u0179\x03\u0179\x03" +
		"\u0179\x03\u0179\x03\u0179\x05\u0179\u1D92\n\u0179\x03\u0179\x03\u0179" +
		"\x03\u0179\x03\u0179\x05\u0179\u1D98\n\u0179\x03\u017A\x03\u017A\x03\u017A" +
		"\x03\u017A\x07\u017A\u1D9E\n\u017A\f\u017A\x0E\u017A\u1DA1\v\u017A\x03" +
		"\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x03" +
		"\u017B\x03\u017B\x07\u017B\u1DAC\n\u017B\f\u017B\x0E\u017B\u1DAF\v\u017B" +
		"\x03\u017B\x03\u017B\x05\u017B\u1DB3\n\u017B\x03\u017B\x03\u017B\x03\u017B" +
		"\x03\u017C\x03\u017C\x05\u017C\u1DBA\n\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x07\u017C\u1DC0\n\u017C\f\u017C\x0E\u017C\u1DC3\v\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x06\u017C\u1DC8\n\u017C\r\u017C\x0E\u017C\u1DC9" +
		"\x03\u017C\x03\u017C\x05\u017C\u1DCE\n\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x05\u017D\u1DD7\n\u017D\x03\u017D" +
		"\x02\x02\x06\u0230\u0232\u027A\u0286\u017E\x02\x02\x04\x02\x06\x02\b\x02" +
		"\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C" +
		"\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026" +
		"\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02" +
		"R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02" +
		"n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02" +
		"\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02" +
		"\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02" +
		"\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02" +
		"\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02" +
		"\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02" +
		"\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02" +
		"\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102" +
		"\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110" +
		"\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E" +
		"\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C" +
		"\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A" +
		"\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148" +
		"\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156" +
		"\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164" +
		"\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172" +
		"\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180" +
		"\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E" +
		"\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C" +
		"\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA" +
		"\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8" +
		"\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6" +
		"\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4" +
		"\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2" +
		"\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0" +
		"\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE" +
		"\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C" +
		"\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A" +
		"\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228" +
		"\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236" +
		"\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244" +
		"\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252" +
		"\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260" +
		"\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E" +
		"\x02\u0270\x02\u0272\x02\u0274\x02\u0276\x02\u0278\x02\u027A\x02\u027C" +
		"\x02\u027E\x02\u0280\x02\u0282\x02\u0284\x02\u0286\x02\u0288\x02\u028A" +
		"\x02\u028C\x02\u028E\x02\u0290\x02\u0292\x02\u0294\x02\u0296\x02\u0298" +
		"\x02\u029A\x02\u029C\x02\u029E\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6" +
		"\x02\u02A8\x02\u02AA\x02\u02AC\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4" +
		"\x02\u02B6\x02\u02B8\x02\u02BA\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2" +
		"\x02\u02C4\x02\u02C6\x02\u02C8\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0" +
		"\x02\u02D2\x02\u02D4\x02\u02D6\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE" +
		"\x02\u02E0\x02\u02E2\x02\u02E4\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC" +
		"\x02\u02EE\x02\u02F0\x02\u02F2\x02\u02F4\x02\u02F6\x02\u02F8\x02\x02m" +
		"\x04\x02\u0104\u0104\u0120\u0120\x06\x02\x03\x03&&\xD4\xD4\u018D\u018D" +
		"\x04\x02\x05\x05\u0144\u0144\x04\x02\u0112\u0112\u0144\u0144\x04\x02\x93" +
		"\x93\u0190\u0190\x04\x02\u0193\u0193\u0197\u0197\x07\x02\xB1\xB1\xE2\xE2" +
		"\xFF\xFF\u0101\u0101\u0170\u0170\x07\x0277qq\xDB\xDB\xFC\xFC\u01AF\u01AF" +
		"\x04\x02\u011F\u011F\u01BC\u01BC\t\x02\u016F\u016F\u0172\u0172\u01BF\u01BF" +
		"\u01C7\u01C7\u020D\u020D\u0217\u0217\u0219\u0219\x06\x02\u0102\u0102\u0123" +
		"\u0123\u01DF\u01DF\u021F\u021F\t\x02\u0107\u0107\u015F\u0160\u016F\u016F" +
		"\u0172\u0172\u01CC\u01CC\u01DB\u01DB\u0210\u0210\x04\x02\u016F\u016F\u0210" +
		"\u0210\x07\x02\x9F\x9F\u018F\u018F\u01A3\u01A3\u01B3\u01B3\u0262\u0262" +
		"\x04\x02\x04\x04\xC8\xC8\x04\x02\u0170\u0170\u0262\u0262\x04\x02^^\xBA" +
		"\xBA\x04\x02\x07\x07II\x04\x02DDKK\x04\x02\r\r\xCD\xCD\x04\x02\"\"\xA0" +
		"\xA0\x04\x02\x89\x89\u0110\u0110\x06\x02WW\u01CE\u01CE\u01E8\u01E8\u01FF" +
		"\u01FF\x04\x02<<jj\x04\x02==zz\x05\x02\u0207\u0207\u020A\u020A\u021C\u021C" +
		"\x04\x02\u01B1\u01B1\u0242\u0242\x04\x02\xD3\xD3\u01B6\u01B6\x04\x02\t" +
		"\t\x14\x14\x04\x02II\xE6\xE6\x06\x02((CC\xAC\xAC\u0100\u0100\x04\x02\x07" +
		"\x07\f\f\x06\x02\u0119\u0119\u01E0\u01E1\u01E6\u01E6\u0201\u0201\x05\x02" +
		"\n\n^^\xBA\xBA\x04\x02\xD0\xD0\u0165\u0165\x04\x02qq\u01AF\u01AF\x04\x02" +
		"\u01E2\u01E2\u0209\u0209\x04\x02\u01C5\u01C5\u01F3\u01F3\x04\x02\u0202" +
		"\u0203\u020F\u020F\x04\x02\x85\x85\xE5\xE5\x04\x02,,FF\x06\x02>>xx\u0112" +
		"\u0112\u01AB\u01AB\x04\x02\v\vyy\x04\x02\xF1\xF1\u0144\u0144\x04\x02\x96" +
		"\x96\xA1\xA1\x04\x02\u0193\u0193\u01B1\u01B1\x05\x02^^\xBA\xBA\xD6\xD6" +
		"\x07\x02__\xBB\xBB\xD7\xD7\xE2\xE2\xFD\xFD\x06\x02\n\n^^\xBA\xBA\xD6\xD6" +
		"\x04\x02  XX\x04\x02\u0187\u0187\u0242\u0242\x06\x02\u0135\u0135\u013F" +
		"\u013F\u0197\u0197\u01B8\u01B8\x04\x02\xFF\xFF\u0101\u0101\x05\x02\u0128" +
		"\u0128\u0137\u0137\u0146\u0146\x03\x02\u024D\u024E\x04\x02\u01FE\u01FE" +
		"\u0208\u0208\x07\x02>>xx\u0112\u0112\u0170\u0170\u01AB\u01AB\x04\x02^" +
		"^\xA2\xA2\x05\x02\x07\x07II\xE6\xE6\x05\x0211\u0102\u0102\u015A\u015A" +
		"\x04\x02\x1B\x1B\x85\x85\x04\x02aa\x85\x85\x05\x02\xBF\xBF\u01D7\u01D7" +
		"\u01E5\u01E5\x04\x02RRoo\n\x02%%++;;``hhrr\xF5\xF5\u0170\u0170\x05\x02" +
		"\xAD\xAD\xEA\xEA\u0160\u0160\x04\x02>>\u0112\u0112\x05\x02\u025B\u025C" +
		"\u025E\u025E\u0261\u0261\x04\x02\u0187\u0187\u01A1\u01A1\x05\x02\u0112" +
		"\u0112\u01AB\u01AB\u021D\u021D\x04\x02\x1A\x1A\xD0\xD0\x03\x02\x03\u0126" +
		"\x03\x02\u0127\u0158\x03\x02\u0159\u016F\x03\x02\u0170\u01BC\x03\x02\u01BD" +
		"\u0240\x03\x02\u012B\u012C\x03\x02\u024F\u0251\x04\x02\u0178\u0178\u01AE" +
		"\u01AE\x04\x02\u0242\u0242\u0246\u024A\x03\x02\u0262\u0263\x05\x02\u018F" +
		"\u018F\u01A3\u01A3\u01B3\u01B3\x04\x02\u014A\u014A\u017B\u017B\x03\x02" +
		"\u0259\u025A\x07\x02\u012D\u012D\u0133\u0134\u0139\u0139\u013D\u013D\u014F" +
		"\u014F\x05\x02\u0179\u0179\u019C\u019C\u01B2\u01B2\x05\x02\u0170\u0170" +
		"\u0174\u0174\u01AD\u01AD\x05\x02cc\xBF\xBF\xD8\xD8\x04\x02[[\xB3\xB3\x04" +
		"\x02\u0170\u0170\u018A\u018A\x04\x02\xD8\xD8\u0144\u0144\x04\x02ZZ\x97" +
		"\x97\x05\x02\u018E\u018E\u0199\u0199\u01B4\u01B4\x05\x02\xFF\xFF\u0101" +
		"\u0101\u0110\u0110\x05\x02\u0160\u0160\u0166\u0166\u016C\u016C\x04\x02" +
		"ZZ\x80\x80\x04\x02\xFC\xFC\u01B6\u01B6\x04\x02--\xCF\xCF\x05\x02\u0187" +
		"\u0187\u0242\u0242\u025A\u025A\x04\x02\u0163\u0163\u0191\u0191\x04\x02" +
		"33\u023E\u023E\x04\x02\u0242\u0242\u025A\u025A\x04\x02&&\xD4\xD4\x07\x02" +
		"\u0224\u0224\u022B\u022B\u022F\u0230\u0233\u0233\u023F\u023F\n\x02\xDB" +
		"\xDB\u017E\u017F\u01AF\u01AF\u0223\u0223\u0225\u0225\u0229\u0229\u022E" +
		"\u022E\u0232\u0232\x04\x02--\u022A\u022A\x03\x02\u0227\u0228\x02\u230E" +
		"\x02\u02FB\x03\x02\x02\x02\x04\u0313\x03\x02\x02\x02\x06\u0317\x03\x02" +
		"\x02\x02\b\u031C\x03\x02\x02\x02\n\u0327\x03\x02\x02\x02\f\u0337\x03\x02" +
		"\x02\x02\x0E\u033F\x03\x02\x02\x02\x10\u0345\x03\x02\x02\x02\x12\u0349" +
		"\x03\x02\x02\x02\x14\u0384\x03\x02\x02\x02\x16\u0399\x03\x02\x02\x02\x18" +
		"\u039B\x03\x02\x02\x02\x1A\u03BC\x03\x02\x02\x02\x1C\u03D9\x03\x02\x02" +
		"\x02\x1E\u0459\x03\x02\x02\x02 \u045B\x03\x02\x02\x02\"\u0479\x03\x02" +
		"\x02\x02$\u047B\x03\x02\x02\x02&\u048A\x03\x02\x02\x02(\u04A0\x03\x02" +
		"\x02\x02*\u04B7\x03\x02\x02\x02,\u04BC\x03\x02\x02\x02.\u04BE\x03\x02" +
		"\x02\x020\u04C6\x03\x02\x02\x022\u04EB\x03\x02\x02\x024\u04ED\x03\x02" +
		"\x02\x026\u04F1\x03\x02\x02\x028\u04F5\x03\x02\x02\x02:\u0508\x03\x02" +
		"\x02\x02<\u050D\x03\x02\x02\x02>\u053D\x03\x02\x02\x02@\u053F\x03\x02" +
		"\x02\x02B\u0562\x03\x02\x02\x02D\u0570\x03\x02\x02\x02F\u0587\x03\x02" +
		"\x02\x02H\u05A5\x03\x02\x02\x02J\u05AB\x03\x02\x02\x02L\u05BA\x03\x02" +
		"\x02\x02N\u0616\x03\x02\x02\x02P\u0618\x03\x02\x02\x02R\u061D\x03\x02" +
		"\x02\x02T\u0626\x03\x02\x02\x02V\u06C3\x03\x02\x02\x02X\u06F1\x03\x02" +
		"\x02\x02Z\u06F3\x03\x02\x02\x02\\\u0715\x03\x02\x02\x02^\u0717\x03\x02" +
		"\x02\x02`\u0719\x03\x02\x02\x02b\u071D\x03\x02\x02\x02d\u0727\x03\x02" +
		"\x02\x02f\u072B\x03\x02\x02\x02h\u0766\x03\x02\x02\x02j\u0768\x03\x02" +
		"\x02\x02l\u0784\x03\x02\x02\x02n\u07AD\x03\x02\x02\x02p\u07AF\x03\x02" +
		"\x02\x02r\u07C2\x03\x02\x02\x02t\u0801\x03\x02\x02\x02v\u0805\x03\x02" +
		"\x02\x02x\u081C\x03\x02\x02\x02z\u0834\x03\x02\x02\x02|\u0840\x03\x02" +
		"\x02\x02~\u0842\x03\x02\x02\x02\x80\u0868\x03\x02\x02\x02\x82\u0881\x03" +
		"\x02\x02\x02\x84\u088E\x03\x02\x02\x02\x86\u0890\x03\x02\x02\x02\x88\u08C2" +
		"\x03\x02\x02\x02\x8A\u08E6\x03\x02\x02\x02\x8C\u08E8\x03\x02\x02\x02\x8E" +
		"\u08EC\x03\x02\x02\x02\x90\u08F0\x03\x02\x02\x02\x92\u0905\x03\x02\x02" +
		"\x02\x94\u0914\x03\x02\x02\x02\x96\u0918\x03\x02\x02\x02\x98\u0924\x03" +
		"\x02\x02\x02\x9A\u0927\x03\x02\x02\x02\x9C\u0946\x03\x02\x02\x02\x9E\u095C" +
		"\x03\x02\x02\x02\xA0\u097B\x03\x02\x02\x02\xA2\u0A12\x03\x02\x02\x02\xA4" +
		"\u0A21\x03\x02\x02\x02\xA6\u0A35\x03\x02\x02\x02\xA8\u0A46\x03\x02\x02" +
		"\x02\xAA\u0A4A\x03\x02\x02\x02\xAC\u0A59\x03\x02\x02\x02\xAE\u0A70\x03" +
		"\x02\x02\x02\xB0\u0A93\x03\x02\x02\x02\xB2\u0AA8\x03\x02\x02\x02\xB4\u0ABA" +
		"\x03\x02\x02\x02\xB6\u0ABC\x03\x02\x02\x02\xB8\u0ACB\x03\x02\x02\x02\xBA" +
		"\u0AD7\x03\x02\x02\x02\xBC\u0AE9\x03\x02\x02\x02\xBE\u0B0F\x03\x02\x02" +
		"\x02\xC0\u0B11\x03\x02\x02\x02\xC2\u0B1C\x03\x02\x02\x02\xC4\u0B1E\x03" +
		"\x02\x02\x02\xC6\u0B3F\x03\x02\x02\x02\xC8\u0B56\x03\x02\x02\x02\xCA\u0B58" +
		"\x03\x02\x02\x02\xCC\u0B5F\x03\x02\x02\x02\xCE\u0B76\x03\x02\x02\x02\xD0" +
		"\u0B78\x03\x02\x02\x02\xD2\u0B89\x03\x02\x02\x02\xD4\u0B8B\x03\x02\x02" +
		"\x02\xD6\u0B8F\x03\x02\x02\x02\xD8\u0B9C\x03\x02\x02\x02\xDA\u0BA9\x03" +
		"\x02\x02\x02\xDC\u0BB8\x03\x02\x02\x02\xDE\u0BC7\x03\x02\x02\x02\xE0\u0BD6" +
		"\x03\x02\x02\x02\xE2\u0BEB\x03\x02\x02\x02\xE4\u0BF3\x03\x02\x02\x02\xE6" +
		"\u0C04\x03\x02\x02\x02\xE8\u0C08\x03\x02\x02\x02\xEA\u0C1F\x03\x02\x02" +
		"\x02\xEC\u0C28\x03\x02\x02\x02\xEE\u0C36\x03\x02\x02\x02\xF0\u0C38\x03" +
		"\x02\x02\x02\xF2\u0C46\x03\x02\x02\x02\xF4\u0C48\x03\x02\x02\x02\xF6\u0C5E" +
		"\x03\x02\x02\x02\xF8\u0C70\x03\x02\x02\x02\xFA\u0C8E\x03\x02\x02\x02\xFC" +
		"\u0C91\x03\x02\x02\x02\xFE\u0CA1\x03\x02\x02\x02\u0100\u0CB6\x03\x02\x02" +
		"\x02\u0102\u0CBA\x03\x02\x02\x02\u0104\u0D0C\x03\x02\x02\x02\u0106\u0D0E" +
		"\x03\x02\x02\x02\u0108\u0D36\x03\x02\x02\x02\u010A\u0D55\x03\x02\x02\x02" +
		"\u010C\u0D60\x03\x02\x02\x02\u010E\u0D64\x03\x02\x02\x02\u0110\u0D8D\x03" +
		"\x02\x02\x02\u0112\u0D90\x03\x02\x02\x02\u0114\u0DCE\x03\x02\x02\x02\u0116" +
		"\u0DD5\x03\x02\x02\x02\u0118\u0DF0\x03\x02\x02\x02\u011A\u0E23\x03\x02" +
		"\x02\x02\u011C\u0E25\x03\x02\x02\x02\u011E\u0E2D\x03\x02\x02\x02\u0120" +
		"\u0E32\x03\x02\x02\x02\u0122\u0E4A\x03\x02\x02\x02\u0124\u0E61\x03\x02" +
		"\x02\x02\u0126\u0E63\x03\x02\x02\x02\u0128\u0E6A\x03\x02\x02\x02\u012A" +
		"\u0E6F\x03\x02\x02\x02\u012C\u0E78\x03\x02\x02\x02\u012E\u0E7C\x03\x02" +
		"\x02\x02\u0130\u0E84\x03\x02\x02\x02\u0132\u0F10\x03\x02\x02\x02\u0134" +
		"\u0F3F\x03\x02\x02\x02\u0136\u0F43\x03\x02\x02\x02\u0138\u0F51\x03\x02" +
		"\x02\x02\u013A\u0F58\x03\x02\x02\x02\u013C\u0F5C\x03\x02\x02\x02\u013E" +
		"\u0F68\x03\x02\x02\x02\u0140\u0F6B\x03\x02\x02\x02\u0142\u0F6E\x03\x02" +
		"\x02\x02\u0144\u0F81\x03\x02\x02\x02\u0146\u0F94\x03\x02\x02\x02\u0148" +
		"\u0F97\x03\x02\x02\x02\u014A\u0FA1\x03\x02\x02\x02\u014C\u0FA4\x03\x02" +
		"\x02\x02\u014E\u0FD5\x03\x02\x02\x02\u0150\u0FD8\x03\x02\x02\x02\u0152" +
		"\u0FDD\x03\x02\x02\x02\u0154\u0FE1\x03\x02\x02\x02\u0156\u0FE3\x03\x02" +
		"\x02\x02\u0158\u0FEE\x03\x02\x02\x02\u015A\u102C\x03\x02\x02\x02\u015C" +
		"\u102E\x03\x02\x02\x02\u015E\u1038\x03\x02\x02\x02\u0160\u1041\x03\x02" +
		"\x02\x02\u0162\u1058\x03\x02\x02\x02\u0164\u105A\x03\x02\x02\x02\u0166" +
		"\u1071\x03\x02\x02\x02\u0168\u107D\x03\x02\x02\x02\u016A\u1083\x03\x02" +
		"\x02\x02\u016C\u109F\x03\x02\x02\x02\u016E\u10BF\x03\x02\x02\x02\u0170" +
		"\u10C1\x03\x02\x02\x02\u0172\u10D1\x03\x02\x02\x02\u0174\u10DC\x03\x02" +
		"\x02\x02\u0176\u1121\x03\x02\x02\x02\u0178\u1123\x03\x02\x02\x02\u017A" +
		"\u112D\x03\x02\x02\x02\u017C\u1139\x03\x02\x02\x02\u017E\u1144\x03\x02" +
		"\x02\x02\u0180\u114B\x03\x02\x02\x02\u0182\u115F\x03\x02\x02\x02\u0184" +
		"\u1171\x03\x02\x02\x02\u0186\u1174\x03\x02\x02\x02\u0188\u117A\x03\x02" +
		"\x02\x02\u018A\u1185\x03\x02\x02\x02\u018C\u118D\x03\x02\x02\x02\u018E" +
		"\u118F\x03\x02\x02\x02\u0190\u11A9\x03\x02\x02\x02\u0192\u11C5\x03\x02" +
		"\x02\x02\u0194\u120B\x03\x02\x02\x02\u0196\u120F\x03\x02\x02\x02\u0198" +
		"\u1239\x03\x02\x02\x02\u019A\u123C\x03\x02\x02\x02\u019C\u1240\x03\x02" +
		"\x02\x02\u019E\u124B\x03\x02\x02\x02\u01A0\u1257\x03\x02\x02\x02\u01A2" +
		"\u1274\x03\x02\x02\x02\u01A4\u1298\x03\x02\x02\x02\u01A6\u12A7\x03\x02" +
		"\x02\x02\u01A8\u12A9\x03\x02\x02\x02\u01AA\u12B5\x03\x02\x02\x02\u01AC" +
		"\u12D0\x03\x02\x02\x02\u01AE\u12D2\x03\x02\x02\x02\u01B0\u12DD\x03\x02" +
		"\x02\x02\u01B2\u12ED\x03\x02\x02\x02\u01B4\u12F2\x03\x02\x02\x02\u01B6" +
		"\u12F6\x03\x02\x02\x02\u01B8\u1302\x03\x02\x02\x02\u01BA\u1306\x03\x02" +
		"\x02\x02\u01BC\u130B\x03\x02\x02\x02\u01BE\u1318\x03\x02\x02\x02\u01C0" +
		"\u1320\x03\x02\x02\x02\u01C2\u1322\x03\x02\x02\x02\u01C4\u1337\x03\x02" +
		"\x02\x02\u01C6\u1345\x03\x02\x02\x02\u01C8\u1347\x03\x02\x02\x02\u01CA" +
		"\u1355\x03\x02\x02\x02\u01CC\u135A\x03\x02\x02\x02\u01CE\u13B0\x03\x02" +
		"\x02\x02\u01D0\u13BF\x03\x02\x02\x02\u01D2\u13CE\x03\x02\x02\x02\u01D4" +
		"\u13D0\x03\x02\x02\x02\u01D6\u13D3\x03\x02\x02\x02\u01D8\u13E0\x03\x02" +
		"\x02\x02\u01DA\u13E4\x03\x02\x02\x02\u01DC\u13EC\x03\x02\x02\x02\u01DE" +
		"\u13F7\x03\x02\x02\x02\u01E0\u13FC\x03\x02\x02\x02\u01E2\u1401\x03\x02" +
		"\x02\x02\u01E4\u1409\x03\x02\x02\x02\u01E6\u140B\x03\x02\x02\x02\u01E8" +
		"\u1414\x03\x02\x02\x02\u01EA\u141C\x03\x02\x02\x02\u01EC\u141E\x03\x02" +
		"\x02\x02\u01EE\u1425\x03\x02\x02\x02\u01F0\u1429\x03\x02\x02\x02\u01F2" +
		"\u1438\x03\x02\x02\x02\u01F4\u143A\x03\x02\x02\x02\u01F6\u143C\x03\x02" +
		"\x02\x02\u01F8\u1446\x03\x02\x02\x02\u01FA\u1448\x03\x02\x02\x02\u01FC" +
		"\u144D\x03\x02\x02\x02\u01FE\u1452\x03\x02\x02\x02\u0200\u1461\x03\x02" +
		"\x02\x02\u0202\u1472\x03\x02\x02\x02\u0204\u1474\x03\x02\x02\x02\u0206" +
		"\u147F\x03\x02\x02\x02\u0208\u1489\x03\x02\x02\x02\u020A\u14BD\x03\x02" +
		"\x02\x02\u020C\u14C2\x03\x02\x02\x02\u020E\u14CB\x03\x02\x02\x02\u0210" +
		"\u14D0\x03\x02\x02\x02\u0212\u14D5\x03\x02\x02\x02\u0214\u14DC\x03\x02" +
		"\x02\x02\u0216\u14DE\x03\x02\x02\x02\u0218\u14E0\x03\x02\x02\x02\u021A" +
		"\u14E2\x03\x02\x02\x02\u021C\u14E4\x03\x02\x02\x02\u021E\u14E6\x03\x02" +
		"\x02\x02\u0220\u14ED\x03\x02\x02\x02\u0222\u14EF\x03\x02\x02\x02\u0224" +
		"\u14F8\x03\x02\x02\x02\u0226\u1506\x03\x02\x02\x02\u0228\u1567\x03\x02" +
		"\x02\x02\u022A\u1584\x03\x02\x02\x02\u022C\u1586\x03\x02\x02\x02\u022E" +
		"\u158A\x03\x02\x02\x02\u0230\u15AB\x03\x02\x02\x02\u0232\u164E\x03\x02" +
		"\x02\x02\u0234\u1690\x03\x02\x02\x02\u0236\u169A\x03\x02\x02\x02\u0238" +
		"\u169C\x03\x02\x02\x02\u023A\u16BA\x03\x02\x02\x02\u023C\u16BF\x03\x02" +
		"\x02\x02\u023E\u16C1\x03\x02\x02\x02\u0240\u16C3\x03\x02\x02\x02\u0242" +
		"\u16C5\x03\x02\x02\x02\u0244\u16D8\x03\x02\x02\x02\u0246\u170A\x03\x02" +
		"\x02\x02\u0248\u170D\x03\x02\x02\x02\u024A\u1716\x03\x02\x02\x02\u024C" +
		"\u1731\x03\x02\x02\x02\u024E\u1733\x03\x02\x02\x02\u0250\u1743\x03\x02" +
		"\x02\x02\u0252\u1756\x03\x02\x02\x02\u0254\u179B\x03\x02\x02\x02\u0256" +
		"\u183E\x03\x02\x02\x02\u0258\u1840\x03\x02\x02\x02\u025A\u1854\x03\x02" +
		"\x02\x02\u025C\u185C\x03\x02\x02\x02\u025E\u1862\x03\x02\x02\x02\u0260" +
		"\u1871\x03\x02\x02\x02\u0262\u188A\x03\x02\x02\x02\u0264\u188C\x03\x02" +
		"\x02\x02\u0266\u1891\x03\x02\x02\x02\u0268\u18AD\x03\x02\x02\x02\u026A" +
		"\u18AF\x03\x02\x02\x02\u026C\u18B8\x03\x02\x02\x02\u026E\u18BA\x03\x02" +
		"\x02\x02\u0270\u18BF\x03\x02\x02\x02\u0272\u18F6\x03\x02\x02\x02\u0274" +
		"\u18F9\x03\x02\x02\x02\u0276\u1902\x03\x02\x02\x02\u0278\u190E\x03\x02" +
		"\x02\x02\u027A\u192D\x03\x02\x02\x02\u027C\u1947\x03\x02\x02\x02\u027E" +
		"\u1990\x03\x02\x02\x02\u0280\u1992\x03\x02\x02\x02\u0282\u199A\x03\x02" +
		"\x02\x02\u0284\u19A0\x03\x02\x02\x02\u0286\u19B1\x03\x02\x02\x02\u0288" +
		"\u1A4F\x03\x02\x02\x02\u028A\u1A52\x03\x02\x02\x02\u028C\u1A62\x03\x02" +
		"\x02\x02\u028E\u1A70\x03\x02\x02\x02\u0290\u1A74\x03\x02\x02\x02\u0292" +
		"\u1A89\x03\x02\x02\x02\u0294\u1A8B\x03\x02";
	private static readonly _serializedATNSegment4: string =
		"\x02\x02\u0296\u1A94\x03\x02\x02\x02\u0298\u1AA5\x03\x02\x02\x02\u029A" +
		"\u1AA9\x03\x02\x02\x02\u029C\u1AB1\x03\x02\x02\x02\u029E\u1ABF\x03\x02" +
		"\x02\x02\u02A0\u1AC1\x03\x02\x02\x02\u02A2\u1AC5\x03\x02\x02\x02\u02A4" +
		"\u1AE7\x03\x02\x02\x02\u02A6\u1AF2\x03\x02\x02\x02\u02A8\u1AFD\x03\x02" +
		"\x02\x02\u02AA\u1B10\x03\x02\x02\x02\u02AC\u1B13\x03\x02\x02\x02\u02AE" +
		"\u1B3D\x03\x02\x02\x02\u02B0\u1B95\x03\x02\x02\x02\u02B2\u1B97\x03\x02" +
		"\x02\x02\u02B4\u1B9D\x03\x02\x02\x02\u02B6\u1BB0\x03\x02\x02\x02\u02B8" +
		"\u1BC8\x03\x02\x02\x02\u02BA\u1BCA\x03\x02\x02\x02\u02BC\u1BD1\x03\x02" +
		"\x02\x02\u02BE\u1BDF\x03\x02\x02\x02\u02C0\u1BE3\x03\x02\x02\x02\u02C2" +
		"\u1BED\x03\x02\x02\x02\u02C4\u1C18\x03\x02\x02\x02\u02C6\u1C1A\x03\x02" +
		"\x02\x02\u02C8\u1C2E\x03\x02\x02\x02\u02CA\u1C30\x03\x02\x02\x02\u02CC" +
		"\u1C3F\x03\x02\x02\x02\u02CE\u1C4B\x03\x02\x02\x02\u02D0\u1C5E\x03\x02" +
		"\x02\x02\u02D2\u1C62\x03\x02\x02\x02\u02D4\u1C6D\x03\x02\x02\x02\u02D6" +
		"\u1C80\x03\x02\x02\x02\u02D8\u1CB6\x03\x02\x02\x02\u02DA\u1CBC\x03\x02" +
		"\x02\x02\u02DC\u1CC7\x03\x02\x02\x02\u02DE\u1CF5\x03\x02\x02\x02\u02E0" +
		"\u1CFA\x03\x02\x02\x02\u02E2\u1D07\x03\x02\x02\x02\u02E4\u1D31\x03\x02" +
		"\x02\x02\u02E6\u1D33\x03\x02\x02\x02\u02E8\u1D35\x03\x02\x02\x02\u02EA" +
		"\u1D43\x03\x02\x02\x02\u02EC\u1D4F\x03\x02\x02\x02\u02EE\u1D66\x03\x02" +
		"\x02\x02\u02F0\u1D97\x03\x02\x02\x02\u02F2\u1D99\x03\x02\x02\x02\u02F4" +
		"\u1DA2\x03\x02\x02\x02\u02F6\u1DB7\x03\x02\x02\x02\u02F8\u1DD6\x03\x02" +
		"\x02\x02\u02FA\u02FC\x07\u026D\x02\x02\u02FB\u02FA\x03\x02\x02\x02\u02FB" +
		"\u02FC\x03\x02\x02\x02\u02FC\u0300\x03\x02\x02\x02\u02FD\u02FF\x07\u0244" +
		"\x02\x02\u02FE\u02FD\x03\x02\x02\x02\u02FF\u0302\x03\x02\x02\x02\u0300" +
		"\u02FE\x03\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301\u030E\x03\x02" +
		"\x02\x02\u0302\u0300\x03\x02\x02\x02\u0303\u030A\x05\x0E\b\x02\u0304\u0306" +
		"\x07\u0244\x02\x02\u0305\u0304\x03\x02\x02\x02\u0306\u0307\x03\x02\x02" +
		"\x02\u0307\u0305\x03\x02\x02\x02\u0307\u0308\x03\x02\x02\x02\u0308\u030B" +
		"\x03\x02\x02\x02\u0309\u030B\x07\x02\x02\x03\u030A\u0305\x03\x02\x02\x02" +
		"\u030A\u0309\x03\x02\x02\x02\u030B\u030D\x03\x02\x02\x02\u030C\u0303\x03" +
		"\x02\x02\x02\u030D\u0310\x03\x02\x02\x02\u030E\u030C\x03\x02\x02\x02\u030E" +
		"\u030F\x03\x02\x02\x02\u030F\u0311\x03\x02\x02\x02\u0310\u030E\x03\x02" +
		"\x02\x02\u0311\u0312\x07\x02\x02\x03\u0312\x03\x03\x02\x02\x02\u0313\u0314" +
		"\x05\u026A\u0136\x02\u0314\u0315\x07\x02\x02\x03\u0315\x05\x03\x02\x02" +
		"\x02\u0316\u0318\x05\u026A\u0136\x02\u0317\u0316\x03\x02\x02\x02\u0317" +
		"\u0318\x03\x02\x02\x02\u0318\u0319\x03\x02\x02\x02\u0319\u031A\x05\u0142" +
		"\xA2\x02\u031A\u031B\x07\x02\x02\x03\u031B\x07\x03\x02\x02\x02\u031C\u0321" +
		"\x05\u0230\u0119\x02\u031D\u031E\x07\u0245\x02\x02\u031E\u0320\x05\u0230" +
		"\u0119\x02\u031F\u031D\x03\x02\x02\x02\u0320\u0323\x03\x02\x02\x02\u0321" +
		"\u031F\x03\x02\x02\x02\u0321\u0322\x03\x02\x02\x02\u0322\u0324\x03\x02" +
		"\x02\x02\u0323\u0321\x03\x02\x02\x02\u0324\u0325\x07\x02\x02\x03\u0325" +
		"\t\x03\x02\x02\x02\u0326\u0328\x05\u02BA\u015E\x02\u0327\u0326\x03\x02" +
		"\x02\x02\u0327\u0328\x03\x02\x02\x02\u0328\u0329\x03\x02\x02\x02\u0329" +
		"\u032B\x05\u02BC\u015F\x02\u032A\u032C\x07\u0244\x02\x02\u032B\u032A\x03" +
		"\x02\x02\x02\u032B\u032C\x03\x02\x02\x02\u032C\u032D\x03\x02\x02\x02\u032D" +
		"\u032E\x07\x02\x02\x03\u032E\v\x03\x02\x02\x02\u032F\u0331\x05\u02BA\u015E" +
		"\x02\u0330\u032F\x03\x02\x02\x02\u0330\u0331\x03\x02\x02\x02\u0331\u0332" +
		"\x03\x02\x02\x02\u0332\u0333\x05\u02BC\u015F\x02\u0333\u0334\x07\u0244" +
		"\x02\x02\u0334\u0336\x03\x02\x02\x02\u0335\u0330\x03\x02\x02\x02\u0336" +
		"\u0339\x03\x02\x02\x02\u0337\u0335\x03\x02\x02\x02\u0337\u0338\x03\x02" +
		"\x02\x02\u0338\u033A\x03\x02\x02\x02\u0339\u0337\x03\x02\x02\x02\u033A" +
		"\u033B\x07\x02\x02\x03\u033B\r\x03\x02\x02\x02\u033C\u0340\x05\x10\t\x02" +
		"\u033D\u0340\x05<\x1F\x02\u033E\u0340\x05\x12\n\x02\u033F\u033C\x03\x02" +
		"\x02\x02\u033F\u033D\x03\x02\x02\x02\u033F\u033E\x03\x02\x02\x02\u0340" +
		"\x0F\x03\x02\x02\x02\u0341\u0346\x05\u0270\u0139\x02\u0342\u0346\x05\u02A2" +
		"\u0152\x02\u0343\u0346\x05\u02AE\u0158\x02\u0344\u0346\x05\u02AC\u0157" +
		"\x02\u0345\u0341\x03\x02\x02\x02\u0345\u0342\x03\x02\x02\x02\u0345\u0343" +
		"\x03\x02\x02\x02\u0345\u0344\x03\x02\x02\x02\u0346\x11\x03\x02\x02\x02" +
		"\u0347\u034A\x05\x14\v\x02\u0348\u034A\x05\x1C\x0F\x02\u0349\u0347\x03" +
		"\x02\x02\x02\u0349\u0348\x03\x02\x02\x02\u034A\x13\x03\x02\x02\x02\u034B" +
		"\u034C\x07\xF0\x02\x02\u034C\u0352\x07\u0104\x02\x02\u034D\u034F\x07\x15" +
		"\x02\x02\u034E\u0350\t\x02\x02\x02\u034F\u034E\x03\x02\x02\x02\u034F\u0350" +
		"\x03\x02\x02\x02\u0350\u0352\x03\x02\x02\x02\u0351\u034B\x03\x02\x02\x02" +
		"\u0351\u034D\x03\x02\x02\x02\u0352\u035B\x03\x02\x02\x02\u0353\u0358\x05" +
		"\x16\f\x02\u0354\u0355\x07\u0245\x02\x02\u0355\u0357\x05\x16\f\x02\u0356" +
		"\u0354\x03\x02\x02\x02\u0357\u035A\x03\x02\x02\x02\u0358\u0356\x03\x02" +
		"\x02\x02\u0358\u0359\x03\x02\x02\x02\u0359\u035C\x03\x02\x02\x02\u035A" +
		"\u0358\x03\x02\x02\x02\u035B\u0353\x03\x02\x02\x02\u035B\u035C\x03\x02" +
		"\x02\x02\u035C\u0385\x03\x02\x02\x02\u035D\u035F\t\x03\x02\x02\u035E\u0360" +
		"\t\x02\x02\x02\u035F\u035E\x03\x02\x02\x02\u035F\u0360\x03\x02\x02\x02" +
		"\u0360\u0366\x03\x02\x02\x02\u0361\u0363\x07\u0173\x02\x02\u0362\u0364" +
		"\x07\x98\x02\x02\u0363\u0362\x03\x02\x02\x02\u0363\u0364\x03\x02\x02\x02" +
		"\u0364\u0365\x03\x02\x02\x02\u0365\u0367\x07\x1D\x02\x02\u0366\u0361\x03" +
		"\x02\x02\x02\u0366\u0367\x03\x02\x02\x02\u0367\u0385\x03\x02\x02\x02\u0368" +
		"\u0369\x07&\x02\x02\u0369\u036D\x07\xB5\x02\x02\u036A\u036B\x07\xB4\x02" +
		"\x02\u036B\u036D\x07\u0104\x02\x02\u036C\u0368\x03\x02\x02\x02\u036C\u036A" +
		"\x03\x02\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u0385\x07\u0267\x02" +
		"\x02\u036F\u0375\x07\xDA\x02\x02\u0370\u0372\x07\xC9\x02\x02\u0371\u0373" +
		"\x07\xDA\x02\x02\u0372\u0371\x03\x02\x02\x02\u0372\u0373\x03\x02\x02\x02" +
		"\u0373\u0375\x03\x02\x02\x02\u0374\u036F\x03\x02\x02\x02\u0374\u0370\x03" +
		"\x02\x02\x02\u0375\u0376\x03\x02\x02\x02\u0376\u0385\x05\u0210\u0109\x02" +
		"\u0377\u0378\x07\xD4\x02\x02\u0378\u0379\x07\xB5\x02\x02\u0379\u0385\x07" +
		"\u0267\x02\x02\u037A\u037C\x07\xD4\x02\x02\u037B\u037D\t\x02\x02\x02\u037C" +
		"\u037B\x03\x02\x02\x02\u037C\u037D\x03\x02\x02\x02\u037D\u037E\x03\x02" +
		"\x02\x02\u037E\u0380\x07\u01B1\x02\x02\u037F\u0381\x07\xDA\x02\x02\u0380" +
		"\u037F\x03\x02\x02\x02\u0380\u0381\x03\x02\x02\x02\u0381\u0382\x03\x02" +
		"\x02\x02\u0382\u0385\x05\u0210\u0109\x02\u0383\u0385\x05\x18\r\x02\u0384" +
		"\u0351\x03\x02\x02\x02\u0384\u035D\x03\x02\x02\x02\u0384\u036C\x03\x02" +
		"\x02\x02\u0384\u0374\x03\x02\x02\x02\u0384\u0377\x03\x02\x02\x02\u0384" +
		"\u037A\x03\x02\x02\x02\u0384\u0383\x03\x02\x02\x02\u0385\x15\x03\x02\x02" +
		"\x02\u0386\u0387\x07{\x02\x02\u0387\u038F\x07\x82\x02\x02\u0388\u0390" +
		"\x07\xE3\x02\x02\u0389\u038A\x07\xCB\x02\x02\u038A\u0390\x07\xC0\x02\x02" +
		"\u038B\u038C\x07\xC0\x02\x02\u038C\u0390\x07\'\x02\x02\u038D\u038E\x07" +
		"\xC0\x02\x02\u038E\u0390\x07\u010C\x02\x02\u038F\u0388\x03\x02\x02\x02" +
		"\u038F\u0389\x03\x02\x02\x02\u038F\u038B\x03\x02\x02\x02\u038F\u038D\x03" +
		"\x02\x02\x02\u0390\u039A\x03\x02\x02\x02\u0391\u0392\x07\xC0\x02\x02\u0392" +
		"\u039A\x07\u0122\x02\x02\u0393\u0394\x07\xC0\x02\x02\u0394\u039A\x07\u01A4" +
		"\x02\x02\u0395\u0397\x07\u01A0\x02\x02\u0396\u0395\x03\x02\x02\x02\u0396" +
		"\u0397\x03\x02\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398\u039A\x07\u0188" +
		"\x02\x02\u0399\u0386\x03\x02\x02\x02\u0399\u0391\x03\x02\x02\x02\u0399" +
		"\u0393\x03\x02\x02\x02\u0399\u0396\x03\x02\x02\x02\u039A\x17\x03\x02\x02" +
		"\x02\u039B\u039D\x07\x87\x02\x02\u039C\u039E\x07\u01AF\x02\x02\u039D\u039C" +
		"\x03\x02\x02\x02\u039D\u039E\x03\x02\x02\x02\u039E\u039F\x03\x02\x02\x02" +
		"\u039F\u03A4\x05\u0186\xC4\x02\u03A0\u03A1\x07\u0245\x02\x02\u03A1\u03A3" +
		"\x05\u0186\xC4\x02\u03A2\u03A0\x03\x02\x02\x02\u03A3\u03A6\x03\x02\x02" +
		"\x02\u03A4\u03A2\x03\x02\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5\u03AB" +
		"\x03\x02\x02\x02\u03A6\u03A4\x03\x02\x02\x02\u03A7\u03A8\x07\u0197\x02" +
		"\x02\u03A8\u03A9\x05\x1A\x0E\x02\u03A9\u03AA\x07\x91\x02\x02\u03AA\u03AC" +
		"\x03\x02\x02\x02\u03AB\u03A7\x03\x02\x02\x02\u03AB\u03AC\x03\x02\x02\x02" +
		"\u03AC\u03AE\x03\x02\x02\x02\u03AD\u03AF\x07\x9B\x02\x02\u03AE\u03AD\x03" +
		"\x02\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\x19\x03\x02\x02\x02\u03B0" +
		"\u03B1\t\x04\x02\x02\u03B1\u03BD\x07\xE8\x02\x02\u03B2\u03B3\x07\u0144" +
		"\x02\x02\u03B3\u03BD\x07S\x02\x02\u03B4\u03B5\x07\xE8\x02\x02\u03B5\u03B6" +
		"\t\x05\x02\x02\u03B6\u03BD\x07S\x02\x02\u03B7\u03BD\x07\xE8\x02\x02\u03B8" +
		"\u03BA\x07\x05\x02\x02\u03B9\u03B8\x03\x02\x02\x02\u03B9\u03BA\x03\x02" +
		"\x02\x02\u03BA\u03BB\x03\x02\x02\x02\u03BB\u03BD\x07S\x02\x02\u03BC\u03B0" +
		"\x03\x02\x02\x02\u03BC\u03B2\x03\x02\x02\x02\u03BC\u03B4\x03\x02\x02\x02" +
		"\u03BC\u03B7\x03\x02\x02\x02\u03BC\u03B9\x03\x02\x02\x02\u03BD\x1B\x03" +
		"\x02\x02\x02\u03BE\u03DA\x05\x1E\x10\x02\u03BF\u03C0\x07\u0113\x02\x02" +
		"\u03C0\u03C2\x052\x1A\x02\u03C1\u03C3\x05.\x18\x02\u03C2\u03C1\x03\x02" +
		"\x02\x02\u03C2\u03C3\x03\x02\x02\x02\u03C3\u03DA\x03\x02\x02\x02\u03C4" +
		"\u03C6\t\x06\x02\x02\u03C5\u03C7\x05:\x1E\x02\u03C6\u03C5\x03\x02\x02" +
		"\x02\u03C6\u03C7\x03\x02\x02\x02\u03C7\u03C9\x03\x02\x02\x02\u03C8\u03CA" +
		"\t\x07\x02\x02\u03C9\u03C8\x03\x02\x02\x02\u03C9\u03CA\x03\x02\x02\x02" +
		"\u03CA\u03CB\x03\x02\x02\x02\u03CB\u03DA\x05\u0210\u0109\x02\u03CC\u03CF" +
		"\x07!\x02\x02\u03CD\u03D0\x05\u0210\u0109\x02\u03CE\u03D0\x07\u0170\x02" +
		"\x02\u03CF\u03CD\x03\x02\x02\x02\u03CF\u03CE\x03\x02\x02\x02\u03D0\u03DA" +
		"\x03\x02\x02\x02\u03D1\u03D2\x07\x18\x02\x02\u03D2\u03DA\x05\u0246\u0124" +
		"\x02\u03D3\u03D4\x07E\x02\x02\u03D4\u03DA\t\b\x02\x02\u03D5\u03DA\x05" +
		"&\x14\x02\u03D6\u03DA\x05$\x13\x02\u03D7\u03DA\x05 \x11\x02\u03D8\u03DA" +
		"\x05(\x15\x02\u03D9\u03BE\x03\x02\x02\x02\u03D9\u03BF\x03\x02\x02\x02" +
		"\u03D9\u03C4\x03\x02\x02\x02\u03D9\u03CC\x03\x02\x02\x02\u03D9\u03D1\x03" +
		"\x02\x02\x02\u03D9\u03D3\x03\x02\x02\x02\u03D9\u03D5\x03\x02\x02\x02\u03D9" +
		"\u03D6\x03\x02\x02\x02\u03D9\u03D7\x03\x02\x02\x02\u03D9\u03D8\x03\x02" +
		"\x02\x02\u03DA\x1D\x03\x02\x02\x02\u03DB\u045A\x05\u02B8\u015D\x02\u03DC" +
		"\u03DD\x07\x83\x02\x02\u03DD\u045A\x05\u0210\u0109\x02\u03DE\u03E1\x07" +
		"\u010F\x02\x02\u03DF\u03E2\x05\u0210\u0109\x02\u03E0\u03E2\x07\u024F\x02" +
		"\x02\u03E1\u03DF\x03\x02\x02\x02\u03E1\u03E0\x03\x02\x02\x02\u03E2\u045A" +
		"\x03\x02\x02\x02\u03E3\u03F0\x07\u0172\x02\x02\u03E4\u03E5\x07\u024B\x02" +
		"\x02\u03E5\u03EA\x056\x1C\x02\u03E6\u03E7\x07\u0245\x02\x02\u03E7\u03E9" +
		"\x056\x1C\x02\u03E8\u03E6\x03\x02\x02\x02\u03E9\u03EC\x03\x02\x02\x02" +
		"\u03EA\u03E8\x03\x02\x02\x02\u03EA\u03EB\x03\x02\x02\x02\u03EB\u03ED\x03" +
		"\x02\x02\x02\u03EC\u03EA\x03\x02\x02\x02\u03ED\u03EE\x07\u024C\x02\x02" +
		"\u03EE\u03F1\x03\x02\x02\x02\u03EF\u03F1\x07\u016F\x02\x02\u03F0\u03E4" +
		"\x03\x02\x02\x02\u03F0\u03EF\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02" +
		"\u03F1\u03F3\x03\x02\x02\x02\u03F2\u03F4\x05.\x18\x02\u03F3\u03F2\x03" +
		"\x02\x02\x02\u03F3\u03F4\x03\x02\x02\x02\u03F4\u045A\x03\x02\x02\x02\u03F5" +
		"\u03F7\x07\"\x02\x02\u03F6\u03F8\x07\u016F\x02\x02\u03F7\u03F6\x03\x02" +
		"\x02\x02\u03F7\u03F8\x03\x02\x02\x02\u03F8\u0402\x03\x02\x02\x02\u03F9" +
		"\u03FA\x05\u0210\u0109\x02\u03FA\u03FB\x07\u01A3\x02\x02\u03FB\u03FC\x05" +
		"\u026A\u0136\x02\u03FC\u0403\x03\x02\x02\x02\u03FD\u0400\x05\u026A\u0136" +
		"\x02\u03FE\u03FF\x07\u01B7\x02\x02\u03FF\u0401\x05\u0210\u0109\x02\u0400" +
		"\u03FE\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401\u0403\x03\x02" +
		"\x02\x02\u0402\u03F9\x03\x02\x02\x02\u0402\u03FD\x03\x02\x02\x02\u0402" +
		"\u0403\x03\x02\x02\x02\u0403\u045A\x03\x02\x02\x02\u0404\u045A\x07\x1F" +
		"\x02\x02\u0405\u0406\x07\x84\x02\x02\u0406\u045A\x07\u0267\x02\x02\u0407" +
		"\u0409\x079\x02\x02\u0408\u040A\x07\xB4\x02\x02\u0409\u0408\x03\x02\x02" +
		"\x02\u0409\u040A\x03\x02\x02\x02\u040A\u040D\x03\x02\x02\x02\u040B\u040E" +
		"\x05\u0210\u0109\x02\u040C\u040E\x07\u0170\x02\x02\u040D\u040B\x03\x02" +
		"\x02\x02\u040D\u040C\x03\x02\x02\x02\u040E\u045A\x03\x02\x02\x02\u040F" +
		"\u0413\x07\xC7\x02\x02\u0410\u0411\x07\u024B\x02\x02\u0411\u0412\x07\u016F" +
		"\x02\x02\u0412\u0414\x07\u024C\x02\x02\u0413\u0410\x03\x02\x02\x02\u0413" +
		"\u0414\x03\x02\x02\x02\u0414\u0415\x03\x02\x02\x02\u0415\u0417\t\t\x02" +
		"\x02\u0416\u0418\x07\u015C\x02\x02\u0417\u0416\x03\x02\x02\x02\u0417\u0418" +
		"\x03\x02\x02\x02\u0418\u0419\x03\x02\x02\x02\u0419\u045A\x05\u026A\u0136" +
		"\x02\u041A\u0426\x07\xCE\x02\x02\u041B\u041C\x05\u0210\u0109\x02\u041C" +
		"\u041D\x07\u0253\x02\x02\u041D\u041F\x03\x02\x02\x02\u041E\u041B\x03\x02" +
		"\x02\x02\u041E\u041F\x03\x02\x02\x02\u041F\u0420\x03\x02\x02\x02\u0420" +
		"\u0427\x05\u0210\u0109\x02\u0421\u0422\x07\u0148\x02\x02\u0422\u0427\x07" +
		"\u0126\x02\x02\u0423\u0424\x07\xE5\x02\x02\u0424\u0427\x07\u0159\x02\x02" +
		"\u0425\u0427\x07\u0170\x02\x02\u0426\u041E\x03\x02\x02\x02\u0426\u0421" +
		"\x03\x02\x02\x02\u0426\u0423\x03\x02\x02\x02\u0426\u0425\x03\x02\x02\x02" +
		"\u0427\u045A\x03\x02\x02\x02\u0428\u0429\x07\xC6\x02\x02\u0429\u042A\x07" +
		"\x8C\x02\x02\u042A\u042C\x07\u011A\x02\x02\u042B\u042D\x07\u015C\x02\x02" +
		"\u042C\u042B\x03\x02\x02\x02\u042C\u042D\x03\x02\x02\x02\u042D\u042E\x03" +
		"\x02\x02\x02\u042E\u0434\x05\u026A\u0136\x02\u042F\u0431\x07\u01BC\x02" +
		"\x02\u0430\u0432\x07\x98\x02\x02\u0431\u0430\x03\x02\x02\x02\u0431\u0432" +
		"\x03\x02\x02\x02\u0432\u0433\x03\x02\x02\x02\u0433\u0435\x076\x02\x02" +
		"\u0434\u042F\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435\u045A\x03" +
		"\x02\x02\x02\u0436\u0437\x07\xB4\x02\x02\u0437\u0443\x05\u0210\u0109\x02" +
		"\u0438\u0439\x07\u024B\x02\x02\u0439\u043E\x05\u0224\u0113\x02\u043A\u043B" +
		"\x07\u0245\x02\x02\u043B\u043D\x05\u0224\u0113\x02\u043C\u043A\x03\x02" +
		"\x02\x02\u043D\u0440\x03\x02\x02\x02\u043E\u043C\x03\x02\x02\x02\u043E" +
		"\u043F\x03\x02\x02\x02\u043F\u0441\x03\x02\x02\x02\u0440\u043E\x03\x02" +
		"\x02\x02\u0441\u0442\x07\u024C\x02\x02\u0442\u0444\x03\x02\x02\x02\u0443" +
		"\u0438\x03\x02\x02\x02\u0443\u0444\x03\x02\x02\x02\u0444\u0445\x03\x02" +
		"\x02\x02\u0445\u0446\x07\u0176\x02\x02\u0446\u0447\x05\x10\t\x02\u0447" +
		"\u045A\x03\x02\x02\x02\u0448\u0449\x07\xC1\x02\x02\u0449\u044A\x07\xA9" +
		"\x02\x02\u044A\u044B\x07\x16\x02\x02\u044B\u0450\x05,\x17\x02\u044C\u044D" +
		"\x07\u0245\x02\x02\u044D\u044F\x05,\x17\x02\u044E\u044C\x03\x02\x02\x02" +
		"\u044F\u0452\x03\x02\x02\x02\u0450\u044E\x03\x02\x02\x02\u0450\u0451\x03" +
		"\x02\x02\x02\u0451\u0453\x03\x02\x02\x02\u0452\u0450\x03\x02\x02\x02\u0453" +
		"\u0454\x07\u01B1\x02\x02\u0454\u0455\x05,\x17\x02\u0455\u045A\x03\x02" +
		"\x02\x02\u0456\u045A\x05\u018C\xC7\x02\u0457\u045A\x05\u02B4\u015B\x02" +
		"\u0458\u045A\x05\u02B2\u015A\x02\u0459\u03DB\x03\x02\x02\x02\u0459\u03DC" +
		"\x03\x02\x02\x02\u0459\u03DE\x03\x02\x02\x02\u0459\u03E3\x03\x02\x02\x02" +
		"\u0459\u03F5\x03\x02\x02\x02\u0459\u0404\x03\x02\x02\x02\u0459\u0405\x03" +
		"\x02\x02\x02\u0459\u0407\x03\x02\x02\x02\u0459\u040F\x03\x02\x02\x02\u0459" +
		"\u041A\x03\x02\x02\x02\u0459\u0428\x03\x02\x02\x02\u0459\u0436\x03\x02" +
		"\x02\x02\u0459\u0448\x03\x02\x02\x02\u0459\u0456\x03\x02\x02\x02\u0459" +
		"\u0457\x03\x02\x02\x02\u0459\u0458\x03\x02\x02\x02\u045A\x1F\x03\x02\x02" +
		"\x02\u045B\u046D\x07U\x02\x02\u045C\u045E\x07\u0172\x02\x02\u045D\u045C" +
		"\x03\x02\x02\x02\u045D\u045E\x03\x02\x02\x02\u045E\u0460\x03\x02\x02\x02" +
		"\u045F\u0461\x07\u016F\x02\x02\u0460\u045F\x03\x02\x02\x02\u0460\u0461" +
		"\x03\x02\x02\x02\u0461\u046E\x03\x02\x02\x02\u0462\u0463\x07\u024B\x02" +
		"\x02\u0463\u0468\x05*\x16\x02\u0464\u0465\x07\u0245\x02\x02\u0465\u0467" +
		"\x05*\x16\x02\u0466\u0464\x03\x02\x02\x02\u0467\u046A\x03\x02\x02\x02" +
		"\u0468\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02\u0469\u046B\x03" +
		"\x02\x02\x02\u046A\u0468\x03\x02\x02\x02\u046B\u046C\x07\u024C\x02\x02" +
		"\u046C\u046E\x03\x02\x02\x02\u046D\u045D\x03\x02\x02\x02\u046D\u0462\x03" +
		"\x02\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F\u0470\x05\"\x12\x02\u0470" +
		"!\x03\x02\x02\x02\u0471\u047A\x05\x10\t\x02\u0472\u047A\x05$\x13\x02\u0473" +
		"\u047A\x05&\x14\x02\u0474\u0477\x07\u0180\x02\x02\u0475\u0478\x05\u01A2" +
		"\xD2\x02\u0476\u0478\x05\u0196\xCC\x02\u0477\u0475\x03\x02\x02\x02\u0477" +
		"\u0476\x03\x02\x02\x02\u0478\u047A\x03\x02\x02\x02\u0479\u0471\x03\x02" +
		"\x02\x02\u0479\u0472\x03\x02\x02\x02\u0479\u0473\x03\x02\x02\x02\u0479" +
		"\u0474\x03\x02\x02\x02\u047A#\x03\x02\x02\x02\u047B\u047C\x07T\x02\x02" +
		"\u047C\u0488\x05\u0210\u0109\x02\u047D\u047E\x07\u024B\x02\x02\u047E\u0483" +
		"\x05\u0230\u0119\x02\u047F\u0480\x07\u0245\x02\x02\u0480\u0482\x05\u0230" +
		"\u0119\x02\u0481\u047F\x03\x02\x02\x02\u0482\u0485\x03\x02\x02\x02\u0483" +
		"\u0481\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484\u0486\x03\x02" +
		"\x02\x02\u0485\u0483\x03\x02\x02\x02\u0486\u0487\x07\u024C\x02\x02\u0487" +
		"\u0489\x03\x02\x02\x02\u0488\u047D\x03\x02\x02\x02\u0488\u0489\x03\x02" +
		"\x02\x02\u0489%\x03\x02\x02\x02\u048A\u048B\x07:\x02\x02\u048B\u048D\x05" +
		"\u0210\u0109\x02\u048C\u048E\x07\u015A\x02\x02\u048D\u048C\x03\x02\x02" +
		"\x02\u048D\u048E\x03\x02\x02\x02\u048E\u0490\x03\x02\x02\x02\u048F\u0491" +
		"\x07w\x02\x02\u0490\u048F\x03\x02\x02\x02\u0490\u0491\x03\x02\x02\x02" +
		"\u0491\u0496\x03\x02\x02\x02\u0492\u0494\x07\x98\x02\x02\u0493\u0492\x03" +
		"\x02\x02\x02\u0493\u0494\x03\x02\x02\x02\u0494\u0495\x03\x02\x02\x02\u0495" +
		"\u0497\x07\xDD\x02\x02\u0496\u0493\x03\x02\x02\x02\u0496\u0497\x03\x02" +
		"\x02\x02\u0497\u0498\x03\x02\x02\x02\u0498\u049B\x074\x02\x02\u0499\u049A" +
		"\t\n\x02\x02\u049A\u049C\x07f\x02\x02\u049B\u0499\x03\x02\x02\x02\u049B" +
		"\u049C\x03\x02\x02\x02\u049C\u049D\x03\x02\x02\x02\u049D\u049E\x07\u0191" +
		"\x02\x02\u049E\u049F\x05\u0270\u0139\x02\u049F\'\x03\x02\x02\x02\u04A0" +
		"\u04AF\x07\xE9\x02\x02\u04A1\u04A2\x05\u0210\u0109\x02\u04A2\u04A3\x07" +
		"\u0253\x02\x02\u04A3\u04A5\x03\x02\x02\x02\u04A4\u04A1\x03\x02\x02\x02" +
		"\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A6\x03\x02\x02\x02\u04A6\u04B0\x05" +
		"\u0210\u0109\x02\u04A7\u04B0\x07\u0170\x02\x02\u04A8\u04A9\x07\u0148\x02" +
		"\x02\u04A9\u04B0\x07\u0126\x02\x02\u04AA\u04AB\x07\u0104\x02\x02\u04AB" +
		"\u04AC\x07{\x02\x02\u04AC\u04B0\x07\x82\x02\x02\u04AD\u04AE\x07\xE5\x02" +
		"\x02\u04AE\u04B0\x07\u0159\x02\x02\u04AF\u04A4\x03\x02\x02\x02\u04AF\u04A7" +
		"\x03\x02\x02\x02\u04AF\u04A8\x03\x02\x02\x02\u04AF\u04AA\x03\x02\x02\x02" +
		"\u04AF\u04AD\x03\x02\x02\x02\u04B0)\x03\x02\x02\x02\u04B1\u04B3\t\v\x02" +
		"\x02\u04B2\u04B4\x058\x1D\x02\u04B3\u04B2\x03\x02\x02\x02\u04B3\u04B4" +
		"\x03\x02\x02\x02\u04B4\u04B8\x03\x02\x02\x02\u04B5\u04B6\x07\u01D5\x02" +
		"\x02\u04B6\u04B8\t\f\x02\x02\u04B7\u04B1\x03\x02\x02\x02\u04B7\u04B5\x03" +
		"\x02\x02\x02\u04B8+\x03\x02\x02\x02\u04B9\u04BD\x05\u0210\u0109\x02\u04BA" +
		"\u04BD\x07\u0186\x02\x02\u04BB\u04BD\x07\u01AC\x02\x02\u04BC\u04B9\x03" +
		"\x02\x02\x02\u04BC\u04BA\x03\x02\x02\x02\u04BC\u04BB\x03\x02\x02\x02\u04BD" +
		"-\x03\x02\x02\x02\u04BE\u04C3\x050\x19\x02\u04BF\u04C0\x07\u0245\x02\x02" +
		"\u04C0\u04C2\x050\x19\x02\u04C1\u04BF\x03\x02\x02\x02\u04C2\u04C5\x03" +
		"\x02\x02\x02\u04C3\u04C1\x03\x02\x02\x02\u04C3\u04C4\x03\x02\x02\x02\u04C4" +
		"/\x03\x02\x02\x02\u04C5\u04C3\x03\x02\x02\x02\u04C6\u04D2\x05\u026A\u0136" +
		"\x02\u04C7\u04C8\x07\u024B\x02\x02\u04C8\u04CD\x05\u0210\u0109\x02\u04C9" +
		"\u04CA\x07\u0245\x02\x02\u04CA\u04CC\x05\u0210\u0109\x02\u04CB\u04C9\x03" +
		"\x02\x02\x02\u04CC\u04CF\x03\x02\x02\x02\u04CD\u04CB\x03\x02\x02\x02\u04CD" +
		"\u04CE\x03\x02\x02\x02\u04CE\u04D0\x03\x02\x02\x02\u04CF\u04CD\x03\x02" +
		"\x02\x02\u04D0\u04D1\x07\u024C\x02\x02\u04D1\u04D3\x03\x02\x02\x02\u04D2" +
		"\u04C7\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02\u04D31\x03\x02\x02" +
		"\x02\u04D4\u04D5\x07\u024B\x02\x02\u04D5\u04DA\x054\x1B\x02\u04D6\u04D7" +
		"\x07\u0245\x02\x02\u04D7\u04D9\x054\x1B\x02\u04D8\u04D6\x03\x02\x02\x02" +
		"\u04D9\u04DC\x03\x02\x02\x02\u04DA\u04D8\x03\x02\x02\x02\u04DA\u04DB\x03" +
		"\x02\x02\x02\u04DB\u04DD\x03\x02\x02\x02\u04DC\u04DA\x03\x02\x02\x02\u04DD" +
		"\u04DE\x07\u024C\x02\x02\u04DE\u04EC\x03\x02\x02\x02\u04DF\u04E1\x07\u0160" +
		"\x02\x02\u04E0\u04DF\x03\x02\x02\x02\u04E0\u04E1\x03\x02\x02\x02\u04E1" +
		"\u04E3\x03\x02\x02\x02\u04E2\u04E4\x07\u015F\x02\x02\u04E3\u04E2\x03\x02" +
		"\x02\x02\u04E3\u04E4\x03\x02\x02\x02\u04E4\u04E6\x03\x02\x02\x02\u04E5" +
		"\u04E7\x07\u016F\x02\x02\u04E6\u04E5\x03\x02\x02\x02\u04E6\u04E7\x03\x02" +
		"\x02\x02\u04E7\u04E9\x03\x02\x02\x02\u04E8\u04EA\x07\u0172\x02\x02\u04E9" +
		"\u04E8\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02\u04EA\u04EC\x03\x02" +
		"\x02\x02\u04EB\u04D4\x03\x02\x02\x02\u04EB\u04E0\x03\x02\x02\x02\u04EC" +
		"3\x03\x02\x02\x02\u04ED\u04EF\t\r\x02\x02\u04EE\u04F0\x058\x1D\x02\u04EF" +
		"\u04EE\x03\x02\x02\x02\u04EF\u04F0\x03\x02\x02\x02\u04F05\x03\x02\x02" +
		"\x02\u04F1\u04F3\t\x0E\x02\x02\u04F2\u04F4\x058\x1D\x02\u04F3\u04F2\x03" +
		"\x02\x02\x02\u04F3\u04F4\x03\x02\x02\x02\u04F47\x03\x02\x02\x02\u04F5" +
		"\u04F6\t\x0F\x02\x02\u04F69\x03\x02\x02\x02\u04F7\u0509\x07\x97\x02\x02" +
		"\u04F8\u0509\x07\xB7\x02\x02\u04F9\u0509\x07Z\x02\x02\u04FA\u0509\x07" +
		"\x80\x02\x02\u04FB\u04FD\t\x10\x02\x02\u04FC\u04FB\x03\x02\x02\x02\u04FC" +
		"\u04FD\x03\x02\x02\x02\u04FD\u04FE\x03\x02\x02\x02\u04FE\u0509\x05\u0150" +
		"\xA9\x02\u04FF\u0509\x07\u0170\x02\x02\u0500\u0502\x07]\x02\x02\u0501" +
		"\u0503\t\x11\x02\x02\u0502\u0501\x03\x02\x02\x02\u0502\u0503\x03\x02\x02" +
		"\x02\u0503\u0509\x03\x02\x02\x02\u0504\u0506\x07\x13\x02\x02\u0505\u0507" +
		"\t\x11\x02\x02\u0506\u0505\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02" +
		"\u0507\u0509\x03\x02\x02\x02\u0508\u04F7\x03\x02\x02\x02\u0508\u04F8\x03" +
		"\x02\x02\x02\u0508\u04F9\x03\x02\x02\x02\u0508\u04FA\x03\x02\x02\x02\u0508" +
		"\u04FC\x03\x02\x02\x02\u0508\u04FF\x03\x02\x02\x02\u0508\u0500\x03\x02" +
		"\x02\x02\u0508\u0504\x03\x02\x02\x02\u0509;\x03\x02\x02\x02\u050A\u050E" +
		"\x05> \x02\u050B\u050E\x05@!\x02\u050C\u050E\x05B\"\x02\u050D\u050A\x03" +
		"\x02\x02\x02\u050D\u050B\x03\x02\x02\x02\u050D\u050C\x03\x02\x02\x02\u050E" +
		"=\x03\x02\x02\x02\u050F\u0536\x07\u0180\x02\x02\u0510\u0537\x05\u01A0" +
		"\xD1\x02\u0511\u0537\x05\u01A4\xD3\x02\u0512\u0537\x05\x90I\x02\u0513" +
		"\u0537\x05\x9AN\x02\u0514\u0537\x05\u0112\x8A\x02\u0515\u0537\x05\u010E" +
		"\x88\x02\u0516\u0537\x05\u0136\x9C\x02\u0517\u0537\x05\u014C\xA7\x02\u0518" +
		"\u0537\x05\u0156\xAC\x02\u0519\u0537\x05\u0196\xCC\x02\u051A\u0537\x05" +
		"\x9CO\x02\u051B\u0537\x05\x9EP\x02\u051C\u0537\x05\xA0Q\x02\u051D\u0537" +
		"\x05\xA2R\x02\u051E\u0537\x05\xA4S\x02\u051F\u0537\x05\xAAV\x02\u0520" +
		"\u0537\x05\xACW\x02\u0521\u0537\x05\xAEX\x02\u0522\u0537\x05\xA6T\x02" +
		"\u0523\u0537\x05\xB0Y\x02\u0524\u0537\x05\xB6\\\x02\u0525\u0537\x05\xE0" +
		"q\x02\u0526\u0537\x05\xE2r\x02\u0527\u0537\x05\xE4s\x02\u0528\u0537\x05" +
		"\xF0y\x02\u0529\u0537\x05\xF4{\x02\u052A\u0537\x05\xF6|\x02\u052B\u0537" +
		"\x05\xF8}\x02\u052C\u0537\x05\xFC\x7F\x02\u052D\u0537\x05\u0102\x82\x02" +
		"\u052E\u0537\x05\u01A2\xD2\x02\u052F\u0537\x05\u0158\xAD\x02\u0530\u0537" +
		"\x05\u015E\xB0\x02\u0531\u0537\x05\u0164\xB3\x02\u0532\u0537\x05\u0168" +
		"\xB5\x02\u0533\u0537\x05\u0174\xBB\x02\u0534\u0537\x05\u017C\xBF\x02\u0535" +
		"\u0537\x05\u0180\xC1\x02\u0536\u0510\x03\x02\x02\x02\u0536\u0511\x03\x02" +
		"\x02\x02\u0536\u0512\x03\x02\x02\x02\u0536\u0513\x03\x02\x02\x02\u0536" +
		"\u0514\x03\x02\x02\x02\u0536\u0515\x03\x02\x02\x02\u0536\u0516\x03\x02" +
		"\x02\x02\u0536\u0517\x03\x02\x02\x02\u0536\u0518\x03\x02\x02\x02\u0536" +
		"\u0519\x03\x02\x02\x02\u0536\u051A\x03\x02\x02\x02\u0536\u051B\x03\x02" +
		"\x02\x02\u0536\u051C\x03\x02\x02\x02\u0536\u051D\x03\x02\x02\x02\u0536" +
		"\u051E\x03\x02\x02\x02\u0536\u051F\x03\x02\x02\x02\u0536\u0520\x03\x02" +
		"\x02\x02\u0536\u0521\x03\x02\x02\x02\u0536\u0522\x03\x02\x02\x02\u0536" +
		"\u0523\x03\x02\x02\x02\u0536\u0524\x03\x02\x02\x02\u0536\u0525\x03\x02" +
		"\x02\x02\u0536\u0526\x03\x02\x02\x02\u0536\u0527\x03\x02\x02\x02\u0536" +
		"\u0528\x03\x02\x02\x02\u0536\u0529\x03\x02\x02\x02\u0536\u052A\x03\x02" +
		"\x02\x02\u0536\u052B\x03\x02\x02\x02\u0536\u052C\x03\x02\x02\x02\u0536" +
		"\u052D\x03\x02\x02\x02\u0536\u052E\x03\x02\x02\x02\u0536\u052F\x03\x02" +
		"\x02\x02\u0536\u0530\x03\x02\x02\x02\u0536\u0531\x03\x02\x02\x02\u0536" +
		"\u0532\x03\x02\x02\x02\u0536\u0533\x03\x02\x02\x02\u0536\u0534\x03\x02" +
		"\x02\x02\u0536\u0535\x03\x02\x02\x02\u0537\u053E\x03\x02\x02\x02\u0538" +
		"\u053E\x05\u012E\x98\x02\u0539\u053E\x05\u0118\x8D\x02\u053A\u053E\x05" +
		"\u0106\x84\x02\u053B\u053E\x05D#\x02\u053C\u053E\x05\u0130\x99\x02\u053D" +
		"\u050F\x03\x02\x02\x02\u053D\u0538\x03\x02\x02\x02\u053D\u0539\x03\x02" +
		"\x02\x02\u053D\u053A\x03\x02\x02\x02\u053D\u053B\x03\x02\x02\x02\u053D" +
		"\u053C\x03\x02\x02\x02\u053E?\x03\x02\x02\x02\u053F\u0560\x07\f\x02\x02" +
		"\u0540\u0561\x05F$\x02\u0541\u0561\x05P)\x02\u0542\u0561\x05R*\x02\u0543" +
		"\u0561\x05T+\x02\u0544\u0561\x05l7\x02\u0545\u0561\x05p9\x02\u0546\u0561" +
		"\x05v<\x02\u0547\u0561\x05x=\x02\u0548\u0561\x05z>\x02\u0549\u0561\x05" +
		"~@\x02";
	private static readonly _serializedATNSegment5: string =
		"\u054A\u0561\x05\x80A\x02\u054B\u0561\x05\x82B\x02\u054C\u0561\x05\x86" +
		"D\x02\u054D\u0561\x05\xB2Z\x02\u054E\u0561\x05\xB8]\x02\u054F\u0561\x05" +
		"\xBA^\x02\u0550\u0561\x05\xC0a\x02\u0551\u0561\x05\xC4c\x02\u0552\u0561" +
		"\x05\xCAf\x02\u0553\u0561\x05\xCCg\x02\u0554\u0561\x05\xD0i\x02\u0555" +
		"\u0561\x05H%\x02\u0556\u0561\x05J&\x02\u0557\u0561\x05\u015A\xAE\x02\u0558" +
		"\u0561\x05\u0160\xB1\x02\u0559\u0561\x05\u0188\xC5\x02\u055A\u0561\x05" +
		"\u018A\xC6\x02\u055B\u0561\x05\u016A\xB6\x02\u055C\u0561\x05\u0178\xBD" +
		"\x02\u055D\u0561\x05\u017E\xC0\x02\u055E\u0561\x05\u0182\xC2\x02\u055F" +
		"\u0561\x05\xC6d\x02\u0560\u0540\x03\x02\x02\x02\u0560\u0541\x03\x02\x02" +
		"\x02\u0560\u0542\x03\x02\x02\x02\u0560\u0543\x03\x02\x02\x02\u0560\u0544" +
		"\x03\x02\x02\x02\u0560\u0545\x03\x02\x02\x02\u0560\u0546\x03\x02\x02\x02" +
		"\u0560\u0547\x03\x02\x02\x02\u0560\u0548\x03\x02\x02\x02\u0560\u0549\x03" +
		"\x02\x02\x02\u0560\u054A\x03\x02\x02\x02\u0560\u054B\x03\x02\x02\x02\u0560" +
		"\u054C\x03\x02\x02\x02\u0560\u054D\x03\x02\x02\x02\u0560\u054E\x03\x02" +
		"\x02\x02\u0560\u054F\x03\x02\x02\x02\u0560\u0550\x03\x02\x02\x02\u0560" +
		"\u0551\x03\x02\x02\x02\u0560\u0552\x03\x02\x02\x02\u0560\u0553\x03\x02" +
		"\x02\x02\u0560\u0554\x03\x02\x02\x02\u0560\u0555\x03\x02\x02\x02\u0560" +
		"\u0556\x03\x02\x02\x02\u0560\u0557\x03\x02\x02\x02\u0560\u0558\x03\x02" +
		"\x02\x02\u0560\u0559\x03\x02\x02\x02\u0560\u055A\x03\x02\x02\x02\u0560" +
		"\u055B\x03\x02\x02\x02\u0560\u055C\x03\x02\x02\x02\u0560\u055D\x03\x02" +
		"\x02\x02\u0560\u055E\x03\x02\x02\x02\u0560\u055F\x03\x02\x02\x02\u0561" +
		"A\x03\x02\x02\x02\u0562\u056E\x07I\x02\x02\u0563\u056F\x05\u0204\u0103" +
		"\x02\u0564\u056F\x05\u0206\u0104\x02\u0565\u056F\x05\u0208\u0105\x02\u0566" +
		"\u056F\x05\u015C\xAF\x02\u0567\u056F\x05\u0166\xB4\x02\u0568\u056F\x05" +
		"\u0172\xBA\x02\u0569\u056F\x05\u017A\xBE\x02\u056A\u056F\x05\u020A\u0106" +
		"\x02\u056B\u056F\x05\xD6l\x02\u056C\u056F\x05\xD8m\x02\u056D\u056F\x05" +
		"\xDAn\x02\u056E\u0563\x03\x02\x02\x02\u056E\u0564\x03\x02\x02\x02\u056E" +
		"\u0565\x03\x02\x02\x02\u056E\u0566\x03\x02\x02\x02\u056E\u0567\x03\x02" +
		"\x02\x02\u056E\u0568\x03\x02\x02\x02\u056E\u0569\x03\x02\x02\x02\u056E" +
		"\u056A\x03\x02\x02\x02\u056E\u056B\x03\x02\x02\x02\u056E\u056C\x03\x02" +
		"\x02\x02\u056E\u056D\x03\x02\x02\x02\u056FC\x03\x02\x02\x02\u0570\u0571" +
		"\x07m\x02\x02\u0571\u0572\x07\u0192\x02\x02\u0572\u0573\x07\xDB\x02\x02" +
		"\u0573\u057D\x05\u0210\u0109\x02\u0574\u0575\x07\u019D\x02\x02\u0575\u0578" +
		"\x07\u01B1\x02\x02\u0576\u0578\x07\u018E\x02\x02\u0577\u0574\x03\x02\x02" +
		"\x02\u0577\u0576\x03\x02\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579\u057A" +
		"\x07\u024B\x02\x02\u057A\u057B\x05\u02B6\u015C\x02\u057B\u057C\x07\u024C" +
		"\x02\x02\u057C\u057E\x03\x02\x02\x02\u057D\u0577\x03\x02\x02\x02\u057D" +
		"\u057E\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02\u057F\u0580\x07\u0193" +
		"\x02\x02\u0580\u0581\x07\xE4\x02\x02\u0581\u0582\x05\u0210\u0109\x02\u0582" +
		"\u0583\x07\u019A\x02\x02\u0583\u0585\x05\u0210\u0109\x02\u0584\u0586\x05" +
		"\u01BC\xDF\x02\u0585\u0584\x03\x02\x02\x02\u0585\u0586\x03\x02\x02\x02" +
		"\u0586E\x03\x02\x02\x02\u0587\u0589\t\x12\x02\x02\u0588\u058A\x05\u0140" +
		"\xA1\x02\u0589\u0588\x03\x02\x02\x02\u0589\u058A\x03\x02\x02\x02\u058A" +
		"\u05A3\x03\x02\x02\x02\u058B\u0597\x05h5\x02\u058C\u0594\x07\xCE\x02\x02" +
		"\u058D\u058E\x05\u0210\u0109\x02\u058E\u058F\x07\u0253\x02\x02\u058F\u0591" +
		"\x03\x02\x02\x02\u0590\u058D\x03\x02\x02\x02\u0590\u0591\x03\x02\x02\x02" +
		"\u0591\u0592\x03\x02\x02\x02\u0592\u0595\x05\u0210\u0109\x02\u0593\u0595" +
		"\x07\u0170\x02\x02\u0594\u0590\x03\x02\x02\x02\u0594\u0593\x03\x02\x02" +
		"\x02\u0595\u0597\x03\x02\x02\x02\u0596\u058B\x03\x02\x02\x02\u0596\u058C" +
		"\x03\x02\x02\x02\u0597\u0598\x03\x02\x02\x02\u0598\u0596\x03\x02\x02\x02" +
		"\u0598\u0599\x03\x02\x02\x02\u0599\u059B\x03\x02\x02\x02\u059A\u059C\x07" +
		"\xD0\x02\x02\u059B\u059A\x03\x02\x02\x02\u059B\u059C\x03\x02\x02\x02\u059C" +
		"\u05A4\x03\x02\x02\x02\u059D\u05A4\x05\u01EE\xF8\x02\u059E\u05A4\x05\u01F0" +
		"\xF9\x02\u059F\u05A0\x07A\x02\x02\u05A0\u05A1\x07\u01A3\x02\x02\u05A1" +
		"\u05A2\x07V\x02\x02\u05A2\u05A4\x05\u0210\u0109\x02\u05A3\u0596\x03\x02" +
		"\x02\x02\u05A3\u059D\x03\x02\x02\x02\u05A3\u059E\x03\x02\x02\x02\u05A3" +
		"\u059F\x03\x02\x02\x02\u05A4G\x03\x02\x02\x02\u05A5\u05A6\x07\n\x02\x02" +
		"\u05A6\u05A9\x05\u0140\xA1\x02\u05A7\u05AA\x05\u01EE\xF8\x02\u05A8\u05AA" +
		"\x05\u01F0\xF9\x02\u05A9\u05A7\x03\x02\x02\x02\u05A9\u05A8\x03\x02\x02" +
		"\x02\u05AAI\x03\x02\x02\x02\u05AB\u05AC\x07V\x02\x02\u05AC\u05AD\x05\u0210" +
		"\u0109\x02\u05AD\u05AE\x05L\'\x02\u05AEK\x03\x02\x02\x02\u05AF\u05BB\x05" +
		"\u01F0\xF9\x02\u05B0\u05B6\x07\u0112\x02\x02\u05B1\u05B4\x07\u01B1\x02" +
		"\x02\u05B2\u05B5\x05\u0210\u0109\x02\u05B3\u05B5\x05\u0146\xA4\x02\u05B4" +
		"\u05B2\x03\x02\x02\x02\u05B4\u05B3\x03\x02\x02\x02\u05B5\u05B7\x03\x02" +
		"\x02\x02\u05B6\u05B1\x03\x02\x02\x02\u05B6\u05B7\x03\x02\x02\x02\u05B7" +
		"\u05BB\x03\x02\x02\x02\u05B8\u05B9\t\x13\x02\x02\u05B9\u05BB\x05N(\x02" +
		"\u05BA\u05AF\x03\x02\x02\x02\u05BA\u05B0\x03\x02\x02\x02\u05BA\u05B8\x03" +
		"\x02\x02\x02\u05BBM\x03\x02\x02\x02\u05BC\u05BD\x07\x05\x02\x02\u05BD" +
		"\u05BE\x07\x8E\x02\x02\u05BE\u0617\x05\u026A\u0136\x02\u05BF\u05C0\x07" +
		"\n\x02\x02\u05C0\u0617\x05\u0140\xA1\x02\u05C1\u05C2\x07\u017B\x02\x02" +
		"\u05C2\u05C3\x07\u024B\x02\x02\u05C3\u05C4\x05\u026A\u0136\x02\u05C4\u05C5" +
		"\x07\u0176\x02\x02\u05C5\u05C6\x05\u026A\u0136\x02\u05C6\u05C7\x07\u024C" +
		"\x02\x02\u05C7\u0617\x03\x02\x02\x02\u05C8\u05C9\x07\u015B\x02\x02\u05C9" +
		"\u0617\x05\u0210\u0109\x02\u05CA\u05CB\x07.\x02\x02\u05CB\u0617\x05\u0210" +
		"\u0109\x02\u05CC\u05CD\x07G\x02\x02\u05CD\u0617\x05\u026A\u0136\x02\u05CE" +
		"\u05CF\x07P\x02\x02\u05CF\u05D0\x07\u0106\x02\x02\u05D0\u0617\x05\u0210" +
		"\u0109\x02\u05D1\u05D2\x07\u0192\x02\x02\u05D2\u05D3\x076\x02\x02\u05D3" +
		"\u05D4\x07\u0121\x02\x02\u05D4\u0617\x05\u0210\u0109\x02\u05D5\u05D6\x07" +
		"\u0192\x02\x02\u05D6\u05D7\x07\u01AF\x02\x02\u05D7\u0617\x05\u026A\u0136" +
		"\x02\u05D8\u05D9\x07^\x02\x02\u05D9\u0617\x05\u0140\xA1\x02\u05DA\u05DC" +
		"\x07\x8C\x02\x02\u05DB\u05DA\x03\x02\x02\x02\u05DB\u05DC\x03\x02\x02\x02" +
		"\u05DC\u05DD\x03\x02\x02\x02\u05DD\u05DE\x07\u011A\x02\x02\u05DE\u0617" +
		"\x05\u026A\u0136\x02\u05DF\u05E0\x07\xA2\x02\x02\u05E0\u0617\x05\xFE\x80" +
		"\x02\u05E1\u05E2\x07\xA2\x02\x02\u05E2\u05E3\x07 \x02\x02\u05E3\u05E4" +
		"\x05\u026A\u0136\x02\u05E4\u05E5\x07\u01B7\x02\x02\u05E5\u05E6\x05\u0210" +
		"\u0109\x02\u05E6\u0617\x03\x02\x02\x02\u05E7\u05E8\x07\xA2\x02\x02\u05E8" +
		"\u05E9\x07X\x02\x02\u05E9\u05EA\x05\u026A\u0136\x02\u05EA\u05EB\x07\u01B7" +
		"\x02\x02\u05EB\u05EC\x05\u0210\u0109\x02\u05EC\u0617\x03\x02\x02\x02\u05ED" +
		"\u05EF\x07\xB9\x02\x02\u05EE\u05ED\x03\x02\x02\x02\u05EE\u05EF\x03\x02" +
		"\x02\x02\u05EF\u05F0\x03\x02\x02\x02\u05F0\u05F1\x07~\x02\x02\u05F1\u0617" +
		"\x05\u0210\u0109\x02\u05F2\u05F3\x07\xBA\x02\x02\u05F3\u0617\x05\u0140" +
		"\xA1\x02\u05F4\u05F5\x07\xD6\x02\x02\u05F5\u0617\x05\u0140\xA1\x02\u05F6" +
		"\u05F7\x07\xDB\x02\x02\u05F7\u0617\x05\u0210\u0109\x02\u05F8\u05F9\x07" +
		"\xE1\x02\x02\u05F9\u0617\x05\u026A\u0136\x02\u05FA\u05FB\x07\xE4\x02\x02" +
		"\u05FB\u0617\x05\u0210\u0109\x02\u05FC\u05FD\x07\u01AF\x02\x02\u05FD\u0617" +
		"\x05\u026A\u0136\x02\u05FE\u05FF\x07\u0102\x02\x02\u05FF\u0600\x07\xDE" +
		"\x02\x02\u0600\u0601\x07(\x02\x02\u0601\u0617\x05\u026A\u0136\x02\u0602" +
		"\u0603\x07\u0102\x02\x02\u0603\u0604\x07\xDE\x02\x02\u0604\u0605\x07C" +
		"\x02\x02\u0605\u0617\x05\u026A\u0136\x02\u0606\u0607\x07\u0102\x02\x02" +
		"\u0607\u0608\x07\xDE\x02\x02\u0608\u0609\x07\xAC\x02\x02\u0609\u0617\x05" +
		"\u026A\u0136\x02\u060A\u060B\x07\u0102\x02\x02\u060B\u060C\x07\xDE\x02" +
		"\x02\u060C\u060D\x07\u0100\x02\x02\u060D\u0617\x05\u026A\u0136\x02\u060E" +
		"\u060F\x07\u0105\x02\x02\u060F\u0610\x07\u0191\x02\x02\u0610\u0611\x05" +
		"\u0210\u0109\x02\u0611\u0612\x07~\x02\x02\u0612\u0613\x05\u0210\u0109" +
		"\x02\u0613\u0617\x03\x02\x02\x02\u0614\u0615\x07\u0109\x02\x02\u0615\u0617" +
		"\x05\u026A\u0136\x02\u0616\u05BC\x03\x02\x02\x02\u0616\u05BF\x03\x02\x02" +
		"\x02\u0616\u05C1\x03\x02\x02\x02\u0616\u05C8\x03\x02\x02\x02\u0616\u05CA" +
		"\x03\x02\x02\x02\u0616\u05CC\x03\x02\x02\x02\u0616\u05CE\x03\x02\x02\x02" +
		"\u0616\u05D1\x03\x02\x02\x02\u0616\u05D5\x03\x02\x02\x02\u0616\u05D8\x03" +
		"\x02\x02\x02\u0616\u05DB\x03\x02\x02\x02\u0616\u05DF\x03\x02\x02\x02\u0616" +
		"\u05E1\x03\x02\x02\x02\u0616\u05E7\x03\x02\x02\x02\u0616\u05EE\x03\x02" +
		"\x02\x02\u0616\u05F2\x03\x02\x02\x02\u0616\u05F4\x03\x02\x02\x02\u0616" +
		"\u05F6\x03\x02\x02\x02\u0616\u05F8\x03\x02\x02\x02\u0616\u05FA\x03\x02" +
		"\x02\x02\u0616\u05FC\x03\x02\x02\x02\u0616\u05FE\x03\x02\x02\x02\u0616" +
		"\u0602\x03\x02\x02\x02\u0616\u0606\x03\x02\x02\x02\u0616\u060A\x03\x02" +
		"\x02\x02\u0616\u060E\x03\x02\x02\x02\u0616\u0614\x03\x02\x02\x02\u0617" +
		"O\x03\x02\x02\x02\u0618\u0619\x07\xDB\x02\x02\u0619\u061A\x05\u0210\u0109" +
		"\x02\u061A\u061B\x05\u01EE\xF8\x02\u061BQ\x03\x02\x02\x02\u061C\u061E" +
		"\x07\xB9\x02\x02\u061D\u061C\x03\x02\x02\x02\u061D\u061E\x03\x02\x02\x02" +
		"\u061E\u061F\x03\x02\x02\x02\u061F\u0620\x07~\x02\x02\u0620\u0623\x05" +
		"\u0210\u0109\x02\u0621\u0624\x05\u01EE\xF8\x02\u0622\u0624\x05\u01EC\xF7" +
		"\x02\u0623\u0621\x03\x02\x02\x02\u0623\u0622\x03\x02\x02\x02\u0624S\x03" +
		"\x02\x02\x02\u0625\u0627\x07\u0192\x02\x02\u0626\u0625\x03\x02\x02\x02" +
		"\u0626\u0627\x03\x02\x02\x02\u0627\u0628\x03\x02\x02\x02\u0628\u062A\x07" +
		"\u01AF\x02\x02\u0629\u062B\x05\u0198\xCD\x02\u062A\u0629\x03\x02\x02\x02" +
		"\u062A\u062B\x03\x02\x02\x02\u062B\u062D\x03\x02\x02\x02\u062C\u062E\x07" +
		"\u01A4\x02\x02\u062D\u062C\x03\x02\x02\x02\u062D\u062E\x03\x02\x02\x02" +
		"\u062E\u062F\x03\x02\x02\x02\u062F\u0631\x05\u026A\u0136\x02\u0630\u0632" +
		"\x07\u024F\x02\x02\u0631\u0630\x03\x02\x02\x02\u0631\u0632\x03\x02\x02" +
		"\x02\u0632\u0653\x03\x02\x02\x02\u0633\u0638\x05V,\x02\u0634\u0635\x07" +
		"\u0245\x02\x02\u0635\u0637\x05V,\x02\u0636\u0634\x03\x02\x02\x02\u0637" +
		"\u063A\x03\x02\x02\x02\u0638\u0636\x03\x02\x02\x02\u0638\u0639\x03\x02" +
		"\x02\x02\u0639\u0654\x03\x02\x02\x02\u063A\u0638\x03\x02\x02\x02\u063B" +
		"\u063D\x07\xCA\x02\x02\u063C\u063E\x07\u017E\x02\x02\u063D\u063C\x03\x02" +
		"\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063F\x03\x02\x02\x02\u063F" +
		"\u0640\x05\u0210\u0109\x02\u0640\u0641\x07\u01B1\x02\x02\u0641\u0642\x05" +
		"\u0210\u0109\x02\u0642\u0654\x03\x02\x02\x02\u0643\u0654\x05\u01F0\xF9" +
		"\x02\u0644\u0654\x05\u01EE\xF8\x02\u0645\u0646\x07\xCA\x02\x02\u0646\u0647" +
		"\x07\u017F\x02\x02\u0647\u0648\x05\u0210\u0109\x02\u0648\u0649\x07\u01B1" +
		"\x02\x02\u0649\u064A\x05\u0210\u0109\x02\u064A\u0654\x03\x02\x02\x02\u064B" +
		"\u064C\x07\x11\x02\x02\u064C\u064D\x07\xAE\x02\x02\u064D\u064E\x05\u026A" +
		"\u0136\x02\u064E\u064F\x05\u01AA\xD6\x02\u064F\u0654\x03\x02\x02\x02\u0650" +
		"\u0651\x07B\x02\x02\u0651\u0652\x07\xAE\x02\x02\u0652\u0654\x05\u026A" +
		"\u0136\x02\u0653\u0633\x03\x02\x02\x02\u0653\u063B\x03\x02\x02\x02\u0653" +
		"\u0643\x03\x02\x02\x02\u0653\u0644\x03\x02\x02\x02\u0653\u0645\x03\x02" +
		"\x02\x02\u0653\u064B\x03\x02\x02\x02\u0653\u0650\x03\x02\x02\x02\u0654" +
		"U\x03\x02\x02\x02\u0655\u0657\x07\x07\x02\x02\u0656\u0658\x07\u017E\x02" +
		"\x02\u0657\u0656\x03\x02\x02\x02\u0657\u0658\x03\x02\x02\x02\u0658\u065A" +
		"\x03\x02\x02\x02\u0659\u065B\x05\u019A\xCE\x02\u065A\u0659\x03\x02\x02" +
		"\x02\u065A\u065B\x03\x02\x02\x02\u065B\u065C\x03\x02\x02\x02\u065C\u06C4" +
		"\x05\u01C8\xE5\x02\u065D\u065F\x07I\x02\x02\u065E\u0660\x07\u017E\x02" +
		"\x02\u065F\u065E\x03\x02\x02\x02\u065F\u0660\x03\x02\x02\x02\u0660\u0662" +
		"\x03\x02\x02\x02\u0661\u0663\x05\u0198\xCD\x02\u0662\u0661\x03\x02\x02" +
		"\x02\u0662\u0663\x03\x02\x02\x02\u0663\u0664\x03\x02\x02\x02\u0664\u0666" +
		"\x05\u0210\u0109\x02\u0665\u0667\x05\u01F8\xFD\x02\u0666\u0665\x03\x02" +
		"\x02\x02\u0666\u0667\x03\x02\x02\x02\u0667\u06C4\x03\x02\x02\x02\u0668" +
		"\u066A\x07\f\x02\x02\u0669\u066B\x07\u017E\x02\x02\u066A\u0669\x03\x02" +
		"\x02\x02\u066A\u066B\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C" +
		"\u066D\x05\u0210\u0109\x02\u066D\u066E\x05X-\x02\u066E\u06C4\x03\x02\x02" +
		"\x02\u066F\u0670\x07\x07\x02\x02\u0670\u0673\x05\u01CC\xE7\x02\u0671\u0672" +
		"\x07\u01A0\x02\x02\u0672\u0674\x07\u0114\x02\x02\u0673\u0671\x03\x02\x02" +
		"\x02\u0673\u0674\x03\x02\x02\x02\u0674\u06C4\x03\x02\x02\x02\u0675\u06C4" +
		"\x05`1\x02\u0676\u06C4\x05b2\x02\u0677\u0678\t\x14\x02\x02\u0678\u067C" +
		"\x07\u0106\x02\x02\u0679\u067D\x05\u026A\u0136\x02\u067A\u067D\x07\u0170" +
		"\x02\x02\u067B\u067D\x07\u01B6\x02\x02\u067C\u0679\x03\x02\x02\x02\u067C" +
		"\u067A\x03\x02\x02\x02\u067C\u067B\x03\x02\x02\x02\u067C\u067D\x03\x02" +
		"\x02\x02\u067D\u06C4\x03\x02\x02\x02\u067E\u067F\x07K\x02\x02\u067F\u0680" +
		"\t\x15\x02\x02\u0680\u0681\x07\u0106\x02\x02\u0681\u06C4\x05\u026A\u0136" +
		"\x02\u0682\u0683\t\x14\x02\x02\u0683\u0684\x07\xD9\x02\x02\u0684\u06C4" +
		"\x05\u026A\u0136\x02\u0685\u0686\x07K\x02\x02\u0686\u0687\t\x15\x02\x02" +
		"\u0687\u0688\x07\xD9\x02\x02\u0688\u06C4\x05\u026A\u0136\x02\u0689\u068A" +
		"\t\x14\x02\x02\u068A\u068B\x07\u0144\x02\x02\u068B\u068C\x07\x82\x02\x02" +
		"\u068C\u06C4\x07\xE0\x02\x02\u068D\u068F\x07\x98\x02\x02\u068E\u068D\x03" +
		"\x02\x02\x02\u068E\u068F\x03\x02\x02\x02\u068F\u0690\x03\x02\x02\x02\u0690" +
		"\u0691\x07\\\x02\x02\u0691\u0692\x07\u0144\x02\x02\u0692\u0693\x07\x82" +
		"\x02\x02\u0693\u06C4\x07\xE0\x02\x02\u0694\u0695\x07\"\x02\x02\u0695\u0696" +
		"\x07\u01A3\x02\x02\u0696\u06C4\x05\u026A\u0136\x02\u0697\u0698\x07\xE6" +
		"\x02\x02\u0698\u0699\x07\u011F\x02\x02\u0699\u06C4\t\x16\x02\x02\u069A" +
		"\u069B\x07\xE6\x02\x02\u069B\u069C\x07\u01BC\x02\x02\u069C\u06C4\x07\xA0" +
		"\x02\x02\u069D\u069E\x07\xE6\x02\x02\u069E\u06C4\t\x17\x02\x02\u069F\u06A0" +
		"\x07\xE6\x02\x02\u06A0\u06C4\x05\u01DC\xEF\x02\u06A1\u06A2\x07\xCE\x02" +
		"\x02\u06A2\u06C4\x05\u01D8\xED\x02\u06A3\u06C4\x05\u01BC\xDF\x02\u06A4" +
		"\u06A5\x07s\x02\x02\u06A5\u06C4\x05\u026A\u0136\x02\u06A6\u06A7\x07\x98" +
		"\x02\x02\u06A7\u06A8\x07s\x02\x02\u06A8\u06C4\x05\u026A\u0136\x02\u06A9" +
		"\u06AA\x07\x9E\x02\x02\u06AA\u06C4\x05\u026A\u0136\x02\u06AB\u06AC\x07" +
		"\u01A0\x02\x02\u06AC\u06C4\x07\x9E\x02\x02\u06AD\u06C4\x05\u01EC\xF7\x02" +
		"\u06AE\u06AF\x07\xE6\x02\x02\u06AF\u06C4\x05\u01E8\xF5\x02\u06B0\u06B1" +
		"\x07\xCD\x02\x02\u06B1\u06B8\x07h\x02\x02\u06B2\u06B9\x07\u0187\x02\x02" +
		"\u06B3\u06B9\x07\u0160\x02\x02\u06B4\u06B9\x07\x99\x02\x02\u06B5\u06B6" +
		"\x07\u01B7\x02\x02\u06B6\u06B7\x07q\x02\x02\u06B7\u06B9\x05\u0210\u0109" +
		"\x02\u06B8\u06B2\x03\x02\x02\x02\u06B8\u06B3\x03\x02\x02\x02\u06B8\u06B4" +
		"\x03\x02\x02\x02\u06B8\u06B5\x03\x02\x02\x02\u06B9\u06C4\x03\x02\x02\x02" +
		"\u06BA\u06BB\x07\f\x02\x02\u06BB\u06BC\x07\u017F\x02\x02\u06BC\u06BE\x05" +
		"\u0210\u0109\x02\u06BD\u06BF\x05d3\x02\u06BE\u06BD\x03\x02\x02\x02\u06BE" +
		"\u06BF\x03\x02\x02\x02\u06BF\u06C1\x03\x02\x02\x02\u06C0\u06C2\x05f4\x02" +
		"\u06C1\u06C0\x03\x02\x02\x02\u06C1\u06C2\x03\x02\x02\x02\u06C2\u06C4\x03" +
		"\x02\x02\x02\u06C3\u0655\x03\x02\x02\x02\u06C3\u065D\x03\x02\x02\x02\u06C3" +
		"\u0668\x03\x02\x02\x02\u06C3\u066F\x03\x02\x02\x02\u06C3\u0675\x03\x02" +
		"\x02\x02\u06C3\u0676\x03\x02\x02\x02\u06C3\u0677\x03\x02\x02\x02\u06C3" +
		"\u067E\x03\x02\x02\x02\u06C3\u0682\x03\x02\x02\x02\u06C3\u0685\x03\x02" +
		"\x02\x02\u06C3\u0689\x03\x02\x02\x02\u06C3\u068E\x03\x02\x02\x02\u06C3" +
		"\u0694\x03\x02\x02\x02\u06C3\u0697\x03\x02\x02\x02\u06C3\u069A\x03\x02" +
		"\x02\x02\u06C3\u069D\x03\x02\x02\x02\u06C3\u069F\x03\x02\x02\x02\u06C3" +
		"\u06A1\x03\x02\x02\x02\u06C3\u06A3\x03\x02\x02\x02\u06C3\u06A4\x03\x02" +
		"\x02\x02\u06C3\u06A6\x03\x02\x02\x02\u06C3\u06A9\x03\x02\x02\x02\u06C3" +
		"\u06AB\x03\x02\x02\x02\u06C3\u06AD\x03\x02\x02\x02\u06C3\u06AE\x03\x02" +
		"\x02\x02\u06C3\u06B0\x03\x02\x02\x02\u06C3\u06BA\x03\x02\x02\x02\u06C4" +
		"W\x03\x02\x02\x02\u06C5\u06C6\x07\xE6\x02\x02\u06C6\u06C8\x076\x02\x02" +
		"\u06C7\u06C5\x03\x02\x02\x02\u06C7\u06C8\x03\x02\x02\x02\u06C8\u06C9\x03" +
		"\x02\x02\x02\u06C9\u06CA\x07\u0109\x02\x02\u06CA\u06CC\x05\u0224\u0113" +
		"\x02\u06CB\u06CD\x05\u01FA\xFE\x02\u06CC\u06CB\x03\x02\x02\x02\u06CC\u06CD" +
		"\x03\x02\x02\x02\u06CD\u06D0\x03\x02\x02\x02\u06CE\u06CF\x07\u01B7\x02" +
		"\x02\u06CF\u06D1\x05\u0230\u0119\x02\u06D0\u06CE\x03\x02\x02\x02\u06D0" +
		"\u06D1\x03\x02\x02\x02\u06D1\u06F2\x03\x02\x02\x02\u06D2\u06D3\x07\x07" +
		"\x02\x02\u06D3\u06F2\x05Z.\x02\u06D4\u06F2\x05\x8CG\x02\u06D5\u06F2\x05" +
		"\x8EH\x02\u06D6\u06D9\x07\xE6\x02\x02\u06D7\u06D9\x07I\x02\x02\u06D8\u06D6" +
		"\x03\x02\x02\x02\u06D8\u06D7\x03\x02\x02\x02\u06D9\u06DA\x03\x02\x02\x02" +
		"\u06DA\u06DB\x07\u01A0\x02\x02\u06DB\u06F2\x07\u01A1\x02\x02\u06DC\u06DD" +
		"\x07I\x02\x02\u06DD\u06DF\x07h\x02\x02\u06DE\u06E0\x05\u0198\xCD\x02\u06DF" +
		"\u06DE\x03\x02\x02\x02\u06DF\u06E0\x03\x02\x02\x02\u06E0\u06F2\x03\x02" +
		"\x02\x02\u06E1\u06E2\x07\xE6\x02\x02\u06E2\u06F2\x05\u01DC\xEF\x02\u06E3" +
		"\u06E4\x07\xE6\x02\x02\u06E4\u06E5\x07\xF2\x02\x02\u06E5\u06F2\x05\u0150" +
		"\xA9\x02\u06E6\u06E7\x07\xE6\x02\x02\u06E7\u06E8\x07\xF5\x02\x02\u06E8" +
		"\u06F2\x05^0\x02\u06E9\u06EA\x07\xCE\x02\x02\u06EA\u06F2\x05\u01D8\xED" +
		"\x02\u06EB\u06F2\x05\u01BC\xDF\x02\u06EC\u06EE\x05\\/\x02\u06ED\u06EC" +
		"\x03\x02\x02\x02\u06EE\u06EF\x03\x02\x02\x02\u06EF\u06ED\x03\x02\x02\x02" +
		"\u06EF\u06F0\x03\x02\x02\x02\u06F0\u06F2\x03\x02\x02\x02\u06F1\u06C7\x03" +
		"\x02\x02\x02\u06F1\u06D2\x03\x02\x02\x02\u06F1\u06D4\x03\x02\x02\x02\u06F1" +
		"\u06D5\x03\x02\x02\x02\u06F1\u06D8\x03\x02\x02\x02\u06F1\u06DC\x03\x02" +
		"\x02\x02\u06F1\u06E1\x03\x02\x02\x02\u06F1\u06E3\x03\x02\x02\x02\u06F1" +
		"\u06E6\x03\x02\x02\x02\u06F1\u06E9\x03\x02\x02\x02\u06F1\u06EB\x03\x02" +
		"\x02\x02\u06F1\u06ED\x03\x02\x02\x02\u06F2Y\x03\x02\x02\x02\u06F3\u06F7" +
		"\x07`\x02\x02\u06F4\u06F8\x07\r\x02\x02\u06F5\u06F6\x07\x16\x02\x02\u06F6" +
		"\u06F8\x07\u0187\x02\x02\u06F7\u06F4\x03\x02\x02\x02\u06F7\u06F5\x03\x02" +
		"\x02\x02\u06F8\u06F9\x03\x02\x02\x02\u06F9\u06FA\x07\u0176\x02\x02\u06FA" +
		"\u0703\x07h\x02\x02\u06FB\u06FD\x07\u024B\x02\x02\u06FC\u06FE\x05\u014E" +
		"\xA8\x02\u06FD\u06FC\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF" +
		"\u06FD\x03\x02\x02\x02\u06FF\u0700\x03\x02\x02\x02\u0700\u0701\x03\x02" +
		"\x02\x02\u0701\u0702\x07\u024C\x02\x02\u0702\u0704\x03\x02\x02\x02\u0703" +
		"\u06FB\x03\x02\x02\x02\u0703\u0704\x03\x02\x02\x02\u0704[\x03\x02\x02" +
		"\x02\u0705\u0706\x07\xE6\x02\x02\u0706\u070A\x07`\x02\x02\u0707\u070B" +
		"\x07\r\x02\x02\u0708\u0709\x07\x16\x02\x02\u0709\u070B\x07\u0187\x02\x02" +
		"\u070A\u0707\x03\x02\x02\x02\u070A\u0708\x03\x02\x02\x02\u070B\u0716\x03" +
		"\x02\x02\x02\u070C\u070D\x07\xE6\x02\x02\u070D\u0716\x05\u014E\xA8\x02" +
		"\u070E\u0713\x07\xCF\x02\x02\u070F\u0711\x07\u01BC\x02\x02\u0710\u070F" +
		"\x03\x02\x02\x02\u0710\u0711\x03\x02\x02\x02\u0711\u0712\x03\x02\x02\x02" +
		"\u0712\u0714\x07\u0262\x02\x02\u0713\u0710\x03\x02\x02\x02\u0713\u0714" +
		"\x03\x02\x02\x02\u0714\u0716\x03\x02\x02\x02\u0715\u0705\x03\x02\x02\x02" +
		"\u0715\u070C\x03\x02\x02\x02\u0715\u070E\x03\x02\x02\x02\u0716]\x03\x02" +
		"\x02\x02\u0717\u0718\t\x18\x02\x02\u0718_\x03\x02\x02\x02\u0719\u071A" +
		"\x07\u0115\x02\x02\u071A\u071B\x07\u017F\x02\x02\u071B\u071C\x05\u026A" +
		"\u0136\x02\u071Ca\x03\x02\x02\x02\u071D\u071E\x07I\x02\x02\u071E\u0720" +
		"\x07\u017F\x02\x02\u071F\u0721\x05\u0198\xCD\x02\u0720\u071F\x03\x02\x02" +
		"\x02\u0720\u0721\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722\u0724" +
		"\x05\u0210\u0109\x02\u0723\u0725\x05\u01F8\xFD\x02\u0724\u0723\x03\x02" +
		"\x02\x02\u0724\u0725\x03\x02\x02\x02\u0725c\x03\x02\x02\x02\u0726\u0728" +
		"\x07\u01A0\x02\x02\u0727\u0726\x03\x02\x02\x02\u0727\u0728\x03\x02\x02" +
		"\x02\u0728\u0729\x03\x02\x02\x02\u0729\u072A\x07\u0188\x02\x02\u072Ae" +
		"\x03\x02\x02\x02\u072B\u072C\x07\u0198\x02\x02\u072C\u072D\t\x19\x02\x02" +
		"\u072Dg\x03\x02\x02\x02\u072E\u0732\x07\x19\x02\x02\u072F\u0730\x07\xD1" +
		"\x02\x02\u0730\u0732\x07\u01A1\x02\x02\u0731\u072E\x03\x02\x02\x02\u0731" +
		"\u072F\x03\x02\x02\x02\u0732\u0733\x03\x02\x02\x02\u0733\u0734\x07\u01A3" +
		"\x02\x02\u0734\u0735\x07\u01A1\x02\x02\u0735\u0767\x07v\x02\x02\u0736" +
		"\u0737\x07\u0105\x02\x02\u0737\u073C\x05\u013A\x9E\x02\u0738\u0739\x07" +
		"\u0245\x02\x02\u0739\u073B\x05\u013A\x9E\x02\u073A\u0738\x03\x02\x02\x02" +
		"\u073B\u073E\x03\x02\x02\x02\u073C\u073A\x03\x02\x02\x02\u073C\u073D\x03" +
		"\x02\x02\x02\u073D\u0767\x03\x02\x02\x02\u073E\u073C\x03\x02\x02\x02\u073F" +
		"\u0767\x07\xF7\x02\x02\u0740\u0767\x07k\x02\x02\u0741\u0767\x07\u011C" +
		"\x02\x02\u0742\u0767\x07\xEE\x02\x02\u0743\u0745\x07\u01A0\x02\x02\u0744" +
		"\u0743\x03\x02\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u0746\x03\x02" +
		"\x02\x02\u0746\u0767\x07\x81\x02\x02\u0747\u0749\x07W\x02\x02\u0748\u0747" +
		"\x03\x02\x02\x02\u0748\u0749\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02" +
		"\u074A\u074B\x07\xE0\x02\x02\u074B\u0767\t\x1A\x02\x02\u074C\u074D\x07" +
		"\xAB\x02\x02\u074D\u0767\t\x1B\x02\x02\u074E\u074F\x070\x02\x02\u074F" +
		"\u0767\x05\u023E\u0120\x02\u0750\u0751\x07\xD8\x02\x02\u0751\u0767\x05" +
		"\u023E\u0120\x02\u0752\u0753\x07\xFA\x02\x02\u0753\u0767\x05\u026A\u0136" +
		"\x02\u0754\u0758\x07\xE6\x02\x02\u0755\u0756\x05\u0210\u0109\x02\u0756" +
		"\u0757\x07\u0253\x02\x02\u0757\u0759\x03\x02\x02\x02\u0758\u0755\x03\x02" +
		"\x02\x02\u0758\u0759\x03\x02\x02\x02\u0759\u075A\x03\x02\x02\x02\u075A" +
		"\u075F\x05\u0210\u0109\x02\u075B\u075C\t\x1C\x02\x02\u075C\u0760\x05\u010C" +
		"\x87\x02\u075D\u075E\x07\u0193\x02\x02\u075E\u0760\x073\x02\x02\u075F" +
		"\u075B\x03\x02\x02\x02\u075F\u075D\x03\x02\x02\x02\u0760\u0767\x03\x02" +
		"\x02\x02\u0761\u0762\x07~\x02\x02\u0762\u0767\x05\u0210\u0109\x02\u0763" +
		"\u0767\x07\u01BB\x02\x02\u0764\u0765\x07\u0176\x02\x02\u0765\u0767\x05" +
		"j6\x02\u0766\u0731\x03\x02\x02\x02\u0766\u0736\x03\x02\x02\x02\u0766\u073F" +
		"\x03\x02\x02\x02\u0766\u0740\x03\x02\x02\x02\u0766\u0741\x03\x02\x02\x02" +
		"\u0766\u0742\x03\x02\x02\x02\u0766\u0744\x03\x02\x02\x02\u0766\u0748\x03" +
		"\x02\x02\x02\u0766\u074C\x03\x02\x02\x02\u0766\u074E\x03\x02\x02\x02\u0766" +
		"\u0750\x03\x02\x02\x02\u0766\u0752\x03\x02\x02\x02\u0766\u0754\x03\x02" +
		"\x02\x02\u0766\u0761\x03\x02\x02\x02\u0766\u0763\x03\x02\x02\x02\u0766" +
		"\u0764\x03\x02\x02\x02\u0767i\x03\x02\x02\x02\u0768\u076B\x05\u0146\xA4" +
		"\x02\u0769\u076A\x07\u0245\x02\x02\u076A\u076C\x05\u0146\xA4\x02\u076B" +
		"\u0769\x03\x02\x02\x02\u076B\u076C\x03\x02\x02\x02\u076Ck\x03\x02\x02" +
		"\x02\u076D\u076F\x07q\x02\x02\u076E\u0770\x05\u0198\xCD\x02\u076F\u076E" +
		"\x03\x02\x02\x02\u076F\u0770\x03\x02\x02\x02\u0770\u0771\x03\x02\x02\x02" +
		"\u0771\u0772\x05\u026A\u0136\x02\u0772\u0773\x05n8\x02\u0773\u0785\x03" +
		"\x02\x02\x02\u0774\u0775\x07q\x02\x02\u0775\u0776\x07\u0170\x02\x02\u0776" +
		"\u0777\x07\u0197\x02\x02\u0777\u0778\x07\xFE\x02\x02\u0778\u077C\x05\u0210" +
		"\u0109\x02\u0779\u077A\x07\xA9\x02\x02\u077A\u077B\x07\x16\x02\x02\u077B" +
		"\u077D\x05\u02B6\u015C\x02\u077C\u0779\x03\x02\x02\x02\u077C\u077D\x03" +
		"\x02\x02\x02\u077D\u077E\x03\x02\x02\x02\u077E\u077F\x07\xE6\x02\x02\u077F" +
		"\u0780\x07\xFE\x02\x02\u0780\u0782\x05\u0210\u0109\x02\u0781\u0783\x07" +
		"\x9B\x02\x02\u0782\u0781\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783" +
		"\u0785\x03\x02\x02\x02\u0784\u076D\x03\x02\x02\x02\u0784\u0774\x03\x02" +
		"\x02\x02\u0785m\x03\x02\x02\x02\u0786\u07AE\x05\u01EE\xF8\x02\u0787\u0788" +
		"\x07\x11\x02\x02\u0788\u0789\x07\xAE\x02\x02\u0789\u07AE\x05\u026A\u0136" +
		"\x02\u078A\u078B\x07A\x02\x02\u078B\u078C\x07\u01A3\x02\x02\u078C\u078D" +
		"\x07V\x02\x02\u078D\u07AE\x05\u026A\u0136\x02\u078E\u0790\x07\f\x02\x02" +
		"\u078F\u0791\x07\u017E\x02\x02\u0790\u078F\x03\x02\x02\x02\u0790\u0791" +
		"\x03\x02\x02\x02\u0791\u0793\x03\x02\x02\x02\u0792\u0794\x05\u0154\xAB" +
		"\x02\u0793\u0792\x03\x02\x02\x02\u0793\u0794\x03\x02\x02\x02\u0794\u0795" +
		"\x03\x02\x02\x02\u0795\u0796\x07\u0262\x02\x02\u0796\u0797\x07\xE6\x02" +
		"\x02\u0797\u0798\x07\xF2\x02\x02\u0798\u07AE\x05\u0150\xA9\x02\u0799\u079A" +
		"\x07\xCE\x02\x02\u079A\u079B\x07\u024B\x02\x02\u079B\u079C\x05\u02B6\u015C" +
		"\x02\u079C\u079D\x07\u024C\x02\x02\u079D\u07AE\x03\x02\x02\x02\u079E\u079F" +
		"\x07\xE6\x02\x02\u079F\u07A0\x07\xFE\x02\x02\u07A0\u07AE\x05\u0210\u0109" +
		"\x02\u07A1\u07A2\x07\xE6\x02\x02\u07A2\u07A3\x07\u024B\x02\x02\u07A3\u07A8" +
		"\x05\xA8U\x02\u07A4\u07A5\x07\u0245\x02\x02\u07A5\u07A7\x05\xA8U\x02\u07A6" +
		"\u07A4\x03\x02\x02\x02\u07A7\u07AA\x03\x02\x02\x02\u07A8\u07A6\x03\x02" +
		"\x02\x02\u07A8\u07A9\x03\x02\x02\x02\u07A9\u07AB\x03\x02\x02\x02\u07AA" +
		"\u07A8\x03\x02\x02\x02\u07AB\u07AC\x07\u024C\x02\x02\u07AC\u07AE\x03\x02" +
		"\x02\x02\u07AD\u0786\x03\x02\x02\x02\u07AD\u0787\x03\x02\x02\x02\u07AD" +
		"\u078A\x03\x02\x02\x02\u07AD\u078E\x03\x02\x02\x02\u07AD\u0799\x03\x02" +
		"\x02\x02\u07AD\u079E\x03\x02\x02\x02\u07AD\u07A1\x03\x02\x02\x02\u07AE" +
		"o\x03\x02\x02\x02\u07AF\u07B0\x07\u0187\x02\x02\u07B0\u07B4\x07\xB8\x02" +
		"\x02\u07B1\u07B2\x07\u0191\x02\x02\u07B2\u07B3\t\x1D\x02\x02\u07B3\u07B5" +
		"\x05\u02B6\u015C\x02\u07B4\u07B1\x03\x02\x02\x02\u07B4\u07B5\x03\x02\x02" +
		"\x02\u07B5\u07B9\x03\x02\x02\x02\u07B6\u07B7\x07\u0197\x02\x02\u07B7\u07B8" +
		"\x07\xDB\x02\x02\u07B8\u07BA\x05\u02B6\u015C\x02\u07B9\u07B6\x03\x02\x02" +
		"\x02\u07B9\u07BA\x03\x02\x02\x02\u07BA\u07BB\x03\x02\x02\x02\u07BB\u07BC" +
		"\x05r:\x02\u07BCq";
	private static readonly _serializedATNSegment6: string =
		"\x03\x02\x02\x02\u07BD\u07C3\x07\u0194\x02\x02\u07BE\u07C0\x07\xD2\x02" +
		"\x02\u07BF\u07C1\x05t;\x02\u07C0\u07BF\x03\x02\x02\x02\u07C0\u07C1\x03" +
		"\x02\x02\x02\u07C1\u07C3\x03\x02\x02\x02\u07C2\u07BD\x03\x02\x02\x02\u07C2" +
		"\u07BE\x03\x02\x02\x02\u07C3\u07FB\x03\x02\x02\x02\u07C4\u07C9\x05\u01F2" +
		"\xFA\x02\u07C5\u07C6\x07\u0245\x02\x02\u07C6\u07C8\x05\u01F2\xFA\x02\u07C7" +
		"\u07C5\x03\x02\x02\x02\u07C8\u07CB\x03\x02\x02\x02\u07C9\u07C7\x03\x02" +
		"\x02\x02\u07C9\u07CA\x03\x02\x02\x02\u07CA\u07CC\x03\x02\x02\x02\u07CB" +
		"\u07C9\x03\x02\x02\x02\u07CC\u07CD\x07\u01A3\x02\x02\u07CD\u07CE\x07\xFD" +
		"\x02\x02\u07CE\u07FC\x03\x02\x02\x02\u07CF\u07D4\x05\u01F4\xFB\x02\u07D0" +
		"\u07D1\x07\u0245\x02\x02\u07D1\u07D3\x05\u01F4\xFB\x02\u07D2\u07D0\x03" +
		"\x02\x02\x02\u07D3\u07D6\x03\x02\x02\x02\u07D4\u07D2\x03\x02\x02\x02\u07D4" +
		"\u07D5\x03\x02\x02\x02\u07D5\u07DC\x03\x02\x02\x02\u07D6\u07D4\x03\x02" +
		"\x02\x02\u07D7\u07D9\x07\u0170\x02\x02\u07D8\u07DA\x07\xB8\x02\x02\u07D9" +
		"\u07D8\x03\x02\x02\x02\u07D9\u07DA\x03\x02\x02\x02\u07DA\u07DC\x03\x02" +
		"\x02\x02\u07DB\u07CF\x03\x02\x02\x02\u07DB\u07D7\x03\x02\x02\x02\u07DC" +
		"\u07DD\x03\x02\x02\x02\u07DD\u07DE\x07\u01A3\x02\x02\u07DE\u07FC\x07\xE2" +
		"\x02\x02\u07DF\u07E5\x07T\x02\x02\u07E0\u07E2\x07\u0170\x02\x02\u07E1" +
		"\u07E3\x07\xB8\x02\x02\u07E2\u07E1\x03\x02\x02\x02\u07E2\u07E3\x03\x02" +
		"\x02\x02\u07E3\u07E5\x03\x02\x02\x02\u07E4\u07DF\x03\x02\x02\x02\u07E4" +
		"\u07E0\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6\u07E7\x07\u01A3" +
		"\x02\x02\u07E7\u07FC\x07_\x02\x02\u07E8\u07EF\x07\u021D\x02\x02\u07E9" +
		"\u07EF\x07\u0180\x02\x02\u07EA\u07EC\x07\u0170\x02\x02\u07EB\u07ED\x07" +
		"\xB8\x02\x02\u07EC\u07EB\x03\x02\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED" +
		"\u07EF\x03\x02\x02\x02\u07EE\u07E8\x03\x02\x02\x02\u07EE\u07E9\x03\x02" +
		"\x02\x02\u07EE\u07EA\x03\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0" +
		"\u07F1\x07\u01A3\x02\x02\u07F1\u07FC\x07\xDC\x02\x02\u07F2\u07F8\x07\u021D" +
		"\x02\x02\u07F3\u07F5\x07\u0170\x02\x02\u07F4\u07F6\x07\xB8\x02\x02\u07F5" +
		"\u07F4\x03\x02\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u07F8\x03\x02" +
		"\x02\x02\u07F7\u07F2\x03\x02\x02\x02\u07F7\u07F3\x03\x02\x02\x02\u07F8" +
		"\u07F9\x03\x02\x02\x02\u07F9\u07FA\x07\u01A3\x02\x02\u07FA\u07FC\x07\u010A" +
		"\x02\x02\u07FB\u07C4\x03\x02\x02\x02\u07FB\u07DB\x03\x02\x02\x02\u07FB" +
		"\u07E4\x03\x02\x02\x02\u07FB\u07EE\x03\x02\x02\x02\u07FB\u07F7\x03\x02" +
		"\x02\x02\u07FC\u07FF\x03\x02\x02\x02\u07FD\u0800\x05\u0126\x94\x02\u07FE" +
		"\u0800\x05\u0128\x95\x02\u07FF\u07FD\x03\x02\x02\x02\u07FF\u07FE\x03\x02" +
		"\x02\x02\u0800s\x03\x02\x02\x02\u0801\u0802\x07\u0194\x02\x02\u0802\u0803" +
		"\x07\xA3\x02\x02\u0803\u0804\x07\u0191\x02\x02\u0804u\x03\x02\x02\x02" +
		"\u0805\u0807\x07\xE1\x02\x02\u0806\u0808\x05\u0198\xCD\x02\u0807\u0806" +
		"\x03\x02\x02\x02\u0807\u0808\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02" +
		"\u0809\u0819\x05\u026A\u0136\x02\u080A\u0813\x05\u014E\xA8\x02\u080B\u0810" +
		"\x07\xCF\x02\x02\u080C\u080E\x07\u01BC\x02\x02\u080D\u080C\x03\x02\x02" +
		"\x02\u080D\u080E\x03\x02\x02\x02\u080E\u080F\x03\x02\x02\x02\u080F\u0811" +
		"\x05\u0150\xA9\x02\u0810\u080D\x03\x02\x02\x02\u0810\u0811\x03\x02\x02" +
		"\x02\u0811\u0813\x03\x02\x02\x02\u0812\u080A\x03\x02\x02\x02\u0812\u080B" +
		"\x03\x02\x02\x02\u0813\u0816\x03\x02\x02\x02\u0814\u0812\x03\x02\x02\x02" +
		"\u0814\u0815\x03\x02\x02\x02\u0815\u081A\x03\x02\x02\x02\u0816\u0814\x03" +
		"\x02\x02\x02\u0817\u081A\x05\u01F0\xF9\x02\u0818\u081A\x05\u01EE\xF8\x02" +
		"\u0819\u0814\x03\x02\x02\x02\u0819\u0817\x03\x02\x02\x02\u0819\u0818\x03" +
		"\x02\x02\x02\u081Aw\x03\x02\x02\x02\u081B\u081D\x07\x8C\x02\x02\u081C" +
		"\u081B\x03\x02\x02\x02\u081C\u081D\x03\x02\x02\x02\u081D\u081E\x03\x02" +
		"\x02\x02\u081E\u0820\x07\u011A\x02\x02\u081F\u0821\x05\u0198\xCD\x02\u0820" +
		"\u081F\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u0822\x03\x02" +
		"\x02\x02\u0822\u0832\x05\u026A\u0136\x02\u0823\u0825\x07\f\x02\x02\u0824" +
		"\u0826\x07\u017E\x02\x02\u0825\u0824\x03\x02\x02\x02\u0825\u0826\x03\x02" +
		"\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827\u082A\x05\u026A\u0136\x02\u0828" +
		"\u082B\x05\x8CG\x02\u0829\u082B\x05\x8EH\x02\u082A\u0828\x03\x02\x02\x02" +
		"\u082A\u0829\x03\x02\x02\x02\u082B\u0833\x03\x02\x02\x02\u082C\u0833\x05" +
		"\u01F0\xF9\x02\u082D\u0833\x05\u01EE\xF8\x02\u082E\u082F\x07\xE6\x02\x02" +
		"\u082F\u0833\x05\u01DC\xEF\x02\u0830\u0831\x07\xCE\x02\x02\u0831\u0833" +
		"\x05\u01D8\xED\x02\u0832\u0823\x03\x02\x02\x02\u0832\u082C\x03\x02\x02" +
		"\x02\u0832\u082D\x03\x02\x02\x02\u0832\u082E\x03\x02\x02\x02\u0832\u0830" +
		"\x03\x02\x02\x02\u0833y\x03\x02\x02\x02\u0834\u0835\x07P\x02\x02\u0835" +
		"\u0836\x07\u0106\x02\x02\u0836\u0837\x05\u0210\u0109\x02\u0837\u0838\x05" +
		"|?\x02\u0838{\x03\x02\x02\x02\u0839\u0841\x07D\x02\x02\u083A\u083C\x07" +
		"K\x02\x02\u083B\u083D\t\x15\x02\x02\u083C\u083B\x03\x02\x02\x02\u083C" +
		"\u083D\x03\x02\x02\x02\u083D\u0841\x03\x02\x02\x02\u083E\u0841\x05\u01EC" +
		"\xF7\x02\u083F\u0841\x05\u01EE\xF8\x02\u0840\u0839\x03\x02\x02\x02\u0840" +
		"\u083A\x03\x02\x02\x02\u0840\u083E\x03\x02\x02\x02\u0840\u083F\x03\x02" +
		"\x02\x02\u0841}\x03\x02\x02\x02\u0842\u0843\x07\u0109\x02\x02\u0843\u0866" +
		"\x05\u026A\u0136\x02\u0844\u0867\x05\u01F0\xF9\x02\u0845\u0867\x05\u01EE" +
		"\xF8\x02\u0846\u0847\x07\x07\x02\x02\u0847\u0849\x07\u0117\x02\x02\u0848" +
		"\u084A\x05\u019A\xCE\x02\u0849\u0848\x03\x02\x02\x02\u0849\u084A\x03\x02" +
		"\x02\x02\u084A\u084B\x03\x02\x02\x02\u084B\u084E\x05\u0146\xA4\x02\u084C" +
		"\u084D\t\x1E\x02\x02\u084D\u084F\x05\u0146\xA4\x02\u084E\u084C\x03\x02" +
		"\x02\x02\u084E\u084F\x03\x02\x02\x02\u084F\u0867\x03\x02\x02\x02\u0850" +
		"\u0851\x07\xCA\x02\x02\u0851\u0852\x07\x12\x02\x02\u0852\u0853\x05\u0210" +
		"\u0109\x02\u0853\u0854\x07\u01B1\x02\x02\u0854\u0856\x05\u0210\u0109\x02" +
		"\u0855\u0857\x05\u01F8\xFD\x02\u0856\u0855\x03\x02\x02\x02\u0856\u0857" +
		"\x03\x02\x02\x02\u0857\u0867\x03\x02\x02\x02\u0858\u0859\x07\xCA\x02\x02" +
		"\u0859\u085A\x07\u0117\x02\x02\u085A\u085B\x05\u0146\xA4\x02\u085B\u085C" +
		"\x07\u01B1\x02\x02\u085C\u085D\x05\u0146\xA4\x02\u085D\u0867\x03\x02\x02" +
		"\x02\u085E\u0863\x05\x8AF\x02\u085F\u0860\x07\u0245\x02\x02\u0860\u0862" +
		"\x05\x8AF\x02\u0861\u085F\x03\x02\x02\x02\u0862\u0865\x03\x02\x02\x02" +
		"\u0863\u0861\x03\x02\x02\x02\u0863\u0864\x03\x02\x02\x02\u0864\u0867\x03" +
		"\x02\x02\x02\u0865\u0863\x03\x02\x02\x02\u0866\u0844\x03\x02\x02\x02\u0866" +
		"\u0845\x03\x02\x02\x02\u0866\u0846\x03\x02\x02\x02\u0866\u0850\x03\x02" +
		"\x02\x02\u0866\u0858\x03\x02\x02\x02\u0866\u085E\x03\x02\x02\x02\u0867" +
		"\x7F\x03\x02\x02\x02\u0868\u0869\x07G\x02\x02\u0869\u087F\x05\u026A\u0136" +
		"\x02\u086A\u0880\x05\x8CG\x02\u086B\u0880\x05\x8EH\x02\u086C\u086D\t\x1F" +
		"\x02\x02\u086D\u086E\x07\u01A0\x02\x02\u086E\u0880\x07\u01A1\x02\x02\u086F" +
		"\u0870\x07\x07\x02\x02\u0870\u0873\x05\xDEp\x02\u0871\u0872\x07\u01A0" +
		"\x02\x02\u0872\u0874\x07\u0114\x02\x02\u0873\u0871\x03\x02\x02\x02\u0873" +
		"\u0874\x03\x02\x02\x02\u0874\u0880\x03\x02\x02\x02\u0875\u0880\x05b2\x02" +
		"\u0876\u0877\x07\xCA\x02\x02\u0877\u0878\x07\u017F\x02\x02\u0878\u0879" +
		"\x05\u026A\u0136\x02\u0879\u087A\x07\u01B1\x02\x02\u087A\u087B\x05\u026A" +
		"\u0136\x02\u087B\u0880\x03\x02\x02\x02\u087C\u0880\x05`1\x02\u087D\u0880" +
		"\x05\u01EE\xF8\x02\u087E\u0880\x05\u01F0\xF9\x02\u087F\u086A\x03\x02\x02" +
		"\x02\u087F\u086B\x03\x02\x02\x02\u087F\u086C\x03\x02\x02\x02\u087F\u086F" +
		"\x03\x02\x02\x02\u087F\u0875\x03\x02\x02\x02\u087F\u0876\x03\x02\x02\x02" +
		"\u087F\u087C\x03\x02\x02\x02\u087F\u087D\x03\x02\x02\x02\u087F\u087E\x03" +
		"\x02\x02\x02\u0880\x81\x03\x02\x02\x02\u0881\u0882\x07\xE4\x02\x02\u0882" +
		"\u0883\x05\u0210\u0109\x02\u0883\u0884\x05\x84C\x02\u0884\x83\x03\x02" +
		"\x02\x02\u0885\u0886\x07\u0119\x02\x02\u0886\u0888\x05\u0146\xA4\x02\u0887" +
		"\u0885\x03\x02\x02\x02\u0887\u0888\x03\x02\x02\x02\u0888\u0889\x03\x02" +
		"\x02\x02\u0889\u088F\x05\u01BC\xDF\x02\u088A\u088B\x07\u0119\x02\x02\u088B" +
		"\u088F\x05\u0146\xA4\x02\u088C\u088F\x05\u01EC\xF7\x02\u088D\u088F\x05" +
		"\u01EE\xF8\x02\u088E\u0887\x03\x02\x02\x02\u088E\u088A\x03\x02\x02\x02" +
		"\u088E\u088C\x03\x02\x02\x02\u088E\u088D\x03\x02\x02\x02\u088F\x85\x03" +
		"\x02\x02\x02\u0890\u0891\x07\u0102\x02\x02\u0891\u08A0\x07\xDE\x02\x02" +
		"\u0892\u0893\t \x02\x02\u0893\u0896\x05\u026A\u0136\x02\u0894\u0897\x05" +
		"\u01EE\xF8\x02\u0895\u0897\x05\u01F0\xF9\x02\u0896\u0894\x03\x02\x02\x02" +
		"\u0896\u0895\x03\x02\x02\x02\u0897\u08A1\x03\x02\x02\x02\u0898\u0899\x07" +
		"C\x02\x02\u0899\u089A\x05\u026A\u0136\x02\u089A\u089B\x05\u01DC\xEF\x02" +
		"\u089B\u08A1\x03\x02\x02\x02\u089C\u089D\x07(\x02\x02\u089D\u089E\x05" +
		"\u026A\u0136\x02\u089E\u089F\x05\x88E\x02\u089F\u08A1\x03\x02\x02\x02" +
		"\u08A0\u0892\x03\x02\x02\x02\u08A0\u0898\x03\x02\x02\x02\u08A0\u089C\x03" +
		"\x02\x02\x02\u08A1\x87\x03\x02\x02\x02\u08A2\u08A3\t!\x02\x02\u08A3\u08A4" +
		"\x07\x8A\x02\x02\u08A4\u08A5\x07\u0191\x02\x02\u08A5\u08A6\x05\u02B6\u015C" +
		"\x02\u08A6\u08A7\x07\u01BC\x02\x02\u08A7\u08AC\x05\u026A\u0136\x02\u08A8" +
		"\u08A9\x07\u0245\x02\x02\u08A9\u08AB\x05\u026A\u0136\x02\u08AA\u08A8\x03" +
		"\x02\x02\x02\u08AB\u08AE\x03\x02\x02\x02\u08AC\u08AA\x03\x02\x02\x02\u08AC" +
		"\u08AD\x03\x02\x02\x02\u08AD\u08C3\x03\x02\x02\x02\u08AE\u08AC\x03\x02" +
		"\x02\x02\u08AF\u08B0\x07\f\x02\x02\u08B0\u08B3\x07\x8A\x02\x02\u08B1\u08B2" +
		"\x07\u0191\x02\x02\u08B2\u08B4\x05\u02B6\u015C\x02\u08B3\u08B1\x03\x02" +
		"\x02\x02\u08B3\u08B4\x03\x02\x02\x02\u08B4\u08B5\x03\x02\x02\x02\u08B5" +
		"\u08B6\x07\xCC\x02\x02\u08B6\u08B7\x05\u026A\u0136\x02\u08B7\u08B8\x07" +
		"\u01BC\x02\x02\u08B8\u08B9\x05\u026A\u0136\x02\u08B9\u08C3\x03\x02\x02" +
		"\x02\u08BA\u08BB\x07I\x02\x02\u08BB\u08BE\x07\x8A\x02\x02\u08BC\u08BD" +
		"\x07i\x02\x02\u08BD\u08BF\x07\u0130\x02\x02\u08BE\u08BC\x03\x02\x02\x02" +
		"\u08BE\u08BF\x03\x02\x02\x02\u08BF\u08C0\x03\x02\x02\x02\u08C0\u08C1\x07" +
		"\u0191\x02\x02\u08C1\u08C3\x05\u02B6\u015C\x02\u08C2\u08A2\x03\x02\x02" +
		"\x02\u08C2\u08AF\x03\x02\x02\x02\u08C2\u08BA\x03\x02\x02\x02\u08C3\x89" +
		"\x03\x02\x02\x02\u08C4\u08C5\x07\x07\x02\x02\u08C5\u08C6\x07\x12\x02\x02" +
		"\u08C6\u08C7\x05\u0210\u0109\x02\u08C7\u08C9\x05\u0224\u0113\x02\u08C8" +
		"\u08CA\x05\u01FA\xFE\x02\u08C9\u08C8\x03\x02\x02\x02\u08C9\u08CA\x03\x02" +
		"\x02\x02\u08CA\u08CC\x03\x02\x02\x02\u08CB\u08CD\x05\u01F8\xFD\x02\u08CC" +
		"\u08CB\x03\x02\x02\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD\u08E7\x03\x02" +
		"\x02\x02\u08CE\u08CF\x07I\x02\x02\u08CF\u08D1\x07\x12\x02\x02\u08D0\u08D2" +
		"\x05\u0198\xCD\x02\u08D1\u08D0\x03\x02\x02\x02\u08D1\u08D2\x03\x02\x02" +
		"\x02\u08D2\u08D3\x03\x02\x02\x02\u08D3\u08D5\x05\u0210\u0109\x02\u08D4" +
		"\u08D6\x05\u01F8\xFD\x02\u08D5\u08D4\x03\x02\x02\x02\u08D5\u08D6\x03\x02" +
		"\x02\x02\u08D6\u08E7\x03\x02\x02\x02\u08D7\u08D8\x07\f\x02\x02\u08D8\u08D9" +
		"\x07\x12\x02\x02\u08D9\u08DC\x05\u0210\u0109\x02\u08DA\u08DB\x07\xE6\x02" +
		"\x02\u08DB\u08DD\x076\x02\x02\u08DC\u08DA\x03\x02\x02\x02\u08DC\u08DD" +
		"\x03\x02\x02\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE\u08DF\x07\u0109\x02" +
		"\x02\u08DF\u08E1\x05\u0224\u0113\x02\u08E0\u08E2\x05\u01FA\xFE\x02\u08E1" +
		"\u08E0\x03\x02\x02\x02\u08E1\u08E2\x03\x02\x02\x02\u08E2\u08E4\x03\x02" +
		"\x02\x02\u08E3\u08E5\x05\u01F8\xFD\x02\u08E4\u08E3\x03\x02\x02\x02\u08E4" +
		"\u08E5\x03\x02\x02\x02\u08E5\u08E7\x03\x02\x02\x02\u08E6\u08C4\x03\x02" +
		"\x02\x02\u08E6\u08CE\x03\x02\x02\x02\u08E6\u08D7\x03\x02\x02\x02\u08E7" +
		"\x8B\x03\x02\x02\x02\u08E8\u08E9\x07\xE6\x02\x02\u08E9\u08EA\x07\u0187" +
		"\x02\x02\u08EA\u08EB\x05\u0230\u0119\x02\u08EB\x8D\x03\x02\x02\x02\u08EC" +
		"\u08ED\x07I\x02\x02\u08ED\u08EE\x07\u0187\x02\x02\u08EE\x8F\x03\x02\x02" +
		"\x02\u08EF\u08F1\x07\u01B5\x02\x02\u08F0\u08EF\x03\x02\x02\x02\u08F0\u08F1" +
		"\x03\x02\x02\x02\u08F1\u08F2\x03\x02\x02\x02\u08F2\u08F4\x07q\x02\x02" +
		"\u08F3\u08F5\x07\u015C\x02\x02\u08F4\u08F3\x03\x02\x02\x02\u08F4\u08F5" +
		"\x03\x02\x02\x02\u08F5\u08F7\x03\x02\x02\x02\u08F6\u08F8\x05\u019A\xCE" +
		"\x02\u08F7\u08F6\x03\x02\x02\x02\u08F7\u08F8\x03\x02\x02\x02\u08F8\u08FA" +
		"\x03\x02\x02\x02\u08F9\u08FB\x05\u0210\u0109\x02\u08FA\u08F9\x03\x02\x02" +
		"\x02\u08FA\u08FB\x03\x02\x02\x02\u08FB\u08FC\x03\x02\x02\x02\u08FC\u08FE" +
		"\x07\u01A3\x02\x02\u08FD\u08FF\x07\u01A4\x02\x02\u08FE\u08FD\x03\x02\x02" +
		"\x02\u08FE\u08FF\x03\x02\x02\x02\u08FF\u0900\x03\x02\x02\x02\u0900\u0901" +
		"\x05\u026A\u0136\x02\u0901\u0902\x05\x92J\x02\u0902\x91\x03\x02\x02\x02" +
		"\u0903\u0904\x07\u01B7\x02\x02\u0904\u0906\x05\u0210\u0109\x02\u0905\u0903" +
		"\x03\x02\x02\x02\u0905\u0906\x03\x02\x02\x02\u0906\u0907\x03\x02\x02\x02" +
		"\u0907\u0909\x05\x94K\x02\u0908\u090A\x05\x96L\x02\u0909\u0908\x03\x02" +
		"\x02\x02\u0909\u090A\x03\x02\x02\x02\u090A\u090C\x03\x02\x02\x02\u090B" +
		"\u090D\x05\u01E2\xF2\x02\u090C\u090B\x03\x02\x02\x02\u090C\u090D\x03\x02" +
		"\x02\x02\u090D\u090F\x03\x02\x02\x02\u090E\u0910\x05\u01E8\xF5\x02\u090F" +
		"\u090E\x03\x02\x02\x02\u090F\u0910\x03\x02\x02\x02\u0910\u0912\x03\x02" +
		"\x02\x02\u0911\u0913\x05\x98M\x02\u0912\u0911\x03\x02\x02\x02\u0912\u0913" +
		"\x03\x02\x02\x02\u0913\x93\x03\x02\x02\x02\u0914\u0915\x07\u024B\x02\x02" +
		"\u0915\u0916\x05\u029A\u014E\x02\u0916\u0917\x07\u024C\x02\x02\u0917\x95" +
		"\x03\x02\x02\x02\u0918\u0919\x07n\x02\x02\u0919\u091A\x07\u024B\x02\x02" +
		"\u091A\u091F\x05\u0210\u0109\x02\u091B\u091C\x07\u0245\x02\x02\u091C\u091E" +
		"\x05\u0210\u0109\x02\u091D\u091B\x03\x02\x02\x02\u091E\u0921\x03\x02\x02" +
		"\x02\u091F\u091D\x03\x02\x02\x02\u091F\u0920\x03\x02\x02\x02\u0920\u0922" +
		"\x03\x02\x02\x02\u0921\u091F\x03\x02\x02\x02\u0922\u0923\x07\u024C\x02" +
		"\x02\u0923\x97\x03\x02\x02\x02\u0924\u0925\x07\u01BA\x02\x02\u0925\u0926" +
		"\x05\u0230\u0119\x02\u0926\x99\x03\x02\x02\x02\u0927\u0929\x07V\x02\x02" +
		"\u0928\u092A\x05\u019A\xCE\x02\u0929\u0928\x03\x02\x02\x02\u0929\u092A" +
		"\x03\x02\x02\x02\u092A\u092B\x03\x02\x02\x02\u092B\u092D\x05\u0210\u0109" +
		"\x02\u092C\u092E\x07\u01BC\x02\x02\u092D\u092C\x03\x02\x02\x02\u092D\u092E" +
		"\x03\x02\x02\x02\u092E\u0931\x03\x02\x02\x02\u092F\u0930\x07\xDB\x02\x02" +
		"\u0930\u0932\x05\u0210\u0109\x02\u0931\u092F\x03\x02\x02\x02\u0931\u0932" +
		"\x03\x02\x02\x02\u0932\u0938\x03\x02\x02\x02\u0933\u0936\x07\u0119\x02" +
		"\x02\u0934\u0937\x05\u0210\u0109\x02\u0935\u0937\x05\u0146\xA4\x02\u0936" +
		"\u0934\x03\x02\x02\x02\u0936\u0935\x03\x02\x02\x02\u0937\u0939\x03\x02" +
		"\x02\x02\u0938\u0933\x03\x02\x02\x02\u0938\u0939\x03\x02\x02\x02\u0939" +
		"\u093F\x03\x02\x02\x02\u093A\u093D\x07\u0193\x02\x02\u093B\u093E\x05\u0210" +
		"\u0109\x02\u093C\u093E\x05\u0146\xA4\x02\u093D\u093B\x03\x02\x02\x02\u093D" +
		"\u093C\x03\x02\x02\x02\u093E\u0940\x03\x02\x02\x02\u093F\u093A\x03\x02" +
		"\x02\x02\u093F\u0940\x03\x02\x02\x02\u0940\u0942\x03\x02\x02\x02\u0941" +
		"\u0943\x07\x1A\x02\x02\u0942\u0941\x03\x02\x02\x02\u0942\u0943\x03\x02" +
		"\x02\x02\u0943\x9B\x03\x02\x02\x02\u0944\u0945\x07\u01A5\x02\x02\u0945" +
		"\u0947\x07\xCC\x02\x02\u0946\u0944\x03\x02\x02\x02\u0946\u0947\x03\x02" +
		"\x02\x02\u0947\u0949\x03\x02\x02\x02\u0948\u094A\x07\u0108\x02\x02\u0949" +
		"\u0948\x03\x02\x02\x02\u0949\u094A\x03\x02\x02\x02\u094A\u094C\x03\x02" +
		"\x02\x02\u094B\u094D\x07\xB9\x02\x02\u094C\u094B\x03\x02\x02\x02\u094C" +
		"\u094D\x03\x02\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E\u094F\x07~\x02" +
		"\x02\u094F\u095A\x05\u0210\u0109\x02\u0950\u0951\x07d\x02\x02\u0951\u0954" +
		"\x05\u026A\u0136\x02\u0952\u0953\x07u\x02\x02\u0953\u0955\x05\u026A\u0136" +
		"\x02\u0954\u0952\x03\x02\x02\x02\u0954\u0955\x03\x02\x02\x02\u0955\u0958" +
		"\x03\x02\x02\x02\u0956\u0957\x07\u0116\x02\x02\u0957\u0959\x05\u026A\u0136" +
		"\x02\u0958\u0956\x03\x02\x02\x02\u0958\u0959\x03\x02\x02\x02\u0959\u095B" +
		"\x03\x02\x02\x02\u095A\u0950\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02" +
		"\u095B\x9D\x03\x02\x02\x02\u095C\u095D\x07P\x02\x02\u095D\u095E\x07\u0106" +
		"\x02\x02\u095E\u095F\x05\u0210\u0109\x02\u095F\u0960\x07\u01A3\x02\x02" +
		"\u0960\u0975\x05\u0210\u0109\x02\u0961\u0971\x07\u01B9\x02\x02\u0962\u0963" +
		"\x05\u026A\u0136\x02\u0963\u0964\x07\u0197\x02\x02\u0964\u0965\x07\u024B" +
		"\x02\x02\u0965\u096A\x05\u0146\xA4\x02\u0966\u0967\x07\u0245\x02\x02\u0967" +
		"\u0969\x05\u0146\xA4\x02\u0968\u0966\x03\x02\x02\x02\u0969\u096C\x03\x02" +
		"\x02\x02\u096A\u0968\x03\x02\x02\x02\u096A\u096B\x03\x02\x02\x02\u096B" +
		"\u096D\x03\x02\x02\x02\u096C\u096A\x03\x02\x02\x02\u096D\u096F\x07\u024C" +
		"\x02\x02\u096E\u0970\x07\u0173\x02\x02\u096F\u096E\x03\x02\x02\x02\u096F" +
		"\u0970\x03\x02\x02\x02\u0970\u0972\x03\x02\x02\x02\u0971\u0962\x03\x02" +
		"\x02\x02\u0972\u0973\x03\x02\x02\x02\u0973\u0971\x03\x02\x02\x02\u0973" +
		"\u0974\x03\x02\x02\x02\u0974\u0976\x03\x02\x02\x02\u0975\u0961\x03\x02" +
		"\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976\u0977\x03\x02\x02\x02\u0977" +
		"\u0978\x07T\x02\x02\u0978\u0979\t\x12\x02\x02\u0979\u097A\x05\u0230\u0119" +
		"\x02\u097A\x9F\x03\x02\x02\x02\u097B\u097C\x07\u0109\x02\x02\u097C\u0A10" +
		"\x05\u026A\u0136\x02\u097D\u09C2\x07\u0176\x02\x02\u097E\u0987\x07\u024B" +
		"\x02\x02\u097F\u0984\x05\u01C8\xE5\x02\u0980\u0981\x07\u0245\x02\x02\u0981" +
		"\u0983\x05\u01C8\xE5\x02\u0982\u0980\x03\x02\x02\x02\u0983\u0986\x03\x02" +
		"\x02\x02\u0984\u0982\x03\x02\x02\x02\u0984\u0985\x03\x02\x02\x02\u0985" +
		"\u0988\x03\x02\x02\x02\u0986\u0984\x03\x02\x02\x02\u0987\u097F\x03\x02" +
		"\x02\x02\u0987\u0988\x03\x02\x02\x02\u0988\u0989\x03\x02\x02\x02\u0989" +
		"\u09C3\x07\u024C\x02\x02\u098A\u098B\x07N\x02\x02\u098B\u0994\x07\u024B" +
		"\x02\x02\u098C\u0991\x05\u0146\xA4\x02\u098D\u098E\x07\u0245\x02\x02\u098E" +
		"\u0990\x05\u0146\xA4\x02\u098F\u098D\x03\x02\x02\x02\u0990\u0993\x03\x02" +
		"\x02\x02\u0991\u098F\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992" +
		"\u0995\x03\x02\x02\x02\u0993\u0991\x03\x02\x02\x02\u0994\u098C\x03\x02" +
		"\x02\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996" +
		"\u09C3\x07\u024C\x02\x02\u0997\u0998\x07\xBF\x02\x02\u0998\u09A8\x07\u024B" +
		"\x02\x02\u0999\u099A\x07\u0216\x02\x02\u099A\u099B\x07\u0242\x02\x02\u099B" +
		"\u09A9\x05\u0224\u0113\x02\u099C\u099D\x07\u0215\x02\x02\u099D\u099E\x07" +
		"\u0242\x02\x02\u099E\u09A9\x05\u0210\u0109\x02\u099F\u09A0\x07\u015B\x02" +
		"\x02\u09A0\u09A1\x07\u0242\x02\x02\u09A1\u09A9\x05\u026A\u0136\x02\u09A2" +
		"\u09A3\x07\u01C1\x02\x02\u09A3\u09A4\x07\u0242\x02\x02\u09A4\u09A9\x05" +
		"\u026A\u0136\x02\u09A5\u09A6\x07\u0214\x02\x02\u09A6\u09A7\x07\u0242\x02" +
		"\x02\u09A7\u09A9\x05\u026A\u0136\x02\u09A8\u0999\x03\x02\x02\x02\u09A8" +
		"\u099C\x03\x02\x02\x02\u09A8\u099F\x03\x02\x02\x02\u09A8\u09A2\x03\x02" +
		"\x02\x02\u09A8\u09A5\x03\x02\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9" +
		"\u09BE\x03\x02\x02\x02\u09AA\u09BA\x07\u0245\x02\x02\u09AB\u09AC\x07\u0216" +
		"\x02\x02\u09AC\u09AD\x07\u0242\x02\x02\u09AD\u09BB\x05\u0224\u0113\x02" +
		"\u09AE\u09AF\x07\u0215\x02\x02\u09AF\u09B0\x07\u0242\x02\x02\u09B0\u09BB" +
		"\x05\u0210\u0109\x02\u09B1\u09B2\x07\u015B\x02\x02\u09B2\u09B3\x07\u0242" +
		"\x02\x02\u09B3\u09BB\x05\u026A\u0136\x02\u09B4\u09B5\x07\u01C1\x02\x02" +
		"\u09B5\u09B6\x07\u0242\x02\x02\u09B6\u09BB\x05\u026A\u0136\x02\u09B7\u09B8" +
		"\x07\u0214\x02\x02\u09B8\u09B9\x07\u0242\x02\x02\u09B9\u09BB\x05\u026A" +
		"\u0136\x02\u09BA\u09AB\x03\x02\x02\x02\u09BA\u09AE\x03\x02\x02\x02\u09BA" +
		"\u09B1\x03\x02\x02\x02\u09BA\u09B4\x03\x02\x02\x02\u09BA\u09B7\x03\x02" +
		"\x02\x02\u09BB\u09BD\x03\x02\x02\x02\u09BC\u09AA\x03\x02\x02\x02\u09BD" +
		"\u09C0\x03\x02\x02\x02\u09BE\u09BC\x03\x02\x02\x02\u09BE\u09BF\x03\x02" +
		"\x02\x02\u09BF\u09C1\x03\x02\x02\x02\u09C0\u09BE\x03\x02\x02\x02\u09C1" +
		"\u09C3\x07\u024C\x02\x02\u09C2\u097E\x03\x02\x02\x02\u09C2\u098A\x03\x02" +
		"\x02\x02\u09C2\u0997\x03\x02\x02\x02\u09C3\u0A11\x03\x02\x02\x02\u09C4" +
		"\u09CC\x07\u024B\x02\x02\u09C5\u09C6\x07\u01DE\x02\x02\u09C6\u09C9\x07" +
		"\u0242\x02\x02\u09C7\u09CA\x05\u0152\xAA\x02\u09C8\u09CA\x07\u021E\x02" +
		"\x02\u09C9\u09C7\x03\x02\x02\x02\u09C9\u09C8\x03\x02\x02\x02\u09CA\u09CB" +
		"\x03\x02\x02\x02\u09CB\u09CD\x07\u0245\x02\x02\u09CC\u09C5\x03\x02\x02" +
		"\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD\u09CE\x03\x02\x02\x02\u09CE\u09CF" +
		"\x07v\x02\x02\u09CF\u09D0\x07\u0242\x02\x02\u09D0\u09D1\x05\u026A\u0136" +
		"\x02\u09D1\u09D2\x07\u0245\x02\x02\u09D2\u09D3\x07\u01FB\x02\x02\u09D3" +
		"\u09D4\x07\u0242\x02\x02\u09D4\u0A0B\x05\u026A\u0136\x02\u09D5\u0A07\x07" +
		"\u0245\x02\x02\u09D6\u09D7\x07\u0204\x02\x02\u09D7\u09D8\x07\u0242\x02" +
		"\x02\u09D8\u0A08\x05\u026A\u0136\x02\u09D9\u09DA\x07\u020B\x02\x02\u09DA" +
		"\u09DB\x07\u0242\x02\x02\u09DB\u0A08\x05\u026A\u0136\x02\u09DC\u09DD\x07" +
		"\u021A\x02\x02\u09DD\u09DE\x07\u0242\x02\x02\u09DE\u0A08\x05\u026A\u0136" +
		"\x02\u09DF\u09E0\x07\u021B\x02\x02\u09E0\u09E1\x07\u0242\x02\x02\u09E1" +
		"\u0A08\x05\u026A\u0136\x02\u09E2\u09E3\x07\u0172\x02\x02\u09E3\u09E4\x07" +
		"\u0242\x02\x02\u09E4\u0A08\x05\u026A\u0136\x02\u09E5\u09E6\x07\u01DE\x02" +
		"\x02\u09E6\u09E9\x07\u0242\x02\x02\u09E7\u09EA\x05\u0152\xAA\x02\u09E8" +
		"\u09EA\x07\u021E\x02\x02\u09E9\u09E7\x03\x02\x02\x02\u09E9\u09E8\x03\x02" +
		"\x02\x02\u09EA\u0A08\x03\x02\x02\x02\u09EB\u0A08\x07\u01FC\x02\x02\u09EC" +
		"\u09ED\x07\u01BD\x02\x02\u09ED\u09EE\x07\u0242\x02\x02\u09EE\u0A08\x05" +
		"\u0224\u0113\x02\u09EF\u09F0\x07\xF5\x02\x02\u09F0\u09F1\x07\u0242\x02" +
		"\x02\u09F1\u0A08\t\x18\x02\x02\u09F2\u09F3\x07\u0167\x02\x02\u09F3\u09F4" +
		"\x07\u0242\x02\x02\u09F4\u0A08\x05\u0224\u0113\x02\u09F5\u09F6\x07\u01C2" +
		"\x02\x02\u09F6\u09F7\x07\u0242\x02\x02\u09F7\u0A08\x05\u0146\xA4\x02\u09F8" +
		"\u09F9\x07\u0200\x02\x02\u09F9\u09FA\x07\u0242\x02\x02\u09FA\u0A08\x05" +
		"\u0240\u0121\x02\u09FB\u09FC\x07\u0187\x02\x02\u09FC\u09FD\x07\u0242\x02" +
		"\x02\u09FD\u0A08\x05\u0230\u0119\x02\u09FE\u09FF\x07\u01CD\x02\x02\u09FF" +
		"\u0A00\x07\u0242\x02\x02\u0A00\u0A08\x05\u0224\u0113\x02\u0A01\u0A02\x07" +
		"?\x02\x02\u0A02\u0A03\x07\u0242\x02\x02\u0A03\u0A08\x05\u0146\xA4\x02" +
		"\u0A04\u0A05\x07\u01C3\x02\x02\u0A05\u0A06\x07\u0242\x02\x02\u0A06\u0A08" +
		"\x05\u0240\u0121\x02\u0A07\u09D6\x03\x02\x02\x02\u0A07\u09D9\x03\x02\x02" +
		"\x02\u0A07\u09DC\x03\x02\x02\x02\u0A07\u09DF\x03\x02\x02\x02\u0A07\u09E2" +
		"\x03\x02\x02\x02\u0A07\u09E5\x03\x02\x02\x02\u0A07\u09EB\x03\x02\x02\x02" +
		"\u0A07\u09EC\x03\x02\x02\x02\u0A07\u09EF\x03\x02\x02\x02\u0A07\u09F2\x03" +
		"\x02\x02\x02\u0A07\u09F5\x03\x02\x02\x02\u0A07\u09F8\x03\x02\x02\x02\u0A07" +
		"\u09FB\x03\x02\x02\x02\u0A07\u09FE\x03\x02\x02\x02\u0A07\u0A01\x03\x02" +
		"\x02\x02\u0A07\u0A04\x03\x02\x02\x02\u0A08\u0A0A\x03\x02\x02\x02\u0A09" +
		"\u09D5\x03\x02\x02\x02\u0A0A\u0A0D\x03\x02\x02\x02\u0A0B\u0A09\x03\x02" +
		"\x02\x02\u0A0B\u0A0C\x03\x02\x02\x02\u0A0C\u0A0E\x03\x02\x02\x02\u0A0D" +
		"\u0A0B\x03\x02\x02\x02\u0A0E\u0A0F\x07\u024C\x02\x02\u0A0F\u0A11\x03\x02" +
		"\x02\x02\u0A10\u097D\x03\x02\x02\x02\u0A10\u09C4\x03\x02\x02\x02\u0A10" +
		"\u0A11\x03\x02\x02\x02\u0A11\xA1\x03\x02\x02\x02\u0A12\u0A13\x07G\x02" +
		"\x02\u0A13\u0A15\x05\u026A\u0136\x02\u0A14\u0A16\x07\u0176\x02\x02\u0A15" +
		"\u0A14\x03\x02\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16\u0A17\x03\x02" +
		"\x02\x02\u0A17\u0A1E\x05\u0224\u0113\x02\u0A18\u0A1D\x05\u01FA\xFE\x02" +
		"\u0A19\u0A1A\x07\u0187\x02\x02\u0A1A\u0A1D\x05\u0230\u0119\x02\u0A1B\u0A1D" +
		"\x05\xDEp\x02\u0A1C\u0A18\x03\x02\x02\x02\u0A1C\u0A19\x03\x02\x02\x02" +
		"\u0A1C\u0A1B\x03\x02\x02\x02\u0A1D\u0A20\x03\x02\x02\x02\u0A1E\u0A1C\x03" +
		"\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\xA3\x03\x02\x02\x02\u0A20" +
		"\u0A1E\x03\x02\x02\x02\u0A21\u0A23\x07\xE4\x02\x02\u0A22\u0A24\x05\u019A" +
		"\xCE\x02\u0A23\u0A22\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02\x02\u0A24" +
		"\u0A25\x03\x02\x02\x02\u0A25\u0A28\x05\u0210\u0109\x02\u0A26\u0A27\x07" +
		"\u0109\x02\x02\u0A27\u0A29\x05\u0146\xA4\x02\u0A28\u0A26\x03\x02\x02\x02" +
		"\u0A28\u0A29\x03\x02\x02\x02\u0A29\u0A2C\x03\x02\x02\x02\u0A2A\u0A2B\x07" +
		"\u0119\x02\x02\u0A2B\u0A2D\x05\u0146\xA4\x02\u0A2C\u0A2A\x03\x02\x02\x02" +
		"\u0A2C\u0A2D\x03\x02\x02\x02\u0A2D\u0A2E\x03\x02\x02\x02\u0A2E\u0A2F\x07" +
		"\u0192\x02\x02\u0A2F\u0A30\x076\x02\x02\u0A30\u0A31\x07\u0121\x02\x02" +
		"\u0A31\u0A33\x05\u0210\u0109\x02\u0A32\u0A34\x05\u01BC\xDF\x02\u0A33\u0A32" +
		"\x03\x02\x02\x02\u0A33\u0A34\x03\x02\x02\x02\u0A34\xA5\x03\x02\x02\x02" +
		"\u0A35\u0A36\x07\u0102\x02\x02\u0A36\u0A37\x07\xDE\x02\x02\u0A37\u0A38" +
		"\x07C\x02\x02\u0A38\u0A39\x05\u026A\u0136\x02\u0A39\u0A3A\x07\u024B\x02" +
		"\x02\u0A3A\u0A3B\x07\u0100\x02\x02\u0A3B\u0A3C\x07\u0242\x02\x02\u0A3C" +
		"\u0A41\x05\u026A\u0136\x02\u0A3D\u0A3E\x07\u0245\x02\x02\u0A3E\u0A40\x05" +
		"\xA8U\x02\u0A3F\u0A3D\x03\x02\x02\x02\u0A40\u0A43\x03\x02\x02\x02\u0A41" +
		"\u0A3F\x03\x02\x02\x02\u0A41\u0A42\x03\x02\x02\x02\u0A42\u0A44\x03\x02" +
		"\x02\x02\u0A43\u0A41\x03\x02\x02\x02\u0A44\u0A45\x07\u024C\x02\x02\u0A45" +
		"\xA7\x03\x02\x02\x02\u0A46\u0A47\x05\u0210\u0109\x02\u0A47\u0A48\x07\u0242" +
		"\x02\x02\u0A48\u0A49\x05\u0230\u0119\x02\u0A49\xA9\x03\x02\x02\x02\u0A4A" +
		"\u0A4B\x07\u0102\x02\x02\u0A4B\u0A4C\x07\xDE\x02\x02\u0A4C\u0A4D\x07(" +
		"\x02\x02\u0A4D\u0A4E\x05\u026A\u0136\x02\u0A4E\u0A55\x07\u024B\x02\x02" +
		"\u0A4F\u0A50\x07\xAC\x02\x02\u0A50\u0A51\x07\u0242\x02\x02\u0A51\u0A56" +
		"\x05\u026A\u0136\x02\u0A52\u0A53\x07/\x02\x02\u0A53\u0A54\x07\u0242\x02" +
		"\x02\u0A54\u0A56\x05\u026A\u0136\x02\u0A55\u0A4F\x03\x02\x02\x02\u0A55" +
		"\u0A52\x03\x02\x02\x02\u0A56\u0A57\x03\x02\x02\x02\u0A57\u0A58\x07\u024C" +
		"\x02\x02\u0A58\xAB\x03\x02\x02\x02\u0A59\u0A5A\x07\u0102\x02\x02\u0A5A" +
		"\u0A5B\x07\xDE\x02\x02\u0A5B\u0A5C\x07\u0100\x02\x02\u0A5C\u0A5D\x05\u026A" +
		"\u0136\x02\u0A5D\u0A63\x07\u024B\x02\x02\u0A5E\u0A5F\x07\u01DC\x02\x02" +
		"\u0A5F\u0A60\x07\u0242\x02\x02\u0A60\u0A61\x05\u026A\u0136\x02\u0A61\u0A62" +
		"\x07\u0245\x02\x02\u0A62\u0A64\x03\x02\x02\x02\u0A63\u0A5E\x03\x02\x02" +
		"\x02\u0A63\u0A64\x03\x02\x02\x02\u0A64\u0A65\x03\x02";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\u0A65\u0A66\x07\u01E3\x02\x02\u0A66\u0A67\x07\u0242\x02\x02\u0A67" +
		"\u0A6C\x05\u026A\u0136\x02\u0A68\u0A69\x07\u0245\x02\x02\u0A69\u0A6A\x07" +
		"\u01DC\x02\x02\u0A6A\u0A6B\x07\u0242\x02\x02\u0A6B\u0A6D\x05\u026A\u0136" +
		"\x02\u0A6C\u0A68\x03\x02\x02\x02\u0A6C\u0A6D\x03\x02\x02\x02\u0A6D\u0A6E" +
		"\x03\x02\x02\x02\u0A6E\u0A6F\x07\u024C\x02\x02\u0A6F\xAD\x03\x02\x02\x02" +
		"\u0A70\u0A71\x07\u0102\x02\x02\u0A71\u0A72\x07\xDE\x02\x02\u0A72\u0A73" +
		"\x07\xAC\x02\x02\u0A73\u0A74\x05\u026A\u0136\x02\u0A74\u0A75\x07\u024B" +
		"\x02\x02\u0A75\u0A76\x07\xF0\x02\x02\u0A76\u0A77\x07\u0242\x02\x02\u0A77" +
		"\u0A78\x05\u026A\u0136\x02\u0A78\u0A79\x07\u0245\x02\x02\u0A79\u0A7A\x07" +
		"\u01D6\x02\x02\u0A7A\u0A7B\x07\u0242\x02\x02\u0A7B\u0A7C\x05\u026A\u0136" +
		"\x02\u0A7C\u0A7D\x07\u0245\x02\x02\u0A7D\u0A7E\x07\u018D\x02\x02\u0A7E" +
		"\u0A7F\x07\u0242\x02\x02\u0A7F\u0A80\x05\u026A\u0136\x02\u0A80\u0A86\x07" +
		"\u0245\x02\x02\u0A81\u0A82\x07\u01D9\x02\x02\u0A82\u0A83\x07\u0242\x02" +
		"\x02\u0A83\u0A84\x05\u026A\u0136\x02\u0A84\u0A85\x07\u0245\x02\x02\u0A85" +
		"\u0A87\x03\x02\x02\x02\u0A86\u0A81\x03\x02\x02\x02\u0A86\u0A87\x03\x02" +
		"\x02\x02\u0A87\u0A88\x03\x02\x02\x02\u0A88\u0A89\x07\u01E4\x02\x02\u0A89" +
		"\u0A8A\x07\u0242\x02\x02\u0A8A\u0A8F\x05\u026A\u0136\x02\u0A8B\u0A8C\x07" +
		"\u0245\x02\x02\u0A8C\u0A8D\x07\u01D9\x02\x02\u0A8D\u0A8E\x07\u0242\x02" +
		"\x02\u0A8E\u0A90\x05\u026A\u0136\x02\u0A8F\u0A8B\x03\x02\x02\x02\u0A8F" +
		"\u0A90\x03\x02\x02\x02\u0A90\u0A91\x03\x02\x02\x02\u0A91\u0A92\x07\u024C" +
		"\x02\x02\u0A92\xAF\x03\x02\x02\x02\u0A93\u0A95\x07\u015B\x02\x02\u0A94" +
		"\u0A96\x05\u019A\xCE\x02\u0A95\u0A94\x03\x02\x02\x02\u0A95\u0A96\x03\x02" +
		"\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97\u0AA6\x05\u026A\u0136\x02\u0A98" +
		"\u0A99\x07\u0193\x02\x02\u0A99\u0AA7\x05\u026A\u0136\x02\u0A9A\u0AA3\x07" +
		"\u024B\x02\x02\u0A9B\u0AA0\x05\xB4[\x02\u0A9C\u0A9D\x07\u0245\x02\x02" +
		"\u0A9D\u0A9F\x05\xB4[\x02\u0A9E\u0A9C\x03\x02\x02\x02\u0A9F\u0AA2\x03" +
		"\x02\x02\x02\u0AA0\u0A9E\x03\x02\x02\x02\u0AA0\u0AA1\x03\x02\x02\x02\u0AA1" +
		"\u0AA4\x03\x02\x02\x02\u0AA2\u0AA0\x03\x02\x02\x02\u0AA3\u0A9B\x03\x02" +
		"\x02\x02\u0AA3\u0AA4\x03\x02\x02\x02\u0AA4\u0AA5\x03\x02\x02\x02\u0AA5" +
		"\u0AA7\x07\u024C\x02\x02\u0AA6\u0A98\x03\x02\x02\x02\u0AA6\u0A9A\x03\x02" +
		"\x02\x02\u0AA7\xB1\x03\x02\x02\x02\u0AA8\u0AA9\x07\u015B\x02\x02\u0AA9" +
		"\u0AAF\x05\u026A\u0136\x02\u0AAA\u0AAB\x07\xC6\x02\x02\u0AAB\u0AB0\x07" +
		"\u0119\x02\x02\u0AAC\u0AB0\x05\u01EE\xF8\x02\u0AAD\u0AB0\x05\u01EC\xF7" +
		"\x02\u0AAE\u0AB0\x05\u01F0\xF9\x02\u0AAF\u0AAA\x03\x02\x02\x02\u0AAF\u0AAC" +
		"\x03\x02\x02\x02\u0AAF\u0AAD\x03\x02\x02\x02\u0AAF\u0AAE\x03\x02\x02\x02" +
		"\u0AB0\xB3\x03\x02\x02\x02\u0AB1\u0AB2\t\"\x02\x02\u0AB2\u0AB5\x07\u0242" +
		"\x02\x02\u0AB3\u0AB6\x05\u0146\xA4\x02\u0AB4\u0AB6\x05\u0210\u0109\x02" +
		"\u0AB5\u0AB3\x03\x02\x02\x02\u0AB5\u0AB4\x03\x02\x02\x02\u0AB6\u0ABB\x03" +
		"\x02\x02\x02\u0AB7\u0AB8\x07\u01CB\x02\x02\u0AB8\u0AB9\x07\u0242\x02\x02" +
		"\u0AB9\u0ABB\x058\x1D\x02\u0ABA\u0AB1\x03\x02\x02\x02\u0ABA\u0AB7\x03" +
		"\x02\x02\x02\u0ABB\xB5\x03\x02\x02\x02\u0ABC\u0ABD\x07\u01B6\x02\x02\u0ABD" +
		"\u0ABF\x07\x8A\x02\x02\u0ABE\u0AC0\x05\u019A\xCE\x02\u0ABF\u0ABE\x03\x02" +
		"\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1" +
		"\u0AC4\x07\u0191\x02\x02\u0AC2\u0AC5\x05,\x17\x02\u0AC3\u0AC5\x07\u01B6" +
		"\x02\x02\u0AC4\u0AC2\x03\x02\x02\x02\u0AC4\u0AC3\x03\x02\x02\x02\u0AC5" +
		"\u0AC6\x03\x02\x02\x02\u0AC6\u0AC7\x07\xE4\x02\x02\u0AC7\u0AC9\x05\u0210" +
		"\u0109\x02\u0AC8\u0ACA\x05\u01BC\xDF\x02\u0AC9\u0AC8\x03\x02\x02\x02\u0AC9" +
		"\u0ACA\x03\x02\x02\x02\u0ACA\xB7\x03\x02\x02\x02\u0ACB\u0ACC\x07\u01B6" +
		"\x02\x02\u0ACC\u0ACD\x07\x8A\x02\x02\u0ACD\u0AD0\x07\u0191\x02\x02\u0ACE" +
		"\u0AD1\x05,\x17\x02\u0ACF\u0AD1\x07\u01B6\x02\x02\u0AD0\u0ACE\x03\x02" +
		"\x02\x02\u0AD0\u0ACF\x03\x02\x02\x02\u0AD1\u0AD2\x03\x02\x02\x02\u0AD2" +
		"\u0AD3\x07\xE4\x02\x02\u0AD3\u0AD5\x05\u0210\u0109\x02\u0AD4\u0AD6\x05" +
		"\u01BC\xDF\x02\u0AD5\u0AD4\x03\x02\x02\x02\u0AD5\u0AD6\x03\x02\x02\x02" +
		"\u0AD6\xB9\x03\x02\x02\x02\u0AD7\u0AE5\t\x1D\x02\x02\u0AD8\u0AE6\x05\xBC" +
		"_\x02\u0AD9\u0ADA\x05\u0210\u0109\x02\u0ADA\u0ADB\x05\u01EE\xF8\x02\u0ADB" +
		"\u0AE6\x03\x02\x02\x02\u0ADC\u0ADE\x05,\x17\x02\u0ADD\u0ADF\x07\u01BC" +
		"\x02\x02\u0ADE\u0ADD\x03\x02\x02\x02\u0ADE\u0ADF\x03\x02\x02\x02\u0ADF" +
		"\u0AE1\x03\x02\x02\x02\u0AE0\u0AE2\x05\xE8u\x02\u0AE1\u0AE0\x03\x02\x02" +
		"\x02\u0AE2\u0AE3\x03\x02\x02\x02\u0AE3\u0AE1\x03\x02\x02\x02\u0AE3\u0AE4" +
		"\x03\x02\x02\x02\u0AE4\u0AE6\x03\x02\x02\x02\u0AE5\u0AD8\x03\x02\x02\x02" +
		"\u0AE5\u0AD9\x03\x02\x02\x02\u0AE5\u0ADC\x03\x02\x02\x02\u0AE6\xBB\x03" +
		"\x02\x02\x02\u0AE7\u0AEA\x05,\x17\x02\u0AE8\u0AEA\x07\u0170\x02\x02\u0AE9" +
		"\u0AE7\x03\x02\x02\x02\u0AE9\u0AE8\x03\x02\x02\x02\u0AEA\u0AEE\x03\x02" +
		"\x02\x02\u0AEB\u0AEC\x07\u0197\x02\x02\u0AEC\u0AED\x077\x02\x02\u0AED" +
		"\u0AEF\x05\u0210\u0109\x02\u0AEE\u0AEB\x03\x02\x02\x02\u0AEE\u0AEF\x03" +
		"\x02\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0\u0AF1\x05\xBE`\x02\u0AF1" +
		"\xBD\x03\x02\x02\x02\u0AF2\u0AF6\x07\xE6\x02\x02\u0AF3\u0AF4\x05\u0210" +
		"\u0109\x02\u0AF4\u0AF5\x07\u0253\x02\x02\u0AF5\u0AF7\x03\x02\x02\x02\u0AF6" +
		"\u0AF3\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02\x02\x02\u0AF7\u0AF8\x03\x02" +
		"\x02\x02\u0AF8\u0AF9\x05\u0210\u0109\x02\u0AF9\u0AFA\t\x1C\x02\x02\u0AFA" +
		"\u0AFB\x05\u010C\x87\x02\u0AFB\u0B10\x03\x02\x02\x02\u0AFC\u0B00\x07\xE6" +
		"\x02\x02\u0AFD\u0AFE\x05\u0210\u0109\x02\u0AFE\u0AFF\x07\u0253\x02\x02" +
		"\u0AFF\u0B01\x03\x02\x02\x02\u0B00\u0AFD\x03\x02\x02\x02\u0B00\u0B01\x03" +
		"\x02\x02\x02\u0B01\u0B02\x03\x02\x02\x02\u0B02\u0B03\x05\u0210\u0109\x02" +
		"\u0B03\u0B04\x07\u0193\x02\x02\u0B04\u0B05\x073\x02\x02\u0B05\u0B10\x03" +
		"\x02\x02\x02\u0B06\u0B0A\x07\xCE\x02\x02\u0B07\u0B08\x05\u0210\u0109\x02" +
		"\u0B08\u0B09\x07\u0253\x02\x02\u0B09\u0B0B\x03\x02\x02\x02\u0B0A\u0B07" +
		"\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02" +
		"\u0B0C\u0B10\x05\u0210\u0109\x02\u0B0D\u0B0E\x07\xCE\x02\x02\u0B0E\u0B10" +
		"\x07\u0170\x02\x02\u0B0F\u0AF2\x03\x02\x02\x02\u0B0F\u0AFC\x03\x02\x02" +
		"\x02\u0B0F\u0B06\x03\x02\x02\x02\u0B0F\u0B0D\x03\x02\x02\x02\u0B10\xBF" +
		"\x03\x02\x02\x02\u0B11\u0B12\x07\u0195\x02\x02\u0B12\u0B13\x05\xC2b\x02" +
		"\u0B13\xC1\x03\x02\x02\x02\u0B14\u0B15\x05\u0210\u0109\x02\u0B15\u0B16" +
		"\x05\u01EE\xF8\x02\u0B16\u0B1D\x03\x02\x02\x02\u0B17\u0B18\x05,\x17\x02" +
		"\u0B18\u0B19\t\x13\x02\x02\u0B19\u0B1A\x07\u01B6\x02\x02\u0B1A\u0B1B\x05" +
		"\u02B6\u015C\x02\u0B1B\u0B1D\x03\x02\x02\x02\u0B1C\u0B14\x03\x02\x02\x02" +
		"\u0B1C\u0B17\x03\x02\x02\x02\u0B1D\xC3\x03\x02\x02\x02\u0B1E\u0B1F\x07" +
		"\xFE\x02\x02\u0B1F\u0B20\x05\u0210\u0109\x02\u0B20\u0B21\x05\xC8e\x02" +
		"\u0B21\xC5\x03\x02\x02\x02\u0B22\u0B23\x07\xA2\x02\x02\u0B23\u0B40\x05" +
		"\xDCo\x02\u0B24\u0B25\x07\x7F\x02\x02\u0B25\u0B26\x07\x9D\x02\x02\u0B26" +
		"\u0B40\x07\u0262\x02\x02\u0B27\u0B28\t#\x02\x02\u0B28\u0B29\x05\u026A" +
		"\u0136\x02\u0B29\u0B2A\x05\u0142\xA2\x02\u0B2A\u0B40\x03\x02\x02\x02\u0B2B" +
		"\u0B2C\x07\u0102\x02\x02\u0B2C\u0B2D\x07\xDE\x02\x02\u0B2D\u0B3A\x07C" +
		"\x02\x02\u0B2E\u0B2F\x07\u0102\x02\x02\u0B2F\u0B30\x07\xDE\x02\x02\u0B30" +
		"\u0B3A\x07(\x02\x02\u0B31\u0B3A\x07G\x02\x02\u0B32\u0B3A\x07\xDB\x02\x02" +
		"\u0B33\u0B3A\x07\xE1\x02\x02\u0B34\u0B3A\x07\u0109\x02\x02\u0B35\u0B37" +
		"\x07\x8C\x02\x02\u0B36\u0B35\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02" +
		"\u0B37\u0B38\x03\x02\x02\x02\u0B38\u0B3A\x07\u011A\x02\x02\u0B39\u0B2B" +
		"\x03\x02\x02\x02\u0B39\u0B2E\x03\x02\x02\x02\u0B39\u0B31\x03\x02\x02\x02" +
		"\u0B39\u0B32\x03\x02\x02\x02\u0B39\u0B33\x03\x02\x02\x02\u0B39\u0B34\x03" +
		"\x02\x02\x02\u0B39\u0B36\x03\x02\x02\x02\u0B3A\u0B3C\x03\x02\x02\x02\u0B3B" +
		"\u0B3D\x05\u0198\xCD\x02\u0B3C\u0B3B\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02" +
		"\x02\x02\u0B3D\u0B3E\x03\x02\x02\x02\u0B3E\u0B40\x05\u026A\u0136\x02\u0B3F" +
		"\u0B22\x03\x02\x02\x02\u0B3F\u0B24\x03\x02\x02\x02\u0B3F\u0B27\x03\x02" +
		"\x02\x02\u0B3F\u0B39\x03\x02\x02\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41" +
		"\u0B42\x05\u01EC\xF7\x02\u0B42\xC7\x03\x02\x02\x02\u0B43\u0B57\x05\u01EE" +
		"\xF8\x02\u0B44\u0B57\x05\u01EC\xF7\x02\u0B45\u0B46\x07\xE6\x02\x02\u0B46" +
		"\u0B47\x07\u024B\x02\x02\u0B47\u0B4C\x05\xA8U\x02\u0B48\u0B49\x07\u0245" +
		"\x02\x02\u0B49\u0B4B\x05\xA8U\x02\u0B4A\u0B48\x03\x02\x02\x02\u0B4B\u0B4E" +
		"\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02\x02\x02" +
		"\u0B4D\u0B4F\x03\x02\x02\x02\u0B4E\u0B4C\x03\x02\x02\x02\u0B4F\u0B50\x07" +
		"\u024C\x02\x02\u0B50\u0B57\x03\x02\x02\x02\u0B51\u0B52\x07\xCE\x02\x02" +
		"\u0B52\u0B53\x07\u024B\x02\x02\u0B53\u0B54\x05\u02B6\u015C\x02\u0B54\u0B55" +
		"\x07\u024C\x02\x02\u0B55\u0B57\x03\x02\x02\x02\u0B56\u0B43\x03\x02\x02" +
		"\x02\u0B56\u0B44\x03\x02\x02\x02\u0B56\u0B45\x03\x02\x02\x02\u0B56\u0B51" +
		"\x03\x02\x02\x02\u0B57\xC9\x03\x02\x02\x02\u0B58\u0B59\x07\xF2\x02\x02" +
		"\u0B59\u0B5D\x05\u026A\u0136\x02\u0B5A\u0B5E\x05\u01EE\xF8\x02\u0B5B\u0B5E" +
		"\x05\u01F0\xF9\x02\u0B5C\u0B5E\x05\u01EC\xF7\x02\u0B5D\u0B5A\x03\x02\x02" +
		"\x02\u0B5D\u0B5B\x03\x02\x02\x02\u0B5D\u0B5C\x03\x02\x02\x02\u0B5E\xCB" +
		"\x03\x02\x02\x02\u0B5F\u0B60\x07\u0192\x02\x02\u0B60\u0B61\x076\x02\x02" +
		"\u0B61\u0B62\x07\u0121\x02\x02\u0B62\u0B63\x05\u0210\u0109\x02\u0B63\u0B64" +
		"\x05\xCEh\x02\u0B64\xCD\x03\x02\x02\x02\u0B65\u0B66\x07d\x02\x02\u0B66" +
		"\u0B6A\x05\u0220\u0111\x02\u0B67\u0B68\x07\x98\x02\x02\u0B68\u0B6A\x07" +
		"d\x02\x02\u0B69\u0B65\x03\x02\x02\x02\u0B69\u0B67\x03\x02\x02\x02\u0B69" +
		"\u0B6A\x03\x02\x02\x02\u0B6A\u0B6F\x03\x02\x02\x02\u0B6B\u0B6C\x07\u0116" +
		"\x02\x02\u0B6C\u0B70\x05\u0220\u0111\x02\u0B6D\u0B6E\x07\x98\x02\x02\u0B6E" +
		"\u0B70\x07\u0116\x02\x02\u0B6F\u0B6B\x03\x02\x02\x02\u0B6F\u0B6D\x03\x02" +
		"\x02\x02\u0B6F\u0B70\x03\x02\x02\x02\u0B70\u0B72\x03\x02\x02\x02\u0B71" +
		"\u0B73\x05\u01BC\xDF\x02\u0B72\u0B71\x03\x02\x02\x02\u0B72\u0B73\x03\x02" +
		"\x02\x02\u0B73\u0B77\x03\x02\x02\x02\u0B74\u0B77\x05\u01EC\xF7\x02\u0B75" +
		"\u0B77\x05\u01EE\xF8\x02\u0B76\u0B69\x03\x02\x02\x02\u0B76\u0B74\x03\x02" +
		"\x02\x02\u0B76\u0B75\x03\x02\x02\x02\u0B77\xCF\x03\x02\x02\x02\u0B78\u0B79" +
		"\x07\xA2\x02\x02\u0B79\u0B7A\x05\xDCo\x02\u0B7A\u0B7B\x05\xD2j\x02\u0B7B" +
		"\xD1\x03\x02\x02\x02\u0B7C\u0B8A\x05\u01F0\xF9\x02\u0B7D\u0B7E\x07\xE6" +
		"\x02\x02\u0B7E\u0B7F\x07\u024B\x02\x02\u0B7F\u0B84\x05\xD4k\x02\u0B80" +
		"\u0B81\x07\u0245\x02\x02\u0B81\u0B83\x05\xD4k\x02\u0B82\u0B80\x03\x02" +
		"\x02\x02\u0B83\u0B86\x03\x02\x02\x02\u0B84\u0B82\x03\x02\x02\x02\u0B84" +
		"\u0B85\x03\x02\x02\x02\u0B85\u0B87\x03\x02\x02\x02\u0B86\u0B84\x03\x02" +
		"\x02\x02\u0B87\u0B88\x07\u024C\x02\x02\u0B88\u0B8A\x03\x02\x02\x02\u0B89" +
		"\u0B7C\x03\x02\x02\x02\u0B89\u0B7D\x03\x02\x02\x02\u0B8A\xD3\x03\x02\x02" +
		"\x02\u0B8B\u0B8C\t$\x02\x02\u0B8C\u0B8D\x07\u0242\x02\x02\u0B8D\u0B8E" +
		"\x05\u026A\u0136\x02\u0B8E\xD5\x03\x02\x02\x02\u0B8F\u0B90\x07\u01B6\x02" +
		"\x02\u0B90\u0B92\x07\x8A\x02\x02\u0B91\u0B93\x05\u0198\xCD\x02\u0B92\u0B91" +
		"\x03\x02\x02\x02\u0B92\u0B93\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02" +
		"\u0B94\u0B97\x07\u0191\x02\x02\u0B95\u0B98\x05,\x17\x02\u0B96\u0B98\x07" +
		"\u01B6\x02\x02\u0B97\u0B95\x03\x02\x02\x02\u0B97\u0B96\x03\x02\x02\x02" +
		"\u0B98\u0B99\x03\x02\x02\x02\u0B99\u0B9A\x07\xE4\x02\x02\u0B9A\u0B9B\x05" +
		"\u0210\u0109\x02\u0B9B\xD7\x03\x02\x02\x02\u0B9C\u0B9D\x07\xA9\x02\x02" +
		"\u0B9D\u0B9E\x07\x16\x02\x02\u0B9E\u0BA3\x05,\x17\x02\u0B9F\u0BA0\x07" +
		"\u0245\x02\x02\u0BA0\u0BA2\x05,\x17\x02\u0BA1\u0B9F\x03\x02\x02\x02\u0BA2" +
		"\u0BA5\x03\x02\x02\x02\u0BA3\u0BA1\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02" +
		"\x02\x02\u0BA4\u0BA7\x03\x02\x02\x02\u0BA5\u0BA3\x03\x02\x02\x02\u0BA6" +
		"\u0BA8\x05\u01F8\xFD\x02\u0BA7\u0BA6\x03\x02\x02\x02\u0BA7\u0BA8\x03\x02" +
		"\x02\x02\u0BA8\xD9\x03\x02\x02\x02\u0BA9\u0BAB\x07\xA2\x02\x02\u0BAA\u0BAC" +
		"\x05\u0198\xCD\x02\u0BAB\u0BAA\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02" +
		"\x02\u0BAC\u0BAD\x03\x02\x02\x02\u0BAD\u0BB2\x05\xDCo\x02\u0BAE\u0BAF" +
		"\x07\u0245\x02\x02\u0BAF\u0BB1\x05\xDCo\x02\u0BB0\u0BAE\x03\x02\x02\x02" +
		"\u0BB1\u0BB4\x03\x02\x02\x02\u0BB2\u0BB0\x03\x02\x02\x02\u0BB2\u0BB3\x03" +
		"\x02\x02\x02\u0BB3\u0BB6\x03\x02\x02\x02\u0BB4\u0BB2\x03\x02\x02\x02\u0BB5" +
		"\u0BB7\x05\u01F8\xFD\x02\u0BB6\u0BB5\x03\x02\x02\x02\u0BB6\u0BB7\x03\x02" +
		"\x02\x02\u0BB7\xDB\x03\x02\x02\x02\u0BB8\u0BB9\x05\xFE\x80\x02\u0BB9\u0BBC" +
		"\x07\u024B\x02\x02\u0BBA\u0BBD\x05\u0224\u0113\x02\u0BBB\u0BBD\x07\u013C" +
		"\x02\x02\u0BBC\u0BBA\x03\x02\x02\x02\u0BBC\u0BBB\x03\x02\x02\x02\u0BBD" +
		"\u0BBE\x03\x02\x02\x02\u0BBE\u0BC1\x07\u0245\x02\x02\u0BBF\u0BC2\x05\u0224" +
		"\u0113\x02\u0BC0\u0BC2\x07\u013C\x02\x02\u0BC1\u0BBF\x03\x02\x02\x02\u0BC1" +
		"\u0BC0\x03\x02\x02\x02\u0BC2\u0BC3\x03\x02\x02\x02\u0BC3\u0BC4\x07\u024C" +
		"\x02\x02\u0BC4\xDD\x03\x02\x02\x02\u0BC5\u0BC6\x07\u017F\x02\x02\u0BC6" +
		"\u0BC8\x05\u0210\u0109\x02\u0BC7\u0BC5\x03\x02\x02\x02\u0BC7\u0BC8\x03" +
		"\x02\x02\x02\u0BC8\u0BD2\x03\x02\x02\x02\u0BC9\u0BCA\x07\u017C\x02\x02" +
		"\u0BCA\u0BCB\x07\u024B\x02\x02\u0BCB\u0BCC\x05\u0230\u0119\x02\u0BCC\u0BCD" +
		"\x07\u024C\x02\x02\u0BCD\u0BD3\x03\x02\x02\x02\u0BCE\u0BD0\x07\u01A0\x02" +
		"\x02\u0BCF\u0BCE\x03\x02\x02\x02\u0BCF\u0BD0\x03\x02\x02\x02\u0BD0\u0BD1" +
		"\x03\x02\x02\x02\u0BD1\u0BD3\x07\u01A1\x02\x02\u0BD2\u0BC9\x03\x02\x02" +
		"\x02\u0BD2\u0BCF\x03\x02\x02\x02\u0BD3\xDF\x03\x02\x02\x02\u0BD4\u0BD5" +
		"\x07\u01A5\x02\x02\u0BD5\u0BD7\x07\xCC\x02\x02\u0BD6\u0BD4\x03\x02\x02" +
		"\x02\u0BD6\u0BD7\x03\x02\x02\x02\u0BD7\u0BD8\x03\x02\x02\x02\u0BD8\u0BD9" +
		"\x07\u0105\x02\x02\u0BD9\u0BDA\x07\u0191\x02\x02\u0BDA\u0BDB\x05\u0224" +
		"\u0113\x02\u0BDB\u0BDC\x07~\x02\x02\u0BDC\u0BDD\x05\u0210\u0109\x02\u0BDD" +
		"\u0BDE\x07\u024B\x02\x02\u0BDE\u0BDF\x07\u0193\x02\x02\u0BDF\u0BE0\x07" +
		"\xED\x02\x02\u0BE0\u0BE1\x07\u01BC\x02\x02\u0BE1\u0BE2\x07^\x02\x02\u0BE2" +
		"\u0BE3\x05\u0140\xA1\x02\u0BE3\u0BE4\x07\u0245\x02\x02\u0BE4\u0BE5\x07" +
		"\u01B1\x02\x02\u0BE5\u0BE6\x07\xED\x02\x02\u0BE6\u0BE7\x07\u01BC\x02\x02" +
		"\u0BE7\u0BE8\x07^\x02\x02\u0BE8\u0BE9\x05\u0140\xA1\x02\u0BE9\u0BEA\x07" +
		"\u024C\x02\x02\u0BEA\xE1\x03\x02\x02\x02\u0BEB\u0BEC\x07\x05\x02\x02\u0BEC" +
		"\u0BED\x07\x8E\x02\x02\u0BED\u0BEE\x05\u0210\u0109\x02\u0BEE\u0BEF\x07" +
		"\u0109\x02\x02\u0BEF\u0BF0\t%\x02\x02\u0BF0\u0BF1\x07d\x02\x02\u0BF1\u0BF2" +
		"\x05\u026A\u0136\x02\u0BF2\xE3\x03\x02\x02\x02\u0BF3\u0BF4\t\x1D\x02\x02" +
		"\u0BF4\u0BFF\x05\u0210\u0109\x02\u0BF5\u0BF7\x07\u01BC\x02\x02\u0BF6\u0BF5" +
		"\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02\x02\x02\u0BF7\u0BF8\x03\x02\x02\x02" +
		"\u0BF8\u0BFC\x05\xE6t\x02\u0BF9\u0BFB\x05\xE6t\x02\u0BFA\u0BF9\x03\x02" +
		"\x02\x02\u0BFB\u0BFE\x03\x02\x02\x02\u0BFC\u0BFA\x03\x02\x02\x02\u0BFC" +
		"\u0BFD\x03\x02\x02\x02\u0BFD\u0C00\x03\x02\x02\x02\u0BFE\u0BFC\x03\x02" +
		"\x02\x02\u0BFF\u0BF6\x03\x02\x02\x02\u0BFF\u0C00\x03\x02\x02\x02\u0C00" +
		"\xE5\x03\x02\x02\x02\u0C01\u0C05\x05\xEAv\x02\u0C02\u0C05\x05\xECw\x02" +
		"\u0C03\u0C05\x05\xEEx\x02\u0C04\u0C01\x03\x02\x02\x02\u0C04\u0C02\x03" +
		"\x02\x02\x02\u0C04\u0C03\x03\x02\x02\x02\u0C05\xE7\x03\x02\x02\x02\u0C06" +
		"\u0C09\x05\xEAv\x02\u0C07\u0C09\x05\xECw\x02\u0C08\u0C06\x03\x02\x02\x02" +
		"\u0C08\u0C07\x03\x02\x02\x02\u0C09\xE9\x03\x02\x02\x02\u0C0A\u0C20\x07" +
		"\u0218\x02\x02\u0C0B\u0C20\x07\u01FA\x02\x02\u0C0C\u0C20\x07\u01C8\x02" +
		"\x02\u0C0D\u0C20\x07\u01F5\x02\x02\u0C0E\u0C20\x07\u01C9\x02\x02\u0C0F" +
		"\u0C20\x07\u01F6\x02\x02\u0C10\u0C20\x07s\x02\x02\u0C11\u0C20\x07\u01F7" +
		"\x02\x02\u0C12\u0C20\x07\u01E7\x02\x02\u0C13\u0C20\x07\u01F8\x02\x02\u0C14" +
		"\u0C16\x07M\x02\x02\u0C15\u0C14\x03\x02\x02\x02\u0C15\u0C16\x03\x02\x02" +
		"\x02\u0C16\u0C17\x03\x02\x02\x02\u0C17\u0C1A\x07\xB0\x02\x02\u0C18\u0C1B" +
		"\x07\u0267\x02\x02\u0C19\u0C1B\x07\u01A1\x02\x02\u0C1A\u0C18\x03\x02\x02" +
		"\x02\u0C1A\u0C19\x03\x02\x02\x02\u0C1B\u0C20\x03\x02\x02\x02\u0C1C\u0C1D" +
		"\x07\u0114\x02\x02\u0C1D\u0C1E\x07\u0111\x02\x02\u0C1E\u0C20\x07\u0267" +
		"\x02\x02\u0C1F\u0C0A\x03\x02\x02\x02\u0C1F\u0C0B\x03\x02\x02\x02\u0C1F" +
		"\u0C0C\x03\x02\x02\x02\u0C1F\u0C0D\x03\x02\x02\x02\u0C1F\u0C0E\x03\x02" +
		"\x02\x02\u0C1F\u0C0F\x03\x02\x02\x02\u0C1F\u0C10\x03\x02\x02\x02\u0C1F" +
		"\u0C11\x03\x02\x02\x02\u0C1F\u0C12\x03\x02\x02\x02\u0C1F\u0C13\x03\x02" +
		"\x02\x02\u0C1F\u0C15\x03\x02\x02\x02\u0C1F\u0C1C\x03\x02\x02\x02\u0C20" +
		"\xEB\x03\x02\x02\x02\u0C21\u0C29\x07\u0206\x02\x02\u0C22\u0C29\x07\u01F9" +
		"\x02\x02\u0C23\u0C29\x07\u01C0\x02\x02\u0C24\u0C29\x07\u01F4\x02\x02\u0C25" +
		"\u0C26\x07*\x02\x02\u0C26\u0C27\x07\u019D\x02\x02\u0C27\u0C29\x05\u0150" +
		"\xA9\x02\u0C28\u0C21\x03\x02\x02\x02\u0C28\u0C22\x03\x02\x02\x02\u0C28" +
		"\u0C23\x03\x02\x02\x02\u0C28\u0C24\x03\x02\x02\x02\u0C28\u0C25\x03\x02" +
		"\x02\x02\u0C29\xED\x03\x02\x02\x02\u0C2A\u0C2B\x07\xFB\x02\x02\u0C2B\u0C37" +
		"\x05\u0230\u0119\x02\u0C2C\u0C2D\x07\u0197\x02\x02\u0C2D\u0C34\x07\xD3" +
		"\x02\x02\u0C2E\u0C2F\x07\u0197\x02\x02\u0C2F\u0C34\x07\u0195\x02\x02\u0C30" +
		"\u0C34\x07\xD3\x02\x02\u0C31\u0C34\x07\b\x02\x02\u0C32\u0C34\x07\u01B6" +
		"\x02\x02\u0C33\u0C2C\x03\x02\x02\x02\u0C33\u0C2E\x03\x02\x02\x02\u0C33" +
		"\u0C30\x03\x02\x02\x02\u0C33\u0C31\x03\x02\x02\x02\u0C33\u0C32\x03\x02" +
		"\x02\x02\u0C34\u0C35\x03\x02\x02\x02\u0C35\u0C37\x05\u02B6\u015C\x02\u0C36" +
		"\u0C2A\x03\x02\x02\x02\u0C36\u0C33\x03\x02\x02\x02\u0C37\xEF\x03\x02\x02" +
		"\x02\u0C38\u0C39\x07\u0195\x02\x02\u0C39\u0C42\x05\u0210\u0109\x02\u0C3A" +
		"\u0C3C\x07\u01BC\x02\x02\u0C3B\u0C3A\x03\x02\x02\x02\u0C3B\u0C3C\x03\x02" +
		"\x02\x02\u0C3C\u0C3E\x03\x02\x02\x02\u0C3D\u0C3F\x05\xF2z\x02\u0C3E\u0C3D" +
		"\x03\x02\x02\x02\u0C3F\u0C40\x03\x02\x02\x02\u0C40\u0C3E\x03\x02\x02\x02" +
		"\u0C40\u0C41\x03\x02\x02\x02\u0C41\u0C43\x03\x02\x02\x02\u0C42\u0C3B\x03" +
		"\x02\x02\x02\u0C42\u0C43\x03\x02\x02\x02\u0C43\xF1\x03\x02\x02\x02\u0C44" +
		"\u0C47\x05\xEAv\x02\u0C45\u0C47\x05\xEEx\x02\u0C46\u0C44\x03\x02\x02\x02" +
		"\u0C46\u0C45\x03\x02\x02\x02\u0C47\xF3\x03\x02\x02\x02\u0C48\u0C49\x07" +
		"\xFE\x02\x02\u0C49\u0C4C\x05\u0210\u0109\x02\u0C4A\u0C4B\x07\xAA\x02\x02" +
		"\u0C4B\u0C4D\x05,\x17\x02\u0C4C\u0C4A\x03\x02\x02\x02\u0C4C\u0C4D\x03" +
		"\x02\x02\x02\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0C4F\x07\x86\x02\x02\u0C4F" +
		"\u0C5C\x07\u0267\x02\x02\u0C50\u0C51\x07\u01BC\x02\x02\u0C51\u0C52\x07" +
		"\u024B\x02\x02\u0C52\u0C57\x05\xA8U\x02\u0C53\u0C54\x07\u0245\x02\x02" +
		"\u0C54\u0C56\x05\xA8U\x02\u0C55\u0C53\x03\x02\x02\x02\u0C56\u0C59\x03" +
		"\x02\x02\x02\u0C57\u0C55\x03\x02\x02\x02\u0C57\u0C58\x03\x02\x02\x02\u0C58" +
		"\u0C5A\x03\x02\x02\x02\u0C59\u0C57\x03\x02\x02\x02\u0C5A\u0C5B\x07\u024C" +
		"\x02\x02\u0C5B\u0C5D\x03\x02\x02\x02\u0C5C\u0C50\x03\x02\x02\x02\u0C5C" +
		"\u0C5D\x03\x02\x02\x02\u0C5D\xF5\x03\x02\x02\x02\u0C5E\u0C60\x07\xF2\x02" +
		"\x02\u0C5F\u0C61\x05\u019A\xCE\x02\u0C60\u0C5F\x03\x02\x02\x02\u0C60\u0C61" +
		"\x03\x02\x02\x02\u0C61\u0C62\x03\x02\x02\x02\u0C62\u0C67\x05\u026A\u0136" +
		"\x02\u0C63\u0C64\x07\u024B\x02\x02\u0C64\u0C65\x05\u02B6\u015C\x02\u0C65" +
		"\u0C66\x07\u024C\x02\x02\u0C66\u0C68\x03\x02\x02\x02\u0C67\u0C63\x03\x02" +
		"\x02\x02\u0C67\u0C68\x03\x02\x02\x02\u0C68\u0C69\x03\x02\x02\x02\u0C69" +
		"\u0C6A\x07\u01A3\x02\x02\u0C6A\u0C6B\x05\u0210\u0109\x02\u0C6B\u0C6C\x07" +
		"\u0245\x02\x02\u0C6C\u0C6D\x05\u02B6\u015C\x02\u0C6D\u0C6E\x07\u0193\x02" +
		"\x02\u0C6E\u0C6F\x05\u026A\u0136\x02\u0C6F\xF7\x03\x02\x02\x02\u0C70\u0C71" +
		"\x07\u0192\x02\x02\u0C71\u0C72\x076\x02\x02\u0C72\u0C73\x07\u0121\x02" +
		"\x02\u0C73\u0C78\x05\u0210\u0109\x02\u0C74\u0C75\x07d\x02\x02\u0C75\u0C79" +
		"\x05\u0220\u0111\x02\u0C76\u0C77\x07\x98\x02\x02\u0C77\u0C79\x07d\x02" +
		"\x02\u0C78\u0C74\x03\x02\x02\x02\u0C78\u0C76\x03\x02\x02\x02\u0C78\u0C79" +
		"\x03\x02\x02\x02\u0C79\u0C7E\x03\x02\x02\x02\u0C7A\u0C7B\x07\u0116\x02" +
		"\x02\u0C7B\u0C7F\x05\u0220\u0111\x02\u0C7C\u0C7D\x07\x98\x02\x02\u0C7D" +
		"\u0C7F\x07\u0116\x02\x02\u0C7E\u0C7A\x03\x02\x02\x02\u0C7E\u0C7C\x03\x02" +
		"\x02\x02\u0C7E\u0C7F\x03\x02\x02\x02\u0C7F\u0C8C\x03\x02\x02\x02\u0C80" +
		"\u0C81\x07\xA4\x02\x02\u0C81\u0C82\x07\u024B\x02\x02\u0C82\u0C87\x05\xFA" +
		"~\x02\u0C83\u0C84\x07\u0245\x02\x02\u0C84\u0C86\x05\xFA~\x02\u0C85\u0C83" +
		"\x03\x02\x02\x02\u0C86\u0C89\x03\x02\x02\x02\u0C87\u0C85\x03\x02\x02\x02" +
		"\u0C87\u0C88\x03\x02\x02\x02\u0C88\u0C8A\x03\x02\x02\x02\u0C89\u0C87\x03" +
		"\x02\x02\x02\u0C8A\u0C8B\x07\u024C\x02\x02\u0C8B\u0C8D\x03\x02\x02\x02" +
		"\u0C8C\u0C80\x03\x02\x02\x02\u0C8C\u0C8D\x03\x02\x02\x02\u0C8D\xF9\x03" +
		"\x02\x02\x02\u0C8E\u0C8F\x05\u0210\u0109\x02\u0C8F\u0C90\x07\u0267\x02" +
		"\x02\u0C90\xFB\x03\x02\x02\x02\u0C91\u0C92\x07\xA2\x02\x02\u0C92\u0C93" +
		"\x05\xFE\x80\x02\u0C93\u0C94\x07\u024B\x02\x02\u0C94\u0C99\x05\u0100\x81" +
		"\x02\u0C95\u0C96\x07\u0245\x02\x02\u0C96\u0C98\x05\u0100\x81\x02\u0C97" +
		"\u0C95\x03\x02\x02\x02\u0C98\u0C9B\x03\x02\x02\x02\u0C99\u0C97\x03\x02" +
		"\x02\x02\u0C99\u0C9A\x03\x02\x02\x02\u0C9A\u0C9C\x03\x02\x02\x02\u0C9B" +
		"\u0C99\x03\x02\x02\x02\u0C9C\u0C9D\x07\u024C\x02\x02\u0C9D\xFD\x03\x02" +
		"\x02\x02\u0C9E\u0C9F\x05\u0210\u0109\x02\u0C9F\u0CA0\x07\u0253\x02\x02" +
		"\u0CA0\u0CA2\x03\x02\x02\x02\u0CA1\u0C9E\x03\x02\x02\x02\u0CA1\u0CA2\x03" +
		"\x02\x02\x02\u0CA2\u0CA3\x03\x02\x02\x02\u0CA3\u0CA4\x05\u01D2\xEA\x02" +
		"\u0CA4\xFF\x03\x02\x02\x02\u0CA5\u0CA6\t\x12\x02\x02\u0CA6\u0CA7\x07\u0242" +
		"\x02\x02\u0CA7\u0CB7\x05\u026A\u0136\x02\u0CA8\u0CA9\x07\xD0\x02\x02\u0CA9" +
		"\u0CAA\x07\u0242\x02\x02\u0CAA\u0CB7\x05\u026A\u0136\x02\u0CAB\u0CAC\x07" +
		"\u0165\x02\x02\u0CAC\u0CAD\x07\u0242\x02\x02\u0CAD\u0CB7\x05\u026A\u0136" +
		"\x02\u0CAE\u0CAF\t&\x02\x02\u0CAF\u0CB0\x07\u0242\x02\x02\u0CB0\u0CB7" +
		"\x05\u0224\u0113\x02\u0CB1\u0CB2\t\'\x02\x02\u0CB2\u0CB3\x07\u0242\x02" +
		"\x02\u0CB3\u0CB7\x05\u0236\u011C\x02\u0CB4\u0CB7\x07\u01D8\x02\x02\u0CB5" +
		"\u0CB7\x07\u01E9\x02\x02\u0CB6\u0CA5\x03\x02\x02\x02\u0CB6\u0CA8\x03\x02" +
		"\x02\x02\u0CB6\u0CAB\x03\x02\x02\x02\u0CB6\u0CAE\x03\x02\x02\x02\u0CB6" +
		"\u0CB1\x03\x02\x02\x02\u0CB6\u0CB4\x03\x02\x02\x02\u0CB6\u0CB5\x03\x02" +
		"\x02\x02\u0CB7\u0101\x03\x02\x02\x02\u0CB8\u0CB9\x07\u01A5\x02\x02\u0CB9" +
		"\u0CBB\x07\xCC\x02\x02\u0CBA\u0CB8\x03\x02\x02\x02\u0CBA\u0CBB\x03\x02" +
		"\x02\x02\u0CBB\u0CBC\x03\x02\x02\x02\u0CBC\u0CBD\x07\n\x02\x02\u0CBD\u0CBF" +
		"\x05\u026A\u0136\x02\u0CBE\u0CC0\x05\u0142\xA2\x02\u0CBF\u0CBE\x03\x02" +
		"\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u0CC1\x03\x02\x02\x02\u0CC1" +
		"\u0CC7\x07\u024B\x02\x02\u0CC2\u0CC3\x07\u01BE\x02\x02\u0CC3\u0CC4\x07" +
		"\u0242\x02\x02\u0CC4\u0CC5\x05\u0224\u0113\x02\u0CC5\u0CC6\x07\u0245\x02" +
		"\x02\u0CC6\u0CC8\x03\x02\x02\x02\u0CC7\u0CC2\x03\x02\x02\x02\u0CC7\u0CC8" +
		"\x03\x02\x02\x02\u0CC8\u0CC9\x03\x02\x02\x02\u0CC9\u0CCA\x07\u020E\x02" +
		"\x02\u0CCA\u0CCB\x07\u0242\x02\x02\u0CCB\u0CCC\x05\u026A\u0136\x02\u0CCC" +
		"\u0CCD\x07\u0245\x02\x02\u0CCD\u0CCE\x07\u0213\x02\x02\u0CCE\u0CCF\x07" +
		"\u0242\x02\x02\u0CCF\u0CD4\x05\u0224\u0113\x02\u0CD0\u0CD1\x07\u0245\x02" +
		"\x02\u0CD1\u0CD3\x05\u0104\x83\x02\u0CD2\u0CD0\x03\x02\x02\x02\u0CD3\u0CD6" +
		"\x03\x02\x02\x02\u0CD4\u0CD2\x03\x02\x02\x02\u0CD4\u0CD5\x03\x02\x02\x02" +
		"\u0CD5\u0CD7\x03\x02\x02\x02\u0CD6\u0CD4\x03\x02\x02\x02\u0CD7\u0CD8\x07" +
		"\u024C\x02\x02\u0CD8\u0103\x03\x02\x02\x02\u0CD9\u0CDA\x07\u0212\x02\x02" +
		"\u0CDA\u0CDB\x07\u0242\x02\x02\u0CDB\u0D0D\x07\u0262\x02\x02\u0CDC\u0CDD" +
		"\x07\u01CF\x02\x02\u0CDD\u0CDE\x07\u0242\x02\x02\u0CDE\u0D0D\x05\u026A" +
		"\u0136\x02\u0CDF\u0D0D\x07\u01D0\x02\x02\u0CE0\u0CE1\x07\u01D1\x02\x02" +
		"\u0CE1\u0CE2\x07\u0242\x02\x02\u0CE2\u0D0D\t(\x02\x02\u0CE3\u0CE4\x07" +
		"\u01C4\x02\x02\u0CE4\u0CE5\x07\u0242\x02\x02\u0CE5\u0D0D\x05\u026A\u0136" +
		"\x02\u0CE6\u0CE7\x07\u020C\x02\x02\u0CE7\u0CE8\x07\u0242\x02\x02\u0CE8" +
		"\u0D0D\x05\u026A\u0136\x02\u0CE9\u0CEA\x07\u01CA\x02\x02\u0CEA\u0CEB\x07" +
		"\u0242\x02\x02\u0CEB\u0D0D\x05\u026A\u0136\x02\u0CEC\u0CED\x07\u01DD\x02" +
		"\x02\u0CED\u0CEE\x07\u0242\x02\x02\u0CEE\u0D0D\x05\u0230\u0119\x02\u0CEF" +
		"\u0CF0\x07\u01F0\x02\x02\u0CF0\u0CF1\x07\u0242\x02\x02\u0CF1\u0D0D\x05" +
		"\u026A\u0136\x02\u0CF2\u0CF3\x07\u01EE\x02\x02\u0CF3\u0CF4\x07\u0242\x02" +
		"\x02\u0CF4\u0D0D\x05\u026A\u0136\x02\u0CF5\u0CF6\x07\u01F2\x02\x02\u0CF6" +
		"\u0CF7\x07\u0242\x02\x02\u0CF7\u0D0D\x05\u0224\u0113\x02\u0CF8\u0CF9\x07" +
		"\u01F1\x02\x02\u0CF9\u0CFA\x07\u0242\x02\x02\u0CFA\u0D0D\x07\u0262\x02" +
		"\x02\u0CFB\u0CFC\x07\u01EA\x02\x02\u0CFC\u0CFD\x07\u0242\x02\x02\u0CFD" +
		"\u0D0D\x05\u026A\u0136\x02\u0CFE\u0D0D\x07\u01EB\x02\x02\u0CFF\u0D00\x07" +
		"\u01EC\x02\x02\u0D00\u0D01\x07\u0242\x02\x02\u0D01\u0D0D\t(\x02\x02\u0D02" +
		"\u0D03\x07\u01ED\x02\x02\u0D03\u0D04\x07\u0242\x02\x02\u0D04\u0D0D\x05" +
		"\u0230\u0119\x02\u0D05\u0D06\x07\u0211\x02\x02\u0D06\u0D07\x07\u0242\x02" +
		"\x02\u0D07\u0D0D\x05\u0236\u011C\x02\u0D08\u0D09\x07\xAB\x02\x02\u0D09" +
		"\u0D0A\x07\u0242\x02\x02\u0D0A\u0D0D\t\x1B\x02\x02\u0D0B\u0D0D\x07\u01DA" +
		"\x02\x02\u0D0C\u0CD9\x03\x02\x02\x02\u0D0C\u0CDC\x03\x02\x02\x02\u0D0C" +
		"\u0CDF\x03\x02\x02\x02\u0D0C\u0CE0\x03\x02\x02\x02\u0D0C\u0CE3\x03\x02" +
		"\x02\x02\u0D0C\u0CE6\x03\x02\x02\x02\u0D0C\u0CE9\x03\x02\x02\x02\u0D0C" +
		"\u0CEC\x03\x02\x02\x02\u0D0C\u0CEF\x03\x02\x02\x02\u0D0C\u0CF2\x03\x02" +
		"\x02\x02\u0D0C\u0CF5\x03\x02\x02\x02\u0D0C\u0CF8\x03\x02\x02\x02\u0D0C" +
		"\u0CFB\x03\x02\x02\x02\u0D0C\u0CFE\x03\x02\x02\x02\u0D0C\u0CFF\x03\x02" +
		"\x02\x02\u0D0C\u0D02\x03\x02\x02\x02\u0D0C\u0D05\x03\x02\x02\x02\u0D0C" +
		"\u0D08\x03\x02\x02\x02\u0D0C\u0D0B\x03\x02\x02\x02\u0D0D\u0105\x03\x02" +
		"\x02\x02\u0D0E\u0D0F\x07\xE6\x02\x02\u0D0F\u0D10\x05\u0108\x85\x02\u0D10" +
		"\u0107\x03\x02\x02\x02\u0D11\u0D14\x07+\x02\x02\u0D12\u0D15\x07\u0170" +
		"\x02\x02\u0D13\u0D15\x05\u01DA\xEE\x02\u0D14\u0D12\x03\x02\x02\x02\u0D14" +
		"\u0D13\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D37\t\x19\x02" +
		"\x02";
	private static readonly _serializedATNSegment8: string =
		"\u0D17\u0D18\x07\u0104\x02\x02\u0D18\u0D1D\x05\x16\f\x02\u0D19\u0D1A\x07" +
		"\u0245\x02\x02\u0D1A\u0D1C\x05\x16\f\x02\u0D1B\u0D19\x03\x02\x02\x02\u0D1C" +
		"\u0D1F\x03\x02\x02\x02\u0D1D\u0D1B\x03\x02\x02\x02\u0D1D\u0D1E\x03\x02" +
		"\x02\x02\u0D1E\u0D37\x03\x02\x02\x02\u0D1F\u0D1D\x03\x02\x02\x02\u0D20" +
		"\u0D21\x07\u0104\x02\x02\u0D21\u0D22\x07\xEC\x02\x02\u0D22\u0D37\x07\u0267" +
		"\x02\x02\u0D23\u0D24\x07\xE5\x02\x02\u0D24\u0D25\x07\x1E\x02\x02\u0D25" +
		"\u0D26\x07\u0176\x02\x02\u0D26\u0D27\x07\u0104\x02\x02\u0D27\u0D2C\x05" +
		"\x16\f\x02\u0D28\u0D29\x07\u0245\x02\x02\u0D29\u0D2B\x05\x16\f\x02\u0D2A" +
		"\u0D28\x03\x02\x02\x02\u0D2B\u0D2E\x03\x02\x02\x02\u0D2C\u0D2A\x03\x02" +
		"\x02\x02\u0D2C\u0D2D\x03\x02\x02\x02\u0D2D\u0D37\x03\x02\x02\x02\u0D2E" +
		"\u0D2C\x03\x02\x02\x02\u0D2F\u0D31\t)\x02\x02\u0D30\u0D2F\x03\x02\x02" +
		"\x02\u0D30\u0D31\x03\x02\x02\x02\u0D31\u0D32\x03\x02\x02\x02\u0D32\u0D37" +
		"\x05\u010A\x86\x02\u0D33\u0D34\x07\u0123\x02\x02\u0D34\u0D35\x07\xA3\x02" +
		"\x02\u0D35\u0D37\t*\x02\x02\u0D36\u0D11\x03\x02\x02\x02\u0D36\u0D17\x03" +
		"\x02\x02\x02\u0D36\u0D20\x03\x02\x02\x02\u0D36\u0D23\x03\x02\x02\x02\u0D36" +
		"\u0D30\x03\x02\x02\x02\u0D36\u0D33\x03\x02\x02\x02\u0D37\u0109\x03\x02" +
		"\x02\x02\u0D38\u0D39\x07\xE5\x02\x02\u0D39\u0D3D\x07\u0159\x02\x02\u0D3A" +
		"\u0D3E\x07\u0267\x02\x02\u0D3B\u0D3E\x05\u0210\u0109\x02\u0D3C\u0D3E\x07" +
		"\u0187\x02\x02\u0D3D\u0D3A\x03\x02\x02\x02\u0D3D\u0D3B\x03\x02\x02\x02" +
		"\u0D3D\u0D3C\x03\x02\x02\x02\u0D3E\u0D56\x03\x02\x02\x02\u0D3F\u0D40\x07" +
		"\u0148\x02\x02\u0D40\u0D45\x07\u0126\x02\x02\u0D41\u0D46\x07\u0267\x02" +
		"\x02\u0D42\u0D46\x05\u0152\xAA\x02\u0D43\u0D46\x07\x85\x02\x02\u0D44\u0D46" +
		"\x07\u0187\x02\x02\u0D45\u0D41\x03\x02\x02\x02\u0D45\u0D42\x03\x02\x02" +
		"\x02\u0D45\u0D43\x03\x02\x02\x02\u0D45\u0D44\x03\x02\x02\x02\u0D46\u0D56" +
		"\x03\x02\x02\x02\u0D47\u0D48\x05\u0210\u0109\x02\u0D48\u0D49\x07\u0253" +
		"\x02\x02\u0D49\u0D4B\x03\x02\x02\x02\u0D4A\u0D47\x03\x02\x02\x02\u0D4A" +
		"\u0D4B\x03\x02\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C\u0D4D\x05\u0210" +
		"\u0109\x02\u0D4D\u0D4E\t\x1C\x02\x02\u0D4E\u0D4F\x05\u010C\x87\x02\u0D4F" +
		"\u0D56\x03\x02\x02\x02\u0D50\u0D53\x07\xD3\x02\x02\u0D51\u0D54\x05\u0210" +
		"\u0109\x02\u0D52\u0D54\x07\u013C\x02\x02\u0D53\u0D51\x03\x02\x02\x02\u0D53" +
		"\u0D52\x03\x02\x02\x02\u0D54\u0D56\x03\x02\x02\x02\u0D55\u0D38\x03\x02" +
		"\x02\x02\u0D55\u0D3F\x03\x02\x02\x02\u0D55\u0D4A\x03\x02\x02\x02\u0D55" +
		"\u0D50\x03\x02\x02\x02\u0D56\u010B\x03\x02\x02\x02\u0D57\u0D5C\x05\u0230" +
		"\u0119\x02\u0D58\u0D59\x07\u0245\x02\x02\u0D59\u0D5B\x05\u0230\u0119\x02" +
		"\u0D5A\u0D58\x03\x02\x02\x02\u0D5B\u0D5E\x03\x02\x02\x02\u0D5C\u0D5A\x03" +
		"\x02\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D\u0D61\x03\x02\x02\x02\u0D5E" +
		"\u0D5C\x03\x02\x02\x02\u0D5F\u0D61\x07\u0187\x02\x02\u0D60\u0D57\x03\x02" +
		"\x02\x02\u0D60\u0D5F\x03\x02\x02\x02\u0D61\u010D\x03\x02\x02\x02\u0D62" +
		"\u0D63\x07\u01A5\x02\x02\u0D63\u0D65\x07\xCC\x02\x02\u0D64\u0D62\x03\x02" +
		"\x02\x02\u0D64\u0D65\x03\x02\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66" +
		"\u0D67\x07\xD9\x02\x02\u0D67\u0D68\x05\u0210\u0109\x02\u0D68\u0D69\x07" +
		"\u0176\x02\x02\u0D69\u0D6A\x07\u01A3\x02\x02\u0D6A\u0D6B\t+\x02\x02\u0D6B" +
		"\u0D6C\x07\u01B1\x02\x02\u0D6C\u0D6F\x05\u026A\u0136\x02\u0D6D\u0D6E\x07" +
		"\u01BA\x02\x02\u0D6E\u0D70\x05\u0230\u0119\x02\u0D6F\u0D6D\x03\x02\x02" +
		"\x02\u0D6F\u0D70\x03\x02\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D73" +
		"\x07\u018B\x02\x02\u0D72\u0D74\t,\x02\x02\u0D73\u0D72\x03\x02\x02\x02" +
		"\u0D73\u0D74\x03\x02\x02\x02\u0D74\u0D86\x03\x02\x02\x02\u0D75\u0D87\x07" +
		"\x99\x02\x02\u0D76\u0D87\x05\u0110\x89\x02\u0D77\u0D7D\x07\u024B\x02\x02" +
		"\u0D78\u0D79\x05\u0110\x89\x02\u0D79\u0D7A\x07\u0244\x02\x02\u0D7A\u0D7C" +
		"\x03\x02\x02\x02\u0D7B\u0D78\x03\x02\x02\x02\u0D7C\u0D7F\x03\x02\x02\x02" +
		"\u0D7D\u0D7B\x03\x02\x02\x02\u0D7D\u0D7E\x03\x02\x02\x02\u0D7E\u0D80\x03" +
		"\x02\x02\x02\u0D7F\u0D7D\x03\x02\x02\x02\u0D80\u0D82\x05\u0110\x89\x02" +
		"\u0D81\u0D83\x07\u0244\x02\x02\u0D82\u0D81\x03\x02\x02\x02\u0D82\u0D83" +
		"\x03\x02\x02\x02\u0D83\u0D84\x03\x02\x02\x02\u0D84\u0D85\x07\u024C\x02" +
		"\x02\u0D85\u0D87\x03\x02\x02\x02\u0D86\u0D75\x03\x02\x02\x02\u0D86\u0D76" +
		"\x03\x02\x02\x02\u0D86\u0D77\x03\x02\x02\x02\u0D87\u010F\x03\x02\x02\x02" +
		"\u0D88\u0D8E\x05\u0270\u0139\x02\u0D89\u0D8E\x05\u02A2\u0152\x02\u0D8A" +
		"\u0D8E\x05\u02AE\u0158\x02\u0D8B\u0D8E\x05\u02AC\u0157\x02\u0D8C\u0D8E" +
		"\x05\u02B2\u015A\x02\u0D8D\u0D88\x03\x02\x02\x02\u0D8D\u0D89\x03\x02\x02" +
		"\x02\u0D8D\u0D8A\x03\x02\x02\x02\u0D8D\u0D8B\x03\x02\x02\x02\u0D8D\u0D8C" +
		"\x03\x02\x02\x02\u0D8E\u0111\x03\x02\x02\x02\u0D8F\u0D91\x07\u017F\x02" +
		"\x02\u0D90\u0D8F\x03\x02\x02\x02\u0D90\u0D91\x03\x02\x02\x02\u0D91\u0D92" +
		"\x03\x02\x02\x02\u0D92\u0D93\x07\u0106\x02\x02\u0D93\u0D98\x05\u0210\u0109" +
		"\x02\u0D94\u0D99\x07\x14\x02\x02\u0D95\u0D96\x07y\x02\x02\u0D96\u0D99" +
		"\x07\x9E\x02\x02\u0D97\u0D99\x07\t\x02\x02\u0D98\u0D94\x03\x02\x02\x02" +
		"\u0D98\u0D95\x03\x02\x02\x02\u0D98\u0D97\x03\x02\x02\x02\u0D99\u0DA9\x03" +
		"\x02\x02\x02\u0D9A\u0D9E\x07x\x02\x02\u0D9B\u0D9E\x07>\x02\x02\u0D9C\u0D9E" +
		"\x07\u0107\x02\x02\u0D9D\u0D9A\x03\x02\x02\x02\u0D9D\u0D9B\x03\x02\x02" +
		"\x02\u0D9D\u0D9C\x03\x02\x02\x02\u0D9E\u0DA5\x03\x02\x02\x02\u0D9F\u0DA2" +
		"\x07\u0112\x02\x02\u0DA0\u0DA1\x07\x9E\x02\x02\u0DA1\u0DA3\x05\u02B6\u015C" +
		"\x02\u0DA2\u0DA0\x03\x02\x02\x02\u0DA2\u0DA3\x03\x02\x02\x02\u0DA3\u0DA5" +
		"\x03\x02\x02\x02\u0DA4\u0D9D\x03\x02\x02\x02\u0DA4\u0D9F\x03\x02\x02\x02" +
		"\u0DA5\u0DA7\x03\x02\x02\x02\u0DA6\u0DA8\x07\u01A5\x02\x02\u0DA7\u0DA6" +
		"\x03\x02\x02\x02\u0DA7\u0DA8\x03\x02\x02\x02\u0DA8\u0DAA\x03\x02\x02\x02" +
		"\u0DA9\u0DA4\x03\x02\x02\x02\u0DAA\u0DAB\x03\x02\x02\x02\u0DAB\u0DA9\x03" +
		"\x02\x02\x02\u0DAB\u0DAC\x03\x02\x02\x02\u0DAC\u0DAD\x03\x02\x02\x02\u0DAD" +
		"\u0DAE\x07\u01A3\x02\x02\u0DAE\u0DB1\x05\u026A\u0136\x02\u0DAF\u0DB0\x07" +
		"\u0193\x02\x02\u0DB0\u0DB2\x05\u026A\u0136\x02\u0DB1\u0DAF\x03\x02\x02" +
		"\x02\u0DB1\u0DB2\x03\x02\x02\x02\u0DB2\u0DB4\x03\x02\x02\x02\u0DB3\u0DB5" +
		"\x05d3\x02\u0DB4\u0DB3\x03\x02\x02\x02\u0DB4\u0DB5\x03\x02\x02\x02\u0DB5" +
		"\u0DB7\x03\x02\x02\x02\u0DB6\u0DB8\x05f4\x02\u0DB7\u0DB6\x03\x02\x02\x02" +
		"\u0DB7\u0DB8\x03\x02\x02\x02\u0DB8\u0DBE\x03\x02\x02\x02\u0DB9\u0DBA\x07" +
		"\xC5\x02\x02\u0DBA\u0DBC\x05\u0114\x8B\x02\u0DBB\u0DBD\x05\u0114\x8B\x02" +
		"\u0DBC\u0DBB\x03\x02\x02\x02\u0DBC\u0DBD\x03\x02\x02\x02\u0DBD\u0DBF\x03" +
		"\x02\x02\x02\u0DBE\u0DB9\x03\x02\x02\x02\u0DBE\u0DBF\x03\x02\x02\x02\u0DBF" +
		"\u0DC5\x03\x02\x02\x02\u0DC0\u0DC2\x07\u0191\x02\x02\u0DC1\u0DC3\x07J" +
		"\x02\x02\u0DC2\u0DC1\x03\x02\x02\x02\u0DC2\u0DC3\x03\x02\x02\x02\u0DC3" +
		"\u0DC4\x03\x02\x02\x02\u0DC4\u0DC6\t-\x02\x02\u0DC5\u0DC0\x03\x02\x02" +
		"\x02\u0DC5\u0DC6\x03\x02\x02\x02\u0DC6\u0DC8\x03\x02\x02\x02\u0DC7\u0DC9" +
		"\x05\u0116\x8C\x02\u0DC8\u0DC7\x03\x02\x02\x02\u0DC8\u0DC9\x03\x02\x02" +
		"\x02\u0DC9\u0DCA\x03\x02\x02\x02\u0DCA\u0DCB\x07T\x02\x02\u0DCB\u0DCC" +
		"\t\x12\x02\x02\u0DCC\u0DCD\x05\u0246\u0124\x02\u0DCD\u0113\x03\x02\x02" +
		"\x02\u0DCE\u0DCF\t.\x02\x02\u0DCF\u0DD1\x07\u01AF\x02\x02\u0DD0\u0DD2" +
		"\x07\u0176\x02\x02\u0DD1\u0DD0\x03\x02\x02\x02\u0DD1\u0DD2\x03\x02\x02" +
		"\x02\u0DD2\u0DD3\x03\x02\x02\x02\u0DD3\u0DD4\x05\u0210\u0109\x02\u0DD4" +
		"\u0115\x03\x02\x02\x02\u0DD5\u0DD6\x07\u01B9\x02\x02\u0DD6\u0DD7\x07\u024B" +
		"\x02\x02\u0DD7\u0DD8\x05\u0230\u0119\x02\u0DD8\u0DD9\x07\u024C\x02\x02" +
		"\u0DD9\u0117\x03\x02\x02\x02\u0DDA\u0DE0\x07\u0194\x02\x02\u0DDB\u0DDD" +
		"\x07\xD2\x02\x02\u0DDC\u0DDE\x05t;\x02\u0DDD\u0DDC\x03\x02\x02\x02\u0DDD" +
		"\u0DDE\x03\x02\x02\x02\u0DDE\u0DE0\x03\x02\x02\x02\u0DDF\u0DDA\x03\x02" +
		"\x02\x02\u0DDF\u0DDB\x03\x02\x02\x02\u0DE0\u0DE3\x03\x02\x02\x02\u0DE1" +
		"\u0DE4\x05\u0120\x91\x02\u0DE2\u0DE4\x05\u011C\x8F\x02\u0DE3\u0DE1\x03" +
		"\x02\x02\x02\u0DE3\u0DE2\x03\x02\x02\x02\u0DE4\u0DE5\x03\x02\x02\x02\u0DE5" +
		"\u0DE6\x07\u01A3\x02\x02\u0DE6\u0DE7\x05\u011A\x8E\x02\u0DE7\u0DE8\t/" +
		"\x02\x02\u0DE8\u0DED\x05\u012A\x96\x02\u0DE9\u0DEA\x07\u01BC\x02\x02\u0DEA" +
		"\u0DEB\x07\u0194\x02\x02\u0DEB\u0DEE\x07\xA3\x02\x02\u0DEC\u0DEE\x05\u01F8" +
		"\xFD\x02\u0DED\u0DE9\x03\x02\x02\x02\u0DED\u0DEC\x03\x02\x02\x02\u0DED" +
		"\u0DEE\x03\x02\x02\x02\u0DEE\u0DF1\x03\x02\x02\x02\u0DEF\u0DF1\x05\u0124" +
		"\x93\x02\u0DF0\u0DDF\x03\x02\x02\x02\u0DF0\u0DEF\x03\x02\x02\x02\u0DF1" +
		"\u0119\x03\x02\x02\x02\u0DF2\u0DF4\x07\u01AF\x02\x02\u0DF3\u0DF2\x03\x02" +
		"\x02\x02\u0DF3\u0DF4\x03\x02\x02\x02\u0DF4\u0DF5\x03\x02\x02\x02\u0DF5" +
		"\u0E24\x05\u01DA\xEE\x02\u0DF6\u0DF7\x07\xE1\x02\x02\u0DF7\u0E24\x05\u01DA" +
		"\xEE\x02\u0DF8\u0DF9\x077\x02\x02\u0DF9\u0E24\x05\u01DA\xEE\x02\u0DFA" +
		"\u0DFB\x07G\x02\x02\u0DFB\u0E24\x05\u01DA\xEE\x02\u0DFC\u0DFD\x07\u0192" +
		"\x02\x02\u0DFD\u0DFE\x076\x02\x02\u0DFE\u0DFF\x07\u0121\x02\x02\u0DFF" +
		"\u0E24\x05\u01DA\xEE\x02\u0E00\u0E01\x07\u0192\x02\x02\u0E01\u0E02\x07" +
		"\xE4\x02\x02\u0E02\u0E24\x05\u01DA\xEE\x02\u0E03\u0E04\t0\x02\x02\u0E04" +
		"\u0E09\x05\u0140\xA1\x02\u0E05\u0E06\x07\u0245\x02\x02\u0E06\u0E08\x05" +
		"\u0140\xA1\x02\u0E07\u0E05\x03\x02\x02\x02\u0E08\u0E0B\x03\x02\x02\x02" +
		"\u0E09\u0E07\x03\x02\x02\x02\u0E09\u0E0A\x03\x02\x02\x02\u0E0A\u0E24\x03" +
		"\x02\x02\x02\u0E0B\u0E09\x03\x02\x02\x02\u0E0C\u0E0D\x07\x7F\x02\x02\u0E0D" +
		"\u0E0E\x07\x9D\x02\x02\u0E0E\u0E13\x07\u0262\x02\x02\u0E0F\u0E10\x07\u0245" +
		"\x02\x02\u0E10\u0E12\x07\u0262\x02\x02\u0E11\u0E0F\x03\x02\x02\x02\u0E12" +
		"\u0E15\x03\x02\x02\x02\u0E13\u0E11\x03\x02\x02\x02\u0E13\u0E14\x03\x02" +
		"\x02\x02\u0E14\u0E24\x03\x02\x02\x02\u0E15\u0E13\x03\x02\x02\x02\u0E16" +
		"\u0E17\x07~\x02\x02\u0E17\u0E24\x05\u01DA\xEE\x02\u0E18\u0E19\x07\xDB" +
		"\x02\x02\u0E19\u0E24\x05\u01DA\xEE\x02\u0E1A\u0E1B\x07\xFE\x02\x02\u0E1B" +
		"\u0E24\x05\u01DA\xEE\x02\u0E1C\u0E1D\x07\u0109\x02\x02\u0E1D\u0E24\x05" +
		"\u01DA\xEE\x02\u0E1E\u0E1F\x07\u0170\x02\x02\u0E1F\u0E20\t1\x02\x02\u0E20" +
		"\u0E21\x07\u0197\x02\x02\u0E21\u0E22\x07\xDB\x02\x02\u0E22\u0E24\x05\u01DA" +
		"\xEE\x02\u0E23\u0DF3\x03\x02\x02\x02\u0E23\u0DF6\x03\x02\x02\x02\u0E23" +
		"\u0DF8\x03\x02\x02\x02\u0E23\u0DFA\x03\x02\x02\x02\u0E23\u0DFC\x03\x02" +
		"\x02\x02\u0E23\u0E00\x03\x02\x02\x02\u0E23\u0E03\x03\x02\x02\x02\u0E23" +
		"\u0E0C\x03\x02\x02\x02\u0E23\u0E16\x03\x02\x02\x02\u0E23\u0E18\x03\x02" +
		"\x02\x02\u0E23\u0E1A\x03\x02\x02\x02\u0E23\u0E1C\x03\x02\x02\x02\u0E23" +
		"\u0E1E\x03\x02\x02\x02\u0E24\u011B\x03\x02\x02\x02\u0E25\u0E2A\x05\u011E" +
		"\x90\x02\u0E26\u0E27\x07\u0245\x02\x02\u0E27\u0E29\x05\u011E\x90\x02\u0E28" +
		"\u0E26\x03\x02\x02\x02\u0E29\u0E2C\x03\x02\x02\x02\u0E2A\u0E28\x03\x02" +
		"\x02\x02\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B\u011D\x03\x02\x02\x02\u0E2C" +
		"\u0E2A\x03\x02\x02\x02\u0E2D\u0E2E\x05\u01F2\xFA\x02\u0E2E\u0E2F\x07\u024B" +
		"\x02\x02\u0E2F\u0E30\x05\u02B6\u015C\x02\u0E30\u0E31\x07\u024C\x02\x02" +
		"\u0E31\u011F\x03\x02\x02\x02\u0E32\u0E37\x05\u0122\x92\x02\u0E33\u0E34" +
		"\x07\u0245\x02\x02\u0E34\u0E36\x05\u0122\x92\x02\u0E35\u0E33\x03\x02\x02" +
		"\x02\u0E36\u0E39\x03\x02\x02\x02\u0E37\u0E35\x03\x02\x02\x02\u0E37\u0E38" +
		"\x03\x02\x02\x02\u0E38\u0121\x03\x02\x02\x02\u0E39\u0E37\x03\x02\x02\x02" +
		"\u0E3A\u0E3C\x07\u0170\x02\x02\u0E3B\u0E3D\x07\xB8\x02\x02\u0E3C\u0E3B" +
		"\x03\x02\x02\x02\u0E3C\u0E3D\x03\x02\x02\x02\u0E3D\u0E4B\x03\x02\x02\x02" +
		"\u0E3E\u0E4B\x07\u01C6\x02\x02\u0E3F\u0E4B\x07\u0180\x02\x02\u0E40\u0E4B" +
		"\x07>\x02\x02\u0E41\u0E4B\x07T\x02\x02\u0E42\u0E4B\x07x\x02\x02\u0E43" +
		"\u0E4B\x07\u0112\x02\x02\u0E44\u0E4B\x07\u01A9\x02\x02\u0E45\u0E4B\x07" +
		"\u01AB\x02\x02\u0E46\u0E4B\x07\xFF\x02\x02\u0E47\u0E4B\x07\u0106\x02\x02" +
		"\u0E48\u0E4B\x07\u0107\x02\x02\u0E49\u0E4B\x07\u021D\x02\x02\u0E4A\u0E3A" +
		"\x03\x02\x02\x02\u0E4A\u0E3E\x03\x02\x02\x02\u0E4A\u0E3F\x03\x02\x02\x02" +
		"\u0E4A\u0E40\x03\x02\x02\x02\u0E4A\u0E41\x03\x02\x02\x02\u0E4A\u0E42\x03" +
		"\x02\x02\x02\u0E4A\u0E43\x03\x02\x02\x02\u0E4A\u0E44\x03\x02\x02\x02\u0E4A" +
		"\u0E45\x03\x02\x02\x02\u0E4A\u0E46\x03\x02\x02\x02\u0E4A\u0E47\x03\x02" +
		"\x02\x02\u0E4A\u0E48\x03\x02\x02\x02\u0E4A\u0E49\x03\x02\x02\x02\u0E4B" +
		"\u0123\x03\x02\x02\x02\u0E4C\u0E4D\x07\u0194\x02\x02\u0E4D\u0E4E\x05\u01DA" +
		"\xEE\x02\u0E4E\u0E4F\x07\u01B1\x02\x02\u0E4F\u0E53\x05\u01DA\xEE\x02\u0E50" +
		"\u0E51\x07\u01BC\x02\x02\u0E51\u0E52\x07\b\x02\x02\u0E52\u0E54\x07\xA3" +
		"\x02\x02\u0E53\u0E50\x03\x02\x02\x02\u0E53\u0E54\x03\x02\x02\x02\u0E54" +
		"\u0E62\x03\x02\x02\x02\u0E55\u0E59\x07\xD2\x02\x02\u0E56\u0E57\x07\b\x02" +
		"\x02\u0E57\u0E58\x07\xA3\x02\x02\u0E58\u0E5A\x07\u0191\x02\x02\u0E59\u0E56" +
		"\x03\x02\x02\x02\u0E59\u0E5A\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02\x02\x02" +
		"\u0E5B\u0E5C\x05\u01DA\xEE\x02\u0E5C\u0E5D\x07\u0193\x02\x02\u0E5D\u0E5F" +
		"\x05\u01DA\xEE\x02\u0E5E\u0E60\x05\u01F8\xFD\x02\u0E5F\u0E5E\x03\x02\x02" +
		"\x02\u0E5F\u0E60\x03\x02\x02\x02\u0E60\u0E62\x03\x02\x02\x02\u0E61\u0E4C" +
		"\x03\x02\x02\x02\u0E61\u0E55\x03\x02\x02\x02\u0E62\u0125\x03\x02\x02\x02" +
		"\u0E63\u0E64\x07\u01B1\x02\x02\u0E64\u0E68\x05\u012A\x96\x02\u0E65\u0E66" +
		"\x07\u01BC\x02\x02\u0E66\u0E67\x07\u0194\x02\x02\u0E67\u0E69\x07\xA3\x02" +
		"\x02\u0E68\u0E65\x03\x02\x02\x02\u0E68\u0E69\x03\x02\x02\x02\u0E69\u0127" +
		"\x03\x02\x02\x02\u0E6A\u0E6B\x07\u0193\x02\x02\u0E6B\u0E6D\x05\u012A\x96" +
		"\x02\u0E6C\u0E6E\x05\u01F8\xFD\x02\u0E6D\u0E6C\x03\x02\x02\x02\u0E6D\u0E6E" +
		"\x03\x02\x02\x02\u0E6E\u0129\x03\x02\x02\x02\u0E6F\u0E74\x05\u012C\x97" +
		"\x02\u0E70\u0E71\x07\u0245\x02\x02\u0E71\u0E73\x05\u012C\x97\x02\u0E72" +
		"\u0E70\x03\x02\x02\x02\u0E73\u0E76\x03\x02\x02\x02\u0E74\u0E72\x03\x02" +
		"\x02\x02\u0E74\u0E75\x03\x02\x02\x02\u0E75\u012B\x03\x02\x02\x02\u0E76" +
		"\u0E74\x03\x02\x02\x02\u0E77\u0E79\x07\u0195\x02\x02\u0E78\u0E77\x03\x02" +
		"\x02\x02\u0E78\u0E79\x03\x02\x02\x02\u0E79\u0E7A\x03\x02\x02\x02\u0E7A" +
		"\u0E7B\x05,\x17\x02\u0E7B\u012D\x03\x02\x02\x02\u0E7C\u0E7D\x07$\x02\x02" +
		"\u0E7D\u0E7E\x07\u01A3\x02\x02\u0E7E\u0E7F\x05\u0132\x9A\x02\u0E7F\u0E82" +
		"\x07\u0163\x02\x02\u0E80\u0E83\x05\u0146\xA4\x02\u0E81\u0E83\x07\u01A1" +
		"\x02\x02\u0E82\u0E80\x03\x02\x02\x02\u0E82\u0E81\x03\x02\x02\x02\u0E83" +
		"\u012F\x03\x02\x02\x02\u0E84\u0E85\x07\xE0\x02\x02\u0E85\u0E8B\x07}\x02" +
		"\x02\u0E86\u0E89\x07\u0191\x02\x02\u0E87\u0E8A\x05\u0210\u0109\x02\u0E88" +
		"\u0E8A\x05\u0146\xA4\x02\u0E89\u0E87\x03\x02\x02\x02\u0E89\u0E88\x03\x02" +
		"\x02\x02\u0E8A\u0E8C\x03\x02\x02\x02\u0E8B\u0E86\x03\x02\x02\x02\u0E8B" +
		"\u0E8C\x03\x02\x02\x02\u0E8C\u0E8D\x03\x02\x02\x02\u0E8D\u0E8E\x07\u01A3" +
		"\x02\x02\u0E8E\u0E8F\x05\u0134\x9B\x02\u0E8F\u0E92\x07\u0163\x02\x02\u0E90" +
		"\u0E93\x05\u0146\xA4\x02\u0E91\u0E93\x07\u01A1\x02\x02\u0E92\u0E90\x03" +
		"\x02\x02\x02\u0E92\u0E91\x03\x02\x02\x02\u0E93\u0131\x03\x02\x02\x02\u0E94" +
		"\u0E95\x07\x05\x02\x02\u0E95\u0E96\x07\x8E\x02\x02\u0E96\u0F11\x05\u0210" +
		"\u0109\x02\u0E97\u0E98\t2\x02\x02\u0E98\u0E99\x05\u026A\u0136\x02\u0E99" +
		"\u0E9A\x05\u0142\xA2\x02\u0E9A\u0F11\x03\x02\x02\x02\u0E9B\u0E9C\x07\u017B" +
		"\x02\x02\u0E9C\u0E9D\x07\u024B\x02\x02\u0E9D\u0E9E\x05\u0224\u0113\x02" +
		"\u0E9E\u0E9F\x07\u0176\x02\x02\u0E9F\u0EA0\x05\u0224\u0113\x02\u0EA0\u0EA1" +
		"\x07\u024C\x02\x02\u0EA1\u0F11\x03\x02\x02\x02\u0EA2\u0EA3\x07\u015B\x02" +
		"\x02\u0EA3\u0F11\x05\u0210\u0109\x02\u0EA4\u0EA5\x07\u017E\x02\x02\u0EA5" +
		"\u0F11\x05\u026A\u0136\x02\u0EA6\u0EA7\x07\u017F\x02\x02\u0EA7\u0EA8\x05" +
		"\u0210\u0109\x02\u0EA8\u0EAA\x07\u01A3\x02\x02\u0EA9\u0EAB\x07G\x02\x02" +
		"\u0EAA\u0EA9\x03\x02\x02\x02\u0EAA\u0EAB\x03\x02\x02\x02\u0EAB\u0EAC\x03" +
		"\x02\x02\x02\u0EAC\u0EAD\x05\u026A\u0136\x02\u0EAD\u0F11\x03\x02\x02\x02" +
		"\u0EAE\u0EAF\x07.\x02\x02\u0EAF\u0F11\x05\u026A\u0136\x02\u0EB0\u0EB1" +
		"\x077\x02\x02\u0EB1\u0F11\x05\u0210\u0109\x02\u0EB2\u0EB3\x07G\x02\x02" +
		"\u0EB3\u0F11\x05\u026A\u0136\x02\u0EB4\u0EB5\x07V\x02\x02\u0EB5\u0F11" +
		"\x05\u0210\u0109\x02\u0EB6\u0EB7\x07P\x02\x02\u0EB7\u0EB8\x07\u0106\x02" +
		"\x02\u0EB8\u0F11\x05\u0210\u0109\x02\u0EB9\u0EBA\x07\u0192\x02\x02\u0EBA" +
		"\u0EBB\x076\x02\x02\u0EBB\u0EBC\x07\u0121\x02\x02\u0EBC\u0F11\x05\u0210" +
		"\u0109\x02\u0EBD\u0EBF\x07\u0192\x02\x02\u0EBE\u0EBD\x03\x02\x02\x02\u0EBE" +
		"\u0EBF\x03\x02\x02\x02\u0EBF\u0EC0\x03\x02\x02\x02\u0EC0\u0EC1\x07\u01AF" +
		"\x02\x02\u0EC1\u0F11\x05\u026A\u0136\x02\u0EC2\u0EC3\x07q\x02\x02\u0EC3" +
		"\u0F11\x05\u026A\u0136\x02\u0EC4\u0EC5\x07\x7F\x02\x02\u0EC5\u0EC6\x07" +
		"\x9D\x02\x02\u0EC6\u0F11\x07\u0262\x02\x02\u0EC7\u0EC9\x07\x8C\x02\x02" +
		"\u0EC8\u0EC7\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02\x02\x02\u0EC9\u0ECA\x03" +
		"\x02\x02\x02\u0ECA\u0ECB\x07\u011A\x02\x02\u0ECB\u0F11\x05\u026A\u0136" +
		"\x02\u0ECC\u0ECD\x07\xA2\x02\x02\u0ECD\u0F11\x05\xDCo\x02\u0ECE\u0ECF" +
		"\x07\xA2\x02\x02\u0ECF\u0ED0\t3\x02\x02\u0ED0\u0ED1\x05\u026A\u0136\x02" +
		"\u0ED1\u0ED2\x07\u01B7\x02\x02\u0ED2\u0ED3\x05\u0210\u0109\x02\u0ED3\u0F11" +
		"\x03\x02\x02\x02\u0ED4\u0ED5\x07\xB2\x02\x02\u0ED5\u0ED6\x05\u0210\u0109" +
		"\x02\u0ED6\u0ED7\x07\u01A3\x02\x02\u0ED7\u0ED8\x05\u026A\u0136\x02\u0ED8" +
		"\u0F11\x03\x02\x02\x02\u0ED9\u0EDB\x07\xB9\x02\x02\u0EDA\u0ED9\x03\x02" +
		"\x02\x02\u0EDA\u0EDB\x03\x02\x02\x02\u0EDB\u0EDC\x03\x02\x02\x02\u0EDC" +
		"\u0EDD\x07~\x02\x02\u0EDD\u0F11\x05\u026A\u0136\x02\u0EDE\u0EDF\x07\xBD" +
		"\x02\x02\u0EDF\u0F11\x05\u0210\u0109\x02\u0EE0\u0EE1\x07\xD3\x02\x02\u0EE1" +
		"\u0F11\x05\u0210\u0109\x02\u0EE2\u0EE3\x07\xD9\x02\x02\u0EE3\u0EE4\x05" +
		"\u0210\u0109\x02\u0EE4\u0EE5\x07\u01A3\x02\x02\u0EE5\u0EE6\x05\u026A\u0136" +
		"\x02\u0EE6\u0F11\x03\x02\x02\x02\u0EE7\u0EE8\x07\xDB\x02\x02\u0EE8\u0F11" +
		"\x05\u0210\u0109\x02\u0EE9\u0EEA\x07\xE1\x02\x02\u0EEA\u0F11\x05\u026A" +
		"\u0136\x02\u0EEB\u0EEC\x07\xE4\x02\x02\u0EEC\u0F11\x05\u0210\u0109\x02" +
		"\u0EED\u0EEE\x07\xF2\x02\x02\u0EEE\u0F11\x05\u026A\u0136\x02\u0EEF\u0EF0" +
		"\x07\xF9\x02\x02\u0EF0\u0F11\x05\u0210\u0109\x02\u0EF1\u0EF2\x07\xFE\x02" +
		"\x02\u0EF2\u0F11\x05\u0210\u0109\x02\u0EF3\u0EF4\x07\u0102\x02\x02\u0EF4" +
		"\u0EF5\x07\xDE\x02\x02\u0EF5\u0EF6\x07(\x02\x02\u0EF6\u0F11\x05\u026A" +
		"\u0136\x02\u0EF7\u0EF8\x07\u0102\x02\x02\u0EF8\u0EF9\x07\xDE\x02\x02\u0EF9" +
		"\u0EFA\x07C\x02\x02\u0EFA\u0F11\x05\u026A\u0136\x02\u0EFB\u0EFC\x07\u0102" +
		"\x02\x02\u0EFC\u0EFD\x07\xDE\x02\x02\u0EFD\u0EFE\x07\xAC\x02\x02\u0EFE" +
		"\u0F11\x05\u026A\u0136\x02\u0EFF\u0F00\x07\u0102\x02\x02\u0F00\u0F01\x07" +
		"\xDE\x02\x02\u0F01\u0F02\x07\u0100\x02\x02\u0F02\u0F11\x05\u026A\u0136" +
		"\x02\u0F03\u0F04\x07\u0105\x02\x02\u0F04\u0F05\x07\u0191\x02\x02\u0F05" +
		"\u0F06\x05\u026A\u0136\x02\u0F06\u0F07\x07~\x02\x02\u0F07\u0F08\x05\u0210" +
		"\u0109\x02\u0F08\u0F11\x03\x02\x02\x02\u0F09\u0F0A\x07\u0106\x02\x02\u0F0A" +
		"\u0F0B\x05\u0210\u0109\x02\u0F0B\u0F0C\x07\u01A3\x02\x02\u0F0C\u0F0D\x05" +
		"\u026A\u0136\x02\u0F0D\u0F11\x03\x02\x02\x02\u0F0E\u0F0F\x07\u0109\x02" +
		"\x02\u0F0F\u0F11\x05\u026A\u0136\x02\u0F10\u0E94\x03\x02\x02\x02\u0F10" +
		"\u0E97\x03\x02\x02\x02\u0F10\u0E9B\x03\x02\x02\x02\u0F10\u0EA2\x03\x02" +
		"\x02\x02\u0F10\u0EA4\x03\x02\x02\x02\u0F10\u0EA6\x03\x02\x02\x02\u0F10" +
		"\u0EAE\x03\x02\x02\x02\u0F10\u0EB0\x03\x02\x02\x02\u0F10\u0EB2\x03\x02" +
		"\x02\x02\u0F10\u0EB4\x03\x02\x02\x02\u0F10\u0EB6\x03\x02\x02\x02\u0F10" +
		"\u0EB9\x03\x02\x02\x02\u0F10\u0EBE\x03\x02\x02\x02\u0F10\u0EC2\x03\x02" +
		"\x02\x02\u0F10\u0EC4\x03\x02\x02\x02\u0F10\u0EC8\x03\x02\x02\x02\u0F10" +
		"\u0ECC\x03\x02\x02\x02\u0F10\u0ECE\x03\x02\x02\x02\u0F10\u0ED4\x03\x02" +
		"\x02\x02\u0F10\u0EDA\x03\x02\x02\x02\u0F10\u0EDE\x03\x02\x02\x02\u0F10" +
		"\u0EE0\x03\x02\x02\x02\u0F10\u0EE2\x03\x02\x02\x02\u0F10\u0EE7\x03\x02" +
		"\x02\x02\u0F10\u0EE9\x03\x02\x02\x02\u0F10\u0EEB\x03\x02\x02\x02\u0F10" +
		"\u0EED\x03\x02\x02\x02\u0F10\u0EEF\x03\x02\x02\x02\u0F10\u0EF1\x03\x02" +
		"\x02\x02\u0F10\u0EF3\x03\x02\x02\x02\u0F10\u0EF7\x03\x02\x02\x02\u0F10" +
		"\u0EFB\x03\x02\x02\x02\u0F10\u0EFF\x03\x02\x02\x02\u0F10\u0F03\x03\x02" +
		"\x02\x02\u0F10\u0F09\x03\x02\x02\x02\u0F10\u0F0E\x03\x02\x02\x02\u0F11" +
		"\u0133\x03\x02\x02\x02\u0F12\u0F13\t2\x02\x02\u0F13\u0F14\x05\u026A\u0136" +
		"\x02\u0F14\u0F15\x05\u0142\xA2\x02\u0F15\u0F40\x03\x02\x02\x02\u0F16\u0F17" +
		"\x07\u017E\x02\x02\u0F17\u0F40\x05\u026A\u0136\x02\u0F18\u0F19\x077\x02" +
		"\x02\u0F19\u0F40\x05\u0210\u0109\x02\u0F1A\u0F1B\x07G\x02\x02\u0F1B\u0F40" +
		"\x05\u026A\u0136\x02\u0F1C\u0F1D\x07P\x02\x02\u0F1D\u0F1E\x07\u0106\x02" +
		"\x02\u0F1E\u0F40\x05\u0210\u0109\x02\u0F1F\u0F21\x07\u0192\x02\x02\u0F20" +
		"\u0F1F\x03\x02\x02\x02\u0F20\u0F21\x03\x02\x02\x02\u0F21\u0F22\x03\x02" +
		"\x02\x02\u0F22\u0F23\x07\u01AF\x02\x02\u0F23\u0F40\x05\u026A\u0136\x02" +
		"\u0F24\u0F25\x07\x7F\x02\x02\u0F25\u0F26\x07\x9D\x02\x02\u0F26\u0F40\x07" +
		"\u0262\x02\x02\u0F27\u0F29\x07\x8C\x02\x02\u0F28\u0F27\x03\x02\x02\x02" +
		"\u0F28\u0F29\x03\x02\x02\x02\u0F29\u0F2A\x03\x02\x02\x02\u0F2A\u0F2B\x07" +
		"\u011A\x02\x02\u0F2B\u0F40\x05\u026A\u0136\x02\u0F2C\u0F2E\x07\xB9\x02" +
		"\x02\u0F2D\u0F2C\x03\x02\x02\x02\u0F2D\u0F2E\x03\x02\x02\x02\u0F2E\u0F2F" +
		"\x03\x02\x02\x02\u0F2F\u0F30\x07~\x02\x02\u0F30\u0F40\x05\u026A\u0136" +
		"\x02\u0F31\u0F32\x07\xBD\x02\x02\u0F32\u0F40\x05\u0210\u0109\x02\u0F33" +
		"\u0F34\x07\xD3\x02\x02\u0F34\u0F40\x05\u0210\u0109\x02\u0F35\u0F36\x07" +
		"\xDB\x02\x02\u0F36\u0F40\x05\u0210\u0109\x02\u0F37\u0F38\x07\xE1\x02\x02" +
		"\u0F38\u0F40\x05\u026A\u0136\x02\u0F39\u0F3A\x07\xF9\x02\x02\u0F3A\u0F40" +
		"\x05\u0210\u0109\x02\u0F3B\u0F3C\x07\xFE\x02\x02\u0F3C\u0F40\x05\u0210" +
		"\u0109\x02\u0F3D\u0F3E\x07\u0109\x02\x02\u0F3E\u0F40\x05\u026A\u0136\x02" +
		"\u0F3F\u0F12\x03\x02\x02\x02\u0F3F\u0F16\x03\x02\x02\x02\u0F3F\u0F18\x03" +
		"\x02\x02\x02\u0F3F\u0F1A\x03\x02\x02\x02\u0F3F\u0F1C\x03\x02\x02\x02\u0F3F" +
		"\u0F20\x03\x02\x02\x02\u0F3F\u0F24\x03\x02\x02\x02\u0F3F\u0F28\x03\x02" +
		"\x02\x02\u0F3F\u0F2D\x03\x02\x02\x02\u0F3F\u0F31\x03\x02\x02\x02\u0F3F" +
		"\u0F33\x03\x02\x02\x02\u0F3F\u0F35\x03\x02\x02\x02\u0F3F\u0F37\x03\x02" +
		"\x02\x02\u0F3F\u0F39\x03\x02\x02\x02\u0F3F\u0F3B\x03\x02\x02\x02\u0F3F" +
		"\u0F3D\x03\x02\x02\x02\u0F40\u0135\x03\x02\x02\x02\u0F41\u0F42\x07\u01A5" +
		"\x02\x02\u0F42\u0F44\x07\xCC\x02\x02\u0F43\u0F41\x03\x02\x02\x02\u0F43" +
		"\u0F44\x03\x02\x02\x02\u0F44\u0F45\x03\x02\x02\x02\u0F45\u0F46\t\x12\x02" +
		"\x02\u0F46\u0F4C\x05\u0140\xA1\x02\u0F47\u0F4A\x07\xD1\x02\x02\u0F48\u0F4B" +
		"\x05\u0224\u0113\x02\u0F49\u0F4B\x05\u013C\x9F\x02\u0F4A\u0F48\x03\x02" +
		"\x02\x02\u0F4A\u0F49\x03\x02\x02\x02\u0F4B\u0F4D\x03\x02\x02\x02\u0F4C" +
		"\u0F47\x03\x02\x02\x02\u0F4C\u0F4D\x03\x02\x02\x02\u0F4D\u0F4E\x03\x02" +
		"\x02\x02\u0F4E\u0F4F\x05\u0138\x9D\x02\u0F4F\u0137\x03\x02\x02\x02\u0F50" +
		"\u0F52\x05h5\x02\u0F51\u0F50\x03\x02\x02\x02\u0F52\u0F53\x03\x02\x02\x02" +
		"\u0F53\u0F51\x03\x02\x02\x02\u0F53\u0F54\x03\x02\x02\x02\u0F54\u0F56\x03" +
		"\x02\x02\x02\u0F55\u0F57\x05\u01E2\xF2\x02\u0F56\u0F55\x03\x02\x02\x02" +
		"\u0F56\u0F57\x03\x02\x02\x02\u0F57\u0139\x03\x02\x02\x02\u0F58\u0F59\x07" +
		"\u0191\x02\x02\u0F59\u0F5A\x07\u0109\x02\x02\u0F5A\u0F5B\x05\u0224\u0113" +
		"\x02\u0F5B\u013B\x03\x02\x02\x02\u0F5C\u0F5D\x07\u01AF\x02\x02\u0F5D\u0F5E" +
		"\x07\u024B\x02\x02\u0F5E\u0F63\x05\u013E\xA0\x02\u0F5F\u0F60\x07\u0245" +
		"\x02\x02\u0F60\u0F62\x05\u013E\xA0\x02\u0F61\u0F5F\x03\x02\x02\x02\u0F62" +
		"\u0F65\x03\x02\x02\x02\u0F63\u0F61\x03\x02\x02\x02\u0F63\u0F64\x03\x02" +
		"\x02\x02\u0F64\u0F66\x03\x02\x02\x02\u0F65\u0F63\x03\x02\x02\x02\u0F66" +
		"\u0F67\x07\u024C\x02\x02\u0F67\u013D\x03\x02\x02\x02\u0F68\u0F69\x05\u0210" +
		"\u0109\x02\u0F69\u0F6A\x05\u0224\u0113\x02\u0F6A\u013F\x03\x02\x02\x02" +
		"\u0F6B\u0F6C\x05\u026A\u0136\x02\u0F6C\u0F6D\x05\u0142\xA2\x02\u0F6D\u0141" +
		"\x03\x02\x02\x02\u0F6E\u0F7D\x07\u024B\x02\x02\u0F6F\u0F74\x05\u0148\xA5" +
		"\x02\u0F70\u0F71\x07\u0245\x02\x02\u0F71\u0F73\x05\u0148\xA5\x02\u0F72" +
		"\u0F70\x03\x02\x02\x02\u0F73\u0F76\x03\x02\x02\x02\u0F74\u0F72\x03\x02" +
		"\x02\x02\u0F74\u0F75\x03\x02\x02\x02\u0F75\u0F78\x03\x02\x02\x02\u0F76" +
		"\u0F74\x03\x02\x02\x02\u0F77\u0F6F\x03\x02\x02\x02\u0F77\u0F78\x03\x02" +
		"\x02\x02\u0F78\u0F7A\x03\x02\x02\x02\u0F79\u0F7B\x05\u0144\xA3\x02\u0F7A" +
		"\u0F79\x03\x02\x02\x02\u0F7A\u0F7B\x03\x02\x02\x02\u0F7B\u0F7E\x03\x02" +
		"\x02\x02\u0F7C\u0F7E\x07\u024F\x02\x02\u0F7D\u0F77\x03\x02\x02\x02\u0F7D" +
		"\u0F7C\x03\x02\x02\x02\u0F7E\u0F7F\x03\x02\x02\x02\u0F7F\u0F80\x07\u024C" +
		"\x02\x02\u0F80\u0143\x03\x02\x02\x02\u0F81\u0F82\x07\u01A6\x02\x02\u0F82" +
		"\u0F83\x07\x16\x02\x02\u0F83\u0F88\x05\u0148\xA5\x02\u0F84\u0F85\x07\u0245" +
		"\x02\x02\u0F85\u0F87\x05\u0148\xA5\x02\u0F86\u0F84\x03\x02\x02\x02\u0F87" +
		"\u0F8A\x03\x02\x02\x02\u0F88\u0F86\x03\x02\x02\x02\u0F88\u0F89\x03\x02" +
		"\x02\x02\u0F89\u0145\x03\x02\x02\x02\u0F8A\u0F88\x03\x02\x02\x02\u0F8B" +
		"\u0F8F\x07\u0268\x02\x02\u0F8C\u0F8E\x07\u026F\x02\x02\u0F8D\u0F8C\x03" +
		"\x02\x02\x02\u0F8E\u0F91\x03\x02\x02\x02\u0F8F\u0F8D\x03\x02\x02\x02\u0F8F" +
		"\u0F90\x03\x02\x02\x02\u0F90\u0F92\x03\x02\x02\x02\u0F91\u0F8F\x03\x02" +
		"\x02\x02\u0F92\u0F95\x07\u0270\x02\x02\u0F93\u0F95\x07\u0267\x02\x02\u0F94" +
		"\u0F8B\x03\x02\x02\x02\u0F94\u0F93\x03\x02\x02\x02\u0F95\u0147\x03\x02" +
		"\x02\x02\u0F96\u0F98\x05\u014A\xA6\x02\u0F97\u0F96\x03\x02\x02\x02\u0F97" +
		"\u0F98\x03\x02\x02\x02\u0F98\u0F9A\x03\x02\x02\x02\u0F99\u0F9B\x05\u0212" +
		"\u010A\x02\u0F9A\u0F99\x03\x02\x02\x02\u0F9A\u0F9B\x03\x02\x02\x02\u0F9B" +
		"\u0F9C\x03\x02\x02\x02\u0F9C\u0F9F\x05\u0224\u0113\x02\u0F9D\u0F9E\t4" +
		"\x02\x02\u0F9E\u0FA0\x05\u0230\u0119\x02\u0F9F\u0F9D\x03\x02\x02\x02\u0F9F" +
		"\u0FA0\x03\x02\x02\x02\u0FA0\u0149\x03\x02\x02\x02\u0FA1\u0FA2\t5\x02" +
		"\x02\u0FA2\u014B\x03\x02\x02\x02\u0FA3\u0FA5\t6\x02\x02\u0FA4\u0FA3\x03" +
		"\x02\x02\x02\u0FA4\u0FA5\x03\x02\x02\x02\u0FA5\u0FA6\x03\x02\x02\x02\u0FA6" +
		"\u0FA8\x07\xE1\x02\x02\u0FA7\u0FA9\x05\u019A\xCE\x02\u0FA8\u0FA7\x03\x02" +
		"\x02\x02\u0FA8\u0FA9\x03\x02\x02\x02\u0FA9\u0FAA\x03\x02\x02\x02\u0FAA" +
		"\u0FAE\x05\u026A\u0136\x02\u0FAB\u0FAD\x05\u014E\xA8\x02\u0FAC\u0FAB";
	private static readonly _serializedATNSegment9: string =
		"\x03\x02\x02\x02\u0FAD\u0FB0\x03\x02\x02\x02\u0FAE\u0FAC\x03\x02\x02\x02" +
		"\u0FAE\u0FAF\x03\x02\x02\x02\u0FAF\u014D\x03\x02\x02\x02\u0FB0\u0FAE\x03" +
		"\x02\x02\x02\u0FB1\u0FB2\x07\u0176\x02\x02\u0FB2\u0FD6\t7\x02\x02\u0FB3" +
		"\u0FB4\x07\xE1\x02\x02\u0FB4\u0FB5\x07\x94\x02\x02\u0FB5\u0FD6\x05\u026A" +
		"\u0136\x02\u0FB6\u0FB8\x07p\x02\x02\u0FB7\u0FB9\x07\x16\x02\x02\u0FB8" +
		"\u0FB7\x03\x02\x02\x02\u0FB8\u0FB9\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02" +
		"\x02\x02\u0FBA\u0FD6\x05\u0152\xAA\x02\u0FBB\u0FBC\x07\x90\x02\x02\u0FBC" +
		"\u0FC0\x05\u0152\xAA\x02\u0FBD\u0FBE\x07\x98\x02\x02\u0FBE\u0FC0\x07\x90" +
		"\x02\x02\u0FBF\u0FBB\x03\x02\x02\x02\u0FBF\u0FBD\x03\x02\x02\x02\u0FC0" +
		"\u0FD6\x03\x02\x02\x02\u0FC1\u0FC2\x07\x8D\x02\x02\u0FC2\u0FC6\x05\u0152" +
		"\xAA\x02\u0FC3\u0FC4\x07\x98\x02\x02\u0FC4\u0FC6\x07\x8D\x02\x02\u0FC5" +
		"\u0FC1\x03\x02\x02\x02\u0FC5\u0FC3\x03\x02\x02\x02\u0FC6\u0FD6\x03\x02" +
		"\x02\x02\u0FC7\u0FC9\x07\xF0\x02\x02\u0FC8\u0FCA\x07\u01BC\x02\x02\u0FC9" +
		"\u0FC8\x03\x02\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02\u0FCA\u0FCB\x03\x02" +
		"\x02\x02\u0FCB\u0FD6\x05\u0152\xAA\x02\u0FCC\u0FCD\x07\x17\x02\x02\u0FCD" +
		"\u0FD6\x05\u0152\xAA\x02\u0FCE\u0FD0\x07\x98\x02\x02\u0FCF\u0FCE\x03\x02" +
		"\x02\x02\u0FCF\u0FD0\x03\x02\x02\x02\u0FD0\u0FD1\x03\x02\x02\x02\u0FD1" +
		"\u0FD6\x075\x02\x02\u0FD2\u0FD3\x07\xA9\x02\x02\u0FD3\u0FD4\x07\x16\x02" +
		"\x02\u0FD4\u0FD6\x05\u026A\u0136\x02\u0FD5\u0FB1\x03\x02\x02\x02\u0FD5" +
		"\u0FB3\x03\x02\x02\x02\u0FD5\u0FB6\x03\x02\x02\x02\u0FD5\u0FBF\x03\x02" +
		"\x02\x02\u0FD5\u0FC5\x03\x02\x02\x02\u0FD5\u0FC7\x03\x02\x02\x02\u0FD5" +
		"\u0FCC\x03\x02\x02\x02\u0FD5\u0FCF\x03\x02\x02\x02\u0FD5\u0FD2\x03\x02" +
		"\x02\x02\u0FD6\u014F\x03\x02\x02\x02\u0FD7\u0FD9\x05\u0154\xAB\x02\u0FD8" +
		"\u0FD7\x03\x02\x02\x02\u0FD8\u0FD9\x03\x02\x02\x02\u0FD9\u0FDA\x03\x02" +
		"\x02\x02\u0FDA\u0FDB\x07\u0262\x02\x02\u0FDB\u0151\x03\x02\x02\x02\u0FDC" +
		"\u0FDE\x05\u0154\xAB\x02\u0FDD\u0FDC\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02" +
		"\x02\x02\u0FDE\u0FDF\x03\x02\x02\x02\u0FDF\u0FE0\x05\u023E\u0120\x02\u0FE0" +
		"\u0153\x03\x02\x02\x02\u0FE1\u0FE2\t8\x02\x02\u0FE2\u0155\x03\x02\x02" +
		"\x02\u0FE3\u0FE5\x07\xDB\x02\x02\u0FE4\u0FE6\x05\u019A\xCE\x02\u0FE5\u0FE4" +
		"\x03\x02\x02\x02\u0FE5\u0FE6\x03\x02\x02\x02\u0FE6\u0FE8\x03\x02\x02\x02" +
		"\u0FE7\u0FE9\x05\u0210\u0109\x02\u0FE8\u0FE7\x03\x02\x02\x02\u0FE8\u0FE9" +
		"\x03\x02\x02\x02\u0FE9\u0FEC\x03\x02\x02\x02\u0FEA\u0FEB\x07\u0159\x02" +
		"\x02\u0FEB\u0FED\x05,\x17\x02\u0FEC\u0FEA\x03\x02\x02\x02\u0FEC\u0FED" +
		"\x03\x02\x02\x02\u0FED\u0157\x03\x02\x02\x02\u0FEE\u0FEF\x07\xB2\x02\x02" +
		"\u0FEF\u0FF0\x05\u0210\u0109\x02\u0FF0\u0FF1\x07\u01A3\x02\x02\u0FF1\u0FF4" +
		"\x05\u026A\u0136\x02\u0FF2\u0FF3\x07\u0176\x02\x02\u0FF3\u0FF5\t9\x02" +
		"\x02\u0FF4\u0FF2\x03\x02\x02\x02\u0FF4\u0FF5\x03\x02\x02\x02\u0FF5\u0FF8" +
		"\x03\x02\x02\x02\u0FF6\u0FF7\x07\u0191\x02\x02\u0FF7\u0FF9\t:\x02\x02" +
		"\u0FF8\u0FF6\x03\x02\x02\x02\u0FF8\u0FF9\x03\x02\x02\x02\u0FF9\u1003\x03" +
		"\x02\x02\x02\u0FFA\u0FFB\x07\u01B1\x02\x02\u0FFB\u1000\x05,\x17\x02\u0FFC" +
		"\u0FFD\x07\u0245\x02\x02\u0FFD\u0FFF\x05,\x17\x02\u0FFE\u0FFC\x03\x02" +
		"\x02\x02\u0FFF\u1002\x03\x02\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1000" +
		"\u1001\x03\x02\x02\x02\u1001\u1004\x03\x02\x02\x02\u1002\u1000\x03\x02" +
		"\x02\x02\u1003\u0FFA\x03\x02\x02\x02\u1003\u1004\x03\x02\x02\x02\u1004" +
		"\u1007\x03\x02\x02\x02\u1005\u1006\x07\u01B7\x02\x02\u1006\u1008\x05\u0230" +
		"\u0119\x02\u1007\u1005\x03\x02\x02\x02\u1007\u1008\x03\x02\x02\x02\u1008" +
		"\u100C\x03\x02\x02\x02\u1009\u100A\x07\u01BC\x02\x02\u100A\u100B\x07\u017C" +
		"\x02\x02\u100B\u100D\x05\u0230\u0119\x02\u100C\u1009\x03\x02\x02\x02\u100C" +
		"\u100D\x03\x02\x02\x02\u100D\u0159\x03\x02\x02\x02\u100E\u100F\x07\xB2" +
		"\x02\x02\u100F\u1010\x05\u0210\u0109\x02\u1010\u1011\x07\u01A3\x02\x02" +
		"\u1011\u1012\x05\u026A\u0136\x02\u1012\u1013\x05\u01EE\xF8\x02\u1013\u102D" +
		"\x03\x02\x02\x02\u1014\u1015\x07\xB2\x02\x02\u1015\u1016\x05\u0210\u0109" +
		"\x02\u1016\u1017\x07\u01A3\x02\x02\u1017\u1021\x05\u026A\u0136\x02\u1018" +
		"\u1019\x07\u01B1\x02\x02\u1019\u101E\x05,\x17\x02\u101A\u101B\x07\u0245" +
		"\x02\x02\u101B\u101D\x05,\x17\x02\u101C\u101A\x03\x02\x02\x02\u101D\u1020" +
		"\x03\x02\x02\x02\u101E\u101C\x03\x02\x02\x02\u101E\u101F\x03\x02\x02\x02" +
		"\u101F\u1022\x03\x02\x02\x02\u1020\u101E\x03\x02\x02\x02\u1021\u1018\x03" +
		"\x02\x02\x02\u1021\u1022\x03\x02\x02\x02\u1022\u1025\x03\x02\x02\x02\u1023" +
		"\u1024\x07\u01B7\x02\x02\u1024\u1026\x05\u0230\u0119\x02\u1025\u1023\x03" +
		"\x02\x02\x02\u1025\u1026\x03\x02\x02\x02\u1026\u102A\x03\x02\x02\x02\u1027" +
		"\u1028\x07\u01BC\x02\x02\u1028\u1029\x07\u017C\x02\x02\u1029\u102B\x05" +
		"\u0230\u0119\x02\u102A\u1027\x03\x02\x02\x02\u102A\u102B\x03\x02\x02\x02" +
		"\u102B\u102D\x03\x02\x02\x02\u102C\u100E\x03\x02\x02\x02\u102C\u1014\x03" +
		"\x02\x02\x02\u102D\u015B\x03\x02\x02\x02\u102E\u1030\x07\xB2\x02\x02\u102F" +
		"\u1031\x05\u0198\xCD\x02\u1030\u102F\x03\x02\x02\x02\u1030\u1031\x03\x02" +
		"\x02\x02\u1031\u1032\x03\x02\x02\x02\u1032\u1033\x05\u0210\u0109\x02\u1033" +
		"\u1034\x07\u01A3\x02\x02\u1034\u1036\x05\u026A\u0136\x02\u1035\u1037\x05" +
		"\u01F8\xFD\x02\u1036\u1035\x03\x02\x02\x02\u1036\u1037\x03\x02\x02\x02" +
		"\u1037\u015D\x03\x02\x02\x02\u1038\u1039\x07\xF9\x02\x02\u1039\u103A\x05" +
		"\u0210\u0109\x02\u103A\u103B\x07*\x02\x02\u103B\u103C\x07\u0267\x02\x02" +
		"\u103C\u103D\x07\xBD\x02\x02\u103D\u103F\x05\u02B6\u015C\x02\u103E\u1040" +
		"\x05\u01E2\xF2\x02\u103F\u103E\x03\x02\x02\x02\u103F\u1040\x03\x02\x02" +
		"\x02\u1040\u015F\x03\x02\x02\x02\u1041\u1042\x07\xF9\x02\x02\u1042\u1043" +
		"\x05\u0210\u0109\x02\u1043\u1044\x05\u0162\xB2\x02\u1044\u0161\x03\x02" +
		"\x02\x02\u1045\u1046\x07*\x02\x02\u1046\u1059\x05\u0146\xA4\x02\u1047" +
		"\u1048\x07\xE6\x02\x02\u1048\u1049\x07\xBD\x02\x02\u1049\u104B\x05\u02B6" +
		"\u015C\x02\u104A\u104C\x05\u01E2\xF2\x02\u104B\u104A\x03\x02\x02\x02\u104B" +
		"\u104C\x03\x02\x02\x02\u104C\u1059\x03\x02\x02\x02\u104D\u104E\x07\xC6" +
		"\x02\x02\u104E\u1050\x07\xBD\x02\x02\u104F\u1051\x05\u01E2\xF2\x02\u1050" +
		"\u104F\x03\x02\x02\x02\u1050\u1051\x03\x02\x02\x02\u1051\u1059\x03\x02" +
		"\x02\x02\u1052\u1059\x07K\x02\x02\u1053\u1059\x07D\x02\x02\u1054\u1055" +
		"\x07\xE6\x02\x02\u1055\u1059\x05\u01DC\xEF\x02\u1056\u1059\x05\u01EC\xF7" +
		"\x02\u1057\u1059\x05\u01EE\xF8\x02\u1058\u1045\x03\x02\x02\x02\u1058\u1047" +
		"\x03\x02\x02\x02\u1058\u104D\x03\x02\x02\x02\u1058\u1052\x03\x02\x02\x02" +
		"\u1058\u1053\x03\x02\x02\x02\u1058\u1054\x03\x02\x02\x02\u1058\u1056\x03" +
		"\x02\x02\x02\u1058\u1057\x03\x02\x02\x02\u1059\u0163\x03\x02\x02\x02\u105A" +
		"\u105B\x07\u017B\x02\x02\u105B\u105C\x07\u024B\x02\x02\u105C\u105D\x05" +
		"\u0224\u0113\x02\u105D\u105E\x07\u0176\x02\x02\u105E\u105F\x05\u0224\u0113" +
		"\x02\u105F\u1069\x07\u024C\x02\x02\u1060\u1061\x07\u01BC\x02\x02\u1061" +
		"\u1062\x07^\x02\x02\u1062\u1063\x05\u026A\u0136\x02\u1063\u1064\x05\u0142" +
		"\xA2\x02\u1064\u106A\x03\x02\x02\x02\u1065\u1066\x07\u011F\x02\x02\u1066" +
		"\u106A\x07^\x02\x02\u1067\u1068\x07\u01BC\x02\x02\u1068\u106A\x07\u0135" +
		"\x02\x02\u1069\u1060\x03\x02\x02\x02\u1069\u1065\x03\x02\x02\x02\u1069" +
		"\u1067\x03\x02\x02\x02\u106A\u106F\x03\x02\x02\x02\u106B\u106C\x07\u0176" +
		"\x02\x02\u106C\u1070\x07\x0F\x02\x02\u106D\u106E\x07\u0176\x02\x02\u106E" +
		"\u1070\x07l\x02\x02\u106F\u106B\x03\x02\x02\x02\u106F\u106D\x03\x02\x02" +
		"\x02\u106F\u1070\x03\x02\x02\x02\u1070\u0165\x03\x02\x02\x02\u1071\u1073" +
		"\x07\u017B\x02\x02\u1072\u1074\x05\u0198\xCD\x02\u1073\u1072\x03\x02\x02" +
		"\x02\u1073\u1074\x03\x02\x02\x02\u1074\u1075\x03\x02\x02\x02\u1075\u1076" +
		"\x07\u024B\x02\x02\u1076\u1077\x05\u0224\u0113\x02\u1077\u1078\x07\u0176" +
		"\x02\x02\u1078\u1079\x05\u0224\u0113\x02\u1079\u107B\x07\u024C\x02\x02" +
		"\u107A\u107C\x05\u01F8\xFD\x02\u107B\u107A\x03\x02\x02\x02\u107B\u107C" +
		"\x03\x02\x02\x02\u107C\u0167\x03\x02\x02\x02\u107D\u107E\x07\xA2\x02\x02" +
		"\u107E\u107F\x07X\x02\x02\u107F\u1080\x05\u026A\u0136\x02\u1080\u1081" +
		"\x07\u01B7\x02\x02\u1081\u1082\x05\u0210\u0109\x02\u1082\u0169\x03\x02" +
		"\x02\x02\u1083\u1084\x07\xA2\x02\x02\u1084\u1085\x07X\x02\x02\u1085\u1086" +
		"\x05\u026A\u0136\x02\u1086\u1087\x07\u01B7\x02\x02\u1087\u1088\x05\u0210" +
		"\u0109\x02\u1088\u1089\x05\u016C\xB7\x02\u1089\u016B\x03\x02\x02\x02\u108A" +
		"\u10A0\x05\u01EE\xF8\x02\u108B\u10A0\x05\u01EC\xF7\x02\u108C\u10A0\x05" +
		"\u01F0\xF9\x02\u108D\u108E\x07\x07\x02\x02\u108E\u1093\x05\u016E\xB8\x02" +
		"\u108F\u1090\x07\u0245\x02\x02\u1090\u1092\x05\u016E\xB8\x02\u1091\u108F" +
		"\x03\x02\x02\x02\u1092\u1095\x03\x02\x02\x02\u1093\u1091\x03\x02\x02\x02" +
		"\u1093\u1094\x03\x02\x02\x02\u1094\u10A0\x03\x02\x02\x02\u1095\u1093\x03" +
		"\x02\x02\x02\u1096\u1097\x07I\x02\x02\u1097\u109C\x05\u0170\xB9\x02\u1098" +
		"\u1099\x07\u0245\x02\x02\u1099\u109B\x05\u0170\xB9\x02\u109A\u1098\x03" +
		"\x02\x02\x02\u109B\u109E\x03\x02\x02\x02\u109C\u109A\x03\x02\x02\x02\u109C" +
		"\u109D\x03\x02\x02\x02\u109D\u10A0\x03\x02\x02\x02\u109E\u109C\x03\x02" +
		"\x02\x02\u109F\u108A\x03\x02\x02\x02\u109F\u108B\x03\x02\x02\x02\u109F" +
		"\u108C\x03\x02\x02\x02\u109F\u108D\x03\x02\x02\x02\u109F\u1096\x03\x02" +
		"\x02\x02\u10A0\u016D\x03\x02\x02\x02\u10A1\u10A2\x07\xA2\x02\x02\u10A2" +
		"\u10A3\x05\u023E\u0120\x02\u10A3\u10AA\x05\xDCo\x02\u10A4\u10A5\x07\u0191" +
		"\x02\x02\u10A5\u10AB\x07\xDE\x02\x02\u10A6\u10A7\x07\u0191\x02\x02\u10A7" +
		"\u10A8\x07\u01A6\x02\x02\u10A8\u10A9\x07\x16\x02\x02\u10A9\u10AB\x05\u026A" +
		"\u0136\x02\u10AA\u10A4\x03\x02\x02\x02\u10AA\u10A6\x03\x02\x02\x02\u10AA" +
		"\u10AB\x03\x02\x02\x02\u10AB\u10C0\x03\x02\x02\x02\u10AC\u10AD\x07^\x02" +
		"\x02\u10AD\u10BB\x05\u023E\u0120\x02\u10AE\u10B1\x07\u024B\x02\x02\u10AF" +
		"\u10B2\x05\u0224\u0113\x02\u10B0\u10B2\x07\u013C\x02\x02\u10B1\u10AF\x03" +
		"\x02\x02\x02\u10B1\u10B0\x03\x02\x02\x02\u10B2\u10B8\x03\x02\x02\x02\u10B3" +
		"\u10B6\x07\u0245\x02\x02\u10B4\u10B7\x05\u0224\u0113\x02\u10B5\u10B7\x07" +
		"\u013C\x02\x02\u10B6\u10B4\x03\x02\x02\x02\u10B6\u10B5\x03\x02\x02\x02" +
		"\u10B7\u10B9\x03\x02\x02\x02\u10B8\u10B3\x03\x02\x02\x02\u10B8\u10B9\x03" +
		"\x02\x02\x02\u10B9\u10BA\x03\x02\x02\x02\u10BA\u10BC\x07\u024C\x02\x02" +
		"\u10BB\u10AE\x03\x02\x02\x02\u10BB\u10BC\x03\x02\x02\x02\u10BC\u10BD\x03" +
		"\x02\x02\x02\u10BD\u10BE\x05\u0246\u0124\x02\u10BE\u10C0\x03\x02\x02\x02" +
		"\u10BF\u10A1\x03\x02\x02\x02\u10BF\u10AC\x03\x02\x02\x02\u10C0\u016F\x03" +
		"\x02\x02\x02\u10C1\u10C2\t;\x02\x02\u10C2\u10C3\x05\u023E\u0120\x02\u10C3" +
		"\u10C6\x07\u024B\x02\x02\u10C4\u10C7\x05\u0224\u0113\x02\u10C5\u10C7\x07" +
		"\u013C\x02\x02\u10C6\u10C4\x03\x02\x02\x02\u10C6\u10C5\x03\x02\x02\x02" +
		"\u10C7\u10CD\x03\x02\x02\x02\u10C8\u10CB\x07\u0245\x02\x02\u10C9\u10CC" +
		"\x05\u0224\u0113\x02\u10CA\u10CC\x07\u013C\x02\x02\u10CB\u10C9\x03\x02" +
		"\x02\x02\u10CB\u10CA\x03\x02\x02\x02\u10CC\u10CE\x03\x02\x02\x02\u10CD" +
		"\u10C8\x03\x02\x02\x02\u10CD\u10CE\x03\x02\x02\x02\u10CE\u10CF\x03\x02" +
		"\x02\x02\u10CF\u10D0\x07\u024C\x02\x02\u10D0\u0171\x03\x02\x02\x02\u10D1" +
		"\u10D2\x07\xA2\x02\x02\u10D2\u10D4\x07X\x02\x02\u10D3\u10D5\x05\u0198" +
		"\xCD\x02\u10D4\u10D3\x03\x02\x02\x02\u10D4\u10D5\x03\x02\x02\x02\u10D5" +
		"\u10D6\x03\x02\x02\x02\u10D6\u10D7\x05\u026A\u0136\x02\u10D7\u10D8\x07" +
		"\u01B7\x02\x02\u10D8\u10DA\x05\u0210\u0109\x02\u10D9\u10DB\x05\u01F8\xFD" +
		"\x02\u10DA\u10D9\x03\x02\x02\x02\u10DA\u10DB\x03\x02\x02\x02\u10DB\u0173" +
		"\x03\x02\x02\x02\u10DC\u10DD\x07\xA2\x02\x02\u10DD\u10DE\x07 \x02\x02" +
		"\u10DE\u10E0\x05\u026A\u0136\x02\u10DF\u10E1\x07\u0187\x02\x02\u10E0\u10DF" +
		"\x03\x02\x02\x02\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10E2\x03\x02\x02\x02" +
		"\u10E2\u10E3\x07\u0191\x02\x02\u10E3\u10E4\x07\u0109\x02\x02\u10E4\u10E5" +
		"\x05\u0224\u0113\x02\u10E5\u10E6\x07\u01B7\x02\x02\u10E6\u10E9\x05\u0210" +
		"\u0109\x02\u10E7\u10E8\x07X\x02\x02\u10E8\u10EA\x05\u026A\u0136\x02\u10E9" +
		"\u10E7\x03\x02\x02\x02\u10E9\u10EA\x03\x02\x02\x02\u10EA\u10EB\x03\x02" +
		"\x02\x02\u10EB\u10EC\x07\u0176\x02\x02\u10EC\u10F1\x05\u0176\xBC\x02\u10ED" +
		"\u10EE\x07\u0245\x02\x02\u10EE\u10F0\x05\u0176\xBC\x02\u10EF\u10ED\x03" +
		"\x02\x02\x02\u10F0\u10F3\x03\x02\x02\x02\u10F1\u10EF\x03\x02\x02\x02\u10F1" +
		"\u10F2\x03\x02\x02\x02\u10F2\u0175\x03\x02\x02\x02\u10F3\u10F1\x03\x02" +
		"\x02\x02\u10F4\u10F5\x07\xA2\x02\x02\u10F5\u10F6\x05\u023E\u0120\x02\u10F6" +
		"\u1102\x05\xFE\x80\x02\u10F7\u10FA\x07\u024B\x02\x02\u10F8\u10FB\x05\u0224" +
		"\u0113\x02\u10F9\u10FB\x07\u013C\x02\x02\u10FA\u10F8\x03\x02\x02\x02\u10FA" +
		"\u10F9\x03\x02\x02\x02\u10FB\u10FC\x03\x02\x02\x02\u10FC\u10FF\x07\u0245" +
		"\x02\x02\u10FD\u1100\x05\u0224\u0113\x02\u10FE\u1100\x07\u013C\x02\x02" +
		"\u10FF\u10FD\x03\x02\x02\x02\u10FF\u10FE\x03\x02\x02\x02\u1100\u1101\x03" +
		"\x02\x02\x02\u1101\u1103\x07\u024C\x02\x02\u1102\u10F7\x03\x02\x02\x02" +
		"\u1102\u1103\x03\x02\x02\x02\u1103\u110A\x03\x02\x02\x02\u1104\u1105\x07" +
		"\u0191\x02\x02\u1105\u110B\x07\xDE\x02\x02\u1106\u1107\x07\u0191\x02\x02" +
		"\u1107\u1108\x07\u01A6\x02\x02\u1108\u1109\x07\x16\x02\x02\u1109\u110B" +
		"\x05\u026A\u0136\x02\u110A\u1104\x03\x02\x02\x02\u110A\u1106\x03\x02\x02" +
		"\x02\u110A\u110B\x03\x02\x02\x02\u110B\u1122\x03\x02\x02\x02\u110C\u110D" +
		"\x07^\x02\x02\u110D\u111B\x05\u023E\u0120\x02\u110E\u1111\x07\u024B\x02" +
		"\x02\u110F\u1112\x05\u0224\u0113\x02\u1110\u1112\x07\u013C\x02\x02\u1111" +
		"\u110F\x03\x02\x02\x02\u1111\u1110\x03\x02\x02\x02\u1112\u1118\x03\x02" +
		"\x02\x02\u1113\u1116\x07\u0245\x02\x02\u1114\u1117\x05\u0224\u0113\x02" +
		"\u1115\u1117\x07\u013C\x02\x02\u1116\u1114\x03\x02\x02\x02\u1116\u1115" +
		"\x03\x02\x02\x02\u1117\u1119\x03\x02\x02\x02\u1118\u1113\x03\x02\x02\x02" +
		"\u1118\u1119\x03\x02\x02\x02\u1119\u111A\x03\x02\x02\x02\u111A\u111C\x07" +
		"\u024C\x02\x02\u111B\u110E\x03\x02\x02\x02\u111B\u111C\x03\x02\x02\x02" +
		"\u111C\u111D\x03\x02\x02\x02\u111D\u111E\x05\u0246\u0124\x02\u111E\u1122" +
		"\x03\x02\x02\x02\u111F\u1120\x07\xF5\x02\x02\u1120\u1122\x05\u0224\u0113" +
		"\x02\u1121\u10F4\x03\x02\x02\x02\u1121\u110C\x03\x02\x02\x02\u1121\u111F" +
		"\x03\x02\x02\x02\u1122\u0177\x03\x02\x02\x02\u1123\u1124\x07\xA2\x02\x02" +
		"\u1124\u1125\x07 \x02\x02\u1125\u1126\x05\u026A\u0136\x02\u1126\u1127" +
		"\x07\u01B7\x02\x02\u1127\u112B\x05\u0210\u0109\x02\u1128\u112C\x05\u01EE" +
		"\xF8\x02\u1129\u112C\x05\u01EC\xF7\x02\u112A\u112C\x05\u01F0\xF9\x02\u112B" +
		"\u1128\x03\x02\x02\x02\u112B\u1129\x03\x02\x02\x02\u112B\u112A\x03\x02" +
		"\x02\x02\u112C\u0179\x03\x02\x02\x02\u112D\u112E\x07\xA2\x02\x02\u112E" +
		"\u1130\x07 \x02\x02\u112F\u1131\x05\u0198\xCD\x02\u1130\u112F\x03\x02" +
		"\x02\x02\u1130\u1131\x03\x02\x02\x02\u1131\u1132\x03\x02\x02\x02\u1132" +
		"\u1133\x05\u026A\u0136\x02\u1133\u1134\x07\u01B7\x02\x02\u1134\u1136\x05" +
		"\u0210\u0109\x02\u1135\u1137\x05\u01F8\xFD\x02\u1136\u1135\x03\x02\x02" +
		"\x02\u1136\u1137\x03\x02\x02\x02\u1137\u017B\x03\x02\x02\x02\u1138\u113A" +
		"\x07\u0187\x02\x02\u1139\u1138\x03\x02\x02\x02\u1139\u113A\x03\x02\x02" +
		"\x02\u113A\u113B\x03\x02\x02\x02\u113B\u113C\x07.\x02\x02\u113C\u113D" +
		"\x05\u026A\u0136\x02\u113D\u113E\x07\u0191\x02\x02\u113E\u113F\x07\u0267" +
		"\x02\x02\u113F\u1140\x07\u01B1\x02\x02\u1140\u1141\x07\u0267\x02\x02\u1141" +
		"\u1142\x07\u0193\x02\x02\u1142\u1143\x05\u026A\u0136\x02\u1143\u017D\x03" +
		"\x02\x02\x02\u1144\u1145\x07.\x02\x02\u1145\u1149\x05\u026A\u0136\x02" +
		"\u1146\u114A\x05\u01EE\xF8\x02\u1147\u114A\x05\u01EC\xF7\x02\u1148\u114A" +
		"\x05\u01F0\xF9\x02\u1149\u1146\x03\x02\x02\x02\u1149\u1147\x03\x02\x02" +
		"\x02\u1149\u1148\x03\x02\x02\x02\u114A\u017F\x03\x02\x02\x02\u114B\u114C" +
		"\x07\xBD\x02\x02\u114C\u115A\x05\u0210\u0109\x02\u114D\u114E\x07\u0191" +
		"\x02\x02\u114E\u114F\x07\u01AF\x02\x02\u114F\u1154\x05\u0186\xC4\x02\u1150" +
		"\u1151\x07\u0245\x02\x02\u1151\u1153\x05\u0186\xC4\x02\u1152\u1150\x03" +
		"\x02\x02\x02\u1153\u1156\x03\x02\x02\x02\u1154\u1152\x03\x02\x02\x02\u1154" +
		"\u1155\x03\x02\x02\x02\u1155\u115B\x03\x02\x02\x02\u1156\u1154\x03\x02" +
		"\x02\x02\u1157\u1158\x07\u0191\x02\x02\u1158\u1159\x07\u0170\x02\x02\u1159" +
		"\u115B\x07\xFD\x02\x02\u115A\u114D\x03\x02\x02\x02\u115A\u1157\x03\x02" +
		"\x02\x02\u115A\u115B\x03\x02\x02\x02\u115B\u115D\x03\x02\x02\x02\u115C" +
		"\u115E\x05\u01E2\xF2\x02\u115D\u115C\x03\x02\x02\x02\u115D\u115E\x03\x02" +
		"\x02\x02\u115E\u0181\x03\x02\x02\x02\u115F\u1160\x07\xBD\x02\x02\u1160" +
		"\u1161\x05\u0210\u0109\x02\u1161\u1162\x05\u0184\xC3\x02\u1162\u0183\x03" +
		"\x02\x02\x02\u1163\u1172\x05\u01EE\xF8\x02\u1164\u1172\x05\u01EC\xF7\x02" +
		"\u1165\u1166\x07\xE6\x02\x02\u1166\u1172\x05\u01DC\xEF\x02\u1167\u1168" +
		"\t<\x02\x02\u1168\u1169\x07\u01AF\x02\x02\u1169\u116E\x05\u0186\xC4\x02" +
		"\u116A\u116B\x07\u0245\x02\x02\u116B\u116D\x05\u0186\xC4\x02\u116C\u116A" +
		"\x03\x02\x02\x02\u116D\u1170\x03\x02\x02\x02\u116E\u116C\x03\x02\x02\x02" +
		"\u116E\u116F\x03\x02\x02\x02\u116F\u1172\x03\x02\x02\x02\u1170\u116E\x03" +
		"\x02\x02\x02\u1171\u1163\x03\x02\x02\x02\u1171\u1164\x03\x02\x02\x02\u1171" +
		"\u1165\x03\x02\x02\x02\u1171\u1167\x03\x02\x02\x02\u1172\u0185\x03\x02" +
		"\x02\x02\u1173\u1175\x07\u01A4\x02\x02\u1174\u1173\x03\x02\x02\x02\u1174" +
		"\u1175\x03\x02\x02\x02\u1175\u1176\x03\x02\x02\x02\u1176\u1178\x05\u026A" +
		"\u0136\x02\u1177\u1179\x07\u024F\x02\x02\u1178\u1177\x03\x02\x02\x02\u1178" +
		"\u1179\x03\x02\x02\x02\u1179\u0187\x03\x02\x02\x02\u117A\u117B\x07\u0106" +
		"\x02\x02\u117B\u117C\x05\u0210\u0109\x02\u117C\u117D\x07\u01A3\x02\x02" +
		"\u117D\u1183\x05\u026A\u0136\x02\u117E\u1184\x05\u01EE\xF8\x02\u117F\u1180" +
		"\x07A\x02\x02\u1180\u1181\x07\u01A3\x02\x02\u1181\u1182\x07V\x02\x02\u1182" +
		"\u1184\x05\u0210\u0109\x02\u1183\u117E\x03\x02\x02\x02\u1183\u117F\x03" +
		"\x02\x02\x02\u1184\u0189\x03\x02\x02\x02\u1185\u1186\x07\xD9\x02\x02\u1186" +
		"\u1187\x05\u0210\u0109\x02\u1187\u1188\x07\u01A3\x02\x02\u1188\u1189\x05" +
		"\u026A\u0136\x02\u1189\u118A\x05\u01EE\xF8\x02\u118A\u018B\x03\x02\x02" +
		"\x02\u118B\u118E\x05\u0190\xC9\x02\u118C\u118E\x05\u018E\xC8\x02\u118D" +
		"\u118B\x03\x02\x02\x02\u118D\u118C\x03\x02\x02\x02\u118E\u018D\x03\x02" +
		"\x02\x02\u118F\u1190\x07/\x02\x02\u1190\u1191\x050\x19\x02\u1191\u1197" +
		"\x07\u0193\x02\x02\u1192\u1194\x07\xBC\x02\x02\u1193\u1192\x03\x02\x02" +
		"\x02\u1193\u1194\x03\x02\x02\x02\u1194\u1195\x03\x02\x02\x02\u1195\u1198" +
		"\x07\u0267\x02\x02\u1196\u1198\x07\xF3\x02\x02\u1197\u1193\x03\x02\x02" +
		"\x02\u1197\u1196\x03\x02\x02\x02\u1198\u11A3\x03\x02\x02\x02\u1199\u119B" +
		"\x07\u01BC\x02\x02\u119A\u1199\x03\x02\x02\x02\u119A\u119B\x03\x02\x02" +
		"\x02\u119B\u11A1\x03\x02\x02\x02\u119C\u119D\x07\u024B\x02\x02\u119D\u119E" +
		"\x05\u0192\xCA\x02\u119E\u119F\x07\u024C\x02\x02\u119F\u11A2\x03\x02\x02" +
		"\x02\u11A0\u11A2\x05\u0192\xCA\x02\u11A1\u119C\x03\x02\x02\x02\u11A1\u11A0" +
		"\x03\x02\x02\x02\u11A2\u11A4\x03\x02\x02\x02\u11A3\u119A\x03\x02\x02\x02" +
		"\u11A3\u11A4\x03\x02\x02\x02\u11A4\u11A7\x03\x02\x02\x02\u11A5\u11A6\x07" +
		"\u01BA\x02\x02\u11A6\u11A8\x05\u0230\u0119\x02\u11A7\u11A5\x03\x02\x02" +
		"\x02\u11A7\u11A8\x03\x02\x02\x02\u11A8\u018F\x03\x02\x02\x02\u11A9\u11AF" +
		"\x07/\x02\x02\u11AA\u11B0\x050\x19\x02\u11AB\u11AC\x07\u024B\x02\x02\u11AC" +
		"\u11AD\x05\x10\t\x02\u11AD\u11AE\x07\u024C\x02\x02\u11AE\u11B0\x03\x02" +
		"\x02\x02\u11AF\u11AA\x03\x02\x02\x02\u11AF\u11AB\x03\x02\x02\x02\u11B0" +
		"\u11B1\x03\x02\x02\x02\u11B1\u11B7\x07\u01B1\x02\x02\u11B2\u11B4\x07\xBC" +
		"\x02\x02\u11B3\u11B2\x03\x02\x02\x02\u11B3\u11B4\x03\x02\x02\x02\u11B4" +
		"\u11B5\x03\x02\x02\x02\u11B5\u11B8\x07\u0267\x02\x02\u11B6\u11B8\x07\xF4" +
		"\x02\x02\u11B7\u11B3\x03\x02\x02\x02\u11B7\u11B6\x03\x02\x02\x02\u11B8" +
		"\u11C3\x03\x02\x02\x02\u11B9\u11BB\x07\u01BC\x02\x02\u11BA\u11B9\x03\x02" +
		"\x02\x02\u11BA\u11BB\x03\x02\x02\x02\u11BB\u11C1\x03\x02\x02\x02\u11BC" +
		"\u11BD\x07\u024B\x02\x02\u11BD\u11BE\x05\u0192\xCA\x02\u11BE\u11BF\x07" +
		"\u024C\x02\x02\u11BF\u11C2\x03\x02\x02\x02\u11C0\u11C2\x05\u0192\xCA\x02" +
		"\u11C1\u11BC\x03\x02\x02\x02\u11C1\u11C0\x03\x02\x02\x02\u11C2\u11C4\x03" +
		"\x02\x02\x02\u11C3\u11BA\x03\x02\x02\x02\u11C3\u11C4\x03\x02\x02\x02\u11C4" +
		"\u0191\x03\x02\x02\x02\u11C5\u11CC\x05\u0194\xCB\x02\u11C6\u11C8\x07\u0245" +
		"\x02\x02\u11C7\u11C6\x03\x02\x02\x02\u11C7\u11C8\x03\x02\x02\x02\u11C8" +
		"\u11C9\x03\x02\x02\x02\u11C9\u11CB\x05\u0194\xCB\x02\u11CA\u11C7\x03\x02" +
		"\x02\x02\u11CB\u11CE\x03\x02\x02\x02\u11CC\u11CA\x03\x02\x02\x02\u11CC" +
		"\u11CD\x03\x02\x02\x02\u11CD\u0193\x03\x02\x02\x02\u11CE\u11CC\x03\x02" +
		"\x02\x02\u11CF\u11D1\x07\u01D5\x02\x02\u11D0\u11CF\x03\x02\x02\x02\u11D0" +
		"\u11D1\x03\x02\x02\x02\u11D1\u11D2\x03\x02\x02\x02\u11D2\u120C\t=\x02" +
		"\x02\u11D3\u11D5\x07\xA0\x02\x02\u11D4\u11D6\x05\u0240\u0121\x02\u11D5" +
		"\u11D4\x03\x02\x02\x02\u11D5\u11D6\x03\x02\x02\x02\u11D6\u120C\x03\x02" +
		"\x02\x02\u11D7\u11D9\x07\u015F\x02\x02\u11D8\u11DA\x05\u0240\u0121\x02" +
		"\u11D9\u11D8\x03\x02\x02\x02\u11D9\u11DA\x03\x02\x02\x02\u11DA\u120C\x03" +
		"\x02\x02\x02\u11DB\u11DD\x07?\x02\x02\u11DC\u11DE\x07\u0176\x02\x02\u11DD" +
		"\u11DC\x03\x02\x02\x02\u11DD\u11DE\x03\x02\x02\x02\u11DE\u11DF\x03\x02" +
		"\x02\x02\u11DF\u120C\x07\u0267\x02\x02\u11E0\u11E2\x07\u01A1\x02\x02\u11E1" +
		"\u11E3\x07\u0176\x02\x02\u11E2\u11E1\x03\x02\x02\x02\u11E2\u11E3\x03\x02" +
		"\x02\x02\u11E3\u11E4\x03\x02\x02\x02\u11E4\u120C\x07\u0267\x02\x02\u11E5" +
		"\u11E7\x07e\x02\x02\u11E6\u11E8\x05\u0240\u0121\x02\u11E7\u11E6\x03\x02" +
		"\x02\x02\u11E7\u11E8\x03\x02\x02\x02\u11E8\u120C\x03\x02\x02\x02\u11E9" +
		"\u11EA\x07\xBE\x02\x02\u11EA\u120C\x07\u0267\x02\x02\u11EB\u11EC\x07O" +
		"\x02\x02\u11EC\u120C\x07\u0267\x02\x02\u11ED\u11EE\x07\\\x02\x02\u11EE" +
		"\u11F1\x07\xBE\x02\x02\u11EF\u11F2\x07\u024F\x02\x02\u11F0\u11F2\x05\u02B6" +
		"\u015C\x02\u11F1\u11EF\x03\x02\x02\x02\u11F1\u11F0\x03\x02\x02\x02\u11F2" +
		"\u120C\x03\x02\x02\x02\u11F3\u11F9\x07\u01D4\x02\x02\u11F4\u11FA\x07\u024F" +
		"\x02\x02\u11F5\u11F6\x07\u024B\x02\x02\u11F6\u11F7\x05\u02B6\u015C\x02" +
		"\u11F7\u11F8\x07\u024C\x02\x02\u11F8\u11FA\x03\x02\x02\x02\u11F9\u11F4" +
		"\x03\x02\x02\x02\u11F9\u11F5\x03\x02\x02\x02\u11FA\u120C\x03\x02\x02\x02" +
		"\u11FB\u11FC\x07\\\x02\x02\u11FC\u11FD\x07\u01A0\x02\x02\u11FD\u11FE\x07" +
		"\u01A1\x02\x02\u11FE\u120C\x05\u02B6\u015C\x02\u11FF\u1200\x07\u01D2\x02" +
		"\x02\u1200\u1201\x07\u024B\x02\x02\u1201\u1202\x05\u02B6\u015C\x02\u1202" +
		"\u1203\x07\u024C\x02\x02\u1203\u120C\x03\x02\x02\x02\u1204\u1205\x07\u01D3" +
		"\x02\x02\u1205\u1206\x07\u024B\x02\x02\u1206\u1207\x05\u02B6\u015C\x02" +
		"\u1207\u1208\x07\u024C\x02\x02\u1208\u120C\x03\x02\x02\x02\u1209\u120A" +
		"\x07L\x02\x02\u120A\u120C\x07\u0267\x02\x02\u120B\u11D0\x03\x02\x02\x02" +
		"\u120B\u11D3\x03\x02\x02\x02\u120B\u11D7\x03\x02\x02\x02\u120B\u11DB\x03" +
		"\x02\x02\x02\u120B\u11E0\x03\x02\x02\x02\u120B\u11E5\x03\x02\x02\x02\u120B" +
		"\u11E9\x03\x02\x02\x02\u120B\u11EB\x03\x02\x02\x02\u120B\u11ED\x03\x02" +
		"\x02\x02\u120B\u11F3\x03\x02\x02\x02\u120B\u11FB\x03\x02\x02\x02\u120B" +
		"\u11FF\x03\x02\x02\x02\u120B\u1204\x03\x02\x02\x02\u120B\u1209\x03\x02" +
		"\x02\x02\u120C\u0195\x03\x02\x02\x02\u120D\u120E\x07\u01A5\x02\x02\u120E" +
		"\u1210\x07\xCC\x02\x02\u120F\u120D\x03\x02\x02\x02\u120F\u1210\x03\x02" +
		"\x02\x02\u1210\u1212\x03\x02\x02\x02\u1211\u1213\t6\x02\x02\u1212\u1211" +
		"\x03\x02\x02\x02\u1212\u1213\x03\x02\x02\x02\u1213\u1215\x03\x02\x02\x02" +
		"\u1214\u1216\x07\xC3\x02\x02\u1215\u1214\x03\x02\x02\x02\u1215\u1216\x03" +
		"\x02\x02\x02\u1216\u1218\x03\x02\x02\x02\u1217\u1219\x07\x8C\x02\x02\u1218" +
		"\u1217\x03\x02\x02\x02\u1218\u1219\x03\x02\x02\x02\u1219\u121A\x03\x02" +
		"\x02\x02\u121A\u121C\x07\u011A\x02\x02\u121B\u121D\x05\u019A\xCE\x02\u121C" +
		"\u121B\x03\x02\x02\x02\u121C\u121D\x03\x02\x02\x02\u121D\u121E\x03\x02" +
		"\x02\x02\u121E\u1220\x05\u026A\u0136\x02\u121F\u1221\x05\u019C\xCF\x02" +
		"\u1220\u121F\x03\x02\x02\x02\u1220\u1221\x03\x02\x02\x02\u1221\u1224\x03" +
		"\x02\x02\x02\u1222\u1223\x07\u01B7\x02\x02\u1223\u1225\x05\u0210\u0109" +
		"\x02\u1224\u1222\x03\x02\x02\x02\u1224\u1225\x03\x02\x02\x02\u1225\u1228" +
		"\x03\x02\x02\x02\u1226\u1227\x07\u01BC\x02\x02\u1227\u1229\x05\u01DC\xEF" +
		"\x02\u1228\u1226\x03\x02\x02\x02\u1228\u1229\x03\x02\x02\x02\u1229\u122B" +
		"\x03\x02\x02\x02\u122A\u122C\x05\u01E8\xF5\x02\u122B\u122A\x03\x02\x02" +
		"\x02\u122B\u122C\x03\x02\x02\x02\u122C\u122D\x03\x02\x02\x02\u122D\u122E" +
		"\x07\u0176\x02\x02\u122E\u1230\x05\u0270\u0139\x02\u122F\u1231\x05\u019E" +
		"\xD0\x02\u1230\u122F\x03\x02\x02\x02\u1230\u1231\x03\x02\x02\x02\u1231" +
		"\u1237\x03\x02\x02\x02\u1232\u1234\x07\u01BC\x02\x02\u1233\u1235\x07\x98" +
		"\x02\x02\u1234\u1233\x03\x02\x02\x02\u1234\u1235\x03\x02\x02\x02\u1235" +
		"\u1236\x03\x02\x02\x02\u1236\u1238\x076\x02\x02\u1237\u1232\x03\x02\x02" +
		"\x02\u1237\u1238\x03\x02\x02\x02\u1238\u0197\x03\x02\x02\x02\u1239\u123A" +
		"\x07i\x02\x02\u123A\u123B\x07\u0130\x02\x02\u123B\u0199\x03\x02\x02\x02" +
		"\u123C\u123D\x07i\x02\x02\u123D\u123E\x07\u01A0\x02\x02\u123E\u123F\x07" +
		"\u0130\x02\x02\u123F\u019B\x03\x02\x02\x02\u1240\u1241\x07\u024B\x02\x02" +
		"\u1241\u1246\x05\u0210\u0109\x02\u1242\u1243\x07\u0245\x02\x02\u1243\u1245" +
		"\x05\u0210\u0109\x02\u1244\u1242\x03\x02\x02\x02\u1245\u1248\x03\x02\x02" +
		"\x02\u1246\u1244\x03\x02\x02\x02\u1246\u1247\x03\x02\x02\x02\u1247\u1249" +
		"\x03\x02\x02\x02\u1248\u1246\x03\x02\x02\x02\u1249\u124A\x07\u024C\x02" +
		"\x02\u124A\u019D\x03\x02\x02\x02\u124B\u124D\x07\u01BC\x02\x02\u124C\u124E" +
		"\t>\x02\x02\u124D\u124C\x03\x02\x02\x02\u124D\u124E\x03\x02\x02\x02\u124E" +
		"\u124F\x03\x02\x02\x02\u124F\u1250\x07\u017C\x02\x02\u1250\u1251\x07\xA3" +
		"\x02\x02\u1251\u019F\x03\x02\x02\x02\u1252\u1254\t?\x02\x02\u1253\u1252" +
		"\x03\x02\x02\x02\u1253\u1254\x03\x02\x02\x02\u1254\u1255\x03\x02\x02\x02" +
		"\u1255\u1258\t6\x02\x02\u1256\u1258\x07\u0110\x02\x02\u1257\u1253\x03" +
		"\x02\x02\x02\u1257\u1256\x03\x02";
	private static readonly _serializedATNSegment10: string =
		"\x02\x02\u1257\u1258\x03\x02\x02\x02\u1258\u1259\x03\x02\x02\x02\u1259" +
		"\u125B\x07\u01AF\x02\x02\u125A\u125C\x05\u019A\xCE\x02\u125B\u125A\x03" +
		"\x02\x02\x02\u125B\u125C\x03\x02\x02\x02\u125C\u125D\x03\x02\x02\x02\u125D" +
		"\u125E\x05\u026A\u0136\x02\u125E\u1260\x05\u01A6\xD4\x02\u125F\u1261\x05" +
		"\u01B4\xDB\x02\u1260\u125F\x03\x02\x02\x02\u1260\u1261\x03\x02\x02\x02" +
		"\u1261\u1264\x03\x02\x02\x02\u1262\u1263\x07\u01B7\x02\x02\u1263\u1265" +
		"\x05\u0210\u0109\x02\u1264\u1262\x03\x02\x02\x02\u1264\u1265\x03\x02\x02" +
		"\x02\u1265\u1267\x03\x02\x02\x02\u1266\u1268\x05\u01E4\xF3\x02\u1267\u1266" +
		"\x03\x02\x02\x02\u1267\u1268\x03\x02\x02\x02\u1268\u126A\x03\x02\x02\x02" +
		"\u1269\u126B\x05\u01E6\xF4\x02\u126A\u1269\x03\x02\x02\x02\u126A\u126B" +
		"\x03\x02\x02\x02\u126B\u126D\x03\x02\x02\x02\u126C\u126E\x05\u01E8\xF5" +
		"\x02\u126D\u126C\x03\x02\x02\x02\u126D\u126E\x03\x02\x02\x02\u126E\u01A1" +
		"\x03\x02\x02\x02\u126F\u1271\t?\x02\x02\u1270\u126F\x03\x02\x02\x02\u1270" +
		"\u1271\x03\x02\x02\x02\u1271\u1272\x03\x02\x02\x02\u1272\u1275\t6\x02" +
		"\x02\u1273\u1275\x07\u0110\x02\x02\u1274\u1270\x03\x02\x02\x02\u1274\u1273" +
		"\x03\x02\x02\x02\u1274\u1275\x03\x02\x02\x02\u1275\u1276\x03\x02\x02\x02" +
		"\u1276\u1278\x07\u01AF\x02\x02\u1277\u1279\x05\u019A\xCE\x02\u1278\u1277" +
		"\x03\x02\x02\x02\u1278\u1279\x03\x02\x02\x02\u1279\u127A\x03\x02\x02\x02" +
		"\u127A\u127C\x05\u026A\u0136\x02\u127B\u127D\x05\u01D8\xED\x02\u127C\u127B" +
		"\x03\x02\x02\x02\u127C\u127D\x03\x02\x02\x02\u127D\u1280\x03\x02\x02\x02" +
		"\u127E\u127F\x07\u01B7\x02\x02\u127F\u1281\x05\u0210\u0109\x02\u1280\u127E" +
		"\x03\x02\x02\x02\u1280\u1281\x03\x02\x02\x02\u1281\u1283\x03\x02\x02\x02" +
		"\u1282\u1284\x05\u01E4\xF3\x02\u1283\u1282\x03\x02\x02\x02\u1283\u1284" +
		"\x03\x02\x02\x02\u1284\u1286\x03\x02\x02\x02\u1285\u1287\x05\u01E6\xF4" +
		"\x02\u1286\u1285\x03\x02\x02\x02\u1286\u1287\x03\x02\x02\x02\u1287\u1289" +
		"\x03\x02\x02\x02\u1288\u128A\x05\u01E8\xF5\x02\u1289\u1288\x03\x02\x02" +
		"\x02\u1289\u128A\x03\x02\x02\x02\u128A\u128B\x03\x02\x02\x02\u128B\u128F" +
		"\x07\u0176\x02\x02\u128C\u1290\x05\u0270\u0139\x02\u128D\u128E\x07T\x02" +
		"\x02\u128E\u1290\x05\u0246\u0124\x02\u128F\u128C\x03\x02\x02\x02\u128F" +
		"\u128D\x03\x02\x02\x02\u1290\u1296\x03\x02\x02\x02\u1291\u1293\x07\u01BC" +
		"\x02\x02\u1292\u1294\x07\x98\x02\x02\u1293\u1292\x03\x02\x02\x02\u1293" +
		"\u1294\x03\x02\x02\x02\u1294\u1295\x03\x02\x02\x02\u1295\u1297\x076\x02" +
		"\x02\u1296\u1291\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297\u01A3" +
		"\x03\x02\x02\x02\u1298\u1299\x07\u0192\x02\x02\u1299\u129B\x07\u01AF\x02" +
		"\x02\u129A\u129C\x05\u019A\xCE\x02\u129B\u129A\x03\x02\x02\x02\u129B\u129C" +
		"\x03\x02\x02\x02\u129C\u129D\x03\x02\x02\x02\u129D\u12A0\x05\u026A\u0136" +
		"\x02\u129E\u12A1\x05\u01B0\xD9\x02\u129F\u12A1\x05\u01A8\xD5\x02\u12A0" +
		"\u129E\x03\x02\x02\x02\u12A0\u129F\x03\x02\x02\x02\u12A1\u12A2\x03\x02" +
		"\x02\x02\u12A2\u12A3\x05\u01BA\xDE\x02\u12A3\u01A5\x03\x02\x02\x02\u12A4" +
		"\u12A8\x05\u01B0\xD9\x02\u12A5\u12A8\x05\u01B2\xDA\x02\u12A6\u12A8\x05" +
		"\u01A8\xD5\x02\u12A7\u12A4\x03\x02\x02\x02\u12A7\u12A5\x03\x02\x02\x02" +
		"\u12A7\u12A6\x03\x02\x02\x02\u12A8\u01A7\x03\x02\x02\x02\u12A9\u12AA\x07" +
		"\xAE\x02\x02\u12AA\u12AB\x07\x9E\x02\x02\u12AB\u12AD\x05\u026A\u0136\x02" +
		"\u12AC\u12AE\x05\u01C2\xE2\x02\u12AD\u12AC\x03\x02\x02\x02\u12AD\u12AE" +
		"\x03\x02\x02\x02\u12AE\u12AF\x03\x02\x02\x02\u12AF\u12B0\x05\u01AA\xD6" +
		"\x02\u12B0\u01A9\x03\x02\x02\x02\u12B1\u12B2\x07\u0191\x02\x02\u12B2\u12B3" +
		"\x07\u014C\x02\x02\u12B3\u12B6\x05\u01AC\xD7\x02\u12B4\u12B6\x07\u0187" +
		"\x02\x02\u12B5\u12B1\x03\x02\x02\x02\u12B5\u12B4\x03\x02\x02\x02\u12B6" +
		"\u01AB\x03\x02\x02\x02\u12B7\u12B8\x07\u0197\x02\x02\u12B8\u12B9\x07\u024B" +
		"\x02\x02\u12B9\u12BE\x05\u0230\u0119\x02\u12BA\u12BB\x07\u0245\x02\x02" +
		"\u12BB\u12BD\x05\u0230\u0119\x02\u12BC\u12BA\x03\x02\x02\x02\u12BD\u12C0" +
		"\x03\x02\x02\x02\u12BE\u12BC\x03\x02\x02\x02\u12BE\u12BF\x03\x02\x02\x02" +
		"\u12BF\u12C1\x03\x02\x02\x02\u12C0\u12BE\x03\x02\x02\x02\u12C1\u12C2\x07" +
		"\u024C\x02\x02\u12C2\u12D1\x03\x02\x02\x02\u12C3\u12C4\x07\u0193\x02\x02" +
		"\u12C4\u12C5\x05\u01AE\xD8\x02\u12C5\u12C6\x07\u01B1\x02\x02\u12C6\u12C7" +
		"\x05\u01AE\xD8\x02\u12C7\u12D1\x03\x02\x02\x02\u12C8\u12C9\x07\u01BC\x02" +
		"\x02\u12C9\u12CA\x07\u024B\x02\x02\u12CA\u12CB\x07\u01EF\x02\x02\u12CB" +
		"\u12CC\x07\u0262\x02\x02\u12CC\u12CD\x07\u0245\x02\x02\u12CD\u12CE\x07" +
		"\u0205\x02\x02\u12CE\u12CF\x07\u0262\x02\x02\u12CF\u12D1\x07\u024C\x02" +
		"\x02\u12D0\u12B7\x03\x02\x02\x02\u12D0\u12C3\x03\x02\x02\x02\u12D0\u12C8" +
		"\x03\x02\x02\x02\u12D1\u01AD\x03\x02\x02\x02\u12D2\u12D3\x07\u024B\x02" +
		"\x02\u12D3\u12D8\x05\u0230\u0119\x02\u12D4\u12D5\x07\u0245\x02\x02\u12D5" +
		"\u12D7\x05\u0230\u0119\x02\u12D6\u12D4\x03\x02\x02\x02\u12D7\u12DA\x03" +
		"\x02\x02\x02\u12D8\u12D6\x03\x02\x02\x02\u12D8\u12D9\x03\x02\x02\x02\u12D9" +
		"\u12DB\x03\x02\x02\x02\u12DA\u12D8\x03\x02\x02\x02\u12DB\u12DC\x07\u024C" +
		"\x02\x02\u12DC\u01AF\x03\x02\x02\x02\u12DD\u12E6\x07\u024B\x02\x02\u12DE" +
		"\u12E3\x05\u01C4\xE3\x02\u12DF\u12E0\x07\u0245\x02\x02\u12E0\u12E2\x05" +
		"\u01C4\xE3\x02\u12E1\u12DF\x03\x02\x02\x02\u12E2\u12E5\x03\x02\x02\x02" +
		"\u12E3\u12E1\x03\x02\x02\x02\u12E3\u12E4\x03\x02\x02\x02\u12E4\u12E7\x03" +
		"\x02\x02\x02\u12E5\u12E3\x03\x02\x02\x02\u12E6\u12DE\x03\x02\x02\x02\u12E6" +
		"\u12E7\x03\x02\x02\x02\u12E7\u12E8\x03\x02\x02\x02\u12E8\u12EB\x07\u024C" +
		"\x02\x02\u12E9\u12EA\x07t\x02\x02\u12EA\u12EC\x05\u01D8\xED\x02\u12EB" +
		"\u12E9\x03\x02\x02\x02\u12EB\u12EC\x03\x02\x02\x02\u12EC\u01B1\x03\x02" +
		"\x02\x02\u12ED\u12EE\x07\x9E\x02\x02\u12EE\u12F0\x05\u0224\u0113\x02\u12EF" +
		"\u12F1\x05\u01C2\xE2\x02\u12F0\u12EF\x03\x02\x02\x02\u12F0\u12F1\x03\x02" +
		"\x02\x02\u12F1\u01B3\x03\x02\x02\x02\u12F2\u12F3\x07\xAE\x02\x02\u12F3" +
		"\u12F4\x07\x16\x02\x02\u12F4\u12F5\x05\u01B6\xDC\x02\u12F5\u01B5\x03\x02" +
		"\x02\x02\u12F6\u12F7\t@\x02\x02\u12F7\u12F8\x07\u024B\x02\x02\u12F8\u12FD" +
		"\x05\u01B8\xDD\x02\u12F9\u12FA\x07\u0245\x02\x02\u12FA\u12FC\x05\u01B8" +
		"\xDD\x02\u12FB\u12F9\x03\x02\x02\x02\u12FC\u12FF\x03\x02\x02\x02\u12FD" +
		"\u12FB\x03\x02\x02\x02\u12FD\u12FE\x03\x02\x02\x02\u12FE\u1300\x03\x02" +
		"\x02\x02\u12FF\u12FD\x03\x02\x02\x02\u1300\u1301\x07\u024C\x02\x02\u1301" +
		"\u01B7\x03\x02\x02\x02\u1302\u1304\x05\u0230\u0119\x02\u1303\u1305\x05" +
		"\u0210\u0109\x02\u1304\u1303\x03\x02\x02\x02\u1304\u1305\x03\x02\x02\x02" +
		"\u1305\u01B9\x03\x02\x02\x02\u1306\u1307\x07\xE4\x02\x02\u1307\u1309\x05" +
		"\u0210\u0109\x02\u1308\u130A\x05\u01BC\xDF\x02\u1309\u1308\x03\x02\x02" +
		"\x02\u1309\u130A\x03\x02\x02\x02\u130A\u01BB\x03\x02\x02\x02\u130B\u130C" +
		"\x07\xA4\x02\x02\u130C\u130D\x07\u024B\x02\x02\u130D\u1312\x05\u01BE\xE0" +
		"\x02\u130E\u130F\x07\u0245\x02\x02\u130F\u1311\x05\u01BE\xE0\x02\u1310" +
		"\u130E\x03\x02\x02\x02\u1311\u1314\x03\x02\x02\x02\u1312\u1310\x03\x02" +
		"\x02\x02\u1312\u1313\x03\x02\x02\x02\u1313\u1315\x03\x02\x02\x02\u1314" +
		"\u1312\x03\x02\x02\x02\u1315\u1316\x07\u024C\x02\x02\u1316\u01BD\x03\x02" +
		"\x02\x02\u1317\u1319\t<\x02\x02\u1318\u1317\x03\x02\x02\x02\u1318\u1319" +
		"\x03\x02\x02\x02\u1319\u131A\x03\x02\x02\x02\u131A\u131C\x05\u01C0\xE1" +
		"\x02\u131B\u131D\x05\u0146\xA4\x02\u131C\u131B\x03\x02\x02\x02\u131C\u131D" +
		"\x03\x02\x02\x02\u131D\u01BF\x03\x02\x02\x02\u131E\u1321\x05\u0210\u0109" +
		"\x02\u131F\u1321\x07\u01B6\x02\x02\u1320\u131E\x03\x02\x02\x02\u1320\u131F" +
		"\x03\x02\x02\x02\u1321\u01C1\x03\x02\x02\x02\u1322\u1323\x07\u024B\x02" +
		"\x02\u1323\u1328\x05\u01C6\xE4\x02\u1324\u1325\x07\u0245\x02\x02\u1325" +
		"\u1327\x05\u01C6\xE4\x02\u1326\u1324\x03\x02\x02\x02\u1327\u132A\x03\x02" +
		"\x02\x02\u1328\u1326\x03\x02\x02\x02\u1328\u1329\x03\x02\x02\x02\u1329" +
		"\u132B\x03\x02\x02\x02\u132A\u1328\x03\x02\x02\x02\u132B\u132C\x07\u024C" +
		"\x02\x02\u132C\u01C3\x03\x02\x02\x02\u132D\u1338\x05\u01C8\xE5\x02\u132E" +
		"\u1338\x05\u01CC\xE7\x02\u132F\u1330\x07\u0167\x02\x02\u1330\u1334\x05" +
		"\u026A\u0136\x02\u1331\u1333\x05\u01CA\xE6\x02\u1332\u1331\x03\x02\x02" +
		"\x02\u1333\u1336\x03\x02\x02\x02\u1334\u1332\x03\x02\x02\x02\u1334\u1335" +
		"\x03\x02\x02\x02\u1335\u1338\x03\x02\x02\x02\u1336\u1334\x03\x02\x02\x02" +
		"\u1337\u132D\x03\x02\x02\x02\u1337\u132E\x03\x02\x02\x02\u1337\u132F\x03" +
		"\x02\x02\x02\u1338\u01C5\x03\x02\x02\x02\u1339\u133C\x05\u0210\u0109\x02" +
		"\u133A\u133B\x07\u01BC\x02\x02\u133B\u133D\x07\xA4\x02\x02\u133C\u133A" +
		"\x03\x02\x02\x02\u133C\u133D\x03\x02\x02\x02\u133D\u1341\x03\x02\x02\x02" +
		"\u133E\u1340\x05\u01CC\xE7\x02\u133F\u133E\x03\x02\x02\x02\u1340\u1343" +
		"\x03\x02\x02\x02\u1341\u133F\x03\x02\x02\x02\u1341\u1342\x03\x02\x02\x02" +
		"\u1342\u1346\x03\x02\x02\x02\u1343\u1341\x03\x02\x02\x02\u1344\u1346\x05" +
		"\u01CC\xE7\x02\u1345\u1339\x03\x02\x02\x02\u1345\u1344\x03\x02\x02\x02" +
		"\u1346\u01C7\x03\x02\x02\x02\u1347\u1348\x05\u0210\u0109\x02\u1348\u134A" +
		"\x05\u0224\u0113\x02\u1349\u134B\x05\u01BC\xDF\x02\u134A\u1349\x03\x02" +
		"\x02\x02\u134A\u134B\x03\x02\x02\x02\u134B\u134D\x03\x02\x02\x02\u134C" +
		"\u134E\x05\u01FA\xFE\x02\u134D\u134C\x03\x02\x02\x02\u134D\u134E\x03\x02" +
		"\x02\x02\u134E\u1352\x03\x02\x02\x02\u134F\u1351\x05\u01CC\xE7\x02\u1350" +
		"\u134F\x03\x02\x02\x02\u1351\u1354\x03\x02\x02\x02\u1352\u1350\x03\x02" +
		"\x02\x02\u1352\u1353\x03\x02\x02\x02\u1353\u01C9\x03\x02\x02\x02\u1354" +
		"\u1352\x03\x02\x02\x02\u1355\u1356\tA\x02\x02\u1356\u1357\tB\x02\x02\u1357" +
		"\u01CB\x03\x02\x02\x02\u1358\u1359\x07\u017F\x02\x02\u1359\u135B\x05\u0210" +
		"\u0109\x02\u135A\u1358\x03\x02\x02\x02\u135A\u135B\x03\x02\x02\x02\u135B" +
		"\u135C\x03\x02\x02\x02\u135C\u135E\x05\u01CE\xE8\x02\u135D\u135F\x05d" +
		"3\x02\u135E\u135D\x03\x02\x02\x02\u135E\u135F\x03\x02\x02\x02\u135F\u1361" +
		"\x03\x02\x02\x02\u1360\u1362\x05f4\x02\u1361\u1360\x03\x02\x02\x02\u1361" +
		"\u1362\x03\x02\x02\x02\u1362\u01CD\x03\x02\x02\x02\u1363\u1366\x07Q\x02" +
		"\x02\u1364\u1365\x07\u01B7\x02\x02\u1365\u1367\x05\u0210\u0109\x02\u1366" +
		"\u1364\x03\x02\x02\x02\u1366\u1367\x03\x02\x02\x02\u1367\u1368\x03\x02" +
		"\x02\x02\u1368\u1369\x07\u024B\x02\x02\u1369\u136A\x05\u029C\u014F\x02" +
		"\u136A\u136B\x07\u01BC\x02\x02\u136B\u1373\x05\u01D0\xE9\x02\u136C\u136D" +
		"\x07\u0245\x02\x02\u136D\u136E\x05\u029C\u014F\x02\u136E\u136F\x07\u01BC" +
		"\x02\x02\u136F\u1370\x05\u01D0\xE9\x02\u1370\u1372\x03\x02\x02\x02\u1371" +
		"\u136C\x03\x02\x02\x02\u1372\u1375\x03\x02\x02\x02\u1373\u1371\x03\x02" +
		"\x02\x02\u1373\u1374\x03\x02\x02\x02\u1374\u1376\x03\x02\x02\x02\u1375" +
		"\u1373\x03\x02\x02\x02\u1376\u1377\x07\u024C\x02\x02\u1377\u137A\x05\u01D6" +
		"\xEC\x02\u1378\u1379\x07\u01BA\x02\x02\u1379\u137B\x05\u0230\u0119\x02" +
		"\u137A\u1378\x03\x02\x02\x02\u137A\u137B\x03\x02\x02\x02\u137B\u13B1\x03" +
		"\x02\x02\x02\u137C\u137D\x07\u0192\x02\x02\u137D\u137E\x07|\x02\x02\u137E" +
		"\u1380\x05\u01D8\xED\x02\u137F\u137C\x03\x02\x02\x02\u137F\u1380\x03\x02" +
		"\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381\u1382\x07\u01A9\x02\x02\u1382" +
		"\u1384\x05\u026A\u0136\x02\u1383\u1385\x05\u01D8\xED\x02\u1384\u1383\x03" +
		"\x02\x02\x02\u1384\u1385\x03\x02\x02\x02\u1385\u138D\x03\x02\x02\x02\u1386" +
		"\u1387\x07\x8B\x02\x02\u1387\u138C\tC\x02\x02\u1388\u1389\x07\u01A3\x02" +
		"\x02\u1389\u138A\tD\x02\x02\u138A\u138C\x05\u01EA\xF6\x02\u138B\u1386" +
		"\x03\x02\x02\x02\u138B\u1388\x03\x02\x02\x02\u138C\u138F\x03\x02\x02\x02" +
		"\u138D\u138B\x03\x02\x02\x02\u138D\u138E\x03\x02\x02\x02\u138E\u13B1\x03" +
		"\x02\x02\x02\u138F\u138D\x03\x02\x02\x02\u1390\u1391\x07\u017C\x02\x02" +
		"\u1391\u1392\x07\u024B\x02\x02\u1392\u1393\x05\u0230\u0119\x02\u1393\u1396" +
		"\x07\u024C\x02\x02\u1394\u1395\x07\x98\x02\x02\u1395\u1397\x07s\x02\x02" +
		"\u1396\u1394\x03\x02\x02\x02\u1396\u1397\x03\x02\x02\x02\u1397\u13B1\x03" +
		"\x02\x02\x02\u1398\u139A\x07\u01A0\x02\x02\u1399\u1398\x03\x02\x02\x02" +
		"\u1399\u139A\x03\x02\x02\x02\u139A\u139B\x03\x02\x02\x02\u139B\u13B1\x07" +
		"\u01A1\x02\x02\u139C\u13A0\x07\u01B5\x02\x02\u139D\u139E\x07\u01A8\x02" +
		"\x02\u139E\u13A0\x07|\x02\x02\u139F\u139C\x03\x02\x02\x02\u139F\u139D" +
		"\x03\x02\x02\x02\u13A0\u13A2\x03\x02\x02\x02\u13A1\u13A3\x05\u01D8\xED" +
		"\x02\u13A2\u13A1\x03\x02\x02\x02\u13A2\u13A3\x03\x02\x02\x02\u13A3\u13A4" +
		"\x03\x02\x02\x02\u13A4\u13B1\x05\u01D6\xEC\x02\u13A5\u13A6\x07\u0187\x02" +
		"\x02\u13A6\u13B1\x05\u0230\u0119\x02\u13A7\u13B1\x05Z.\x02\u13A8\u13A9" +
		"\x07`\x02\x02\u13A9\u13AA\x07\r\x02\x02\u13AA\u13AB\x07\u0176\x02\x02" +
		"\u13AB\u13AC\x07\u024B\x02\x02\u13AC\u13AD\x05\u0230\u0119\x02\u13AD\u13AE" +
		"\x07\u024C\x02\x02\u13AE\u13AF\x07\xF6\x02\x02\u13AF\u13B1\x03\x02\x02" +
		"\x02\u13B0\u1363\x03\x02\x02\x02\u13B0\u137F\x03\x02\x02\x02\u13B0\u1390" +
		"\x03\x02\x02\x02\u13B0\u1399\x03\x02\x02\x02\u13B0\u139F\x03\x02\x02\x02" +
		"\u13B0\u13A5\x03\x02\x02\x02\u13B0\u13A7\x03\x02\x02\x02\u13B0\u13A8\x03" +
		"\x02\x02\x02\u13B1\u01CF\x03\x02\x02\x02\u13B2\u13C0\x05\u0234\u011B\x02" +
		"\u13B3\u13C0\x07\u0242\x02\x02\u13B4\u13C0\x07\u0246\x02\x02\u13B5\u13C0" +
		"\x07\u0247\x02\x02\u13B6\u13C0\x07\u0248\x02\x02\u13B7\u13C0\x07\u0249" +
		"\x02\x02\u13B8\u13C0\x07\u024A\x02\x02\u13B9\u13C0\x07\u024D\x02\x02\u13BA" +
		"\u13C0\x07\u024E\x02\x02\u13BB\u13C0\x07\u024F\x02\x02\u13BC\u13C0\x07" +
		"\u0250\x02\x02\u13BD\u13C0\x07\u0251\x02\x02\u13BE\u13C0\x07\u0252\x02" +
		"\x02\u13BF\u13B2\x03\x02\x02\x02\u13BF\u13B3\x03\x02\x02\x02\u13BF\u13B4" +
		"\x03\x02\x02\x02\u13BF\u13B5\x03\x02\x02\x02\u13BF\u13B6\x03\x02\x02\x02" +
		"\u13BF\u13B7\x03\x02\x02\x02\u13BF\u13B8\x03\x02\x02\x02\u13BF\u13B9\x03" +
		"\x02\x02\x02\u13BF\u13BA\x03\x02\x02\x02\u13BF\u13BB\x03\x02\x02\x02\u13BF" +
		"\u13BC\x03\x02\x02\x02\u13BF\u13BD\x03\x02\x02\x02\u13BF\u13BE\x03\x02" +
		"\x02\x02\u13C0\u01D1\x03\x02\x02\x02\u13C1\u13CF\x05\u01D4\xEB\x02\u13C2" +
		"\u13CF\x07\u0242\x02\x02\u13C3\u13CF\x07\u0246\x02\x02\u13C4\u13CF\x07" +
		"\u0247\x02\x02\u13C5\u13CF\x07\u0248\x02\x02\u13C6\u13CF\x07\u0249\x02" +
		"\x02\u13C7\u13CF\x07\u024A\x02\x02\u13C8\u13CF\x07\u024D\x02\x02\u13C9" +
		"\u13CF\x07\u024E\x02\x02\u13CA\u13CF\x07\u024F\x02\x02\u13CB\u13CF\x07" +
		"\u0250\x02\x02\u13CC\u13CF\x07\u0251\x02\x02\u13CD\u13CF\x07\u0252\x02" +
		"\x02\u13CE\u13C1\x03\x02\x02\x02\u13CE\u13C2\x03\x02\x02\x02\u13CE\u13C3" +
		"\x03\x02\x02\x02\u13CE\u13C4\x03\x02\x02\x02\u13CE\u13C5\x03\x02\x02\x02" +
		"\u13CE\u13C6\x03\x02\x02\x02\u13CE\u13C7\x03\x02\x02\x02\u13CE\u13C8\x03" +
		"\x02\x02\x02\u13CE\u13C9\x03\x02\x02\x02\u13CE\u13CA\x03\x02\x02\x02\u13CE" +
		"\u13CB\x03\x02\x02\x02\u13CE\u13CC\x03\x02\x02\x02\u13CE\u13CD\x03\x02" +
		"\x02\x02\u13CF\u01D3\x03\x02\x02\x02\u13D0\u13D1\tE\x02\x02\u13D1\u01D5" +
		"\x03\x02\x02\x02\u13D2\u13D4\x05\x96L\x02\u13D3\u13D2\x03\x02\x02\x02" +
		"\u13D3\u13D4\x03\x02\x02\x02\u13D4\u13D6\x03\x02\x02\x02\u13D5\u13D7\x05" +
		"\u01E2\xF2\x02\u13D6\u13D5\x03\x02\x02\x02\u13D6\u13D7\x03\x02\x02\x02" +
		"\u13D7\u13DE\x03\x02\x02\x02\u13D8\u13D9\x07\u01B7\x02\x02\u13D9\u13DC" +
		"\x07q\x02\x02\u13DA\u13DD\x05\u01E8\xF5\x02\u13DB\u13DD\x05\u026A\u0136" +
		"\x02\u13DC\u13DA\x03\x02\x02\x02\u13DC\u13DB\x03\x02\x02\x02\u13DD\u13DF" +
		"\x03\x02\x02\x02\u13DE\u13D8\x03\x02\x02\x02\u13DE\u13DF\x03\x02\x02\x02" +
		"\u13DF\u01D7\x03\x02\x02\x02\u13E0\u13E1\x07\u024B\x02\x02\u13E1\u13E2" +
		"\x05\u01DA\xEE\x02\u13E2\u13E3\x07\u024C\x02\x02\u13E3\u01D9\x03\x02\x02" +
		"\x02\u13E4\u13E9\x05\u026A\u0136\x02\u13E5\u13E6\x07\u0245\x02\x02\u13E6" +
		"\u13E8\x05\u026A\u0136\x02\u13E7\u13E5\x03\x02\x02\x02\u13E8\u13EB\x03" +
		"\x02\x02\x02\u13E9\u13E7\x03\x02\x02\x02\u13E9\u13EA\x03\x02\x02\x02\u13EA" +
		"\u01DB\x03\x02\x02\x02\u13EB\u13E9\x03\x02\x02\x02\u13EC\u13ED\x07\u024B" +
		"\x02\x02\u13ED\u13F2\x05\u01DE\xF0\x02\u13EE\u13EF\x07\u0245\x02\x02\u13EF" +
		"\u13F1\x05\u01DE\xF0\x02\u13F0\u13EE\x03\x02\x02\x02\u13F1\u13F4\x03\x02" +
		"\x02\x02\u13F2\u13F0\x03\x02\x02\x02\u13F2\u13F3\x03\x02\x02\x02\u13F3" +
		"\u13F5\x03\x02\x02\x02\u13F4\u13F2\x03\x02\x02\x02\u13F5\u13F6\x07\u024C" +
		"\x02\x02\u13F6\u01DD\x03\x02\x02\x02\u13F7\u13FA\x05\u01E0\xF1\x02\u13F8" +
		"\u13F9\x07\u0242\x02\x02\u13F9\u13FB\x05\u0230\u0119\x02\u13FA\u13F8\x03" +
		"\x02\x02\x02\u13FA\u13FB\x03\x02\x02\x02\u13FB\u01DF\x03\x02\x02\x02\u13FC" +
		"\u13FF\x05\u0214\u010B\x02\u13FD\u13FE\x07\u0253\x02\x02\u13FE\u1400\x05" +
		"\u0214\u010B\x02\u13FF\u13FD\x03\x02\x02\x02\u13FF\u1400\x03\x02\x02\x02" +
		"\u1400\u01E1\x03\x02\x02\x02\u1401\u1402\x07\u01BC\x02\x02\u1402\u1403" +
		"\x05\u01DC\xEF\x02\u1403\u01E3\x03\x02\x02\x02\u1404\u140A\x05\u01E2\xF2" +
		"\x02\u1405\u1406\x07\u01BC\x02\x02\u1406\u140A\x07\xA0\x02\x02\u1407\u1408" +
		"\x07\u011F\x02\x02\u1408\u140A\x07\xA0\x02\x02\u1409\u1404\x03\x02\x02" +
		"\x02\u1409\u1405\x03\x02\x02\x02\u1409\u1407\x03\x02\x02\x02\u140A\u01E5" +
		"\x03\x02\x02\x02\u140B\u140C\x07\u01A3\x02\x02\u140C\u1412\x07&\x02\x02" +
		"\u140D\u140E\x07\xB6\x02\x02\u140E\u1413\x07\xD8\x02\x02\u140F\u1410\x07" +
		">\x02\x02\u1410\u1413\x07\xD8\x02\x02\u1411\u1413\x07I\x02\x02\u1412\u140D" +
		"\x03\x02\x02\x02\u1412\u140F\x03\x02\x02\x02\u1412\u1411\x03\x02\x02\x02" +
		"\u1413\u01E7\x03\x02\x02\x02\u1414\u1415\x07\xFE\x02\x02\u1415\u1416\x05" +
		"\u0210\u0109\x02\u1416\u01E9\x03\x02\x02\x02\u1417\u141D\x05\u01F8\xFD" +
		"\x02\u1418\u1419\x07\xE6\x02\x02\u1419\u141D\tF\x02\x02\u141A\u141B\x07" +
		"\x98\x02\x02\u141B\u141D\x07\x06\x02\x02\u141C\u1417\x03\x02\x02\x02\u141C" +
		"\u1418\x03\x02\x02\x02\u141C\u141A\x03\x02\x02\x02\u141D\u01EB\x03\x02" +
		"\x02\x02\u141E\u141F\x07\xAA\x02\x02\u141F\u1423\x07\u01B1\x02\x02\u1420" +
		"\u1424\x05\u0210\u0109\x02\u1421\u1424\x07\u0186\x02\x02\u1422\u1424\x07" +
		"\u01AC\x02\x02\u1423\u1420\x03\x02\x02\x02\u1423\u1421\x03\x02\x02\x02" +
		"\u1423\u1422\x03\x02\x02\x02\u1424\u01ED\x03\x02\x02\x02\u1425\u1426\x07" +
		"\xCA\x02\x02\u1426\u1427\x07\u01B1\x02\x02\u1427\u1428\x05\u0210\u0109" +
		"\x02\u1428\u01EF\x03\x02\x02\x02\u1429\u142A\x07\xE6\x02\x02\u142A\u142B" +
		"\x07\xDB\x02\x02\u142B\u142C\x05\u0210\u0109\x02\u142C\u01F1\x03\x02\x02" +
		"\x02\u142D\u1439\x07\u01AB\x02\x02\u142E\u1439\x07x\x02\x02\u142F\u1439" +
		"\x07\u0112\x02\x02\u1430\u1439\x07>\x02\x02\u1431\u1439\x07\u0107\x02" +
		"\x02\u1432\u1439\x07\u01A9\x02\x02\u1433\u1439\x07\u0106\x02\x02\u1434" +
		"\u1436\x07\u0170\x02\x02\u1435\u1437\x07\xB8\x02\x02\u1436\u1435\x03\x02" +
		"\x02\x02\u1436\u1437\x03\x02\x02\x02\u1437\u1439\x03\x02\x02\x02\u1438" +
		"\u142D\x03\x02\x02\x02\u1438\u142E\x03\x02\x02\x02\u1438\u142F\x03\x02" +
		"\x02\x02\u1438\u1430\x03\x02\x02\x02\u1438\u1431\x03\x02\x02\x02\u1438" +
		"\u1432\x03\x02\x02\x02\u1438\u1433\x03\x02\x02\x02\u1438\u1434\x03\x02" +
		"\x02\x02\u1439\u01F3\x03\x02\x02\x02\u143A\u143B\tG\x02\x02\u143B\u01F5" +
		"\x03\x02\x02\x02\u143C\u143D\x07\xAE\x02\x02\u143D\u143E\x07\x16\x02\x02" +
		"\u143E\u1443\x05\u0230\u0119\x02\u143F\u1440\x07\u0245\x02\x02\u1440\u1442" +
		"\x05\u0230\u0119\x02\u1441\u143F\x03\x02\x02\x02\u1442\u1445\x03\x02\x02" +
		"\x02\u1443\u1441\x03\x02\x02\x02\u1443\u1444\x03\x02\x02\x02\u1444\u01F7" +
		"\x03\x02\x02\x02\u1445\u1443\x03\x02\x02\x02\u1446\u1447\tH\x02\x02\u1447" +
		"\u01F9\x03\x02\x02\x02\u1448\u1449\x07\u017D\x02\x02\u1449\u144A\x05\u026A" +
		"\u0136\x02\u144A\u01FB\x03\x02\x02\x02\u144B\u144E\x05\u0210\u0109\x02" +
		"\u144C\u144E\x05\u01FE\u0100\x02\u144D\u144B\x03\x02\x02\x02\u144D\u144C" +
		"\x03\x02\x02\x02\u144E\u1450\x03\x02\x02\x02\u144F\u1451\x05\u0200\u0101" +
		"\x02\u1450\u144F\x03\x02\x02\x02\u1450\u1451\x03\x02\x02\x02\u1451\u01FD" +
		"\x03\x02\x02\x02\u1452\u1453\x07\u0264\x02\x02\u1453\u01FF\x03\x02\x02" +
		"\x02\u1454\u1456\x05\u0202\u0102\x02\u1455\u1454\x03\x02\x02\x02\u1456" +
		"\u1457\x03\x02\x02\x02\u1457\u1455\x03\x02\x02\x02\u1457\u1458\x03\x02" +
		"\x02\x02\u1458\u1462\x03\x02\x02\x02\u1459\u145B\x05\u0202\u0102\x02\u145A" +
		"\u1459\x03\x02\x02\x02\u145B\u145E\x03\x02\x02\x02\u145C\u145A\x03\x02" +
		"\x02\x02\u145C\u145D\x03\x02\x02\x02\u145D\u145F\x03\x02\x02\x02\u145E" +
		"\u145C\x03\x02\x02\x02\u145F\u1460\x07\u0253\x02\x02\u1460\u1462\x07\u024F" +
		"\x02\x02\u1461\u1455\x03\x02\x02\x02\u1461\u145C\x03\x02\x02\x02\u1462" +
		"\u0201\x03\x02\x02\x02\u1463\u1464\x07\u0253\x02\x02\u1464\u1473\x05\u0214" +
		"\u010B\x02\u1465\u1466\x07\u0257\x02\x02\u1466\u1467\x05\u0230\u0119\x02" +
		"\u1467\u1468\x07\u0258\x02\x02\u1468\u1473\x03\x02\x02\x02\u1469\u146B" +
		"\x07\u0257\x02\x02\u146A\u146C\x05\u0230\u0119\x02\u146B\u146A\x03\x02" +
		"\x02\x02\u146B\u146C\x03\x02\x02\x02\u146C\u146D\x03\x02\x02\x02\u146D" +
		"\u146F\x07\u0243\x02\x02\u146E\u1470\x05\u0230\u0119\x02\u146F\u146E\x03" +
		"\x02\x02\x02\u146F\u1470\x03\x02\x02\x02\u1470\u1471\x03\x02\x02\x02\u1471" +
		"\u1473\x07\u0258\x02\x02\u1472\u1463\x03\x02\x02\x02\u1472\u1465\x03\x02" +
		"\x02\x02\u1472\u1469\x03\x02\x02\x02\u1473\u0203\x03\x02\x02\x02\u1474" +
		"\u1476\t#\x02\x02\u1475\u1477\x05\u0198\xCD\x02\u1476\u1475\x03\x02\x02" +
		"\x02\u1476\u1477\x03\x02\x02\x02\u1477\u1478\x03\x02\x02\x02\u1478\u147A" +
		"\x05\u026A\u0136\x02\u1479\u147B\x05\u0142\xA2\x02\u147A\u1479\x03\x02" +
		"\x02\x02\u147A\u147B\x03\x02\x02\x02\u147B\u147D\x03\x02\x02\x02\u147C" +
		"\u147E\x05\u01F8\xFD\x02\u147D\u147C\x03\x02\x02\x02\u147D\u147E\x03\x02" +
		"\x02\x02\u147E\u0205\x03\x02\x02\x02\u147F\u1481\x07\u0106\x02\x02\u1480" +
		"\u1482\x05\u0198\xCD\x02\u1481\u1480\x03\x02\x02\x02\u1481\u1482\x03\x02" +
		"\x02\x02\u1482\u1483\x03\x02\x02\x02\u1483\u1484\x05\u0210\u0109\x02\u1484" +
		"\u1485\x07\u01A3\x02\x02\u1485\u1487\x05\u026A\u0136\x02\u1486\u1488\x05" +
		"\u01F8\xFD\x02\u1487\u1486\x03\x02\x02\x02\u1487\u1488\x03\x02\x02\x02" +
		"\u1488\u0207\x03\x02\x02\x02\u1489\u148B\x07\xD9\x02\x02\u148A\u148C\x05" +
		"\u0198\xCD\x02\u148B\u148A\x03\x02\x02\x02\u148B\u148C\x03\x02\x02\x02" +
		"\u148C\u148D\x03\x02\x02\x02\u148D\u148E\x05\u0210\u0109\x02\u148E\u148F" +
		"\x07\u01A3\x02\x02\u148F\u1491\x05\u026A\u0136\x02\u1490\u1492\x05\u01F8" +
		"\xFD\x02\u1491\u1490\x03\x02\x02\x02\u1491\u1492\x03\x02\x02\x02\u1492" +
		"\u0209\x03\x02\x02\x02\u1493\u1494\x07\x05\x02\x02\u1494\u14BE\x07\x8E" +
		"\x02\x02\u1495\u14BE\x07\u015B\x02\x02\u1496\u14BE\x07.\x02\x02\u1497" +
		"\u14BE\x077\x02\x02\u1498\u14BE\x07G\x02\x02\u1499\u149A\x07P\x02\x02" +
		"\u149A\u14BE\x07\u0106\x02\x02\u149B\u14BE\x07V\x02\x02\u149C\u14BE\x07" +
		"\u0195\x02\x02\u149D\u149F\x07\u0192\x02\x02\u149E\u149D\x03\x02\x02\x02" +
		"\u149E\u149F\x03\x02\x02\x02\u149F\u14A0\x03\x02\x02\x02\u14A0\u14BE\x07" +
		"\u01AF\x02\x02\u14A1\u14A2\x07\u0192\x02\x02\u14A2\u14A3\x076\x02\x02" +
		"\u14A3\u14BE\x07\u0121\x02\x02\u14A4\u14A6\x07q\x02\x02\u14A5\u14A7\x07" +
		"\u015C\x02\x02\u14A6\u14A5\x03\x02\x02\x02\u14A6\u14A7\x03\x02\x02\x02" +
		"\u14A7\u14BE\x03\x02\x02\x02\u14A8\u14AA\x07\x8C\x02\x02\u14A9\u14A8\x03" +
		"\x02\x02\x02\u14A9\u14AA\x03\x02\x02\x02\u14AA\u14AB\x03\x02\x02\x02\u14AB" +
		"\u14BE\x07\u011A\x02\x02\u14AC\u14AE\x07\xB9\x02\x02\u14AD\u14AC\x03\x02" +
		"\x02\x02\u14AD\u14AE\x03\x02\x02\x02\u14AE\u14AF\x03\x02\x02\x02\u14AF" +
		"\u14BE\x07~\x02\x02\u14B0\u14BE\x07\xBD\x02\x02\u14B1\u14BE\x07\xD3\x02" +
		"\x02\u14B2\u14BE\x07\xDB\x02\x02\u14B3\u14BE\x07\xE1\x02\x02\u14B4\u14BE" +
		"\x07\xE4\x02\x02\u14B5\u14BE\x07\xF2\x02\x02\u14B6\u14BE\x07\xF9\x02\x02" +
		"\u14B7\u14BE\x07\xFE\x02\x02\u14B8\u14BE\x07\u0109\x02\x02\u14B9\u14BA" +
		"\x07\u0102\x02\x02\u14BA\u14BB\x07\xDE\x02\x02\u14BB\u14BE\t \x02\x02" +
		"\u14BC\u14BE\x07\u01B6\x02\x02\u14BD\u1493\x03\x02\x02\x02\u14BD\u1495" +
		"\x03\x02\x02\x02\u14BD\u1496\x03\x02\x02\x02\u14BD\u1497\x03\x02\x02\x02" +
		"\u14BD\u1498\x03\x02\x02\x02\u14BD\u1499\x03\x02\x02\x02\u14BD\u149B\x03" +
		"\x02\x02\x02\u14BD\u149C\x03\x02\x02\x02\u14BD\u149E\x03\x02\x02\x02\u14BD" +
		"\u14A1\x03\x02\x02\x02\u14BD\u14A4\x03\x02\x02\x02\u14BD\u14A9\x03\x02" +
		"\x02\x02\u14BD\u14AD\x03\x02\x02\x02\u14BD\u14B0\x03\x02\x02\x02\u14BD" +
		"\u14B1\x03\x02\x02\x02\u14BD\u14B2\x03\x02\x02\x02\u14BD\u14B3\x03\x02" +
		"\x02\x02\u14BD\u14B4\x03\x02\x02\x02\u14BD\u14B5\x03\x02\x02\x02\u14BD" +
		"\u14B6\x03\x02\x02\x02\u14BD\u14B7\x03\x02\x02\x02\u14BD\u14B8\x03\x02" +
		"\x02\x02\u14BD\u14B9\x03\x02\x02\x02\u14BD\u14BC\x03\x02\x02\x02\u14BE" +
		"\u14BF\x03\x02\x02\x02\u14BF\u14C0\x05\u020C\u0107\x02\u14C0\u020B\x03" +
		"\x02\x02\x02\u14C1\u14C3\x05\u0198\xCD\x02\u14C2\u14C1\x03\x02\x02\x02" +
		"\u14C2\u14C3\x03\x02\x02\x02\u14C3\u14C4\x03\x02\x02\x02\u14C4\u14C6\x05" +
		"\u01DA\xEE\x02\u14C5\u14C7\x05\u01F8\xFD\x02\u14C6\u14C5\x03\x02\x02\x02" +
		"\u14C6\u14C7\x03\x02\x02\x02\u14C7\u020D\x03\x02\x02\x02\u14C8\u14CC\x07" +
		"\u0265\x02\x02\u14C9\u14CC\x07\u0266\x02\x02\u14CA\u14CC\x05\u021E\u0110" +
		"\x02\u14CB\u14C8\x03\x02\x02\x02\u14CB\u14C9\x03\x02\x02\x02\u14CB\u14CA" +
		"\x03\x02\x02\x02\u14CC\u020F\x03\x02\x02\x02\u14CD\u14D1\x05\u020E\u0108" +
		"\x02\u14CE\u14D1\x05\u0216\u010C\x02\u14CF\u14D1\x05\u0218\u010D\x02\u14D0" +
		"\u14CD\x03\x02\x02\x02\u14D0\u14CE\x03\x02\x02\x02\u14D0\u14CF\x03\x02" +
		"\x02\x02\u14D1\u0211\x03\x02\x02\x02\u14D2\u14D6\x05\u020E\u0108\x02\u14D3" +
		"\u14D6\x05\u0216\u010C\x02\u14D4\u14D6\x05\u021A\u010E\x02\u14D5\u14D2" +
		"\x03\x02\x02\x02\u14D5\u14D3\x03\x02\x02\x02\u14D5\u14D4\x03\x02\x02\x02" +
		"\u14D6\u0213\x03\x02\x02\x02\u14D7\u14DD\x05\u020E\u0108\x02\u14D8\u14DD" +
		"\x05\u021C\u010F\x02\u14D9\u14DD\x05\u0216\u010C\x02\u14DA\u14DD\x05\u021A" +
		"\u010E\x02\u14DB\u14DD\x05\u0218\u010D\x02\u14DC\u14D7\x03\x02\x02\x02" +
		"\u14DC\u14D8\x03\x02\x02\x02\u14DC\u14D9\x03\x02\x02\x02\u14DC\u14DA\x03" +
		"\x02\x02\x02\u14DC\u14DB\x03\x02\x02\x02\u14DD\u0215\x03\x02\x02\x02\u14DE" +
		"\u14DF\tI\x02\x02\u14DF\u0217\x03\x02\x02\x02\u14E0\u14E1\tJ\x02\x02\u14E1" +
		"\u0219\x03\x02\x02\x02\u14E2\u14E3\tK\x02\x02\u14E3\u021B\x03\x02\x02" +
		"\x02\u14E4\u14E5\tL\x02\x02\u14E5\u021D\x03\x02\x02\x02\u14E6\u14E7\t" +
		"M\x02\x02\u14E7\u021F\x03\x02\x02\x02\u14E8\u14EE\x05\u0212\u010A\x02" +
		"\u14E9\u14EA\x05\u0210\u0109\x02";
	private static readonly _serializedATNSegment11: string =
		"\u14EA\u14EB\x07\u0253\x02\x02\u14EB\u14EC\x05\u0212\u010A\x02\u14EC\u14EE" +
		"\x03\x02\x02\x02\u14ED\u14E8\x03\x02\x02\x02\u14ED\u14E9\x03\x02\x02\x02" +
		"\u14EE\u0221\x03\x02\x02\x02\u14EF\u14F4\x05\u0224\u0113\x02\u14F0\u14F1" +
		"\x07\u0245\x02\x02\u14F1\u14F3\x05\u0224\u0113\x02\u14F2\u14F0\x03\x02" +
		"\x02\x02\u14F3\u14F6\x03\x02\x02\x02\u14F4\u14F2\x03\x02\x02\x02\u14F4" +
		"\u14F5\x03\x02\x02\x02\u14F5\u0223\x03\x02\x02\x02\u14F6\u14F4\x03\x02" +
		"\x02\x02\u14F7\u14F9\x07\u0145\x02\x02\u14F8\u14F7\x03\x02\x02\x02\u14F8" +
		"\u14F9\x03\x02\x02\x02\u14F9\u14FA\x03\x02\x02\x02\u14FA\u1504\x05\u0228" +
		"\u0115\x02\u14FB\u14FD\x07\u0175\x02\x02\u14FC\u14FE\x05\u0226\u0114\x02" +
		"\u14FD\u14FC\x03\x02\x02\x02\u14FD\u14FE\x03\x02\x02\x02\u14FE\u1505\x03" +
		"\x02\x02\x02\u14FF\u1501\x05\u0226\u0114\x02\u1500\u14FF\x03\x02\x02\x02" +
		"\u1501\u1502\x03\x02\x02\x02\u1502\u1500\x03\x02\x02\x02\u1502\u1503\x03" +
		"\x02\x02\x02\u1503\u1505\x03\x02\x02\x02\u1504\u14FB\x03\x02\x02\x02\u1504" +
		"\u1500\x03\x02\x02\x02\u1504\u1505\x03\x02\x02\x02\u1505\u0225\x03\x02" +
		"\x02\x02\u1506\u1508\x07\u0257\x02\x02\u1507\u1509\x07\u0262\x02\x02\u1508" +
		"\u1507\x03\x02\x02\x02\u1508\u1509\x03\x02\x02\x02\u1509\u150A\x03\x02" +
		"\x02\x02\u150A\u150B\x07\u0258\x02\x02\u150B\u0227\x03\x02\x02\x02\u150C" +
		"\u1568\x07\u0128\x02\x02\u150D\u150F\x07\u0129\x02\x02\u150E\u1510\x07" +
		"\u0118\x02\x02\u150F\u150E\x03\x02\x02\x02\u150F\u1510\x03\x02\x02\x02" +
		"\u1510\u1512\x03\x02\x02\x02\u1511\u1513\x05\u022C\u0117\x02\u1512\u1511" +
		"\x03\x02\x02\x02\u1512\u1513\x03\x02\x02\x02\u1513\u1568\x03\x02\x02\x02" +
		"\u1514\u1568\x07\u012A\x02\x02\u1515\u1517\x07\u012E\x02\x02\u1516\u1518" +
		"\x05\u022E\u0118\x02\u1517\u1516\x03\x02\x02\x02\u1517\u1518\x03\x02\x02" +
		"\x02\u1518\u1568\x03\x02\x02\x02\u1519\u151B\x07\u012F\x02\x02\u151A\u151C" +
		"\x05\u022E\u0118\x02\u151B\u151A\x03\x02\x02\x02\u151B\u151C\x03\x02\x02" +
		"\x02\u151C\u1568\x03\x02\x02\x02\u151D\u151E\x07H\x02\x02\u151E\u1568" +
		"\x07\u0142\x02\x02\u151F\u1521\x07\u0132\x02\x02\u1520\u1522\x05\u022E" +
		"\u0118\x02\u1521\u1520\x03\x02\x02\x02\u1521\u1522\x03\x02\x02\x02\u1522" +
		"\u1568\x03\x02\x02\x02\u1523\u1568\x07\u0136\x02\x02\u1524\u1568\x07\u0137" +
		"\x02\x02\u1525\u1527\x07\u0138\x02\x02\u1526\u1528\x05\u022A\u0116\x02" +
		"\u1527\u1526\x03\x02\x02\x02\u1527\u1528\x03\x02\x02\x02\u1528\u152A\x03" +
		"\x02\x02\x02\u1529\u152B\x05\u022C\u0117\x02\u152A\u1529\x03\x02\x02\x02" +
		"\u152A\u152B\x03\x02\x02\x02\u152B\u1568\x03\x02\x02\x02\u152C\u152E\x07" +
		"\u013A\x02\x02\u152D\u152C\x03\x02\x02\x02\u152D\u152E\x03\x02\x02\x02" +
		"\u152E\u152F\x03\x02\x02\x02\u152F\u1531\tN\x02\x02\u1530\u1532\x07\u0118" +
		"\x02\x02\u1531\u1530\x03\x02\x02\x02\u1531\u1532\x03\x02\x02\x02\u1532" +
		"\u1534\x03\x02\x02\x02\u1533\u1535\x05\u022C\u0117\x02\u1534\u1533\x03" +
		"\x02\x02\x02\u1534\u1535\x03\x02\x02\x02\u1535\u1568\x03\x02\x02\x02\u1536" +
		"\u1538\x07\u013B\x02\x02\u1537\u1539\x07\u0118\x02\x02\u1538\u1537\x03" +
		"\x02\x02\x02\u1538\u1539\x03\x02\x02\x02\u1539\u153B\x03\x02\x02\x02\u153A" +
		"\u153C\x05\u022C\u0117\x02\u153B\u153A\x03\x02\x02\x02\u153B\u153C\x03" +
		"\x02\x02\x02\u153C\u1568\x03\x02\x02\x02\u153D\u153F\x07\u013E\x02\x02" +
		"\u153E\u1540\x05\u022E\u0118\x02\u153F\u153E\x03\x02\x02\x02\u153F\u1540" +
		"\x03\x02\x02\x02\u1540\u1568\x03\x02\x02\x02\u1541\u1568\x07\u0143\x02" +
		"\x02\u1542\u1568\x07\u0146\x02\x02\u1543\u1545\x07\u0148\x02\x02\u1544" +
		"\u1546\x05\u022C\u0117\x02\u1545\u1544\x03\x02\x02\x02\u1545\u1546\x03" +
		"\x02\x02\x02\u1546\u154A\x03\x02\x02\x02\u1547\u1548\t\n\x02\x02\u1548" +
		"\u1549\x07\u0148\x02\x02\u1549\u154B\x07\u0126\x02\x02\u154A\u1547\x03" +
		"\x02\x02\x02\u154A\u154B\x03\x02\x02\x02\u154B\u1568\x03\x02\x02\x02\u154C" +
		"\u154E\x07\u0149\x02\x02\u154D\u154F\x05\u022C\u0117\x02\u154E\u154D\x03" +
		"\x02\x02\x02\u154E\u154F\x03\x02\x02\x02\u154F\u1553\x03\x02\x02\x02\u1550" +
		"\u1551\t\n\x02\x02\u1551\u1552\x07\u0148\x02\x02\u1552\u1554\x07\u0126" +
		"\x02\x02\u1553\u1550\x03\x02\x02\x02\u1553\u1554\x03\x02\x02\x02\u1554" +
		"\u1568\x03\x02\x02\x02\u1555\u1557\x07\u014D\x02\x02\u1556\u1558\x05\u022C" +
		"\u0117\x02\u1557\u1556\x03\x02\x02\x02\u1557\u1558\x03\x02\x02\x02\u1558" +
		"\u1568\x03\x02\x02\x02\u1559\u1565\x05\u0220\u0111\x02\u155A\u155B\x07" +
		"\u024B\x02\x02\u155B\u1560\x05\u0230\u0119\x02\u155C\u155D\x07\u0245\x02" +
		"\x02\u155D\u155F\x05\u0230\u0119\x02\u155E\u155C\x03\x02\x02\x02\u155F" +
		"\u1562\x03\x02\x02\x02\u1560\u155E\x03\x02\x02\x02\u1560\u1561\x03\x02" +
		"\x02\x02\u1561\u1563\x03\x02\x02\x02\u1562\u1560\x03\x02\x02\x02\u1563" +
		"\u1564\x07\u024C\x02\x02\u1564\u1566\x03\x02\x02\x02\u1565\u155A\x03\x02" +
		"\x02\x02\u1565\u1566\x03\x02\x02\x02\u1566\u1568\x03\x02\x02\x02\u1567" +
		"\u150C\x03\x02\x02\x02\u1567\u150D\x03\x02\x02\x02\u1567\u1514\x03\x02" +
		"\x02\x02\u1567\u1515\x03\x02\x02\x02\u1567\u1519\x03\x02\x02\x02\u1567" +
		"\u151D\x03\x02\x02\x02\u1567\u151F\x03\x02\x02\x02\u1567\u1523\x03\x02" +
		"\x02\x02\u1567\u1524\x03\x02\x02\x02\u1567\u1525\x03\x02\x02\x02\u1567" +
		"\u152D\x03\x02\x02\x02\u1567\u1536\x03\x02\x02\x02\u1567\u153D\x03\x02" +
		"\x02\x02\u1567\u1541\x03\x02\x02\x02\u1567\u1542\x03\x02\x02\x02\u1567" +
		"\u1543\x03\x02\x02\x02\u1567\u154C\x03\x02\x02\x02\u1567\u1555\x03\x02" +
		"\x02\x02\u1567\u1559\x03\x02\x02\x02\u1568\u0229\x03\x02\x02\x02\u1569" +
		"\u1585\x07\u0124\x02\x02\u156A\u1585\x07\x92\x02\x02\u156B\u1585\x078" +
		"\x02\x02\u156C\u1585\x07g\x02\x02\u156D\u1585\x07\x8F\x02\x02\u156E\u1585" +
		"\x07\xDF\x02\x02\u156F\u1570\x07\u0124\x02\x02\u1570\u1571\x07\u01B1\x02" +
		"\x02\u1571\u1585\x07\x92\x02\x02\u1572\u1573\x078\x02\x02\u1573\u1574" +
		"\x07\u01B1\x02\x02\u1574\u1585\x07g\x02\x02\u1575\u1576\x078\x02\x02\u1576" +
		"\u1577\x07\u01B1\x02\x02\u1577\u1585\x07\x8F\x02\x02\u1578\u1579\x078" +
		"\x02\x02\u1579\u157A\x07\u01B1\x02\x02\u157A\u1585\x07\xDF\x02\x02\u157B" +
		"\u157C\x07g\x02\x02\u157C\u157D\x07\u01B1\x02\x02\u157D\u1585\x07\x8F" +
		"\x02\x02\u157E\u157F\x07g\x02\x02\u157F\u1580\x07\u01B1\x02\x02\u1580" +
		"\u1585\x07\xDF\x02\x02\u1581\u1582\x07\x8F\x02\x02\u1582\u1583\x07\u01B1" +
		"\x02\x02\u1583\u1585\x07\xDF\x02\x02\u1584\u1569\x03\x02\x02\x02\u1584" +
		"\u156A\x03\x02\x02\x02\u1584\u156B\x03\x02\x02\x02\u1584\u156C\x03\x02" +
		"\x02\x02\u1584\u156D\x03\x02\x02\x02\u1584\u156E\x03\x02\x02\x02\u1584" +
		"\u156F\x03\x02\x02\x02\u1584\u1572\x03\x02\x02\x02\u1584\u1575\x03\x02" +
		"\x02\x02\u1584\u1578\x03\x02\x02\x02\u1584\u157B\x03\x02\x02\x02\u1584" +
		"\u157E\x03\x02\x02\x02\u1584\u1581\x03\x02\x02\x02\u1585\u022B\x03\x02" +
		"\x02\x02\u1586\u1587\x07\u024B\x02\x02\u1587\u1588\x07\u0262\x02\x02\u1588" +
		"\u1589\x07\u024C\x02\x02\u1589\u022D\x03\x02\x02\x02\u158A\u158B\x07\u024B" +
		"\x02\x02\u158B\u158E\x07\u0262\x02\x02\u158C\u158D\x07\u0245\x02\x02\u158D" +
		"\u158F\x07\u0262\x02\x02\u158E\u158C\x03\x02\x02\x02\u158E\u158F\x03\x02" +
		"\x02\x02\u158F\u1590\x03\x02\x02\x02\u1590\u1591\x07\u024C\x02\x02\u1591" +
		"\u022F\x03\x02\x02\x02\u1592\u1593\b\u0119\x01\x02\u1593\u1594\x07\u024B" +
		"\x02\x02\u1594\u1595\x05\u0230\u0119\x02\u1595\u1597\x07\u024C\x02\x02" +
		"\u1596\u1598\x05\u0200\u0101\x02\u1597\u1596\x03\x02\x02\x02\u1597\u1598" +
		"\x03\x02\x02\x02\u1598\u15AC\x03\x02\x02\x02\u1599\u159A\x07\u024B\x02" +
		"\x02\u159A\u159D\x05\u0230\u0119\x02\u159B\u159C\x07\u0245\x02\x02\u159C" +
		"\u159E\x05\u0230\u0119\x02\u159D\u159B\x03\x02\x02\x02\u159E\u159F\x03" +
		"\x02\x02\x02\u159F\u159D\x03\x02\x02\x02\u159F\u15A0\x03\x02\x02\x02\u15A0" +
		"\u15A1\x03\x02\x02\x02\u15A1\u15A2\x07\u024C\x02\x02\u15A2\u15AC\x03\x02" +
		"\x02\x02\u15A3\u15A4\t8\x02\x02\u15A4\u15AC\x05\u0230\u0119\x1A\u15A5" +
		"\u15A6\x05\u0234\u011B\x02\u15A6\u15A7\x05\u0230\u0119\x14\u15A7\u15AC" +
		"\x03\x02\x02\x02\u15A8\u15A9\x07\u01A0\x02\x02\u15A9\u15AC\x05\u0230\u0119" +
		"\x06\u15AA\u15AC\x05\u023A\u011E\x02\u15AB\u1592\x03\x02\x02\x02\u15AB" +
		"\u1599\x03\x02\x02\x02\u15AB\u15A3\x03\x02\x02\x02\u15AB\u15A5\x03\x02" +
		"\x02\x02\u15AB\u15A8\x03\x02\x02\x02\u15AB\u15AA\x03\x02\x02\x02\u15AC" +
		"\u1634\x03\x02\x02\x02\u15AD\u15AE\f\x19\x02\x02\u15AE\u15AF\x07\x10\x02" +
		"\x02\u15AF\u15B0\x07\u0148\x02\x02\u15B0\u15B1\x07\u0126\x02\x02\u15B1" +
		"\u1633\x05\u0230\u0119\x1A\u15B2\u15B3\f\x18\x02\x02\u15B3\u15B4\x07\u0252" +
		"\x02\x02\u15B4\u1633\x05\u0230\u0119\x19\u15B5\u15B6\f\x17\x02\x02\u15B6" +
		"\u15B7\tO\x02\x02\u15B7\u1633\x05\u0230\u0119\x18\u15B8\u15B9\f\x16\x02" +
		"\x02\u15B9\u15BA\t8\x02\x02\u15BA\u1633\x05\u0230\u0119\x17\u15BB\u15BC" +
		"\f\x15\x02\x02\u15BC\u15BD\x05\u0234\u011B\x02\u15BD\u15BE\x05\u0230\u0119" +
		"\x16\u15BE\u1633\x03\x02\x02\x02\u15BF\u15C1\f\x11\x02\x02\u15C0\u15C2" +
		"\x07\u01A0\x02\x02\u15C1\u15C0\x03\x02\x02\x02\u15C1\u15C2\x03\x02\x02" +
		"\x02\u15C2\u15C3\x03\x02\x02\x02\u15C3\u15C5\x07\u0127\x02\x02\u15C4\u15C6" +
		"\tP\x02\x02\u15C5\u15C4\x03\x02\x02\x02\u15C5\u15C6\x03\x02\x02\x02\u15C6" +
		"\u15C7\x03\x02\x02\x02\u15C7\u15C8\x05\u0232\u011A\x02\u15C8\u15C9\x07" +
		"\u0173\x02\x02\u15C9\u15CA\x05\u0230\u0119\x12\u15CA\u1633\x03\x02\x02" +
		"\x02\u15CB\u15CD\f\x10\x02\x02\u15CC\u15CE\x07\u01A0\x02\x02\u15CD\u15CC" +
		"\x03\x02\x02\x02\u15CD\u15CE\x03\x02\x02\x02\u15CE\u15D3\x03\x02\x02\x02" +
		"\u15CF\u15D4\x07\u0167\x02\x02\u15D0\u15D4\x07\u0161\x02\x02\u15D1\u15D2" +
		"\x07\u016D\x02\x02\u15D2\u15D4\x07\u01B1\x02\x02\u15D3\u15CF\x03\x02\x02" +
		"\x02\u15D3\u15D0\x03\x02\x02\x02\u15D3\u15D1\x03\x02\x02\x02\u15D4\u15D5" +
		"\x03\x02\x02\x02\u15D5\u1633\x05\u0230\u0119\x11\u15D6\u15D8\f\x0F\x02" +
		"\x02\u15D7\u15D9\x07\u01A0\x02\x02\u15D8\u15D7\x03\x02\x02\x02\u15D8\u15D9" +
		"\x03\x02\x02\x02\u15D9\u15DE\x03\x02\x02\x02\u15DA\u15DF\x07\u0167\x02" +
		"\x02\u15DB\u15DF\x07\u0161\x02\x02\u15DC\u15DD\x07\u016D\x02\x02\u15DD" +
		"\u15DF\x07\u01B1\x02\x02\u15DE\u15DA\x03\x02\x02\x02\u15DE\u15DB\x03\x02" +
		"\x02\x02\u15DE\u15DC\x03\x02\x02\x02\u15DF\u15E0\x03\x02\x02\x02\u15E0" +
		"\u15E1\x05\u0230\u0119\x02\u15E1\u15E2\x07O\x02\x02\u15E2\u15E3\x05\u0230" +
		"\u0119\x10\u15E3\u1633\x03\x02\x02\x02\u15E4\u15E5\f\x0E\x02\x02\u15E5" +
		"\u15E6\tQ\x02\x02\u15E6\u1633\x05\u0230\u0119\x0F\u15E7\u15E8\f\f\x02" +
		"\x02\u15E8\u15EA\x07\u0163\x02\x02\u15E9\u15EB\x07\u01A0\x02\x02\u15EA" +
		"\u15E9\x03\x02\x02\x02\u15EA\u15EB\x03\x02\x02\x02\u15EB\u15EC\x03\x02" +
		"\x02\x02\u15EC\u15ED\x07\u018A\x02\x02\u15ED\u15EE\x07\u0193\x02\x02\u15EE" +
		"\u1633\x05\u0230\u0119\r\u15EF\u15F0\f\x05\x02\x02\u15F0\u15F1\x07\u0173" +
		"\x02\x02\u15F1\u1633\x05\u0230\u0119\x06\u15F2\u15F3\f\x04\x02\x02\u15F3" +
		"\u15F4\x07\u01A5\x02\x02\u15F4\u1633\x05\u0230\u0119\x05\u15F5\u15F6\f" +
		"\x1E\x02\x02\u15F6\u15F7\x07\u0241\x02\x02\u15F7\u1633\x05\u0224\u0113" +
		"\x02\u15F8\u15F9\f\x1B\x02\x02\u15F9\u1633\x05\u01FA\xFE\x02\u15FA\u15FB" +
		"\f\x13\x02\x02\u15FB\u1633\x05\u0234\u011B\x02\u15FC\u15FE\f\x12\x02\x02" +
		"\u15FD\u15FF\x07\u01A0\x02\x02\u15FE\u15FD\x03\x02\x02\x02\u15FE\u15FF" +
		"\x03\x02\x02\x02\u15FF\u1600\x03\x02\x02\x02\u1600\u1601\x07\u0197\x02" +
		"\x02\u1601\u160B\x07\u024B\x02\x02\u1602\u160C\x05\u0274\u013B\x02\u1603" +
		"\u1608\x05\u0230\u0119\x02\u1604\u1605\x07\u0245\x02\x02\u1605\u1607\x05" +
		"\u0230\u0119\x02\u1606\u1604\x03\x02\x02\x02\u1607\u160A\x03\x02\x02\x02" +
		"\u1608\u1606\x03\x02\x02\x02\u1608\u1609\x03\x02\x02\x02\u1609\u160C\x03" +
		"\x02\x02\x02\u160A\u1608\x03\x02\x02\x02\u160B\u1602\x03\x02\x02\x02\u160B" +
		"\u1603\x03\x02\x02\x02\u160C\u160D\x03\x02\x02\x02\u160D\u160E\x07\u024C" +
		"\x02\x02\u160E\u1633\x03\x02\x02\x02\u160F\u1610\f\r\x02\x02\u1610\u1612" +
		"\x07\u0163\x02\x02\u1611\u1613\x07\u01A0\x02\x02\u1612\u1611\x03\x02\x02" +
		"\x02\u1612\u1613\x03\x02\x02\x02\u1613\u1616\x03\x02\x02\x02\u1614\u1617" +
		"\x05\u0240\u0121\x02\u1615\u1617\x07\u01A1\x02\x02\u1616\u1614\x03\x02" +
		"\x02\x02\u1616\u1615\x03\x02\x02\x02\u1617\u1633\x03\x02\x02\x02\u1618" +
		"\u1619\f\v\x02\x02\u1619\u161B\x07\u0163\x02\x02\u161A\u161C\x07\u01A0" +
		"\x02\x02\u161B\u161A\x03\x02\x02\x02\u161B\u161C\x03\x02\x02\x02\u161C" +
		"\u161D\x03\x02\x02\x02\u161D\u1633\x07F\x02\x02\u161E\u161F\f\n\x02\x02" +
		"\u161F\u1621\x07\u0163\x02\x02\u1620\u1622\x07\u01A0\x02\x02\u1621\u1620" +
		"\x03\x02\x02\x02\u1621\u1622\x03\x02\x02\x02\u1622\u1623\x03\x02\x02\x02" +
		"\u1623\u1633\x07\u010E\x02\x02\u1624\u1625\f\t\x02\x02\u1625\u1627\x07" +
		"\u0163\x02\x02\u1626\u1628\x07\u01A0\x02\x02\u1627\u1626\x03\x02\x02\x02" +
		"\u1627\u1628\x03\x02\x02\x02\u1628\u1629\x03\x02\x02\x02\u1629\u162A\x07" +
		"\x9E\x02\x02\u162A\u162B\x07\u024B\x02\x02\u162B\u162C\x05\u0222\u0112" +
		"\x02\u162C\u162D\x07\u024C\x02\x02\u162D\u1633\x03\x02\x02\x02\u162E\u162F" +
		"\f\b\x02\x02\u162F\u1633\x07\u0164\x02\x02\u1630\u1631\f\x07\x02\x02\u1631" +
		"\u1633\x07\u0169\x02\x02\u1632\u15AD\x03\x02\x02\x02\u1632\u15B2\x03\x02" +
		"\x02\x02\u1632\u15B5\x03\x02\x02\x02\u1632\u15B8\x03\x02\x02\x02\u1632" +
		"\u15BB\x03\x02\x02\x02\u1632\u15BF\x03\x02\x02\x02\u1632\u15CB\x03\x02" +
		"\x02\x02\u1632\u15D6\x03\x02\x02\x02\u1632\u15E4\x03\x02\x02\x02\u1632" +
		"\u15E7\x03\x02\x02\x02\u1632\u15EF\x03\x02\x02\x02\u1632\u15F2\x03\x02" +
		"\x02\x02\u1632\u15F5\x03\x02\x02\x02\u1632\u15F8\x03\x02\x02\x02\u1632" +
		"\u15FA\x03\x02\x02\x02\u1632\u15FC\x03\x02\x02\x02\u1632\u160F\x03\x02" +
		"\x02\x02\u1632\u1618\x03\x02\x02\x02\u1632\u161E\x03\x02\x02\x02\u1632" +
		"\u1624\x03\x02\x02\x02\u1632\u162E\x03\x02\x02\x02\u1632\u1630\x03\x02" +
		"\x02\x02\u1633\u1636\x03\x02\x02\x02\u1634\u1632\x03\x02\x02\x02\u1634" +
		"\u1635\x03\x02\x02\x02\u1635\u0231\x03\x02\x02\x02\u1636\u1634\x03\x02" +
		"\x02\x02\u1637\u1638\b\u011A\x01\x02\u1638\u1639\x07\u024B\x02\x02\u1639" +
		"\u163A\x05\u0230\u0119\x02\u163A\u163C\x07\u024C\x02\x02\u163B\u163D\x05" +
		"\u0200\u0101\x02\u163C\u163B\x03\x02\x02\x02\u163C\u163D\x03\x02\x02\x02" +
		"\u163D\u164F\x03\x02\x02\x02\u163E\u163F\x07\u024B\x02\x02\u163F\u1642" +
		"\x05\u0230\u0119\x02\u1640\u1641\x07\u0245\x02\x02\u1641\u1643\x05\u0230" +
		"\u0119\x02\u1642\u1640\x03\x02\x02\x02\u1643\u1644\x03\x02\x02\x02\u1644" +
		"\u1642\x03\x02\x02\x02\u1644\u1645\x03\x02\x02\x02\u1645\u1646\x03\x02" +
		"\x02\x02\u1646\u1647\x07\u024C\x02\x02\u1647\u164F\x03\x02\x02\x02\u1648" +
		"\u1649\t8\x02\x02\u1649\u164F\x05\u0232\u011A\x0F\u164A\u164B\x05\u0234" +
		"\u011B\x02\u164B\u164C\x05\u0232\u011A\n\u164C\u164F\x03\x02\x02\x02\u164D" +
		"\u164F\x05\u023A\u011E\x02\u164E\u1637\x03\x02\x02\x02\u164E\u163E\x03" +
		"\x02\x02\x02\u164E\u1648\x03\x02\x02\x02\u164E\u164A\x03\x02\x02\x02\u164E" +
		"\u164D\x03\x02\x02\x02\u164F\u1685\x03\x02\x02\x02\u1650\u1651\f\x0E\x02" +
		"\x02\u1651\u1652\x07\u0252\x02\x02\u1652\u1684\x05\u0232\u011A\x0F\u1653" +
		"\u1654\f\r\x02\x02\u1654\u1655\tO\x02\x02\u1655\u1684\x05\u0232\u011A" +
		"\x0E\u1656\u1657\f\f\x02\x02\u1657\u1658\t8\x02\x02\u1658\u1684\x05\u0232" +
		"\u011A\r\u1659\u165A\f\v\x02\x02\u165A\u165B\x05\u0234\u011B\x02\u165B" +
		"\u165C\x05\u0232\u011A\f\u165C\u1684\x03\x02\x02\x02\u165D\u165E\f\b\x02" +
		"\x02\u165E\u165F\tQ\x02\x02\u165F\u1684\x05\u0232\u011A\t\u1660\u1661" +
		"\f\x07\x02\x02\u1661\u1663\x07\u0163\x02\x02\u1662\u1664\x07\u01A0\x02" +
		"\x02\u1663\u1662\x03\x02\x02\x02\u1663\u1664\x03\x02\x02\x02\u1664\u1665" +
		"\x03\x02\x02\x02\u1665\u1666\x07\u018A\x02\x02\u1666\u1667\x07\u0193\x02" +
		"\x02\u1667\u1684\x05\u0232\u011A\b\u1668\u1669\f\x12\x02\x02\u1669\u166A" +
		"\x07\u0241\x02\x02\u166A\u1684\x05\u0224\u0113\x02\u166B\u166C\f\t\x02" +
		"\x02\u166C\u1684\x05\u0234\u011B\x02\u166D\u166E\f\x06\x02\x02\u166E\u1670" +
		"\x07\u0163\x02\x02\u166F\u1671\x07\u01A0\x02\x02\u1670\u166F\x03\x02\x02" +
		"\x02\u1670\u1671\x03\x02\x02\x02\u1671\u1672\x03\x02\x02\x02\u1672\u1684" +
		"\x07F\x02\x02\u1673\u1674\f\x05\x02\x02\u1674\u1676\x07\u0163\x02\x02" +
		"\u1675\u1677\x07\u01A0\x02\x02\u1676\u1675\x03\x02\x02\x02\u1676\u1677" +
		"\x03\x02\x02\x02\u1677\u1678\x03\x02\x02\x02\u1678\u1684\x07\u010E\x02" +
		"\x02\u1679\u167A\f\x04\x02\x02\u167A\u167C\x07\u0163\x02\x02\u167B\u167D" +
		"\x07\u01A0\x02\x02\u167C\u167B\x03\x02\x02\x02\u167C\u167D\x03\x02\x02" +
		"\x02\u167D\u167E\x03\x02\x02\x02\u167E\u167F\x07\x9E\x02\x02\u167F\u1680" +
		"\x07\u024B\x02\x02\u1680\u1681\x05\u0222\u0112\x02\u1681\u1682\x07\u024C" +
		"\x02\x02\u1682\u1684\x03\x02\x02\x02\u1683\u1650\x03\x02\x02\x02\u1683" +
		"\u1653\x03\x02\x02\x02\u1683\u1656\x03\x02\x02\x02\u1683\u1659\x03\x02" +
		"\x02\x02\u1683\u165D\x03\x02\x02\x02\u1683\u1660\x03\x02\x02\x02\u1683" +
		"\u1668\x03\x02\x02\x02\u1683\u166B\x03\x02\x02\x02\u1683\u166D\x03\x02" +
		"\x02\x02\u1683\u1673\x03\x02\x02\x02\u1683\u1679\x03\x02\x02\x02\u1684" +
		"\u1687\x03\x02\x02\x02\u1685\u1683\x03\x02\x02\x02\u1685\u1686\x03\x02" +
		"\x02\x02\u1686\u0233\x03\x02\x02\x02\u1687\u1685\x03\x02\x02\x02\u1688" +
		"\u1691\x05\u01D4\xEB\x02\u1689\u168A\x07\xA2\x02\x02\u168A\u168B\x07\u024B" +
		"\x02\x02\u168B\u168C\x05\u0210\u0109\x02\u168C\u168D\x07\u0253\x02\x02" +
		"\u168D\u168E\x05\u01D2\xEA\x02\u168E\u168F\x07\u024C\x02\x02\u168F\u1691" +
		"\x03\x02\x02\x02\u1690\u1688\x03\x02\x02\x02\u1690\u1689\x03\x02\x02\x02" +
		"\u1691\u0235\x03\x02\x02\x02\u1692\u169B\x05\u01D2\xEA\x02\u1693\u1694" +
		"\x07\xA2\x02\x02\u1694\u1695\x07\u024B\x02\x02\u1695\u1696\x05\u0210\u0109" +
		"\x02\u1696\u1697\x07\u0253\x02\x02\u1697\u1698\x05\u01D2\xEA\x02\u1698" +
		"\u1699\x07\u024C\x02\x02\u1699\u169B\x03\x02\x02\x02\u169A\u1692\x03\x02" +
		"\x02\x02\u169A\u1693\x03\x02\x02\x02\u169B\u0237\x03\x02\x02\x02\u169C" +
		"\u169D\x07\u024B\x02\x02\u169D\u169E\x05\u0230\u0119\x02\u169E\u169F\x07" +
		"\u0245\x02\x02\u169F\u16A0\x05\u0230\u0119\x02\u16A0\u16A1\x07\u024C\x02" +
		"\x02\u16A1\u16A2\x07\u016B\x02\x02\u16A2\u16A3\x07\u024B\x02\x02\u16A3" +
		"\u16A4\x05\u0230\u0119\x02\u16A4\u16A5\x07\u0245\x02\x02\u16A5\u16A6\x05" +
		"\u0230\u0119\x02\u16A6\u16A7\x07\u024C\x02\x02\u16A7\u0239\x03\x02\x02" +
		"\x02\u16A8\u16BB\x05\u023C\u011F\x02\u16A9\u16AA\x07\u024B\x02\x02\u16AA" +
		"\u16AB\x05\u0274\u013B\x02\u16AB\u16AD\x07\u024C\x02\x02\u16AC\u16AE\x05" +
		"\u0200\u0101\x02\u16AD\u16AC\x03\x02\x02\x02\u16AD\u16AE\x03\x02\x02\x02" +
		"\u16AE\u16BB\x03\x02\x02\x02\u16AF\u16BB\x05\u0242\u0122\x02\u16B0\u16BB" +
		"\x07\u01A1\x02\x02\u16B1\u16BB\x07\u024F\x02\x02\u16B2\u16BB\x05\u025A" +
		"\u012E\x02\u16B3\u16B4\x07\u0130\x02\x02\u16B4\u16BB\x05\u026E\u0138\x02" +
		"\u16B5\u16BB\x05\u0246\u0124\x02\u16B6\u16BB\x05\u01FC\xFF\x02\u16B7\u16BB" +
		"\x05\u0264\u0133\x02\u16B8\u16BB\x05\u0268\u0135\x02\u16B9\u16BB\x05\u0238" +
		"\u011D\x02\u16BA\u16A8\x03\x02\x02\x02\u16BA\u16A9\x03\x02\x02\x02\u16BA" +
		"\u16AF\x03\x02\x02\x02\u16BA\u16B0\x03\x02\x02\x02\u16BA\u16B1\x03\x02" +
		"\x02\x02\u16BA\u16B2\x03\x02\x02\x02\u16BA\u16B3\x03\x02\x02\x02\u16BA" +
		"\u16B5\x03\x02\x02\x02\u16BA\u16B6\x03\x02\x02\x02\u16BA\u16B7\x03\x02" +
		"\x02\x02\u16BA\u16B8\x03\x02\x02\x02\u16BA\u16B9\x03\x02\x02\x02\u16BB" +
		"\u023B\x03\x02\x02\x02\u16BC\u16C0\x05\u023E\u0120\x02\u16BD\u16C0\x05" +
		"\u0146\xA4\x02\u16BE\u16C0\x05\u0240\u0121\x02\u16BF\u16BC\x03\x02\x02" +
		"\x02\u16BF\u16BD\x03\x02\x02\x02\u16BF\u16BE\x03\x02\x02\x02\u16C0\u023D" +
		"\x03\x02\x02\x02\u16C1\u16C2\tR\x02\x02\u16C2\u023F\x03\x02\x02\x02\u16C3" +
		"\u16C4\tS\x02\x02\u16C4\u0241\x03\x02\x02\x02\u16C5\u16C7\x07\u017A\x02" +
		"\x02\u16C6\u16C8\x05\u0230\u0119\x02\u16C7\u16C6\x03\x02\x02\x02\u16C7" +
		"\u16C8\x03\x02\x02\x02\u16C8\u16CE\x03\x02\x02\x02\u16C9\u16CA\x07\u01B9" +
		"\x02\x02\u16CA\u16CB\x05\u0230\u0119\x02\u16CB\u16CC\x07\u01B0\x02\x02" +
		"\u16CC\u16CD\x05\u0230\u0119\x02\u16CD\u16CF\x03\x02\x02\x02\u16CE\u16C9" +
		"\x03\x02\x02\x02\u16CF\u16D0\x03\x02\x02\x02\u16D0\u16CE\x03\x02\x02\x02" +
		"\u16D0\u16D1\x03\x02\x02\x02\u16D1\u16D4\x03\x02\x02\x02\u16D2\u16D3\x07" +
		"\u018C\x02\x02\u16D3\u16D5\x05\u0230\u0119\x02\u16D4\u16D2\x03\x02\x02" +
		"\x02\u16D4\u16D5\x03\x02\x02\x02\u16D5\u16D6\x03\x02\x02\x02\u16D6\u16D7" +
		"\x07\u018D\x02\x02\u16D7\u0243\x03\x02\x02\x02\u16D8\u16D9\tT\x02\x02" +
		"\u16D9\u16DA\x07\u024B\x02\x02\u16DA\u16DB\x05\u0230\u0119\x02\u16DB\u16DC" +
		"\x07\u0176\x02\x02\u16DC\u16DD\x05\u0224\u0113\x02\u16DD\u16DE\x07\u024C" +
		"\x02\x02\u16DE\u0245\x03\x02\x02\x02\u16DF\u16E0\x05\u0220\u0111\x02\u16E0" +
		"\u16EF\x07\u024B\x02\x02\u16E1\u16E3\x05\u026C\u0137\x02\u16E2\u16E1\x03" +
		"\x02\x02\x02\u16E2\u16E3\x03\x02\x02\x02\u16E3\u16E4\x03\x02\x02\x02\u16E4" +
		"\u16E9\x05\u0248\u0125\x02\u16E5\u16E6\x07\u0245\x02\x02\u16E6\u16E8\x05" +
		"\u0248\u0125\x02\u16E7\u16E5\x03\x02\x02\x02\u16E8\u16EB\x03\x02\x02\x02" +
		"\u16E9\u16E7\x03\x02\x02\x02\u16E9\u16EA\x03\x02\x02\x02\u16EA\u16ED\x03" +
		"\x02\x02\x02\u16EB\u16E9\x03\x02\x02\x02\u16EC\u16EE\x05\u0298\u014D\x02" +
		"\u16ED\u16EC\x03\x02\x02\x02\u16ED\u16EE\x03\x02\x02\x02\u16EE\u16F0\x03" +
		"\x02\x02\x02\u16EF\u16E2\x03\x02\x02\x02\u16EF\u16F0\x03\x02\x02\x02\u16F0" +
		"\u16F1\x03\x02\x02\x02\u16F1\u16F8\x07\u024C\x02\x02\u16F2\u16F3\x07\u011E" +
		"\x02\x02\u16F3\u16F4\x07\u0195\x02\x02\u16F4\u16F5\x07\u024B\x02\x02\u16F5" +
		"\u16F6\x05\u0298\u014D\x02\u16F6\u16F7\x07\u024C\x02\x02\u16F7\u16F9\x03" +
		"\x02\x02\x02\u16F8\u16F2\x03\x02\x02\x02\u16F8\u16F9\x03\x02\x02\x02\u16F9" +
		"\u16FB\x03\x02\x02\x02\u16FA\u16FC\x05\u025C\u012F\x02\u16FB\u16FA\x03" +
		"\x02\x02\x02\u16FB\u16FC\x03\x02\x02\x02\u16FC\u1702\x03\x02\x02\x02\u16FD" +
		"\u1700\x07\xA7\x02\x02\u16FE\u1701\x05\u0210\u0109\x02\u16FF\u1701\x05" +
		"\u025E\u0130\x02\u1700\u16FE\x03\x02\x02\x02\u1700\u16FF\x03\x02\x02\x02" +
		"\u1701\u1703\x03\x02\x02\x02\u1702\u16FD\x03\x02\x02\x02\u1702\u1703\x03" +
		"\x02\x02\x02\u1703\u170B\x03\x02\x02\x02\u1704\u170B\x05\u024C\u0127\x02" +
		"\u1705\u170B\x05\u024E\u0128\x02\u1706\u170B\x05\u0250\u0129\x02\u1707" +
		"\u170B\x05\u0252\u012A\x02\u1708\u170B\x05\u0254\u012B\x02\u1709\u170B" +
		"\x05\u0256\u012C\x02\u170A\u16DF\x03\x02\x02\x02\u170A\u1704\x03\x02\x02" +
		"\x02\u170A\u1705\x03\x02\x02\x02\u170A\u1706\x03\x02\x02\x02\u170A\u1707" +
		"\x03\x02\x02\x02\u170A\u1708\x03\x02\x02\x02\u170A\u1709\x03\x02\x02\x02" +
		"\u170B\u0247\x03\x02\x02\x02\u170C\u170E\x07\u01B8\x02\x02\u170D\u170C" +
		"\x03\x02\x02\x02\u170D\u170E\x03\x02\x02\x02\u170E\u1712\x03\x02\x02\x02" +
		"\u170F\u1710\x05\u0210\u0109\x02\u1710\u1711\x05\u024A\u0126\x02\u1711" +
		"\u1713\x03\x02\x02\x02\u1712\u170F\x03\x02\x02\x02\u1712\u1713\x03\x02" +
		"\x02\x02\u1713\u1714\x03\x02\x02\x02\u1714\u1715\x05\u0230\u0119\x02\u1715" +
		"\u0249\x03\x02\x02\x02\u1716\u1717\tU\x02\x02\u1717\u024B\x03\x02\x02" +
		"\x02\u1718\u1719\tV\x02\x02\u1719\u171A\x07\u024B\x02\x02\u171A\u171F" +
		"\x05\u0230\u0119\x02\u171B\u171C\x07\u0245\x02\x02\u171C\u171E\x05\u0230" +
		"\u0119\x02\u171D\u171B\x03\x02\x02\x02\u171E\u1721\x03\x02\x02\x02\u171F" +
		"\u171D\x03\x02\x02\x02\u171F\u1720\x03\x02\x02\x02\u1720\u1722\x03\x02" +
		"\x02\x02\u1721\u171F\x03\x02\x02\x02\u1722\u1723\x07\u024C\x02\x02\u1723" +
		"\u1732\x03\x02\x02\x02\u1724\u1725\x07\u0144\x02\x02\u1725\u172E\x07\u024B" +
		"\x02\x02\u1726\u172B\x05\u0230\u0119\x02\u1727\u1728\x07\u0245\x02\x02" +
		"\u1728\u172A\x05\u0230\u0119\x02\u1729\u1727\x03\x02\x02\x02\u172A\u172D" +
		"\x03\x02\x02\x02\u172B\u1729\x03\x02\x02\x02\u172B\u172C\x03\x02\x02\x02" +
		"\u172C\u172F\x03\x02\x02\x02\u172D\u172B\x03\x02\x02\x02\u172E\u1726\x03" +
		"\x02\x02\x02\u172E\u172F\x03\x02\x02\x02\u172F\u1730\x03\x02\x02\x02\u1730" +
		"\u1732\x07\u024C\x02\x02\u1731\u1718\x03\x02\x02\x02\u1731\u1724\x03\x02" +
		"\x02\x02\u1732\u024D\x03\x02\x02\x02\u1733\u1734\x07\u0131\x02\x02\u1734" +
		"\u1737\x07\u024B\x02\x02\u1735\u1738\x05\u0210\u0109\x02\u1736\u1738\x05" +
		"\u0146\xA4\x02\u1737\u1735\x03\x02\x02\x02\u1737\u1736\x03\x02\x02\x02" +
		"\u1738\u1739\x03\x02\x02\x02\u1739\u173A\x07\u0193\x02\x02\u173A\u173B" +
		"\x05\u0230\u0119\x02\u173B\u173C\x07\u024C\x02\x02\u173C\u024F\x03\x02" +
		"\x02\x02\u173D\u1744\x07\u0181\x02\x02\u173E\u1744\x07\u015E\x02\x02\u173F" +
		"\u1744\x07\u0186\x02\x02\u1740\u1744\x07\u01AC\x02\x02\u1741\u1744\x07" +
		"\u01B6\x02\x02\u1742\u1744\x05\u0244\u0123\x02\u1743\u173D\x03\x02\x02" +
		"\x02\u1743\u173E\x03\x02\x02\x02\u1743\u173F\x03\x02\x02\x02\u1743\u1740" +
		"\x03\x02\x02\x02\u1743\u1741\x03\x02\x02\x02\u1743\u1742\x03\x02\x02\x02" +
		"\u1744\u0251\x03\x02\x02\x02\u1745\u1757\x07\u0182\x02\x02\u1746\u1748" +
		"\x07\u0184\x02\x02\u1747\u1749\x05\u022C\u0117\x02\u1748\u1747\x03\x02" +
		"\x02\x02\u1748\u1749\x03\x02\x02\x02\u1749\u1757\x03\x02\x02\x02\u174A" +
		"\u174C\x07\u0185\x02\x02\u174B\u174D\x05\u022C\u0117\x02\u174C\u174B\x03" +
		"\x02\x02\x02\u174C\u174D\x03\x02\x02\x02\u174D\u1757\x03\x02\x02\x02\u174E" +
		"\u1750\x07\u019E\x02\x02\u174F\u1751\x05\u022C\u0117\x02\u1750\u174F\x03" +
		"\x02\x02\x02\u1750\u1751\x03\x02\x02\x02\u1751\u1757\x03\x02\x02\x02\u1752" +
		"\u1754\x07\u019F\x02\x02\u1753\u1755\x05\u022C\u0117\x02\u1754\u1753\x03" +
		"\x02\x02\x02\u1754\u1755\x03\x02\x02\x02\u1755\u1757\x03\x02\x02\x02\u1756" +
		"\u1745\x03\x02\x02\x02\u1756\u1746\x03\x02\x02\x02\u1756\u174A\x03\x02" +
		"\x02\x02\u1756\u174E\x03\x02\x02\x02\u1756\u1752\x03\x02\x02\x02\u1757" +
		"\u0253\x03\x02\x02\x02\u1758\u1759\x07\u014B\x02\x02\u1759\u175B\x07\u024B" +
		"\x02\x02\u175A\u175C\tW\x02\x02\u175B\u175A\x03\x02\x02\x02\u175B\u175C" +
		"\x03\x02\x02\x02\u175C\u1769\x03\x02\x02\x02\u175D\u175E\x05\u0230\u0119" +
		"\x02\u175E\u175F\x07\u0193\x02\x02\u175F\u1760\x05\u0230\u0119\x02\u1760" +
		"\u176A\x03\x02\x02\x02\u1761\u1763\x07\u0193\x02\x02\u1762\u1761\x03\x02" +
		"\x02\x02\u1762\u1763\x03\x02\x02\x02\u1763\u1764\x03\x02\x02\x02\u1764" +
		"\u1767\x05\u0230\u0119\x02\u1765\u1766\x07\u0245\x02\x02\u1766\u1768\x05" +
		"\u0230\u0119\x02\u1767\u1765\x03\x02\x02\x02\u1767\u1768\x03\x02\x02\x02" +
		"\u1768\u176A\x03\x02\x02\x02\u1769\u175D\x03\x02\x02\x02\u1769\u1762\x03" +
		"\x02\x02\x02\u176A\u176B\x03\x02\x02\x02\u176B\u176C\x07\u024C\x02\x02" +
		"\u176C\u179C\x03\x02\x02\x02\u176D\u176E\x07\u0147\x02\x02\u176E\u176F" +
		"\x07\u024B\x02\x02\u176F\u1774\x05\u0230\u0119\x02\u1770\u1771\x07\u0245" +
		"\x02\x02\u1771\u1773\x05\u0230\u0119\x02\u1772\u1770\x03\x02\x02\x02\u1773" +
		"\u1776\x03\x02\x02\x02\u1774\u1772";
	private static readonly _serializedATNSegment12: string =
		"\x03\x02\x02\x02\u1774\u1775\x03\x02\x02\x02\u1775\u1779\x03\x02\x02\x02" +
		"\u1776\u1774\x03\x02\x02\x02\u1777\u1778\x07\u0193\x02\x02\u1778\u177A" +
		"\x05\u0230\u0119\x02\u1779\u1777\x03\x02\x02\x02\u1779\u177A\x03\x02\x02" +
		"\x02\u177A\u177D\x03\x02\x02\x02\u177B\u177C\x07\u0191\x02\x02\u177C\u177E" +
		"\x05\u0230\u0119\x02\u177D\u177B\x03\x02\x02\x02\u177D\u177E\x03\x02\x02" +
		"\x02\u177E\u177F\x03\x02\x02\x02\u177F\u1780\x07\u024C\x02\x02\u1780\u179C" +
		"\x03\x02\x02\x02\u1781\u1782\x07\u0141\x02\x02\u1782\u1783\x07\u024B\x02" +
		"\x02\u1783\u1784\x05\u0232\u011A\x02\u1784\u1785\x07\u0197\x02\x02\u1785" +
		"\u1786\x05\u0230\u0119\x02\u1786\u1787\x07\u024C\x02\x02\u1787\u179C\x03" +
		"\x02\x02\x02\u1788\u1789\x07\u0140\x02\x02\u1789\u178A\x07\u024B\x02\x02" +
		"\u178A\u178B\x05\u0230\u0119\x02\u178B\u178C\x07\u01A7\x02\x02\u178C\u178D" +
		"\x05\u0230\u0119\x02\u178D\u178E\x07\u0193\x02\x02\u178E\u1791\x05\u0230" +
		"\u0119\x02\u178F\u1790\x07\u0191\x02\x02\u1790\u1792\x05\u0230\u0119\x02" +
		"\u1791\u178F\x03\x02\x02\x02\u1791\u1792\x03\x02\x02\x02\u1792\u1793\x03" +
		"\x02\x02\x02\u1793\u1794\x07\u024C\x02\x02\u1794\u179C\x03\x02\x02\x02" +
		"\u1795\u1796\x07\u015B\x02\x02\u1796\u1797\x07\u0191\x02\x02\u1797\u1798" +
		"\x07\u024B\x02\x02\u1798\u1799\x05\u0230\u0119\x02\u1799\u179A\x07\u024C" +
		"\x02\x02\u179A\u179C\x03\x02\x02\x02\u179B\u1758\x03\x02\x02\x02\u179B" +
		"\u176D\x03\x02\x02\x02\u179B\u1781\x03\x02\x02\x02\u179B\u1788\x03\x02" +
		"\x02\x02\u179B\u1795\x03\x02\x02\x02\u179C\u0255\x03\x02\x02\x02\u179D" +
		"\u179E\x07\u0150\x02\x02\u179E\u179F\x07\u024B\x02\x02\u179F\u17A0\x07" +
		"\x94\x02\x02\u17A0\u17B6\x05\u0210\u0109\x02\u17A1\u17A2\x07\u0245\x02" +
		"\x02\u17A2\u17A3\x07\u014E\x02\x02\u17A3\u17A4\x07\u024B\x02\x02\u17A4" +
		"\u17A7\x05\u0230\u0119\x02\u17A5\u17A6\x07\u0176\x02\x02\u17A6\u17A8\x05" +
		"\u0210\u0109\x02\u17A7\u17A5\x03\x02\x02\x02\u17A7\u17A8\x03\x02\x02\x02" +
		"\u17A8\u17B1\x03\x02\x02\x02\u17A9\u17AA\x07\u0245\x02\x02\u17AA\u17AD" +
		"\x05\u0230\u0119\x02\u17AB\u17AC\x07\u0176\x02\x02\u17AC\u17AE\x05\u0210" +
		"\u0109\x02\u17AD\u17AB\x03\x02\x02\x02\u17AD\u17AE\x03\x02\x02\x02\u17AE" +
		"\u17B0\x03\x02\x02\x02\u17AF\u17A9\x03\x02\x02\x02\u17B0\u17B3\x03\x02" +
		"\x02\x02\u17B1\u17AF\x03\x02\x02\x02\u17B1\u17B2\x03\x02\x02\x02\u17B2" +
		"\u17B4\x03\x02\x02\x02\u17B3\u17B1\x03\x02\x02\x02\u17B4\u17B5\x07\u024C" +
		"\x02\x02\u17B5\u17B7\x03\x02\x02\x02\u17B6\u17A1\x03\x02\x02\x02\u17B6" +
		"\u17B7\x03\x02\x02\x02\u17B7\u17BC\x03\x02\x02\x02\u17B8\u17B9\x07\u0245" +
		"\x02\x02\u17B9\u17BB\x05\u0230\u0119\x02\u17BA\u17B8\x03\x02\x02\x02\u17BB" +
		"\u17BE\x03\x02\x02\x02\u17BC\u17BA\x03\x02\x02\x02\u17BC\u17BD\x03\x02" +
		"\x02\x02\u17BD\u17BF\x03\x02\x02\x02\u17BE\u17BC\x03\x02\x02\x02\u17BF" +
		"\u17C0\x07\u024C\x02\x02\u17C0\u183F\x03\x02\x02\x02\u17C1\u17C2\x07\u0152" +
		"\x02\x02\u17C2\u17C3\x07\u024B\x02\x02\u17C3\u17C6\x05\u0230\u0119\x02" +
		"\u17C4\u17C5\x07\u0176\x02\x02\u17C5\u17C7\x05\u0210\u0109\x02\u17C6\u17C4" +
		"\x03\x02\x02\x02\u17C6\u17C7\x03\x02\x02\x02\u17C7\u17D0\x03\x02\x02\x02" +
		"\u17C8\u17C9\x07\u0245\x02\x02\u17C9\u17CC\x05\u0230\u0119\x02\u17CA\u17CB" +
		"\x07\u0176\x02\x02\u17CB\u17CD\x05\u0210\u0109\x02\u17CC\u17CA\x03\x02" +
		"\x02\x02\u17CC\u17CD\x03\x02\x02\x02\u17CD\u17CF\x03\x02\x02\x02\u17CE" +
		"\u17C8\x03\x02\x02\x02\u17CF\u17D2\x03\x02\x02\x02\u17D0\u17CE\x03\x02" +
		"\x02\x02\u17D0\u17D1\x03\x02\x02\x02\u17D1\u17D3\x03\x02\x02\x02\u17D2" +
		"\u17D0\x03\x02\x02\x02\u17D3\u17D4\x07\u024C\x02\x02\u17D4\u183F\x03\x02" +
		"\x02\x02\u17D5\u17D6\x07\u0155\x02\x02\u17D6\u17D7\x07\u024B\x02\x02\u17D7" +
		"\u17D8\x07\x94\x02\x02\u17D8\u17DB\x05\u0210\u0109\x02\u17D9\u17DA\x07" +
		"\u0245\x02\x02\u17DA\u17DC\x05\u0230\u0119\x02\u17DB\u17D9\x03\x02\x02" +
		"\x02\u17DB\u17DC\x03\x02\x02\x02\u17DC\u17DD\x03\x02\x02\x02\u17DD\u17DE" +
		"\x07\u024C\x02\x02\u17DE\u183F\x03\x02\x02\x02\u17DF\u17E0\x07\u0156\x02" +
		"\x02\u17E0\u17E1\x07\u024B\x02\x02\u17E1\u17E2\x05\u0230\u0119\x02\u17E2" +
		"\u17E3\x07\u0245\x02\x02\u17E3\u17E7\x07\u0119\x02\x02\u17E4\u17E8\x05" +
		"\u0230\u0119\x02\u17E5\u17E6\x07\x98\x02\x02\u17E6\u17E8\x07\u0117\x02" +
		"\x02\u17E7\u17E4\x03\x02\x02\x02\u17E7\u17E5\x03\x02\x02\x02\u17E8\u17F1" +
		"\x03\x02\x02\x02\u17E9\u17EA\x07\u0245\x02\x02\u17EA\u17EF\x07\xEF\x02" +
		"\x02\u17EB\u17F0\x07\u0125\x02\x02\u17EC\u17F0\x07\x98\x02\x02\u17ED\u17EE" +
		"\x07\x98\x02\x02\u17EE\u17F0\x07\u0117\x02\x02\u17EF\u17EB\x03\x02\x02" +
		"\x02\u17EF\u17EC\x03\x02\x02\x02\u17EF\u17ED\x03\x02\x02\x02\u17F0\u17F2" +
		"\x03\x02\x02\x02\u17F1\u17E9\x03\x02\x02\x02\u17F1\u17F2\x03\x02\x02\x02" +
		"\u17F2\u17F3\x03\x02\x02\x02\u17F3\u17F4\x07\u024C\x02\x02\u17F4\u183F" +
		"\x03\x02\x02\x02\u17F5\u17F6\x07\u0151\x02\x02\u17F6\u17F7\x07\u024B\x02" +
		"\x02\u17F7\u17F8\x05\u0230\u0119\x02\u17F8\u17FB\x07\xAF\x02\x02\u17F9" +
		"\u17FA\x07\x16\x02\x02\u17FA\u17FC\x07\xC4\x02\x02\u17FB\u17F9\x03\x02" +
		"\x02\x02\u17FB\u17FC\x03\x02\x02\x02\u17FC\u17FD\x03\x02\x02\x02\u17FD" +
		"\u1800\x05\u0230\u0119\x02\u17FE\u17FF\x07\x16\x02\x02\u17FF\u1801\x07" +
		"\xC4\x02\x02\u1800\u17FE\x03\x02\x02\x02\u1800\u1801\x03\x02\x02\x02\u1801" +
		"\u1802\x03\x02\x02\x02\u1802\u1803\x07\u024C\x02\x02\u1803\u183F\x03\x02" +
		"\x02\x02\u1804\u1805\x07\u0154\x02\x02\u1805\u1806\x07\u024B\x02\x02\u1806" +
		"\u1807\t*\x02\x02\u1807\u1808\x05\u0230\u0119\x02\u1808\u1809\x07\u024C" +
		"\x02\x02\u1809\u183F\x03\x02\x02\x02\u180A\u180B\x07\u0157\x02\x02\u180B" +
		"\u180C\x07\u024B\x02\x02\u180C\u180D\t*\x02\x02\u180D\u180E\x05\u0230" +
		"\u0119\x02\u180E\u180F\x07\u0176\x02\x02\u180F\u1810\x05\u0224\u0113\x02" +
		"\u1810\u1811\x07\u024C\x02\x02\u1811\u183F\x03\x02\x02\x02\u1812\u1813" +
		"\x07\u0158\x02\x02\u1813\u1826\x07\u024B\x02\x02\u1814\u1815\x07\u0153" +
		"\x02\x02\u1815\u1816\x07\u024B\x02\x02\u1816\u1817\x05\u0230\u0119\x02" +
		"\u1817\u1818\x07\u0176\x02\x02\u1818\u1820\x05\u0210\u0109\x02\u1819\u181A" +
		"\x07\u0245\x02\x02\u181A\u181B\x05\u0230\u0119\x02\u181B\u181C\x07\u0176" +
		"\x02\x02\u181C\u181D\x05\u0210\u0109\x02\u181D\u181F\x03\x02\x02\x02\u181E" +
		"\u1819\x03\x02\x02\x02\u181F\u1822\x03\x02\x02\x02\u1820\u181E\x03\x02" +
		"\x02\x02\u1820\u1821\x03\x02\x02\x02\u1821\u1823\x03\x02\x02\x02\u1822" +
		"\u1820\x03\x02\x02\x02\u1823\u1824\x07\u024C\x02\x02\u1824\u1825\x07\u0245" +
		"\x02\x02\u1825\u1827\x03\x02\x02\x02\u1826\u1814\x03\x02\x02\x02\u1826" +
		"\u1827\x03\x02\x02\x02\u1827\u1828\x03\x02\x02\x02\u1828\u1829\x05\u0230" +
		"\u0119\x02\u1829\u182C\x07\xAF\x02\x02\u182A\u182B\x07\x16\x02\x02\u182B" +
		"\u182D\x07\xC4\x02\x02\u182C\u182A\x03\x02\x02\x02\u182C\u182D\x03\x02" +
		"\x02\x02\u182D\u182E\x03\x02\x02\x02\u182E\u1831\x05\u0230\u0119\x02\u182F" +
		"\u1830\x07\x16\x02\x02\u1830\u1832\x07\xC4\x02\x02\u1831\u182F\x03\x02" +
		"\x02\x02\u1831\u1832\x03\x02\x02\x02\u1832\u1833\x03\x02\x02\x02\u1833" +
		"\u1834\x07#\x02\x02\u1834\u1839\x05\u0258\u012D\x02\u1835\u1836\x07\u0245" +
		"\x02\x02\u1836\u1838\x05\u0258\u012D\x02\u1837\u1835\x03\x02\x02\x02\u1838" +
		"\u183B\x03\x02\x02\x02\u1839\u1837\x03\x02\x02\x02\u1839\u183A\x03\x02" +
		"\x02\x02\u183A\u183C\x03\x02\x02\x02\u183B\u1839\x03\x02\x02\x02\u183C" +
		"\u183D\x07\u024C\x02\x02\u183D\u183F\x03\x02\x02\x02\u183E\u179D\x03\x02" +
		"\x02\x02\u183E\u17C1\x03\x02\x02\x02\u183E\u17D5\x03\x02\x02\x02\u183E" +
		"\u17DF\x03\x02\x02\x02\u183E\u17F5\x03\x02\x02\x02\u183E\u1804\x03\x02" +
		"\x02\x02\u183E\u180A\x03\x02\x02\x02\u183E\u1812\x03\x02\x02\x02\u183F" +
		"\u0257\x03\x02\x02\x02\u1840\u1852\x05\u0210\u0109\x02\u1841\u1844\x05" +
		"\u0224\u0113\x02\u1842\u1843\x07\u01FD\x02\x02\u1843\u1845\x05\u0230\u0119" +
		"\x02\u1844\u1842\x03\x02\x02\x02\u1844\u1845\x03\x02\x02\x02\u1845\u1848" +
		"\x03\x02\x02\x02\u1846\u1847\x07\u0187\x02\x02\u1847\u1849\x05\u0230\u0119" +
		"\x02\u1848\u1846\x03\x02\x02\x02\u1848\u1849\x03\x02\x02\x02\u1849\u184E" +
		"\x03\x02\x02\x02\u184A\u184C\x07\u01A0\x02\x02\u184B\u184A\x03\x02\x02" +
		"\x02\u184B\u184C\x03\x02\x02\x02\u184C\u184D\x03\x02\x02\x02\u184D\u184F" +
		"\x07\u01A1\x02\x02\u184E\u184B\x03\x02\x02\x02\u184E\u184F\x03\x02\x02" +
		"\x02\u184F\u1853\x03\x02\x02\x02\u1850\u1851\x07\u0191\x02\x02\u1851\u1853" +
		"\x07\xA5\x02\x02\u1852\u1841\x03\x02\x02\x02\u1852\u1850\x03\x02\x02\x02" +
		"\u1853\u0259\x03\x02\x02\x02\u1854\u1855\tX\x02\x02\u1855\u1858\x07\u024B" +
		"\x02\x02\u1856\u1859\x05\u0230\u0119\x02\u1857\u1859\x05\u0274\u013B\x02" +
		"\u1858\u1856\x03\x02\x02\x02\u1858\u1857\x03\x02\x02\x02\u1859\u185A\x03" +
		"\x02\x02\x02\u185A\u185B\x07\u024C\x02\x02\u185B\u025B\x03\x02\x02\x02" +
		"\u185C\u185D\x07Y\x02\x02\u185D\u185E\x07\u024B\x02\x02\u185E\u185F\x07" +
		"\u01BA\x02\x02\u185F\u1860\x05\u0230\u0119\x02\u1860\u1861\x07\u024C\x02" +
		"\x02\u1861\u025D\x03\x02\x02\x02\u1862\u1864\x07\u024B\x02\x02\u1863\u1865" +
		"\x05\u0210\u0109\x02\u1864\u1863\x03\x02\x02\x02\u1864\u1865\x03\x02\x02" +
		"\x02\u1865\u1867\x03\x02\x02\x02\u1866\u1868\x05\u01F6\xFC\x02\u1867\u1866" +
		"\x03\x02\x02\x02\u1867\u1868\x03\x02\x02\x02\u1868\u186A\x03\x02\x02\x02" +
		"\u1869\u186B\x05\u0298\u014D\x02\u186A\u1869\x03\x02\x02\x02\u186A\u186B" +
		"\x03\x02\x02\x02\u186B\u186D\x03\x02\x02\x02\u186C\u186E\x05\u0260\u0131" +
		"\x02\u186D\u186C\x03\x02\x02\x02\u186D\u186E\x03\x02\x02\x02\u186E\u186F" +
		"\x03\x02\x02\x02\u186F\u1870\x07\u024C\x02\x02\u1870\u025F\x03\x02\x02" +
		"\x02\u1871\u1878\tY\x02\x02\u1872\u1879\x05\u0262\u0132\x02\u1873\u1874" +
		"\x07\u0127\x02\x02\u1874\u1875\x05\u0262\u0132\x02\u1875\u1876\x07\u0173" +
		"\x02\x02\u1876\u1877\x05\u0262\u0132\x02\u1877\u1879\x03\x02\x02\x02\u1878" +
		"\u1872\x03\x02\x02\x02\u1878\u1873\x03\x02\x02\x02\u1879\u1883\x03\x02" +
		"\x02\x02\u187A\u1881\x07Q\x02\x02\u187B\u187C\x073\x02\x02\u187C\u1882" +
		"\x07\u0144\x02\x02\u187D\u1882\x07\u0195\x02\x02\u187E\u1882\x07\u0103" +
		"\x02\x02\u187F\u1880\x07\x98\x02\x02\u1880\u1882\x07\xA6\x02\x02\u1881" +
		"\u187B\x03\x02\x02\x02\u1881\u187D\x03\x02\x02\x02\u1881\u187E\x03\x02" +
		"\x02\x02\u1881\u187F\x03\x02\x02\x02\u1882\u1884\x03\x02\x02\x02\u1883" +
		"\u187A\x03\x02\x02\x02\u1883\u1884\x03\x02\x02\x02\u1884\u0261\x03\x02" +
		"\x02\x02\u1885\u1886\x05\u0230\u0119\x02\u1886\u1887\tZ\x02\x02\u1887" +
		"\u188B\x03\x02\x02\x02\u1888\u1889\x073\x02\x02\u1889\u188B\x07\u0144" +
		"\x02\x02\u188A\u1885\x03\x02\x02\x02\u188A\u1888\x03\x02\x02\x02\u188B" +
		"\u0263\x03\x02\x02\x02\u188C\u188F\x07\u0175\x02\x02\u188D\u1890\x05\u0266" +
		"\u0134\x02\u188E\u1890\x05\u026E\u0138\x02\u188F\u188D\x03\x02\x02\x02" +
		"\u188F\u188E\x03\x02\x02\x02\u1890\u0265\x03\x02\x02\x02\u1891\u18A0\x07" +
		"\u0257\x02\x02\u1892\u1895\x05\u0230\u0119\x02\u1893\u1895\x05\u0266\u0134" +
		"\x02\u1894\u1892\x03\x02\x02\x02\u1894\u1893\x03\x02\x02\x02\u1895\u189D" +
		"\x03\x02\x02\x02\u1896\u1899\x07\u0245\x02\x02\u1897\u189A\x05\u0230\u0119" +
		"\x02\u1898\u189A\x05\u0266\u0134\x02\u1899\u1897\x03\x02\x02\x02\u1899" +
		"\u1898\x03\x02\x02\x02\u189A\u189C\x03\x02\x02\x02\u189B\u1896\x03\x02" +
		"\x02\x02\u189C\u189F\x03\x02\x02\x02\u189D\u189B\x03\x02\x02\x02\u189D" +
		"\u189E\x03\x02\x02\x02\u189E\u18A1\x03\x02\x02\x02\u189F\u189D\x03\x02" +
		"\x02\x02\u18A0\u1894\x03\x02\x02\x02\u18A0\u18A1\x03\x02\x02\x02\u18A1" +
		"\u18A2\x03\x02\x02\x02\u18A2\u18A3\x07\u0258\x02\x02\u18A3\u0267\x03\x02" +
		"\x02\x02\u18A4\u18A5\x05\u0224\u0113\x02\u18A5\u18A6\x05\u0146\xA4\x02" +
		"\u18A6\u18AE\x03\x02\x02\x02\u18A7\u18A8\x07\u0138\x02\x02\u18A8\u18A9" +
		"\x05\u0146\xA4\x02\u18A9\u18AB\x05\u022A\u0116\x02\u18AA\u18AC\x05\u022C" +
		"\u0117\x02\u18AB\u18AA\x03\x02\x02\x02\u18AB\u18AC\x03\x02\x02\x02\u18AC" +
		"\u18AE\x03\x02\x02\x02\u18AD\u18A4\x03\x02\x02\x02\u18AD\u18A7\x03\x02" +
		"\x02\x02\u18AE\u0269\x03\x02\x02\x02\u18AF\u18B6\x05\u0210\u0109\x02\u18B0" +
		"\u18B1\x07\u0253\x02\x02\u18B1\u18B4\x05\u0210\u0109\x02\u18B2\u18B3\x07" +
		"\u0253\x02\x02\u18B3\u18B5\x05\u0210\u0109\x02\u18B4\u18B2\x03\x02\x02" +
		"\x02\u18B4\u18B5\x03\x02\x02\x02\u18B5\u18B7\x03\x02\x02\x02\u18B6\u18B0" +
		"\x03\x02\x02\x02\u18B6\u18B7\x03\x02\x02\x02\u18B7\u026B\x03\x02\x02\x02" +
		"\u18B8\u18B9\t[\x02\x02\u18B9\u026D\x03\x02\x02\x02\u18BA\u18BB\x07\u024B" +
		"\x02\x02\u18BB\u18BC\x05\u0270\u0139\x02\u18BC\u18BD\x07\u024C\x02\x02" +
		"\u18BD\u026F\x03\x02\x02\x02\u18BE\u18C0\x05\u0276\u013C\x02\u18BF\u18BE" +
		"\x03\x02\x02\x02\u18BF\u18C0\x03\x02\x02\x02\u18C0\u18C1\x03\x02\x02\x02" +
		"\u18C1\u18C5\x05\u027A\u013E\x02\u18C2\u18C4\x05\u0272\u013A\x02\u18C3" +
		"\u18C2\x03\x02\x02\x02\u18C4\u18C7\x03\x02\x02\x02\u18C5\u18C3\x03\x02" +
		"\x02\x02\u18C5\u18C6\x03\x02\x02\x02\u18C6\u0271\x03\x02\x02\x02\u18C7" +
		"\u18C5\x03\x02\x02\x02\u18C8\u18F7\x05\u0298\u014D\x02\u18C9\u18CC\x07" +
		"\u019D\x02\x02\u18CA\u18CD\x05\u0230\u0119\x02\u18CB\u18CD\x07\u0170\x02" +
		"\x02\u18CC\u18CA\x03\x02\x02\x02\u18CC\u18CB\x03\x02\x02\x02\u18CD\u18F7" +
		"\x03\x02\x02\x02\u18CE\u18CF\x07\u01A2\x02\x02\u18CF\u18D1\x05\u0230\u0119" +
		"\x02\u18D0\u18D2\t\\\x02\x02\u18D1\u18D0\x03\x02\x02\x02\u18D1\u18D2\x03" +
		"\x02\x02\x02\u18D2\u18F7\x03\x02\x02\x02\u18D3\u18D4\x07\u0190\x02\x02" +
		"\u18D4\u18D6\t]\x02\x02\u18D5\u18D7\x05\u0230\u0119\x02\u18D6\u18D5\x03" +
		"\x02\x02\x02\u18D6\u18D7\x03\x02\x02\x02\u18D7\u18D8\x03\x02\x02\x02\u18D8" +
		"\u18DA\t\\\x02\x02\u18D9\u18DB\x07\u01A4\x02\x02\u18DA\u18D9\x03\x02\x02" +
		"\x02\u18DA\u18DB\x03\x02\x02\x02\u18DB\u18F7\x03\x02\x02\x02\u18DC\u18E4" +
		"\x07\u0191\x02\x02\u18DD\u18E5\x07\u0112\x02\x02\u18DE\u18DF\x07\x98\x02" +
		"\x02\u18DF\u18E0\x07|\x02\x02\u18E0\u18E5\x07\u0112\x02\x02\u18E1\u18E5" +
		"\x07\xE8\x02\x02\u18E2\u18E3\x07|\x02\x02\u18E3\u18E5\x07\xE8\x02\x02" +
		"\u18E4\u18DD\x03\x02\x02\x02\u18E4\u18DE\x03\x02\x02\x02\u18E4\u18E1\x03" +
		"\x02\x02\x02\u18E4\u18E2\x03\x02\x02\x02\u18E5\u18EF\x03\x02\x02\x02\u18E6" +
		"\u18E7\x07\x9E\x02\x02\u18E7\u18EC\x05\u026A\u0136\x02\u18E8\u18E9\x07" +
		"\u0245\x02\x02\u18E9\u18EB\x05\u026A\u0136\x02\u18EA\u18E8\x03\x02\x02" +
		"\x02\u18EB\u18EE\x03\x02\x02\x02\u18EC\u18EA\x03\x02\x02\x02\u18EC\u18ED" +
		"\x03\x02\x02\x02\u18ED\u18F0\x03\x02\x02\x02\u18EE\u18EC\x03\x02\x02\x02" +
		"\u18EF\u18E6\x03\x02\x02\x02\u18EF\u18F0\x03\x02\x02\x02\u18F0\u18F4\x03" +
		"\x02\x02\x02\u18F1\u18F5\x07\x9B\x02\x02\u18F2\u18F3\x07\xEB\x02\x02\u18F3" +
		"\u18F5\x07\x88\x02\x02\u18F4\u18F1\x03\x02\x02\x02\u18F4\u18F2\x03\x02" +
		"\x02\x02\u18F4\u18F5\x03\x02\x02\x02\u18F5\u18F7\x03\x02\x02\x02\u18F6" +
		"\u18C8\x03\x02\x02\x02\u18F6\u18C9\x03\x02\x02\x02\u18F6\u18CE\x03\x02" +
		"\x02\x02\u18F6\u18D3\x03\x02\x02\x02\u18F6\u18DC\x03\x02\x02\x02\u18F7" +
		"\u0273\x03\x02\x02\x02\u18F8\u18FA\x05\u0276\u013C\x02\u18F9\u18F8\x03" +
		"\x02\x02\x02\u18F9\u18FA\x03\x02\x02\x02\u18FA\u18FB\x03\x02\x02\x02\u18FB" +
		"\u18FF\x05\u027C\u013F\x02\u18FC\u18FE\x05\u0272\u013A\x02\u18FD\u18FC" +
		"\x03\x02\x02\x02\u18FE\u1901\x03\x02\x02\x02\u18FF\u18FD\x03\x02\x02\x02" +
		"\u18FF\u1900\x03\x02\x02\x02\u1900\u0275\x03\x02\x02\x02\u1901\u18FF\x03" +
		"\x02\x02\x02\u1902\u1904\x07\u01BC\x02\x02\u1903\u1905\x07\xC3\x02\x02" +
		"\u1904\u1903\x03\x02\x02\x02\u1904\u1905\x03\x02\x02\x02\u1905\u1906\x03" +
		"\x02\x02\x02\u1906\u190B\x05\u0278\u013D\x02\u1907\u1908\x07\u0245\x02" +
		"\x02\u1908\u190A\x05\u0278\u013D\x02\u1909\u1907\x03\x02\x02\x02\u190A" +
		"\u190D\x03\x02\x02\x02\u190B\u1909\x03\x02\x02\x02\u190B\u190C\x03\x02" +
		"\x02\x02\u190C\u0277\x03\x02\x02\x02\u190D\u190B\x03\x02\x02\x02\u190E" +
		"\u191A\x05\u0210\u0109\x02\u190F\u1910\x07\u024B\x02\x02\u1910\u1915\x05" +
		"\u0210\u0109\x02\u1911\u1912\x07\u0245\x02\x02\u1912\u1914\x05\u0210\u0109" +
		"\x02\u1913\u1911\x03\x02\x02\x02\u1914\u1917\x03\x02\x02\x02\u1915\u1913" +
		"\x03\x02\x02\x02\u1915\u1916\x03\x02\x02\x02\u1916\u1918\x03\x02\x02\x02" +
		"\u1917\u1915\x03\x02\x02\x02\u1918\u1919\x07\u024C\x02\x02\u1919\u191B" +
		"\x03\x02\x02\x02\u191A\u190F\x03\x02\x02\x02\u191A\u191B\x03\x02\x02\x02" +
		"\u191B\u191C\x03\x02\x02\x02\u191C\u1921\x07\u0176\x02\x02\u191D\u191F" +
		"\x07\u01A0\x02\x02\u191E\u191D\x03\x02\x02\x02\u191E\u191F\x03\x02\x02" +
		"\x02\u191F\u1920\x03\x02\x02\x02\u1920\u1922\x07\x8C\x02\x02\u1921\u191E" +
		"\x03\x02\x02\x02\u1921\u1922\x03\x02\x02\x02\u1922\u1923\x03\x02\x02\x02" +
		"\u1923\u1924\x07\u024B\x02\x02\u1924\u1925\x05\x10\t\x02\u1925\u1926\x07" +
		"\u024C\x02\x02\u1926\u0279\x03\x02\x02\x02\u1927\u1928\b\u013E\x01\x02" +
		"\u1928\u1929\x07\u024B\x02\x02\u1929\u192A\x05\u0270\u0139\x02\u192A\u192B" +
		"\x07\u024C\x02\x02\u192B\u192E\x03\x02\x02\x02\u192C\u192E\x05\u027E\u0140" +
		"\x02\u192D\u1927\x03\x02\x02\x02\u192D\u192C\x03\x02\x02\x02\u192E\u1937" +
		"\x03\x02\x02\x02\u192F\u1930\f\x04\x02\x02\u1930\u1932\t^\x02\x02\u1931" +
		"\u1933\x05\u026C\u0137\x02\u1932\u1931\x03\x02\x02\x02\u1932\u1933\x03" +
		"\x02\x02\x02\u1933\u1934\x03\x02\x02\x02\u1934\u1936\x05\u027A\u013E\x05" +
		"\u1935\u192F\x03\x02\x02\x02\u1936\u1939\x03\x02\x02\x02\u1937\u1935\x03" +
		"\x02\x02\x02\u1937\u1938\x03\x02\x02\x02\u1938\u027B\x03\x02\x02\x02\u1939" +
		"\u1937\x03\x02\x02\x02\u193A\u193B\x05\u027A\u013E\x02\u193B\u193D\t^" +
		"\x02\x02\u193C\u193E\x05\u026C\u0137\x02\u193D\u193C\x03\x02\x02\x02\u193D" +
		"\u193E\x03\x02\x02\x02\u193E\u1944\x03\x02\x02\x02\u193F\u1945\x05\u027E" +
		"\u0140\x02\u1940\u1941\x07\u024B\x02\x02\u1941\u1942\x05\u0270\u0139\x02" +
		"\u1942\u1943\x07\u024C\x02\x02\u1943\u1945\x03\x02\x02\x02\u1944\u193F" +
		"\x03\x02\x02\x02\u1944\u1940\x03\x02\x02\x02\u1945\u1948\x03\x02\x02\x02" +
		"\u1946\u1948\x05\u027E\u0140\x02\u1947\u193A\x03\x02\x02\x02\u1947\u1946" +
		"\x03\x02\x02\x02\u1948\u027D\x03\x02\x02\x02\u1949\u1959\x07\u01AB\x02" +
		"\x02\u194A\u1957\x05\u026C\u0137\x02\u194B\u194C\x07\u01A3\x02\x02\u194C" +
		"\u194D\x07\u024B\x02\x02\u194D\u1952\x05\u0230\u0119\x02\u194E\u194F\x07" +
		"\u0245\x02\x02\u194F\u1951\x05\u0230\u0119\x02\u1950\u194E\x03\x02\x02" +
		"\x02\u1951\u1954\x03\x02\x02\x02\u1952\u1950\x03\x02\x02\x02\u1952\u1953" +
		"\x03\x02\x02\x02\u1953\u1955\x03\x02\x02\x02\u1954\u1952\x03\x02\x02\x02" +
		"\u1955\u1956\x07\u024C\x02\x02\u1956\u1958\x03\x02\x02\x02\u1957\u194B" +
		"\x03\x02\x02\x02\u1957\u1958\x03\x02\x02\x02\u1958\u195A\x03\x02\x02\x02" +
		"\u1959\u194A\x03\x02\x02\x02\u1959\u195A\x03\x02\x02\x02\u195A\u195C\x03" +
		"\x02\x02\x02\u195B\u195D\x05\u0280\u0141\x02\u195C\u195B\x03\x02\x02\x02" +
		"\u195C\u195D\x03\x02\x02\x02\u195D\u195F\x03\x02\x02\x02\u195E\u1960\x05" +
		"\u0284\u0143\x02\u195F\u195E\x03\x02\x02\x02\u195F\u1960\x03\x02\x02\x02" +
		"\u1960\u196A\x03\x02\x02\x02\u1961\u1962\x07\u0193\x02\x02\u1962\u1967" +
		"\x05\u0286\u0144\x02\u1963\u1964\x07\u0245\x02\x02\u1964\u1966\x05\u0286" +
		"\u0144\x02\u1965\u1963\x03\x02\x02\x02\u1966\u1969\x03\x02\x02\x02\u1967" +
		"\u1965\x03\x02\x02\x02\u1967\u1968\x03\x02\x02\x02\u1968\u196B\x03\x02" +
		"\x02\x02\u1969\u1967\x03\x02\x02\x02\u196A\u1961\x03\x02\x02\x02\u196A" +
		"\u196B\x03\x02\x02\x02\u196B\u196E\x03\x02\x02\x02\u196C\u196D\x07\u01BA" +
		"\x02\x02\u196D\u196F\x05\u0230\u0119\x02\u196E\u196C\x03\x02\x02\x02\u196E" +
		"\u196F\x03\x02\x02\x02\u196F\u1971\x03\x02\x02\x02\u1970\u1972\x05\u028E" +
		"\u0148\x02\u1971\u1970\x03\x02\x02\x02\u1971\u1972\x03\x02\x02\x02\u1972" +
		"\u1975\x03\x02\x02\x02\u1973\u1974\x07\u0196\x02\x02\u1974\u1976\x05\u0230" +
		"\u0119\x02\u1975\u1973\x03\x02\x02\x02\u1975\u1976\x03\x02\x02\x02\u1976" +
		"\u1985\x03\x02\x02\x02\u1977\u1978\x07\u01BB\x02\x02\u1978\u1979\x05\u0210" +
		"\u0109\x02\u1979\u197A\x07\u0176\x02\x02\u197A\u1982\x05\u025E\u0130\x02" +
		"\u197B\u197C\x07\u0245\x02\x02\u197C\u197D\x05\u0210\u0109\x02\u197D\u197E" +
		"\x07\u0176\x02\x02\u197E\u197F\x05\u025E\u0130\x02\u197F\u1981\x03\x02" +
		"\x02\x02\u1980\u197B\x03\x02\x02\x02\u1981\u1984\x03\x02\x02\x02\u1982" +
		"\u1980\x03\x02\x02\x02\u1982\u1983\x03\x02\x02\x02\u1983\u1986\x03\x02" +
		"\x02\x02\u1984\u1982\x03\x02\x02\x02\u1985\u1977\x03\x02\x02\x02\u1985" +
		"\u1986\x03\x02\x02\x02\u1986\u1991\x03\x02\x02\x02\u1987\u1989\x07\u01AF" +
		"\x02\x02\u1988\u198A\x07\u01A4\x02\x02\u1989\u1988\x03\x02\x02\x02\u1989" +
		"\u198A\x03\x02\x02\x02\u198A\u198B\x03\x02\x02\x02\u198B\u198D\x05\u026A" +
		"\u0136\x02\u198C\u198E\x07\u024F\x02\x02\u198D\u198C\x03\x02\x02\x02\u198D" +
		"\u198E\x03\x02\x02\x02\u198E\u1991\x03\x02\x02\x02\u198F\u1991\x05\u0294" +
		"\u014B\x02\u1990\u1949\x03\x02\x02\x02\u1990\u1987\x03\x02\x02\x02\u1990" +
		"\u198F\x03\x02\x02\x02\u1991\u027F\x03\x02\x02\x02\u1992\u1997\x05\u0282" +
		"\u0142\x02\u1993\u1994\x07\u0245\x02\x02\u1994\u1996\x05\u0282\u0142\x02" +
		"\u1995\u1993\x03\x02\x02\x02\u1996\u1999\x03\x02\x02\x02\u1997\u1995\x03" +
		"\x02\x02\x02\u1997\u1998\x03\x02\x02\x02\u1998\u0281\x03\x02\x02\x02\u1999" +
		"\u1997\x03\x02\x02\x02\u199A\u199E\x05\u0230\u0119\x02\u199B\u199C\x07" +
		"\u0176\x02\x02\u199C\u199F\x05\u0214\u010B\x02\u199D\u199F\x05\u020E\u0108" +
		"\x02\u199E\u199B\x03\x02\x02\x02\u199E\u199D\x03\x02\x02\x02\u199E\u199F" +
		"\x03\x02\x02\x02\u199F\u0283\x03\x02\x02\x02\u19A0\u19A2\x07\u019A\x02" +
		"\x02\u19A1\u19A3\t_\x02\x02\u19A2\u19A1\x03\x02\x02\x02\u19A2\u19A3\x03" +
		"\x02\x02\x02\u19A3\u19A5\x03\x02\x02\x02\u19A4\u19A6\x07\u01AF\x02\x02" +
		"\u19A5\u19A4\x03\x02\x02\x02\u19A5\u19A6\x03\x02\x02\x02\u19A6\u19A7\x03" +
		"\x02\x02\x02\u19A7\u19A8\x05\u026A\u0136\x02\u19A8\u0285\x03\x02\x02\x02" +
		"\u19A9\u19AA\b\u0144\x01\x02\u19AA\u19AB\x07\u024B\x02\x02\u19AB\u19AC" +
		"\x05\u0286\u0144\x02\u19AC\u19AE\x07\u024C\x02\x02\u19AD\u19AF\x05\u028A" +
		"\u0146\x02\u19AE\u19AD\x03\x02\x02\x02\u19AE\u19AF\x03\x02\x02\x02\u19AF" +
		"\u19B2\x03\x02\x02\x02\u19B0\u19B2\x05\u0288\u0145\x02\u19B1\u19A9\x03" +
		"\x02\x02\x02\u19B1\u19B0\x03\x02\x02\x02\u19B2\u19DE\x03\x02\x02\x02\u19B3" +
		"\u19B4\f\x07\x02\x02\u19B4\u19B5\x07\u015D\x02\x02\u19B5\u19B6\x07\u0165" +
		"\x02\x02\u19B6\u19DD\x05\u0286\u0144\b\u19B7\u19B8\f\x04\x02\x02\u19B8" +
		"\u19BE\x07\u0168\x02\x02\u19B9\u19BF\x07\u0162\x02\x02\u19BA\u19BC\t`" +
		"\x02\x02\u19BB\u19BD\x07\u016A\x02\x02\u19BC\u19BB\x03\x02\x02\x02\u19BC" +
		"\u19BD\x03\x02\x02\x02\u19BD\u19BF\x03\x02\x02\x02\u19BE\u19B9\x03\x02" +
		"\x02\x02\u19BE\u19BA\x03\x02\x02\x02\u19BE\u19BF\x03\x02\x02\x02\u19BF" +
		"\u19C0\x03\x02\x02\x02\u19C0\u19C1\x07\u0165\x02\x02\u19C1\u19DD\x05\u0286" +
		"\u0144\x05\u19C2\u19C8\f\x06\x02\x02\u19C3\u19C9\x07\u0162\x02\x02\u19C4" +
		"\u19C6\t`\x02\x02\u19C5\u19C7\x07\u016A\x02\x02\u19C6\u19C5\x03\x02\x02" +
		"\x02\u19C6\u19C7\x03\x02\x02\x02\u19C7\u19C9\x03\x02\x02\x02\u19C8\u19C3" +
		"\x03\x02\x02\x02\u19C8\u19C4\x03\x02\x02\x02\u19C8\u19C9\x03\x02\x02\x02" +
		"\u19C9\u19CA\x03\x02\x02\x02\u19CA\u19CB\x07\u0165\x02\x02\u19CB\u19CC" +
		"\x05\u0286\u0144\x02\u19CC\u19CD\x07\u01A3\x02\x02\u19CD\u19CE\x05\u0230" +
		"\u0119\x02\u19CE\u19DD\x03\x02\x02\x02\u19CF\u19D5\f\x05\x02\x02\u19D0" +
		"\u19D6\x07\u0162\x02\x02\u19D1\u19D3\t`\x02\x02\u19D2\u19D4\x07\u016A" +
		"\x02\x02\u19D3\u19D2\x03\x02\x02\x02\u19D3\u19D4\x03\x02\x02\x02\u19D4" +
		"\u19D6\x03\x02\x02\x02\u19D5\u19D0\x03\x02\x02\x02\u19D5\u19D1\x03\x02" +
		"\x02\x02\u19D5\u19D6\x03\x02\x02\x02\u19D6\u19D7\x03\x02\x02\x02\u19D7" +
		"\u19D8\x07\u0165\x02\x02\u19D8\u19D9\x05\u0286\u0144\x02\u19D9\u19DA\x07" +
		"\u01B7\x02\x02\u19DA\u19DB\x05\u01D8\xED\x02\u19DB\u19DD\x03\x02\x02\x02" +
		"\u19DC\u19B3\x03\x02\x02\x02\u19DC\u19B7\x03\x02\x02\x02\u19DC\u19C2\x03" +
		"\x02\x02\x02\u19DC\u19CF\x03\x02\x02\x02\u19DD\u19E0\x03\x02\x02\x02\u19DE" +
		"\u19DC\x03\x02\x02\x02\u19DE\u19DF\x03\x02\x02\x02\u19DF\u0287\x03\x02" +
		"\x02\x02\u19E0\u19DE\x03\x02\x02\x02\u19E1\u19E3\x07\u01A4\x02\x02\u19E2" +
		"\u19E1\x03\x02\x02\x02\u19E2\u19E3\x03\x02\x02\x02\u19E3\u19E4\x03\x02" +
		"\x02\x02\u19E4\u19E6\x05\u026A\u0136\x02\u19E5\u19E7\x07\u024F\x02\x02" +
		"\u19E6\u19E5\x03\x02\x02\x02\u19E6\u19E7\x03\x02\x02\x02\u19E7\u19E9\x03" +
		"\x02\x02\x02\u19E8\u19EA\x05\u028A\u0146\x02\u19E9\u19E8\x03\x02\x02\x02" +
		"\u19E9\u19EA\x03\x02\x02\x02\u19EA\u19FB\x03\x02\x02\x02\u19EB\u19EC\x07" +
		"\u016E\x02\x02\u19EC\u19ED\x05\u0210\u0109\x02\u19ED\u19EE\x07\u024B\x02" +
		"\x02\u19EE\u19F3\x05\u0230\u0119\x02\u19EF\u19F0\x07\u0245\x02\x02\u19F0" +
		"\u19F2\x05\u0230\u0119\x02\u19F1\u19EF\x03\x02\x02\x02\u19F2\u19F5\x03" +
		"\x02\x02\x02\u19F3\u19F1\x03\x02\x02\x02\u19F3\u19F4\x03\x02\x02\x02\u19F4" +
		"\u19F6\x03\x02\x02\x02\u19F5\u19F3\x03\x02\x02\x02\u19F6\u19F9\x07\u024C" +
		"\x02\x02\u19F7\u19F8\x07\xCB\x02\x02\u19F8\u19FA\x05\u0230\u0119\x02\u19F9" +
		"\u19F7\x03\x02\x02\x02\u19F9\u19FA\x03\x02\x02\x02\u19FA\u19FC\x03\x02" +
		"\x02\x02\u19FB\u19EB\x03\x02\x02\x02\u19FB\u19FC\x03\x02\x02\x02\u19FC" +
		"\u1A50\x03\x02\x02\x02\u19FD\u19FF\x07\u019B\x02\x02\u19FE\u19FD\x03\x02" +
		"\x02\x02\u19FE\u19FF\x03\x02\x02\x02\u19FF\u1A00\x03\x02\x02\x02\u1A00" +
		"\u1A01\x05\u026E\u0138\x02\u1A01\u1A02\x05\u028A\u0146\x02\u1A02\u1A50" +
		"\x03\x02\x02\x02\u1A03\u1A05\x07\u019B\x02\x02\u1A04\u1A03\x03\x02\x02" +
		"\x02\u1A04\u1A05\x03\x02\x02\x02\u1A05\u1A06\x03\x02\x02\x02\u1A06\u1A09" +
		"\x05\u0246\u0124\x02\u1A07\u1A08\x07\u01BC\x02\x02\u1A08\u1A0A\x07\xA5" +
		"\x02\x02\u1A09\u1A07\x03\x02\x02\x02\u1A09\u1A0A\x03\x02\x02\x02\u1A0A" +
		"\u1A1F\x03\x02\x02\x02\u1A0B\u1A0C\x07\u0176\x02\x02\u1A0C\u1A20\x05\u028C" +
		"\u0147\x02\u1A0D\u1A0F\x07\u0176\x02\x02\u1A0E\u1A0D\x03\x02\x02\x02\u1A0E" +
		"\u1A0F\x03\x02\x02\x02\u1A0F\u1A10\x03\x02\x02\x02\u1A10\u1A1D\x05\u0210" +
		"\u0109\x02\u1A11\u1A12\x07\u024B\x02\x02\u1A12\u1A17\x05\u0210\u0109\x02" +
		"\u1A13\u1A14\x07\u0245\x02\x02\u1A14\u1A16\x05\u0210\u0109\x02\u1A15\u1A13" +
		"\x03\x02\x02\x02\u1A16\u1A19\x03\x02\x02\x02\u1A17\u1A15\x03\x02\x02\x02" +
		"\u1A17\u1A18\x03\x02\x02\x02\u1A18\u1A1A\x03\x02\x02\x02\u1A19\u1A17\x03" +
		"\x02\x02\x02\u1A1A\u1A1B\x07\u024C\x02\x02\u1A1B\u1A1E\x03\x02\x02\x02" +
		"\u1A1C\u1A1E\x05\u028C\u0147\x02\u1A1D\u1A11\x03\x02\x02\x02\u1A1D\u1A1C" +
		"\x03\x02\x02\x02\u1A1D\u1A1E\x03\x02\x02\x02\u1A1E\u1A20\x03\x02\x02\x02" +
		"\u1A1F\u1A0B\x03\x02\x02\x02\u1A1F\u1A0E\x03\x02\x02\x02\u1A1F\u1A20\x03" +
		"\x02\x02\x02\u1A20\u1A50\x03\x02\x02\x02\u1A21\u1A23\x07\u019B\x02\x02" +
		"\u1A22\u1A21\x03\x02\x02\x02\u1A22\u1A23\x03\x02\x02\x02\u1A23\u1A24\x03" +
		"\x02\x02\x02\u1A24\u1A25\x07\xD8\x02\x02\u1A25\u1A26\x07\u0193\x02\x02" +
		"\u1A26\u1A27\x07\u024B";
	private static readonly _serializedATNSegment13: string =
		"\x02\x02\u1A27\u1A2A\x05\u0246\u0124\x02\u1A28\u1A29\x07\u0176\x02\x02" +
		"\u1A29\u1A2B\x05\u028C\u0147\x02\u1A2A\u1A28\x03\x02\x02\x02\u1A2A\u1A2B" +
		"\x03\x02\x02\x02\u1A2B\u1A34\x03\x02\x02\x02\u1A2C\u1A2D\x07\u0245\x02" +
		"\x02\u1A2D\u1A30\x05\u0246\u0124\x02\u1A2E\u1A2F\x07\u0176\x02\x02\u1A2F" +
		"\u1A31\x05\u028C\u0147\x02\u1A30\u1A2E\x03\x02\x02\x02\u1A30\u1A31\x03" +
		"\x02\x02\x02\u1A31\u1A33\x03\x02\x02\x02\u1A32\u1A2C\x03\x02\x02\x02\u1A33" +
		"\u1A36\x03\x02\x02\x02\u1A34\u1A32\x03\x02\x02\x02\u1A34\u1A35\x03\x02" +
		"\x02\x02\u1A35\u1A37\x03\x02\x02\x02\u1A36\u1A34\x03\x02\x02\x02\u1A37" +
		"\u1A3A\x07\u024C\x02\x02\u1A38\u1A39\x07\u01BC\x02\x02\u1A39\u1A3B\x07" +
		"\xA5\x02\x02\u1A3A\u1A38\x03\x02\x02\x02\u1A3A\u1A3B\x03\x02\x02\x02\u1A3B" +
		"\u1A4D\x03\x02\x02\x02\u1A3C\u1A3E\x07\u0176\x02\x02\u1A3D\u1A3C\x03\x02" +
		"\x02\x02\u1A3D\u1A3E\x03\x02\x02\x02\u1A3E\u1A3F\x03\x02\x02\x02\u1A3F" +
		"\u1A4B\x05\u0210\u0109\x02\u1A40\u1A41\x07\u024B\x02\x02\u1A41\u1A46\x05" +
		"\u0210\u0109\x02\u1A42\u1A43\x07\u0245\x02\x02\u1A43\u1A45\x05\u0210\u0109" +
		"\x02\u1A44\u1A42\x03\x02\x02\x02\u1A45\u1A48\x03\x02\x02\x02\u1A46\u1A44" +
		"\x03\x02\x02\x02\u1A46\u1A47\x03\x02\x02\x02\u1A47\u1A49\x03\x02\x02\x02" +
		"\u1A48\u1A46\x03\x02\x02\x02\u1A49\u1A4A\x07\u024C\x02\x02\u1A4A\u1A4C" +
		"\x03\x02\x02\x02\u1A4B\u1A40\x03\x02\x02\x02\u1A4B\u1A4C\x03\x02\x02\x02" +
		"\u1A4C\u1A4E\x03\x02\x02\x02\u1A4D\u1A3D\x03\x02\x02\x02\u1A4D\u1A4E\x03" +
		"\x02\x02\x02\u1A4E\u1A50\x03\x02\x02\x02\u1A4F\u19E2\x03\x02\x02\x02\u1A4F" +
		"\u19FE\x03\x02\x02\x02\u1A4F\u1A04\x03\x02\x02\x02\u1A4F\u1A22\x03\x02" +
		"\x02\x02\u1A50\u0289\x03\x02\x02\x02\u1A51\u1A53\x07\u0176\x02\x02\u1A52" +
		"\u1A51\x03\x02\x02\x02\u1A52\u1A53\x03\x02\x02\x02\u1A53\u1A54\x03\x02" +
		"\x02\x02\u1A54\u1A60\x05\u0210\u0109\x02\u1A55\u1A56\x07\u024B\x02\x02" +
		"\u1A56\u1A5B\x05\u0210\u0109\x02\u1A57\u1A58\x07\u0245\x02\x02\u1A58\u1A5A" +
		"\x05\u0210\u0109\x02\u1A59\u1A57\x03\x02\x02\x02\u1A5A\u1A5D\x03\x02\x02" +
		"\x02\u1A5B\u1A59\x03\x02\x02\x02\u1A5B\u1A5C\x03\x02\x02\x02\u1A5C\u1A5E" +
		"\x03\x02\x02\x02\u1A5D\u1A5B\x03\x02\x02\x02\u1A5E\u1A5F\x07\u024C\x02" +
		"\x02\u1A5F\u1A61\x03\x02\x02\x02\u1A60\u1A55\x03\x02\x02\x02\u1A60\u1A61" +
		"\x03\x02\x02\x02\u1A61\u028B\x03\x02\x02\x02\u1A62\u1A63\x07\u024B\x02" +
		"\x02\u1A63\u1A64\x05\u0210\u0109\x02\u1A64\u1A6B\x05\u0224\u0113\x02\u1A65" +
		"\u1A66\x07\u0245\x02\x02\u1A66\u1A67\x05\u0210\u0109\x02\u1A67\u1A68\x05" +
		"\u0224\u0113\x02\u1A68\u1A6A\x03\x02\x02\x02\u1A69\u1A65\x03\x02\x02\x02" +
		"\u1A6A\u1A6D\x03\x02\x02\x02\u1A6B\u1A69\x03\x02\x02\x02\u1A6B\u1A6C\x03" +
		"\x02\x02\x02\u1A6C\u1A6E\x03\x02\x02\x02\u1A6D\u1A6B\x03\x02\x02\x02\u1A6E" +
		"\u1A6F\x07\u024C\x02\x02\u1A6F\u028D\x03\x02\x02\x02\u1A70\u1A71\x07\u0195" +
		"\x02\x02\u1A71\u1A72\x07\x16\x02\x02\u1A72\u1A73\x05\u0290\u0149\x02\u1A73" +
		"\u028F\x03\x02\x02\x02\u1A74\u1A79\x05\u0292\u014A\x02\u1A75\u1A76\x07" +
		"\u0245\x02\x02\u1A76\u1A78\x05\u0292\u014A\x02\u1A77\u1A75\x03\x02\x02" +
		"\x02\u1A78\u1A7B\x03\x02\x02\x02\u1A79\u1A77\x03\x02\x02\x02\u1A79\u1A7A" +
		"\x03\x02\x02\x02\u1A7A\u0291\x03\x02\x02\x02\u1A7B\u1A79\x03\x02\x02\x02" +
		"\u1A7C\u1A8A\x05\u0230\u0119\x02\u1A7D\u1A7E\x07\u024B\x02\x02\u1A7E\u1A8A" +
		"\x07\u024C\x02\x02\u1A7F\u1A84\x07\xD5\x02\x02\u1A80\u1A84\x072\x02\x02" +
		"\u1A81\u1A82\x07\u0134\x02\x02\u1A82\u1A84\x07\xE7\x02\x02\u1A83\u1A7F" +
		"\x03\x02\x02\x02\u1A83\u1A80\x03\x02\x02\x02\u1A83\u1A81\x03\x02\x02\x02" +
		"\u1A84\u1A85\x03\x02\x02\x02\u1A85\u1A86\x07\u024B\x02\x02\u1A86\u1A87" +
		"\x05\u0290\u0149\x02\u1A87\u1A88\x07\u024C\x02\x02\u1A88\u1A8A\x03\x02" +
		"\x02\x02\u1A89\u1A7C\x03\x02\x02\x02\u1A89\u1A7D\x03\x02\x02\x02\u1A89" +
		"\u1A83\x03\x02\x02\x02\u1A8A\u0293\x03\x02\x02\x02\u1A8B\u1A8C\x07\u014C" +
		"\x02\x02\u1A8C\u1A91\x05\u0296\u014C\x02\u1A8D\u1A8E\x07\u0245\x02\x02" +
		"\u1A8E\u1A90\x05\u0296\u014C\x02\u1A8F\u1A8D\x03\x02\x02\x02\u1A90\u1A93" +
		"\x03\x02\x02\x02\u1A91\u1A8F\x03\x02\x02\x02\u1A91\u1A92\x03\x02\x02\x02" +
		"\u1A92\u0295\x03\x02\x02\x02\u1A93\u1A91\x03\x02\x02\x02\u1A94\u1A97\x07" +
		"\u024B\x02\x02\u1A95\u1A98\x05\u0230\u0119\x02\u1A96\u1A98\x07\u0187\x02" +
		"\x02\u1A97\u1A95\x03\x02\x02\x02\u1A97\u1A96\x03\x02\x02\x02\u1A98\u1AA0" +
		"\x03\x02\x02\x02\u1A99\u1A9C\x07\u0245\x02\x02\u1A9A\u1A9D\x05\u0230\u0119" +
		"\x02\u1A9B\u1A9D\x07\u0187\x02\x02\u1A9C\u1A9A\x03\x02\x02\x02\u1A9C\u1A9B" +
		"\x03\x02\x02\x02\u1A9D\u1A9F\x03\x02\x02\x02\u1A9E\u1A99\x03\x02\x02\x02" +
		"\u1A9F\u1AA2\x03\x02\x02\x02\u1AA0\u1A9E\x03\x02\x02\x02\u1AA0\u1AA1\x03" +
		"\x02\x02\x02\u1AA1\u1AA3\x03\x02\x02\x02\u1AA2\u1AA0\x03\x02\x02\x02\u1AA3" +
		"\u1AA4\x07\u024C\x02\x02\u1AA4\u0297\x03\x02\x02\x02\u1AA5\u1AA6\x07\u01A6" +
		"\x02\x02\u1AA6\u1AA7\x07\x16\x02\x02\u1AA7\u1AA8\x05\u029A\u014E\x02\u1AA8" +
		"\u0299\x03\x02\x02\x02\u1AA9\u1AAE\x05\u029C\u014F\x02\u1AAA\u1AAB\x07" +
		"\u0245\x02\x02\u1AAB\u1AAD\x05\u029C\u014F\x02\u1AAC\u1AAA\x03\x02\x02" +
		"\x02\u1AAD\u1AB0\x03\x02\x02\x02\u1AAE\u1AAC\x03\x02\x02\x02\u1AAE\u1AAF" +
		"\x03\x02\x02\x02\u1AAF\u029B\x03\x02\x02\x02\u1AB0\u1AAE\x03\x02\x02\x02" +
		"\u1AB1\u1AB3\x05\u0230\u0119\x02\u1AB2\u1AB4\x05\u026A\u0136\x02\u1AB3" +
		"\u1AB2\x03\x02\x02\x02\u1AB3\u1AB4\x03\x02\x02\x02\u1AB4\u1AB6\x03\x02" +
		"\x02\x02\u1AB5\u1AB7\x05\u029E\u0150\x02\u1AB6\u1AB5\x03\x02\x02\x02\u1AB6" +
		"\u1AB7\x03\x02\x02\x02\u1AB7\u1AB9\x03\x02\x02\x02\u1AB8\u1ABA\x05\u02A0" +
		"\u0151\x02\u1AB9\u1AB8\x03\x02\x02\x02\u1AB9\u1ABA\x03\x02\x02\x02\u1ABA" +
		"\u029D\x03\x02\x02\x02\u1ABB\u1AC0\x07\u0177\x02\x02\u1ABC\u1AC0\x07\u0189" +
		"\x02\x02\u1ABD\u1ABE\x07\u01B7\x02\x02\u1ABE\u1AC0\x05\u0236\u011C\x02" +
		"\u1ABF\u1ABB\x03\x02\x02\x02\u1ABF\u1ABC\x03\x02\x02\x02\u1ABF\u1ABD\x03" +
		"\x02\x02\x02\u1AC0\u029F\x03\x02\x02\x02\u1AC1\u1AC2\x07\x9C\x02\x02\u1AC2" +
		"\u1AC3\ta\x02\x02\u1AC3\u02A1\x03\x02\x02\x02\u1AC4\u1AC6\x05\u0276\u013C" +
		"\x02\u1AC5\u1AC4\x03\x02\x02\x02\u1AC5\u1AC6\x03\x02\x02\x02\u1AC6\u1AC7" +
		"\x03\x02\x02\x02\u1AC7\u1AC8\x07x\x02\x02\u1AC8\u1AC9\x07\u019A\x02\x02" +
		"\u1AC9\u1ACC\x05\u026A\u0136\x02\u1ACA\u1ACB\x07\u0176\x02\x02\u1ACB\u1ACD" +
		"\x05\u0210\u0109\x02\u1ACC\u1ACA\x03\x02\x02\x02\u1ACC\u1ACD\x03\x02\x02" +
		"\x02\u1ACD\u1AD1\x03\x02\x02\x02\u1ACE\u1ACF\x07\xA8\x02\x02\u1ACF\u1AD0" +
		"\tb\x02\x02\u1AD0\u1AD2\x07\u0117\x02\x02\u1AD1\u1ACE\x03\x02\x02\x02" +
		"\u1AD1\u1AD2\x03\x02\x02\x02\u1AD2\u1AD4\x03\x02\x02\x02\u1AD3\u1AD5\x05" +
		"\u02A4\u0153\x02\u1AD4\u1AD3\x03\x02\x02\x02\u1AD4\u1AD5\x03\x02\x02\x02" +
		"\u1AD5\u1AD9\x03\x02\x02\x02\u1AD6\u1ADA\x05\u0270\u0139\x02\u1AD7\u1AD8" +
		"\x07\u0187\x02\x02\u1AD8\u1ADA\x07\u014C\x02\x02\u1AD9\u1AD6\x03\x02\x02" +
		"\x02\u1AD9\u1AD7\x03\x02\x02\x02\u1ADA\u1AE1\x03\x02\x02\x02\u1ADB\u1ADC" +
		"\x07\u01A3\x02\x02\u1ADC\u1ADE\x07)\x02\x02\u1ADD\u1ADF\x05\u02A8\u0155" +
		"\x02\u1ADE\u1ADD\x03\x02\x02\x02\u1ADE\u1ADF\x03\x02\x02\x02\u1ADF\u1AE0" +
		"\x03\x02\x02\x02\u1AE0\u1AE2\x05\u02AA\u0156\x02\u1AE1\u1ADB\x03\x02\x02" +
		"\x02\u1AE1\u1AE2\x03\x02\x02\x02\u1AE2\u1AE5\x03\x02\x02\x02\u1AE3\u1AE4" +
		"\x07\u01AA\x02\x02\u1AE4\u1AE6\x05\u0280\u0141\x02\u1AE5\u1AE3\x03\x02" +
		"\x02\x02\u1AE5\u1AE6\x03\x02\x02\x02\u1AE6\u02A3\x03\x02\x02\x02\u1AE7" +
		"\u1AE8\x07\u024B\x02\x02\u1AE8\u1AED\x05\u02A6\u0154\x02\u1AE9\u1AEA\x07" +
		"\u0245\x02\x02\u1AEA\u1AEC\x05\u02A6\u0154\x02\u1AEB\u1AE9\x03\x02\x02" +
		"\x02\u1AEC\u1AEF\x03\x02\x02\x02\u1AED\u1AEB\x03\x02\x02\x02\u1AED\u1AEE" +
		"\x03\x02\x02\x02\u1AEE\u1AF0\x03\x02\x02\x02\u1AEF\u1AED\x03\x02\x02\x02" +
		"\u1AF0\u1AF1\x07\u024C\x02\x02\u1AF1\u02A5\x03\x02\x02\x02\u1AF2\u1AF4" +
		"\x05\u0210\u0109\x02\u1AF3\u1AF5\x05\u0200\u0101\x02\u1AF4\u1AF3\x03\x02" +
		"\x02\x02\u1AF4\u1AF5\x03\x02\x02\x02\u1AF5\u02A7\x03\x02\x02\x02\u1AF6" +
		"\u1AF8\x05\x94K\x02\u1AF7\u1AF9\x05\x98M\x02\u1AF8\u1AF7\x03\x02\x02\x02" +
		"\u1AF8\u1AF9\x03\x02\x02\x02\u1AF9\u1AFE\x03\x02\x02\x02\u1AFA\u1AFB\x07" +
		"\u01A3\x02\x02\u1AFB\u1AFC\x07\u017F\x02\x02\u1AFC\u1AFE\x05\u0210\u0109" +
		"\x02\u1AFD\u1AF6\x03\x02\x02\x02\u1AFD\u1AFA\x03\x02\x02\x02\u1AFE\u02A9" +
		"\x03\x02\x02\x02\u1AFF\u1B00\x07\u018B\x02\x02\u1B00\u1B11\x07\x99\x02" +
		"\x02\u1B01\u1B02\x07\u018B\x02\x02\u1B02\u1B03\x07\u0112\x02\x02\u1B03" +
		"\u1B04\x07\xE6\x02\x02\u1B04\u1B09\x05\u02B0\u0159\x02\u1B05\u1B06\x07" +
		"\u0245\x02\x02\u1B06\u1B08\x05\u02B0\u0159\x02\u1B07\u1B05\x03\x02\x02" +
		"\x02\u1B08\u1B0B\x03\x02\x02\x02\u1B09\u1B07\x03\x02\x02\x02\u1B09\u1B0A" +
		"\x03\x02\x02\x02\u1B0A\u1B0E\x03\x02\x02\x02\u1B0B\u1B09\x03\x02\x02\x02" +
		"\u1B0C\u1B0D\x07\u01BA\x02\x02\u1B0D\u1B0F\x05\u0230\u0119\x02\u1B0E\u1B0C" +
		"\x03\x02\x02\x02\u1B0E\u1B0F\x03\x02\x02\x02\u1B0F\u1B11\x03\x02\x02\x02" +
		"\u1B10\u1AFF\x03\x02\x02\x02\u1B10\u1B01\x03\x02\x02\x02\u1B11\u02AB\x03" +
		"\x02\x02\x02\u1B12\u1B14\x05\u0276\u013C\x02\u1B13\u1B12\x03\x02\x02\x02" +
		"\u1B13\u1B14\x03\x02\x02\x02\u1B14\u1B15\x03\x02\x02\x02\u1B15\u1B16\x07" +
		">\x02\x02\u1B16\u1B18\x07\u0193\x02\x02\u1B17\u1B19\x07\u01A4\x02\x02" +
		"\u1B18\u1B17\x03\x02\x02\x02\u1B18\u1B19\x03\x02\x02\x02\u1B19\u1B1A\x03" +
		"\x02\x02\x02\u1B1A\u1B1C\x05\u026A\u0136\x02\u1B1B\u1B1D\x07\u024F\x02" +
		"\x02\u1B1C\u1B1B\x03\x02\x02\x02\u1B1C\u1B1D\x03\x02\x02\x02\u1B1D\u1B22" +
		"\x03\x02\x02\x02\u1B1E\u1B20\x07\u0176\x02\x02\u1B1F\u1B1E\x03\x02\x02" +
		"\x02\u1B1F\u1B20\x03\x02\x02\x02\u1B20\u1B21\x03\x02\x02\x02\u1B21\u1B23" +
		"\x05\u0210\u0109\x02\u1B22\u1B1F\x03\x02\x02\x02\u1B22\u1B23\x03\x02\x02" +
		"\x02\u1B23\u1B2D\x03\x02\x02\x02\u1B24\u1B25\x07\u01B7\x02\x02\u1B25\u1B2A" +
		"\x05\u0286\u0144\x02\u1B26\u1B27\x07\u0245\x02\x02\u1B27\u1B29\x05\u0286" +
		"\u0144\x02\u1B28\u1B26\x03\x02\x02\x02\u1B29\u1B2C\x03\x02\x02\x02\u1B2A" +
		"\u1B28\x03\x02\x02\x02\u1B2A\u1B2B\x03\x02\x02\x02\u1B2B\u1B2E\x03\x02" +
		"\x02\x02\u1B2C\u1B2A\x03\x02\x02\x02\u1B2D\u1B24\x03\x02\x02\x02\u1B2D" +
		"\u1B2E\x03\x02\x02\x02\u1B2E\u1B36\x03\x02\x02\x02\u1B2F\u1B34\x07\u01BA" +
		"\x02\x02\u1B30\u1B35\x05\u0230\u0119\x02\u1B31\u1B32\x073\x02\x02\u1B32" +
		"\u1B33\x07\x9E\x02\x02\u1B33\u1B35\x05\u0210\u0109\x02\u1B34\u1B30\x03" +
		"\x02\x02\x02\u1B34\u1B31\x03\x02\x02\x02\u1B35\u1B37\x03\x02\x02\x02\u1B36" +
		"\u1B2F\x03\x02\x02\x02\u1B36\u1B37\x03\x02\x02\x02\u1B37\u1B3A\x03\x02" +
		"\x02\x02\u1B38\u1B39\x07\u01AA\x02\x02\u1B39\u1B3B\x05\u0280\u0141\x02" +
		"\u1B3A\u1B38\x03\x02\x02\x02\u1B3A\u1B3B\x03\x02\x02\x02\u1B3B\u02AD\x03" +
		"\x02\x02\x02\u1B3C\u1B3E\x05\u0276\u013C\x02\u1B3D\u1B3C\x03\x02\x02\x02" +
		"\u1B3D\u1B3E\x03\x02\x02\x02\u1B3E\u1B3F\x03\x02\x02\x02\u1B3F\u1B41\x07" +
		"\u0112\x02\x02\u1B40\u1B42\x07\u01A4\x02\x02\u1B41\u1B40\x03\x02\x02\x02" +
		"\u1B41\u1B42\x03\x02\x02\x02\u1B42\u1B43\x03\x02\x02\x02\u1B43\u1B45\x05" +
		"\u026A\u0136\x02\u1B44\u1B46\x07\u024F\x02\x02\u1B45\u1B44\x03\x02\x02" +
		"\x02\u1B45\u1B46\x03\x02\x02\x02\u1B46\u1B4B\x03\x02\x02\x02\u1B47\u1B49" +
		"\x07\u0176\x02\x02\u1B48\u1B47\x03\x02\x02\x02\u1B48\u1B49\x03\x02\x02" +
		"\x02\u1B49\u1B4A\x03\x02\x02\x02\u1B4A\u1B4C\x05\u0210\u0109\x02\u1B4B" +
		"\u1B48\x03\x02\x02\x02\u1B4B\u1B4C\x03\x02\x02\x02\u1B4C\u1B4D\x03\x02" +
		"\x02\x02\u1B4D\u1B4E\x07\xE6\x02\x02\u1B4E\u1B53\x05\u02B0\u0159\x02\u1B4F" +
		"\u1B50\x07\u0245\x02\x02\u1B50\u1B52\x05\u02B0\u0159\x02\u1B51\u1B4F\x03" +
		"\x02\x02\x02\u1B52\u1B55\x03\x02\x02\x02\u1B53\u1B51\x03\x02\x02\x02\u1B53" +
		"\u1B54\x03\x02\x02\x02\u1B54\u1B5F\x03\x02\x02\x02\u1B55\u1B53\x03\x02" +
		"\x02\x02\u1B56\u1B57\x07\u0193\x02\x02\u1B57\u1B5C\x05\u0286\u0144\x02" +
		"\u1B58\u1B59\x07\u0245\x02\x02\u1B59\u1B5B\x05\u0286\u0144\x02\u1B5A\u1B58" +
		"\x03\x02\x02\x02\u1B5B\u1B5E\x03\x02\x02\x02\u1B5C\u1B5A\x03\x02\x02\x02" +
		"\u1B5C\u1B5D\x03\x02\x02\x02\u1B5D\u1B60\x03\x02\x02\x02\u1B5E\u1B5C\x03" +
		"\x02\x02\x02\u1B5F\u1B56\x03\x02\x02\x02\u1B5F\u1B60\x03\x02\x02\x02\u1B60" +
		"\u1B68\x03\x02\x02\x02\u1B61\u1B66\x07\u01BA\x02\x02\u1B62\u1B67\x05\u0230" +
		"\u0119\x02\u1B63\u1B64\x073\x02\x02\u1B64\u1B65\x07\x9E\x02\x02\u1B65" +
		"\u1B67\x05\u0210\u0109\x02\u1B66\u1B62\x03\x02\x02\x02\u1B66\u1B63\x03" +
		"\x02\x02\x02\u1B67\u1B69\x03\x02\x02\x02\u1B68\u1B61\x03\x02\x02\x02\u1B68" +
		"\u1B69\x03\x02\x02\x02\u1B69\u1B6C\x03\x02\x02\x02\u1B6A\u1B6B\x07\u01AA" +
		"\x02\x02\u1B6B\u1B6D\x05\u0280\u0141\x02\u1B6C\u1B6A\x03\x02\x02\x02\u1B6C" +
		"\u1B6D\x03\x02\x02\x02\u1B6D\u02AF\x03\x02\x02\x02\u1B6E\u1B6F\x05\u02A6" +
		"\u0154\x02\u1B6F\u1B72\x07\u0242\x02\x02\u1B70\u1B73\x05\u0230\u0119\x02" +
		"\u1B71\u1B73\x07\u0187\x02\x02\u1B72\u1B70\x03\x02\x02\x02\u1B72\u1B71" +
		"\x03\x02\x02\x02\u1B73\u1B96\x03\x02\x02\x02\u1B74\u1B75\x07\u024B\x02" +
		"\x02\u1B75\u1B7A\x05\u02A6\u0154\x02\u1B76\u1B77\x07\u0245\x02\x02\u1B77" +
		"\u1B79\x05\u02A6\u0154\x02\u1B78\u1B76\x03\x02\x02\x02\u1B79\u1B7C\x03" +
		"\x02\x02\x02\u1B7A\u1B78\x03\x02\x02\x02\u1B7A\u1B7B\x03\x02\x02\x02\u1B7B" +
		"\u1B7D\x03\x02\x02\x02\u1B7C\u1B7A\x03\x02\x02\x02\u1B7D\u1B7E\x07\u024C" +
		"\x02\x02\u1B7E\u1B80\x07\u0242\x02\x02\u1B7F\u1B81\x07\u0144\x02\x02\u1B80" +
		"\u1B7F\x03\x02\x02\x02\u1B80\u1B81\x03\x02\x02\x02\u1B81\u1B93\x03\x02" +
		"\x02\x02\u1B82\u1B85\x07\u024B\x02\x02\u1B83\u1B86\x05\u0230\u0119\x02" +
		"\u1B84\u1B86\x07\u0187\x02\x02\u1B85\u1B83\x03\x02\x02\x02\u1B85\u1B84" +
		"\x03\x02\x02\x02\u1B86\u1B8E\x03\x02\x02\x02\u1B87\u1B8A\x07\u0245\x02" +
		"\x02\u1B88\u1B8B\x05\u0230\u0119\x02\u1B89\u1B8B\x07\u0187\x02\x02\u1B8A" +
		"\u1B88\x03\x02\x02\x02\u1B8A\u1B89\x03\x02\x02\x02\u1B8B\u1B8D\x03\x02" +
		"\x02\x02\u1B8C\u1B87\x03\x02\x02\x02\u1B8D\u1B90\x03\x02\x02\x02\u1B8E" +
		"\u1B8C\x03\x02\x02\x02\u1B8E\u1B8F\x03\x02\x02\x02\u1B8F\u1B91\x03\x02" +
		"\x02\x02\u1B90\u1B8E\x03\x02\x02\x02\u1B91\u1B94\x07\u024C\x02\x02\u1B92" +
		"\u1B94\x05\u026E\u0138\x02\u1B93\u1B82\x03\x02\x02\x02\u1B93\u1B92\x03" +
		"\x02\x02\x02\u1B94\u1B96\x03\x02\x02\x02\u1B95\u1B6E\x03\x02\x02\x02\u1B95" +
		"\u1B74\x03\x02\x02\x02\u1B96\u02B1\x03\x02\x02\x02\u1B97\u1B98\x07\x9A" +
		"\x02\x02\u1B98\u1B9B\x05\u0210\u0109\x02\u1B99\u1B9A\x07\u0245\x02\x02" +
		"\u1B9A\u1B9C\x05\u0146\xA4\x02\u1B9B\u1B99\x03\x02\x02\x02\u1B9B\u1B9C" +
		"\x03\x02\x02\x02\u1B9C\u02B3\x03\x02\x02\x02\u1B9D\u1B9F\x07\u0107\x02" +
		"\x02\u1B9E\u1BA0\x07\u01AF\x02\x02\u1B9F\u1B9E\x03\x02\x02\x02\u1B9F\u1BA0" +
		"\x03\x02\x02\x02\u1BA0\u1BA1\x03\x02\x02\x02\u1BA1\u1BA6\x05\u0186\xC4" +
		"\x02\u1BA2\u1BA3\x07\u0245\x02\x02\u1BA3\u1BA5\x05\u0186\xC4\x02\u1BA4" +
		"\u1BA2\x03\x02\x02\x02\u1BA5\u1BA8\x03\x02\x02\x02\u1BA6\u1BA4\x03\x02" +
		"\x02\x02\u1BA6\u1BA7\x03\x02\x02\x02\u1BA7\u1BAB\x03\x02\x02\x02\u1BA8" +
		"\u1BA6\x03\x02\x02\x02\u1BA9\u1BAA\tc\x02\x02\u1BAA\u1BAC\x07h\x02\x02" +
		"\u1BAB\u1BA9\x03\x02\x02\x02\u1BAB\u1BAC\x03\x02\x02\x02\u1BAC\u1BAE\x03" +
		"\x02\x02\x02\u1BAD\u1BAF\x05\u01F8\xFD\x02\u1BAE\u1BAD\x03\x02\x02\x02" +
		"\u1BAE\u1BAF\x03\x02\x02\x02\u1BAF\u02B5\x03\x02\x02\x02\u1BB0\u1BB5\x05" +
		"\u0210\u0109\x02\u1BB1\u1BB2\x07\u0245\x02\x02\u1BB2\u1BB4\x05\u0210\u0109" +
		"\x02\u1BB3\u1BB1\x03\x02\x02\x02\u1BB4\u1BB7\x03\x02\x02\x02\u1BB5\u1BB3" +
		"\x03\x02\x02\x02\u1BB5\u1BB6\x03\x02\x02\x02\u1BB6\u02B7\x03\x02\x02\x02" +
		"\u1BB7\u1BB5\x03\x02\x02\x02\u1BB8\u1BBE\x07\u018B\x02\x02\u1BB9\u1BBC" +
		"\x07~\x02\x02\u1BBA\u1BBD\x05\u0210\u0109\x02\u1BBB\u1BBD\x05\u0146\xA4" +
		"\x02\u1BBC\u1BBA\x03\x02\x02\x02\u1BBC\u1BBB\x03\x02\x02\x02\u1BBD\u1BBF" +
		"\x03\x02\x02\x02\u1BBE\u1BB9\x03\x02\x02\x02\u1BBE\u1BBF\x03\x02\x02\x02" +
		"\u1BBF\u1BC0\x03\x02\x02\x02\u1BC0\u1BC9\x05\u0146\xA4\x02\u1BC1\u1BC2" +
		"\x07\u018B\x02\x02\u1BC2\u1BC3\x05\u0146\xA4\x02\u1BC3\u1BC6\x07~\x02" +
		"\x02\u1BC4\u1BC7\x05\u0210\u0109\x02\u1BC5\u1BC7\x05\u0146\xA4\x02\u1BC6" +
		"\u1BC4\x03\x02\x02\x02\u1BC6\u1BC5\x03\x02\x02\x02\u1BC7\u1BC9\x03\x02" +
		"\x02\x02\u1BC8\u1BB8\x03\x02\x02\x02\u1BC8\u1BC1\x03\x02\x02\x02\u1BC9" +
		"\u02B9\x03\x02\x02\x02\u1BCA\u1BCB\x07\u025E\x02\x02\u1BCB\u1BCE\x05\u0210" +
		"\u0109\x02\u1BCC\u1BCF\x05\u0210\u0109\x02\u1BCD\u1BCF\x05\u0240\u0121" +
		"\x02\u1BCE\u1BCC\x03\x02\x02\x02\u1BCE\u1BCD\x03\x02\x02\x02\u1BCF\u02BB" +
		"\x03\x02\x02\x02\u1BD0\u1BD2\x05\u02BE\u0160\x02\u1BD1\u1BD0\x03\x02\x02" +
		"\x02\u1BD1\u1BD2\x03\x02\x02\x02\u1BD2\u1BD4\x03\x02\x02\x02\u1BD3\u1BD5" +
		"\x05\u02C0\u0161\x02\u1BD4\u1BD3\x03\x02\x02\x02\u1BD4\u1BD5\x03\x02\x02" +
		"\x02\u1BD5\u1BD6\x03\x02\x02\x02\u1BD6\u1BD7\x07\x15\x02\x02\u1BD7\u1BD9" +
		"\x05\u02CC\u0167\x02\u1BD8\u1BDA\x05\u02CA\u0166\x02\u1BD9\u1BD8\x03\x02" +
		"\x02\x02\u1BD9\u1BDA\x03\x02\x02\x02\u1BDA\u1BDB\x03\x02\x02\x02\u1BDB" +
		"\u1BDD\x07\u018D\x02\x02\u1BDC\u1BDE\x05\u0210\u0109\x02\u1BDD\u1BDC\x03" +
		"\x02\x02\x02\u1BDD\u1BDE\x03\x02\x02\x02\u1BDE\u02BD\x03\x02\x02\x02\u1BDF" +
		"\u1BE0\x07\u025B\x02\x02\u1BE0\u1BE1\x05\u0210\u0109\x02\u1BE1\u1BE2\x07" +
		"\u025C\x02\x02\u1BE2\u02BF\x03\x02\x02\x02\u1BE3\u1BE7\x07:\x02\x02\u1BE4" +
		"\u1BE6\x05\u02C2\u0162\x02\u1BE5\u1BE4\x03\x02\x02\x02\u1BE6\u1BE9\x03" +
		"\x02\x02\x02\u1BE7\u1BE5\x03\x02\x02\x02\u1BE7\u1BE8\x03\x02\x02\x02\u1BE8" +
		"\u02C1\x03\x02\x02\x02\u1BE9\u1BE7\x03\x02\x02\x02\u1BEA\u1BEC\x07:\x02" +
		"\x02\u1BEB\u1BEA\x03\x02\x02\x02\u1BEC\u1BEF\x03\x02\x02\x02\u1BED\u1BEB" +
		"\x03\x02\x02\x02\u1BED\u1BEE\x03\x02\x02\x02\u1BEE\u1BF0\x03\x02\x02\x02" +
		"\u1BEF\u1BED\x03\x02\x02\x02\u1BF0\u1BF1\x05\u0210\u0109\x02\u1BF1\u1BF2" +
		"\x05\u02C4\u0163\x02\u1BF2\u1BF3\x07\u0244\x02\x02\u1BF3\u02C3\x03\x02" +
		"\x02\x02\u1BF4\u1BF6\x07\u0222\x02\x02\u1BF5\u1BF4\x03\x02\x02\x02\u1BF5" +
		"\u1BF6\x03\x02\x02\x02\u1BF6\u1BF7\x03\x02\x02\x02\u1BF7\u1BF9\x05\u02C8" +
		"\u0165\x02\u1BF8\u1BFA\x05\u01FA\xFE\x02\u1BF9\u1BF8\x03\x02\x02\x02\u1BF9" +
		"\u1BFA\x03\x02\x02\x02\u1BFA\u1BFD\x03\x02\x02\x02\u1BFB\u1BFC\x07\u01A0" +
		"\x02\x02\u1BFC\u1BFE\x07\u01A1\x02\x02\u1BFD\u1BFB\x03\x02\x02\x02\u1BFD" +
		"\u1BFE\x03\x02\x02\x02\u1BFE\u1C01\x03\x02\x02\x02\u1BFF\u1C00\td\x02" +
		"\x02\u1C00\u1C02\x05\u0230\u0119\x02\u1C01\u1BFF\x03\x02\x02\x02\u1C01" +
		"\u1C02\x03\x02\x02\x02\u1C02\u1C19\x03\x02\x02\x02\u1C03\u1C04\x07\u0220" +
		"\x02\x02\u1C04\u1C07\x07\u0191\x02\x02\u1C05\u1C08\x05\u0210\u0109\x02" +
		"\u1C06\u1C08\x07\u0264\x02\x02\u1C07\u1C05\x03\x02\x02\x02\u1C07\u1C06" +
		"\x03\x02\x02\x02\u1C08\u1C19\x03\x02\x02\x02\u1C09\u1C0B\x07\x98\x02\x02" +
		"\u1C0A\u1C09\x03\x02\x02\x02\u1C0A\u1C0B\x03\x02\x02\x02\u1C0B\u1C0C\x03" +
		"\x02\x02\x02\u1C0C\u1C0E\x07\xDD\x02\x02\u1C0D\u1C0A\x03\x02\x02\x02\u1C0D" +
		"\u1C0E\x03\x02\x02\x02\u1C0E\u1C0F\x03\x02\x02\x02\u1C0F\u1C14\x074\x02" +
		"\x02\u1C10\u1C11\x07\u024B\x02\x02\u1C11\u1C12\x05\u02C6\u0164\x02\u1C12" +
		"\u1C13\x07\u024C\x02\x02\u1C13\u1C15\x03\x02\x02\x02\u1C14\u1C10\x03\x02" +
		"\x02\x02\u1C14\u1C15\x03\x02\x02\x02\u1C15\u1C16\x03\x02\x02\x02\u1C16" +
		"\u1C17\te\x02\x02\u1C17\u1C19\x05\u0270\u0139\x02\u1C18\u1BF5\x03\x02" +
		"\x02\x02\u1C18\u1C03\x03\x02\x02\x02\u1C18\u1C0D\x03\x02\x02\x02\u1C19" +
		"\u02C5\x03\x02\x02\x02\u1C1A\u1C1B\x05\u0210\u0109\x02\u1C1B\u1C22\x05" +
		"\u0224\u0113\x02\u1C1C\u1C1D\x07\u0245\x02\x02\u1C1D\u1C1E\x05\u0210\u0109" +
		"\x02\u1C1E\u1C1F\x05\u0224\u0113\x02\u1C1F\u1C21\x03\x02\x02\x02\u1C20" +
		"\u1C1C\x03\x02\x02\x02\u1C21\u1C24\x03\x02\x02\x02\u1C22\u1C20\x03\x02" +
		"\x02\x02\u1C22\u1C23\x03\x02\x02\x02\u1C23\u02C7\x03\x02\x02\x02\u1C24" +
		"\u1C22\x03\x02\x02\x02\u1C25\u1C2F\x05\u0224\u0113\x02\u1C26\u1C27\x05" +
		"\u026A\u0136\x02\u1C27\u1C28\x07\u0251\x02\x02\u1C28\u1C29\x07\u0109\x02" +
		"\x02\u1C29\u1C2F\x03\x02\x02\x02\u1C2A\u1C2B\x05\u0220\u0111\x02\u1C2B" +
		"\u1C2C\x07\u0251\x02\x02\u1C2C\u1C2D\x07\u023B\x02\x02\u1C2D\u1C2F\x03" +
		"\x02\x02\x02\u1C2E\u1C25\x03\x02\x02\x02\u1C2E\u1C26\x03\x02\x02\x02\u1C2E" +
		"\u1C2A\x03\x02\x02\x02\u1C2F\u02C9\x03\x02\x02\x02\u1C30\u1C36\x07\u022B" +
		"\x02\x02\u1C31\u1C32\x07\u01B9\x02\x02\u1C32\u1C33\x05\u0230\u0119\x02" +
		"\u1C33\u1C34\x07\u01B0\x02\x02\u1C34\u1C35\x05\u02CC\u0167\x02\u1C35\u1C37" +
		"\x03\x02\x02\x02\u1C36\u1C31\x03\x02\x02\x02\u1C37\u1C38\x03\x02\x02\x02" +
		"\u1C38\u1C36\x03\x02\x02\x02\u1C38\u1C39\x03\x02\x02\x02\u1C39\u02CB\x03" +
		"\x02\x02\x02\u1C3A\u1C3B\x05\u02CE\u0168\x02\u1C3B\u1C3C\x07\u0244\x02" +
		"\x02\u1C3C\u1C3E\x03\x02\x02\x02\u1C3D\u1C3A\x03\x02\x02\x02\u1C3E\u1C41" +
		"\x03\x02\x02\x02\u1C3F\u1C3D\x03\x02\x02\x02\u1C3F\u1C40\x03\x02\x02\x02" +
		"\u1C40\u02CD\x03\x02\x02\x02\u1C41\u1C3F\x03\x02\x02\x02\u1C42\u1C4C\x05" +
		"\u02BC\u015F\x02\u1C43\u1C4C\x05\u02D0\u0169\x02\u1C44\u1C4C\x05\u02DC" +
		"\u016F\x02\u1C45\u1C4C\x05\u02E2\u0172\x02\u1C46\u1C4C\x05\u02DE\u0170" +
		"\x02\u1C47\u1C4C\x05\u02E4\u0173\x02\u1C48\u1C4C\x05<\x1F\x02\u1C49\u1C4C" +
		"\x05\u02F8\u017D\x02\u1C4A\u1C4C\x05\x1E\x10\x02\u1C4B\u1C42\x03\x02\x02" +
		"\x02\u1C4B\u1C43\x03\x02\x02\x02\u1C4B\u1C44\x03\x02\x02\x02\u1C4B\u1C45" +
		"\x03\x02\x02\x02\u1C4B\u1C46\x03\x02\x02\x02\u1C4B\u1C47\x03\x02\x02\x02" +
		"\u1C4B\u1C48\x03\x02\x02\x02\u1C4B\u1C49\x03\x02\x02\x02\u1C4B\u1C4A\x03" +
		"\x02\x02\x02\u1C4C\u02CF\x03\x02\x02\x02\u1C4D\u1C5F\x05\u02D8\u016D\x02" +
		"\u1C4E\u1C4F\x07\u0235\x02\x02\u1C4F\u1C5F\x05\u02D6\u016C\x02\u1C50\u1C52" +
		"\x07\u022D\x02\x02\u1C51\u1C53\tf\x02\x02\u1C52\u1C51\x03\x02\x02\x02" +
		"\u1C52\u1C53\x03\x02\x02\x02\u1C53\u1C54\x03\x02\x02\x02\u1C54\u1C55\x07" +
		"\u0226\x02\x02\u1C55\u1C5A\x05\u02D4\u016B\x02\u1C56\u1C57\x07\u0245\x02" +
		"\x02\u1C57\u1C59\x05\u02D4\u016B\x02\u1C58\u1C56\x03\x02\x02\x02\u1C59" +
		"\u1C5C\x03\x02\x02\x02\u1C5A\u1C58\x03\x02\x02\x02\u1C5A\u1C5B\x03\x02" +
		"\x02\x02\u1C5B\u1C5F\x03\x02\x02\x02\u1C5C\u1C5A\x03\x02\x02\x02\u1C5D" +
		"\u1C5F\x07\u01A1\x02\x02\u1C5E\u1C4D\x03\x02\x02\x02\u1C5E\u1C4E\x03\x02" +
		"\x02\x02\u1C5E\u1C50\x03\x02\x02\x02\u1C5E\u1C5D\x03\x02\x02\x02\u1C5F" +
		"\u02D1\x03\x02\x02\x02\u1C60\u1C63\x05\u026A\u0136\x02\u1C61\u1C63\x07" +
		"\u0264\x02\x02\u1C62\u1C60\x03\x02\x02\x02\u1C62\u1C61\x03\x02\x02\x02" +
		"\u1C63\u1C6A\x03\x02\x02\x02\u1C64\u1C65\x07\u0257\x02\x02\u1C65\u1C66" +
		"\x05\u0230\u0119\x02\u1C66\u1C67\x07\u0258\x02\x02\u1C67\u1C69\x03\x02" +
		"\x02\x02\u1C68\u1C64\x03\x02\x02\x02\u1C69\u1C6C\x03\x02\x02\x02\u1C6A" +
		"\u1C68\x03\x02\x02\x02\u1C6A\u1C6B\x03\x02\x02\x02\u1C6B\u02D3\x03\x02" +
		"\x02\x02\u1C6C\u1C6A\x03\x02\x02\x02\u1C6D\u1C6E\x05\u02D2\u016A\x02\u1C6E" +
		"\u1C6F\tg\x02\x02\u1C6F\u1C70\x05\u0210\u0109\x02\u1C70\u02D5\x03\x02" +
		"\x02\x02\u1C71\u1C7E\x05\u026C\u0137\x02\u1C72\u1C73\x07\u01A3\x02\x02" +
		"\u1C73\u1C74\x07\u024B\x02\x02\u1C74\u1C79\x05\u0230\u0119\x02\u1C75\u1C76" +
		"\x07\u0245\x02\x02\u1C76\u1C78\x05\u0230\u0119\x02\u1C77\u1C75\x03\x02" +
		"\x02\x02\u1C78\u1C7B\x03\x02\x02\x02\u1C79\u1C77\x03\x02\x02\x02\u1C79" +
		"\u1C7A\x03\x02\x02\x02\u1C7A\u1C7C\x03\x02\x02\x02\u1C7B\u1C79\x03\x02" +
		"\x02\x02\u1C7C\u1C7D\x07\u024C\x02\x02\u1C7D\u1C7F\x03\x02\x02\x02\u1C7E" +
		"\u1C72\x03\x02\x02\x02\u1C7E\u1C7F\x03\x02\x02\x02\u1C7F\u1C81\x03\x02" +
		"\x02\x02\u1C80\u1C71\x03\x02\x02\x02\u1C80\u1C81\x03\x02\x02\x02\u1C81" +
		"\u1C82\x03\x02\x02\x02\u1C82\u1C8C\x05\u0280\u0141\x02\u1C83\u1C84\x07" +
		"\u0193\x02\x02\u1C84\u1C89\x05\u0286\u0144\x02\u1C85\u1C86\x07\u0245\x02" +
		"\x02\u1C86\u1C88\x05\u0286\u0144\x02\u1C87\u1C85\x03\x02\x02\x02\u1C88" +
		"\u1C8B\x03\x02\x02\x02\u1C89\u1C87\x03\x02\x02\x02\u1C89\u1C8A\x03\x02" +
		"\x02\x02\u1C8A\u1C8D\x03\x02\x02\x02\u1C8B\u1C89\x03\x02\x02\x02\u1C8C" +
		"\u1C83\x03\x02\x02\x02\u1C8C\u1C8D\x03\x02\x02\x02\u1C8D\u1C90\x03\x02" +
		"\x02\x02\u1C8E\u1C8F\x07\u01BA\x02\x02\u1C8F\u1C91\x05\u0230\u0119\x02" +
		"\u1C90\u1C8E\x03\x02\x02\x02\u1C90\u1C91\x03\x02\x02\x02\u1C91\u1C93\x03" +
		"\x02\x02\x02\u1C92\u1C94\x05\u028E\u0148\x02\u1C93\u1C92\x03\x02\x02\x02" +
		"\u1C93\u1C94\x03\x02\x02\x02\u1C94\u1C97\x03\x02\x02\x02\u1C95\u1C96\x07" +
		"\u0196\x02\x02\u1C96\u1C98\x05\u0230\u0119\x02\u1C97\u1C95\x03\x02\x02" +
		"\x02\u1C97\u1C98\x03\x02\x02\x02\u1C98\u1CA7\x03\x02\x02\x02\u1C99\u1C9A" +
		"\x07\u01BB\x02\x02\u1C9A\u1C9B\x05\u0210\u0109\x02\u1C9B\u1C9C\x07\u0176" +
		"\x02\x02\u1C9C\u1CA4\x05\u025E\u0130\x02\u1C9D\u1C9E\x07\u0245\x02\x02" +
		"\u1C9E\u1C9F\x05\u0210\u0109\x02\u1C9F\u1CA0\x07\u0176\x02\x02\u1CA0\u1CA1" +
		"\x05\u025E\u0130\x02\u1CA1\u1CA3\x03\x02\x02\x02\u1CA2\u1C9D\x03\x02\x02" +
		"\x02\u1CA3\u1CA6\x03\x02\x02\x02\u1CA4\u1CA2\x03\x02\x02\x02\u1CA4\u1CA5" +
		"\x03\x02\x02\x02\u1CA5\u1CA8\x03\x02\x02\x02\u1CA6\u1CA4\x03\x02\x02\x02" +
		"\u1CA7\u1C99\x03\x02\x02\x02\u1CA7\u1CA8\x03\x02\x02\x02\u1CA8\u1CAE\x03" +
		"\x02\x02\x02\u1CA9\u1CAB\t^\x02\x02\u1CAA\u1CAC\x05\u026C\u0137\x02\u1CAB" +
		"\u1CAA\x03\x02\x02\x02\u1CAB\u1CAC\x03\x02\x02\x02\u1CAC\u1CAD\x03\x02" +
		"\x02\x02\u1CAD\u1CAF\x05\u027A\u013E\x02\u1CAE\u1CA9\x03\x02\x02\x02\u1CAE" +
		"\u1CAF\x03\x02\x02\x02\u1CAF\u1CB3\x03\x02\x02\x02\u1CB0\u1CB2\x05\u0272" +
		"\u013A\x02\u1CB1\u1CB0\x03\x02\x02\x02\u1CB2\u1CB5\x03\x02\x02\x02\u1CB3" +
		"\u1CB1\x03\x02\x02\x02\u1CB3\u1CB4\x03\x02\x02\x02\u1CB4\u02D7\x03\x02" +
		"\x02\x02\u1CB5\u1CB3\x03\x02\x02\x02\u1CB6\u1CB7\x05\u02D2\u016A\x02\u1CB7" +
		"\u1CBA\tg\x02\x02\u1CB8\u1CBB\x05\u0274\u013B\x02\u1CB9\u1CBB\x05\u02D6" +
		"\u016C\x02\u1CBA\u1CB8\x03\x02\x02\x02\u1CBA\u1CB9\x03\x02\x02\x02\u1CBB" +
		"\u02D9\x03\x02\x02\x02\u1CBC\u1CBD\x07T\x02\x02\u1CBD\u1CBF\x05\u0230" +
		"\u0119\x02\u1CBE\u1CC0\x05\u02F2\u017A\x02\u1CBF\u1CBE\x03\x02\x02\x02" +
		"\u1CBF\u1CC0\x03\x02\x02\x02\u1CC0\u02DB\x03\x02\x02\x02\u1CC1\u1CC8\x05" +
		"\u02EC\u0177\x02\u1CC2\u1CC3\x07\x18\x02\x02\u1CC3\u1CC8\x05\u0246\u0124" +
		"\x02\u1CC4\u1CC8\x05\u02F4\u017B\x02\u1CC5\u1CC8\x05\u02F6\u017C\x02\u1CC6" +
		"\u1CC8\x05\u02EE\u0178\x02\u1CC7\u1CC1\x03\x02\x02\x02\u1CC7\u1CC2\x03" +
		"\x02\x02\x02\u1CC7\u1CC4\x03\x02\x02\x02\u1CC7\u1CC5\x03\x02\x02\x02\u1CC7" +
		"\u1CC6\x03\x02\x02\x02\u1CC8\u02DD\x03\x02\x02\x02\u1CC9\u1CCA\x07\u0234" +
		"\x02\x02\u1CCA\u1CCF\x05\u02D2\u016A\x02\u1CCB\u1CCD\x07\x98\x02\x02\u1CCC" +
		"\u1CCB\x03\x02\x02\x02\u1CCC\u1CCD\x03\x02\x02\x02\u1CCD\u1CCE\x03\x02" +
		"\x02\x02\u1CCE\u1CD0\x07\xDD\x02\x02\u1CCF\u1CCC\x03\x02\x02\x02\u1CCF" +
		"\u1CD0\x03\x02\x02\x02\u1CD0\u1CD1\x03\x02\x02\x02\u1CD1\u1CD2\x07\u0191" +
		"\x02\x02\u1CD2\u1CD3\x05\u02F8\u017D\x02\u1CD3\u1CF6\x03\x02\x02\x02\u1CD4" +
		"\u1CD5\x07\u0234\x02\x02\u1CD5\u1CE1\x05\u02D2\u016A\x02\u1CD6\u1CD7\x07" +
		"\u024B\x02\x02\u1CD7\u1CDC\x05\u02E0\u0171\x02\u1CD8\u1CD9\x07\u0245\x02" +
		"\x02\u1CD9\u1CDB\x05\u02E0\u0171\x02";
	private static readonly _serializedATNSegment14: string =
		"\u1CDA\u1CD8\x03\x02\x02\x02\u1CDB\u1CDE\x03\x02\x02\x02\u1CDC\u1CDA\x03" +
		"\x02\x02\x02\u1CDC\u1CDD\x03\x02\x02\x02\u1CDD\u1CDF\x03\x02\x02\x02\u1CDE" +
		"\u1CDC\x03\x02\x02\x02\u1CDF\u1CE0\x07\u024C\x02\x02\u1CE0\u1CE2\x03\x02" +
		"\x02\x02\u1CE1\u1CD6\x03\x02\x02\x02\u1CE1\u1CE2\x03\x02\x02\x02\u1CE2" +
		"\u1CF6\x03\x02\x02\x02\u1CE3\u1CE5\x07\u0190\x02\x02\u1CE4\u1CE6\x05:" +
		"\x1E\x02\u1CE5\u1CE4\x03\x02\x02\x02\u1CE5\u1CE6\x03\x02\x02\x02\u1CE6" +
		"\u1CE8\x03\x02\x02\x02\u1CE7\u1CE9\t\x07\x02\x02\u1CE8\u1CE7\x03\x02\x02" +
		"\x02\u1CE8\u1CE9\x03\x02\x02\x02\u1CE9\u1CEA\x03\x02\x02\x02\u1CEA\u1CF6" +
		"\x05\u02D2\u016A\x02\u1CEB\u1CED\x07\x93\x02\x02\u1CEC\u1CEE\x05:\x1E" +
		"\x02\u1CED\u1CEC\x03\x02\x02\x02\u1CED\u1CEE\x03\x02\x02\x02\u1CEE\u1CF0" +
		"\x03\x02\x02\x02\u1CEF\u1CF1\t\x07\x02\x02\u1CF0\u1CEF\x03\x02\x02\x02" +
		"\u1CF0\u1CF1\x03\x02\x02\x02\u1CF1\u1CF2\x03\x02\x02\x02\u1CF2\u1CF6\x05" +
		"\u02D2\u016A\x02\u1CF3\u1CF4\x07!\x02\x02\u1CF4\u1CF6\x05\u02D2\u016A" +
		"\x02\u1CF5\u1CC9\x03\x02\x02\x02\u1CF5\u1CD4\x03\x02\x02\x02\u1CF5\u1CE3" +
		"\x03\x02\x02\x02\u1CF5\u1CEB\x03\x02\x02\x02\u1CF5\u1CF3\x03\x02\x02\x02" +
		"\u1CF6\u02DF\x03\x02\x02\x02\u1CF7\u1CF8\x05\u0210\u0109\x02\u1CF8\u1CF9" +
		"\x07\u025A\x02\x02\u1CF9\u1CFB\x03\x02\x02\x02\u1CFA\u1CF7\x03\x02\x02" +
		"\x02\u1CFA\u1CFB\x03\x02\x02\x02\u1CFB\u1CFC\x03\x02\x02\x02\u1CFC\u1CFD" +
		"\x05\u0230\u0119\x02\u1CFD\u02E1\x03\x02\x02\x02\u1CFE\u1D04\th\x02\x02" +
		"\u1CFF\u1D01\x07\u0173\x02\x02\u1D00\u1D02\x07\x98\x02\x02\u1D01\u1D00" +
		"\x03\x02\x02\x02\u1D01\u1D02\x03\x02\x02\x02\u1D02\u1D03\x03\x02\x02\x02" +
		"\u1D03\u1D05\x07\x1D\x02\x02\u1D04\u1CFF\x03\x02\x02\x02\u1D04\u1D05\x03" +
		"\x02\x02\x02\u1D05\u1D08\x03\x02\x02\x02\u1D06\u1D08\x05\x18\r\x02\u1D07" +
		"\u1CFE\x03\x02\x02\x02\u1D07\u1D06\x03\x02\x02\x02\u1D08\u02E3\x03\x02" +
		"\x02\x02\u1D09\u1D0B\x07\u0237\x02\x02\u1D0A\u1D0C\x05\u02E6\u0174\x02" +
		"\u1D0B\u1D0A\x03\x02\x02\x02\u1D0B\u1D0C\x03\x02\x02\x02\u1D0C\u1D15\x03" +
		"\x02\x02\x02\u1D0D\u1D12\x05\u0146\xA4\x02\u1D0E\u1D0F\x07\u0245\x02\x02" +
		"\u1D0F\u1D11\x05\u0230\u0119\x02\u1D10\u1D0E\x03\x02\x02\x02\u1D11\u1D14" +
		"\x03\x02\x02\x02\u1D12\u1D10\x03\x02\x02\x02\u1D12\u1D13\x03\x02\x02\x02" +
		"\u1D13\u1D16\x03\x02\x02\x02\u1D14\u1D12\x03\x02\x02\x02\u1D15\u1D0D\x03" +
		"\x02\x02\x02\u1D15\u1D16\x03\x02\x02\x02\u1D16\u1D18\x03\x02\x02\x02\u1D17" +
		"\u1D19\x05\u02E8\u0175\x02\u1D18\u1D17\x03\x02\x02\x02\u1D18\u1D19\x03" +
		"\x02\x02\x02\u1D19\u1D32\x03\x02\x02\x02\u1D1A\u1D1C\x07\u0237\x02\x02" +
		"\u1D1B\u1D1D\x05\u02E6\u0174\x02\u1D1C\u1D1B\x03\x02\x02\x02\u1D1C\u1D1D" +
		"\x03\x02\x02\x02\u1D1D\u1D1E\x03\x02\x02\x02\u1D1E\u1D20\x05\u0210\u0109" +
		"\x02\u1D1F\u1D21\x05\u02E8\u0175\x02\u1D20\u1D1F\x03\x02\x02\x02\u1D20" +
		"\u1D21\x03\x02\x02\x02\u1D21\u1D32\x03\x02\x02\x02\u1D22\u1D24\x07\u0237" +
		"\x02\x02\u1D23\u1D25\x05\u02E6\u0174\x02\u1D24\u1D23\x03\x02\x02\x02\u1D24" +
		"\u1D25\x03\x02\x02\x02\u1D25\u1D26\x03\x02\x02\x02\u1D26\u1D27\x07\u023D" +
		"\x02\x02\u1D27\u1D29\x05\u0146\xA4\x02\u1D28\u1D2A\x05\u02E8\u0175\x02" +
		"\u1D29\u1D28\x03\x02\x02\x02\u1D29\u1D2A\x03\x02\x02\x02\u1D2A\u1D32\x03" +
		"\x02\x02\x02\u1D2B\u1D2C\x07\u0221\x02\x02\u1D2C\u1D2F\x05\u0230\u0119" +
		"\x02\u1D2D\u1D2E\x07\u0245\x02\x02\u1D2E\u1D30\x05\u0230\u0119\x02\u1D2F" +
		"\u1D2D\x03\x02\x02\x02\u1D2F\u1D30\x03\x02\x02\x02\u1D30\u1D32\x03\x02" +
		"\x02\x02\u1D31\u1D09\x03\x02\x02\x02\u1D31\u1D1A\x03\x02\x02\x02\u1D31" +
		"\u1D22\x03\x02\x02\x02\u1D31\u1D2B\x03\x02\x02\x02\u1D32\u02E5\x03\x02" +
		"\x02\x02\u1D33\u1D34\ti\x02\x02\u1D34\u02E7\x03\x02\x02\x02\u1D35\u1D36" +
		"\x07\u01B7\x02\x02\u1D36\u1D37\x05\u02EA\u0176\x02\u1D37\u1D38\x07\u0242" +
		"\x02\x02\u1D38\u1D40\x05\u0230\u0119\x02\u1D39\u1D3A\x07\u0245\x02\x02" +
		"\u1D3A\u1D3B\x05\u02EA\u0176\x02\u1D3B\u1D3C\x07\u0242\x02\x02\u1D3C\u1D3D" +
		"\x05\u0230\u0119\x02\u1D3D\u1D3F\x03\x02\x02\x02\u1D3E\u1D39\x03\x02\x02" +
		"\x02\u1D3F\u1D42\x03\x02\x02\x02\u1D40\u1D3E\x03\x02\x02\x02\u1D40\u1D41" +
		"\x03\x02\x02\x02\u1D41\u02E9\x03\x02\x02\x02\u1D42\u1D40\x03\x02\x02\x02" +
		"\u1D43\u1D44\tj\x02\x02\u1D44\u02EB\x03\x02\x02\x02\u1D45\u1D47\x07\u0239" +
		"\x02\x02\u1D46\u1D48\x05\u02D6\u016C\x02\u1D47\u1D46\x03\x02\x02\x02\u1D47" +
		"\u1D48\x03\x02\x02\x02\u1D48\u1D50\x03\x02\x02\x02\u1D49\u1D4A\x07\u0239" +
		"\x02\x02\u1D4A\u1D4B\x07\x97\x02\x02\u1D4B\u1D50\x05\u0230\u0119\x02\u1D4C" +
		"\u1D4D\x07\u0239\x02\x02\u1D4D\u1D4E\x07\u0236\x02\x02\u1D4E\u1D50\x05" +
		"\u02F8\u017D\x02\u1D4F\u1D45\x03\x02\x02\x02\u1D4F\u1D49\x03\x02\x02\x02" +
		"\u1D4F\u1D4C\x03\x02\x02\x02\u1D50\u02ED\x03\x02\x02\x02\u1D51\u1D53\x05" +
		"\u02BE\u0160\x02\u1D52\u1D51\x03\x02\x02\x02\u1D52\u1D53\x03\x02\x02\x02" +
		"\u1D53\u1D55\x03\x02\x02\x02\u1D54\u1D56\x05\u02F0\u0179\x02\u1D55\u1D54" +
		"\x03\x02\x02\x02\u1D55\u1D56\x03\x02\x02\x02\u1D56\u1D57\x03\x02\x02\x02" +
		"\u1D57\u1D58\x07\u0231\x02\x02\u1D58\u1D59\x05\u02CC\u0167\x02\u1D59\u1D5A" +
		"\x07\u018D\x02\x02\u1D5A\u1D5C\x07\u0231\x02\x02\u1D5B\u1D5D\x05\u0210" +
		"\u0109\x02\u1D5C\u1D5B\x03\x02\x02\x02\u1D5C\u1D5D\x03\x02\x02\x02\u1D5D" +
		"\u1D67\x03\x02\x02\x02\u1D5E\u1D60\tk\x02\x02\u1D5F\u1D61\x05\u0210\u0109" +
		"\x02\u1D60\u1D5F\x03\x02\x02\x02\u1D60\u1D61\x03\x02\x02\x02\u1D61\u1D64" +
		"\x03\x02\x02\x02\u1D62\u1D63\x07\u01B9\x02\x02\u1D63\u1D65\x05\u0230\u0119" +
		"\x02\u1D64\u1D62\x03\x02\x02\x02\u1D64\u1D65\x03\x02\x02\x02\u1D65\u1D67" +
		"\x03\x02\x02\x02\u1D66\u1D52\x03\x02\x02\x02\u1D66\u1D5E\x03\x02\x02\x02" +
		"\u1D67\u02EF\x03\x02\x02\x02\u1D68\u1D69\x07\u0240\x02\x02\u1D69\u1D98" +
		"\x05\u0230\u0119\x02\u1D6A\u1D6B\x07\u0191\x02\x02\u1D6B\u1D6C\x05\u0210" +
		"\u0109\x02\u1D6C\u1D6E\x07\u0197\x02\x02\u1D6D\u1D6F\x07\u023A\x02\x02" +
		"\u1D6E\u1D6D\x03\x02\x02\x02\u1D6E\u1D6F\x03\x02\x02\x02\u1D6F\u1D70\x03" +
		"\x02\x02\x02\u1D70\u1D71\x05\u0230\u0119\x02\u1D71\u1D72\x07\u025D\x02" +
		"\x02\u1D72\u1D75\x05\u0230\u0119\x02\u1D73\u1D74\x07\x16\x02\x02\u1D74" +
		"\u1D76\x05\u0230\u0119\x02\u1D75\u1D73\x03\x02\x02\x02\u1D75\u1D76\x03" +
		"\x02\x02\x02\u1D76\u1D98\x03\x02\x02\x02\u1D77\u1D78\x07\u0191\x02\x02" +
		"\u1D78\u1D79\x05\u02B6\u015C\x02\u1D79\u1D7A\x07\u0197\x02\x02\u1D7A\u1D7B" +
		"\x05\u02F8\u017D\x02\u1D7B\u1D98\x03\x02\x02\x02\u1D7C\u1D7D\x07\u0191" +
		"\x02\x02\u1D7D\u1D7E\x05\u0210\u0109\x02\u1D7E\u1D7F\x07\u0197\x02\x02" +
		"\u1D7F\u1D8B\x05\u0210\u0109\x02\u1D80\u1D81\x07\u024B\x02\x02\u1D81\u1D86" +
		"\x05\u02E0\u0171\x02\u1D82\u1D83\x07\u0245\x02\x02\u1D83\u1D85\x05\u02E0" +
		"\u0171\x02\u1D84\u1D82\x03\x02\x02\x02\u1D85\u1D88\x03\x02\x02\x02\u1D86" +
		"\u1D84\x03\x02\x02\x02\u1D86\u1D87\x03\x02\x02\x02\u1D87\u1D89\x03\x02" +
		"\x02\x02\u1D88\u1D86\x03\x02\x02\x02\u1D89\u1D8A\x07\u024C\x02\x02\u1D8A" +
		"\u1D8C\x03\x02\x02\x02\u1D8B\u1D80\x03\x02\x02\x02\u1D8B\u1D8C\x03\x02" +
		"\x02\x02\u1D8C\u1D98\x03\x02\x02\x02\u1D8D\u1D8E\x07\u022C\x02\x02\u1D8E" +
		"\u1D91\x05\u02B6\u015C\x02\u1D8F\u1D90\x07\u023C\x02\x02\u1D90\u1D92\x07" +
		"\u0262\x02\x02\u1D91\u1D8F\x03\x02\x02\x02\u1D91\u1D92\x03\x02\x02\x02" +
		"\u1D92\u1D93\x03\x02\x02\x02\u1D93\u1D94\x07\u0197\x02\x02\u1D94\u1D95" +
		"\x07\u0175\x02\x02\u1D95\u1D96\x05\u0230\u0119\x02\u1D96\u1D98\x03\x02" +
		"\x02\x02\u1D97\u1D68\x03\x02\x02\x02\u1D97\u1D6A\x03\x02\x02\x02\u1D97" +
		"\u1D77\x03\x02\x02\x02\u1D97\u1D7C\x03\x02\x02\x02\u1D97\u1D8D\x03\x02" +
		"\x02\x02\u1D98\u02F1\x03\x02\x02\x02\u1D99\u1D9A\x07\u01B7\x02\x02\u1D9A" +
		"\u1D9F\x05\u0230\u0119\x02\u1D9B\u1D9C\x07\u0245\x02\x02\u1D9C\u1D9E\x05" +
		"\u0230\u0119\x02\u1D9D\u1D9B\x03\x02\x02\x02\u1D9E\u1DA1\x03\x02\x02\x02" +
		"\u1D9F\u1D9D\x03\x02\x02\x02\u1D9F\u1DA0\x03\x02\x02\x02\u1DA0\u02F3\x03" +
		"\x02\x02\x02\u1DA1\u1D9F\x03\x02\x02\x02\u1DA2\u1DA3\x07i\x02\x02\u1DA3" +
		"\u1DA4\x05\u0230\u0119\x02\u1DA4\u1DA5\x07\u01B0\x02\x02\u1DA5\u1DAD\x05" +
		"\u02CC\u0167\x02\u1DA6\u1DA7\tl\x02\x02\u1DA7\u1DA8\x05\u0230\u0119\x02" +
		"\u1DA8\u1DA9\x07\u01B0\x02\x02\u1DA9\u1DAA\x05\u02CC\u0167\x02\u1DAA\u1DAC" +
		"\x03\x02\x02\x02\u1DAB\u1DA6\x03\x02\x02\x02\u1DAC\u1DAF\x03\x02\x02\x02" +
		"\u1DAD\u1DAB\x03\x02\x02\x02\u1DAD\u1DAE\x03\x02\x02\x02\u1DAE\u1DB2\x03" +
		"\x02\x02\x02\u1DAF\u1DAD\x03\x02\x02\x02\u1DB0\u1DB1\x07\u018C\x02\x02" +
		"\u1DB1\u1DB3\x05\u02CC\u0167\x02\u1DB2\u1DB0\x03\x02\x02\x02\u1DB2\u1DB3" +
		"\x03\x02\x02\x02\u1DB3\u1DB4\x03\x02\x02\x02\u1DB4\u1DB5\x07\u018D\x02" +
		"\x02\u1DB5\u1DB6\x07i\x02\x02\u1DB6\u02F5\x03\x02\x02\x02\u1DB7\u1DB9" +
		"\x07\u017A\x02\x02\u1DB8\u1DBA\x05\u0230\u0119\x02\u1DB9\u1DB8\x03\x02" +
		"\x02\x02\u1DB9\u1DBA\x03\x02\x02\x02\u1DBA\u1DC7\x03\x02\x02\x02\u1DBB" +
		"\u1DBC\x07\u01B9\x02\x02\u1DBC\u1DC1\x05\u0230\u0119\x02\u1DBD\u1DBE\x07" +
		"\u0245\x02\x02\u1DBE\u1DC0\x05\u0230\u0119\x02\u1DBF\u1DBD\x03\x02\x02" +
		"\x02\u1DC0\u1DC3\x03\x02\x02\x02\u1DC1\u1DBF\x03\x02\x02\x02\u1DC1\u1DC2" +
		"\x03\x02\x02\x02\u1DC2\u1DC4\x03\x02\x02\x02\u1DC3\u1DC1\x03\x02\x02\x02" +
		"\u1DC4\u1DC5\x07\u01B0\x02\x02\u1DC5\u1DC6\x05\u02CC\u0167\x02\u1DC6\u1DC8" +
		"\x03\x02\x02\x02\u1DC7\u1DBB\x03\x02\x02\x02\u1DC8\u1DC9\x03\x02\x02\x02" +
		"\u1DC9\u1DC7\x03\x02\x02\x02\u1DC9\u1DCA\x03\x02\x02\x02\u1DCA\u1DCD\x03" +
		"\x02\x02\x02\u1DCB\u1DCC\x07\u018C\x02\x02\u1DCC\u1DCE\x05\u02CC\u0167" +
		"\x02\u1DCD\u1DCB\x03\x02\x02\x02\u1DCD\u1DCE\x03\x02\x02\x02\u1DCE\u1DCF" +
		"\x03\x02\x02\x02\u1DCF\u1DD0\x07\u018D\x02\x02\u1DD0\u1DD1\x07\u017A\x02" +
		"\x02\u1DD1\u02F7\x03\x02\x02\x02\u1DD2\u1DD7\x05\x10\t\x02\u1DD3\u1DD7" +
		"\x05\u02DA\u016E\x02\u1DD4\u1DD7\x05(\x15\x02\u1DD5\u1DD7\x05 \x11\x02" +
		"\u1DD6\u1DD2\x03\x02\x02\x02\u1DD6\u1DD3\x03\x02\x02\x02\u1DD6\u1DD4\x03" +
		"\x02\x02\x02\u1DD6\u1DD5\x03\x02\x02\x02\u1DD7\u02F9\x03\x02\x02\x02\u040F" +
		"\u02FB\u0300\u0307\u030A\u030E\u0317\u0321\u0327\u032B\u0330\u0337\u033F" +
		"\u0345\u0349\u034F\u0351\u0358\u035B\u035F\u0363\u0366\u036C\u0372\u0374" +
		"\u037C\u0380\u0384\u038F\u0396\u0399\u039D\u03A4\u03AB\u03AE\u03B9\u03BC" +
		"\u03C2\u03C6\u03C9\u03CF\u03D9\u03E1\u03EA\u03F0\u03F3\u03F7\u0400\u0402" +
		"\u0409\u040D\u0413\u0417\u041E\u0426\u042C\u0431\u0434\u043E\u0443\u0450" +
		"\u0459\u045D\u0460\u0468\u046D\u0477\u0479\u0483\u0488\u048D\u0490\u0493" +
		"\u0496\u049B\u04A4\u04AF\u04B3\u04B7\u04BC\u04C3\u04CD\u04D2\u04DA\u04E0" +
		"\u04E3\u04E6\u04E9\u04EB\u04EF\u04F3\u04FC\u0502\u0506\u0508\u050D\u0536" +
		"\u053D\u0560\u056E\u0577\u057D\u0585\u0589\u0590\u0594\u0596\u0598\u059B" +
		"\u05A3\u05A9\u05B4\u05B6\u05BA\u05DB\u05EE\u0616\u061D\u0623\u0626\u062A" +
		"\u062D\u0631\u0638\u063D\u0653\u0657\u065A\u065F\u0662\u0666\u066A\u0673" +
		"\u067C\u068E\u06B8\u06BE\u06C1\u06C3\u06C7\u06CC\u06D0\u06D8\u06DF\u06EF" +
		"\u06F1\u06F7\u06FF\u0703\u070A\u0710\u0713\u0715\u0720\u0724\u0727\u0731" +
		"\u073C\u0744\u0748\u0758\u075F\u0766\u076B\u076F\u077C\u0782\u0784\u0790" +
		"\u0793\u07A8\u07AD\u07B4\u07B9\u07C0\u07C2\u07C9\u07D4\u07D9\u07DB\u07E2" +
		"\u07E4\u07EC\u07EE\u07F5\u07F7\u07FB\u07FF\u0807\u080D\u0810\u0812\u0814" +
		"\u0819\u081C\u0820\u0825\u082A\u0832\u083C\u0840\u0849\u084E\u0856\u0863" +
		"\u0866\u0873\u087F\u0887\u088E\u0896\u08A0\u08AC\u08B3\u08BE\u08C2\u08C9" +
		"\u08CC\u08D1\u08D5\u08DC\u08E1\u08E4\u08E6\u08F0\u08F4\u08F7\u08FA\u08FE" +
		"\u0905\u0909\u090C\u090F\u0912\u091F\u0929\u092D\u0931\u0936\u0938\u093D" +
		"\u093F\u0942\u0946\u0949\u094C\u0954\u0958\u095A\u096A\u096F\u0973\u0975" +
		"\u0984\u0987\u0991\u0994\u09A8\u09BA\u09BE\u09C2\u09C9\u09CC\u09E9\u0A07" +
		"\u0A0B\u0A10\u0A15\u0A1C\u0A1E\u0A23\u0A28\u0A2C\u0A33\u0A41\u0A55\u0A63" +
		"\u0A6C\u0A86\u0A8F\u0A95\u0AA0\u0AA3\u0AA6\u0AAF\u0AB5\u0ABA\u0ABF\u0AC4" +
		"\u0AC9\u0AD0\u0AD5\u0ADE\u0AE3\u0AE5\u0AE9\u0AEE\u0AF6\u0B00\u0B0A\u0B0F" +
		"\u0B1C\u0B36\u0B39\u0B3C\u0B3F\u0B4C\u0B56\u0B5D\u0B69\u0B6F\u0B72\u0B76" +
		"\u0B84\u0B89\u0B92\u0B97\u0BA3\u0BA7\u0BAB\u0BB2\u0BB6\u0BBC\u0BC1\u0BC7" +
		"\u0BCF\u0BD2\u0BD6\u0BF6\u0BFC\u0BFF\u0C04\u0C08\u0C15\u0C1A\u0C1F\u0C28" +
		"\u0C33\u0C36\u0C3B\u0C40\u0C42\u0C46\u0C4C\u0C57\u0C5C\u0C60\u0C67\u0C78" +
		"\u0C7E\u0C87\u0C8C\u0C99\u0CA1\u0CB6\u0CBA\u0CBF\u0CC7\u0CD4\u0D0C\u0D14" +
		"\u0D1D\u0D2C\u0D30\u0D36\u0D3D\u0D45\u0D4A\u0D53\u0D55\u0D5C\u0D60\u0D64" +
		"\u0D6F\u0D73\u0D7D\u0D82\u0D86\u0D8D\u0D90\u0D98\u0D9D\u0DA2\u0DA4\u0DA7" +
		"\u0DAB\u0DB1\u0DB4\u0DB7\u0DBC\u0DBE\u0DC2\u0DC5\u0DC8\u0DD1\u0DDD\u0DDF" +
		"\u0DE3\u0DED\u0DF0\u0DF3\u0E09\u0E13\u0E23\u0E2A\u0E37\u0E3C\u0E4A\u0E53" +
		"\u0E59\u0E5F\u0E61\u0E68\u0E6D\u0E74\u0E78\u0E82\u0E89\u0E8B\u0E92\u0EAA" +
		"\u0EBE\u0EC8\u0EDA\u0F10\u0F20\u0F28\u0F2D\u0F3F\u0F43\u0F4A\u0F4C\u0F53" +
		"\u0F56\u0F63\u0F74\u0F77\u0F7A\u0F7D\u0F88\u0F8F\u0F94\u0F97\u0F9A\u0F9F" +
		"\u0FA4\u0FA8\u0FAE\u0FB8\u0FBF\u0FC5\u0FC9\u0FCF\u0FD5\u0FD8\u0FDD\u0FE5" +
		"\u0FE8\u0FEC\u0FF4\u0FF8\u1000\u1003\u1007\u100C\u101E\u1021\u1025\u102A" +
		"\u102C\u1030\u1036\u103F\u104B\u1050\u1058\u1069\u106F\u1073\u107B\u1093" +
		"\u109C\u109F\u10AA\u10B1\u10B6\u10B8\u10BB\u10BF\u10C6\u10CB\u10CD\u10D4" +
		"\u10DA\u10E0\u10E9\u10F1\u10FA\u10FF\u1102\u110A\u1111\u1116\u1118\u111B" +
		"\u1121\u112B\u1130\u1136\u1139\u1149\u1154\u115A\u115D\u116E\u1171\u1174" +
		"\u1178\u1183\u118D\u1193\u1197\u119A\u11A1\u11A3\u11A7\u11AF\u11B3\u11B7" +
		"\u11BA\u11C1\u11C3\u11C7\u11CC\u11D0\u11D5\u11D9\u11DD\u11E2\u11E7\u11F1" +
		"\u11F9\u120B\u120F\u1212\u1215\u1218\u121C\u1220\u1224\u1228\u122B\u1230" +
		"\u1234\u1237\u1246\u124D\u1253\u1257\u125B\u1260\u1264\u1267\u126A\u126D" +
		"\u1270\u1274\u1278\u127C\u1280\u1283\u1286\u1289\u128F\u1293\u1296\u129B" +
		"\u12A0\u12A7\u12AD\u12B5\u12BE\u12D0\u12D8\u12E3\u12E6\u12EB\u12F0\u12FD" +
		"\u1304\u1309\u1312\u1318\u131C\u1320\u1328\u1334\u1337\u133C\u1341\u1345" +
		"\u134A\u134D\u1352\u135A\u135E\u1361\u1366\u1373\u137A\u137F\u1384\u138B" +
		"\u138D\u1396\u1399\u139F\u13A2\u13B0\u13BF\u13CE\u13D3\u13D6\u13DC\u13DE" +
		"\u13E9\u13F2\u13FA\u13FF\u1409\u1412\u141C\u1423\u1436\u1438\u1443\u144D" +
		"\u1450\u1457\u145C\u1461\u146B\u146F\u1472\u1476\u147A\u147D\u1481\u1487" +
		"\u148B\u1491\u149E\u14A6\u14A9\u14AD\u14BD\u14C2\u14C6\u14CB\u14D0\u14D5" +
		"\u14DC\u14ED\u14F4\u14F8\u14FD\u1502\u1504\u1508\u150F\u1512\u1517\u151B" +
		"\u1521\u1527\u152A\u152D\u1531\u1534\u1538\u153B\u153F\u1545\u154A\u154E" +
		"\u1553\u1557\u1560\u1565\u1567\u1584\u158E\u1597\u159F\u15AB\u15C1\u15C5" +
		"\u15CD\u15D3\u15D8\u15DE\u15EA\u15FE\u1608\u160B\u1612\u1616\u161B\u1621" +
		"\u1627\u1632\u1634\u163C\u1644\u164E\u1663\u1670\u1676\u167C\u1683\u1685" +
		"\u1690\u169A\u16AD\u16BA\u16BF\u16C7\u16D0\u16D4\u16E2\u16E9\u16ED\u16EF" +
		"\u16F8\u16FB\u1700\u1702\u170A\u170D\u1712\u171F\u172B\u172E\u1731\u1737" +
		"\u1743\u1748\u174C\u1750\u1754\u1756\u175B\u1762\u1767\u1769\u1774\u1779" +
		"\u177D\u1791\u179B\u17A7\u17AD\u17B1\u17B6\u17BC\u17C6\u17CC\u17D0\u17DB" +
		"\u17E7\u17EF\u17F1\u17FB\u1800\u1820\u1826\u182C\u1831\u1839\u183E\u1844" +
		"\u1848\u184B\u184E\u1852\u1858\u1864\u1867\u186A\u186D\u1878\u1881\u1883" +
		"\u188A\u188F\u1894\u1899\u189D\u18A0\u18AB\u18AD\u18B4\u18B6\u18BF\u18C5" +
		"\u18CC\u18D1\u18D6\u18DA\u18E4\u18EC\u18EF\u18F4\u18F6\u18F9\u18FF\u1904" +
		"\u190B\u1915\u191A\u191E\u1921\u192D\u1932\u1937\u193D\u1944\u1947\u1952" +
		"\u1957\u1959\u195C\u195F\u1967\u196A\u196E\u1971\u1975\u1982\u1985\u1989" +
		"\u198D\u1990\u1997\u199E\u19A2\u19A5\u19AE\u19B1\u19BC\u19BE\u19C6\u19C8" +
		"\u19D3\u19D5\u19DC\u19DE\u19E2\u19E6\u19E9\u19F3\u19F9\u19FB\u19FE\u1A04" +
		"\u1A09\u1A0E\u1A17\u1A1D\u1A1F\u1A22\u1A2A\u1A30\u1A34\u1A3A\u1A3D\u1A46" +
		"\u1A4B\u1A4D\u1A4F\u1A52\u1A5B\u1A60\u1A6B\u1A79\u1A83\u1A89\u1A91\u1A97" +
		"\u1A9C\u1AA0\u1AAE\u1AB3\u1AB6\u1AB9\u1ABF\u1AC5\u1ACC\u1AD1\u1AD4\u1AD9" +
		"\u1ADE\u1AE1\u1AE5\u1AED\u1AF4\u1AF8\u1AFD\u1B09\u1B0E\u1B10\u1B13\u1B18" +
		"\u1B1C\u1B1F\u1B22\u1B2A\u1B2D\u1B34\u1B36\u1B3A\u1B3D\u1B41\u1B45\u1B48" +
		"\u1B4B\u1B53\u1B5C\u1B5F\u1B66\u1B68\u1B6C\u1B72\u1B7A\u1B80\u1B85\u1B8A" +
		"\u1B8E\u1B93\u1B95\u1B9B\u1B9F\u1BA6\u1BAB\u1BAE\u1BB5\u1BBC\u1BBE\u1BC6" +
		"\u1BC8\u1BCE\u1BD1\u1BD4\u1BD9\u1BDD\u1BE7\u1BED\u1BF5\u1BF9\u1BFD\u1C01" +
		"\u1C07\u1C0A\u1C0D\u1C14\u1C18\u1C22\u1C2E\u1C38\u1C3F\u1C4B\u1C52\u1C5A" +
		"\u1C5E\u1C62\u1C6A\u1C79\u1C7E\u1C80\u1C89\u1C8C\u1C90\u1C93\u1C97\u1CA4" +
		"\u1CA7\u1CAB\u1CAE\u1CB3\u1CBA\u1CBF\u1CC7\u1CCC\u1CCF\u1CDC\u1CE1\u1CE5" +
		"\u1CE8\u1CED\u1CF0\u1CF5\u1CFA\u1D01\u1D04\u1D07\u1D0B\u1D12\u1D15\u1D18" +
		"\u1D1C\u1D20\u1D24\u1D29\u1D2F\u1D31\u1D40\u1D47\u1D4F\u1D52\u1D55\u1D5C" +
		"\u1D60\u1D64\u1D66\u1D6E\u1D75\u1D86\u1D8B\u1D91\u1D97\u1D9F\u1DAD\u1DB2" +
		"\u1DB9\u1DC1\u1DC9\u1DCD\u1DD6";
	public static readonly _serializedATN: string = Utils.join(
		[
			PLpgSQLParser._serializedATNSegment0,
			PLpgSQLParser._serializedATNSegment1,
			PLpgSQLParser._serializedATNSegment2,
			PLpgSQLParser._serializedATNSegment3,
			PLpgSQLParser._serializedATNSegment4,
			PLpgSQLParser._serializedATNSegment5,
			PLpgSQLParser._serializedATNSegment6,
			PLpgSQLParser._serializedATNSegment7,
			PLpgSQLParser._serializedATNSegment8,
			PLpgSQLParser._serializedATNSegment9,
			PLpgSQLParser._serializedATNSegment10,
			PLpgSQLParser._serializedATNSegment11,
			PLpgSQLParser._serializedATNSegment12,
			PLpgSQLParser._serializedATNSegment13,
			PLpgSQLParser._serializedATNSegment14,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PLpgSQLParser.__ATN) {
			PLpgSQLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PLpgSQLParser._serializedATN));
		}

		return PLpgSQLParser.__ATN;
	}

}

export class SqlContext extends ParserRuleContext {
	public EOF(): TerminalNode[];
	public EOF(i: number): TerminalNode;
	public EOF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EOF);
		} else {
			return this.getToken(PLpgSQLParser.EOF, i);
		}
	}
	public BOM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BOM, 0); }
	public SEMI_COLON(): TerminalNode[];
	public SEMI_COLON(i: number): TerminalNode;
	public SEMI_COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SEMI_COLON);
		} else {
			return this.getToken(PLpgSQLParser.SEMI_COLON, i);
		}
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_sql; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSql) {
			listener.enterSql(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSql) {
			listener.exitSql(this);
		}
	}
}


export class Qname_parserContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public EOF(): TerminalNode { return this.getToken(PLpgSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_qname_parser; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterQname_parser) {
			listener.enterQname_parser(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitQname_parser) {
			listener.exitQname_parser(this);
		}
	}
}


export class Function_args_parserContext extends ParserRuleContext {
	public function_args(): Function_argsContext {
		return this.getRuleContext(0, Function_argsContext);
	}
	public EOF(): TerminalNode { return this.getToken(PLpgSQLParser.EOF, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_args_parser; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_args_parser) {
			listener.enterFunction_args_parser(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_args_parser) {
			listener.exitFunction_args_parser(this);
		}
	}
}


export class Vex_eofContext extends ParserRuleContext {
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public EOF(): TerminalNode { return this.getToken(PLpgSQLParser.EOF, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_vex_eof; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVex_eof) {
			listener.enterVex_eof(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVex_eof) {
			listener.exitVex_eof(this);
		}
	}
}


export class Plpgsql_functionContext extends ParserRuleContext {
	public function_block(): Function_blockContext {
		return this.getRuleContext(0, Function_blockContext);
	}
	public EOF(): TerminalNode { return this.getToken(PLpgSQLParser.EOF, 0); }
	public comp_options(): Comp_optionsContext | undefined {
		return this.tryGetRuleContext(0, Comp_optionsContext);
	}
	public SEMI_COLON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEMI_COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_plpgsql_function; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPlpgsql_function) {
			listener.enterPlpgsql_function(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPlpgsql_function) {
			listener.exitPlpgsql_function(this);
		}
	}
}


export class Plpgsql_function_test_listContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(PLpgSQLParser.EOF, 0); }
	public function_block(): Function_blockContext[];
	public function_block(i: number): Function_blockContext;
	public function_block(i?: number): Function_blockContext | Function_blockContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_blockContext);
		} else {
			return this.getRuleContext(i, Function_blockContext);
		}
	}
	public SEMI_COLON(): TerminalNode[];
	public SEMI_COLON(i: number): TerminalNode;
	public SEMI_COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SEMI_COLON);
		} else {
			return this.getToken(PLpgSQLParser.SEMI_COLON, i);
		}
	}
	public comp_options(): Comp_optionsContext[];
	public comp_options(i: number): Comp_optionsContext;
	public comp_options(i?: number): Comp_optionsContext | Comp_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comp_optionsContext);
		} else {
			return this.getRuleContext(i, Comp_optionsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_plpgsql_function_test_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPlpgsql_function_test_list) {
			listener.enterPlpgsql_function_test_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPlpgsql_function_test_list) {
			listener.exitPlpgsql_function_test_list(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public data_statement(): Data_statementContext | undefined {
		return this.tryGetRuleContext(0, Data_statementContext);
	}
	public schema_statement(): Schema_statementContext | undefined {
		return this.tryGetRuleContext(0, Schema_statementContext);
	}
	public script_statement(): Script_statementContext | undefined {
		return this.tryGetRuleContext(0, Script_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
}


export class Data_statementContext extends ParserRuleContext {
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public insert_stmt_for_psql(): Insert_stmt_for_psqlContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmt_for_psqlContext);
	}
	public update_stmt_for_psql(): Update_stmt_for_psqlContext | undefined {
		return this.tryGetRuleContext(0, Update_stmt_for_psqlContext);
	}
	public delete_stmt_for_psql(): Delete_stmt_for_psqlContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmt_for_psqlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_data_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterData_statement) {
			listener.enterData_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitData_statement) {
			listener.exitData_statement(this);
		}
	}
}


export class Script_statementContext extends ParserRuleContext {
	public script_transaction(): Script_transactionContext | undefined {
		return this.tryGetRuleContext(0, Script_transactionContext);
	}
	public script_additional(): Script_additionalContext | undefined {
		return this.tryGetRuleContext(0, Script_additionalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_script_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterScript_statement) {
			listener.enterScript_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitScript_statement) {
			listener.exitScript_statement(this);
		}
	}
}


export class Script_transactionContext extends ParserRuleContext {
	public START(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.START, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSACTION, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BEGIN, 0); }
	public transaction_mode(): Transaction_modeContext[];
	public transaction_mode(i: number): Transaction_modeContext;
	public transaction_mode(i?: number): Transaction_modeContext | Transaction_modeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Transaction_modeContext);
		} else {
			return this.getRuleContext(i, Transaction_modeContext);
		}
	}
	public WORK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WORK, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.END, 0); }
	public ABORT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ABORT, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLLBACK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHAIN, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public PREPARED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PREPARED, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PREPARE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SAVEPOINT, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RELEASE, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public lock_table(): Lock_tableContext | undefined {
		return this.tryGetRuleContext(0, Lock_tableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_script_transaction; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterScript_transaction) {
			listener.enterScript_transaction(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitScript_transaction) {
			listener.exitScript_transaction(this);
		}
	}
}


export class Transaction_modeContext extends ParserRuleContext {
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEVEL, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERIALIZABLE, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPEATABLE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.READ, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNCOMMITTED, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public DEFERRABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFERRABLE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_transaction_mode; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTransaction_mode) {
			listener.enterTransaction_mode(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTransaction_mode) {
			listener.exitTransaction_mode(this);
		}
	}
}


export class Lock_tableContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(PLpgSQLParser.LOCK, 0); }
	public only_table_multiply(): Only_table_multiplyContext[];
	public only_table_multiply(i: number): Only_table_multiplyContext;
	public only_table_multiply(i?: number): Only_table_multiplyContext | Only_table_multiplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Only_table_multiplyContext);
		} else {
			return this.getRuleContext(i, Only_table_multiplyContext);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODE, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOWAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_lock_table; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLock_table) {
			listener.enterLock_table(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLock_table) {
			listener.exitLock_table(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SHARE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACCESS, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUSIVE, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
}


export class Script_additionalContext extends ParserRuleContext {
	public additional_statement(): Additional_statementContext | undefined {
		return this.tryGetRuleContext(0, Additional_statementContext);
	}
	public VACUUM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VACUUM, 0); }
	public vacuum_mode(): Vacuum_modeContext | undefined {
		return this.tryGetRuleContext(0, Vacuum_modeContext);
	}
	public table_cols_list(): Table_cols_listContext | undefined {
		return this.tryGetRuleContext(0, Table_cols_listContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FETCH, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MOVE, 0); }
	public fetch_move_direction(): Fetch_move_directionContext | undefined {
		return this.tryGetRuleContext(0, Fetch_move_directionContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLOSE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public CALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CALL, 0); }
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public DISCARD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISCARD, 0); }
	public PLANS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLANS, 0); }
	public SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCES, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public declare_statement(): Declare_statementContext | undefined {
		return this.tryGetRuleContext(0, Declare_statementContext);
	}
	public execute_statement(): Execute_statementContext | undefined {
		return this.tryGetRuleContext(0, Execute_statementContext);
	}
	public explain_statement(): Explain_statementContext | undefined {
		return this.tryGetRuleContext(0, Explain_statementContext);
	}
	public show_statement(): Show_statementContext | undefined {
		return this.tryGetRuleContext(0, Show_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_script_additional; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterScript_additional) {
			listener.enterScript_additional(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitScript_additional) {
			listener.exitScript_additional(this);
		}
	}
}


export class Additional_statementContext extends ParserRuleContext {
	public anonymous_block(): Anonymous_blockContext | undefined {
		return this.tryGetRuleContext(0, Anonymous_blockContext);
	}
	public LISTEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LISTEN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public UNLISTEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLISTEN, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYZE, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public analyze_mode(): Analyze_modeContext[];
	public analyze_mode(i: number): Analyze_modeContext;
	public analyze_mode(i?: number): Analyze_modeContext | Analyze_modeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Analyze_modeContext);
		} else {
			return this.getRuleContext(i, Analyze_modeContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	public table_cols_list(): Table_cols_listContext | undefined {
		return this.tryGetRuleContext(0, Table_cols_listContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLUSTER, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public CHECKPOINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECKPOINT, 0); }
	public LOAD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOAD, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEALLOCATE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PREPARE, 0); }
	public REINDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REINDEX, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYSTEM, 0); }
	public CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONCURRENTLY, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ZONE, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AUTHORIZATION, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFRESH, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public data_statement(): Data_statementContext | undefined {
		return this.tryGetRuleContext(0, Data_statementContext);
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public REASSIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REASSIGN, 0); }
	public OWNED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OWNED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public user_name(): User_nameContext[];
	public user_name(i: number): User_nameContext;
	public user_name(i?: number): User_nameContext | User_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_nameContext);
		} else {
			return this.getRuleContext(i, User_nameContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public copy_statement(): Copy_statementContext | undefined {
		return this.tryGetRuleContext(0, Copy_statementContext);
	}
	public truncate_stmt(): Truncate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Truncate_stmtContext);
	}
	public notify_stmt(): Notify_stmtContext | undefined {
		return this.tryGetRuleContext(0, Notify_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_additional_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAdditional_statement) {
			listener.enterAdditional_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAdditional_statement) {
			listener.exitAdditional_statement(this);
		}
	}
}


export class Explain_statementContext extends ParserRuleContext {
	public EXPLAIN(): TerminalNode { return this.getToken(PLpgSQLParser.EXPLAIN, 0); }
	public explain_query(): Explain_queryContext {
		return this.getRuleContext(0, Explain_queryContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public explain_option(): Explain_optionContext[];
	public explain_option(i: number): Explain_optionContext;
	public explain_option(i?: number): Explain_optionContext | Explain_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Explain_optionContext);
		} else {
			return this.getRuleContext(i, Explain_optionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_explain_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExplain_statement) {
			listener.enterExplain_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExplain_statement) {
			listener.exitExplain_statement(this);
		}
	}
}


export class Explain_queryContext extends ParserRuleContext {
	public data_statement(): Data_statementContext | undefined {
		return this.tryGetRuleContext(0, Data_statementContext);
	}
	public execute_statement(): Execute_statementContext | undefined {
		return this.tryGetRuleContext(0, Execute_statementContext);
	}
	public declare_statement(): Declare_statementContext | undefined {
		return this.tryGetRuleContext(0, Declare_statementContext);
	}
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATE, 0); }
	public create_table_as_statement(): Create_table_as_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_table_as_statementContext);
	}
	public create_view_statement(): Create_view_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_view_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_explain_query; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExplain_query) {
			listener.enterExplain_query(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExplain_query) {
			listener.exitExplain_query(this);
		}
	}
}


export class Execute_statementContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(PLpgSQLParser.EXECUTE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_execute_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExecute_statement) {
			listener.enterExecute_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExecute_statement) {
			listener.exitExecute_statement(this);
		}
	}
}


export class Declare_statementContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(PLpgSQLParser.DECLARE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public CURSOR(): TerminalNode { return this.getToken(PLpgSQLParser.CURSOR, 0); }
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BINARY, 0); }
	public INSENSITIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSENSITIVE, 0); }
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCROLL, 0); }
	public HOLD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HOLD, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHOUT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_declare_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDeclare_statement) {
			listener.enterDeclare_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDeclare_statement) {
			listener.exitDeclare_statement(this);
		}
	}
}


export class Show_statementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(PLpgSQLParser.SHOW, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ZONE, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSACTION, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEVEL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AUTHORIZATION, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_show_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterShow_statement) {
			listener.enterShow_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitShow_statement) {
			listener.exitShow_statement(this);
		}
	}
}


export class Explain_optionContext extends ParserRuleContext {
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	public COSTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COSTS, 0); }
	public SETTINGS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SETTINGS, 0); }
	public BUFFERS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BUFFERS, 0); }
	public TIMING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIMING, 0); }
	public SUMMARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUMMARY, 0); }
	public boolean_value(): Boolean_valueContext | undefined {
		return this.tryGetRuleContext(0, Boolean_valueContext);
	}
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORMAT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XML, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.JSON, 0); }
	public YAML(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.YAML, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_explain_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExplain_option) {
			listener.enterExplain_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExplain_option) {
			listener.exitExplain_option(this);
		}
	}
}


export class User_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION_USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_name; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_name) {
			listener.enterUser_name(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_name) {
			listener.exitUser_name(this);
		}
	}
}


export class Table_cols_listContext extends ParserRuleContext {
	public table_cols(): Table_colsContext[];
	public table_cols(i: number): Table_colsContext;
	public table_cols(i?: number): Table_colsContext | Table_colsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_colsContext);
		} else {
			return this.getRuleContext(i, Table_colsContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_cols_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_cols_list) {
			listener.enterTable_cols_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_cols_list) {
			listener.exitTable_cols_list(this);
		}
	}
}


export class Table_colsContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_cols; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_cols) {
			listener.enterTable_cols(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_cols) {
			listener.exitTable_cols(this);
		}
	}
}


export class Vacuum_modeContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vacuum_option(): Vacuum_optionContext[];
	public vacuum_option(i: number): Vacuum_optionContext;
	public vacuum_option(i?: number): Vacuum_optionContext | Vacuum_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Vacuum_optionContext);
		} else {
			return this.getRuleContext(i, Vacuum_optionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FULL, 0); }
	public FREEZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FREEZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYZE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_vacuum_mode; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVacuum_mode) {
			listener.enterVacuum_mode(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVacuum_mode) {
			listener.exitVacuum_mode(this);
		}
	}
}


export class Vacuum_optionContext extends ParserRuleContext {
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FULL, 0); }
	public FREEZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FREEZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYZE, 0); }
	public DISABLE_PAGE_SKIPPING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISABLE_PAGE_SKIPPING, 0); }
	public SKIP_LOCKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SKIP_LOCKED, 0); }
	public INDEX_CLEANUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX_CLEANUP, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUNCATE, 0); }
	public boolean_value(): Boolean_valueContext | undefined {
		return this.tryGetRuleContext(0, Boolean_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_vacuum_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVacuum_option) {
			listener.enterVacuum_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVacuum_option) {
			listener.exitVacuum_option(this);
		}
	}
}


export class Analyze_modeContext extends ParserRuleContext {
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	public SKIP_LOCKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SKIP_LOCKED, 0); }
	public boolean_value(): Boolean_valueContext | undefined {
		return this.tryGetRuleContext(0, Boolean_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_analyze_mode; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAnalyze_mode) {
			listener.enterAnalyze_mode(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAnalyze_mode) {
			listener.exitAnalyze_mode(this);
		}
	}
}


export class Boolean_valueContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FALSE, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OFF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_boolean_value; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterBoolean_value) {
			listener.enterBoolean_value(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitBoolean_value) {
			listener.exitBoolean_value(this);
		}
	}
}


export class Fetch_move_directionContext extends ParserRuleContext {
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEXT, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIOR, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LAST, 0); }
	public signed_number_literal(): Signed_number_literalContext | undefined {
		return this.tryGetRuleContext(0, Signed_number_literalContext);
	}
	public ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ABSOLUTE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RELATIVE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public FORWARD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORWARD, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BACKWARD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_fetch_move_direction; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFetch_move_direction) {
			listener.enterFetch_move_direction(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFetch_move_direction) {
			listener.exitFetch_move_direction(this);
		}
	}
}


export class Schema_statementContext extends ParserRuleContext {
	public schema_create(): Schema_createContext | undefined {
		return this.tryGetRuleContext(0, Schema_createContext);
	}
	public schema_alter(): Schema_alterContext | undefined {
		return this.tryGetRuleContext(0, Schema_alterContext);
	}
	public schema_drop(): Schema_dropContext | undefined {
		return this.tryGetRuleContext(0, Schema_dropContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_statement) {
			listener.enterSchema_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_statement) {
			listener.exitSchema_statement(this);
		}
	}
}


export class Schema_createContext extends ParserRuleContext {
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATE, 0); }
	public create_table_statement(): Create_table_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_table_statementContext);
	}
	public create_foreign_table_statement(): Create_foreign_table_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_foreign_table_statementContext);
	}
	public create_index_statement(): Create_index_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_index_statementContext);
	}
	public create_extension_statement(): Create_extension_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_extension_statementContext);
	}
	public create_trigger_statement(): Create_trigger_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_trigger_statementContext);
	}
	public create_rewrite_statement(): Create_rewrite_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_rewrite_statementContext);
	}
	public create_function_statement(): Create_function_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_function_statementContext);
	}
	public create_sequence_statement(): Create_sequence_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_sequence_statementContext);
	}
	public create_schema_statement(): Create_schema_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_schema_statementContext);
	}
	public create_view_statement(): Create_view_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_view_statementContext);
	}
	public create_language_statement(): Create_language_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_language_statementContext);
	}
	public create_event_trigger(): Create_event_triggerContext | undefined {
		return this.tryGetRuleContext(0, Create_event_triggerContext);
	}
	public create_type_statement(): Create_type_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_type_statementContext);
	}
	public create_domain_statement(): Create_domain_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_domain_statementContext);
	}
	public create_server_statement(): Create_server_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_server_statementContext);
	}
	public create_fts_configuration(): Create_fts_configurationContext | undefined {
		return this.tryGetRuleContext(0, Create_fts_configurationContext);
	}
	public create_fts_template(): Create_fts_templateContext | undefined {
		return this.tryGetRuleContext(0, Create_fts_templateContext);
	}
	public create_fts_parser(): Create_fts_parserContext | undefined {
		return this.tryGetRuleContext(0, Create_fts_parserContext);
	}
	public create_fts_dictionary(): Create_fts_dictionaryContext | undefined {
		return this.tryGetRuleContext(0, Create_fts_dictionaryContext);
	}
	public create_collation(): Create_collationContext | undefined {
		return this.tryGetRuleContext(0, Create_collationContext);
	}
	public create_user_mapping(): Create_user_mappingContext | undefined {
		return this.tryGetRuleContext(0, Create_user_mappingContext);
	}
	public create_transform_statement(): Create_transform_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_transform_statementContext);
	}
	public create_access_method(): Create_access_methodContext | undefined {
		return this.tryGetRuleContext(0, Create_access_methodContext);
	}
	public create_user_or_role(): Create_user_or_roleContext | undefined {
		return this.tryGetRuleContext(0, Create_user_or_roleContext);
	}
	public create_group(): Create_groupContext | undefined {
		return this.tryGetRuleContext(0, Create_groupContext);
	}
	public create_tablespace(): Create_tablespaceContext | undefined {
		return this.tryGetRuleContext(0, Create_tablespaceContext);
	}
	public create_statistics(): Create_statisticsContext | undefined {
		return this.tryGetRuleContext(0, Create_statisticsContext);
	}
	public create_foreign_data_wrapper(): Create_foreign_data_wrapperContext | undefined {
		return this.tryGetRuleContext(0, Create_foreign_data_wrapperContext);
	}
	public create_operator_statement(): Create_operator_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_operator_statementContext);
	}
	public create_aggregate_statement(): Create_aggregate_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_aggregate_statementContext);
	}
	public create_table_as_statement(): Create_table_as_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_table_as_statementContext);
	}
	public create_policy_statement(): Create_policy_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_policy_statementContext);
	}
	public create_subscription_statement(): Create_subscription_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_subscription_statementContext);
	}
	public create_cast_statement(): Create_cast_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_cast_statementContext);
	}
	public create_operator_family_statement(): Create_operator_family_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_operator_family_statementContext);
	}
	public create_operator_class_statement(): Create_operator_class_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_operator_class_statementContext);
	}
	public create_conversion_statement(): Create_conversion_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_conversion_statementContext);
	}
	public create_publication_statement(): Create_publication_statementContext | undefined {
		return this.tryGetRuleContext(0, Create_publication_statementContext);
	}
	public comment_on_statement(): Comment_on_statementContext | undefined {
		return this.tryGetRuleContext(0, Comment_on_statementContext);
	}
	public rule_common(): Rule_commonContext | undefined {
		return this.tryGetRuleContext(0, Rule_commonContext);
	}
	public set_statement(): Set_statementContext | undefined {
		return this.tryGetRuleContext(0, Set_statementContext);
	}
	public schema_import(): Schema_importContext | undefined {
		return this.tryGetRuleContext(0, Schema_importContext);
	}
	public security_label(): Security_labelContext | undefined {
		return this.tryGetRuleContext(0, Security_labelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_create; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_create) {
			listener.enterSchema_create(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_create) {
			listener.exitSchema_create(this);
		}
	}
}


export class Schema_alterContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(PLpgSQLParser.ALTER, 0); }
	public alter_function_statement(): Alter_function_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_function_statementContext);
	}
	public alter_schema_statement(): Alter_schema_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_schema_statementContext);
	}
	public alter_language_statement(): Alter_language_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_language_statementContext);
	}
	public alter_table_statement(): Alter_table_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_table_statementContext);
	}
	public alter_index_statement(): Alter_index_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_index_statementContext);
	}
	public alter_default_privileges(): Alter_default_privilegesContext | undefined {
		return this.tryGetRuleContext(0, Alter_default_privilegesContext);
	}
	public alter_sequence_statement(): Alter_sequence_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_sequence_statementContext);
	}
	public alter_view_statement(): Alter_view_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_view_statementContext);
	}
	public alter_event_trigger(): Alter_event_triggerContext | undefined {
		return this.tryGetRuleContext(0, Alter_event_triggerContext);
	}
	public alter_type_statement(): Alter_type_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_type_statementContext);
	}
	public alter_domain_statement(): Alter_domain_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_domain_statementContext);
	}
	public alter_server_statement(): Alter_server_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_statementContext);
	}
	public alter_fts_statement(): Alter_fts_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_fts_statementContext);
	}
	public alter_collation(): Alter_collationContext | undefined {
		return this.tryGetRuleContext(0, Alter_collationContext);
	}
	public alter_user_mapping(): Alter_user_mappingContext | undefined {
		return this.tryGetRuleContext(0, Alter_user_mappingContext);
	}
	public alter_user_or_role(): Alter_user_or_roleContext | undefined {
		return this.tryGetRuleContext(0, Alter_user_or_roleContext);
	}
	public alter_group(): Alter_groupContext | undefined {
		return this.tryGetRuleContext(0, Alter_groupContext);
	}
	public alter_tablespace(): Alter_tablespaceContext | undefined {
		return this.tryGetRuleContext(0, Alter_tablespaceContext);
	}
	public alter_statistics(): Alter_statisticsContext | undefined {
		return this.tryGetRuleContext(0, Alter_statisticsContext);
	}
	public alter_foreign_data_wrapper(): Alter_foreign_data_wrapperContext | undefined {
		return this.tryGetRuleContext(0, Alter_foreign_data_wrapperContext);
	}
	public alter_operator_statement(): Alter_operator_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_operator_statementContext);
	}
	public alter_aggregate_statement(): Alter_aggregate_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_aggregate_statementContext);
	}
	public alter_extension_statement(): Alter_extension_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_extension_statementContext);
	}
	public alter_policy_statement(): Alter_policy_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_policy_statementContext);
	}
	public alter_subscription_statement(): Alter_subscription_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_subscription_statementContext);
	}
	public alter_trigger_statement(): Alter_trigger_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_trigger_statementContext);
	}
	public alter_rule_statement(): Alter_rule_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_rule_statementContext);
	}
	public alter_operator_family_statement(): Alter_operator_family_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_operator_family_statementContext);
	}
	public alter_operator_class_statement(): Alter_operator_class_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_operator_class_statementContext);
	}
	public alter_conversion_statement(): Alter_conversion_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_conversion_statementContext);
	}
	public alter_publication_statement(): Alter_publication_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_publication_statementContext);
	}
	public alter_owner(): Alter_ownerContext | undefined {
		return this.tryGetRuleContext(0, Alter_ownerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_alter; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_alter) {
			listener.enterSchema_alter(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_alter) {
			listener.exitSchema_alter(this);
		}
	}
}


export class Schema_dropContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(PLpgSQLParser.DROP, 0); }
	public drop_function_statement(): Drop_function_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_function_statementContext);
	}
	public drop_trigger_statement(): Drop_trigger_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_trigger_statementContext);
	}
	public drop_rule_statement(): Drop_rule_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_rule_statementContext);
	}
	public drop_policy_statement(): Drop_policy_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_policy_statementContext);
	}
	public drop_cast_statement(): Drop_cast_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_cast_statementContext);
	}
	public drop_operator_family_statement(): Drop_operator_family_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_operator_family_statementContext);
	}
	public drop_operator_class_statement(): Drop_operator_class_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_operator_class_statementContext);
	}
	public drop_statements(): Drop_statementsContext | undefined {
		return this.tryGetRuleContext(0, Drop_statementsContext);
	}
	public drop_user_mapping(): Drop_user_mappingContext | undefined {
		return this.tryGetRuleContext(0, Drop_user_mappingContext);
	}
	public drop_owned(): Drop_ownedContext | undefined {
		return this.tryGetRuleContext(0, Drop_ownedContext);
	}
	public drop_operator_statement(): Drop_operator_statementContext | undefined {
		return this.tryGetRuleContext(0, Drop_operator_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_drop; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_drop) {
			listener.enterSchema_drop(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_drop) {
			listener.exitSchema_drop(this);
		}
	}
}


export class Schema_importContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public IMPORT(): TerminalNode { return this.getToken(PLpgSQLParser.IMPORT, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(PLpgSQLParser.FOREIGN, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(PLpgSQLParser.SCHEMA, 0); }
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public INTO(): TerminalNode { return this.getToken(PLpgSQLParser.INTO, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIMIT, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_import; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_import) {
			listener.enterSchema_import(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_import) {
			listener.exitSchema_import(this);
		}
	}
}


export class Alter_function_statementContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEPENDS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENSION, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public function_parameters(): Function_parametersContext | undefined {
		return this.tryGetRuleContext(0, Function_parametersContext);
	}
	public function_actions_common(): Function_actions_commonContext[];
	public function_actions_common(i: number): Function_actions_commonContext;
	public function_actions_common(i?: number): Function_actions_commonContext | Function_actions_commonContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_actions_commonContext);
		} else {
			return this.getRuleContext(i, Function_actions_commonContext);
		}
	}
	public RESET(): TerminalNode[];
	public RESET(i: number): TerminalNode;
	public RESET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RESET);
		} else {
			return this.getToken(PLpgSQLParser.RESET, i);
		}
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICT, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ALL);
		} else {
			return this.getToken(PLpgSQLParser.ALL, i);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DOT);
		} else {
			return this.getToken(PLpgSQLParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_function_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_function_statement) {
			listener.enterAlter_function_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_function_statement) {
			listener.exitAlter_function_statement(this);
		}
	}
}


export class Alter_aggregate_statementContext extends ParserRuleContext {
	public AGGREGATE(): TerminalNode { return this.getToken(PLpgSQLParser.AGGREGATE, 0); }
	public function_parameters(): Function_parametersContext {
		return this.getRuleContext(0, Function_parametersContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_aggregate_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_aggregate_statement) {
			listener.enterAlter_aggregate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_aggregate_statement) {
			listener.exitAlter_aggregate_statement(this);
		}
	}
}


export class Alter_extension_statementContext extends ParserRuleContext {
	public EXTENSION(): TerminalNode { return this.getToken(PLpgSQLParser.EXTENSION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public alter_extension_action(): Alter_extension_actionContext {
		return this.getRuleContext(0, Alter_extension_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_extension_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_extension_statement) {
			listener.enterAlter_extension_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_extension_statement) {
			listener.exitAlter_extension_statement(this);
		}
	}
}


export class Alter_extension_actionContext extends ParserRuleContext {
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public extension_member_object(): Extension_member_objectContext | undefined {
		return this.tryGetRuleContext(0, Extension_member_objectContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_extension_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_extension_action) {
			listener.enterAlter_extension_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_extension_action) {
			listener.exitAlter_extension_action(this);
		}
	}
}


export class Extension_member_objectContext extends ParserRuleContext {
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACCESS, 0); }
	public METHOD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.METHOD, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AGGREGATE, 0); }
	public function_parameters(): Function_parametersContext | undefined {
		return this.tryGetRuleContext(0, Function_parametersContext);
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CAST, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATION, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONVERSION, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EVENT, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRAPPER, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public operator_name(): Operator_nameContext | undefined {
		return this.tryGetRuleContext(0, Operator_nameContext);
	}
	public CLASS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLASS, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public FAMILY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FAMILY, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERVER, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFIGURATION, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DICTIONARY, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARSER, 0); }
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPLATE, 0); }
	public TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSFORM, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_extension_member_object; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExtension_member_object) {
			listener.enterExtension_member_object(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExtension_member_object) {
			listener.exitExtension_member_object(this);
		}
	}
}


export class Alter_schema_statementContext extends ParserRuleContext {
	public SCHEMA(): TerminalNode { return this.getToken(PLpgSQLParser.SCHEMA, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public rename_to(): Rename_toContext {
		return this.getRuleContext(0, Rename_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_schema_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_schema_statement) {
			listener.enterAlter_schema_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_schema_statement) {
			listener.exitAlter_schema_statement(this);
		}
	}
}


export class Alter_language_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public LANGUAGE(): TerminalNode { return this.getToken(PLpgSQLParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_language_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_language_statement) {
			listener.enterAlter_language_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_language_statement) {
			listener.exitAlter_language_statement(this);
		}
	}
}


export class Alter_table_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _child: Schema_qualified_nameContext;
	public TABLE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public table_action(): Table_actionContext[];
	public table_action(i: number): Table_actionContext;
	public table_action(i?: number): Table_actionContext | Table_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_actionContext);
		} else {
			return this.getRuleContext(i, Table_actionContext);
		}
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RENAME, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public ATTACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ATTACH, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARTITION, 0); }
	public for_values_bound(): For_values_boundContext | undefined {
		return this.tryGetRuleContext(0, For_values_boundContext);
	}
	public DETACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DETACH, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_table_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_table_statement) {
			listener.enterAlter_table_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_table_statement) {
			listener.exitAlter_table_statement(this);
		}
	}
}


export class Table_actionContext extends ParserRuleContext {
	public _column: IdentifierContext;
	public _tabl_constraint: Constraint_commonContext;
	public _not_valid: Token;
	public _trigger_name: Schema_qualified_nameContext;
	public _rewrite_rule_name: Schema_qualified_nameContext;
	public _index_name: Schema_qualified_nameContext;
	public _parent_table: Schema_qualified_nameContext;
	public _type_name: Schema_qualified_nameContext;
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public table_column_definition(): Table_column_definitionContext | undefined {
		return this.tryGetRuleContext(0, Table_column_definitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALTER, 0); }
	public column_action(): Column_actionContext | undefined {
		return this.tryGetRuleContext(0, Column_actionContext);
	}
	public constraint_common(): Constraint_commonContext | undefined {
		return this.tryGetRuleContext(0, Constraint_commonContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALID, 0); }
	public validate_constraint(): Validate_constraintContext | undefined {
		return this.tryGetRuleContext(0, Validate_constraintContext);
	}
	public drop_constraint(): Drop_constraintContext | undefined {
		return this.tryGetRuleContext(0, Drop_constraintContext);
	}
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISABLE, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENABLE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLICA, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALWAYS, 0); }
	public RULE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RULE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEVEL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SECURITY, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLUSTER, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHOUT, 0); }
	public OIDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OIDS, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public LOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOGGED, 0); }
	public UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLOGGED, 0); }
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public names_in_parens(): Names_in_parensContext | undefined {
		return this.tryGetRuleContext(0, Names_in_parensContext);
	}
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INHERIT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public table_space(): Table_spaceContext | undefined {
		return this.tryGetRuleContext(0, Table_spaceContext);
	}
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IDENTITY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FULL, 0); }
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTHING, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public table_deferrable(): Table_deferrableContext | undefined {
		return this.tryGetRuleContext(0, Table_deferrableContext);
	}
	public table_initialy_immed(): Table_initialy_immedContext | undefined {
		return this.tryGetRuleContext(0, Table_initialy_immedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_action) {
			listener.enterTable_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_action) {
			listener.exitTable_action(this);
		}
	}
}


export class Column_actionContext extends ParserRuleContext {
	public _set: Token;
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public collate_identifier(): Collate_identifierContext | undefined {
		return this.tryGetRuleContext(0, Collate_identifierContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public identity_body(): Identity_bodyContext | undefined {
		return this.tryGetRuleContext(0, Identity_bodyContext);
	}
	public set_def_column(): Set_def_columnContext | undefined {
		return this.tryGetRuleContext(0, Set_def_columnContext);
	}
	public drop_def(): Drop_defContext | undefined {
		return this.tryGetRuleContext(0, Drop_defContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IDENTITY, 0); }
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATISTICS, 0); }
	public signed_number_literal(): Signed_number_literalContext | undefined {
		return this.tryGetRuleContext(0, Signed_number_literalContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STORAGE, 0); }
	public storage_option(): Storage_optionContext | undefined {
		return this.tryGetRuleContext(0, Storage_optionContext);
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public names_in_parens(): Names_in_parensContext | undefined {
		return this.tryGetRuleContext(0, Names_in_parensContext);
	}
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	public alter_identity(): Alter_identityContext[];
	public alter_identity(i: number): Alter_identityContext;
	public alter_identity(i?: number): Alter_identityContext | Alter_identityContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_identityContext);
		} else {
			return this.getRuleContext(i, Alter_identityContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_column_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterColumn_action) {
			listener.enterColumn_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitColumn_action) {
			listener.exitColumn_action(this);
		}
	}
}


export class Identity_bodyContext extends ParserRuleContext {
	public GENERATED(): TerminalNode { return this.getToken(PLpgSQLParser.GENERATED, 0); }
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public IDENTITY(): TerminalNode { return this.getToken(PLpgSQLParser.IDENTITY, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALWAYS, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public sequence_body(): Sequence_bodyContext[];
	public sequence_body(i: number): Sequence_bodyContext;
	public sequence_body(i?: number): Sequence_bodyContext | Sequence_bodyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sequence_bodyContext);
		} else {
			return this.getRuleContext(i, Sequence_bodyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_identity_body; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIdentity_body) {
			listener.enterIdentity_body(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIdentity_body) {
			listener.exitIdentity_body(this);
		}
	}
}


export class Alter_identityContext extends ParserRuleContext {
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GENERATED, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALWAYS, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public sequence_body(): Sequence_bodyContext | undefined {
		return this.tryGetRuleContext(0, Sequence_bodyContext);
	}
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTART, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_identity; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_identity) {
			listener.enterAlter_identity(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_identity) {
			listener.exitAlter_identity(this);
		}
	}
}


export class Storage_optionContext extends ParserRuleContext {
	public PLAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLAIN, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTERNAL, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENDED, 0); }
	public MAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MAIN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_storage_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStorage_option) {
			listener.enterStorage_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStorage_option) {
			listener.exitStorage_option(this);
		}
	}
}


export class Validate_constraintContext extends ParserRuleContext {
	public _constraint_name: Schema_qualified_nameContext;
	public VALIDATE(): TerminalNode { return this.getToken(PLpgSQLParser.VALIDATE, 0); }
	public CONSTRAINT(): TerminalNode { return this.getToken(PLpgSQLParser.CONSTRAINT, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_validate_constraint; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterValidate_constraint) {
			listener.enterValidate_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitValidate_constraint) {
			listener.exitValidate_constraint(this);
		}
	}
}


export class Drop_constraintContext extends ParserRuleContext {
	public _constraint_name: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PLpgSQLParser.DROP, 0); }
	public CONSTRAINT(): TerminalNode { return this.getToken(PLpgSQLParser.CONSTRAINT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_constraint; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_constraint) {
			listener.enterDrop_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_constraint) {
			listener.exitDrop_constraint(this);
		}
	}
}


export class Table_deferrableContext extends ParserRuleContext {
	public DEFERRABLE(): TerminalNode { return this.getToken(PLpgSQLParser.DEFERRABLE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_deferrable; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_deferrable) {
			listener.enterTable_deferrable(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_deferrable) {
			listener.exitTable_deferrable(this);
		}
	}
}


export class Table_initialy_immedContext extends ParserRuleContext {
	public INITIALLY(): TerminalNode { return this.getToken(PLpgSQLParser.INITIALLY, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFERRED, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMMEDIATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_initialy_immed; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_initialy_immed) {
			listener.enterTable_initialy_immed(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_initialy_immed) {
			listener.exitTable_initialy_immed(this);
		}
	}
}


export class Function_actions_commonContext extends ParserRuleContext {
	public _execution_cost: Unsigned_numeric_literalContext;
	public _result_rows: Unsigned_numeric_literalContext;
	public _config_scope: IdentifierContext;
	public _config_param: IdentifierContext;
	public _lang_name: IdentifierContext;
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NULL);
		} else {
			return this.getToken(PLpgSQLParser.NULL, i);
		}
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INPUT, 0); }
	public CALLED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CALLED, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNS, 0); }
	public TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSFORM, 0); }
	public transform_for_type(): Transform_for_typeContext[];
	public transform_for_type(i: number): Transform_for_typeContext;
	public transform_for_type(i?: number): Transform_for_typeContext | Transform_for_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Transform_for_typeContext);
		} else {
			return this.getRuleContext(i, Transform_for_typeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public STRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STRICT, 0); }
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMMUTABLE, 0); }
	public VOLATILE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VOLATILE, 0); }
	public STABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STABLE, 0); }
	public LEAKPROOF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEAKPROOF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SECURITY, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INVOKER, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFINER, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTERNAL, 0); }
	public PARALLEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARALLEL, 0); }
	public SAFE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SAFE, 0); }
	public UNSAFE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNSAFE, 0); }
	public RESTRICTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICTED, 0); }
	public COST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COST, 0); }
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Unsigned_numeric_literalContext);
	}
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWS, 0); }
	public SUPPORT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUPPORT, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public set_statement_value(): Set_statement_valueContext | undefined {
		return this.tryGetRuleContext(0, Set_statement_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WINDOW, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public function_def(): Function_defContext | undefined {
		return this.tryGetRuleContext(0, Function_defContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_actions_common; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_actions_common) {
			listener.enterFunction_actions_common(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_actions_common) {
			listener.exitFunction_actions_common(this);
		}
	}
}


export class Function_defContext extends ParserRuleContext {
	public _definition: Character_stringContext;
	public _symbol: Character_stringContext;
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_def; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_def) {
			listener.enterFunction_def(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_def) {
			listener.exitFunction_def(this);
		}
	}
}


export class Alter_index_statementContext extends ParserRuleContext {
	public INDEX(): TerminalNode { return this.getToken(PLpgSQLParser.INDEX, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public index_def_action(): Index_def_actionContext | undefined {
		return this.tryGetRuleContext(0, Index_def_actionContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public TABLESPACE(): TerminalNode[];
	public TABLESPACE(i: number): TerminalNode;
	public TABLESPACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.TABLESPACE);
		} else {
			return this.getToken(PLpgSQLParser.TABLESPACE, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public OWNED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OWNED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOWAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_index_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_index_statement) {
			listener.enterAlter_index_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_index_statement) {
			listener.exitAlter_index_statement(this);
		}
	}
}


export class Index_def_actionContext extends ParserRuleContext {
	public _index: Schema_qualified_nameContext;
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public ATTACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ATTACH, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARTITION, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEPENDS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENSION, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALTER, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATISTICS, 0); }
	public signed_number_literal(): Signed_number_literalContext | undefined {
		return this.tryGetRuleContext(0, Signed_number_literalContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	public sign(): SignContext | undefined {
		return this.tryGetRuleContext(0, SignContext);
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESPACE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public option_with_value(): Option_with_valueContext[];
	public option_with_value(i: number): Option_with_valueContext;
	public option_with_value(i?: number): Option_with_valueContext | Option_with_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Option_with_valueContext);
		} else {
			return this.getRuleContext(i, Option_with_valueContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_index_def_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndex_def_action) {
			listener.enterIndex_def_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndex_def_action) {
			listener.exitIndex_def_action(this);
		}
	}
}


export class Alter_default_privilegesContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode { return this.getToken(PLpgSQLParser.DEFAULT, 0); }
	public PRIVILEGES(): TerminalNode { return this.getToken(PLpgSQLParser.PRIVILEGES, 0); }
	public abbreviated_grant_or_revoke(): Abbreviated_grant_or_revokeContext {
		return this.getRuleContext(0, Abbreviated_grant_or_revokeContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public identifier_list(): Identifier_listContext[];
	public identifier_list(i: number): Identifier_listContext;
	public identifier_list(i?: number): Identifier_listContext | Identifier_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_listContext);
		} else {
			return this.getRuleContext(i, Identifier_listContext);
		}
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_default_privileges; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_default_privileges) {
			listener.enterAlter_default_privileges(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_default_privileges) {
			listener.exitAlter_default_privileges(this);
		}
	}
}


export class Abbreviated_grant_or_revokeContext extends ParserRuleContext {
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GRANT, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REVOKE, 0); }
	public table_column_privilege(): Table_column_privilegeContext[];
	public table_column_privilege(i: number): Table_column_privilegeContext;
	public table_column_privilege(i?: number): Table_column_privilegeContext | Table_column_privilegeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_column_privilegeContext);
		} else {
			return this.getRuleContext(i, Table_column_privilegeContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLES, 0); }
	public SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCES, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTIONS, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMAS, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPES, 0); }
	public grant_to_rule(): Grant_to_ruleContext | undefined {
		return this.tryGetRuleContext(0, Grant_to_ruleContext);
	}
	public revoke_from_cascade_restrict(): Revoke_from_cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Revoke_from_cascade_restrictContext);
	}
	public usage_select_update(): Usage_select_updateContext[];
	public usage_select_update(i: number): Usage_select_updateContext;
	public usage_select_update(i?: number): Usage_select_updateContext | Usage_select_updateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Usage_select_updateContext);
		} else {
			return this.getRuleContext(i, Usage_select_updateContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXECUTE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USAGE, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATE, 0); }
	public grant_option_for(): Grant_option_forContext | undefined {
		return this.tryGetRuleContext(0, Grant_option_forContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIVILEGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_abbreviated_grant_or_revoke; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAbbreviated_grant_or_revoke) {
			listener.enterAbbreviated_grant_or_revoke(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAbbreviated_grant_or_revoke) {
			listener.exitAbbreviated_grant_or_revoke(this);
		}
	}
}


export class Grant_option_forContext extends ParserRuleContext {
	public GRANT(): TerminalNode { return this.getToken(PLpgSQLParser.GRANT, 0); }
	public OPTION(): TerminalNode { return this.getToken(PLpgSQLParser.OPTION, 0); }
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_grant_option_for; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterGrant_option_for) {
			listener.enterGrant_option_for(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitGrant_option_for) {
			listener.exitGrant_option_for(this);
		}
	}
}


export class Alter_sequence_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public SEQUENCE(): TerminalNode { return this.getToken(PLpgSQLParser.SEQUENCE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public sequence_body(): Sequence_bodyContext[];
	public sequence_body(i: number): Sequence_bodyContext;
	public sequence_body(i?: number): Sequence_bodyContext | Sequence_bodyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sequence_bodyContext);
		} else {
			return this.getRuleContext(i, Sequence_bodyContext);
		}
	}
	public RESTART(): TerminalNode[];
	public RESTART(i: number): TerminalNode;
	public RESTART(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RESTART);
		} else {
			return this.getToken(PLpgSQLParser.RESTART, i);
		}
	}
	public signed_number_literal(): Signed_number_literalContext[];
	public signed_number_literal(i: number): Signed_number_literalContext;
	public signed_number_literal(i?: number): Signed_number_literalContext | Signed_number_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Signed_number_literalContext);
		} else {
			return this.getRuleContext(i, Signed_number_literalContext);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WITH);
		} else {
			return this.getToken(PLpgSQLParser.WITH, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_sequence_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_sequence_statement) {
			listener.enterAlter_sequence_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_sequence_statement) {
			listener.exitAlter_sequence_statement(this);
		}
	}
}


export class Alter_view_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _column_name: Schema_qualified_nameContext;
	public VIEW(): TerminalNode { return this.getToken(PLpgSQLParser.VIEW, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALTER, 0); }
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public names_in_parens(): Names_in_parensContext | undefined {
		return this.tryGetRuleContext(0, Names_in_parensContext);
	}
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public set_def_column(): Set_def_columnContext | undefined {
		return this.tryGetRuleContext(0, Set_def_columnContext);
	}
	public drop_def(): Drop_defContext | undefined {
		return this.tryGetRuleContext(0, Drop_defContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_view_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_view_statement) {
			listener.enterAlter_view_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_view_statement) {
			listener.exitAlter_view_statement(this);
		}
	}
}


export class Alter_event_triggerContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public EVENT(): TerminalNode { return this.getToken(PLpgSQLParser.EVENT, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PLpgSQLParser.TRIGGER, 0); }
	public alter_event_trigger_action(): Alter_event_trigger_actionContext {
		return this.getRuleContext(0, Alter_event_trigger_actionContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_event_trigger; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_event_trigger) {
			listener.enterAlter_event_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_event_trigger) {
			listener.exitAlter_event_trigger(this);
		}
	}
}


export class Alter_event_trigger_actionContext extends ParserRuleContext {
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISABLE, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENABLE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLICA, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALWAYS, 0); }
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_event_trigger_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_event_trigger_action) {
			listener.enterAlter_event_trigger_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_event_trigger_action) {
			listener.exitAlter_event_trigger_action(this);
		}
	}
}


export class Alter_type_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _new_enum_value: Character_stringContext;
	public _existing_enum_value: Character_stringContext;
	public _attribute_name: IdentifierContext;
	public _new_attribute_name: IdentifierContext;
	public _existing_enum_name: Character_stringContext;
	public _new_enum_name: Character_stringContext;
	public TYPE(): TerminalNode { return this.getToken(PLpgSQLParser.TYPE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALUE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RENAME, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ATTRIBUTE, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public type_action(): Type_actionContext[];
	public type_action(i: number): Type_actionContext;
	public type_action(i?: number): Type_actionContext | Type_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Type_actionContext);
		} else {
			return this.getRuleContext(i, Type_actionContext);
		}
	}
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AFTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_type_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_type_statement) {
			listener.enterAlter_type_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_type_statement) {
			listener.exitAlter_type_statement(this);
		}
	}
}


export class Alter_domain_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _dom_constraint: Domain_constraintContext;
	public _not_valid: Token;
	public DOMAIN(): TerminalNode { return this.getToken(PLpgSQLParser.DOMAIN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public set_def_column(): Set_def_columnContext | undefined {
		return this.tryGetRuleContext(0, Set_def_columnContext);
	}
	public drop_def(): Drop_defContext | undefined {
		return this.tryGetRuleContext(0, Drop_defContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public drop_constraint(): Drop_constraintContext | undefined {
		return this.tryGetRuleContext(0, Drop_constraintContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RENAME, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public validate_constraint(): Validate_constraintContext | undefined {
		return this.tryGetRuleContext(0, Validate_constraintContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public domain_constraint(): Domain_constraintContext | undefined {
		return this.tryGetRuleContext(0, Domain_constraintContext);
	}
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_domain_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_domain_statement) {
			listener.enterAlter_domain_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_domain_statement) {
			listener.exitAlter_domain_statement(this);
		}
	}
}


export class Alter_server_statementContext extends ParserRuleContext {
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public alter_server_action(): Alter_server_actionContext {
		return this.getRuleContext(0, Alter_server_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_server_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_server_statement) {
			listener.enterAlter_server_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_server_statement) {
			listener.exitAlter_server_statement(this);
		}
	}
}


export class Alter_server_actionContext extends ParserRuleContext {
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_server_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_server_action) {
			listener.enterAlter_server_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_server_action) {
			listener.exitAlter_server_action(this);
		}
	}
}


export class Alter_fts_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public TEXT(): TerminalNode { return this.getToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PLpgSQLParser.SEARCH, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DICTIONARY, 0); }
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFIGURATION, 0); }
	public alter_fts_configuration(): Alter_fts_configurationContext | undefined {
		return this.tryGetRuleContext(0, Alter_fts_configurationContext);
	}
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPLATE, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARSER, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_fts_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_fts_statement) {
			listener.enterAlter_fts_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_fts_statement) {
			listener.exitAlter_fts_statement(this);
		}
	}
}


export class Alter_fts_configurationContext extends ParserRuleContext {
	public MAPPING(): TerminalNode { return this.getToken(PLpgSQLParser.MAPPING, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALTER, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_fts_configuration; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_fts_configuration) {
			listener.enterAlter_fts_configuration(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_fts_configuration) {
			listener.exitAlter_fts_configuration(this);
		}
	}
}


export class Type_actionContext extends ParserRuleContext {
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public ATTRIBUTE(): TerminalNode { return this.getToken(PLpgSQLParser.ATTRIBUTE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public collate_identifier(): Collate_identifierContext | undefined {
		return this.tryGetRuleContext(0, Collate_identifierContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALTER, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_type_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterType_action) {
			listener.enterType_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitType_action) {
			listener.exitType_action(this);
		}
	}
}


export class Set_def_columnContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(PLpgSQLParser.SET, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(PLpgSQLParser.DEFAULT, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_set_def_column; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSet_def_column) {
			listener.enterSet_def_column(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSet_def_column) {
			listener.exitSet_def_column(this);
		}
	}
}


export class Drop_defContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(PLpgSQLParser.DROP, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(PLpgSQLParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_def; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_def) {
			listener.enterDrop_def(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_def) {
			listener.exitDrop_def(this);
		}
	}
}


export class Create_index_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _table_name: Schema_qualified_nameContext;
	public INDEX(): TerminalNode { return this.getToken(PLpgSQLParser.INDEX, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public index_rest(): Index_restContext {
		return this.getRuleContext(0, Index_restContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNIQUE, 0); }
	public CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONCURRENTLY, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_index_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_index_statement) {
			listener.enterCreate_index_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_index_statement) {
			listener.exitCreate_index_statement(this);
		}
	}
}


export class Index_restContext extends ParserRuleContext {
	public _method: IdentifierContext;
	public index_sort(): Index_sortContext {
		return this.getRuleContext(0, Index_sortContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public including_index(): Including_indexContext | undefined {
		return this.tryGetRuleContext(0, Including_indexContext);
	}
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	public table_space(): Table_spaceContext | undefined {
		return this.tryGetRuleContext(0, Table_spaceContext);
	}
	public index_where(): Index_whereContext | undefined {
		return this.tryGetRuleContext(0, Index_whereContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_index_rest; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndex_rest) {
			listener.enterIndex_rest(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndex_rest) {
			listener.exitIndex_rest(this);
		}
	}
}


export class Index_sortContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public sort_specifier_list(): Sort_specifier_listContext {
		return this.getRuleContext(0, Sort_specifier_listContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_index_sort; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndex_sort) {
			listener.enterIndex_sort(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndex_sort) {
			listener.exitIndex_sort(this);
		}
	}
}


export class Including_indexContext extends ParserRuleContext {
	public INCLUDE(): TerminalNode { return this.getToken(PLpgSQLParser.INCLUDE, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_including_index; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIncluding_index) {
			listener.enterIncluding_index(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIncluding_index) {
			listener.exitIncluding_index(this);
		}
	}
}


export class Index_whereContext extends ParserRuleContext {
	public WHERE(): TerminalNode { return this.getToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_index_where; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndex_where) {
			listener.enterIndex_where(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndex_where) {
			listener.exitIndex_where(this);
		}
	}
}


export class Create_extension_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _schema: IdentifierContext;
	public EXTENSION(): TerminalNode { return this.getToken(PLpgSQLParser.EXTENSION, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CASCADE, 0); }
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_extension_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_extension_statement) {
			listener.enterCreate_extension_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_extension_statement) {
			listener.exitCreate_extension_statement(this);
		}
	}
}


export class Create_language_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public LANGUAGE(): TerminalNode { return this.getToken(PLpgSQLParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public TRUSTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUSTED, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HANDLER, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public INLINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INLINE, 0); }
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALIDATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_language_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_language_statement) {
			listener.enterCreate_language_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_language_statement) {
			listener.exitCreate_language_statement(this);
		}
	}
}


export class Create_event_triggerContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public EVENT(): TerminalNode { return this.getToken(PLpgSQLParser.EVENT, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PLpgSQLParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public EXECUTE(): TerminalNode { return this.getToken(PLpgSQLParser.EXECUTE, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHEN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.IN);
		} else {
			return this.getToken(PLpgSQLParser.IN, i);
		}
	}
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.AND);
		} else {
			return this.getToken(PLpgSQLParser.AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_event_trigger; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_event_trigger) {
			listener.enterCreate_event_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_event_trigger) {
			listener.exitCreate_event_trigger(this);
		}
	}
}


export class Create_type_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _table_column_definition: Table_column_definitionContext;
	public _attrs: Table_column_definitionContext[] = [];
	public _character_string: Character_stringContext;
	public _enums: Character_stringContext[] = [];
	public _subtype_name: Data_typeContext;
	public _subtype_operator_class: IdentifierContext;
	public _collation: Schema_qualified_nameContext;
	public _canonical_function: Schema_qualified_nameContext;
	public _subtype_diff_function: Schema_qualified_nameContext;
	public _internallength: Signed_numerical_literalContext;
	public _input_function: Schema_qualified_nameContext;
	public _output_function: Schema_qualified_nameContext;
	public _receive_function: Schema_qualified_nameContext;
	public _send_function: Schema_qualified_nameContext;
	public _type_modifier_input_function: Schema_qualified_nameContext;
	public _type_modifier_output_function: Schema_qualified_nameContext;
	public _analyze_function: Schema_qualified_nameContext;
	public _alignment: Data_typeContext;
	public _storage: Token;
	public _like_type: Data_typeContext;
	public _category: Character_stringContext;
	public _preferred: Truth_valueContext;
	public _default_value: VexContext;
	public _element: Data_typeContext;
	public _delimiter: Character_stringContext;
	public _collatable: Truth_valueContext;
	public TYPE(): TerminalNode { return this.getToken(PLpgSQLParser.TYPE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INPUT, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EQUAL);
		} else {
			return this.getToken(PLpgSQLParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OUTPUT, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENUM, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RANGE, 0); }
	public INTERNALLENGTH(): TerminalNode[];
	public INTERNALLENGTH(i: number): TerminalNode;
	public INTERNALLENGTH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.INTERNALLENGTH);
		} else {
			return this.getToken(PLpgSQLParser.INTERNALLENGTH, i);
		}
	}
	public SUBTYPE(): TerminalNode[];
	public SUBTYPE(i: number): TerminalNode;
	public SUBTYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SUBTYPE);
		} else {
			return this.getToken(PLpgSQLParser.SUBTYPE, i);
		}
	}
	public SUBTYPE_OPCLASS(): TerminalNode[];
	public SUBTYPE_OPCLASS(i: number): TerminalNode;
	public SUBTYPE_OPCLASS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SUBTYPE_OPCLASS);
		} else {
			return this.getToken(PLpgSQLParser.SUBTYPE_OPCLASS, i);
		}
	}
	public COLLATION(): TerminalNode[];
	public COLLATION(i: number): TerminalNode;
	public COLLATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COLLATION);
		} else {
			return this.getToken(PLpgSQLParser.COLLATION, i);
		}
	}
	public CANONICAL(): TerminalNode[];
	public CANONICAL(i: number): TerminalNode;
	public CANONICAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.CANONICAL);
		} else {
			return this.getToken(PLpgSQLParser.CANONICAL, i);
		}
	}
	public SUBTYPE_DIFF(): TerminalNode[];
	public SUBTYPE_DIFF(i: number): TerminalNode;
	public SUBTYPE_DIFF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SUBTYPE_DIFF);
		} else {
			return this.getToken(PLpgSQLParser.SUBTYPE_DIFF, i);
		}
	}
	public VARIABLE(): TerminalNode[];
	public VARIABLE(i: number): TerminalNode;
	public VARIABLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.VARIABLE);
		} else {
			return this.getToken(PLpgSQLParser.VARIABLE, i);
		}
	}
	public RECEIVE(): TerminalNode[];
	public RECEIVE(i: number): TerminalNode;
	public RECEIVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RECEIVE);
		} else {
			return this.getToken(PLpgSQLParser.RECEIVE, i);
		}
	}
	public SEND(): TerminalNode[];
	public SEND(i: number): TerminalNode;
	public SEND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SEND);
		} else {
			return this.getToken(PLpgSQLParser.SEND, i);
		}
	}
	public TYPMOD_IN(): TerminalNode[];
	public TYPMOD_IN(i: number): TerminalNode;
	public TYPMOD_IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.TYPMOD_IN);
		} else {
			return this.getToken(PLpgSQLParser.TYPMOD_IN, i);
		}
	}
	public TYPMOD_OUT(): TerminalNode[];
	public TYPMOD_OUT(i: number): TerminalNode;
	public TYPMOD_OUT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.TYPMOD_OUT);
		} else {
			return this.getToken(PLpgSQLParser.TYPMOD_OUT, i);
		}
	}
	public ANALYZE(): TerminalNode[];
	public ANALYZE(i: number): TerminalNode;
	public ANALYZE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ANALYZE);
		} else {
			return this.getToken(PLpgSQLParser.ANALYZE, i);
		}
	}
	public PASSEDBYVALUE(): TerminalNode[];
	public PASSEDBYVALUE(i: number): TerminalNode;
	public PASSEDBYVALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.PASSEDBYVALUE);
		} else {
			return this.getToken(PLpgSQLParser.PASSEDBYVALUE, i);
		}
	}
	public ALIGNMENT(): TerminalNode[];
	public ALIGNMENT(i: number): TerminalNode;
	public ALIGNMENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ALIGNMENT);
		} else {
			return this.getToken(PLpgSQLParser.ALIGNMENT, i);
		}
	}
	public STORAGE(): TerminalNode[];
	public STORAGE(i: number): TerminalNode;
	public STORAGE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.STORAGE);
		} else {
			return this.getToken(PLpgSQLParser.STORAGE, i);
		}
	}
	public LIKE(): TerminalNode[];
	public LIKE(i: number): TerminalNode;
	public LIKE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LIKE);
		} else {
			return this.getToken(PLpgSQLParser.LIKE, i);
		}
	}
	public CATEGORY(): TerminalNode[];
	public CATEGORY(i: number): TerminalNode;
	public CATEGORY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.CATEGORY);
		} else {
			return this.getToken(PLpgSQLParser.CATEGORY, i);
		}
	}
	public PREFERRED(): TerminalNode[];
	public PREFERRED(i: number): TerminalNode;
	public PREFERRED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.PREFERRED);
		} else {
			return this.getToken(PLpgSQLParser.PREFERRED, i);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DEFAULT);
		} else {
			return this.getToken(PLpgSQLParser.DEFAULT, i);
		}
	}
	public ELEMENT(): TerminalNode[];
	public ELEMENT(i: number): TerminalNode;
	public ELEMENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ELEMENT);
		} else {
			return this.getToken(PLpgSQLParser.ELEMENT, i);
		}
	}
	public DELIMITER(): TerminalNode[];
	public DELIMITER(i: number): TerminalNode;
	public DELIMITER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DELIMITER);
		} else {
			return this.getToken(PLpgSQLParser.DELIMITER, i);
		}
	}
	public COLLATABLE(): TerminalNode[];
	public COLLATABLE(i: number): TerminalNode;
	public COLLATABLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COLLATABLE);
		} else {
			return this.getToken(PLpgSQLParser.COLLATABLE, i);
		}
	}
	public table_column_definition(): Table_column_definitionContext[];
	public table_column_definition(i: number): Table_column_definitionContext;
	public table_column_definition(i?: number): Table_column_definitionContext | Table_column_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_column_definitionContext);
		} else {
			return this.getRuleContext(i, Table_column_definitionContext);
		}
	}
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public signed_numerical_literal(): Signed_numerical_literalContext[];
	public signed_numerical_literal(i: number): Signed_numerical_literalContext;
	public signed_numerical_literal(i?: number): Signed_numerical_literalContext | Signed_numerical_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Signed_numerical_literalContext);
		} else {
			return this.getRuleContext(i, Signed_numerical_literalContext);
		}
	}
	public truth_value(): Truth_valueContext[];
	public truth_value(i: number): Truth_valueContext;
	public truth_value(i?: number): Truth_valueContext | Truth_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Truth_valueContext);
		} else {
			return this.getRuleContext(i, Truth_valueContext);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public PLAIN(): TerminalNode[];
	public PLAIN(i: number): TerminalNode;
	public PLAIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.PLAIN);
		} else {
			return this.getToken(PLpgSQLParser.PLAIN, i);
		}
	}
	public EXTERNAL(): TerminalNode[];
	public EXTERNAL(i: number): TerminalNode;
	public EXTERNAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EXTERNAL);
		} else {
			return this.getToken(PLpgSQLParser.EXTERNAL, i);
		}
	}
	public EXTENDED(): TerminalNode[];
	public EXTENDED(i: number): TerminalNode;
	public EXTENDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EXTENDED);
		} else {
			return this.getToken(PLpgSQLParser.EXTENDED, i);
		}
	}
	public MAIN(): TerminalNode[];
	public MAIN(i: number): TerminalNode;
	public MAIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.MAIN);
		} else {
			return this.getToken(PLpgSQLParser.MAIN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_type_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_type_statement) {
			listener.enterCreate_type_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_type_statement) {
			listener.exitCreate_type_statement(this);
		}
	}
}


export class Create_domain_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _dat_type: Data_typeContext;
	public _def_value: VexContext;
	public _domain_constraint: Domain_constraintContext;
	public _dom_constraint: Domain_constraintContext[] = [];
	public DOMAIN(): TerminalNode { return this.getToken(PLpgSQLParser.DOMAIN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public collate_identifier(): Collate_identifierContext[];
	public collate_identifier(i: number): Collate_identifierContext;
	public collate_identifier(i?: number): Collate_identifierContext | Collate_identifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Collate_identifierContext);
		} else {
			return this.getRuleContext(i, Collate_identifierContext);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DEFAULT);
		} else {
			return this.getToken(PLpgSQLParser.DEFAULT, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public domain_constraint(): Domain_constraintContext[];
	public domain_constraint(i: number): Domain_constraintContext;
	public domain_constraint(i?: number): Domain_constraintContext | Domain_constraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Domain_constraintContext);
		} else {
			return this.getRuleContext(i, Domain_constraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_domain_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_domain_statement) {
			listener.enterCreate_domain_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_domain_statement) {
			listener.exitCreate_domain_statement(this);
		}
	}
}


export class Create_server_statementContext extends ParserRuleContext {
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public FOREIGN(): TerminalNode { return this.getToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(PLpgSQLParser.WRAPPER, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_server_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_server_statement) {
			listener.enterCreate_server_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_server_statement) {
			listener.exitCreate_server_statement(this);
		}
	}
}


export class Create_fts_dictionaryContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _template: Schema_qualified_nameContext;
	public TEXT(): TerminalNode { return this.getToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PLpgSQLParser.SEARCH, 0); }
	public DICTIONARY(): TerminalNode { return this.getToken(PLpgSQLParser.DICTIONARY, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public TEMPLATE(): TerminalNode { return this.getToken(PLpgSQLParser.TEMPLATE, 0); }
	public EQUAL(): TerminalNode { return this.getToken(PLpgSQLParser.EQUAL, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public option_with_value(): Option_with_valueContext[];
	public option_with_value(i: number): Option_with_valueContext;
	public option_with_value(i?: number): Option_with_valueContext | Option_with_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Option_with_valueContext);
		} else {
			return this.getRuleContext(i, Option_with_valueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_fts_dictionary; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_fts_dictionary) {
			listener.enterCreate_fts_dictionary(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_fts_dictionary) {
			listener.exitCreate_fts_dictionary(this);
		}
	}
}


export class Option_with_valueContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(PLpgSQLParser.EQUAL, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_option_with_value; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOption_with_value) {
			listener.enterOption_with_value(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOption_with_value) {
			listener.exitOption_with_value(this);
		}
	}
}


export class Create_fts_configurationContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _parser_name: Schema_qualified_nameContext;
	public _config_name: Schema_qualified_nameContext;
	public TEXT(): TerminalNode { return this.getToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PLpgSQLParser.SEARCH, 0); }
	public CONFIGURATION(): TerminalNode { return this.getToken(PLpgSQLParser.CONFIGURATION, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARSER, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COPY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_fts_configuration; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_fts_configuration) {
			listener.enterCreate_fts_configuration(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_fts_configuration) {
			listener.exitCreate_fts_configuration(this);
		}
	}
}


export class Create_fts_templateContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _init_name: Schema_qualified_nameContext;
	public _lexize_name: Schema_qualified_nameContext;
	public TEXT(): TerminalNode { return this.getToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PLpgSQLParser.SEARCH, 0); }
	public TEMPLATE(): TerminalNode { return this.getToken(PLpgSQLParser.TEMPLATE, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public LEXIZE(): TerminalNode { return this.getToken(PLpgSQLParser.LEXIZE, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EQUAL);
		} else {
			return this.getToken(PLpgSQLParser.EQUAL, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public INIT(): TerminalNode[];
	public INIT(i: number): TerminalNode;
	public INIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.INIT);
		} else {
			return this.getToken(PLpgSQLParser.INIT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_fts_template; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_fts_template) {
			listener.enterCreate_fts_template(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_fts_template) {
			listener.exitCreate_fts_template(this);
		}
	}
}


export class Create_fts_parserContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _start_func: Schema_qualified_nameContext;
	public _gettoken_func: Schema_qualified_nameContext;
	public _end_func: Schema_qualified_nameContext;
	public _headline_func: Schema_qualified_nameContext;
	public _lextypes_func: Schema_qualified_nameContext;
	public TEXT(): TerminalNode { return this.getToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PLpgSQLParser.SEARCH, 0); }
	public PARSER(): TerminalNode { return this.getToken(PLpgSQLParser.PARSER, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public START(): TerminalNode { return this.getToken(PLpgSQLParser.START, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EQUAL);
		} else {
			return this.getToken(PLpgSQLParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public GETTOKEN(): TerminalNode { return this.getToken(PLpgSQLParser.GETTOKEN, 0); }
	public END(): TerminalNode { return this.getToken(PLpgSQLParser.END, 0); }
	public LEXTYPES(): TerminalNode { return this.getToken(PLpgSQLParser.LEXTYPES, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public HEADLINE(): TerminalNode[];
	public HEADLINE(i: number): TerminalNode;
	public HEADLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.HEADLINE);
		} else {
			return this.getToken(PLpgSQLParser.HEADLINE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_fts_parser; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_fts_parser) {
			listener.enterCreate_fts_parser(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_fts_parser) {
			listener.exitCreate_fts_parser(this);
		}
	}
}


export class Create_collationContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public COLLATION(): TerminalNode { return this.getToken(PLpgSQLParser.COLLATION, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public collation_option(): Collation_optionContext[];
	public collation_option(i: number): Collation_optionContext;
	public collation_option(i?: number): Collation_optionContext | Collation_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Collation_optionContext);
		} else {
			return this.getRuleContext(i, Collation_optionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_collation; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_collation) {
			listener.enterCreate_collation(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_collation) {
			listener.exitCreate_collation(this);
		}
	}
}


export class Alter_collationContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public COLLATION(): TerminalNode { return this.getToken(PLpgSQLParser.COLLATION, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFRESH, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_collation; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_collation) {
			listener.enterAlter_collation(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_collation) {
			listener.exitAlter_collation(this);
		}
	}
}


export class Collation_optionContext extends ParserRuleContext {
	public EQUAL(): TerminalNode { return this.getToken(PLpgSQLParser.EQUAL, 0); }
	public LOCALE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCALE, 0); }
	public LC_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LC_COLLATE, 0); }
	public LC_CTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LC_CTYPE, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROVIDER, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DETERMINISTIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DETERMINISTIC, 0); }
	public boolean_value(): Boolean_valueContext | undefined {
		return this.tryGetRuleContext(0, Boolean_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_collation_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCollation_option) {
			listener.enterCollation_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCollation_option) {
			listener.exitCollation_option(this);
		}
	}
}


export class Create_user_mappingContext extends ParserRuleContext {
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.USER);
		} else {
			return this.getToken(PLpgSQLParser.USER, i);
		}
	}
	public MAPPING(): TerminalNode { return this.getToken(PLpgSQLParser.MAPPING, 0); }
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_user_mapping; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_user_mapping) {
			listener.enterCreate_user_mapping(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_user_mapping) {
			listener.exitCreate_user_mapping(this);
		}
	}
}


export class Alter_user_mappingContext extends ParserRuleContext {
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.USER);
		} else {
			return this.getToken(PLpgSQLParser.USER, i);
		}
	}
	public MAPPING(): TerminalNode { return this.getToken(PLpgSQLParser.MAPPING, 0); }
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_user_mapping; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_user_mapping) {
			listener.enterAlter_user_mapping(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_user_mapping) {
			listener.exitAlter_user_mapping(this);
		}
	}
}


export class Alter_user_or_roleContext extends ParserRuleContext {
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public alter_user_or_role_set_reset(): Alter_user_or_role_set_resetContext | undefined {
		return this.tryGetRuleContext(0, Alter_user_or_role_set_resetContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public user_or_role_option_for_alter(): User_or_role_option_for_alterContext[];
	public user_or_role_option_for_alter(i: number): User_or_role_option_for_alterContext;
	public user_or_role_option_for_alter(i?: number): User_or_role_option_for_alterContext | User_or_role_option_for_alterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_or_role_option_for_alterContext);
		} else {
			return this.getRuleContext(i, User_or_role_option_for_alterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_user_or_role; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_user_or_role) {
			listener.enterAlter_user_or_role(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_user_or_role) {
			listener.exitAlter_user_or_role(this);
		}
	}
}


export class Alter_user_or_role_set_resetContext extends ParserRuleContext {
	public user_or_role_set_reset(): User_or_role_set_resetContext {
		return this.getRuleContext(0, User_or_role_set_resetContext);
	}
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_user_or_role_set_reset; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_user_or_role_set_reset) {
			listener.enterAlter_user_or_role_set_reset(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_user_or_role_set_reset) {
			listener.exitAlter_user_or_role_set_reset(this);
		}
	}
}


export class User_or_role_set_resetContext extends ParserRuleContext {
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public set_statement_value(): Set_statement_valueContext | undefined {
		return this.tryGetRuleContext(0, Set_statement_valueContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_or_role_set_reset; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_or_role_set_reset) {
			listener.enterUser_or_role_set_reset(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_or_role_set_reset) {
			listener.exitUser_or_role_set_reset(this);
		}
	}
}


export class Alter_groupContext extends ParserRuleContext {
	public GROUP(): TerminalNode { return this.getToken(PLpgSQLParser.GROUP, 0); }
	public alter_group_action(): Alter_group_actionContext {
		return this.getRuleContext(0, Alter_group_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_group; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_group) {
			listener.enterAlter_group(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_group) {
			listener.exitAlter_group(this);
		}
	}
}


export class Alter_group_actionContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_group_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_group_action) {
			listener.enterAlter_group_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_group_action) {
			listener.exitAlter_group_action(this);
		}
	}
}


export class Alter_tablespaceContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public TABLESPACE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLESPACE, 0); }
	public alter_tablespace_action(): Alter_tablespace_actionContext {
		return this.getRuleContext(0, Alter_tablespace_actionContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_tablespace; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_tablespace) {
			listener.enterAlter_tablespace(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_tablespace) {
			listener.exitAlter_tablespace(this);
		}
	}
}


export class Alter_ownerContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public owner_to(): Owner_toContext {
		return this.getRuleContext(0, Owner_toContext);
	}
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public target_operator(): Target_operatorContext | undefined {
		return this.tryGetRuleContext(0, Target_operatorContext);
	}
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LARGE, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OBJECT, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public function_args(): Function_argsContext | undefined {
		return this.tryGetRuleContext(0, Function_argsContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AGGREGATE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DICTIONARY, 0); }
	public CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFIGURATION, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_owner; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_owner) {
			listener.enterAlter_owner(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_owner) {
			listener.exitAlter_owner(this);
		}
	}
}


export class Alter_tablespace_actionContext extends ParserRuleContext {
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public option_with_value(): Option_with_valueContext[];
	public option_with_value(i: number): Option_with_valueContext;
	public option_with_value(i?: number): Option_with_valueContext | Option_with_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Option_with_valueContext);
		} else {
			return this.getRuleContext(i, Option_with_valueContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_tablespace_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_tablespace_action) {
			listener.enterAlter_tablespace_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_tablespace_action) {
			listener.exitAlter_tablespace_action(this);
		}
	}
}


export class Alter_statisticsContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public STATISTICS(): TerminalNode { return this.getToken(PLpgSQLParser.STATISTICS, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_statistics; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_statistics) {
			listener.enterAlter_statistics(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_statistics) {
			listener.exitAlter_statistics(this);
		}
	}
}


export class Alter_foreign_data_wrapperContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public FOREIGN(): TerminalNode { return this.getToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(PLpgSQLParser.WRAPPER, 0); }
	public alter_foreign_data_wrapper_action(): Alter_foreign_data_wrapper_actionContext {
		return this.getRuleContext(0, Alter_foreign_data_wrapper_actionContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_foreign_data_wrapper; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_foreign_data_wrapper) {
			listener.enterAlter_foreign_data_wrapper(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_foreign_data_wrapper) {
			listener.exitAlter_foreign_data_wrapper(this);
		}
	}
}


export class Alter_foreign_data_wrapper_actionContext extends ParserRuleContext {
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HANDLER, 0); }
	public schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext[];
	public schema_qualified_name_nontype(i: number): Schema_qualified_name_nontypeContext;
	public schema_qualified_name_nontype(i?: number): Schema_qualified_name_nontypeContext | Schema_qualified_name_nontypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_name_nontypeContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_name_nontypeContext);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NO);
		} else {
			return this.getToken(PLpgSQLParser.NO, i);
		}
	}
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALIDATOR, 0); }
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_foreign_data_wrapper_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_foreign_data_wrapper_action) {
			listener.enterAlter_foreign_data_wrapper_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_foreign_data_wrapper_action) {
			listener.exitAlter_foreign_data_wrapper_action(this);
		}
	}
}


export class Alter_operator_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public target_operator(): Target_operatorContext {
		return this.getRuleContext(0, Target_operatorContext);
	}
	public alter_operator_action(): Alter_operator_actionContext {
		return this.getRuleContext(0, Alter_operator_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_operator_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_operator_statement) {
			listener.enterAlter_operator_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_operator_statement) {
			listener.exitAlter_operator_statement(this);
		}
	}
}


export class Alter_operator_actionContext extends ParserRuleContext {
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public operator_set_restrict_join(): Operator_set_restrict_joinContext[];
	public operator_set_restrict_join(i: number): Operator_set_restrict_joinContext;
	public operator_set_restrict_join(i?: number): Operator_set_restrict_joinContext | Operator_set_restrict_joinContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Operator_set_restrict_joinContext);
		} else {
			return this.getRuleContext(i, Operator_set_restrict_joinContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_operator_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_operator_action) {
			listener.enterAlter_operator_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_operator_action) {
			listener.exitAlter_operator_action(this);
		}
	}
}


export class Operator_set_restrict_joinContext extends ParserRuleContext {
	public EQUAL(): TerminalNode { return this.getToken(PLpgSQLParser.EQUAL, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICT, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.JOIN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_operator_set_restrict_join; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOperator_set_restrict_join) {
			listener.enterOperator_set_restrict_join(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOperator_set_restrict_join) {
			listener.exitOperator_set_restrict_join(this);
		}
	}
}


export class Drop_user_mappingContext extends ParserRuleContext {
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.USER);
		} else {
			return this.getToken(PLpgSQLParser.USER, i);
		}
	}
	public MAPPING(): TerminalNode { return this.getToken(PLpgSQLParser.MAPPING, 0); }
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_user_mapping; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_user_mapping) {
			listener.enterDrop_user_mapping(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_user_mapping) {
			listener.exitDrop_user_mapping(this);
		}
	}
}


export class Drop_ownedContext extends ParserRuleContext {
	public OWNED(): TerminalNode { return this.getToken(PLpgSQLParser.OWNED, 0); }
	public BY(): TerminalNode { return this.getToken(PLpgSQLParser.BY, 0); }
	public user_name(): User_nameContext[];
	public user_name(i: number): User_nameContext;
	public user_name(i?: number): User_nameContext | User_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_nameContext);
		} else {
			return this.getRuleContext(i, User_nameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_owned; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_owned) {
			listener.enterDrop_owned(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_owned) {
			listener.exitDrop_owned(this);
		}
	}
}


export class Drop_operator_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public target_operator(): Target_operatorContext[];
	public target_operator(i: number): Target_operatorContext;
	public target_operator(i?: number): Target_operatorContext | Target_operatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Target_operatorContext);
		} else {
			return this.getRuleContext(i, Target_operatorContext);
		}
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_operator_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_operator_statement) {
			listener.enterDrop_operator_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_operator_statement) {
			listener.exitDrop_operator_statement(this);
		}
	}
}


export class Target_operatorContext extends ParserRuleContext {
	public _name: Operator_nameContext;
	public _left_type: Data_typeContext;
	public _right_type: Data_typeContext;
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public COMMA(): TerminalNode { return this.getToken(PLpgSQLParser.COMMA, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public operator_name(): Operator_nameContext {
		return this.getRuleContext(0, Operator_nameContext);
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NONE);
		} else {
			return this.getToken(PLpgSQLParser.NONE, i);
		}
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_target_operator; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTarget_operator) {
			listener.enterTarget_operator(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTarget_operator) {
			listener.exitTarget_operator(this);
		}
	}
}


export class Domain_constraintContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECK, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_domain_constraint; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDomain_constraint) {
			listener.enterDomain_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDomain_constraint) {
			listener.exitDomain_constraint(this);
		}
	}
}


export class Create_transform_statementContext extends ParserRuleContext {
	public TRANSFORM(): TerminalNode { return this.getToken(PLpgSQLParser.TRANSFORM, 0); }
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public LANGUAGE(): TerminalNode { return this.getToken(PLpgSQLParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public SQL(): TerminalNode[];
	public SQL(i: number): TerminalNode;
	public SQL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SQL);
		} else {
			return this.getToken(PLpgSQLParser.SQL, i);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WITH);
		} else {
			return this.getToken(PLpgSQLParser.WITH, i);
		}
	}
	public FUNCTION(): TerminalNode[];
	public FUNCTION(i: number): TerminalNode;
	public FUNCTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.FUNCTION);
		} else {
			return this.getToken(PLpgSQLParser.FUNCTION, i);
		}
	}
	public function_parameters(): Function_parametersContext[];
	public function_parameters(i: number): Function_parametersContext;
	public function_parameters(i?: number): Function_parametersContext | Function_parametersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_parametersContext);
		} else {
			return this.getRuleContext(i, Function_parametersContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(PLpgSQLParser.COMMA, 0); }
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_transform_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_transform_statement) {
			listener.enterCreate_transform_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_transform_statement) {
			listener.exitCreate_transform_statement(this);
		}
	}
}


export class Create_access_methodContext extends ParserRuleContext {
	public ACCESS(): TerminalNode { return this.getToken(PLpgSQLParser.ACCESS, 0); }
	public METHOD(): TerminalNode { return this.getToken(PLpgSQLParser.METHOD, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public TYPE(): TerminalNode { return this.getToken(PLpgSQLParser.TYPE, 0); }
	public HANDLER(): TerminalNode { return this.getToken(PLpgSQLParser.HANDLER, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_access_method; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_access_method) {
			listener.enterCreate_access_method(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_access_method) {
			listener.exitCreate_access_method(this);
		}
	}
}


export class Create_user_or_roleContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public user_or_role_option(): User_or_role_optionContext[];
	public user_or_role_option(i: number): User_or_role_optionContext;
	public user_or_role_option(i?: number): User_or_role_optionContext | User_or_role_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_or_role_optionContext);
		} else {
			return this.getRuleContext(i, User_or_role_optionContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_user_or_role; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_user_or_role) {
			listener.enterCreate_user_or_role(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_user_or_role) {
			listener.exitCreate_user_or_role(this);
		}
	}
}


export class User_or_role_optionContext extends ParserRuleContext {
	public user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_or_group_common_optionContext);
	}
	public user_or_role_common_option(): User_or_role_common_optionContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_common_optionContext);
	}
	public user_or_role_or_group_option_for_create(): User_or_role_or_group_option_for_createContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_or_group_option_for_createContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_or_role_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_or_role_option) {
			listener.enterUser_or_role_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_or_role_option) {
			listener.exitUser_or_role_option(this);
		}
	}
}


export class User_or_role_option_for_alterContext extends ParserRuleContext {
	public user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_or_group_common_optionContext);
	}
	public user_or_role_common_option(): User_or_role_common_optionContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_common_optionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_or_role_option_for_alter; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_or_role_option_for_alter) {
			listener.enterUser_or_role_option_for_alter(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_or_role_option_for_alter) {
			listener.exitUser_or_role_option_for_alter(this);
		}
	}
}


export class User_or_role_or_group_common_optionContext extends ParserRuleContext {
	public _password: Token;
	public _date_time: Token;
	public SUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUPERUSER, 0); }
	public NOSUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOSUPERUSER, 0); }
	public CREATEDB(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATEDB, 0); }
	public NOCREATEDB(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOCREATEDB, 0); }
	public CREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATEROLE, 0); }
	public NOCREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOCREATEROLE, 0); }
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INHERIT, 0); }
	public NOINHERIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOINHERIT, 0); }
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOGIN, 0); }
	public NOLOGIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOLOGIN, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PASSWORD, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENCRYPTED, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALID, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNTIL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_or_role_or_group_common_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_or_role_or_group_common_option) {
			listener.enterUser_or_role_or_group_common_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_or_role_or_group_common_option) {
			listener.exitUser_or_role_or_group_common_option(this);
		}
	}
}


export class User_or_role_common_optionContext extends ParserRuleContext {
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLICATION, 0); }
	public NOREPLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOREPLICATION, 0); }
	public BYPASSRLS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BYPASSRLS, 0); }
	public NOBYPASSRLS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOBYPASSRLS, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONNECTION, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIMIT, 0); }
	public signed_number_literal(): Signed_number_literalContext | undefined {
		return this.tryGetRuleContext(0, Signed_number_literalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_or_role_common_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_or_role_common_option) {
			listener.enterUser_or_role_common_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_or_role_common_option) {
			listener.exitUser_or_role_common_option(this);
		}
	}
}


export class User_or_role_or_group_option_for_createContext extends ParserRuleContext {
	public SYSID(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYSID, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUP, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADMIN, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_user_or_role_or_group_option_for_create; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUser_or_role_or_group_option_for_create) {
			listener.enterUser_or_role_or_group_option_for_create(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUser_or_role_or_group_option_for_create) {
			listener.exitUser_or_role_or_group_option_for_create(this);
		}
	}
}


export class Create_groupContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public GROUP(): TerminalNode { return this.getToken(PLpgSQLParser.GROUP, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public group_option(): Group_optionContext[];
	public group_option(i: number): Group_optionContext;
	public group_option(i?: number): Group_optionContext | Group_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Group_optionContext);
		} else {
			return this.getRuleContext(i, Group_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_group; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_group) {
			listener.enterCreate_group(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_group) {
			listener.exitCreate_group(this);
		}
	}
}


export class Group_optionContext extends ParserRuleContext {
	public user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_or_group_common_optionContext);
	}
	public user_or_role_or_group_option_for_create(): User_or_role_or_group_option_for_createContext | undefined {
		return this.tryGetRuleContext(0, User_or_role_or_group_option_for_createContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_group_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterGroup_option) {
			listener.enterGroup_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitGroup_option) {
			listener.exitGroup_option(this);
		}
	}
}


export class Create_tablespaceContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _directory: Token;
	public TABLESPACE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLESPACE, 0); }
	public LOCATION(): TerminalNode { return this.getToken(PLpgSQLParser.LOCATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public Character_String_Literal(): TerminalNode { return this.getToken(PLpgSQLParser.Character_String_Literal, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OWNER, 0); }
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public option_with_value(): Option_with_valueContext[];
	public option_with_value(i: number): Option_with_valueContext;
	public option_with_value(i?: number): Option_with_valueContext | Option_with_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Option_with_valueContext);
		} else {
			return this.getRuleContext(i, Option_with_valueContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_tablespace; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_tablespace) {
			listener.enterCreate_tablespace(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_tablespace) {
			listener.exitCreate_tablespace(this);
		}
	}
}


export class Create_statisticsContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public STATISTICS(): TerminalNode { return this.getToken(PLpgSQLParser.STATISTICS, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public COMMA(): TerminalNode { return this.getToken(PLpgSQLParser.COMMA, 0); }
	public identifier_list(): Identifier_listContext[];
	public identifier_list(i: number): Identifier_listContext;
	public identifier_list(i?: number): Identifier_listContext | Identifier_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_listContext);
		} else {
			return this.getRuleContext(i, Identifier_listContext);
		}
	}
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_statistics; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_statistics) {
			listener.enterCreate_statistics(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_statistics) {
			listener.exitCreate_statistics(this);
		}
	}
}


export class Create_foreign_data_wrapperContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public FOREIGN(): TerminalNode { return this.getToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(PLpgSQLParser.WRAPPER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HANDLER, 0); }
	public schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext[];
	public schema_qualified_name_nontype(i: number): Schema_qualified_name_nontypeContext;
	public schema_qualified_name_nontype(i?: number): Schema_qualified_name_nontypeContext | Schema_qualified_name_nontypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_name_nontypeContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_name_nontypeContext);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NO);
		} else {
			return this.getToken(PLpgSQLParser.NO, i);
		}
	}
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALIDATOR, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTIONS, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public option_without_equal(): Option_without_equalContext[];
	public option_without_equal(i: number): Option_without_equalContext;
	public option_without_equal(i?: number): Option_without_equalContext | Option_without_equalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Option_without_equalContext);
		} else {
			return this.getRuleContext(i, Option_without_equalContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_foreign_data_wrapper; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_foreign_data_wrapper) {
			listener.enterCreate_foreign_data_wrapper(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_foreign_data_wrapper) {
			listener.exitCreate_foreign_data_wrapper(this);
		}
	}
}


export class Option_without_equalContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public Character_String_Literal(): TerminalNode { return this.getToken(PLpgSQLParser.Character_String_Literal, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_option_without_equal; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOption_without_equal) {
			listener.enterOption_without_equal(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOption_without_equal) {
			listener.exitOption_without_equal(this);
		}
	}
}


export class Create_operator_statementContext extends ParserRuleContext {
	public _name: Operator_nameContext;
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public operator_option(): Operator_optionContext[];
	public operator_option(i: number): Operator_optionContext;
	public operator_option(i?: number): Operator_optionContext | Operator_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Operator_optionContext);
		} else {
			return this.getRuleContext(i, Operator_optionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public operator_name(): Operator_nameContext {
		return this.getRuleContext(0, Operator_nameContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_operator_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_operator_statement) {
			listener.enterCreate_operator_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_operator_statement) {
			listener.exitCreate_operator_statement(this);
		}
	}
}


export class Operator_nameContext extends ParserRuleContext {
	public _schema_name: IdentifierContext;
	public _operator: All_simple_opContext;
	public all_simple_op(): All_simple_opContext {
		return this.getRuleContext(0, All_simple_opContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_operator_name; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOperator_name) {
			listener.enterOperator_name(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOperator_name) {
			listener.exitOperator_name(this);
		}
	}
}


export class Operator_optionContext extends ParserRuleContext {
	public _func_name: Schema_qualified_nameContext;
	public _restr_name: Schema_qualified_nameContext;
	public _join_name: Schema_qualified_nameContext;
	public _type: Data_typeContext;
	public _addition_oper_name: All_op_refContext;
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICT, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.JOIN, 0); }
	public LEFTARG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFTARG, 0); }
	public RIGHTARG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHTARG, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public COMMUTATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMUTATOR, 0); }
	public NEGATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEGATOR, 0); }
	public all_op_ref(): All_op_refContext | undefined {
		return this.tryGetRuleContext(0, All_op_refContext);
	}
	public HASHES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HASHES, 0); }
	public MERGES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MERGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_operator_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOperator_option) {
			listener.enterOperator_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOperator_option) {
			listener.exitOperator_option(this);
		}
	}
}


export class Create_aggregate_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _base_type: Data_typeContext;
	public _sfunc_name: Schema_qualified_nameContext;
	public _type: Data_typeContext;
	public AGGREGATE(): TerminalNode { return this.getToken(PLpgSQLParser.AGGREGATE, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public SFUNC(): TerminalNode { return this.getToken(PLpgSQLParser.SFUNC, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EQUAL);
		} else {
			return this.getToken(PLpgSQLParser.EQUAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public STYPE(): TerminalNode { return this.getToken(PLpgSQLParser.STYPE, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public function_args(): Function_argsContext | undefined {
		return this.tryGetRuleContext(0, Function_argsContext);
	}
	public BASETYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BASETYPE, 0); }
	public aggregate_param(): Aggregate_paramContext[];
	public aggregate_param(i: number): Aggregate_paramContext;
	public aggregate_param(i?: number): Aggregate_paramContext | Aggregate_paramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Aggregate_paramContext);
		} else {
			return this.getRuleContext(i, Aggregate_paramContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_aggregate_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_aggregate_statement) {
			listener.enterCreate_aggregate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_aggregate_statement) {
			listener.exitCreate_aggregate_statement(this);
		}
	}
}


export class Aggregate_paramContext extends ParserRuleContext {
	public _s_space: Token;
	public _final_func: Schema_qualified_nameContext;
	public _combine_func: Schema_qualified_nameContext;
	public _serial_func: Schema_qualified_nameContext;
	public _deserial_func: Schema_qualified_nameContext;
	public _init_cond: VexContext;
	public _ms_func: Schema_qualified_nameContext;
	public _minv_func: Schema_qualified_nameContext;
	public _ms_type: Data_typeContext;
	public _ms_space: Token;
	public _mfinal_func: Schema_qualified_nameContext;
	public _minit_cond: VexContext;
	public SSPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SSPACE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public FINALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FINALFUNC, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public FINALFUNC_EXTRA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FINALFUNC_EXTRA, 0); }
	public FINALFUNC_MODIFY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FINALFUNC_MODIFY, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.READ_ONLY, 0); }
	public SHAREABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SHAREABLE, 0); }
	public READ_WRITE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.READ_WRITE, 0); }
	public COMBINEFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMBINEFUNC, 0); }
	public SERIALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERIALFUNC, 0); }
	public DESERIALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DESERIALFUNC, 0); }
	public INITCOND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INITCOND, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public MSFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MSFUNC, 0); }
	public MINVFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINVFUNC, 0); }
	public MSTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MSTYPE, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public MSSPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MSSPACE, 0); }
	public MFINALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MFINALFUNC, 0); }
	public MFINALFUNC_EXTRA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MFINALFUNC_EXTRA, 0); }
	public MFINALFUNC_MODIFY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MFINALFUNC_MODIFY, 0); }
	public MINITCOND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINITCOND, 0); }
	public SORTOP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SORTOP, 0); }
	public all_op_ref(): All_op_refContext | undefined {
		return this.tryGetRuleContext(0, All_op_refContext);
	}
	public PARALLEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARALLEL, 0); }
	public SAFE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SAFE, 0); }
	public RESTRICTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICTED, 0); }
	public UNSAFE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNSAFE, 0); }
	public HYPOTHETICAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HYPOTHETICAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_aggregate_param; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAggregate_param) {
			listener.enterAggregate_param(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAggregate_param) {
			listener.exitAggregate_param(this);
		}
	}
}


export class Set_statementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(PLpgSQLParser.SET, 0); }
	public set_action(): Set_actionContext {
		return this.getRuleContext(0, Set_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_set_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSet_statement) {
			listener.enterSet_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSet_statement) {
			listener.exitSet_statement(this);
		}
	}
}


export class Set_actionContext extends ParserRuleContext {
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINTS, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFERRED, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMMEDIATE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public names_references(): Names_referencesContext | undefined {
		return this.tryGetRuleContext(0, Names_referencesContext);
	}
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSACTION, 0); }
	public transaction_mode(): Transaction_modeContext[];
	public transaction_mode(i: number): Transaction_modeContext;
	public transaction_mode(i?: number): Transaction_modeContext | Transaction_modeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Transaction_modeContext);
		} else {
			return this.getRuleContext(i, Transaction_modeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SNAPSHOT, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION, 0); }
	public CHARACTERISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHARACTERISTICS, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public session_local_option(): Session_local_optionContext | undefined {
		return this.tryGetRuleContext(0, Session_local_optionContext);
	}
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCAL, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XML, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTION, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOCUMENT, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONTENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_set_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSet_action) {
			listener.enterSet_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSet_action) {
			listener.exitSet_action(this);
		}
	}
}


export class Session_local_optionContext extends ParserRuleContext {
	public _config_param: IdentifierContext;
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AUTHORIZATION, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ZONE, 0); }
	public signed_numerical_literal(): Signed_numerical_literalContext | undefined {
		return this.tryGetRuleContext(0, Signed_numerical_literalContext);
	}
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCAL, 0); }
	public set_statement_value(): Set_statement_valueContext | undefined {
		return this.tryGetRuleContext(0, Set_statement_valueContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_session_local_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSession_local_option) {
			listener.enterSession_local_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSession_local_option) {
			listener.exitSession_local_option(this);
		}
	}
}


export class Set_statement_valueContext extends ParserRuleContext {
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_set_statement_value; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSet_statement_value) {
			listener.enterSet_statement_value(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSet_statement_value) {
			listener.exitSet_statement_value(this);
		}
	}
}


export class Create_rewrite_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _event: Token;
	public _table_name: Schema_qualified_nameContext;
	public RULE(): TerminalNode { return this.getToken(PLpgSQLParser.RULE, 0); }
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public DO(): TerminalNode { return this.getToken(PLpgSQLParser.DO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSERT, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELETE, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTHING, 0); }
	public rewrite_command(): Rewrite_commandContext[];
	public rewrite_command(i: number): Rewrite_commandContext;
	public rewrite_command(i?: number): Rewrite_commandContext | Rewrite_commandContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rewrite_commandContext);
		} else {
			return this.getRuleContext(i, Rewrite_commandContext);
		}
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public ALSO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALSO, 0); }
	public INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSTEAD, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public SEMI_COLON(): TerminalNode[];
	public SEMI_COLON(i: number): TerminalNode;
	public SEMI_COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SEMI_COLON);
		} else {
			return this.getToken(PLpgSQLParser.SEMI_COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_rewrite_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_rewrite_statement) {
			listener.enterCreate_rewrite_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_rewrite_statement) {
			listener.exitCreate_rewrite_statement(this);
		}
	}
}


export class Rewrite_commandContext extends ParserRuleContext {
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public insert_stmt_for_psql(): Insert_stmt_for_psqlContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmt_for_psqlContext);
	}
	public update_stmt_for_psql(): Update_stmt_for_psqlContext | undefined {
		return this.tryGetRuleContext(0, Update_stmt_for_psqlContext);
	}
	public delete_stmt_for_psql(): Delete_stmt_for_psqlContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmt_for_psqlContext);
	}
	public notify_stmt(): Notify_stmtContext | undefined {
		return this.tryGetRuleContext(0, Notify_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_rewrite_command; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRewrite_command) {
			listener.enterRewrite_command(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRewrite_command) {
			listener.exitRewrite_command(this);
		}
	}
}


export class Create_trigger_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _before_true: Token;
	public _insert_true: Token;
	public _delete_true: Token;
	public _truncate_true: Token;
	public _update_true: Token;
	public _table_name: Schema_qualified_nameContext;
	public _referenced_table_name: Schema_qualified_nameContext;
	public _for_each_true: Token;
	public _func_name: Function_callContext;
	public TRIGGER(): TerminalNode { return this.getToken(PLpgSQLParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public EXECUTE(): TerminalNode { return this.getToken(PLpgSQLParser.EXECUTE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public function_call(): Function_callContext {
		return this.getRuleContext(0, Function_callContext);
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AFTER, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BEFORE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public table_deferrable(): Table_deferrableContext | undefined {
		return this.tryGetRuleContext(0, Table_deferrableContext);
	}
	public table_initialy_immed(): Table_initialy_immedContext | undefined {
		return this.tryGetRuleContext(0, Table_initialy_immedContext);
	}
	public REFERENCING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFERENCING, 0); }
	public trigger_referencing(): Trigger_referencingContext[];
	public trigger_referencing(i: number): Trigger_referencingContext;
	public trigger_referencing(i?: number): Trigger_referencingContext | Trigger_referencingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Trigger_referencingContext);
		} else {
			return this.getRuleContext(i, Trigger_referencingContext);
		}
	}
	public when_trigger(): When_triggerContext | undefined {
		return this.tryGetRuleContext(0, When_triggerContext);
	}
	public INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSTEAD, 0); }
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.OF);
		} else {
			return this.getToken(PLpgSQLParser.OF, i);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	public STATEMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATEMENT, 0); }
	public UPDATE(): TerminalNode[];
	public UPDATE(i: number): TerminalNode;
	public UPDATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.UPDATE);
		} else {
			return this.getToken(PLpgSQLParser.UPDATE, i);
		}
	}
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.OR);
		} else {
			return this.getToken(PLpgSQLParser.OR, i);
		}
	}
	public EACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EACH, 0); }
	public INSERT(): TerminalNode[];
	public INSERT(i: number): TerminalNode;
	public INSERT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.INSERT);
		} else {
			return this.getToken(PLpgSQLParser.INSERT, i);
		}
	}
	public DELETE(): TerminalNode[];
	public DELETE(i: number): TerminalNode;
	public DELETE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DELETE);
		} else {
			return this.getToken(PLpgSQLParser.DELETE, i);
		}
	}
	public TRUNCATE(): TerminalNode[];
	public TRUNCATE(i: number): TerminalNode;
	public TRUNCATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.TRUNCATE);
		} else {
			return this.getToken(PLpgSQLParser.TRUNCATE, i);
		}
	}
	public identifier_list(): Identifier_listContext[];
	public identifier_list(i: number): Identifier_listContext;
	public identifier_list(i?: number): Identifier_listContext | Identifier_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_listContext);
		} else {
			return this.getRuleContext(i, Identifier_listContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_trigger_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_trigger_statement) {
			listener.enterCreate_trigger_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_trigger_statement) {
			listener.exitCreate_trigger_statement(this);
		}
	}
}


export class Trigger_referencingContext extends ParserRuleContext {
	public TABLE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public OLD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OLD, 0); }
	public NEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEW, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_trigger_referencing; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTrigger_referencing) {
			listener.enterTrigger_referencing(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTrigger_referencing) {
			listener.exitTrigger_referencing(this);
		}
	}
}


export class When_triggerContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(PLpgSQLParser.WHEN, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_when_trigger; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterWhen_trigger) {
			listener.enterWhen_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitWhen_trigger) {
			listener.exitWhen_trigger(this);
		}
	}
}


export class Rule_commonContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public rule_member_object(): Rule_member_objectContext | undefined {
		return this.tryGetRuleContext(0, Rule_member_objectContext);
	}
	public roles_names(): Roles_namesContext | undefined {
		return this.tryGetRuleContext(0, Roles_namesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.GRANT);
		} else {
			return this.getToken(PLpgSQLParser.GRANT, i);
		}
	}
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REVOKE, 0); }
	public permissions(): PermissionsContext | undefined {
		return this.tryGetRuleContext(0, PermissionsContext);
	}
	public columns_permissions(): Columns_permissionsContext | undefined {
		return this.tryGetRuleContext(0, Columns_permissionsContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTION, 0); }
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	public grant_option_for(): Grant_option_forContext | undefined {
		return this.tryGetRuleContext(0, Grant_option_forContext);
	}
	public other_rules(): Other_rulesContext | undefined {
		return this.tryGetRuleContext(0, Other_rulesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_rule_common; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRule_common) {
			listener.enterRule_common(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRule_common) {
			listener.exitRule_common(this);
		}
	}
}


export class Rule_member_objectContext extends ParserRuleContext {
	public _table_names: Names_referencesContext;
	public _function_parameters: Function_parametersContext;
	public _func_name: Function_parametersContext[] = [];
	public _schema_names: Names_referencesContext;
	public names_references(): Names_referencesContext | undefined {
		return this.tryGetRuleContext(0, Names_referencesContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRAPPER, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERVER, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINE, 0); }
	public function_parameters(): Function_parametersContext[];
	public function_parameters(i: number): Function_parametersContext;
	public function_parameters(i?: number): Function_parametersContext | Function_parametersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_parametersContext);
		} else {
			return this.getRuleContext(i, Function_parametersContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LARGE, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OBJECT, 0); }
	public NUMBER_LITERAL(): TerminalNode[];
	public NUMBER_LITERAL(i: number): TerminalNode;
	public NUMBER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NUMBER_LITERAL);
		} else {
			return this.getToken(PLpgSQLParser.NUMBER_LITERAL, i);
		}
	}
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESPACE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLES, 0); }
	public SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCES, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTIONS, 0); }
	public PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURES, 0); }
	public ROUTINES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_rule_member_object; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRule_member_object) {
			listener.enterRule_member_object(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRule_member_object) {
			listener.exitRule_member_object(this);
		}
	}
}


export class Columns_permissionsContext extends ParserRuleContext {
	public table_column_privileges(): Table_column_privilegesContext[];
	public table_column_privileges(i: number): Table_column_privilegesContext;
	public table_column_privileges(i?: number): Table_column_privilegesContext | Table_column_privilegesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_column_privilegesContext);
		} else {
			return this.getRuleContext(i, Table_column_privilegesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_columns_permissions; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterColumns_permissions) {
			listener.enterColumns_permissions(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitColumns_permissions) {
			listener.exitColumns_permissions(this);
		}
	}
}


export class Table_column_privilegesContext extends ParserRuleContext {
	public table_column_privilege(): Table_column_privilegeContext {
		return this.getRuleContext(0, Table_column_privilegeContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_column_privileges; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_column_privileges) {
			listener.enterTable_column_privileges(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_column_privileges) {
			listener.exitTable_column_privileges(this);
		}
	}
}


export class PermissionsContext extends ParserRuleContext {
	public permission(): PermissionContext[];
	public permission(i: number): PermissionContext;
	public permission(i?: number): PermissionContext | PermissionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PermissionContext);
		} else {
			return this.getRuleContext(i, PermissionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_permissions; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPermissions) {
			listener.enterPermissions(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPermissions) {
			listener.exitPermissions(this);
		}
	}
}


export class PermissionContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIVILEGES, 0); }
	public CONNECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONNECT, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELETE, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXECUTE, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFERENCES, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUNCATE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_permission; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPermission) {
			listener.enterPermission(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPermission) {
			listener.exitPermission(this);
		}
	}
}


export class Other_rulesContext extends ParserRuleContext {
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GRANT, 0); }
	public names_references(): Names_referencesContext[];
	public names_references(i: number): Names_referencesContext;
	public names_references(i?: number): Names_referencesContext | Names_referencesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Names_referencesContext);
		} else {
			return this.getRuleContext(i, Names_referencesContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADMIN, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTION, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REVOKE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_other_rules; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOther_rules) {
			listener.enterOther_rules(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOther_rules) {
			listener.exitOther_rules(this);
		}
	}
}


export class Grant_to_ruleContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public roles_names(): Roles_namesContext {
		return this.getRuleContext(0, Roles_namesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GRANT, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_grant_to_rule; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterGrant_to_rule) {
			listener.enterGrant_to_rule(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitGrant_to_rule) {
			listener.exitGrant_to_rule(this);
		}
	}
}


export class Revoke_from_cascade_restrictContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public roles_names(): Roles_namesContext {
		return this.getRuleContext(0, Roles_namesContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_revoke_from_cascade_restrict; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRevoke_from_cascade_restrict) {
			listener.enterRevoke_from_cascade_restrict(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRevoke_from_cascade_restrict) {
			listener.exitRevoke_from_cascade_restrict(this);
		}
	}
}


export class Roles_namesContext extends ParserRuleContext {
	public role_name_with_group(): Role_name_with_groupContext[];
	public role_name_with_group(i: number): Role_name_with_groupContext;
	public role_name_with_group(i?: number): Role_name_with_groupContext | Role_name_with_groupContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Role_name_with_groupContext);
		} else {
			return this.getRuleContext(i, Role_name_with_groupContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_roles_names; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRoles_names) {
			listener.enterRoles_names(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRoles_names) {
			listener.exitRoles_names(this);
		}
	}
}


export class Role_name_with_groupContext extends ParserRuleContext {
	public user_name(): User_nameContext {
		return this.getRuleContext(0, User_nameContext);
	}
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_role_name_with_group; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRole_name_with_group) {
			listener.enterRole_name_with_group(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRole_name_with_group) {
			listener.exitRole_name_with_group(this);
		}
	}
}


export class Comment_on_statementContext extends ParserRuleContext {
	public COMMENT(): TerminalNode { return this.getToken(PLpgSQLParser.COMMENT, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public comment_member_object(): Comment_member_objectContext {
		return this.getRuleContext(0, Comment_member_objectContext);
	}
	public IS(): TerminalNode { return this.getToken(PLpgSQLParser.IS, 0); }
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_comment_on_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterComment_on_statement) {
			listener.enterComment_on_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitComment_on_statement) {
			listener.exitComment_on_statement(this);
		}
	}
}


export class Security_labelContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(PLpgSQLParser.SECURITY, 0); }
	public LABEL(): TerminalNode { return this.getToken(PLpgSQLParser.LABEL, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public label_member_object(): Label_member_objectContext {
		return this.getRuleContext(0, Label_member_objectContext);
	}
	public IS(): TerminalNode { return this.getToken(PLpgSQLParser.IS, 0); }
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_security_label; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSecurity_label) {
			listener.enterSecurity_label(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSecurity_label) {
			listener.exitSecurity_label(this);
		}
	}
}


export class Comment_member_objectContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _source: Data_typeContext;
	public _target: Data_typeContext;
	public _table_name: Schema_qualified_nameContext;
	public _index_method: IdentifierContext;
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACCESS, 0); }
	public METHOD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.METHOD, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public function_args(): Function_argsContext | undefined {
		return this.tryGetRuleContext(0, Function_argsContext);
	}
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AGGREGATE, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CAST, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATION, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONVERSION, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENSION, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EVENT, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRAPPER, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LARGE, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OBJECT, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public target_operator(): Target_operatorContext | undefined {
		return this.tryGetRuleContext(0, Target_operatorContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public FAMILY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FAMILY, 0); }
	public CLASS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLASS, 0); }
	public POLICY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.POLICY, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PUBLICATION, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public RULE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RULE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERVER, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATISTICS, 0); }
	public SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBSCRIPTION, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESPACE, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFIGURATION, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DICTIONARY, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARSER, 0); }
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPLATE, 0); }
	public TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSFORM, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_comment_member_object; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterComment_member_object) {
			listener.enterComment_member_object(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitComment_member_object) {
			listener.exitComment_member_object(this);
		}
	}
}


export class Label_member_objectContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public function_args(): Function_argsContext | undefined {
		return this.tryGetRuleContext(0, Function_argsContext);
	}
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AGGREGATE, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINE, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EVENT, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LARGE, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OBJECT, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PUBLICATION, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBSCRIPTION, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESPACE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_label_member_object; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLabel_member_object) {
			listener.enterLabel_member_object(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLabel_member_object) {
			listener.exitLabel_member_object(this);
		}
	}
}


export class Create_function_statementContext extends ParserRuleContext {
	public _rettype_data: Data_typeContext;
	public _ret_table: Function_ret_tableContext;
	public function_parameters(): Function_parametersContext {
		return this.getRuleContext(0, Function_parametersContext);
	}
	public create_funct_params(): Create_funct_paramsContext {
		return this.getRuleContext(0, Create_funct_paramsContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNS, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public function_ret_table(): Function_ret_tableContext | undefined {
		return this.tryGetRuleContext(0, Function_ret_tableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_function_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_function_statement) {
			listener.enterCreate_function_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_function_statement) {
			listener.exitCreate_function_statement(this);
		}
	}
}


export class Create_funct_paramsContext extends ParserRuleContext {
	public function_actions_common(): Function_actions_commonContext[];
	public function_actions_common(i: number): Function_actions_commonContext;
	public function_actions_common(i?: number): Function_actions_commonContext | Function_actions_commonContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_actions_commonContext);
		} else {
			return this.getRuleContext(i, Function_actions_commonContext);
		}
	}
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_funct_params; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_funct_params) {
			listener.enterCreate_funct_params(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_funct_params) {
			listener.exitCreate_funct_params(this);
		}
	}
}


export class Transform_for_typeContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public TYPE(): TerminalNode { return this.getToken(PLpgSQLParser.TYPE, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_transform_for_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTransform_for_type) {
			listener.enterTransform_for_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTransform_for_type) {
			listener.exitTransform_for_type(this);
		}
	}
}


export class Function_ret_tableContext extends ParserRuleContext {
	public TABLE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLE, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public function_column_name_type(): Function_column_name_typeContext[];
	public function_column_name_type(i: number): Function_column_name_typeContext;
	public function_column_name_type(i?: number): Function_column_name_typeContext | Function_column_name_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_column_name_typeContext);
		} else {
			return this.getRuleContext(i, Function_column_name_typeContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_ret_table; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_ret_table) {
			listener.enterFunction_ret_table(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_ret_table) {
			listener.exitFunction_ret_table(this);
		}
	}
}


export class Function_column_name_typeContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_column_name_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_column_name_type) {
			listener.enterFunction_column_name_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_column_name_type) {
			listener.exitFunction_column_name_type(this);
		}
	}
}


export class Function_parametersContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public function_args(): Function_argsContext {
		return this.getRuleContext(0, Function_argsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_parameters; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_parameters) {
			listener.enterFunction_parameters(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_parameters) {
			listener.exitFunction_parameters(this);
		}
	}
}


export class Function_argsContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public function_arguments(): Function_argumentsContext[];
	public function_arguments(i: number): Function_argumentsContext;
	public function_arguments(i?: number): Function_argumentsContext | Function_argumentsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_argumentsContext);
		} else {
			return this.getRuleContext(i, Function_argumentsContext);
		}
	}
	public agg_order(): Agg_orderContext | undefined {
		return this.tryGetRuleContext(0, Agg_orderContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_args; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_args) {
			listener.enterFunction_args(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_args) {
			listener.exitFunction_args(this);
		}
	}
}


export class Agg_orderContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(PLpgSQLParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(PLpgSQLParser.BY, 0); }
	public function_arguments(): Function_argumentsContext[];
	public function_arguments(i: number): Function_argumentsContext;
	public function_arguments(i?: number): Function_argumentsContext | Function_argumentsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_argumentsContext);
		} else {
			return this.getRuleContext(i, Function_argumentsContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_agg_order; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAgg_order) {
			listener.enterAgg_order(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAgg_order) {
			listener.exitAgg_order(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public BeginDollarStringConstant(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BeginDollarStringConstant, 0); }
	public EndDollarStringConstant(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EndDollarStringConstant, 0); }
	public Text_between_Dollar(): TerminalNode[];
	public Text_between_Dollar(i: number): TerminalNode;
	public Text_between_Dollar(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.Text_between_Dollar);
		} else {
			return this.getToken(PLpgSQLParser.Text_between_Dollar, i);
		}
	}
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_character_string; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
}


export class Function_argumentsContext extends ParserRuleContext {
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public argmode(): ArgmodeContext | undefined {
		return this.tryGetRuleContext(0, ArgmodeContext);
	}
	public identifier_nontype(): Identifier_nontypeContext | undefined {
		return this.tryGetRuleContext(0, Identifier_nontypeContext);
	}
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_arguments; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_arguments) {
			listener.enterFunction_arguments(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_arguments) {
			listener.exitFunction_arguments(this);
		}
	}
}


export class ArgmodeContext extends ParserRuleContext {
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INOUT, 0); }
	public VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARIADIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_argmode; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterArgmode) {
			listener.enterArgmode(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitArgmode) {
			listener.exitArgmode(this);
		}
	}
}


export class Create_sequence_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public SEQUENCE(): TerminalNode { return this.getToken(PLpgSQLParser.SEQUENCE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public sequence_body(): Sequence_bodyContext[];
	public sequence_body(i: number): Sequence_bodyContext;
	public sequence_body(i?: number): Sequence_bodyContext | Sequence_bodyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sequence_bodyContext);
		} else {
			return this.getRuleContext(i, Sequence_bodyContext);
		}
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_sequence_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_sequence_statement) {
			listener.enterCreate_sequence_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_sequence_statement) {
			listener.exitCreate_sequence_statement(this);
		}
	}
}


export class Sequence_bodyContext extends ParserRuleContext {
	public _type: Token;
	public _name: Schema_qualified_nameContext;
	public _incr: Signed_numerical_literalContext;
	public _minval: Signed_numerical_literalContext;
	public _maxval: Signed_numerical_literalContext;
	public _start_val: Signed_numerical_literalContext;
	public _cache_val: Signed_numerical_literalContext;
	public _cycle_true: Token;
	public _cycle_val: Token;
	public _col_name: Schema_qualified_nameContext;
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SMALLINT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTEGER, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BIGINT, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NAME, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INCREMENT, 0); }
	public signed_numerical_literal(): Signed_numerical_literalContext | undefined {
		return this.tryGetRuleContext(0, Signed_numerical_literalContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINVALUE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MAXVALUE, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.START, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CACHE, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CYCLE, 0); }
	public OWNED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OWNED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_sequence_body; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSequence_body) {
			listener.enterSequence_body(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSequence_body) {
			listener.exitSequence_body(this);
		}
	}
}


export class Signed_number_literalContext extends ParserRuleContext {
	public NUMBER_LITERAL(): TerminalNode { return this.getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public sign(): SignContext | undefined {
		return this.tryGetRuleContext(0, SignContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_signed_number_literal; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSigned_number_literal) {
			listener.enterSigned_number_literal(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSigned_number_literal) {
			listener.exitSigned_number_literal(this);
		}
	}
}


export class Signed_numerical_literalContext extends ParserRuleContext {
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext {
		return this.getRuleContext(0, Unsigned_numeric_literalContext);
	}
	public sign(): SignContext | undefined {
		return this.tryGetRuleContext(0, SignContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_signed_numerical_literal; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSigned_numerical_literal) {
			listener.enterSigned_numerical_literal(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSigned_numerical_literal) {
			listener.exitSigned_numerical_literal(this);
		}
	}
}


export class SignContext extends ParserRuleContext {
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_sign; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSign) {
			listener.enterSign(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSign) {
			listener.exitSign(this);
		}
	}
}


export class Create_schema_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public SCHEMA(): TerminalNode { return this.getToken(PLpgSQLParser.SCHEMA, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AUTHORIZATION, 0); }
	public user_name(): User_nameContext | undefined {
		return this.tryGetRuleContext(0, User_nameContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_schema_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_schema_statement) {
			listener.enterCreate_schema_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_schema_statement) {
			listener.exitCreate_schema_statement(this);
		}
	}
}


export class Create_policy_statementContext extends ParserRuleContext {
	public _event: Token;
	public _using: VexContext;
	public _check: VexContext;
	public POLICY(): TerminalNode { return this.getToken(PLpgSQLParser.POLICY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public user_name(): User_nameContext[];
	public user_name(i: number): User_nameContext;
	public user_name(i?: number): User_nameContext | User_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_nameContext);
		} else {
			return this.getRuleContext(i, User_nameContext);
		}
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECK, 0); }
	public PERMISSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PERMISSIVE, 0); }
	public RESTRICTIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICTIVE, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELETE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_policy_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_policy_statement) {
			listener.enterCreate_policy_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_policy_statement) {
			listener.exitCreate_policy_statement(this);
		}
	}
}


export class Alter_policy_statementContext extends ParserRuleContext {
	public POLICY(): TerminalNode { return this.getToken(PLpgSQLParser.POLICY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public user_name(): User_nameContext[];
	public user_name(i: number): User_nameContext;
	public user_name(i?: number): User_nameContext | User_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_nameContext);
		} else {
			return this.getRuleContext(i, User_nameContext);
		}
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECK, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_policy_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_policy_statement) {
			listener.enterAlter_policy_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_policy_statement) {
			listener.exitAlter_policy_statement(this);
		}
	}
}


export class Drop_policy_statementContext extends ParserRuleContext {
	public POLICY(): TerminalNode { return this.getToken(PLpgSQLParser.POLICY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_policy_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_policy_statement) {
			listener.enterDrop_policy_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_policy_statement) {
			listener.exitDrop_policy_statement(this);
		}
	}
}


export class Create_subscription_statementContext extends ParserRuleContext {
	public SUBSCRIPTION(): TerminalNode { return this.getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public CONNECTION(): TerminalNode { return this.getToken(PLpgSQLParser.CONNECTION, 0); }
	public Character_String_Literal(): TerminalNode { return this.getToken(PLpgSQLParser.Character_String_Literal, 0); }
	public PUBLICATION(): TerminalNode { return this.getToken(PLpgSQLParser.PUBLICATION, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_subscription_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_subscription_statement) {
			listener.enterCreate_subscription_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_subscription_statement) {
			listener.exitCreate_subscription_statement(this);
		}
	}
}


export class Alter_subscription_statementContext extends ParserRuleContext {
	public SUBSCRIPTION(): TerminalNode { return this.getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public alter_subscription_action(): Alter_subscription_actionContext {
		return this.getRuleContext(0, Alter_subscription_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_subscription_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_subscription_statement) {
			listener.enterAlter_subscription_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_subscription_statement) {
			listener.exitAlter_subscription_statement(this);
		}
	}
}


export class Alter_subscription_actionContext extends ParserRuleContext {
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONNECTION, 0); }
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PUBLICATION, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFRESH, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISABLE, 0); }
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_subscription_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_subscription_action) {
			listener.enterAlter_subscription_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_subscription_action) {
			listener.exitAlter_subscription_action(this);
		}
	}
}


export class Create_cast_statementContext extends ParserRuleContext {
	public _source: Data_typeContext;
	public _target: Data_typeContext;
	public _func_name: Schema_qualified_nameContext;
	public CAST(): TerminalNode { return this.getToken(PLpgSQLParser.CAST, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.AS);
		} else {
			return this.getToken(PLpgSQLParser.AS, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public function_args(): Function_argsContext | undefined {
		return this.tryGetRuleContext(0, Function_argsContext);
	}
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHOUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INOUT, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public ASSIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASSIGNMENT, 0); }
	public IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMPLICIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_cast_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_cast_statement) {
			listener.enterCreate_cast_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_cast_statement) {
			listener.exitCreate_cast_statement(this);
		}
	}
}


export class Drop_cast_statementContext extends ParserRuleContext {
	public _source: Data_typeContext;
	public _target: Data_typeContext;
	public CAST(): TerminalNode { return this.getToken(PLpgSQLParser.CAST, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_cast_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_cast_statement) {
			listener.enterDrop_cast_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_cast_statement) {
			listener.exitDrop_cast_statement(this);
		}
	}
}


export class Create_operator_family_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public FAMILY(): TerminalNode { return this.getToken(PLpgSQLParser.FAMILY, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_operator_family_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_operator_family_statement) {
			listener.enterCreate_operator_family_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_operator_family_statement) {
			listener.exitCreate_operator_family_statement(this);
		}
	}
}


export class Alter_operator_family_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public FAMILY(): TerminalNode { return this.getToken(PLpgSQLParser.FAMILY, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public operator_family_action(): Operator_family_actionContext {
		return this.getRuleContext(0, Operator_family_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_operator_family_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_operator_family_statement) {
			listener.enterAlter_operator_family_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_operator_family_statement) {
			listener.exitAlter_operator_family_statement(this);
		}
	}
}


export class Operator_family_actionContext extends ParserRuleContext {
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public add_operator_to_family(): Add_operator_to_familyContext[];
	public add_operator_to_family(i: number): Add_operator_to_familyContext;
	public add_operator_to_family(i?: number): Add_operator_to_familyContext | Add_operator_to_familyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_operator_to_familyContext);
		} else {
			return this.getRuleContext(i, Add_operator_to_familyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public drop_operator_from_family(): Drop_operator_from_familyContext[];
	public drop_operator_from_family(i: number): Drop_operator_from_familyContext;
	public drop_operator_from_family(i?: number): Drop_operator_from_familyContext | Drop_operator_from_familyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Drop_operator_from_familyContext);
		} else {
			return this.getRuleContext(i, Drop_operator_from_familyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_operator_family_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOperator_family_action) {
			listener.enterOperator_family_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOperator_family_action) {
			listener.exitOperator_family_action(this);
		}
	}
}


export class Add_operator_to_familyContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext {
		return this.getRuleContext(0, Unsigned_numeric_literalContext);
	}
	public target_operator(): Target_operatorContext | undefined {
		return this.tryGetRuleContext(0, Target_operatorContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NONE);
		} else {
			return this.getToken(PLpgSQLParser.NONE, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_add_operator_to_family; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAdd_operator_to_family) {
			listener.enterAdd_operator_to_family(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAdd_operator_to_family) {
			listener.exitAdd_operator_to_family(this);
		}
	}
}


export class Drop_operator_from_familyContext extends ParserRuleContext {
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext {
		return this.getRuleContext(0, Unsigned_numeric_literalContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NONE);
		} else {
			return this.getToken(PLpgSQLParser.NONE, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_operator_from_family; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_operator_from_family) {
			listener.enterDrop_operator_from_family(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_operator_from_family) {
			listener.exitDrop_operator_from_family(this);
		}
	}
}


export class Drop_operator_family_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public FAMILY(): TerminalNode { return this.getToken(PLpgSQLParser.FAMILY, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_operator_family_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_operator_family_statement) {
			listener.enterDrop_operator_family_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_operator_family_statement) {
			listener.exitDrop_operator_family_statement(this);
		}
	}
}


export class Create_operator_class_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public CLASS(): TerminalNode { return this.getToken(PLpgSQLParser.CLASS, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public TYPE(): TerminalNode { return this.getToken(PLpgSQLParser.TYPE, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public create_operator_class_option(): Create_operator_class_optionContext[];
	public create_operator_class_option(i: number): Create_operator_class_optionContext;
	public create_operator_class_option(i?: number): Create_operator_class_optionContext | Create_operator_class_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_operator_class_optionContext);
		} else {
			return this.getRuleContext(i, Create_operator_class_optionContext);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public FAMILY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FAMILY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_operator_class_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_operator_class_statement) {
			listener.enterCreate_operator_class_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_operator_class_statement) {
			listener.exitCreate_operator_class_statement(this);
		}
	}
}


export class Create_operator_class_optionContext extends ParserRuleContext {
	public _name: Operator_nameContext;
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Unsigned_numeric_literalContext);
	}
	public operator_name(): Operator_nameContext | undefined {
		return this.tryGetRuleContext(0, Operator_nameContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMA, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NONE);
		} else {
			return this.getToken(PLpgSQLParser.NONE, i);
		}
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STORAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_operator_class_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_operator_class_option) {
			listener.enterCreate_operator_class_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_operator_class_option) {
			listener.exitCreate_operator_class_option(this);
		}
	}
}


export class Alter_operator_class_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public CLASS(): TerminalNode { return this.getToken(PLpgSQLParser.CLASS, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_operator_class_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_operator_class_statement) {
			listener.enterAlter_operator_class_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_operator_class_statement) {
			listener.exitAlter_operator_class_statement(this);
		}
	}
}


export class Drop_operator_class_statementContext extends ParserRuleContext {
	public OPERATOR(): TerminalNode { return this.getToken(PLpgSQLParser.OPERATOR, 0); }
	public CLASS(): TerminalNode { return this.getToken(PLpgSQLParser.CLASS, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_operator_class_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_operator_class_statement) {
			listener.enterDrop_operator_class_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_operator_class_statement) {
			listener.exitDrop_operator_class_statement(this);
		}
	}
}


export class Create_conversion_statementContext extends ParserRuleContext {
	public CONVERSION(): TerminalNode { return this.getToken(PLpgSQLParser.CONVERSION, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public FOR(): TerminalNode { return this.getToken(PLpgSQLParser.FOR, 0); }
	public Character_String_Literal(): TerminalNode[];
	public Character_String_Literal(i: number): TerminalNode;
	public Character_String_Literal(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.Character_String_Literal);
		} else {
			return this.getToken(PLpgSQLParser.Character_String_Literal, i);
		}
	}
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_conversion_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_conversion_statement) {
			listener.enterCreate_conversion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_conversion_statement) {
			listener.exitCreate_conversion_statement(this);
		}
	}
}


export class Alter_conversion_statementContext extends ParserRuleContext {
	public CONVERSION(): TerminalNode { return this.getToken(PLpgSQLParser.CONVERSION, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public set_schema(): Set_schemaContext | undefined {
		return this.tryGetRuleContext(0, Set_schemaContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_conversion_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_conversion_statement) {
			listener.enterAlter_conversion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_conversion_statement) {
			listener.exitAlter_conversion_statement(this);
		}
	}
}


export class Create_publication_statementContext extends ParserRuleContext {
	public PUBLICATION(): TerminalNode { return this.getToken(PLpgSQLParser.PUBLICATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public only_table_multiply(): Only_table_multiplyContext[];
	public only_table_multiply(i: number): Only_table_multiplyContext;
	public only_table_multiply(i?: number): Only_table_multiplyContext | Only_table_multiplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Only_table_multiplyContext);
		} else {
			return this.getRuleContext(i, Only_table_multiplyContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLES, 0); }
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_publication_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_publication_statement) {
			listener.enterCreate_publication_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_publication_statement) {
			listener.exitCreate_publication_statement(this);
		}
	}
}


export class Alter_publication_statementContext extends ParserRuleContext {
	public PUBLICATION(): TerminalNode { return this.getToken(PLpgSQLParser.PUBLICATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public alter_publication_action(): Alter_publication_actionContext {
		return this.getRuleContext(0, Alter_publication_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_publication_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_publication_statement) {
			listener.enterAlter_publication_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_publication_statement) {
			listener.exitAlter_publication_statement(this);
		}
	}
}


export class Alter_publication_actionContext extends ParserRuleContext {
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public owner_to(): Owner_toContext | undefined {
		return this.tryGetRuleContext(0, Owner_toContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public only_table_multiply(): Only_table_multiplyContext[];
	public only_table_multiply(i: number): Only_table_multiplyContext;
	public only_table_multiply(i?: number): Only_table_multiplyContext | Only_table_multiplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Only_table_multiplyContext);
		} else {
			return this.getRuleContext(i, Only_table_multiplyContext);
		}
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_publication_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_publication_action) {
			listener.enterAlter_publication_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_publication_action) {
			listener.exitAlter_publication_action(this);
		}
	}
}


export class Only_table_multiplyContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_only_table_multiply; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOnly_table_multiply) {
			listener.enterOnly_table_multiply(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOnly_table_multiply) {
			listener.exitOnly_table_multiply(this);
		}
	}
}


export class Alter_trigger_statementContext extends ParserRuleContext {
	public TRIGGER(): TerminalNode { return this.getToken(PLpgSQLParser.TRIGGER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ON);
		} else {
			return this.getToken(PLpgSQLParser.ON, i);
		}
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public rename_to(): Rename_toContext | undefined {
		return this.tryGetRuleContext(0, Rename_toContext);
	}
	public DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEPENDS, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_trigger_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_trigger_statement) {
			listener.enterAlter_trigger_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_trigger_statement) {
			listener.exitAlter_trigger_statement(this);
		}
	}
}


export class Alter_rule_statementContext extends ParserRuleContext {
	public RULE(): TerminalNode { return this.getToken(PLpgSQLParser.RULE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public rename_to(): Rename_toContext {
		return this.getRuleContext(0, Rename_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alter_rule_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlter_rule_statement) {
			listener.enterAlter_rule_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlter_rule_statement) {
			listener.exitAlter_rule_statement(this);
		}
	}
}


export class Copy_statementContext extends ParserRuleContext {
	public copy_to_statement(): Copy_to_statementContext | undefined {
		return this.tryGetRuleContext(0, Copy_to_statementContext);
	}
	public copy_from_statement(): Copy_from_statementContext | undefined {
		return this.tryGetRuleContext(0, Copy_from_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_copy_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCopy_statement) {
			listener.enterCopy_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCopy_statement) {
			listener.exitCopy_statement(this);
		}
	}
}


export class Copy_from_statementContext extends ParserRuleContext {
	public COPY(): TerminalNode { return this.getToken(PLpgSQLParser.COPY, 0); }
	public table_cols(): Table_colsContext {
		return this.getRuleContext(0, Table_colsContext);
	}
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public STDIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STDIN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROGRAM, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public copy_option_list(): Copy_option_listContext | undefined {
		return this.tryGetRuleContext(0, Copy_option_listContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_copy_from_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCopy_from_statement) {
			listener.enterCopy_from_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCopy_from_statement) {
			listener.exitCopy_from_statement(this);
		}
	}
}


export class Copy_to_statementContext extends ParserRuleContext {
	public COPY(): TerminalNode { return this.getToken(PLpgSQLParser.COPY, 0); }
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public table_cols(): Table_colsContext | undefined {
		return this.tryGetRuleContext(0, Table_colsContext);
	}
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public data_statement(): Data_statementContext | undefined {
		return this.tryGetRuleContext(0, Data_statementContext);
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public STDOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STDOUT, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROGRAM, 0); }
	public copy_option_list(): Copy_option_listContext | undefined {
		return this.tryGetRuleContext(0, Copy_option_listContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_copy_to_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCopy_to_statement) {
			listener.enterCopy_to_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCopy_to_statement) {
			listener.exitCopy_to_statement(this);
		}
	}
}


export class Copy_option_listContext extends ParserRuleContext {
	public copy_option(): Copy_optionContext[];
	public copy_option(i: number): Copy_optionContext;
	public copy_option(i?: number): Copy_optionContext | Copy_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_optionContext);
		} else {
			return this.getRuleContext(i, Copy_optionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_copy_option_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCopy_option_list) {
			listener.enterCopy_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCopy_option_list) {
			listener.exitCopy_option_list(this);
		}
	}
}


export class Copy_optionContext extends ParserRuleContext {
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CSV, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BINARY, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORMAT, 0); }
	public OIDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OIDS, 0); }
	public truth_value(): Truth_valueContext | undefined {
		return this.tryGetRuleContext(0, Truth_valueContext);
	}
	public FREEZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FREEZE, 0); }
	public DELIMITER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELIMITER, 0); }
	public Character_String_Literal(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Character_String_Literal, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public HEADER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HEADER, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.QUOTE, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ESCAPE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public FORCE_QUOTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE_QUOTE, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public FORCE_NOT_NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE_NOT_NULL, 0); }
	public FORCE_NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE_NULL, 0); }
	public ENCODING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENCODING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_copy_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCopy_option) {
			listener.enterCopy_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCopy_option) {
			listener.exitCopy_option(this);
		}
	}
}


export class Create_view_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public _column_names: View_columnsContext;
	public _v_query: Select_stmtContext;
	public VIEW(): TerminalNode { return this.getToken(PLpgSQLParser.VIEW, 0); }
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RECURSIVE, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WITH);
		} else {
			return this.getToken(PLpgSQLParser.WITH, i);
		}
	}
	public storage_parameter(): Storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameterContext);
	}
	public table_space(): Table_spaceContext | undefined {
		return this.tryGetRuleContext(0, Table_spaceContext);
	}
	public with_check_option(): With_check_optionContext | undefined {
		return this.tryGetRuleContext(0, With_check_optionContext);
	}
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public view_columns(): View_columnsContext | undefined {
		return this.tryGetRuleContext(0, View_columnsContext);
	}
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_view_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_view_statement) {
			listener.enterCreate_view_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_view_statement) {
			listener.exitCreate_view_statement(this);
		}
	}
}


export class If_existsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(PLpgSQLParser.IF, 0); }
	public EXISTS(): TerminalNode { return this.getToken(PLpgSQLParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_if_exists; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIf_exists) {
			listener.enterIf_exists(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIf_exists) {
			listener.exitIf_exists(this);
		}
	}
}


export class If_not_existsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(PLpgSQLParser.IF, 0); }
	public NOT(): TerminalNode { return this.getToken(PLpgSQLParser.NOT, 0); }
	public EXISTS(): TerminalNode { return this.getToken(PLpgSQLParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_if_not_exists; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIf_not_exists) {
			listener.enterIf_not_exists(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIf_not_exists) {
			listener.exitIf_not_exists(this);
		}
	}
}


export class View_columnsContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_view_columns; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterView_columns) {
			listener.enterView_columns(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitView_columns) {
			listener.exitView_columns(this);
		}
	}
}


export class With_check_optionContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(PLpgSQLParser.WITH, 0); }
	public CHECK(): TerminalNode { return this.getToken(PLpgSQLParser.CHECK, 0); }
	public OPTION(): TerminalNode { return this.getToken(PLpgSQLParser.OPTION, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_with_check_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterWith_check_option) {
			listener.enterWith_check_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitWith_check_option) {
			listener.exitWith_check_option(this);
		}
	}
}


export class Create_table_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public TABLE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLE, 0); }
	public define_table(): Define_tableContext {
		return this.getRuleContext(0, Define_tableContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLOGGED, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public partition_by(): Partition_byContext | undefined {
		return this.tryGetRuleContext(0, Partition_byContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public storage_parameter_oid(): Storage_parameter_oidContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameter_oidContext);
	}
	public on_commit(): On_commitContext | undefined {
		return this.tryGetRuleContext(0, On_commitContext);
	}
	public table_space(): Table_spaceContext | undefined {
		return this.tryGetRuleContext(0, Table_spaceContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GLOBAL, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_table_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_table_statement) {
			listener.enterCreate_table_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_table_statement) {
			listener.exitCreate_table_statement(this);
		}
	}
}


export class Create_table_as_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public TABLE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLE, 0); }
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXECUTE, 0); }
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLOGGED, 0); }
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	public names_in_parens(): Names_in_parensContext | undefined {
		return this.tryGetRuleContext(0, Names_in_parensContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public storage_parameter_oid(): Storage_parameter_oidContext | undefined {
		return this.tryGetRuleContext(0, Storage_parameter_oidContext);
	}
	public on_commit(): On_commitContext | undefined {
		return this.tryGetRuleContext(0, On_commitContext);
	}
	public table_space(): Table_spaceContext | undefined {
		return this.tryGetRuleContext(0, Table_spaceContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GLOBAL, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_table_as_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_table_as_statement) {
			listener.enterCreate_table_as_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_table_as_statement) {
			listener.exitCreate_table_as_statement(this);
		}
	}
}


export class Create_foreign_table_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public FOREIGN(): TerminalNode { return this.getToken(PLpgSQLParser.FOREIGN, 0); }
	public TABLE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLE, 0); }
	public define_server(): Define_serverContext {
		return this.getRuleContext(0, Define_serverContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public define_columns(): Define_columnsContext | undefined {
		return this.tryGetRuleContext(0, Define_columnsContext);
	}
	public define_partition(): Define_partitionContext | undefined {
		return this.tryGetRuleContext(0, Define_partitionContext);
	}
	public if_not_exists(): If_not_existsContext | undefined {
		return this.tryGetRuleContext(0, If_not_existsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_create_foreign_table_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCreate_foreign_table_statement) {
			listener.enterCreate_foreign_table_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCreate_foreign_table_statement) {
			listener.exitCreate_foreign_table_statement(this);
		}
	}
}


export class Define_tableContext extends ParserRuleContext {
	public define_columns(): Define_columnsContext | undefined {
		return this.tryGetRuleContext(0, Define_columnsContext);
	}
	public define_type(): Define_typeContext | undefined {
		return this.tryGetRuleContext(0, Define_typeContext);
	}
	public define_partition(): Define_partitionContext | undefined {
		return this.tryGetRuleContext(0, Define_partitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_define_table; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDefine_table) {
			listener.enterDefine_table(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDefine_table) {
			listener.exitDefine_table(this);
		}
	}
}


export class Define_partitionContext extends ParserRuleContext {
	public _parent_table: Schema_qualified_nameContext;
	public PARTITION(): TerminalNode { return this.getToken(PLpgSQLParser.PARTITION, 0); }
	public OF(): TerminalNode { return this.getToken(PLpgSQLParser.OF, 0); }
	public for_values_bound(): For_values_boundContext {
		return this.getRuleContext(0, For_values_boundContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public list_of_type_column_def(): List_of_type_column_defContext | undefined {
		return this.tryGetRuleContext(0, List_of_type_column_defContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_define_partition; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDefine_partition) {
			listener.enterDefine_partition(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDefine_partition) {
			listener.exitDefine_partition(this);
		}
	}
}


export class For_values_boundContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALUES, 0); }
	public partition_bound_spec(): Partition_bound_specContext | undefined {
		return this.tryGetRuleContext(0, Partition_bound_specContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_for_values_bound; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFor_values_bound) {
			listener.enterFor_values_bound(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFor_values_bound) {
			listener.exitFor_values_bound(this);
		}
	}
}


export class Partition_bound_specContext extends ParserRuleContext {
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public partition_bound_part(): Partition_bound_partContext[];
	public partition_bound_part(i: number): Partition_bound_partContext;
	public partition_bound_part(i?: number): Partition_bound_partContext | Partition_bound_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Partition_bound_partContext);
		} else {
			return this.getRuleContext(i, Partition_bound_partContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public MODULUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULUS, 0); }
	public NUMBER_LITERAL(): TerminalNode[];
	public NUMBER_LITERAL(i: number): TerminalNode;
	public NUMBER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NUMBER_LITERAL);
		} else {
			return this.getToken(PLpgSQLParser.NUMBER_LITERAL, i);
		}
	}
	public REMAINDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REMAINDER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_partition_bound_spec; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPartition_bound_spec) {
			listener.enterPartition_bound_spec(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPartition_bound_spec) {
			listener.exitPartition_bound_spec(this);
		}
	}
}


export class Partition_bound_partContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_partition_bound_part; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPartition_bound_part) {
			listener.enterPartition_bound_part(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPartition_bound_part) {
			listener.exitPartition_bound_part(this);
		}
	}
}


export class Define_columnsContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public table_column_def(): Table_column_defContext[];
	public table_column_def(i: number): Table_column_defContext;
	public table_column_def(i?: number): Table_column_defContext | Table_column_defContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_column_defContext);
		} else {
			return this.getRuleContext(i, Table_column_defContext);
		}
	}
	public INHERITS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INHERITS, 0); }
	public names_in_parens(): Names_in_parensContext | undefined {
		return this.tryGetRuleContext(0, Names_in_parensContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_define_columns; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDefine_columns) {
			listener.enterDefine_columns(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDefine_columns) {
			listener.exitDefine_columns(this);
		}
	}
}


export class Define_typeContext extends ParserRuleContext {
	public _type_name: Data_typeContext;
	public OF(): TerminalNode { return this.getToken(PLpgSQLParser.OF, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public list_of_type_column_def(): List_of_type_column_defContext | undefined {
		return this.tryGetRuleContext(0, List_of_type_column_defContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_define_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDefine_type) {
			listener.enterDefine_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDefine_type) {
			listener.exitDefine_type(this);
		}
	}
}


export class Partition_byContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(PLpgSQLParser.PARTITION, 0); }
	public BY(): TerminalNode { return this.getToken(PLpgSQLParser.BY, 0); }
	public partition_method(): Partition_methodContext {
		return this.getRuleContext(0, Partition_methodContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_partition_by; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPartition_by) {
			listener.enterPartition_by(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPartition_by) {
			listener.exitPartition_by(this);
		}
	}
}


export class Partition_methodContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public partition_column(): Partition_columnContext[];
	public partition_column(i: number): Partition_columnContext;
	public partition_column(i?: number): Partition_columnContext | Partition_columnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Partition_columnContext);
		} else {
			return this.getRuleContext(i, Partition_columnContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RANGE, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIST, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HASH, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_partition_method; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPartition_method) {
			listener.enterPartition_method(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPartition_method) {
			listener.exitPartition_method(this);
		}
	}
}


export class Partition_columnContext extends ParserRuleContext {
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_partition_column; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPartition_column) {
			listener.enterPartition_column(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPartition_column) {
			listener.exitPartition_column(this);
		}
	}
}


export class Define_serverContext extends ParserRuleContext {
	public SERVER(): TerminalNode { return this.getToken(PLpgSQLParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_define_server; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDefine_server) {
			listener.enterDefine_server(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDefine_server) {
			listener.exitDefine_server(this);
		}
	}
}


export class Define_foreign_optionsContext extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(PLpgSQLParser.OPTIONS, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public foreign_option(): Foreign_optionContext[];
	public foreign_option(i: number): Foreign_optionContext;
	public foreign_option(i?: number): Foreign_optionContext | Foreign_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Foreign_optionContext);
		} else {
			return this.getRuleContext(i, Foreign_optionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_define_foreign_options; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDefine_foreign_options) {
			listener.enterDefine_foreign_options(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDefine_foreign_options) {
			listener.exitDefine_foreign_options(this);
		}
	}
}


export class Foreign_optionContext extends ParserRuleContext {
	public foreign_option_name(): Foreign_option_nameContext {
		return this.getRuleContext(0, Foreign_option_nameContext);
	}
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_foreign_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterForeign_option) {
			listener.enterForeign_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitForeign_option) {
			listener.exitForeign_option(this);
		}
	}
}


export class Foreign_option_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_foreign_option_name; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterForeign_option_name) {
			listener.enterForeign_option_name(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitForeign_option_name) {
			listener.exitForeign_option_name(this);
		}
	}
}


export class List_of_type_column_defContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public table_of_type_column_def(): Table_of_type_column_defContext[];
	public table_of_type_column_def(i: number): Table_of_type_column_defContext;
	public table_of_type_column_def(i?: number): Table_of_type_column_defContext | Table_of_type_column_defContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_of_type_column_defContext);
		} else {
			return this.getRuleContext(i, Table_of_type_column_defContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_list_of_type_column_def; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterList_of_type_column_def) {
			listener.enterList_of_type_column_def(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitList_of_type_column_def) {
			listener.exitList_of_type_column_def(this);
		}
	}
}


export class Table_column_defContext extends ParserRuleContext {
	public _tabl_constraint: Constraint_commonContext;
	public table_column_definition(): Table_column_definitionContext | undefined {
		return this.tryGetRuleContext(0, Table_column_definitionContext);
	}
	public constraint_common(): Constraint_commonContext | undefined {
		return this.tryGetRuleContext(0, Constraint_commonContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIKE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public like_option(): Like_optionContext[];
	public like_option(i: number): Like_optionContext;
	public like_option(i?: number): Like_optionContext | Like_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Like_optionContext);
		} else {
			return this.getRuleContext(i, Like_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_column_def; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_column_def) {
			listener.enterTable_column_def(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_column_def) {
			listener.exitTable_column_def(this);
		}
	}
}


export class Table_of_type_column_defContext extends ParserRuleContext {
	public _tabl_constraint: Constraint_commonContext;
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTIONS, 0); }
	public constraint_common(): Constraint_commonContext[];
	public constraint_common(i: number): Constraint_commonContext;
	public constraint_common(i?: number): Constraint_commonContext | Constraint_commonContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constraint_commonContext);
		} else {
			return this.getRuleContext(i, Constraint_commonContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_of_type_column_def; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_of_type_column_def) {
			listener.enterTable_of_type_column_def(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_of_type_column_def) {
			listener.exitTable_of_type_column_def(this);
		}
	}
}


export class Table_column_definitionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public define_foreign_options(): Define_foreign_optionsContext | undefined {
		return this.tryGetRuleContext(0, Define_foreign_optionsContext);
	}
	public collate_identifier(): Collate_identifierContext | undefined {
		return this.tryGetRuleContext(0, Collate_identifierContext);
	}
	public constraint_common(): Constraint_commonContext[];
	public constraint_common(i: number): Constraint_commonContext;
	public constraint_common(i?: number): Constraint_commonContext | Constraint_commonContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constraint_commonContext);
		} else {
			return this.getRuleContext(i, Constraint_commonContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_column_definition; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_column_definition) {
			listener.enterTable_column_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_column_definition) {
			listener.exitTable_column_definition(this);
		}
	}
}


export class Like_optionContext extends ParserRuleContext {
	public INCLUDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INCLUDING, 0); }
	public EXCLUDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUDING, 0); }
	public COMMENTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMENTS, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINTS, 0); }
	public DEFAULTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULTS, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GENERATED, 0); }
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IDENTITY, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEXES, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STORAGE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_like_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLike_option) {
			listener.enterLike_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLike_option) {
			listener.exitLike_option(this);
		}
	}
}


export class Constraint_commonContext extends ParserRuleContext {
	public constr_body(): Constr_bodyContext {
		return this.getRuleContext(0, Constr_bodyContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public table_deferrable(): Table_deferrableContext | undefined {
		return this.tryGetRuleContext(0, Table_deferrableContext);
	}
	public table_initialy_immed(): Table_initialy_immedContext | undefined {
		return this.tryGetRuleContext(0, Table_initialy_immedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_constraint_common; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterConstraint_common) {
			listener.enterConstraint_common(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitConstraint_common) {
			listener.exitConstraint_common(this);
		}
	}
}


export class Constr_bodyContext extends ParserRuleContext {
	public _index_method: IdentifierContext;
	public _where: Token;
	public _exp: VexContext;
	public _ref: Names_in_parensContext;
	public _expression: VexContext;
	public _col: Names_in_parensContext;
	public _default_expr: VexContext;
	public EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUDE, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public sort_specifier(): Sort_specifierContext[];
	public sort_specifier(i: number): Sort_specifierContext;
	public sort_specifier(i?: number): Sort_specifierContext | Sort_specifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_specifierContext);
		} else {
			return this.getRuleContext(i, Sort_specifierContext);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WITH);
		} else {
			return this.getToken(PLpgSQLParser.WITH, i);
		}
	}
	public all_op(): All_opContext[];
	public all_op(i: number): All_opContext;
	public all_op(i?: number): All_opContext | All_opContext[] {
		if (i === undefined) {
			return this.getRuleContexts(All_opContext);
		} else {
			return this.getRuleContext(i, All_opContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public index_parameters(): Index_parametersContext | undefined {
		return this.tryGetRuleContext(0, Index_parametersContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFERENCES, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.KEY, 0); }
	public names_in_parens(): Names_in_parensContext[];
	public names_in_parens(i: number): Names_in_parensContext;
	public names_in_parens(i?: number): Names_in_parensContext | Names_in_parensContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Names_in_parensContext);
		} else {
			return this.getRuleContext(i, Names_in_parensContext);
		}
	}
	public MATCH(): TerminalNode[];
	public MATCH(i: number): TerminalNode;
	public MATCH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.MATCH);
		} else {
			return this.getToken(PLpgSQLParser.MATCH, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ON);
		} else {
			return this.getToken(PLpgSQLParser.ON, i);
		}
	}
	public action(): ActionContext[];
	public action(i: number): ActionContext;
	public action(i?: number): ActionContext | ActionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ActionContext);
		} else {
			return this.getRuleContext(i, ActionContext);
		}
	}
	public FULL(): TerminalNode[];
	public FULL(i: number): TerminalNode;
	public FULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.FULL);
		} else {
			return this.getToken(PLpgSQLParser.FULL, i);
		}
	}
	public PARTIAL(): TerminalNode[];
	public PARTIAL(i: number): TerminalNode;
	public PARTIAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.PARTIAL);
		} else {
			return this.getToken(PLpgSQLParser.PARTIAL, i);
		}
	}
	public SIMPLE(): TerminalNode[];
	public SIMPLE(i: number): TerminalNode;
	public SIMPLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SIMPLE);
		} else {
			return this.getToken(PLpgSQLParser.SIMPLE, i);
		}
	}
	public DELETE(): TerminalNode[];
	public DELETE(i: number): TerminalNode;
	public DELETE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DELETE);
		} else {
			return this.getToken(PLpgSQLParser.DELETE, i);
		}
	}
	public UPDATE(): TerminalNode[];
	public UPDATE(i: number): TerminalNode;
	public UPDATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.UPDATE);
		} else {
			return this.getToken(PLpgSQLParser.UPDATE, i);
		}
	}
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECK, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INHERIT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNIQUE, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIMARY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public identity_body(): Identity_bodyContext | undefined {
		return this.tryGetRuleContext(0, Identity_bodyContext);
	}
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GENERATED, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALWAYS, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public STORED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STORED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_constr_body; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterConstr_body) {
			listener.enterConstr_body(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitConstr_body) {
			listener.exitConstr_body(this);
		}
	}
}


export class All_opContext extends ParserRuleContext {
	public op(): OpContext | undefined {
		return this.tryGetRuleContext(0, OpContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public NOT_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT_EQUAL, 0); }
	public LTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LTH, 0); }
	public LEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEQ, 0); }
	public GTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GTH, 0); }
	public GEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GEQ, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUS, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DIVIDE, 0); }
	public MODULAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULAR, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_all_op; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAll_op) {
			listener.enterAll_op(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAll_op) {
			listener.exitAll_op(this);
		}
	}
}


export class All_simple_opContext extends ParserRuleContext {
	public op_chars(): Op_charsContext | undefined {
		return this.tryGetRuleContext(0, Op_charsContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public NOT_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT_EQUAL, 0); }
	public LTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LTH, 0); }
	public LEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEQ, 0); }
	public GTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GTH, 0); }
	public GEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GEQ, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUS, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DIVIDE, 0); }
	public MODULAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULAR, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_all_simple_op; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAll_simple_op) {
			listener.enterAll_simple_op(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAll_simple_op) {
			listener.exitAll_simple_op(this);
		}
	}
}


export class Op_charsContext extends ParserRuleContext {
	public OP_CHARS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OP_CHARS, 0); }
	public LESS_LESS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LESS_LESS, 0); }
	public GREATER_GREATER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GREATER_GREATER, 0); }
	public HASH_SIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HASH_SIGN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_op_chars; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOp_chars) {
			listener.enterOp_chars(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOp_chars) {
			listener.exitOp_chars(this);
		}
	}
}


export class Index_parametersContext extends ParserRuleContext {
	public including_index(): Including_indexContext | undefined {
		return this.tryGetRuleContext(0, Including_indexContext);
	}
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	public table_space(): Table_spaceContext | undefined {
		return this.tryGetRuleContext(0, Table_spaceContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_index_parameters; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndex_parameters) {
			listener.enterIndex_parameters(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndex_parameters) {
			listener.exitIndex_parameters(this);
		}
	}
}


export class Names_in_parensContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public names_references(): Names_referencesContext {
		return this.getRuleContext(0, Names_referencesContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_names_in_parens; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterNames_in_parens) {
			listener.enterNames_in_parens(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitNames_in_parens) {
			listener.exitNames_in_parens(this);
		}
	}
}


export class Names_referencesContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_names_references; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterNames_references) {
			listener.enterNames_references(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitNames_references) {
			listener.exitNames_references(this);
		}
	}
}


export class Storage_parameterContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public storage_parameter_option(): Storage_parameter_optionContext[];
	public storage_parameter_option(i: number): Storage_parameter_optionContext;
	public storage_parameter_option(i?: number): Storage_parameter_optionContext | Storage_parameter_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Storage_parameter_optionContext);
		} else {
			return this.getRuleContext(i, Storage_parameter_optionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_storage_parameter; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStorage_parameter) {
			listener.enterStorage_parameter(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStorage_parameter) {
			listener.exitStorage_parameter(this);
		}
	}
}


export class Storage_parameter_optionContext extends ParserRuleContext {
	public storage_parameter_name(): Storage_parameter_nameContext {
		return this.getRuleContext(0, Storage_parameter_nameContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_storage_parameter_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStorage_parameter_option) {
			listener.enterStorage_parameter_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStorage_parameter_option) {
			listener.exitStorage_parameter_option(this);
		}
	}
}


export class Storage_parameter_nameContext extends ParserRuleContext {
	public col_label(): Col_labelContext[];
	public col_label(i: number): Col_labelContext;
	public col_label(i?: number): Col_labelContext | Col_labelContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Col_labelContext);
		} else {
			return this.getRuleContext(i, Col_labelContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_storage_parameter_name; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStorage_parameter_name) {
			listener.enterStorage_parameter_name(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStorage_parameter_name) {
			listener.exitStorage_parameter_name(this);
		}
	}
}


export class With_storage_parameterContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(PLpgSQLParser.WITH, 0); }
	public storage_parameter(): Storage_parameterContext {
		return this.getRuleContext(0, Storage_parameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_with_storage_parameter; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterWith_storage_parameter) {
			listener.enterWith_storage_parameter(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitWith_storage_parameter) {
			listener.exitWith_storage_parameter(this);
		}
	}
}


export class Storage_parameter_oidContext extends ParserRuleContext {
	public with_storage_parameter(): With_storage_parameterContext | undefined {
		return this.tryGetRuleContext(0, With_storage_parameterContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public OIDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OIDS, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_storage_parameter_oid; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStorage_parameter_oid) {
			listener.enterStorage_parameter_oid(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStorage_parameter_oid) {
			listener.exitStorage_parameter_oid(this);
		}
	}
}


export class On_commitContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public COMMIT(): TerminalNode { return this.getToken(PLpgSQLParser.COMMIT, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRESERVE, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWS, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELETE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_on_commit; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOn_commit) {
			listener.enterOn_commit(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOn_commit) {
			listener.exitOn_commit(this);
		}
	}
}


export class Table_spaceContext extends ParserRuleContext {
	public TABLESPACE(): TerminalNode { return this.getToken(PLpgSQLParser.TABLESPACE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_space; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_space) {
			listener.enterTable_space(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_space) {
			listener.exitTable_space(this);
		}
	}
}


export class ActionContext extends ParserRuleContext {
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAction) {
			listener.enterAction(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAction) {
			listener.exitAction(this);
		}
	}
}


export class Owner_toContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public OWNER(): TerminalNode { return this.getToken(PLpgSQLParser.OWNER, 0); }
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION_USER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_owner_to; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOwner_to) {
			listener.enterOwner_to(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOwner_to) {
			listener.exitOwner_to(this);
		}
	}
}


export class Rename_toContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public RENAME(): TerminalNode { return this.getToken(PLpgSQLParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(PLpgSQLParser.TO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_rename_to; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRename_to) {
			listener.enterRename_to(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRename_to) {
			listener.exitRename_to(this);
		}
	}
}


export class Set_schemaContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(PLpgSQLParser.SET, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(PLpgSQLParser.SCHEMA, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_set_schema; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSet_schema) {
			listener.enterSet_schema(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSet_schema) {
			listener.exitSet_schema(this);
		}
	}
}


export class Table_column_privilegeContext extends ParserRuleContext {
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELETE, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUNCATE, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFERENCES, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIVILEGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_column_privilege; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_column_privilege) {
			listener.enterTable_column_privilege(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_column_privilege) {
			listener.exitTable_column_privilege(this);
		}
	}
}


export class Usage_select_updateContext extends ParserRuleContext {
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USAGE, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_usage_select_update; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUsage_select_update) {
			listener.enterUsage_select_update(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUsage_select_update) {
			listener.exitUsage_select_update(this);
		}
	}
}


export class Partition_by_columnsContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(PLpgSQLParser.PARTITION, 0); }
	public BY(): TerminalNode { return this.getToken(PLpgSQLParser.BY, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_partition_by_columns; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPartition_by_columns) {
			listener.enterPartition_by_columns(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPartition_by_columns) {
			listener.exitPartition_by_columns(this);
		}
	}
}


export class Cascade_restrictContext extends ParserRuleContext {
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_cascade_restrict; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCascade_restrict) {
			listener.enterCascade_restrict(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCascade_restrict) {
			listener.exitCascade_restrict(this);
		}
	}
}


export class Collate_identifierContext extends ParserRuleContext {
	public _collation: Schema_qualified_nameContext;
	public COLLATE(): TerminalNode { return this.getToken(PLpgSQLParser.COLLATE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_collate_identifier; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCollate_identifier) {
			listener.enterCollate_identifier(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCollate_identifier) {
			listener.exitCollate_identifier(this);
		}
	}
}


export class Indirection_varContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public dollar_number(): Dollar_numberContext | undefined {
		return this.tryGetRuleContext(0, Dollar_numberContext);
	}
	public indirection_list(): Indirection_listContext | undefined {
		return this.tryGetRuleContext(0, Indirection_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_indirection_var; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndirection_var) {
			listener.enterIndirection_var(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndirection_var) {
			listener.exitIndirection_var(this);
		}
	}
}


export class Dollar_numberContext extends ParserRuleContext {
	public DOLLAR_NUMBER(): TerminalNode { return this.getToken(PLpgSQLParser.DOLLAR_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_dollar_number; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDollar_number) {
			listener.enterDollar_number(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDollar_number) {
			listener.exitDollar_number(this);
		}
	}
}


export class Indirection_listContext extends ParserRuleContext {
	public indirection(): IndirectionContext[];
	public indirection(i: number): IndirectionContext;
	public indirection(i?: number): IndirectionContext | IndirectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndirectionContext);
		} else {
			return this.getRuleContext(i, IndirectionContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_indirection_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndirection_list) {
			listener.enterIndirection_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndirection_list) {
			listener.exitIndirection_list(this);
		}
	}
}


export class IndirectionContext extends ParserRuleContext {
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public col_label(): Col_labelContext | undefined {
		return this.tryGetRuleContext(0, Col_labelContext);
	}
	public LEFT_BRACKET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_BRACKET, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_BRACKET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_BRACKET, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_indirection; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndirection) {
			listener.enterIndirection(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndirection) {
			listener.exitIndirection(this);
		}
	}
}


export class Drop_function_statementContext extends ParserRuleContext {
	public _name: Schema_qualified_nameContext;
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AGGREGATE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public function_args(): Function_argsContext | undefined {
		return this.tryGetRuleContext(0, Function_argsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_function_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_function_statement) {
			listener.enterDrop_function_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_function_statement) {
			listener.exitDrop_function_statement(this);
		}
	}
}


export class Drop_trigger_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _table_name: Schema_qualified_nameContext;
	public TRIGGER(): TerminalNode { return this.getToken(PLpgSQLParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_trigger_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_trigger_statement) {
			listener.enterDrop_trigger_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_trigger_statement) {
			listener.exitDrop_trigger_statement(this);
		}
	}
}


export class Drop_rule_statementContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public RULE(): TerminalNode { return this.getToken(PLpgSQLParser.RULE, 0); }
	public ON(): TerminalNode { return this.getToken(PLpgSQLParser.ON, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_rule_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_rule_statement) {
			listener.enterDrop_rule_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_rule_statement) {
			listener.exitDrop_rule_statement(this);
		}
	}
}


export class Drop_statementsContext extends ParserRuleContext {
	public if_exist_names_restrict_cascade(): If_exist_names_restrict_cascadeContext {
		return this.getRuleContext(0, If_exist_names_restrict_cascadeContext);
	}
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACCESS, 0); }
	public METHOD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.METHOD, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATION, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONVERSION, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EVENT, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENSION, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUP, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRAPPER, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PUBLICATION, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERVER, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATISTICS, 0); }
	public SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBSCRIPTION, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESPACE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFIGURATION, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DICTIONARY, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARSER, 0); }
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPLATE, 0); }
	public CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONCURRENTLY, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_drop_statements; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDrop_statements) {
			listener.enterDrop_statements(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDrop_statements) {
			listener.exitDrop_statements(this);
		}
	}
}


export class If_exist_names_restrict_cascadeContext extends ParserRuleContext {
	public names_references(): Names_referencesContext {
		return this.getRuleContext(0, Names_referencesContext);
	}
	public if_exists(): If_existsContext | undefined {
		return this.tryGetRuleContext(0, If_existsContext);
	}
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_if_exist_names_restrict_cascade; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIf_exist_names_restrict_cascade) {
			listener.enterIf_exist_names_restrict_cascade(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIf_exist_names_restrict_cascade) {
			listener.exitIf_exist_names_restrict_cascade(this);
		}
	}
}


export class Id_tokenContext extends ParserRuleContext {
	public Identifier(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.Identifier, 0); }
	public QuotedIdentifier(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.QuotedIdentifier, 0); }
	public tokens_nonkeyword(): Tokens_nonkeywordContext | undefined {
		return this.tryGetRuleContext(0, Tokens_nonkeywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_id_token; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterId_token) {
			listener.enterId_token(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitId_token) {
			listener.exitId_token(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public id_token(): Id_tokenContext | undefined {
		return this.tryGetRuleContext(0, Id_tokenContext);
	}
	public tokens_nonreserved(): Tokens_nonreservedContext | undefined {
		return this.tryGetRuleContext(0, Tokens_nonreservedContext);
	}
	public tokens_nonreserved_except_function_type(): Tokens_nonreserved_except_function_typeContext | undefined {
		return this.tryGetRuleContext(0, Tokens_nonreserved_except_function_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_identifier; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
}


export class Identifier_nontypeContext extends ParserRuleContext {
	public id_token(): Id_tokenContext | undefined {
		return this.tryGetRuleContext(0, Id_tokenContext);
	}
	public tokens_nonreserved(): Tokens_nonreservedContext | undefined {
		return this.tryGetRuleContext(0, Tokens_nonreservedContext);
	}
	public tokens_reserved_except_function_type(): Tokens_reserved_except_function_typeContext | undefined {
		return this.tryGetRuleContext(0, Tokens_reserved_except_function_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_identifier_nontype; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIdentifier_nontype) {
			listener.enterIdentifier_nontype(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIdentifier_nontype) {
			listener.exitIdentifier_nontype(this);
		}
	}
}


export class Col_labelContext extends ParserRuleContext {
	public id_token(): Id_tokenContext | undefined {
		return this.tryGetRuleContext(0, Id_tokenContext);
	}
	public tokens_reserved(): Tokens_reservedContext | undefined {
		return this.tryGetRuleContext(0, Tokens_reservedContext);
	}
	public tokens_nonreserved(): Tokens_nonreservedContext | undefined {
		return this.tryGetRuleContext(0, Tokens_nonreservedContext);
	}
	public tokens_reserved_except_function_type(): Tokens_reserved_except_function_typeContext | undefined {
		return this.tryGetRuleContext(0, Tokens_reserved_except_function_typeContext);
	}
	public tokens_nonreserved_except_function_type(): Tokens_nonreserved_except_function_typeContext | undefined {
		return this.tryGetRuleContext(0, Tokens_nonreserved_except_function_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_col_label; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCol_label) {
			listener.enterCol_label(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCol_label) {
			listener.exitCol_label(this);
		}
	}
}


export class Tokens_nonreservedContext extends ParserRuleContext {
	public ABORT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ABORT, 0); }
	public ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ABSOLUTE, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACCESS, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ACTION, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADD, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ADMIN, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AGGREGATE, 0); }
	public ALSO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALSO, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALTER, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALWAYS, 0); }
	public ASSERTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASSERTION, 0); }
	public ASSIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASSIGNMENT, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AT, 0); }
	public ATTACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ATTACH, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ATTRIBUTE, 0); }
	public BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BACKWARD, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BEFORE, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BEGIN, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CACHE, 0); }
	public CALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CALL, 0); }
	public CALLED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CALLED, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CASCADE, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CASCADED, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CATALOG, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHAIN, 0); }
	public CHARACTERISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHARACTERISTICS, 0); }
	public CHECKPOINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECKPOINT, 0); }
	public CLASS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLASS, 0); }
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLOSE, 0); }
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLUSTER, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMNS, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMENT, 0); }
	public COMMENTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMENTS, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMIT, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMITTED, 0); }
	public CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFIGURATION, 0); }
	public CONFLICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFLICT, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONNECTION, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINTS, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONTENT, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONTINUE, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONVERSION, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COPY, 0); }
	public COST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COST, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CSV, 0); }
	public CUBE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CUBE, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURSOR, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CYCLE, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATA, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATABASE, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DAY, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEALLOCATE, 0); }
	public DECLARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DECLARE, 0); }
	public DEFAULTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULTS, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFERRED, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFINER, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELETE, 0); }
	public DELIMITER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELIMITER, 0); }
	public DELIMITERS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DELIMITERS, 0); }
	public DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEPENDS, 0); }
	public DETACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DETACH, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DICTIONARY, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISABLE, 0); }
	public DISCARD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISCARD, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOCUMENT, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOMAIN, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOUBLE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DROP, 0); }
	public EACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EACH, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENABLE, 0); }
	public ENCODING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENCODING, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENCRYPTED, 0); }
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ENUM, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ESCAPE, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EVENT, 0); }
	public EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUDE, 0); }
	public EXCLUDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUDING, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUSIVE, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXECUTE, 0); }
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXPLAIN, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENSION, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTERNAL, 0); }
	public FAMILY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FAMILY, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FILTER, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FIRST, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOLLOWING, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE, 0); }
	public FORWARD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORWARD, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTION, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FUNCTIONS, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GENERATED, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GLOBAL, 0); }
	public GRANTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GRANTED, 0); }
	public GROUPS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUPS, 0); }
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HANDLER, 0); }
	public HEADER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HEADER, 0); }
	public HOLD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HOLD, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HOUR, 0); }
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IDENTITY, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IF, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMMEDIATE, 0); }
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMMUTABLE, 0); }
	public IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMPLICIT, 0); }
	public IMPORT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IMPORT, 0); }
	public INCLUDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INCLUDE, 0); }
	public INCLUDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INCLUDING, 0); }
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INCREMENT, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEXES, 0); }
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INHERIT, 0); }
	public INHERITS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INHERITS, 0); }
	public INLINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INLINE, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INPUT, 0); }
	public INSENSITIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSENSITIVE, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSERT, 0); }
	public INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INSTEAD, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INVOKER, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ISOLATION, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.KEY, 0); }
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LABEL, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LARGE, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LAST, 0); }
	public LEAKPROOF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEAKPROOF, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEVEL, 0); }
	public LISTEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LISTEN, 0); }
	public LOAD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOAD, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCAL, 0); }
	public LOCATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCATION, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCK, 0); }
	public LOCKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCKED, 0); }
	public LOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOGGED, 0); }
	public MAPPING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MAPPING, 0); }
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATCH, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MAXVALUE, 0); }
	public METHOD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.METHOD, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUTE, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINVALUE, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODE, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MONTH, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MOVE, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NAMES, 0); }
	public NEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEW, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEXT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTHING, 0); }
	public NOTIFY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTIFY, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOWAIT, 0); }
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULLS, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OBJECT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OFF, 0); }
	public OIDS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OIDS, 0); }
	public OLD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OLD, 0); }
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTION, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPTIONS, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ORDINALITY, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OTHERS, 0); }
	public OVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVER, 0); }
	public OVERRIDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVERRIDING, 0); }
	public OWNED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OWNED, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OWNER, 0); }
	public PARALLEL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARALLEL, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARSER, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARTIAL, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PARTITION, 0); }
	public PASSING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PASSING, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PASSWORD, 0); }
	public PLANS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLANS, 0); }
	public POLICY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.POLICY, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRECEDING, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PREPARE, 0); }
	public PREPARED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PREPARED, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRESERVE, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIOR, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIVILEGES, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURAL, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURE, 0); }
	public PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROCEDURES, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROGRAM, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PUBLICATION, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.QUOTE, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RANGE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.READ, 0); }
	public REASSIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REASSIGN, 0); }
	public RECHECK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RECHECK, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RECURSIVE, 0); }
	public REF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REF, 0); }
	public REFERENCING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFERENCING, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFRESH, 0); }
	public REINDEX(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REINDEX, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RELATIVE, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RELEASE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RENAME, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPEATABLE, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLACE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLICA, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESET, 0); }
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTART, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICT, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNS, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REVOKE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLE, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLLBACK, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLLUP, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINE, 0); }
	public ROUTINES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROUTINES, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWS, 0); }
	public RULE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RULE, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SAVEPOINT, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMAS, 0); }
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCROLL, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEARCH, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SECOND, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SECURITY, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCE, 0); }
	public SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEQUENCES, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERIALIZABLE, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERVER, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public SETS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SETS, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SHARE, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SHOW, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SIMPLE, 0); }
	public SKIP_(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SKIP_, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SNAPSHOT, 0); }
	public SQL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SQL, 0); }
	public STABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STABLE, 0); }
	public STANDALONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STANDALONE, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.START, 0); }
	public STATEMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATEMENT, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STATISTICS, 0); }
	public STDIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STDIN, 0); }
	public STDOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STDOUT, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STORAGE, 0); }
	public STORED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STORED, 0); }
	public STRICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STRICT, 0); }
	public STRIP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STRIP, 0); }
	public SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBSCRIPTION, 0); }
	public SUPPORT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUPPORT, 0); }
	public SYSID(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYSID, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYSTEM, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLES, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESPACE, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPLATE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEXT, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIES, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSACTION, 0); }
	public TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRANSFORM, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIGGER, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUNCATE, 0); }
	public TRUSTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUSTED, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPES, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNBOUNDED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNCOMMITTED, 0); }
	public UNENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNENCRYPTED, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNKNOWN, 0); }
	public UNLISTEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLISTEN, 0); }
	public UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLOGGED, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNTIL, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public VACUUM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VACUUM, 0); }
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALID, 0); }
	public VALIDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALIDATE, 0); }
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALIDATOR, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALUE, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARYING, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEW, 0); }
	public VIEWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VIEWS, 0); }
	public VOLATILE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VOLATILE, 0); }
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHITESPACE, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHIN, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHOUT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WORK, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRAPPER, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WRITE, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XML, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.YEAR, 0); }
	public YES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.YES, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ZONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_tokens_nonreserved; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTokens_nonreserved) {
			listener.enterTokens_nonreserved(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTokens_nonreserved) {
			listener.exitTokens_nonreserved(this);
		}
	}
}


export class Tokens_nonreserved_except_function_typeContext extends ParserRuleContext {
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BETWEEN, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BIGINT, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BIT, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BOOLEAN, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHARACTER, 0); }
	public COALESCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COALESCE, 0); }
	public DEC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEC, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DECIMAL, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXISTS, 0); }
	public EXTRACT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTRACT, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FLOAT, 0); }
	public GREATEST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GREATEST, 0); }
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUPING, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INOUT, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTEGER, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERVAL, 0); }
	public LEAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEAST, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NATIONAL, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NCHAR, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NONE, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULLIF, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMERIC, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OUT, 0); }
	public OVERLAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVERLAY, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.POSITION, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRECISION, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REAL, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	public SETOF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SETOF, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SMALLINT, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBSTRING, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIMESTAMP, 0); }
	public TREAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TREAT, 0); }
	public TRIM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIM, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALUES, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARCHAR, 0); }
	public XMLATTRIBUTES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLATTRIBUTES, 0); }
	public XMLCONCAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLCONCAT, 0); }
	public XMLELEMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLELEMENT, 0); }
	public XMLEXISTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLEXISTS, 0); }
	public XMLFOREST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLFOREST, 0); }
	public XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLNAMESPACES, 0); }
	public XMLPARSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLPARSE, 0); }
	public XMLPI(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLPI, 0); }
	public XMLROOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLROOT, 0); }
	public XMLSERIALIZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLSERIALIZE, 0); }
	public XMLTABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLTABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_tokens_nonreserved_except_function_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTokens_nonreserved_except_function_type) {
			listener.enterTokens_nonreserved_except_function_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTokens_nonreserved_except_function_type) {
			listener.exitTokens_nonreserved_except_function_type(this);
		}
	}
}


export class Tokens_reserved_except_function_typeContext extends ParserRuleContext {
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AUTHORIZATION, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BINARY, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATION, 0); }
	public CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONCURRENTLY, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CROSS, 0); }
	public CURRENT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_SCHEMA, 0); }
	public FREEZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FREEZE, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FULL, 0); }
	public ILIKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ILIKE, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INNER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IS, 0); }
	public ISNULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ISNULL, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.JOIN, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIKE, 0); }
	public NATURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NATURAL, 0); }
	public NOTNULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTNULL, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OUTER, 0); }
	public OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVERLAPS, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT, 0); }
	public SIMILAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SIMILAR, 0); }
	public TABLESAMPLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESAMPLE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERBOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_tokens_reserved_except_function_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTokens_reserved_except_function_type) {
			listener.enterTokens_reserved_except_function_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTokens_reserved_except_function_type) {
			listener.exitTokens_reserved_except_function_type(this);
		}
	}
}


export class Tokens_reservedContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public ANALYSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYSE, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANALYZE, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AND, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANY, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ARRAY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASC, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASYMMETRIC, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BOTH, 0); }
	public CASE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CASE, 0); }
	public CAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CAST, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHECK, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATE, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATE, 0); }
	public CURRENT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_CATALOG, 0); }
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_DATE, 0); }
	public CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_ROLE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_TIMESTAMP, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_USER, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public DEFERRABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFERRABLE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DESC, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISTINCT, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DO, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELSE, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.END, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPT, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FALSE, 0); }
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FETCH, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREIGN, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GRANT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUP, 0); }
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HAVING, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public INITIALLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INITIALLY, 0); }
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERSECT, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTO, 0); }
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LATERAL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEADING, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIMIT, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCALTIMESTAMP, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OFFSET, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ORDER, 0); }
	public PLACING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLACING, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRIMARY, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REFERENCES, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNING, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION_USER, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SOME, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYMMETRIC, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public THEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.THEN, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRAILING, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUE, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNION, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNIQUE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARIADIC, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHEN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WINDOW, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_tokens_reserved; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTokens_reserved) {
			listener.enterTokens_reserved(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTokens_reserved) {
			listener.exitTokens_reserved(this);
		}
	}
}


export class Tokens_nonkeywordContext extends ParserRuleContext {
	public ALIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALIGNMENT, 0); }
	public BASETYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BASETYPE, 0); }
	public BUFFERS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BUFFERS, 0); }
	public BYPASSRLS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BYPASSRLS, 0); }
	public CANONICAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CANONICAL, 0); }
	public CATEGORY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CATEGORY, 0); }
	public COLLATABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATABLE, 0); }
	public COMBINEFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMBINEFUNC, 0); }
	public COMMUTATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMUTATOR, 0); }
	public CONNECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONNECT, 0); }
	public COSTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COSTS, 0); }
	public CREATEDB(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATEDB, 0); }
	public CREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CREATEROLE, 0); }
	public DESERIALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DESERIALFUNC, 0); }
	public DETERMINISTIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DETERMINISTIC, 0); }
	public DISABLE_PAGE_SKIPPING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISABLE_PAGE_SKIPPING, 0); }
	public ELEMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELEMENT, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXTENDED, 0); }
	public FINALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FINALFUNC, 0); }
	public FINALFUNC_EXTRA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FINALFUNC_EXTRA, 0); }
	public FINALFUNC_MODIFY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FINALFUNC_MODIFY, 0); }
	public FORCE_NOT_NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE_NOT_NULL, 0); }
	public FORCE_NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE_NULL, 0); }
	public FORCE_QUOTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORCE_QUOTE, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FORMAT, 0); }
	public GETTOKEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GETTOKEN, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HASH, 0); }
	public HASHES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HASHES, 0); }
	public HEADLINE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HEADLINE, 0); }
	public HYPOTHETICAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HYPOTHETICAL, 0); }
	public INDEX_CLEANUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INDEX_CLEANUP, 0); }
	public INIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INIT, 0); }
	public INITCOND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INITCOND, 0); }
	public INTERNALLENGTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERNALLENGTH, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.JSON, 0); }
	public LC_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LC_COLLATE, 0); }
	public LC_CTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LC_CTYPE, 0); }
	public LEFTARG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFTARG, 0); }
	public LEXIZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEXIZE, 0); }
	public LEXTYPES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEXTYPES, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIST, 0); }
	public LOCALE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCALE, 0); }
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOGIN, 0); }
	public MAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MAIN, 0); }
	public MERGES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MERGES, 0); }
	public MFINALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MFINALFUNC, 0); }
	public MFINALFUNC_EXTRA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MFINALFUNC_EXTRA, 0); }
	public MFINALFUNC_MODIFY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MFINALFUNC_MODIFY, 0); }
	public MINITCOND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINITCOND, 0); }
	public MINVFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINVFUNC, 0); }
	public MODULUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULUS, 0); }
	public MSFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MSFUNC, 0); }
	public MSSPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MSSPACE, 0); }
	public MSTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MSTYPE, 0); }
	public NEGATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEGATOR, 0); }
	public NOBYPASSRLS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOBYPASSRLS, 0); }
	public NOCREATEDB(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOCREATEDB, 0); }
	public NOCREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOCREATEROLE, 0); }
	public NOINHERIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOINHERIT, 0); }
	public NOLOGIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOLOGIN, 0); }
	public NOREPLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOREPLICATION, 0); }
	public NOSUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOSUPERUSER, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OUTPUT, 0); }
	public PASSEDBYVALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PASSEDBYVALUE, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PATH, 0); }
	public PERMISSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PERMISSIVE, 0); }
	public PLAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLAIN, 0); }
	public PREFERRED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PREFERRED, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PROVIDER, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.READ_ONLY, 0); }
	public READ_WRITE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.READ_WRITE, 0); }
	public RECEIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RECEIVE, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPLICATION, 0); }
	public REMAINDER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REMAINDER, 0); }
	public RESTRICTED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICTED, 0); }
	public RESTRICTIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTRICTIVE, 0); }
	public RIGHTARG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHTARG, 0); }
	public SAFE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SAFE, 0); }
	public SEND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SEND, 0); }
	public SERIALFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SERIALFUNC, 0); }
	public SETTINGS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SETTINGS, 0); }
	public SFUNC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SFUNC, 0); }
	public SHAREABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SHAREABLE, 0); }
	public SKIP_LOCKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SKIP_LOCKED, 0); }
	public SORTOP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SORTOP, 0); }
	public SSPACE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SSPACE, 0); }
	public STYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STYPE, 0); }
	public SUBTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBTYPE, 0); }
	public SUBTYPE_DIFF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBTYPE_DIFF, 0); }
	public SUBTYPE_OPCLASS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBTYPE_OPCLASS, 0); }
	public SUMMARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUMMARY, 0); }
	public SUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUPERUSER, 0); }
	public TIMING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIMING, 0); }
	public TYPMOD_IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPMOD_IN, 0); }
	public TYPMOD_OUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPMOD_OUT, 0); }
	public UNSAFE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNSAFE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USAGE, 0); }
	public VARIABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARIABLE, 0); }
	public YAML(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.YAML, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALIAS, 0); }
	public ASSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASSERT, 0); }
	public CONSTANT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTANT, 0); }
	public DATATYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATATYPE, 0); }
	public DEBUG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEBUG, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DETAIL, 0); }
	public DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DIAGNOSTICS, 0); }
	public ELSEIF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELSEIF, 0); }
	public ELSIF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELSIF, 0); }
	public ERRCODE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ERRCODE, 0); }
	public EXIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXIT, 0); }
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPTION, 0); }
	public FOREACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREACH, 0); }
	public GET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GET, 0); }
	public HINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HINT, 0); }
	public INFO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INFO, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOG, 0); }
	public LOOP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOOP, 0); }
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MESSAGE, 0); }
	public NOTICE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTICE, 0); }
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPEN, 0); }
	public PERFORM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PERFORM, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.QUERY, 0); }
	public RAISE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RAISE, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RECORD, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURN, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REVERSE, 0); }
	public ROWTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWTYPE, 0); }
	public SLICE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SLICE, 0); }
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SQLSTATE, 0); }
	public STACKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STACKED, 0); }
	public WARNING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WARNING, 0); }
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_tokens_nonkeyword; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTokens_nonkeyword) {
			listener.enterTokens_nonkeyword(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTokens_nonkeyword) {
			listener.exitTokens_nonkeyword(this);
		}
	}
}


export class Schema_qualified_name_nontypeContext extends ParserRuleContext {
	public _schema: IdentifierContext;
	public identifier_nontype(): Identifier_nontypeContext {
		return this.getRuleContext(0, Identifier_nontypeContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_qualified_name_nontype; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_qualified_name_nontype) {
			listener.enterSchema_qualified_name_nontype(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_qualified_name_nontype) {
			listener.exitSchema_qualified_name_nontype(this);
		}
	}
}


export class Type_listContext extends ParserRuleContext {
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_type_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterType_list) {
			listener.enterType_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitType_list) {
			listener.exitType_list(this);
		}
	}
}


export class Data_typeContext extends ParserRuleContext {
	public predefined_type(): Predefined_typeContext {
		return this.getRuleContext(0, Predefined_typeContext);
	}
	public SETOF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SETOF, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ARRAY, 0); }
	public array_type(): Array_typeContext[];
	public array_type(i: number): Array_typeContext;
	public array_type(i?: number): Array_typeContext | Array_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Array_typeContext);
		} else {
			return this.getRuleContext(i, Array_typeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_data_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterData_type) {
			listener.enterData_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitData_type) {
			listener.exitData_type(this);
		}
	}
}


export class Array_typeContext extends ParserRuleContext {
	public LEFT_BRACKET(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_BRACKET, 0); }
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_BRACKET, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_array_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterArray_type) {
			listener.enterArray_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitArray_type) {
			listener.exitArray_type(this);
		}
	}
}


export class Predefined_typeContext extends ParserRuleContext {
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BIGINT, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BIT, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARYING, 0); }
	public type_length(): Type_lengthContext | undefined {
		return this.tryGetRuleContext(0, Type_lengthContext);
	}
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BOOLEAN, 0); }
	public DEC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEC, 0); }
	public precision_param(): Precision_paramContext | undefined {
		return this.tryGetRuleContext(0, Precision_paramContext);
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DECIMAL, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRECISION, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FLOAT, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTEGER, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERVAL, 0); }
	public interval_field(): Interval_fieldContext | undefined {
		return this.tryGetRuleContext(0, Interval_fieldContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHARACTER, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHAR, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NATIONAL, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NCHAR, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMERIC, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REAL, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SMALLINT, 0); }
	public TIME(): TerminalNode[];
	public TIME(i: number): TerminalNode;
	public TIME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.TIME);
		} else {
			return this.getToken(PLpgSQLParser.TIME, i);
		}
	}
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ZONE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHOUT, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIMESTAMP, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARCHAR, 0); }
	public schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_name_nontypeContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_predefined_type; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPredefined_type) {
			listener.enterPredefined_type(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPredefined_type) {
			listener.exitPredefined_type(this);
		}
	}
}


export class Interval_fieldContext extends ParserRuleContext {
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.YEAR, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MONTH, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HOUR, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUTE, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SECOND, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_interval_field; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterInterval_field) {
			listener.enterInterval_field(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitInterval_field) {
			listener.exitInterval_field(this);
		}
	}
}


export class Type_lengthContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public NUMBER_LITERAL(): TerminalNode { return this.getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_type_length; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterType_length) {
			listener.enterType_length(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitType_length) {
			listener.exitType_length(this);
		}
	}
}


export class Precision_paramContext extends ParserRuleContext {
	public _precision: Token;
	public _scale: Token;
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public NUMBER_LITERAL(): TerminalNode[];
	public NUMBER_LITERAL(i: number): TerminalNode;
	public NUMBER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NUMBER_LITERAL);
		} else {
			return this.getToken(PLpgSQLParser.NUMBER_LITERAL, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_precision_param; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPrecision_param) {
			listener.enterPrecision_param(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPrecision_param) {
			listener.exitPrecision_param(this);
		}
	}
}


export class VexContext extends ParserRuleContext {
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public CAST_EXPRESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CAST_EXPRESSION, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public indirection_list(): Indirection_listContext | undefined {
		return this.tryGetRuleContext(0, Indirection_listContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public collate_identifier(): Collate_identifierContext | undefined {
		return this.tryGetRuleContext(0, Collate_identifierContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUS, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AT, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ZONE, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXP, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DIVIDE, 0); }
	public MODULAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULAR, 0); }
	public op(): OpContext | undefined {
		return this.tryGetRuleContext(0, OpContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public select_stmt_no_parens(): Select_stmt_no_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_stmt_no_parensContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BETWEEN, 0); }
	public vex_b(): Vex_bContext | undefined {
		return this.tryGetRuleContext(0, Vex_bContext);
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AND, 0); }
	public ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASYMMETRIC, 0); }
	public SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYMMETRIC, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIKE, 0); }
	public ILIKE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ILIKE, 0); }
	public SIMILAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SIMILAR, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TO, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ESCAPE, 0); }
	public LTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LTH, 0); }
	public GTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GTH, 0); }
	public LEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEQ, 0); }
	public GEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GEQ, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public NOT_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT_EQUAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IS, 0); }
	public truth_value(): Truth_valueContext | undefined {
		return this.tryGetRuleContext(0, Truth_valueContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISTINCT, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOCUMENT, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNKNOWN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public type_list(): Type_listContext | undefined {
		return this.tryGetRuleContext(0, Type_listContext);
	}
	public ISNULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ISNULL, 0); }
	public NOTNULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTNULL, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OR, 0); }
	public value_expression_primary(): Value_expression_primaryContext | undefined {
		return this.tryGetRuleContext(0, Value_expression_primaryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_vex; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVex) {
			listener.enterVex(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVex) {
			listener.exitVex(this);
		}
	}
}


export class Vex_bContext extends ParserRuleContext {
	public vex_b(): Vex_bContext[];
	public vex_b(i: number): Vex_bContext;
	public vex_b(i?: number): Vex_bContext | Vex_bContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Vex_bContext);
		} else {
			return this.getRuleContext(i, Vex_bContext);
		}
	}
	public CAST_EXPRESSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CAST_EXPRESSION, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public indirection_list(): Indirection_listContext | undefined {
		return this.tryGetRuleContext(0, Indirection_listContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MINUS, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXP, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DIVIDE, 0); }
	public MODULAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULAR, 0); }
	public op(): OpContext | undefined {
		return this.tryGetRuleContext(0, OpContext);
	}
	public LTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LTH, 0); }
	public GTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GTH, 0); }
	public LEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEQ, 0); }
	public GEQ(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GEQ, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public NOT_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT_EQUAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IS, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISTINCT, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOCUMENT, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNKNOWN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public type_list(): Type_listContext | undefined {
		return this.tryGetRuleContext(0, Type_listContext);
	}
	public value_expression_primary(): Value_expression_primaryContext | undefined {
		return this.tryGetRuleContext(0, Value_expression_primaryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_vex_b; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVex_b) {
			listener.enterVex_b(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVex_b) {
			listener.exitVex_b(this);
		}
	}
}


export class OpContext extends ParserRuleContext {
	public op_chars(): Op_charsContext | undefined {
		return this.tryGetRuleContext(0, Op_charsContext);
	}
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public all_simple_op(): All_simple_opContext | undefined {
		return this.tryGetRuleContext(0, All_simple_opContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_op; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOp) {
			listener.enterOp(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOp) {
			listener.exitOp(this);
		}
	}
}


export class All_op_refContext extends ParserRuleContext {
	public all_simple_op(): All_simple_opContext {
		return this.getRuleContext(0, All_simple_opContext);
	}
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPERATOR, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOT, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_all_op_ref; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAll_op_ref) {
			listener.enterAll_op_ref(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAll_op_ref) {
			listener.exitAll_op_ref(this);
		}
	}
}


export class Datetime_overlapsContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public OVERLAPS(): TerminalNode { return this.getToken(PLpgSQLParser.OVERLAPS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_datetime_overlaps; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDatetime_overlaps) {
			listener.enterDatetime_overlaps(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDatetime_overlaps) {
			listener.exitDatetime_overlaps(this);
		}
	}
}


export class Value_expression_primaryContext extends ParserRuleContext {
	public unsigned_value_specification(): Unsigned_value_specificationContext | undefined {
		return this.tryGetRuleContext(0, Unsigned_value_specificationContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public select_stmt_no_parens(): Select_stmt_no_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_stmt_no_parensContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public indirection_list(): Indirection_listContext | undefined {
		return this.tryGetRuleContext(0, Indirection_listContext);
	}
	public case_expression(): Case_expressionContext | undefined {
		return this.tryGetRuleContext(0, Case_expressionContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public comparison_mod(): Comparison_modContext | undefined {
		return this.tryGetRuleContext(0, Comparison_modContext);
	}
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXISTS, 0); }
	public table_subquery(): Table_subqueryContext | undefined {
		return this.tryGetRuleContext(0, Table_subqueryContext);
	}
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public indirection_var(): Indirection_varContext | undefined {
		return this.tryGetRuleContext(0, Indirection_varContext);
	}
	public array_expression(): Array_expressionContext | undefined {
		return this.tryGetRuleContext(0, Array_expressionContext);
	}
	public type_coercion(): Type_coercionContext | undefined {
		return this.tryGetRuleContext(0, Type_coercionContext);
	}
	public datetime_overlaps(): Datetime_overlapsContext | undefined {
		return this.tryGetRuleContext(0, Datetime_overlapsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_value_expression_primary; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterValue_expression_primary) {
			listener.enterValue_expression_primary(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitValue_expression_primary) {
			listener.exitValue_expression_primary(this);
		}
	}
}


export class Unsigned_value_specificationContext extends ParserRuleContext {
	public unsigned_numeric_literal(): Unsigned_numeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Unsigned_numeric_literalContext);
	}
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public truth_value(): Truth_valueContext | undefined {
		return this.tryGetRuleContext(0, Truth_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_unsigned_value_specification; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUnsigned_value_specification) {
			listener.enterUnsigned_value_specification(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUnsigned_value_specification) {
			listener.exitUnsigned_value_specification(this);
		}
	}
}


export class Unsigned_numeric_literalContext extends ParserRuleContext {
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	public REAL_NUMBER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REAL_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_unsigned_numeric_literal; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUnsigned_numeric_literal) {
			listener.enterUnsigned_numeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUnsigned_numeric_literal) {
			listener.exitUnsigned_numeric_literal(this);
		}
	}
}


export class Truth_valueContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FALSE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_truth_value; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTruth_value) {
			listener.enterTruth_value(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTruth_value) {
			listener.exitTruth_value(this);
		}
	}
}


export class Case_expressionContext extends ParserRuleContext {
	public _vex: VexContext;
	public _r: VexContext[] = [];
	public CASE(): TerminalNode { return this.getToken(PLpgSQLParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(PLpgSQLParser.END, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WHEN);
		} else {
			return this.getToken(PLpgSQLParser.WHEN, i);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.THEN);
		} else {
			return this.getToken(PLpgSQLParser.THEN, i);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_case_expression; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCase_expression) {
			listener.enterCase_expression(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCase_expression) {
			listener.exitCase_expression(this);
		}
	}
}


export class Cast_specificationContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public CAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CAST, 0); }
	public TREAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TREAT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_cast_specification; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCast_specification) {
			listener.enterCast_specification(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCast_specification) {
			listener.exitCast_specification(this);
		}
	}
}


export class Function_callContext extends ParserRuleContext {
	public schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_name_nontypeContext);
	}
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public vex_or_named_notation(): Vex_or_named_notationContext[];
	public vex_or_named_notation(i: number): Vex_or_named_notationContext;
	public vex_or_named_notation(i?: number): Vex_or_named_notationContext | Vex_or_named_notationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Vex_or_named_notationContext);
		} else {
			return this.getRuleContext(i, Vex_or_named_notationContext);
		}
	}
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITHIN, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUP, 0); }
	public orderby_clause(): Orderby_clauseContext[];
	public orderby_clause(i: number): Orderby_clauseContext;
	public orderby_clause(i?: number): Orderby_clauseContext | Orderby_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Orderby_clauseContext);
		} else {
			return this.getRuleContext(i, Orderby_clauseContext);
		}
	}
	public filter_clause(): Filter_clauseContext | undefined {
		return this.tryGetRuleContext(0, Filter_clauseContext);
	}
	public OVER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public window_definition(): Window_definitionContext | undefined {
		return this.tryGetRuleContext(0, Window_definitionContext);
	}
	public set_qualifier(): Set_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Set_qualifierContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public function_construct(): Function_constructContext | undefined {
		return this.tryGetRuleContext(0, Function_constructContext);
	}
	public extract_function(): Extract_functionContext | undefined {
		return this.tryGetRuleContext(0, Extract_functionContext);
	}
	public system_function(): System_functionContext | undefined {
		return this.tryGetRuleContext(0, System_functionContext);
	}
	public date_time_function(): Date_time_functionContext | undefined {
		return this.tryGetRuleContext(0, Date_time_functionContext);
	}
	public string_value_function(): String_value_functionContext | undefined {
		return this.tryGetRuleContext(0, String_value_functionContext);
	}
	public xml_function(): Xml_functionContext | undefined {
		return this.tryGetRuleContext(0, Xml_functionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_call; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_call) {
			listener.enterFunction_call(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_call) {
			listener.exitFunction_call(this);
		}
	}
}


export class Vex_or_named_notationContext extends ParserRuleContext {
	public _argname: IdentifierContext;
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VARIADIC, 0); }
	public pointer(): PointerContext | undefined {
		return this.tryGetRuleContext(0, PointerContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_vex_or_named_notation; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVex_or_named_notation) {
			listener.enterVex_or_named_notation(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVex_or_named_notation) {
			listener.exitVex_or_named_notation(this);
		}
	}
}


export class PointerContext extends ParserRuleContext {
	public EQUAL_GTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL_GTH, 0); }
	public COLON_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLON_EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_pointer; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPointer) {
			listener.enterPointer(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPointer) {
			listener.exitPointer(this);
		}
	}
}


export class Function_constructContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COALESCE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COALESCE, 0); }
	public GREATEST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GREATEST, 0); }
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUPING, 0); }
	public LEAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEAST, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULLIF, 0); }
	public XMLCONCAT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLCONCAT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_construct; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_construct) {
			listener.enterFunction_construct(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_construct) {
			listener.exitFunction_construct(this);
		}
	}
}


export class Extract_functionContext extends ParserRuleContext {
	public EXTRACT(): TerminalNode { return this.getToken(PLpgSQLParser.EXTRACT, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_extract_function; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExtract_function) {
			listener.enterExtract_function(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExtract_function) {
			listener.exitExtract_function(this);
		}
	}
}


export class System_functionContext extends ParserRuleContext {
	public CURRENT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_CATALOG, 0); }
	public CURRENT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_SCHEMA, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SESSION_USER, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public cast_specification(): Cast_specificationContext | undefined {
		return this.tryGetRuleContext(0, Cast_specificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_system_function; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSystem_function) {
			listener.enterSystem_function(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSystem_function) {
			listener.exitSystem_function(this);
		}
	}
}


export class Date_time_functionContext extends ParserRuleContext {
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_TIME, 0); }
	public type_length(): Type_lengthContext | undefined {
		return this.tryGetRuleContext(0, Type_lengthContext);
	}
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT_TIMESTAMP, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCALTIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_date_time_function; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDate_time_function) {
			listener.enterDate_time_function(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDate_time_function) {
			listener.exitDate_time_function(this);
		}
	}
}


export class String_value_functionContext extends ParserRuleContext {
	public _chars: VexContext;
	public _str: VexContext;
	public TRIM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRIM, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TRAILING, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BOTH, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SUBSTRING, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.POSITION, 0); }
	public vex_b(): Vex_bContext | undefined {
		return this.tryGetRuleContext(0, Vex_bContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public OVERLAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVERLAY, 0); }
	public PLACING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PLACING, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLLATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_string_value_function; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterString_value_function) {
			listener.enterString_value_function(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitString_value_function) {
			listener.exitString_value_function(this);
		}
	}
}


export class Xml_functionContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public _attname: IdentifierContext;
	public XMLELEMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLELEMENT, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public NAME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NAME, 0); }
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public XMLATTRIBUTES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLATTRIBUTES, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.AS);
		} else {
			return this.getToken(PLpgSQLParser.AS, i);
		}
	}
	public XMLFOREST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLFOREST, 0); }
	public XMLPI(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLPI, 0); }
	public XMLROOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLROOT, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VERSION, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.NO);
		} else {
			return this.getToken(PLpgSQLParser.NO, i);
		}
	}
	public VALUE(): TerminalNode[];
	public VALUE(i: number): TerminalNode;
	public VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.VALUE);
		} else {
			return this.getToken(PLpgSQLParser.VALUE, i);
		}
	}
	public STANDALONE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STANDALONE, 0); }
	public YES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.YES, 0); }
	public XMLEXISTS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLEXISTS, 0); }
	public PASSING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PASSING, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.BY);
		} else {
			return this.getToken(PLpgSQLParser.BY, i);
		}
	}
	public REF(): TerminalNode[];
	public REF(i: number): TerminalNode;
	public REF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.REF);
		} else {
			return this.getToken(PLpgSQLParser.REF, i);
		}
	}
	public XMLPARSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLPARSE, 0); }
	public DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOCUMENT, 0); }
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONTENT, 0); }
	public XMLSERIALIZE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLSERIALIZE, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public XMLTABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLTABLE, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMNS, 0); }
	public xml_table_column(): Xml_table_columnContext[];
	public xml_table_column(i: number): Xml_table_columnContext;
	public xml_table_column(i?: number): Xml_table_columnContext | Xml_table_columnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xml_table_columnContext);
		} else {
			return this.getRuleContext(i, Xml_table_columnContext);
		}
	}
	public XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.XMLNAMESPACES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_xml_function; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterXml_function) {
			listener.enterXml_function(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitXml_function) {
			listener.exitXml_function(this);
		}
	}
}


export class Xml_table_columnContext extends ParserRuleContext {
	public _name: IdentifierContext;
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ORDINALITY, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PATH, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_xml_table_column; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterXml_table_column) {
			listener.enterXml_table_column(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitXml_table_column) {
			listener.exitXml_table_column(this);
		}
	}
}


export class Comparison_modContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ANY, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SOME, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public select_stmt_no_parens(): Select_stmt_no_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_stmt_no_parensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_comparison_mod; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterComparison_mod) {
			listener.enterComparison_mod(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitComparison_mod) {
			listener.exitComparison_mod(this);
		}
	}
}


export class Filter_clauseContext extends ParserRuleContext {
	public FILTER(): TerminalNode { return this.getToken(PLpgSQLParser.FILTER, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public WHERE(): TerminalNode { return this.getToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_filter_clause; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFilter_clause) {
			listener.enterFilter_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFilter_clause) {
			listener.exitFilter_clause(this);
		}
	}
}


export class Window_definitionContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public partition_by_columns(): Partition_by_columnsContext | undefined {
		return this.tryGetRuleContext(0, Partition_by_columnsContext);
	}
	public orderby_clause(): Orderby_clauseContext | undefined {
		return this.tryGetRuleContext(0, Orderby_clauseContext);
	}
	public frame_clause(): Frame_clauseContext | undefined {
		return this.tryGetRuleContext(0, Frame_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_window_definition; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterWindow_definition) {
			listener.enterWindow_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitWindow_definition) {
			listener.exitWindow_definition(this);
		}
	}
}


export class Frame_clauseContext extends ParserRuleContext {
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RANGE, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWS, 0); }
	public GROUPS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUPS, 0); }
	public frame_bound(): Frame_boundContext[];
	public frame_bound(i: number): Frame_boundContext;
	public frame_bound(i?: number): Frame_boundContext | Frame_boundContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Frame_boundContext);
		} else {
			return this.getRuleContext(i, Frame_boundContext);
		}
	}
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BETWEEN, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AND, 0); }
	public EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCLUDE, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUP, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TIES, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_frame_clause; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFrame_clause) {
			listener.enterFrame_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFrame_clause) {
			listener.exitFrame_clause(this);
		}
	}
}


export class Frame_boundContext extends ParserRuleContext {
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PRECEDING, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOLLOWING, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_frame_bound; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFrame_bound) {
			listener.enterFrame_bound(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFrame_bound) {
			listener.exitFrame_bound(this);
		}
	}
}


export class Array_expressionContext extends ParserRuleContext {
	public ARRAY(): TerminalNode { return this.getToken(PLpgSQLParser.ARRAY, 0); }
	public array_elements(): Array_elementsContext | undefined {
		return this.tryGetRuleContext(0, Array_elementsContext);
	}
	public table_subquery(): Table_subqueryContext | undefined {
		return this.tryGetRuleContext(0, Table_subqueryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_array_expression; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterArray_expression) {
			listener.enterArray_expression(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitArray_expression) {
			listener.exitArray_expression(this);
		}
	}
}


export class Array_elementsContext extends ParserRuleContext {
	public LEFT_BRACKET(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_BRACKET, 0); }
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_BRACKET, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public array_elements(): Array_elementsContext[];
	public array_elements(i: number): Array_elementsContext;
	public array_elements(i?: number): Array_elementsContext | Array_elementsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Array_elementsContext);
		} else {
			return this.getRuleContext(i, Array_elementsContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_array_elements; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterArray_elements) {
			listener.enterArray_elements(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitArray_elements) {
			listener.exitArray_elements(this);
		}
	}
}


export class Type_coercionContext extends ParserRuleContext {
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERVAL, 0); }
	public interval_field(): Interval_fieldContext | undefined {
		return this.tryGetRuleContext(0, Interval_fieldContext);
	}
	public type_length(): Type_lengthContext | undefined {
		return this.tryGetRuleContext(0, Type_lengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_type_coercion; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterType_coercion) {
			listener.enterType_coercion(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitType_coercion) {
			listener.exitType_coercion(this);
		}
	}
}


export class Schema_qualified_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DOT);
		} else {
			return this.getToken(PLpgSQLParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_schema_qualified_name; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSchema_qualified_name) {
			listener.enterSchema_qualified_name(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSchema_qualified_name) {
			listener.exitSchema_qualified_name(this);
		}
	}
}


export class Set_qualifierContext extends ParserRuleContext {
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DISTINCT, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_set_qualifier; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSet_qualifier) {
			listener.enterSet_qualifier(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSet_qualifier) {
			listener.exitSet_qualifier(this);
		}
	}
}


export class Table_subqueryContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_table_subquery; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTable_subquery) {
			listener.enterTable_subquery(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTable_subquery) {
			listener.exitTable_subquery(this);
		}
	}
}


export class Select_stmtContext extends ParserRuleContext {
	public select_ops(): Select_opsContext {
		return this.getRuleContext(0, Select_opsContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public after_ops(): After_opsContext[];
	public after_ops(i: number): After_opsContext;
	public after_ops(i?: number): After_opsContext | After_opsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(After_opsContext);
		} else {
			return this.getRuleContext(i, After_opsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_stmt) {
			listener.enterSelect_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_stmt) {
			listener.exitSelect_stmt(this);
		}
	}
}


export class After_opsContext extends ParserRuleContext {
	public orderby_clause(): Orderby_clauseContext | undefined {
		return this.tryGetRuleContext(0, Orderby_clauseContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LIMIT, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALL, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OFFSET, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWS, 0); }
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FETCH, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEXT, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.KEY, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SHARE, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext[];
	public schema_qualified_name(i: number): Schema_qualified_nameContext;
	public schema_qualified_name(i?: number): Schema_qualified_nameContext | Schema_qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_qualified_nameContext);
		} else {
			return this.getRuleContext(i, Schema_qualified_nameContext);
		}
	}
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOWAIT, 0); }
	public SKIP_(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SKIP_, 0); }
	public LOCKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOCKED, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_after_ops; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAfter_ops) {
			listener.enterAfter_ops(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAfter_ops) {
			listener.exitAfter_ops(this);
		}
	}
}


export class Select_stmt_no_parensContext extends ParserRuleContext {
	public select_ops_no_parens(): Select_ops_no_parensContext {
		return this.getRuleContext(0, Select_ops_no_parensContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public after_ops(): After_opsContext[];
	public after_ops(i: number): After_opsContext;
	public after_ops(i?: number): After_opsContext | After_opsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(After_opsContext);
		} else {
			return this.getRuleContext(i, After_opsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_stmt_no_parens; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_stmt_no_parens) {
			listener.enterSelect_stmt_no_parens(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_stmt_no_parens) {
			listener.exitSelect_stmt_no_parens(this);
		}
	}
}


export class With_clauseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(PLpgSQLParser.WITH, 0); }
	public with_query(): With_queryContext[];
	public with_query(i: number): With_queryContext;
	public with_query(i?: number): With_queryContext | With_queryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(With_queryContext);
		} else {
			return this.getRuleContext(i, With_queryContext);
		}
	}
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RECURSIVE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_with_clause; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterWith_clause) {
			listener.enterWith_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitWith_clause) {
			listener.exitWith_clause(this);
		}
	}
}


export class With_queryContext extends ParserRuleContext {
	public _query_name: IdentifierContext;
	public _identifier: IdentifierContext;
	public _column_name: IdentifierContext[] = [];
	public AS(): TerminalNode { return this.getToken(PLpgSQLParser.AS, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public data_statement(): Data_statementContext {
		return this.getRuleContext(0, Data_statementContext);
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MATERIALIZED, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_with_query; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterWith_query) {
			listener.enterWith_query(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitWith_query) {
			listener.exitWith_query(this);
		}
	}
}


export class Select_opsContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public select_ops(): Select_opsContext[];
	public select_ops(i: number): Select_opsContext;
	public select_ops(i?: number): Select_opsContext | Select_opsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_opsContext);
		} else {
			return this.getRuleContext(i, Select_opsContext);
		}
	}
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERSECT, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNION, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPT, 0); }
	public set_qualifier(): Set_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Set_qualifierContext);
	}
	public select_primary(): Select_primaryContext | undefined {
		return this.tryGetRuleContext(0, Select_primaryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_ops; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_ops) {
			listener.enterSelect_ops(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_ops) {
			listener.exitSelect_ops(this);
		}
	}
}


export class Select_ops_no_parensContext extends ParserRuleContext {
	public select_ops(): Select_opsContext | undefined {
		return this.tryGetRuleContext(0, Select_opsContext);
	}
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERSECT, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNION, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPT, 0); }
	public select_primary(): Select_primaryContext | undefined {
		return this.tryGetRuleContext(0, Select_primaryContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public set_qualifier(): Set_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Set_qualifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_ops_no_parens; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_ops_no_parens) {
			listener.enterSelect_ops_no_parens(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_ops_no_parens) {
			listener.exitSelect_ops_no_parens(this);
		}
	}
}


export class Select_primaryContext extends ParserRuleContext {
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SELECT, 0); }
	public set_qualifier(): Set_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Set_qualifierContext);
	}
	public select_list(): Select_listContext | undefined {
		return this.tryGetRuleContext(0, Select_listContext);
	}
	public into_table(): Into_tableContext | undefined {
		return this.tryGetRuleContext(0, Into_tableContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public groupby_clause(): Groupby_clauseContext | undefined {
		return this.tryGetRuleContext(0, Groupby_clauseContext);
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HAVING, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WINDOW, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.AS);
		} else {
			return this.getToken(PLpgSQLParser.AS, i);
		}
	}
	public window_definition(): Window_definitionContext[];
	public window_definition(i: number): Window_definitionContext;
	public window_definition(i?: number): Window_definitionContext | Window_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_definitionContext);
		} else {
			return this.getRuleContext(i, Window_definitionContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_primary; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_primary) {
			listener.enterSelect_primary(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_primary) {
			listener.exitSelect_primary(this);
		}
	}
}


export class Select_listContext extends ParserRuleContext {
	public select_sublist(): Select_sublistContext[];
	public select_sublist(i: number): Select_sublistContext;
	public select_sublist(i?: number): Select_sublistContext | Select_sublistContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_sublistContext);
		} else {
			return this.getRuleContext(i, Select_sublistContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_list) {
			listener.enterSelect_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_list) {
			listener.exitSelect_list(this);
		}
	}
}


export class Select_sublistContext extends ParserRuleContext {
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public col_label(): Col_labelContext | undefined {
		return this.tryGetRuleContext(0, Col_labelContext);
	}
	public id_token(): Id_tokenContext | undefined {
		return this.tryGetRuleContext(0, Id_tokenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_select_sublist; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSelect_sublist) {
			listener.enterSelect_sublist(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSelect_sublist) {
			listener.exitSelect_sublist(this);
		}
	}
}


export class Into_tableContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(PLpgSQLParser.INTO, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TEMP, 0); }
	public UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNLOGGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_into_table; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterInto_table) {
			listener.enterInto_table(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitInto_table) {
			listener.exitInto_table(this);
		}
	}
}


export class From_itemContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public alias_clause(): Alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alias_clauseContext);
	}
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CROSS, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.JOIN, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public INNER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INNER, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FULL, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OUTER, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public names_in_parens(): Names_in_parensContext | undefined {
		return this.tryGetRuleContext(0, Names_in_parensContext);
	}
	public NATURAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NATURAL, 0); }
	public from_primary(): From_primaryContext | undefined {
		return this.tryGetRuleContext(0, From_primaryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_from_item; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFrom_item) {
			listener.enterFrom_item(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFrom_item) {
			listener.exitFrom_item(this);
		}
	}
}


export class From_primaryContext extends ParserRuleContext {
	public _method: IdentifierContext;
	public _alias: IdentifierContext;
	public _identifier: IdentifierContext;
	public _column_alias: IdentifierContext[] = [];
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public alias_clause(): Alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alias_clauseContext);
	}
	public TABLESAMPLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLESAMPLE, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REPEATABLE, 0); }
	public table_subquery(): Table_subqueryContext | undefined {
		return this.tryGetRuleContext(0, Table_subqueryContext);
	}
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LATERAL, 0); }
	public function_call(): Function_callContext[];
	public function_call(i: number): Function_callContext;
	public function_call(i?: number): Function_callContext | Function_callContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_callContext);
		} else {
			return this.getRuleContext(i, Function_callContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WITH, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ORDINALITY, 0); }
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.AS);
		} else {
			return this.getToken(PLpgSQLParser.AS, i);
		}
	}
	public from_function_column_def(): From_function_column_defContext[];
	public from_function_column_def(i: number): From_function_column_defContext;
	public from_function_column_def(i?: number): From_function_column_defContext | From_function_column_defContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_function_column_defContext);
		} else {
			return this.getRuleContext(i, From_function_column_defContext);
		}
	}
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_from_primary; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFrom_primary) {
			listener.enterFrom_primary(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFrom_primary) {
			listener.exitFrom_primary(this);
		}
	}
}


export class Alias_clauseContext extends ParserRuleContext {
	public _alias: IdentifierContext;
	public _identifier: IdentifierContext;
	public _column_alias: IdentifierContext[] = [];
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_alias_clause; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAlias_clause) {
			listener.enterAlias_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAlias_clause) {
			listener.exitAlias_clause(this);
		}
	}
}


export class From_function_column_defContext extends ParserRuleContext {
	public _identifier: IdentifierContext;
	public _column_alias: IdentifierContext[] = [];
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_from_function_column_def; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFrom_function_column_def) {
			listener.enterFrom_function_column_def(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFrom_function_column_def) {
			listener.exitFrom_function_column_def(this);
		}
	}
}


export class Groupby_clauseContext extends ParserRuleContext {
	public GROUP(): TerminalNode { return this.getToken(PLpgSQLParser.GROUP, 0); }
	public BY(): TerminalNode { return this.getToken(PLpgSQLParser.BY, 0); }
	public grouping_element_list(): Grouping_element_listContext {
		return this.getRuleContext(0, Grouping_element_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_groupby_clause; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterGroupby_clause) {
			listener.enterGroupby_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitGroupby_clause) {
			listener.exitGroupby_clause(this);
		}
	}
}


export class Grouping_element_listContext extends ParserRuleContext {
	public grouping_element(): Grouping_elementContext[];
	public grouping_element(i: number): Grouping_elementContext;
	public grouping_element(i?: number): Grouping_elementContext | Grouping_elementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Grouping_elementContext);
		} else {
			return this.getRuleContext(i, Grouping_elementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_grouping_element_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterGrouping_element_list) {
			listener.enterGrouping_element_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitGrouping_element_list) {
			listener.exitGrouping_element_list(this);
		}
	}
}


export class Grouping_elementContext extends ParserRuleContext {
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public grouping_element_list(): Grouping_element_listContext | undefined {
		return this.tryGetRuleContext(0, Grouping_element_listContext);
	}
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLLUP, 0); }
	public CUBE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CUBE, 0); }
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GROUPING, 0); }
	public SETS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SETS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_grouping_element; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterGrouping_element) {
			listener.enterGrouping_element(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitGrouping_element) {
			listener.exitGrouping_element(this);
		}
	}
}


export class Values_stmtContext extends ParserRuleContext {
	public VALUES(): TerminalNode { return this.getToken(PLpgSQLParser.VALUES, 0); }
	public values_values(): Values_valuesContext[];
	public values_values(i: number): Values_valuesContext;
	public values_values(i?: number): Values_valuesContext | Values_valuesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Values_valuesContext);
		} else {
			return this.getRuleContext(i, Values_valuesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_values_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterValues_stmt) {
			listener.enterValues_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitValues_stmt) {
			listener.exitValues_stmt(this);
		}
	}
}


export class Values_valuesContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DEFAULT);
		} else {
			return this.getToken(PLpgSQLParser.DEFAULT, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_values_values; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterValues_values) {
			listener.enterValues_values(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitValues_values) {
			listener.exitValues_values(this);
		}
	}
}


export class Orderby_clauseContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(PLpgSQLParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(PLpgSQLParser.BY, 0); }
	public sort_specifier_list(): Sort_specifier_listContext {
		return this.getRuleContext(0, Sort_specifier_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_orderby_clause; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOrderby_clause) {
			listener.enterOrderby_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOrderby_clause) {
			listener.exitOrderby_clause(this);
		}
	}
}


export class Sort_specifier_listContext extends ParserRuleContext {
	public sort_specifier(): Sort_specifierContext[];
	public sort_specifier(i: number): Sort_specifierContext;
	public sort_specifier(i?: number): Sort_specifierContext | Sort_specifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_specifierContext);
		} else {
			return this.getRuleContext(i, Sort_specifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_sort_specifier_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSort_specifier_list) {
			listener.enterSort_specifier_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSort_specifier_list) {
			listener.exitSort_specifier_list(this);
		}
	}
}


export class Sort_specifierContext extends ParserRuleContext {
	public _key: VexContext;
	public _opclass: Schema_qualified_nameContext;
	public _order: Order_specificationContext;
	public _null_order: Null_orderingContext;
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public order_specification(): Order_specificationContext | undefined {
		return this.tryGetRuleContext(0, Order_specificationContext);
	}
	public null_ordering(): Null_orderingContext | undefined {
		return this.tryGetRuleContext(0, Null_orderingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_sort_specifier; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterSort_specifier) {
			listener.enterSort_specifier(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitSort_specifier) {
			listener.exitSort_specifier(this);
		}
	}
}


export class Order_specificationContext extends ParserRuleContext {
	public ASC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DESC, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public all_op_ref(): All_op_refContext | undefined {
		return this.tryGetRuleContext(0, All_op_refContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_order_specification; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOrder_specification) {
			listener.enterOrder_specification(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOrder_specification) {
			listener.exitOrder_specification(this);
		}
	}
}


export class Null_orderingContext extends ParserRuleContext {
	public NULLS(): TerminalNode { return this.getToken(PLpgSQLParser.NULLS, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_null_ordering; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterNull_ordering) {
			listener.enterNull_ordering(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitNull_ordering) {
			listener.exitNull_ordering(this);
		}
	}
}


export class Insert_stmt_for_psqlContext extends ParserRuleContext {
	public _insert_table_name: Schema_qualified_nameContext;
	public _alias: IdentifierContext;
	public INSERT(): TerminalNode { return this.getToken(PLpgSQLParser.INSERT, 0); }
	public INTO(): TerminalNode { return this.getToken(PLpgSQLParser.INTO, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALUES, 0); }
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public OVERRIDING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OVERRIDING, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.VALUE, 0); }
	public insert_columns(): Insert_columnsContext | undefined {
		return this.tryGetRuleContext(0, Insert_columnsContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public CONFLICT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONFLICT, 0); }
	public conflict_action(): Conflict_actionContext | undefined {
		return this.tryGetRuleContext(0, Conflict_actionContext);
	}
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNING, 0); }
	public select_list(): Select_listContext | undefined {
		return this.tryGetRuleContext(0, Select_listContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SYSTEM, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USER, 0); }
	public conflict_object(): Conflict_objectContext | undefined {
		return this.tryGetRuleContext(0, Conflict_objectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_insert_stmt_for_psql; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterInsert_stmt_for_psql) {
			listener.enterInsert_stmt_for_psql(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitInsert_stmt_for_psql) {
			listener.exitInsert_stmt_for_psql(this);
		}
	}
}


export class Insert_columnsContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public indirection_identifier(): Indirection_identifierContext[];
	public indirection_identifier(i: number): Indirection_identifierContext;
	public indirection_identifier(i?: number): Indirection_identifierContext | Indirection_identifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Indirection_identifierContext);
		} else {
			return this.getRuleContext(i, Indirection_identifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_insert_columns; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterInsert_columns) {
			listener.enterInsert_columns(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitInsert_columns) {
			listener.exitInsert_columns(this);
		}
	}
}


export class Indirection_identifierContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public indirection_list(): Indirection_listContext | undefined {
		return this.tryGetRuleContext(0, Indirection_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_indirection_identifier; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIndirection_identifier) {
			listener.enterIndirection_identifier(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIndirection_identifier) {
			listener.exitIndirection_identifier(this);
		}
	}
}


export class Conflict_objectContext extends ParserRuleContext {
	public index_sort(): Index_sortContext | undefined {
		return this.tryGetRuleContext(0, Index_sortContext);
	}
	public index_where(): Index_whereContext | undefined {
		return this.tryGetRuleContext(0, Index_whereContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_conflict_object; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterConflict_object) {
			listener.enterConflict_object(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitConflict_object) {
			listener.exitConflict_object(this);
		}
	}
}


export class Conflict_actionContext extends ParserRuleContext {
	public DO(): TerminalNode { return this.getToken(PLpgSQLParser.DO, 0); }
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTHING, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UPDATE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SET, 0); }
	public update_set(): Update_setContext[];
	public update_set(i: number): Update_setContext;
	public update_set(i?: number): Update_setContext | Update_setContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Update_setContext);
		} else {
			return this.getRuleContext(i, Update_setContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_conflict_action; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterConflict_action) {
			listener.enterConflict_action(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitConflict_action) {
			listener.exitConflict_action(this);
		}
	}
}


export class Delete_stmt_for_psqlContext extends ParserRuleContext {
	public _delete_table_name: Schema_qualified_nameContext;
	public _alias: IdentifierContext;
	public _cursor: IdentifierContext;
	public DELETE(): TerminalNode { return this.getToken(PLpgSQLParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(PLpgSQLParser.FROM, 0); }
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.USING, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNING, 0); }
	public select_list(): Select_listContext | undefined {
		return this.tryGetRuleContext(0, Select_listContext);
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_delete_stmt_for_psql; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDelete_stmt_for_psql) {
			listener.enterDelete_stmt_for_psql(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDelete_stmt_for_psql) {
			listener.exitDelete_stmt_for_psql(this);
		}
	}
}


export class Update_stmt_for_psqlContext extends ParserRuleContext {
	public _update_table_name: Schema_qualified_nameContext;
	public _alias: IdentifierContext;
	public _cursor: IdentifierContext;
	public UPDATE(): TerminalNode { return this.getToken(PLpgSQLParser.UPDATE, 0); }
	public SET(): TerminalNode { return this.getToken(PLpgSQLParser.SET, 0); }
	public update_set(): Update_setContext[];
	public update_set(i: number): Update_setContext;
	public update_set(i?: number): Update_setContext | Update_setContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Update_setContext);
		} else {
			return this.getRuleContext(i, Update_setContext);
		}
	}
	public schema_qualified_name(): Schema_qualified_nameContext {
		return this.getRuleContext(0, Schema_qualified_nameContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ONLY, 0); }
	public MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MULTIPLY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RETURNING, 0); }
	public select_list(): Select_listContext | undefined {
		return this.tryGetRuleContext(0, Select_listContext);
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OF, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_update_stmt_for_psql; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUpdate_stmt_for_psql) {
			listener.enterUpdate_stmt_for_psql(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUpdate_stmt_for_psql) {
			listener.exitUpdate_stmt_for_psql(this);
		}
	}
}


export class Update_setContext extends ParserRuleContext {
	public _indirection_identifier: Indirection_identifierContext;
	public _column: Indirection_identifierContext[] = [];
	public _vex: VexContext;
	public _value: VexContext[] = [];
	public EQUAL(): TerminalNode { return this.getToken(PLpgSQLParser.EQUAL, 0); }
	public indirection_identifier(): Indirection_identifierContext[];
	public indirection_identifier(i: number): Indirection_identifierContext;
	public indirection_identifier(i?: number): Indirection_identifierContext | Indirection_identifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Indirection_identifierContext);
		} else {
			return this.getRuleContext(i, Indirection_identifierContext);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DEFAULT);
		} else {
			return this.getToken(PLpgSQLParser.DEFAULT, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_PAREN);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
	}
	public table_subquery(): Table_subqueryContext | undefined {
		return this.tryGetRuleContext(0, Table_subqueryContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_update_set; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUpdate_set) {
			listener.enterUpdate_set(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUpdate_set) {
			listener.exitUpdate_set(this);
		}
	}
}


export class Notify_stmtContext extends ParserRuleContext {
	public _channel: IdentifierContext;
	public _payload: Character_stringContext;
	public NOTIFY(): TerminalNode { return this.getToken(PLpgSQLParser.NOTIFY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMA, 0); }
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_notify_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterNotify_stmt) {
			listener.enterNotify_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitNotify_stmt) {
			listener.exitNotify_stmt(this);
		}
	}
}


export class Truncate_stmtContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(PLpgSQLParser.TRUNCATE, 0); }
	public only_table_multiply(): Only_table_multiplyContext[];
	public only_table_multiply(i: number): Only_table_multiplyContext;
	public only_table_multiply(i?: number): Only_table_multiplyContext | Only_table_multiplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Only_table_multiplyContext);
		} else {
			return this.getRuleContext(i, Only_table_multiplyContext);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IDENTITY, 0); }
	public cascade_restrict(): Cascade_restrictContext | undefined {
		return this.tryGetRuleContext(0, Cascade_restrictContext);
	}
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RESTART, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_truncate_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTruncate_stmt) {
			listener.enterTruncate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTruncate_stmt) {
			listener.exitTruncate_stmt(this);
		}
	}
}


export class Identifier_listContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_identifier_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIdentifier_list) {
			listener.enterIdentifier_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIdentifier_list) {
			listener.exitIdentifier_list(this);
		}
	}
}


export class Anonymous_blockContext extends ParserRuleContext {
	public DO(): TerminalNode { return this.getToken(PLpgSQLParser.DO, 0); }
	public character_string(): Character_stringContext[];
	public character_string(i: number): Character_stringContext;
	public character_string(i?: number): Character_stringContext | Character_stringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Character_stringContext);
		} else {
			return this.getRuleContext(i, Character_stringContext);
		}
	}
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_anonymous_block; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAnonymous_block) {
			listener.enterAnonymous_block(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAnonymous_block) {
			listener.exitAnonymous_block(this);
		}
	}
}


export class Comp_optionsContext extends ParserRuleContext {
	public HASH_SIGN(): TerminalNode { return this.getToken(PLpgSQLParser.HASH_SIGN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public truth_value(): Truth_valueContext | undefined {
		return this.tryGetRuleContext(0, Truth_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_comp_options; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterComp_options) {
			listener.enterComp_options(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitComp_options) {
			listener.exitComp_options(this);
		}
	}
}


export class Function_blockContext extends ParserRuleContext {
	public _end_label: IdentifierContext;
	public BEGIN(): TerminalNode { return this.getToken(PLpgSQLParser.BEGIN, 0); }
	public function_statements(): Function_statementsContext {
		return this.getRuleContext(0, Function_statementsContext);
	}
	public END(): TerminalNode { return this.getToken(PLpgSQLParser.END, 0); }
	public start_label(): Start_labelContext | undefined {
		return this.tryGetRuleContext(0, Start_labelContext);
	}
	public declarations(): DeclarationsContext | undefined {
		return this.tryGetRuleContext(0, DeclarationsContext);
	}
	public exception_statement(): Exception_statementContext | undefined {
		return this.tryGetRuleContext(0, Exception_statementContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_block; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_block) {
			listener.enterFunction_block(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_block) {
			listener.exitFunction_block(this);
		}
	}
}


export class Start_labelContext extends ParserRuleContext {
	public LESS_LESS(): TerminalNode { return this.getToken(PLpgSQLParser.LESS_LESS, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public GREATER_GREATER(): TerminalNode { return this.getToken(PLpgSQLParser.GREATER_GREATER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_start_label; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterStart_label) {
			listener.enterStart_label(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitStart_label) {
			listener.exitStart_label(this);
		}
	}
}


export class DeclarationsContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(PLpgSQLParser.DECLARE, 0); }
	public declaration(): DeclarationContext[];
	public declaration(i: number): DeclarationContext;
	public declaration(i?: number): DeclarationContext | DeclarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclarationContext);
		} else {
			return this.getRuleContext(i, DeclarationContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_declarations; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDeclarations) {
			listener.enterDeclarations(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDeclarations) {
			listener.exitDeclarations(this);
		}
	}
}


export class DeclarationContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type_declaration(): Type_declarationContext {
		return this.getRuleContext(0, Type_declarationContext);
	}
	public SEMI_COLON(): TerminalNode { return this.getToken(PLpgSQLParser.SEMI_COLON, 0); }
	public DECLARE(): TerminalNode[];
	public DECLARE(i: number): TerminalNode;
	public DECLARE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.DECLARE);
		} else {
			return this.getToken(PLpgSQLParser.DECLARE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_declaration; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDeclaration) {
			listener.enterDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDeclaration) {
			listener.exitDeclaration(this);
		}
	}
}


export class Type_declarationContext extends ParserRuleContext {
	public data_type_dec(): Data_type_decContext | undefined {
		return this.tryGetRuleContext(0, Data_type_decContext);
	}
	public CONSTANT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTANT, 0); }
	public collate_identifier(): Collate_identifierContext | undefined {
		return this.tryGetRuleContext(0, Collate_identifierContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEFAULT, 0); }
	public COLON_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLON_EQUAL, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ALIAS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DOLLAR_NUMBER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOLLAR_NUMBER, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURSOR, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IS, 0); }
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCROLL, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public arguments_list(): Arguments_listContext | undefined {
		return this.tryGetRuleContext(0, Arguments_listContext);
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_type_declaration; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterType_declaration) {
			listener.enterType_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitType_declaration) {
			listener.exitType_declaration(this);
		}
	}
}


export class Arguments_listContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_arguments_list; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterArguments_list) {
			listener.enterArguments_list(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitArguments_list) {
			listener.exitArguments_list(this);
		}
	}
}


export class Data_type_decContext extends ParserRuleContext {
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public MODULAR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MODULAR, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TYPE, 0); }
	public schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_name_nontypeContext);
	}
	public ROWTYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROWTYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_data_type_dec; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterData_type_dec) {
			listener.enterData_type_dec(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitData_type_dec) {
			listener.exitData_type_dec(this);
		}
	}
}


export class Exception_statementContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(PLpgSQLParser.EXCEPTION, 0); }
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WHEN);
		} else {
			return this.getToken(PLpgSQLParser.WHEN, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.THEN);
		} else {
			return this.getToken(PLpgSQLParser.THEN, i);
		}
	}
	public function_statements(): Function_statementsContext[];
	public function_statements(i: number): Function_statementsContext;
	public function_statements(i?: number): Function_statementsContext | Function_statementsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statementsContext);
		} else {
			return this.getRuleContext(i, Function_statementsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_exception_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterException_statement) {
			listener.enterException_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitException_statement) {
			listener.exitException_statement(this);
		}
	}
}


export class Function_statementsContext extends ParserRuleContext {
	public function_statement(): Function_statementContext[];
	public function_statement(i: number): Function_statementContext;
	public function_statement(i?: number): Function_statementContext | Function_statementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statementContext);
		} else {
			return this.getRuleContext(i, Function_statementContext);
		}
	}
	public SEMI_COLON(): TerminalNode[];
	public SEMI_COLON(i: number): TerminalNode;
	public SEMI_COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.SEMI_COLON);
		} else {
			return this.getToken(PLpgSQLParser.SEMI_COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_statements; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_statements) {
			listener.enterFunction_statements(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_statements) {
			listener.exitFunction_statements(this);
		}
	}
}


export class Function_statementContext extends ParserRuleContext {
	public function_block(): Function_blockContext | undefined {
		return this.tryGetRuleContext(0, Function_blockContext);
	}
	public base_statement(): Base_statementContext | undefined {
		return this.tryGetRuleContext(0, Base_statementContext);
	}
	public control_statement(): Control_statementContext | undefined {
		return this.tryGetRuleContext(0, Control_statementContext);
	}
	public transaction_statement(): Transaction_statementContext | undefined {
		return this.tryGetRuleContext(0, Transaction_statementContext);
	}
	public cursor_statement(): Cursor_statementContext | undefined {
		return this.tryGetRuleContext(0, Cursor_statementContext);
	}
	public message_statement(): Message_statementContext | undefined {
		return this.tryGetRuleContext(0, Message_statementContext);
	}
	public schema_statement(): Schema_statementContext | undefined {
		return this.tryGetRuleContext(0, Schema_statementContext);
	}
	public plpgsql_query(): Plpgsql_queryContext | undefined {
		return this.tryGetRuleContext(0, Plpgsql_queryContext);
	}
	public additional_statement(): Additional_statementContext | undefined {
		return this.tryGetRuleContext(0, Additional_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_function_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterFunction_statement) {
			listener.enterFunction_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitFunction_statement) {
			listener.exitFunction_statement(this);
		}
	}
}


export class Base_statementContext extends ParserRuleContext {
	public assign_stmt(): Assign_stmtContext | undefined {
		return this.tryGetRuleContext(0, Assign_stmtContext);
	}
	public PERFORM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.PERFORM, 0); }
	public perform_stmt(): Perform_stmtContext | undefined {
		return this.tryGetRuleContext(0, Perform_stmtContext);
	}
	public GET(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.GET, 0); }
	public DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DIAGNOSTICS, 0); }
	public diagnostic_option(): Diagnostic_optionContext[];
	public diagnostic_option(i: number): Diagnostic_optionContext;
	public diagnostic_option(i?: number): Diagnostic_optionContext | Diagnostic_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Diagnostic_optionContext);
		} else {
			return this.getRuleContext(i, Diagnostic_optionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CURRENT, 0); }
	public STACKED(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.STACKED, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_base_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterBase_statement) {
			listener.enterBase_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitBase_statement) {
			listener.exitBase_statement(this);
		}
	}
}


export class VarContext extends ParserRuleContext {
	public schema_qualified_name(): Schema_qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Schema_qualified_nameContext);
	}
	public DOLLAR_NUMBER(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOLLAR_NUMBER, 0); }
	public LEFT_BRACKET(): TerminalNode[];
	public LEFT_BRACKET(i: number): TerminalNode;
	public LEFT_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LEFT_BRACKET);
		} else {
			return this.getToken(PLpgSQLParser.LEFT_BRACKET, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public RIGHT_BRACKET(): TerminalNode[];
	public RIGHT_BRACKET(i: number): TerminalNode;
	public RIGHT_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.RIGHT_BRACKET);
		} else {
			return this.getToken(PLpgSQLParser.RIGHT_BRACKET, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_var; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterVar) {
			listener.enterVar(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitVar) {
			listener.exitVar(this);
		}
	}
}


export class Diagnostic_optionContext extends ParserRuleContext {
	public var(): VarContext {
		return this.getRuleContext(0, VarContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public COLON_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLON_EQUAL, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_diagnostic_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterDiagnostic_option) {
			listener.enterDiagnostic_option(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitDiagnostic_option) {
			listener.exitDiagnostic_option(this);
		}
	}
}


export class Perform_stmtContext extends ParserRuleContext {
	public select_list(): Select_listContext {
		return this.getRuleContext(0, Select_listContext);
	}
	public set_qualifier(): Set_qualifierContext[];
	public set_qualifier(i: number): Set_qualifierContext;
	public set_qualifier(i?: number): Set_qualifierContext | Set_qualifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Set_qualifierContext);
		} else {
			return this.getRuleContext(i, Set_qualifierContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHERE, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public groupby_clause(): Groupby_clauseContext | undefined {
		return this.tryGetRuleContext(0, Groupby_clauseContext);
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HAVING, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WINDOW, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.AS);
		} else {
			return this.getToken(PLpgSQLParser.AS, i);
		}
	}
	public window_definition(): Window_definitionContext[];
	public window_definition(i: number): Window_definitionContext;
	public window_definition(i?: number): Window_definitionContext | Window_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_definitionContext);
		} else {
			return this.getRuleContext(i, Window_definitionContext);
		}
	}
	public select_ops(): Select_opsContext | undefined {
		return this.tryGetRuleContext(0, Select_opsContext);
	}
	public after_ops(): After_opsContext[];
	public after_ops(i: number): After_opsContext;
	public after_ops(i?: number): After_opsContext | After_opsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(After_opsContext);
		} else {
			return this.getRuleContext(i, After_opsContext);
		}
	}
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INTERSECT, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.UNION, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ON, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_perform_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPerform_stmt) {
			listener.enterPerform_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPerform_stmt) {
			listener.exitPerform_stmt(this);
		}
	}
}


export class Assign_stmtContext extends ParserRuleContext {
	public var(): VarContext {
		return this.getRuleContext(0, VarContext);
	}
	public COLON_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLON_EQUAL, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EQUAL, 0); }
	public select_stmt_no_parens(): Select_stmt_no_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_stmt_no_parensContext);
	}
	public perform_stmt(): Perform_stmtContext | undefined {
		return this.tryGetRuleContext(0, Perform_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_assign_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterAssign_stmt) {
			listener.enterAssign_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitAssign_stmt) {
			listener.exitAssign_stmt(this);
		}
	}
}


export class Execute_stmtContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(PLpgSQLParser.EXECUTE, 0); }
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public using_vex(): Using_vexContext | undefined {
		return this.tryGetRuleContext(0, Using_vexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_execute_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterExecute_stmt) {
			listener.enterExecute_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitExecute_stmt) {
			listener.exitExecute_stmt(this);
		}
	}
}


export class Control_statementContext extends ParserRuleContext {
	public return_stmt(): Return_stmtContext | undefined {
		return this.tryGetRuleContext(0, Return_stmtContext);
	}
	public CALL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CALL, 0); }
	public function_call(): Function_callContext | undefined {
		return this.tryGetRuleContext(0, Function_callContext);
	}
	public if_statement(): If_statementContext | undefined {
		return this.tryGetRuleContext(0, If_statementContext);
	}
	public case_statement(): Case_statementContext | undefined {
		return this.tryGetRuleContext(0, Case_statementContext);
	}
	public loop_statement(): Loop_statementContext | undefined {
		return this.tryGetRuleContext(0, Loop_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_control_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterControl_statement) {
			listener.enterControl_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitControl_statement) {
			listener.exitControl_statement(this);
		}
	}
}


export class Cursor_statementContext extends ParserRuleContext {
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.OPEN, 0); }
	public var(): VarContext {
		return this.getRuleContext(0, VarContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public plpgsql_query(): Plpgsql_queryContext | undefined {
		return this.tryGetRuleContext(0, Plpgsql_queryContext);
	}
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCROLL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public option(): OptionContext[];
	public option(i: number): OptionContext;
	public option(i?: number): OptionContext | OptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OptionContext);
		} else {
			return this.getRuleContext(i, OptionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FETCH, 0); }
	public fetch_move_direction(): Fetch_move_directionContext | undefined {
		return this.tryGetRuleContext(0, Fetch_move_directionContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MOVE, 0); }
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CLOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_cursor_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCursor_statement) {
			listener.enterCursor_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCursor_statement) {
			listener.exitCursor_statement(this);
		}
	}
}


export class OptionContext extends ParserRuleContext {
	public vex(): VexContext {
		return this.getRuleContext(0, VexContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public COLON_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLON_EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_option; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterOption) {
			listener.enterOption(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitOption) {
			listener.exitOption(this);
		}
	}
}


export class Transaction_statementContext extends ParserRuleContext {
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COMMIT, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ROLLBACK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CHAIN, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NO, 0); }
	public lock_table(): Lock_tableContext | undefined {
		return this.tryGetRuleContext(0, Lock_tableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_transaction_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterTransaction_statement) {
			listener.enterTransaction_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitTransaction_statement) {
			listener.exitTransaction_statement(this);
		}
	}
}


export class Message_statementContext extends ParserRuleContext {
	public RAISE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RAISE, 0); }
	public log_level(): Log_levelContext | undefined {
		return this.tryGetRuleContext(0, Log_levelContext);
	}
	public character_string(): Character_stringContext | undefined {
		return this.tryGetRuleContext(0, Character_stringContext);
	}
	public raise_using(): Raise_usingContext | undefined {
		return this.tryGetRuleContext(0, Raise_usingContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SQLSTATE, 0); }
	public ASSERT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ASSERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_message_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterMessage_statement) {
			listener.enterMessage_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitMessage_statement) {
			listener.exitMessage_statement(this);
		}
	}
}


export class Log_levelContext extends ParserRuleContext {
	public DEBUG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DEBUG, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LOG, 0); }
	public INFO(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.INFO, 0); }
	public NOTICE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NOTICE, 0); }
	public WARNING(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WARNING, 0); }
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXCEPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_log_level; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLog_level) {
			listener.enterLog_level(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLog_level) {
			listener.exitLog_level(this);
		}
	}
}


export class Raise_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public raise_param(): Raise_paramContext[];
	public raise_param(i: number): Raise_paramContext;
	public raise_param(i?: number): Raise_paramContext | Raise_paramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Raise_paramContext);
		} else {
			return this.getRuleContext(i, Raise_paramContext);
		}
	}
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.EQUAL);
		} else {
			return this.getToken(PLpgSQLParser.EQUAL, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_raise_using; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRaise_using) {
			listener.enterRaise_using(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRaise_using) {
			listener.exitRaise_using(this);
		}
	}
}


export class Raise_paramContext extends ParserRuleContext {
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.MESSAGE, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DETAIL, 0); }
	public HINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.HINT, 0); }
	public ERRCODE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ERRCODE, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.COLUMN, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONSTRAINT, 0); }
	public DATATYPE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DATATYPE, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.TABLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_raise_param; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterRaise_param) {
			listener.enterRaise_param(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitRaise_param) {
			listener.exitRaise_param(this);
		}
	}
}


export class Return_stmtContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(PLpgSQLParser.RETURN, 0); }
	public perform_stmt(): Perform_stmtContext | undefined {
		return this.tryGetRuleContext(0, Perform_stmtContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NEXT, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.QUERY, 0); }
	public plpgsql_query(): Plpgsql_queryContext | undefined {
		return this.tryGetRuleContext(0, Plpgsql_queryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_return_stmt; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterReturn_stmt) {
			listener.enterReturn_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitReturn_stmt) {
			listener.exitReturn_stmt(this);
		}
	}
}


export class Loop_statementContext extends ParserRuleContext {
	public LOOP(): TerminalNode[];
	public LOOP(i: number): TerminalNode;
	public LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.LOOP);
		} else {
			return this.getToken(PLpgSQLParser.LOOP, i);
		}
	}
	public function_statements(): Function_statementsContext | undefined {
		return this.tryGetRuleContext(0, Function_statementsContext);
	}
	public END(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.END, 0); }
	public start_label(): Start_labelContext | undefined {
		return this.tryGetRuleContext(0, Start_labelContext);
	}
	public loop_start(): Loop_startContext | undefined {
		return this.tryGetRuleContext(0, Loop_startContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public EXIT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.EXIT, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.CONTINUE, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHEN, 0); }
	public vex(): VexContext | undefined {
		return this.tryGetRuleContext(0, VexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_loop_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLoop_statement) {
			listener.enterLoop_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLoop_statement) {
			listener.exitLoop_statement(this);
		}
	}
}


export class Loop_startContext extends ParserRuleContext {
	public _alias: IdentifierContext;
	public _cursor: IdentifierContext;
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.WHILE, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOR, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.IN, 0); }
	public DOUBLE_DOT(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.DOUBLE_DOT, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.REVERSE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.BY, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public plpgsql_query(): Plpgsql_queryContext | undefined {
		return this.tryGetRuleContext(0, Plpgsql_queryContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.LEFT_PAREN, 0); }
	public option(): OptionContext[];
	public option(i: number): OptionContext;
	public option(i?: number): OptionContext | OptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OptionContext);
		} else {
			return this.getRuleContext(i, OptionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	public FOREACH(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.FOREACH, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ARRAY, 0); }
	public SLICE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.SLICE, 0); }
	public NUMBER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_loop_start; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterLoop_start) {
			listener.enterLoop_start(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitLoop_start) {
			listener.exitLoop_start(this);
		}
	}
}


export class Using_vexContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(PLpgSQLParser.USING, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_using_vex; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterUsing_vex) {
			listener.enterUsing_vex(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitUsing_vex) {
			listener.exitUsing_vex(this);
		}
	}
}


export class If_statementContext extends ParserRuleContext {
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.IF);
		} else {
			return this.getToken(PLpgSQLParser.IF, i);
		}
	}
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.THEN);
		} else {
			return this.getToken(PLpgSQLParser.THEN, i);
		}
	}
	public function_statements(): Function_statementsContext[];
	public function_statements(i: number): Function_statementsContext;
	public function_statements(i?: number): Function_statementsContext | Function_statementsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statementsContext);
		} else {
			return this.getRuleContext(i, Function_statementsContext);
		}
	}
	public END(): TerminalNode { return this.getToken(PLpgSQLParser.END, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELSE, 0); }
	public ELSIF(): TerminalNode[];
	public ELSIF(i: number): TerminalNode;
	public ELSIF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ELSIF);
		} else {
			return this.getToken(PLpgSQLParser.ELSIF, i);
		}
	}
	public ELSEIF(): TerminalNode[];
	public ELSEIF(i: number): TerminalNode;
	public ELSEIF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.ELSEIF);
		} else {
			return this.getToken(PLpgSQLParser.ELSEIF, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_if_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterIf_statement) {
			listener.enterIf_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitIf_statement) {
			listener.exitIf_statement(this);
		}
	}
}


export class Case_statementContext extends ParserRuleContext {
	public CASE(): TerminalNode[];
	public CASE(i: number): TerminalNode;
	public CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.CASE);
		} else {
			return this.getToken(PLpgSQLParser.CASE, i);
		}
	}
	public END(): TerminalNode { return this.getToken(PLpgSQLParser.END, 0); }
	public vex(): VexContext[];
	public vex(i: number): VexContext;
	public vex(i?: number): VexContext | VexContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VexContext);
		} else {
			return this.getRuleContext(i, VexContext);
		}
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.WHEN);
		} else {
			return this.getToken(PLpgSQLParser.WHEN, i);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.THEN);
		} else {
			return this.getToken(PLpgSQLParser.THEN, i);
		}
	}
	public function_statements(): Function_statementsContext[];
	public function_statements(i: number): Function_statementsContext;
	public function_statements(i?: number): Function_statementsContext | Function_statementsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statementsContext);
		} else {
			return this.getRuleContext(i, Function_statementsContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(PLpgSQLParser.ELSE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PLpgSQLParser.COMMA);
		} else {
			return this.getToken(PLpgSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_case_statement; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterCase_statement) {
			listener.enterCase_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitCase_statement) {
			listener.exitCase_statement(this);
		}
	}
}


export class Plpgsql_queryContext extends ParserRuleContext {
	public data_statement(): Data_statementContext | undefined {
		return this.tryGetRuleContext(0, Data_statementContext);
	}
	public execute_stmt(): Execute_stmtContext | undefined {
		return this.tryGetRuleContext(0, Execute_stmtContext);
	}
	public show_statement(): Show_statementContext | undefined {
		return this.tryGetRuleContext(0, Show_statementContext);
	}
	public explain_statement(): Explain_statementContext | undefined {
		return this.tryGetRuleContext(0, Explain_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PLpgSQLParser.RULE_plpgsql_query; }
	// @Override
	public enterRule(listener: PLpgSQLParserListener): void {
		if (listener.enterPlpgsql_query) {
			listener.enterPlpgsql_query(this);
		}
	}
	// @Override
	public exitRule(listener: PLpgSQLParserListener): void {
		if (listener.exitPlpgsql_query) {
			listener.exitPlpgsql_query(this);
		}
	}
}


